<?xml version="1.0" encoding="UTF-8"?>
<!--
this file belongs to bluefish, a web development environment
Copyright (C) 2002  Denny Reeh

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->
<chapter id="bluefish-ch-2">
  <title>Installing Bluefish</title>

  <sect1 id="bluefish-ch-2-sect-1">
    <title>Requirements</title>

    <para>Bluefish aims to be portable, that is, wherever GTK is ported. A
    comparatively small set of external libraries are necessary for it to
    work. Any recent GNU/Linux distribution or other *NIX with GTK2 installed
    should be sufficient. In addition to the list of requirements below, you
    may also want to look at <xref linkend="bluefish-ch-2-sect-3" />. Note:
    These requirements fit the GTK2-version. If you only have GTK1, you want
    the last GTK1-version, v0.7.</para>

    <para>The main requirements:</para>

    <itemizedlist>
      <listitem>
        gtk v2.0
      </listitem>

      <listitem>
        libpcre
      </listitem>
    </itemizedlist>

    <para>Optional requirements:</para>

    <itemizedlist>
      <listitem>
        gnome_vfs 

        <emphasis>- for remote file support</emphasis>

         
      </listitem>

      <listitem>
         libaspell 

        <emphasis>- spell checker</emphasis>

         
      </listitem>

      <listitem>
         grep &amp; find 

        <emphasis>- used by the advanced open dialog</emphasis>

        . 

        <remark>Remember to add link to the advanced open description</remark>

         
      </listitem>
    </itemizedlist>

    <para>Compiling Bluefish requires a few additional packages. (Remember
    that binary packages exists for many platforms. It is likely you won't
    need to compile ;-) ). Now, let's assume you want to compile, perhaps to
    get the latest and greatest from CVS. The requirements are as
    follows:</para>

    <itemizedlist>
      <listitem>
         Development files (header files, etc) for the packages above. 

        <emphasis>These are often distributed as separate packages. There is
        also a high probability you have these installed already.</emphasis>

         
      </listitem>

      <listitem>
         gcc 

        <emphasis>- Bluefish has been tested to compile on the 2.95 and 3.x
        branches.</emphasis>

         
      </listitem>

      <listitem>
         gmake or BSD make 
      </listitem>

      <listitem>
         autoconf 

        <emphasis>- only if you are going to compile from CVS</emphasis>

         
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="bluefish-ch-2-sect-2">
    <title>Quick Standard Installation</title>

    <para>There are two main methods for installing Bluefish: Compile from
    source or install a binary package. Binary installation is the easiest to
    do, so we'll cover that first. There are a few different approaches,
    caused by the differences between systems. We'll start off by summarizing
    a few really quick and simple approaches before dealing with this problem
    more extensively.</para>

    <itemizedlist>
      <listitem>
         Debian: 

        <userinput>su - &amp;&amp; apt-get update &amp;&amp; apt-get install
        bluefish</userinput>

         
      </listitem>

      <listitem>
         Red Hat, Mandrake (and other Linux distributions that support rpm): Download the latest .rpm from the bluefish website, 

        <systemitem class="url">http://bluefish.openoffice.nl/</systemitem>

         
      </listitem>

      <listitem>
         FreeBSD, NetBSD and OpenBSD distribute Bluefish through their packaging systems. 
      </listitem>

      <listitem>
         To compile, or install on another platform, see 

        <xref linkend="bluefish-ch-2-sect-4"></xref>

        . 
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="bluefish-ch-2-sect-3">
    <title>System Specific Installation Issues</title>

    <para>Different systems have different approaches to solutions and
    packaging. You might find the information below interesting.</para>

    <para>Mandrake:</para>

    <itemizedlist>
      <listitem>
         libpcre: Breaks pcre into 3 different pieces, make sure pcre-devel is installed if compiling from source. Try this command: 

        <screen>$ rpm -ql pcre-devel</screen>

         
      </listitem>

      <listitem>
        <remark>... more nags with Mandrake?</remark>
      </listitem>
    </itemizedlist>

    <para>Debian:</para>

    <itemizedlist>
      <listitem>
         Debian Woody (the current Stable) has an old GTK-2 version, that contains several known bugs, but they are not serious. 
      </listitem>

      <listitem>
         Debian Sarge (currently in Testing) has Bluefish 0.13, and a very recent GTK version. 
      </listitem>

      <listitem>
         Debian Sid (Unstable) will always have the latest Bluefish version. 
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="bluefish-ch-2-sect-4">
    <title>Installing a Bluefish Source Distribution</title>

    <para>By installing Bluefish from source, you may be able to get a newer
    version (from CVS) than those distributed as binaries. You may also need
    to compile from source if there is no available binary for your
    system.</para>

    <sect2 id="bluefish-ch-2-sect-4.1">
      <title>Quick Installation Overview</title>

      <para>This is the short installation description. Consult the other
      chapters if you are in doubt.</para>

      <para>Bluefish is installed using the standard 'configure, make, make
      install' steps. Assuming you have downloaded a bluefish source package,
      for instance <literal>bluefish-ver.tar.gz</literal> (naturally, change
      the filename to what's appropriate), you complete the installation with
      the following steps:</para>

      <orderedlist>
        <listitem>
          <userinput>tar -zxvf bluefish-ver.tar.gz</userinput>
        </listitem>

        <listitem>
          <userinput>cd bluefish-ver</userinput>
        </listitem>

        <listitem>
          <userinput>./configure</userinput>
        </listitem>

        <listitem>
          <userinput>make</userinput>
        </listitem>

        <listitem>
          <userinput>su -c 'make install'</userinput>
        </listitem>

        <listitem>
           Now, type 

          <userinput>bluefish</userinput>

           to run. You may delete the 

          <literal>bluefish-ver</literal>

           dir. 
        </listitem>
      </orderedlist>

      <para>The <literal>configure</literal> script is used to automatically
      find the appropriate settings for your system. Because of differences
      between systems, this compile-time configuration is necessary, and
      configure solves this challenge easily -- with an added bonus of telling
      whether you have everything you need to compile.</para>

      <para>The configure-script can be, um, configured. This is something you
      most likely won't need to do, but it's easy to do if necessary. For a
      complete list of configure options, see <xref
      linkend="bluefish-ch-2-sect-5" /></para>
    </sect2>

    <sect2 id="bluefish-install-devel-source">
      <title>Installing from Development Source Tree</title>

      <para>You can get the latest Bluefish version via CVS using the
      instructions in <xref linkend="bluefish-get-cvs" /> Enter the
      directory containing the bluefish source files: <screen>$ cd bluefish-gtk</screen>
      Next, you need to generate the configure script. That's accomplished by
      running <screen>$ autoconf</screen> Then, you run
      <literal>configure</literal> with whatever options you might want. This
      example will cause <literal>make install</literal> to install Bluefish
      with the specified directory as prefix (i.e. the binary is installed in
      <literal>/usr/local/bf-cvs/bin/bluefish</literal>). This is most likely
      not what you want -- just run configure without parameters instead.
      <screen>$ ./configure --prefix=/usr/local/bf-cvs</screen></para>

      <para>If configure fails, it'll probably give a hint telling you what's
      missing or wrong. Assuming it completed successfully, your next step is
      to compile Bluefish. To do this, run <screen>$ make</screen> When
      <literal>make</literal> has completed, you can install Bluefish:
      (<literal>su</literal> to root first, unless you specified a user
      writable prefix to configure) <screen># make install</screen></para>

      <para>To update the sources at a later time, you run the command
      <userinput>cvs -z3 -q update</userinput> from within the
      <literal>bluefish-gtk2</literal> directory.</para>
    </sect2>

    <sect2 id="bluefish-ch-2-sect-4.3">
      <title>Problems Compiling?</title>

      <para>Can't compile? Well, your first step is to make sure you have the
      necessary utilities and libraries. See <xref
      linkend="bluefish-ch-2-sect-1" />. Next, see if your system is mentioned
      in <xref linkend="bluefish-ch-2-sect-3" />. Below is list of well known
      problems that have been mentioned on the bluefish-dev list. If you're
      unable to find a solution (or if you think you have a solution others
      might want), feel free to contact us on the
      <emphasis>bluefish-dev</emphasis> list (See <xref
      linkend="bluefish-contact" />).</para>

      <itemizedlist>
        <listitem>
           

          <screen>make: *** No targets specified and no makefile found.
          Stop.</screen>

           This will happen if 

          <emphasis>configure</emphasis>

           fails and you try to run 

          <literal>make</literal>

          . It also happens if you're running 

          <literal>make</literal>

           from the wrong directory. 
        </listitem>

        <listitem>
           ... more trouble to come ;-) 
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="bluefish-ch-2-sect-5">
    <title>Configure Options</title>

    <para>This section describes all the configure options available for
    bluefish.</para>

    <sect2 id="bluefish-ch-2-sect-5.1">
      <title>Standard configuration flags</title>

      <variablelist>
        <title>Configuration:</title>

        <varlistentry>
          <term><option>-h, --help</option></term>

          <listitem>
            <para>display this help and exit</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--help=short</option></term>

          <listitem>
            <para>display options specific to this package</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--help=recursive</option></term>

          <listitem>
            <para>display the short help of all the included packages</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-V, --version</option></term>

          <listitem>
            <para>display version information and exit</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-q, --quiet, --silent</option></term>

          <listitem>
            <para>do not print "checking..." messages</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--cache-file=FILE</option></term>

          <listitem>
            <para>cache test results in FILE [disabled by default]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-C, --config-cache</option></term>

          <listitem>
            <para>alias for <option>--cache-file=config.cache</option></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>-n, --no-create</option></term>

          <listitem>
            <para>do not create output files</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--srcdir=DIR</option></term>

          <listitem>
            <para>find the sources in DIR [configure dir or
            <filename>..</filename> by default]</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <title>Installation directories:</title>

        <varlistentry>
          <term><option>--prefix=PREFIX</option></term>

          <listitem>
            <para>install architecture-independent files in PREFIX
            [<filename>/usr/local</filename> by default]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--exec-prefix=EPREFIX</option></term>

          <listitem>
            <para>install architecture-dependent files in EPREFIX
            [<filename>PREFIX</filename> by default]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><emphasis>Tip</emphasis></term>

          <listitem>
            <para>By default, <command>make install</command> will install all
            the files in <filename>/usr/local/bin</filename>,
            <filename>/usr/local/lib</filename>, etc. You can specify an
            installation prefix other than <filename>/usr/local</filename>
            using <option>--prefix</option>, for instance
            <option>--prefix=$HOME</option>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

       <variablelist>
        <title>Fine tuning of the installation directories:</title>

        <varlistentry>
          <term><emphasis>Tip</emphasis></term>

          <listitem>
            <para>For better control, use the options below. Defaults are
            shown within brackets.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--bindir=DIR</option></term>

          <listitem>
            <para>user executables [<filename>EPREFIX/bin</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--sbindir=DIR</option></term>

          <listitem>
            <para>system admin executables
            [<filename>EPREFIX/sbin</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--libexecdir=DIR</option></term>

          <listitem>
            <para>program executables
            [<filename>EPREFIX/libexec</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--datadir=DIR</option></term>

          <listitem>
            <para>read-only architecture-independent data
            [<filename>PREFIX/share</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--sysconfdir=DIR</option></term>

          <listitem>
            <para>read-only single-machine data
            [<filename>PREFIX/etc</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--sharedstatedir=DIR</option></term>

          <listitem>
            <para>modifiable architecture-independent data
            [<filename>PREFIX/com</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--localstatedir=DIR</option></term>

          <listitem>
            <para>modifiable single-machine data
            [<filename>PREFIX/var</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--libdir=DIR</option></term>

          <listitem>
            <para>object code libraries
            [<filename>EPREFIX/lib</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--includedir=DIR</option></term>

          <listitem>
            <para>C header files [<filename>PREFIX/include</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--oldincludedir=DIR</option></term>

          <listitem>
            <para>C header files for non-gcc
            [<filename>/usr/include</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--infodir=DIR</option></term>

          <listitem>
            <para>info documentation [<filename>PREFIX/info</filename>]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--mandir=DIR</option></term>

          <listitem>
            <para>man documentation [<filename>PREFIX/man</filename>]</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <title>Program names:</title>

        <varlistentry>
          <term><option>--program-prefix=PREFIX</option></term>

          <listitem>
            <para>prepend PREFIX to installed program names</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--program-suffix=SUFFIX</option></term>

          <listitem>
            <para>append SUFFIX to installed program names</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--program-transform-name=PROGRAM</option></term>

          <listitem>
            <para>run sed PROGRAM on installed program names</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <title>System types:</title>

        <varlistentry>
          <term><option>--build=BUILD</option></term>

          <listitem>
            <para>configure for building on BUILD [guessed]</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--host=HOST</option></term>

          <listitem>
            <para>cross-compile to build programs to run on HOST
            [BUILD]</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <title>Some influential environment variables:</title>

        <varlistentry>
          <term><emphasis>Tip</emphasis></term>

          <listitem>
            <para>Use these variables to override the choices made by
            <command>configure</command> or to help it to find libraries and
            programs with nonstandard names/locations.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>CC</varname></term>

          <listitem>
            <para>C compiler command</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>CFLAGS</varname></term>

          <listitem>
            <para>C compiler flags</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>LDFLAGS</varname></term>

          <listitem>
            <para>linker flags, e.g. -L&lt;lib dir&gt; if you have libraries
            in a nonstandard directory &lt;lib dir&gt;</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>CPPFLAGS</varname></term>

          <listitem>
            <para>C/C++ preprocessor flags, e.g. -I&lt;include dir&gt; if you
            have headers in a nonstandard directory &lt;include dir&gt;</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>CPP</varname></term>

          <listitem>
            <para>C preprocessor</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="bluefish-ch-2-sect-5.2">
      <title>Flags personal to bluefish</title>

      <variablelist>
        <title>Optional Features:</title>

        <varlistentry>
          <term><emphasis>Note</emphasis></term>

          <listitem>
            <para>It works as is: <option>--enable-feature</option> enables
            the feature, <option>--disable-feature</option> or
            <option>--enable-feature=no</option> disables the feature.</para>

            <para>By default, the <option>--enable-feature</option> option is
            not enabled, you should pass it if you want to get it, the
            <option>--disable-xxx</option> option is not disabled, you should
            pass it if you want to disable it.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-auto-optimization</option></term>

          <listitem>
            <para>optimizes the build process for a given architecture if
            possible</para>

            <para>How: rely on the result of:</para>

            <orderedlist>
              <listitem>
                <para><command>uname -p</command> or <command>grep "model
                name" /proc/cpuinfo | cut -d: -f2</command> to detect the
                architecture</para>
              </listitem>

              <listitem>
                <para>the version of gcc to pass the arguments</para>
              </listitem>
            </orderedlist>

            <para>Tested gcc versions: 3.2.*, 3.0.*, 2.95.*</para>

            <para>Machines: Intel(R) Pentium(R) 4CPU, Pentium III, AMD-K6 (tm)
            3D, Pentium 75 - 200, Pentium II, AMD Athlon(TM) XP</para>

            <para>Other machines are ignored</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-gcc3-optimization</option></term>

          <listitem>
            <para>optimizes the build process for a given architecture if
            possible</para>

            <para>Machines: i386, i486, pentium, pentium-mmx, pentiumpro,
            pentium2, pentium3, pentium4, k6, k6-2, k6-3, athlon,
            athlon-tbird, athlon-4, athlon-xp, athlon-mp, winchip-c6,
            winchip2, c3</para>

            <para>Other machines are ignored</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-gcc2-optimization</option></term>

          <listitem>
            <para>optimizes the build process for a given architecture if
            possible</para>

            <para>Machines: i386, i486, pentium, pentiumpro, k6</para>

            <para>Other machines are ignored</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-debugging-output</option></term>

          <listitem>
            <para>turns debugging output on (this option impacts
            performance)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--disable-splash-screen</option></term>

          <listitem>
            <para>suppresses the display of the splash screen at launch time
            (Bluefish launches faster)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-highlight-profiling</option></term>

          <listitem>
            <para>outputs statistics on where the program spends most of its
            time when highlighting patterns.</para>

            <para>Usage: for debugging highlight patterns or trying to
            optimize the program</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-development</option></term>

          <listitem>
            <para>enables development checks (slows down the program)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-gprof-profiling</option></term>

          <listitem>
            <para>outputs statistics on where the program spends most of its
            time by generating extra code to write profile information
            suitable for the analysis. (slows down the program)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--enable-gcoc-coverage</option></term>

          <listitem>
            <para>Purpose: to be able to collect statistics on how many times
            each branch is executed and how long it has lasted. Creates
            data files for the gcov code-coverage utility. (slows down the
            program)</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--disable-nls</option></term>

          <listitem>
            <para>disables the Native Language Support</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <title>Optional Packages:</title>

        <varlistentry>
          <term><emphasis>Note</emphasis></term>

          <listitem>
            <para>This works as is: <option>--with-xxx=foo</option> enables
            the flag, <option>--without-xxx</option> disables it. When not
            enabled, the default is used.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--with-icon-path</option></term>

          <listitem>
            <para>customized path for the icon.</para>

            <para>Usage:
            <option>--with-icon-path=customizedpath</option></para>

            <para>Defaults to: <filename>/usr/share/pixmaps</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--with-gnome1-menu</option></term>

          <listitem>
            <para>customized path for the gnome1 menu.</para>

            <para>Usage:
            <option>--with-gnome1-menu=customizedpath</option></para>

            <para>Defaults to:
            <filename>/usr/share/gnome/apps/</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--with-gnome2-prefix</option></term>

          <listitem>
            <para>customized path for the gnome2 menu and mime-type</para>

            <para>Usage:
            <option>--with-gnome2-prefix=customizedpath</option></para>

            <para>Defaults to: <filename>/usr/share/</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--with-libiconv-prefix</option></term>

          <listitem>
            <para>customized path for libiconv top level installation.</para>

            <para>Usage:
            <option>--with-libiconv-prefix=customizeddir</option></para>

            <para>Effect: searches for libiconv in
            <filename>customizeddir/include</filename> and
            <filename>customizeddir/lib</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>--with-included-gettext</option></term>

          <listitem>
            <para>use the GNU gettext library included in the package</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="install-binary">
    <title>Installing a Binary Distribution</title>

    <para>Different packages -- different installation. We'll cover only a few
    approaches here <footnote>
        <para>If you want to contribute a description on how to install
        Bluefish on your system, just drop us a note. :-)</para>
      </footnote> , since the installation is very system-specific ;-). Lets
    have a look at some different systems:</para>

    <para>For Debian users this is very simple. To download, install and
    configure bluefish in One Swift Move, run <screen>$ su - &amp;&amp; apt-get update &amp;&amp; apt-get install bluefish</screen>
    You can check if the version available through apt is the latest -- see
    the Bluefish homepage, and compare the version there with what
    <userinput>apt-cache show bluefish</userinput> tells you. If there's a
    newer version on the Bluefish site, download it and install the package
    like this: <userinput>dpkg -i bluefish-ver.deb</userinput></para>

    <para>For rpm based distributions, first check if your distribution has a
    recent Bluefish version. If it does not, download the rpm for your
    distribution from any of the Bluefish mirrors. Next, installing a
    downloaded rpm is as simple as pointing and clicking in your favourite GUI
    package manager, or issuing the following command from the command line:
    (as root) <screen># rpm -Uvh bluefish-ver.rpm</screen></para>

    <para>If you're using FreeBSD, NetBSD or OpenBSD, we probably won't need
    to tell <emphasis>you</emphasis> how to use your favourite package system.
    ;-)</para>
  </sect1>

  <sect1 id="bluefish-ch-2-sect-6">
    <title>Post-installation Setup</title>

    <para>The first time you run Bluefish it will create a directory
    <literal>~/.bluefish</literal> where all configuration is stored. This
    includes all preferences, customized menus, highlighting-patterns, file
    history etc.</para>

    <para>Bluefish will work right out of the box, but you can and should take
    advantage of the many customizations you are able to do. Change the font
    in the main text view if you don't like it, remove unused toolbars, add
    shortcuts to the customizable menu and edit the list of browsers and
    external programs.</para>

    <para>If you are upgrading from a previous version, perhaps CVS, you
    should note that the syntax highlighting may have changed. To make sure
    you have the latest highlighting patterns, exit Bluefish and delete the
    <literal>highlighting</literal> file in your
    <literal>~/.bluefish</literal> directory. Next time Bluefish is started,
    the new defaults will be loaded. Note that this will also annihilate all
    your changes to the highlighting. A more gentle approach may be to move
    your current highlighting-file to highlighting.old, start Bluefish to get
    the new patterns, exit bluefish, and then run <userinput>diff -c
    highlighting.old highlighting</userinput> to find the differences..</para>

    <para>If your settings should happen to be corrupted, for some reason
    unusable, or you simply want to revert to the defaults, you may safely
    delete the <literal>~/.bluefish</literal> directory.</para>
  </sect1>
</chapter>