<!--
this file belongs to bluefish, a web development environment
Copyright (C) 2002  Denny Reeh

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->
<chapter id="bluefish-ch-2">

  <title>Installing Bluefish</title>
	<sect1 id="bluefish-ch-2-sect-1">
		<title>Requirements</title>
		<para>
			Bluefish aims to be portable, that is, wherever GTK is ported. A 
			comparatively small	set of external libraries are neccessary for it 
			to work. Any recent GNU/Linux distribution or other *NIX with GTK2 
			installed should be sufficient. In addition to the list of 
			requirements below, you may also want to look at 
			<xref linkend="bluefish-ch-2-sect-3"/>. Note: These requirements 
			fit the GTK2-version. If you only have GTK1, you want the last 
			GTK1-version, v0.7.
		</para>
		<para>
			The main requirements:
		</para>
		<itemizedlist>
			<listitem>gtk v2.0</listitem>
			<listitem>libpcre</listitem>
		</itemizedlist>
		<para>
			Optional requirements:
		</para>
		<itemizedlist>
			<listitem>gnome_vfs
				<emphasis> - for remote file support
				</emphasis>
			</listitem>
			<listitem>
				libaspell
				<emphasis> - spell checker</emphasis>
			</listitem>
			<listitem>
				grep &amp; find
				<emphasis> - used by the advanced open dialog</emphasis>.
				<remark>
					Remember to add link to the advanced open description
				</remark>
			</listitem>
		</itemizedlist>
		<para>
			Compiling Bluefish requires a few additional packages. (Remember 
			that binary packages exists for many platforms. It is likely you 
			won't need to compile ;-) ). Now, let's assume you want to compile, 
			perhaps to get the latest and greatest from CVS. The requirements 
			are as follows:
		</para>
		<itemizedlist>
			<listitem>
				Development files (header files, etc) for the packages above.
				<emphasis>
					These are often distributed as separate packages. There is 
					also a high probability you have these installed already.
				</emphasis>
			</listitem>
			<listitem>
				gcc
				<emphasis>
					 - Bluefish has been tested to compile on the 2.95 and 3.x 
					branches.
				</emphasis>
			</listitem>
			<listitem>
				gmake or BSD make
			</listitem>
			<listitem>
				autoconf
				<emphasis>
					 - only if you are going to compile from CVS
				</emphasis>
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="bluefish-ch-2-sect-2">
		<title>Quick Standard Installation</title>
		<para>
			There are two main methods for installing Bluefish: Compile from 
			source or install a binary package. Binary installation is the 
			easiest to do, so we'll cover that first. There are a few different 
			approaches, caused by the differences between systems. We'll start 
			off by summarizing a few really quick and simple approaches before 
			dealing with this problem more extensively.
		</para>
		<itemizedlist>
			<listitem>
				Debian: <userinput>su - &amp;&amp; apt-get update &amp;&amp; apt-get install bluefish</userinput>
			</listitem>
			
			<listitem>
				Red Hat, Mandrake (and other Linux distributions that supports rpm):
				Download the latest .rpm from the bluefish website,
				<systemitem class="url">http://bluefish.openoffice.nl/</systemitem>
			</listitem>
			
			<listitem>
				FreeBSD, NetBSD and OpenBSD distribute Bluefish through their packaging systems.
			</listitem>
			
			<listitem>
				To compile, or install on another platform, see <xref linkend="bluefish-ch-2-sect-4" />.
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="bluefish-ch-2-sect-3">
		<title>System Specific Installation Issues</title>
		<para>
			Different systems have different approaches to solutions and 
			packaging. You might find the information below interesting.
		</para>
		
		<para>Mandrake:</para>
		<itemizedlist>
			<listitem>
				libpcre: Breaks pcre into 3 different pieces, make sure 
				pcre-devel is installed if compiling from source. Try this 
				command: <screen>$ rpm -ql pcre-devel</screen>
			</listitem>
			<listitem>
				<remark>... more nags with Mandrake?
				</remark>
			</listitem>
		</itemizedlist>

		<para>Debian:</para>
		<itemizedlist>
			<listitem>
			Debian Woody (the current Stable) has an old gtk-2 version, that contains several known bugs, but they are not serious. 
			</listitem>
			<listitem>
			Debian Sarge (currently in Testing) has Bluefish 0.13, and a very recent gtk version.
			</listitem>
			<listitem>
			Debian Sid (Unstable) will always have the latest Bluefish version.
			</listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="bluefish-ch-2-sect-4">
		<title>Installing a Bluefish Source Distribution</title>
		<para>
			By installing Bluefish from source, you may be able to get a newer 
			version (from CVS) than those distributed as binaries. You may also 
			need to compile from source if there is no available binary for 
			your system.
		</para>

		<sect2 id="bluefish-ch-2-sect-4.1">
			<title>Quick Installation Overview</title>
			<para>
				This is the short installation description. Consult the other 
				chapters if you are in doubt.
			</para>
			<para>
				Bluefish is installed using the standard 'configure, make, make 
				install' steps. Assuming you have downloaded a bluefish source 
				package, for instance <literal>bluefish-ver.tar.gz</literal>
				(naturally, change the filename to what's appropriate),	you 
				complete the installation with the following steps:
			</para>
			<orderedlist>
				<listitem><userinput>tar -zxvf bluefish-ver.tar.gz</userinput></listitem>
				<listitem><userinput>cd bluefish-ver</userinput></listitem>
				<listitem><userinput>./configure</userinput></listitem>
				<listitem><userinput>make</userinput></listitem>
				<listitem><userinput>su -c 'make install'</userinput></listitem>
				<listitem>
					Now, type <userinput>bluefish</userinput> to run. You may 
					delete the <literal>bluefish-ver</literal> dir.
				</listitem>
			</orderedlist>
			<para>
				The <literal>configure</literal> script is used to 
				automatically find the appropriate settings for your system. 
				Because of differences between systems, this compile-time 
				configuration is neccessary, and configure solves this 
				challenge easily -- with an added bonus of telling whether you 
				have everything you need to compile.
			</para>
			<para>
				The configure-script can be, um, configured. This is something 
				you most likely won't need to do, but it's easy to do if 
				neccessary. For a complete list of configure options, see 
				<xref linkend="bluefish-ch-2-sect-5" />
			</para>
		</sect2>
		<sect2 id="bluefish-ch-2-sect-4.2">
			<title>Installing from Development Source Tree</title>
			<para>
				You can get the latest Bluefish version via CVS using the instructions in
				<xref linkend="bluefish-ch-1-sect-3" />
				Enter the directory containing the bluefish source files: 
				<screen>$ cd bluefish-gtk</screen>
				Next, you need to generate the configure script. That's 
				accomplished by running
				<screen>$ autoconf</screen>
				Then, you run 
				<literal>configure</literal> with whatever options you might 
				want. This example will cause 
				<literal>make install</literal> 
				to install Bluefish with the specified directory as prefix 
				(i.e. the binary is installed in 
				<literal>/usr/locar/bf-cvs/bin/bluefish</literal>).
				This is most likely not what you want -- just run configure 
				without parameters instead.
				<screen>$ ./configure --prefix=/usr/local/bf-cvs</screen>
			</para>
			<para>
				If configure fails, it'll probably give a hint telling you 
				what's missing or wrong. Assuming it completed successfully, 
				your next step is to compile Bluefish. To do this, run
				<screen>$ make</screen>
				. When 
				<literal>make</literal> 
				has completed, you can install Bluefish:
				(<literal>su</literal> 
				to root first, unless you specified a user writeable prefix to 
				configure)
				<screen># make install</screen>			
			</para>
			<para>
				To update the sources at a later time, you run the command 
				<userinput>cvs -z3 -q update</userinput>
				from within the <literal>bluefish-gtk2</literal> directory.
			</para>
		</sect2>
		<sect2 id="bluefish-ch-2-sect-4.3">
			<title>Problems Compiling?</title>
			<para>
				Can't compile? Well, your first step is to make sure you have 
				the neccessary utilities and libraries. See 
				<xref linkend="bluefish-ch-2-sect-1"/>. Next, see if your
				system is mentioned in 
				<xref linkend="bluefish-ch-2-sect-3"/>. Below is list of well 
				known problems that's been mentioned on the bluefish-dev list. 
				If you're unable to find a solution (or if you think you have a 
				solution others might want), feel free to contact us on the 
				<emphasis>bluefish-dev</emphasis> list
				(See <xref linkend="bluefish-pre-1-sect-2.4"/>).
			</para>
			<itemizedlist>
				<listitem>
					<screen>make: *** No targets specified and no makefile found.  Stop.</screen>
					This will happen if <emphasis>configure</emphasis> fail and 
					you try to run <literal>make</literal>. It also happens if 
					you're running <literal>make</literal> from the wrong 
					directory.
				</listitem>
				<listitem>
					... more trouble to come ;-)
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>

	<sect1 id="bluefish-ch-2-sect-5">
		<title>Configure Options</title>
		<para>
			This section describes all the configure options available for bluefish.
		</para>
		<sect2 id="bluefish-ch-2-sect-5.1">
			<title>Standard configuration flags</title>
			<segmentedlist>
				<?dbhtml list-presentation="table"?>
				<title>Configuration:</title>
				<seglistitem>
					<seg>-h, --help</seg>
					<seg>display this help and exit</seg>
				</seglistitem>
				<seglistitem>
					<seg>--help=short</seg>
					<seg>display options specific to this package</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--help=recursive
					</seg>
					<seg>
						display the short help of all the included packages
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						-V, --version
					</seg>
					<seg>
						display version information and exit
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						-q, --quiet, --silent
					</seg>
					<seg>
						do not print `checking...' messages
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--cache-file=FILE
					</seg>
				<seg>
					cache test results in FILE [disabled by default]
				</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						-C, --config-cache
					</seg>
					<seg>
						alias for `--cache-file=config.cache'
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						-n, --no-create
					</seg>
					<seg>
						do not create output files
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--srcdir=DIR
					</seg>
					<seg>
						find the sources in DIR [configure dir or `..' by default]
					</seg>
				</seglistitem>
			</segmentedlist>
				
			<segmentedlist>
				<?dbhtml list-presentation="table"?>
				<title>Installation directories:</title>
				<seglistitem>
					<seg>
					--prefix=PREFIX
					</seg>
					<seg>
					install architecture-independent files in PREFIX [/usr/local by default]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
					--exec-prefix=EPREFIX
					</seg>
					<seg>
					install architecture-dependent files in EPREFIX [PREFIX by default]
					</seg>
				</seglistitem>
			</segmentedlist>
				
			<para>
				By default, `make install' will install all the files in `/usr/local/bin', `/usr/local/lib' etc.  You can specify an installation prefix other than `/usr/local' using `--prefix', for instance `--prefix=$HOME'.
			</para>

			<para>
				For better control, use the options below.
			</para>
			
			<segmentedlist>
				<?dbhtml list-presentation="table"?>
				<title>Fine tuning of the installation directories:</title>
				<seglistitem>
					<seg>
						--bindir=DIR
					</seg>
					<seg>
						user executables [EPREFIX/bin]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--sbindir=DIR
					</seg>
					<seg>
						system admin executables [EPREFIX/sbin]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--libexecdir=DIR
					</seg>
					<seg>
						program executables [EPREFIX/libexec]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--datadir=DIR
					</seg>
					<seg>
						read-only architecture-independent data [PREFIX/share]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--sysconfdir=DIR
					</seg>
					<seg>
						read-only single-machine data [PREFIX/etc]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--sharedstatedir=DIR
					</seg>
					<seg>
						modifiable architecture-independent data [PREFIX/com]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--localstatedir=DIR
					</seg>
					<seg>
						modifiable single-machine data [PREFIX/var]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--libdir=DIR
					</seg>
					<seg>
						object code libraries [EPREFIX/lib]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--includedir=DIR
					</seg>
					<seg>
						C header files [PREFIX/include]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--oldincludedir=DIR
					</seg>
					<seg>
						C header files for non-gcc [/usr/include]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--infodir=DIR
					</seg>
					<seg>
						info documentation [PREFIX/info]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--mandir=DIR
					</seg>
					<seg>
						man documentation [PREFIX/man]
					</seg>
				</seglistitem>
			</segmentedlist>

			<segmentedlist>
				<?dbhtml list-presentation="table"?>
				<title>Program names:</title>
				<seglistitem>
					<seg>
						--program-prefix=PREFIX
					</seg>
					<seg>
						prepend PREFIX to installed program names
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--program-suffix=SUFFIX
					</seg>
					<seg>
						append SUFFIX to installed program names
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--program-transform-name=PROGRAM
					</seg>
					<seg>
						run sed PROGRAM on installed program names
					</seg>
				</seglistitem>
			</segmentedlist>
			
			<segmentedlist>
				<?dbhtml list-presentation="table"?>
				<title>System types:</title>
				<seglistitem>
					<seg>
						--build=BUILD
					</seg>
					<seg>
						configure for building on BUILD [guessed]
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						--host=HOST
					</seg>
					<seg>
						cross-compile to build programs to run on HOST [BUILD]
					</seg>
				</seglistitem>
			</segmentedlist>
			<segmentedlist>
				<?dbhtml list-presentation="table"?>
				<title>Some influential environment variables:</title>
				<seglistitem>
					<seg>
						CC
					</seg>
					<seg>
						C compiler command
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						CFLAGS
					</seg>
					<seg>
						C compiler flags
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						LDFLAGS
					</seg>
					<seg>
						linker flags, e.g. -L&lt;lib dir&gt; if you have libraries in a nonstandard directory &lt;lib dir&gt;
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						CPPFLAGS
					</seg>
					<seg>
						C/C++ preprocessor flags, e.g. -I&lt;include dir&gt; if you have headers in a nonstandard directory &lt;include dir&gt;
					</seg>
				</seglistitem>
				<seglistitem>
					<seg>
						CPP
					</seg>
					<seg>
						C preprocessor
					</seg>
				</seglistitem>
			</segmentedlist>


			<para>
				Use these variables to override the choices made by `configure' or to help
				it to find libraries and programs with nonstandard names/locations.
			</para>
		</sect2>

		<sect2 id="bluefish-ch-2-sect-5.2">
			<title>Flags personal to bluefish</title>
			
			<para>
				So by default, the --enable-xxx is not unable, you should pass it if you want to get it, the --disable-xxx is not disable, you should pass it if you want to disable it.
				
				How: rely on the result of:
1 - uname -p 	or 	grep "model name" /proc/cpuinfo | cut -d: -f2 to detect the architecture
2 - the version of gcc to pass the arguments
Tested gcc versions: 3.2.*, 3.0.*, 2.95.*
			</para>			
			
			<para>
				<segmentedlist>
					<?dbhtml list-presentation="table"?>
					<title>Optional Features:</title>
					<seglistitem>
						<seg>
							--enable-xxx 
						</seg>
						<seg>
							enables feature xxx
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--disable-xxx or --enable-xxx=no
						</seg>
						<seg>
							disables feature xxx
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--enable-auto-optimization
						</seg>
						<seg>
							optimizes the build process for a given architecture if possible
							<segmentedlist>
								<?dbhtml list-presentation="table"?>
								<title>Which machines:</title>
								<seglistitem>
									<seg>
									Intel(R) Pentium(R) 4CPU
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									Pentium III
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									AMD-K6 (tm) 3D
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									Pentium 75 - 200
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									Pentium II
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									AMD Athlon(TM) XP
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									Other machines are ignored
									</seg>
								</seglistitem>
							</segmentedlist>
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
						--enable-gcc3-optimization
						</seg>
						<seg>
							optimizes the build process for a given architecture if possible
						
							<segmentedlist>
								<?dbhtml list-presentation="table"?>
								<title>Which machines:</title>
								<seglistitem>
									<seg>
									i386, i486, pentium, pentium-mmx, pentiumpro, pentium2, pentium3, pentium4, k6, k6-2,
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									k6-3, athlon, athlon-tbird, athlon-4, athlon-xp, athlon-mp, winchip-c6, winchip2, c3
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
									Other machines are ignored
									</seg>
								</seglistitem>
							</segmentedlist>
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--enable-gcc2-optimization
						</seg>
						<seg>
							optimizes the build process for a given architecture if possible
							<segmentedlist>
								<?dbhtml list-presentation="table"?>
								<title>Which machines:</title>
								<seglistitem>
									<seg>
										i386, i486, pentium, pentiumpro, k6
									</seg>
								</seglistitem>
								<seglistitem>
									<seg>
										Other machines are ignored
									</seg>
								</seglistitem>
							</segmentedlist>
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--enable-debugging-output
						</seg>
						<seg>
							turns debugging output on (this option impacts performance)
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--disable-splash-screen
						</seg>
						<seg>
							suppresses the display of the splash screen at launch time (Bluefish launches faster)
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--enable-highlight-profiling
						</seg>
						<seg>
							Outputs statistics on where the program spends most of its time when hightlighting patterns. Useful for debugging hightlight patterns or trying to optimize the program
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--enable-development
						</seg>
						<seg>
							enables development checks (slow down the program)
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--enable-gprof-profiling
						</seg>
						<seg>
							Outputs statistics on where the program spends most of its time by generating extra code to write profile information suitable for the analysis. (slows down the program)
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--enable-gcoc-coverage
						</seg>
						<seg>
							Purpose: to be able to collect statistics on whow many times each branch is executed and how many times it has taken. Creates data files for the gcov code-coverage utility. (slows down the program)
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--disable-nls
						</seg>
						<seg>
							disables the Native Language Support
						</seg>
					</seglistitem>
				</segmentedlist>
				<segmentedlist>
					<?dbhtml list-presentation="table"?>
					<title>Optional Packages:</title>
					<seglistitem>
						<seg>
							--with-icon-path
						</seg>
						<seg>
							customized path for the icon. Usage: --with-icon-path=customizedpath Defaults to: /usr/share/pixmaps
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--with-gnome1-menu
						</seg>
						<seg>
							Purpose= customized path for the gnome1 menu. Usage: --with-gnome1-menu=customizedpath Defaults to: /usr/share/gnome/apps/
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--with-gnome2-prefix
						</seg>
						<seg>
							customized path for the gnome2 menu and mime-types. Usage: --with-gnome2-prefix=customizedpath Defaults to: /usr/share/
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--with-libiconv-prefix
						</seg>
						<seg>
							Purpose: customized path for libiconv top level installation. Usage: --with-libiconv-prefix=customizeddir Effect: searches for libiconv in customizeddir/include and customizeddir/lib
						</seg>
					</seglistitem>
					<seglistitem>
						<seg>
							--with-included-gettext
						</seg>
						<seg>
							Purpose: use the GNU gettext library included in the package 
						</seg>
					</seglistitem>
				</segmentedlist>
				<para>
					This works as is: --with-xxx=foo enables the flag, --without-xxx disable it.
When not enabled, the default is used.
				</para>
			</para>
		</sect2>
	</sect1>

	<sect1 id="bluefish-ch-2-sect-6">
		<title>Installing a Binary Distribution</title>
		<para>
			Different packages -- different installation. We'll cover only a 
			few approaches here
			<footnote>
				<para>
					If you want to contribute a description on how to install 
					Bluefish on your system, just drop us a note. :-)
				</para>
			</footnote>
			, since the installation is very system-specific ;-). Lets have a 
			look at some different systems:
		</para>
		<para>
			For Debian users this is very simple. To download, install and 
			configure bluefish in One Swift Move, run
			<screen>$ su - &amp;&amp; apt-get update &amp;&amp; apt-get install bluefish</screen>
			You can check if the version available through apt is the latest -- 
			see the Bluefish homepage, and compare the version there with what 
			<userinput>apt-cache show bluefish</userinput> tells you.
			If there's a newer version on the Bluefish site, download it and 
			install the package like this:
			<userinput>dpkg -i bluefish-ver.deb</userinput>
		</para>
		<para>
			For rpm based distributions, first check if your distribution
			has a recent Bluefish version. If it does not, download the rpm 
			for your distribution from any of the Bluefish mirrors. Next, 
			installing a downloaded rpm is as simple as pointing and clicking 
			in your favourite gui package manager, or issuing the following 
			command from the command line: (as root)
			<screen># rpm -Uvh bluefish-ver.rpm</screen>
		</para>
		<para>
			If you're using FreeBSD, NetBSD or OpenBSD, we probably won't need 
			to tell <emphasis>you</emphasis> how to use your favourite package 
			system. ;-)
		</para>
	</sect1>

	<sect1 id="bluefish-ch-2-sect-6">
		<title>Post-installation Setup</title>
		<para>
			The first time you run Bluefish it will create a directory 
			<literal>~/.bluefish</literal>
			where all configuration is stored. This includes all preferences, 
			customized menus, highlighting-patterns, file history etc.
		</para>
		<para>
			Bluefish will work right out of the box, but you can and should 
			take advantage of the many customizations you are able to do. 
			Change the font in the main textview if you don't like it, remove 
			unused toolbars, add shortcuts to the customizeable menu and edit 
			the list of browsers and external programs.
		</para>
		<para>
			If you are upgrading from a previous version, perhaps CVS, you 
			should note that the syntax highlighting may have changed. To make 
			sure you have the latest highlighting patterns, exit Bluefish
			and delete the <literal>highlighting</literal> file in your 
			<literal>~/.bluefish</literal> 
			directory.
			Next time Bluefish is started, the new defaults will be loaded. 
			Note that this will also annihilate all your changes to the 
			highlighting. A more gentle approach may be to move your current 
			highlighting-file to highlighting.old, start Bluefish to get the 
			new patterns, exit bluefish, and then run 
			<userinput>diff -c highlighting.old highlighting</userinput> 
			to find the differences..
		</para>
		<para>
			If your settings should happen to be corrupted, for some reason 
			unusable, or you simply want to revert to the defaults, you may 
			safely delete the <literal>~/.bluefish</literal> directory.
		</para>
	</sect1>

</chapter>
