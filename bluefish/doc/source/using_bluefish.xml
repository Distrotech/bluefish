<!--
Using Bluefish - a part of the Bluefish manual
(C) 2004 Olivier Sessink

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->
<chapter id="using-bluefish">

<title>Using Bluefish</title>
<para>
In this chapter most of the functionalities of Bluefish are described. What you can do, how you do it, and how you can customise the default behaviour.
</para>
<sect1 id="starting-bluefish">
<title>Starting Bluefish</title>
<para>In GNOME Bluefish is started from the Applications/Programming menu.</para>
<sect2 id="commandline-options">
<title>Command line options</title>
<para>
There are several useful command line options.
<itemizedlist>
	  <listitem><para>-s           skip root check</para></listitem>
	  <listitem><para>-v           current version</para></listitem>
	  <listitem><para>-n           open new window</para></listitem>
	  <listitem><para>-p filename  open project</para></listitem>
	  <listitem><para>-h           this help screen</para></listitem>
	  <listitem><para>--display</para></listitem>
</itemizedlist>
Many programs like browsers, email clients and file managers can be configured to 
open files in Bluefish. For example <emphasis>bluefish '%s'</emphasis> will open
a file in the current window, <emphasis>bluefish -n '%s'</emphasis> will open a
file in a new window, and <emphasis>bluefish -p '%s'</emphasis> will open
a project file.
</para>
</sect2>
<sect2 id="user-interface">
<title>The user interface</title>
</sect2>
	<para>The biggest part of the user interface is the editor area. Because Bluefish has a so called "Multiple Document Interface", there are actually many editor areas
	in Bluefish, accessible via the tabs. By default the tabs are on the bottom.
			<figure id="editor_array">
				<title id="bf-figure-editor-array">Bluefish Editor Array</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/editor_array.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 editor array
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>The top of the Bluefish interface consist of a menu, a main tool bar, a 
	HTML tool bar, and a Custom menu.
			<figure id="main_menu">
				<title id="bf-figure-main-menu">Bluefish Main Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/main_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 main menu
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The main toolbar gives you quick access to the basic functionalities of a text editor.
			<figure id="main_toolbar">
				<title id="bf-figure-main-toolbar">Bluefish Main Toolbar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/main_toolbar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 main toolbar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The HTML toolbar deals with most used HTML functionalities.
			<figure id="html_toolbar">
				<title id="bf-figure-html-toolbar">Bluefish HTML Toolbar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/html_toolbar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 HTML toolbar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The custom toolbar provides access to languages an replacement functions. It is fully customizable through the preferences panel. 
			<figure id="custom_toolbar">
				<title id="bf-figure-custom-toolbar">Bluefish Custom Toolbar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/custom_toolbar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 custom toolbar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>
	On the side, by default the left side, there is the side panel. The side panel 
	consist of a file browser, a function reference browser and a bookmark browser.
	</para>
	<para>This is where you may get quick access to files, switching directories in the upper part.
			<figure id="file_browser">
				<title id="bf-figure-file-browser">Bluefish File Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/file_browser.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 file browser
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The function reference browser references CSS2, HTML, PHP, and Python functions with their syntax.
			<figure id="function_reference_browser">
				<title id="bf-figure-function-reference-browser">Bluefish Function Reference Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/function_reference_browser.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 function reference browser
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The bookmark browser allows you to access directly to a marked position in a file.
			<figure id="bookmark_browser">
				<title id="bf-figure-bookmark-browser">Bluefish Bookmark Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/bookmark_browser.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 bookmark browser
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>
	On the bottom of Bluefish is the status bar. Here messages are shown, the current line
	and column number are shown, the insert (INS) or overwrite (OVR) mode for the cursor,
	and the file type and character encoding.
			<figure id="status_bar">
				<title id="bf-figure-status-bar">Bluefish Status Bar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/status_bar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 status bar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>
	The visibility of these items can be toggled via the View menu.
		<figure id="figure-view-menu">
				<title id="figure-view-menu-title">Bluefish View Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/view_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.13 view menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	If you want to disable any of these items by default, you can set these options in
	the preferences under <emphasis>User interface</emphasis>.
	</para>

</sect1>
<sect1 id="working-with-files">
<title>Working with files</title>
	<para>
	Most of the file operations are accessible from the File menu. 
	Through the <emphasis>File</emphasis> menu a new file can be 
	created, existing files opened, and opened files saved. 
	
				<figure id="figure-file-menu">
				<title id="figure-file-menu-title">Bluefish File Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/file_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>The Bluefish File Menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>

	</para>
<sect2 id="opening-files">
<title>Opening files</title>
	<para>
	Through <emphasis>File/Open</emphasis> 
	one or more files can be opened. Recently opened files can be 
	opened by selecting from the list within <emphasis>File/Open recent</emphasis>. The number of
	files in this menu can be set in the preferences under <emphasis>Files</emphasis>.
	</para>
	<para>
	The file browser in the side panel can also be used to open files. The file browser 
	supports filtering files, available from the right click context menu in the 
	filebrowser. By default the filebrowser follows the document focus. If you change to
	a different document, the filebrowser will show the contents of the directory
	where this document is located. This behaviour can be changed on the bottom of the 
	filebrowser. The filebrowser can also show only a selection of your files. If you 
	right click a directory, you can make this directory the base directory for the
	filebrowser using the <emphasis>Set as basedir</emphasis> option.
	</para>
	<para>
	Information about currently opened files can be seen if you move the mouse over
	the document tab (by default on the bottom of the screen). A so called tooltip will
	be shown with information about the full path, size, permissions, filetype and 
	encoding of the file.
	</para>
	<para>
	An interesting feature of Bluefish is the 
	ability to open files by selecting the text of a currently opened file. 
	For example, if a filename is shown in for example a terminal application, 
	you can select the filename, and use <emphasis>File/Open from Selection</emphasis> 
	from the menu to open that file. 
	The file, if it exists, will be opened in another tab within Bluefish. 
	Finally, files can be opened via the command line by feeding filenames to 
	Bluefish as arguments. This can even be done while Bluefish is running and 
	the resulting file will then show up in its own tab.
	</para>
</sect2>
<sect2 id="saving-files">
<title>Saving files</title>
	<para>
	If a document is modified, the filename is shown in red in the document tabs, and also 
	if you right click on the tabs, the full path is shown in red in the list that will pop 
	up.
	</para>
	<para>
	To save a document, you can use the <emphasis>File</emphasis> menu, use the save button in the toolbar, or you can 
	press the shortcut key combination (Ctrl+S). By default a backup is made during save. The original file
	is copied to the same filename with a tilde '~' appended. This suffix and the backup behaviour can
	be changed in the preferences under <emphasis>Files</emphasis>.
	</para>
	<para>
	Before saving the file, Bluefish will check if the original file was changed on disk, using the 
	last modified time and the file size. On some filesystems the last modified time
	is sometimes not very precise (most notably on samba mounts). This makes Bluefish think the file
	is modified when it is not. This check can be changed in the preferences 
	under <emphasis>Files</emphasis>.
	</para>
	<para>
	You can also save a document under a different name, using the <emphasis>Save as</emphasis> menu
	entry, the save as button in the toolbar, or the shortcut (Shift+Ctrl+S). The 
	original file will still exist. It is also possible to move or rename a document, using the 
	<emphasis>Rename</emphasis> option in the menu, or shortcut (F2).
	</para>
	<para>
	To save all modified files, you can use the <emphasis>Save all</emphasis> menu entry. This will
	save all documents that have been modified.
	</para>
</sect2>
<sect2 id="editing">
<title>Editing</title>
<sect3 id="undo-redo">
<title>Undo and Redo</title>
<para>
The undo and redo functionality is available from the <emphasis>Edit</emphasis> menu, 
from the main tool bar, and from the keyboard shortcuts. 
</para>
<itemizedlist>
	  <listitem><para>Undo (Ctrl+Z)</para></listitem>
	  <listitem><para>Redo (Shift+Ctrl+Z)</para></listitem>
</itemizedlist>
<para>
The functions <emphasis>Undo all</emphasis> and <emphasis>Redo all</emphasis> in the <emphasis>Edit</emphasis> menu will undo or redo all 
of the stored changes. The maximum number of changes can be configured in
the preferences, by default Bluefish will remember the last 100 changes per 
document. It is possible to clear the changes after the document is saved, 
an option in the preferences which is disabled by default.
</para>
</sect3>
<sect3 id="cut-copy-paste">
<title>Cut, Copy, and Paste</title>
<para>
The functions <emphasis>Cut</emphasis>, <emphasis>Copy</emphasis>, and <emphasis>Paste</emphasis> are available from the <emphasis>Edit</emphasis> menu, from the 
main tool bar, and from the keyboard shortcuts.
</para>
<itemizedlist>
	  <listitem><para>Cut (Ctrl+X)</para></listitem>
	  <listitem><para>Copy (Ctrl+C)</para></listitem>
	  <listitem><para>Paste (Ctrl+V)</para></listitem>
</itemizedlist>
<para>
On X Windows Systems, you can also paste the current selected text using the 
middle mouse button. First select some text (in Bluefish or in any other X 
application), then press the middle mouse button where you want to paste the
selected text.
</para>
<para>
Cut or copy and then paste can also be done by selecting some text and 
dragging it to the destination. If the text is dragged to another 
document (or another application), it is copied. If the text is 
dragged within one document it is moved. Dragging to other applications 
is not possible to every application, but most Gnome and GTK programs
are supported.
</para>

</sect3>
</sect2>
<sect2 id="file-types">
<title>File types</title>
<para>
The file type of a file changes the behaviour of Bluefish. File types are recognised 
by their extension, or by the beginning of the content of the file. The current
document type is shown in the far right of the status bar. How these extensions
and patterns can be changed is
described in the "Customising Bluefish" section.
</para>
<para>
If the type of a file is not properly detected, you can change the type using the 
Document/Type menu.
</para>
<sect3 id="syntax-highlighting">
<title>Syntax highlighting</title>
	<para>Syntax highlighting is the coloring of words that have a special
	meaning in the language you are writing. Obviously the patterns are
	different for every language. The "&lt;title&gt;" word for
	example means "start of title" in HTML, the "function"
	word means "start of function" in PHP.</para>
	<para>
	During the editing, Bluefish will only update the highlighting patterns in the
	block of text around the cursor. The number of lines (the size) of this block can be
	adjusted in the preferences under <emphasis>Editor</emphasis>.
	</para>
	<para>The syntax highlighting for the total document can be refreshed
	using the <emphasis>Document/Update highlighting</emphasis> menu, or the shortcut (F5). 
	The syntax highlighting can be disabled in the preferences under 
	<emphasis>Editor</emphasis>.
	
	</para>
</sect3>
</sect2>
<sect2 id="more-files">
<title>More on files</title>
<sect3 id="remote-files">
<title>Remote files</title>
	<para>
		Assuming a working Internet connection, files can also be opened from the web using 
	<emphasis>File &gt; Open URL</emphasis>(make sure to type the http:// or it 
	doesn't work...bug, maybe???). 
	</para>
</sect3>
<sect3 id="character-encoding">
<title>Character encoding</title>
<para>
There are many different standards for character encoding of text files. Most well known is the ASCII
standard, which describes only 127 characters, and is supported by every text editor on the world. 
The most common standard nowadays is UTF-8, which 
describes thousands of characters, and is backwards compatible with ASCII. 
Internally, Bluefish will always work with UTF-8. When opening
a file, Bluefish has to detect the correct encoding for the file. For HTML files the encoding should
be present in a &lt;meta name=&quot;encoding&quot; tag. Bluefish will always use this tag if it is 
available in the file. If this tag has an encoding that is not present in the Bluefish config file, 
this encoding is automatically added to the Bluefish config file.
</para>

<para>
The locale also defines a default encoding. If you are using a locale (a local setting, defining 
language, time format, currency format, number formatting etc.) Bluefish will try to load the 
file using the encoding defined in the locale.
</para>

<para>
Bluefish itself also has a setting for a default encoding. This is the next encoding 
Bluefish will try. This is also the encoding Bluefish will use for files created by Bluefish 
(UTF-8 by default).
</para>
<para>
If these steps fail, Bluefish will simply try every encoding defined in the Bluefish 
config file. 
</para>
<para>
Filenames on disk can also contain more then ASCII characters. All Gnome and GTK programs 
(including Bluefish) assume that filenames are in UTF-8 encoding. If you have filenames
in the encoding of your locale on your disk, you have to set G_BROKEN_FILENAMES=1 in the 
environment to make Gnome and GTK programs detect this encoding.
</para>

</sect3>
<sect3 id="open-advanced">
<title>Open advanced</title>
	<para>
		In the <emphasis>File &gt; Open Advanced</emphasis> dialog, multiple files 
	can be opened from a directory based on their extension or by their content. The
	same functionality is available from the filebrowser in the side panel. If you right
	click a directory, you can also there select <emphasis>Open advanced</emphasis>.
	</para>
	<para>
	To open all files by extension, enter the extension in the dialog, and leave the search 
	pattern empty. Check the <emphasis>recursive</emphasis> option if you want to include
	all subdirectories in the search.
	</para>
	<para>
	To open files by content, leave the extension at *, and enter a search pattern in the dialog. You can 
	use regular expression patterns if you check the <emphasis>Is regex</emphasis> option.
	</para>
	<para>
	The open advanced functionality runs the find and grep utilities to get a list of filenames. If these 
	utilities are not available on your system the functionality is not available.
	</para>
</sect3>
</sect2>
</sect1>
<sect1 id="navigation-managing-documents">
<title>Navigation and Managing documents</title>
<sect2 id="navigation-one">
<title>Navigating through a document</title>

	<para>The editing area is a standard GTK editing area. This means there are 
	many keyboard shortcuts available to navigate through the text.</para>
	<itemizedlist>
		<listitem>
			<para>control+right-arrow will jump to the next word boundary</para>
		</listitem>
		<listitem>
			<para>control+left-arrow will jump to the previous word boundary</para>
		</listitem>
		<listitem>
			<para>end will jump to the end of line</para>
		</listitem>
		<listitem>
			<para>home will jump to the beginning of the line</para>
		</listitem>
		<listitem>
			<para>page-up will jump one page up</para>
		</listitem>
		<listitem>
			<para>page-down will jump one page down</para>
		</listitem>
		<listitem>
			<para>control+home will jump to the top of the document</para>
		</listitem>
		<listitem>
			<para>control+end will jump to the end of the document</para>
		</listitem>
	</itemizedlist>
	<para>
	These shortcuts are also available when selecting text. Some examples: To select 
	the current line, press home, hold shift and press end. To select the current word, 
	press control+left-arrow, hold shift and press control+right-arrow.
	</para>
</sect2>
<sect2 id="navigation-multiple">
<title>Navigating through many documents</title>
	<para>
	Navigating through a large list of documents can be difficult. But if you right-click 
	the document notebook tabs, you get a list of all opened documents.
	</para>
	<para>
	Navigation between documents can also be done using the Go menu.
	<figure id="figure-go-menu">
				<title id="figure-go-menu-title">Bluefish Go Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/go_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.13 go menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<itemizedlist>
		<listitem>
			<para>control + page-up will change to the previous document</para>
		</listitem>
		<listitem>
			<para>control + page-down will change to the next document</para>
		</listitem>
	</itemizedlist>
</sect2>
<sect2 id="projects">
<title>Projects</title>
<para>
<figure id="figure-project-menu">
				<title id="figure-project-menu-title">Bluefish Project Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/project_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.13 project menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
The
  projects are a sort of 'saved state' of Bluefish. All files open when the
  project is saved, are automatically opened the next time you open the
  project. Also the recently used files in that project are shown in the
  recent menu. Furthermore, a basedir can be set, so the file browser in the
  left panel will only show the files in the basedir and its subdirectories.
  If Bluefish is installed with gnome-vfs support the basedir might be remote,
  for example sftp://someserver/somedir or
  smb://user:password@server/someshare/.</para> <para>If the webdir is entered
  in the project settings, Bluefish will launch the browser to the appropriate
  URL. If your basedir for example is /var/www/ and your webdir
  http://localhost/ Bluefish will use this information to launch the browser
  to the correct URL. This can be very convenient for testing server side
  scripting languages like PHP, JSP or other.</para> <para>The template field
  can point to a template file. If the 'new file' button is clicked, the
  contents of this file will be automatically loaded into the edit
  window.</para> <para>The projects will be expanded to have more Bluefish
  settings, so a project can be a bit of customized Bluefish setup. Currently
  the state of various tool bars and menu bars is saved in a project
  file.</para> <para>The project file itself is simply a text file in the
  standard Bluefish format (same format as the config file). This format is
  'key: value'.</para>
</sect2>

<sect2 id="bookmarks">
<title>Bookmarks</title>
	<para>In Bluefish you can add bookmarks to a line in the text, and you can later use 
	the bookmark to quickly jump to this location. Bookmarks can be temporary or permanent, 
	the default can be configured in the preferences.
	</para>
	<para>
	Bookmarks can be added to the current cursor location by using the menu /Edit/Add 
	bookmark, or by using the shortcut key combination control+d. You can also add 
	bookmarks by right-clicking in the text, and selecting add bookmark.
	</para>
	<para>
	Bookmarks can be temporary or permanent. Permanent bookmarks are stored, and temporary
	bookmarks are gone after Bluefish is closed.	The default is set in the preferences
	under <emphasis>Editor</emphasis>. If you right click a bookmark and 
	select <emphasis>Edit</emphasis> you can change this setting for a bookmark.
	</para>
	<para>
	A way to add many bookmarks at the same time is using the search dialog. Check the 
	'Bookmark results' option, and all search results will be added to your bookmarks. 
	For example this manual has sections, and each section is identified by a header 
	like '&lt;sect1 id="bluefish-ch-4-sect-6"&gt;'. A way to automatically get a 
	bookmark to every section is to search for the following regular expression 
	pattern: '&lt;sect[0-9]+ id="[^"]+"&gt;' and bookmark all results. 
	</para>
	<para>
	Bookmarks can be found in the side panel, sorted by document and line number. If you 
	right click a bookmark, you get a pop up menu with several options. Among the option 
	is edit, which allows you to change a bookmark from temporary to permanent or the 
	other way around, and you can name bookmarks.
	</para>
</sect2>
<sect2 id="search-replace">
<title>Search and Replace</title>
	<para>
	The edit menu features several options for Find and Replace. The Find... (Ctrl+F)
	and Replace... (Ctrl+H) menu items will simply start the dialogs described elsewhere in
	this manual. The Find again (Ctrl+G) item will repeat the last used search. It will 
	continue the search after the position where the previous search was stopped. If the 
	end of file is reached, it will restart at the beginning or continue with the next file, 
	depending on the search options used.
	</para>
	<para>
	The Find from selection item will search for the currently selected text. If you select
	for example the name of a function, in bluefish, or in any other program, and you choose
	find from selection Bluefish will start a new search for this selected string.
	</para>
<sect3 id="search-replace-regex">
<title>Search and replace with regular expressions</title>
  <para> With the search and replace you can do incredible
  things. We'll start with a simple example. In some HTML table we have
  several table data tags where we actually want table header tags. Table data
  is &lt;td&gt;&lt;/td&gt; and we want &lt;th&gt;&lt;/th&gt;. </para> <para>
  we can do two normal replaces: one where we replace &lt;td&gt; with
  &lt;th&gt; and then another where we replace &lt;/td&gt; with &lt;/th&gt;
  </para> <para>we can also do one replace using regular expressions: find
  (&lt;|&lt;/)?td&gt; and replace with \0th&gt; For more information about
  regular expressions you might want to read man 7 regex, or read any of the
  great Internet sites about regular expressions. The \0 in the replace string
  refers to the first subpattern match in the search pattern, the \1 to the
  second etc.</para> <para> if you understand the above example, you will
  realize that you can do much more. Suppose you also want to match a table
  data tag that does have some attributes like &lt;td class="myclass"&gt;, and
  you want to keep the option while converting to table header. The following
  pattern will do this: find (&lt;|&lt;/)td([^&gt;]*)&gt; and replace with
  \0th\1&gt; </para> <para> if you have any search and replace patterns you
  use often, you can also add them to the Custom Menu. Check the Custom Menu
  section of this manual for more information. </para>
  
  <para>
  In the search and the search and replace dialog it is not possible to insert keys 
  Enter or Tab. You can, however, insert escape characters, if you enable the 
  'Patterns contain backslash sequences' option. If you use this option, you can
  add a newline to your pattern as \n, a tab as a \t, and a backslash becomes a 
  \\.
  </para>
  
  <para>
  Another useful option in the search dialog is the <emphasis>bookmark results
  </emphasis> option. For example in a PHP document, you could search for the
  word 'function', and add a bookmark to every function. This results, however,
  in a list of bookmarks that are all named 'function'. Not so useful. But also
  now we can make use of a regular expression. The expression 
  'function[ \t\n]+[&amp;a-zA-Z0-9_]+' will result in all functions and their name.
  Much more useful!
  </para>

</sect3>
</sect2>
</sect1>
<sect1 id="more-then-text-editor">
<title>More than a Text Editor</title>
<sect2 id="indenting">
<title>Indenting</title>
	<para>
	The shift-right and shift-left items in the menu, or the buttons in the tool bar, will indent or unindent the currently selected text. It will normally use
	tabs for indenting, or spaces if you have 
	'indent with spaces' selected in the preferences. The number of spaces used is the same 
	as the 'tabsize' option in the preferences.
	</para>
</sect2>
<sect2 id="auto-tag-closing">
<title>Auto tag closing</title>
	<para>
	By default, Bluefish will automatically produce closing tags for HTML and XML 
	documents. For example, if you type <literal>&lt;p&gt;</literal>
	within an HTML document, bluefish will produce 
	<literal>&lt;/p&gt;</literal>. So, as soon as you finish typing a 
	non-empty HTML tag, meaning the tag is supposed to have a closing tag, Bluefish 
	will help you out and close the tag automatically. For empty tags, like 
	<literal>&lt;br&gt;</literal>, Bluefish correctly does nothing. 
	This feature can be turned off by unchecking the menu option 
	<emphasis>Document &gt; Auto Close HTML Tags</emphasis>.
	</para>
</sect2>
<sect2 id="spell-checker">
<title>Spell checker</title>
<figure id="figure-spell-checker">
				<title id="figure-spell-checker-title">Bluefish Spell Checker</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/spell_checker.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.13 spell checker</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	<para>
	Bluefish uses <ulink url="http://aspell.sourceforge.net/">aspell</ulink> for spell 
	checking. If the aspell libraries are not installed on your system, then the spell 
	checking feature will not be available. To launch the spell checker, select 
	<emphasis>Document &gt; Check Spelling...</emphasis>
	</para>
	<para>
	The spell checker will launch in a separate window, which you can keep open as you 
	edit files. You have the option to check a whole document or just a selection. Click 
	on <emphasis>Spell Check</emphasis> to start spell checking the current document. As 
	you run across misspelled words you want included in the dictionary, click on the 
	<emphasis>Add</emphasis> button in the spell checker window. This will add words to 
	a personal dictionary.	
	</para>
	<para>
	Key words for different languages can be ignored using filters. Currently, the only
	filter is for HTML. If you want to help write more filters, join the 
	<link linkend="bluefish-contact">mailing list</link>.
	</para>
</sect2>
<sect2 id="function-reference">
<title>Function reference</title>
</sect2>
<sect2 id="HTML">
<title>HTML</title>
	  <para> HTML is obviously the most supported language in Bluefish. There is a
	  special HTML tool bar with many dialogs, and several menu sections to work
	  with tags. You can also right-click a tag and bring up the dialog from
	  there. The preferences have several settings on HTML style 
	  under <emphasis>HTML</emphasis>.</para> 
	  <para>In the reference tree on the left panel there is also
	  HTML reference available.</para> 
	  <para>There are several special search and
	  replace actions in the menu Edit-Replace special. These can be used to
	  convert special characters (like &lt; and &amp;), or ISO characters to their
	  HTML entities.</para>
	  <sect3 id="thumbnails">
<title>Thumbnail generation</title>
</sect3>
<para>
Bluefish can automatically generate thumbnails for images. ..... 
</para>

</sect2>
<sect2 id="quickbar">
<title>Customising the quick bar</title>
	<para>The quick bar is a user defined tool bar. All HTML tool bar buttons can
	be added to the quick bar by simply right-clicking them and selecting
	"Add to quick bar". If you want to remove items from the Quick bar,
	right-click them and select "Remove from Quick bar"</para>
</sect2>
<sect2 id="custom-menu">
<title>Custom menu</title>
	<para>The custom menu allows you to add "often used" strings or
	search and replace patterns to a menu. Upon install Bluefish will create
	some default entries, these will give you an idea what can be done with
	the custom menu.</para>
</sect2>
<sect2 id="external-programs-filters">
<title>External programs, filters</title>
		<para>You can integrate external commands such as browsers, or text filters. 
		If you want to use for
		example a sed command as a filter, you can add it like this to the
		external commands and filters (in the preferences dialog): sed -e
		'some sed command' &gt; '%f' &lt; '%s'
		<figure id="figure-external-menu">
				<title id="figure-external-menu-title">Bluefish External Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/external_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.13 external menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
		</para>
		<para>To add items to the external
  menu:</para><para><orderedlist><listitem><para>Edit &gt;
  Preferences</para></listitem><listitem><para>Choose the "External Programs"
  tab.</para></listitem><listitem><para>Click "Add" to add a new
  item</para></listitem><listitem><para>Double-click on the name field to give
  the command a name (this name will become an option in the "External"
  menu).</para></listitem><listitem><para>Double-click on the command field to
  type the command to be
  executed.</para></listitem></orderedlist></para><para>I WILL ADD AN EXAMPLE
  HERE LATER</para><para>Items within External &gt; Outputbox allow for
  programs to give feedback by opening an output box within Bluefish's main
  window. To create an Outputbox menu item: <orderedlist><listitem><para>Edit
  &gt; Preferences</para></listitem><listitem><para>Choose the "Output
  parsers" tab.</para></listitem><listitem><para>Click "Add" to add a new
  item</para></listitem><listitem><para>Double-click on the name field to give
  the command a name (this name will become an option in the "External"
  menu).</para></listitem><listitem><para>Double-click on the pattern field
  and give a regular expression pattern with subpatterns, such as line
  ([0-9]+) column [0-9]+ - (.*).</para></listitem><listitem><para>Double-click
  on the "File #" field and give the number for the subpattern matching the
  filename (-1 for none)</para></listitem><listitem><para>Double-click on the
  "Line #" field and give the number for the subpattern matching the line
  number</para></listitem><listitem><para>Double-click on the "Output #" field
  and give the number for the subpattern matching the actual error
  message</para></listitem><listitem><para>Double-click on the "Command" field
  and the command to execute, %s is the current
  filename</para></listitem><listitem><para>Toggle the "Show all output"
  check box to show output NOT matching the regular
  expression.</para></listitem></orderedlist></para><remark>Note: Of course,
  it is also possible to add these items by editing the file named "rcfile_v2"
  found in the user's home directory (~/.bluefish/rcfile_v2). The fields are
  delimited by colons and correspond to those found in the
  GUI.</remark>
		
</sect2>
</sect1>
<sect1 id="bluefish-preferences">
<title>Customising Bluefish</title>
<sect2 id="editor-preferences">
<title>Editor preferences</title>
	<para>The font of the editor can be set in the preferences under <emphasis>Editor</emphasis>. </para>
	<para>
	A frequently asked question is how to change the background color of the editor in Bluefish.
	Bluefish uses the default editor background color as set in your GTK theme. If you want to 
	override the color of the theme, edit ~/.gtkrc-2.0 and add this section:
<programlisting>
style "EditorStyle" {
        base[NORMAL]="#eeeeee"
}
class "GtkTextView" style "EditorStyle"
</programlisting>
	Obviously, #eeeeee should be your preferred background color.
	</para>
<sect3 id="changing-shortcut-keys">
<title>Modifying shortcut keys</title>
		<para>Many menu entries are accessible via key combination; also called a
		shortcut. For example, pressing the Ctrl+S keys saves the current file to
		disk. If available, shortcut key combinations are shown on the right of
		the menu entry.</para>
		<para>What many people do not know is that they can be changed. Move the
		mouse over a menu entry, and press the key combination you would like to
		use. Immediately this combination will show up on the right of the menu
		entry. An entry can also be removed, press the backspace key when you move
		the mouse over a menu entry to remove the shortcut.</para>
		<para>To save the shortcut key combinations for later Bluefish sessions
		you can store them. In the Options menu choose Save shortcut keys. This
		will store the settings in file ~/.bluefish/menudump_2. If you want to
		restore the default combinations simply remove this file and restart
		Bluefish.</para>
</sect3>
</sect2>
<sect2 id="changing-filetypes">
<title>Modifying file types</title>
			<para>
			Here you can define all file types that should be recognised by Bluefish. 
			The defaults for these file types are retrieved from a file called file types.default 
			in ${prefix}/share/bluefish/.
			</para>
			<para>
			The file types consist first of a name (this name is also used in the file filters, and in 
			the highlighting patterns). Second is a list of extensions, separated by a colon (:). Third 
			are the highlighting update characters. Upon a key press of one of these characters, 
			the highlighting 
			engine will refresh the highlighting around the cursor. If this field is empty, any character 
			will force the highlighting engine to refresh. Special characters like the tab and the newline 
			can be entered as \t and \n, the backslash itself is entered as \\. Fifth is the icon location
			for this file type. Sixth is whether this file type is editable by Bluefish (whether or 
			not Bluefish
			should try to open it after a double click). Seventh is a regular expression that can be used to
			detect the file type if a file without extension is loaded. Eight is the auto-tag-closing 
			mode. A 
			value of 0 means that Bluefish should not close XML/HTML tags, a value of 1 means it 
			should close 
			the tags XML style (&lt;br /&gt;), a value of 2 means HTML style.
			</para>
</sect2>
<sect2 id="changing-highlighting-patterns">
<title>Modifying the highlighting patterns</title>

			<para>The highlight patterns are build from Perl compatible regular
			expressions. A pattern has options for coloring and style of the text it
			matches. Within a match other patterns can be used to color parts of
			that match. There are three types of patterns:
			<itemizedlist>
			<listitem>1 Two patterns, match from the start to the end pattern</listitem>
			<listitem>2 One pattern that matches from start to end</listitem>
			<listitem>3	Match a subpattern from the parent pattern</listitem>
			</itemizedlist>
			</para>
			<para>One specific pattern can also be used within several other parent
			patterns. The parent-match option is a regular expression that defines
			all parents for a certain pattern. If empty it will default to ^top$, so
			basically it will be on the top level.</para>
			<para>So how does it work? Lets take a look at a little example text, a
			piece of PHP code within some HTML code:</para>
			<programlisting>&lt;p align="center"&gt;
&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting>
			<para>The first thing the highlighting engine does is finding the
			pattern that has the lowest match. Using the default patterns for PHP,
			the pattern named <literal>html</literal> has a match at position 0:</para>
			<programlisting>&lt;p align="center"&gt;</programlisting>
			<para>So now the highlighting engine searches for the lowest match in
			all subpatterns of<literal>html</literal>, in the region matched by the
			type 2 <literal>html</literal> pattern. Again, the lowest match will
			count. The pattern named <literal>html-tag</literal> has a match at
			position 1. This pattern is a type 3 pattern, so it matches a subpattern
			of the parent:</para>
			<programlisting>p</programlisting>
			<para>the match from subpattern <literal>html-tag</literal> ends at
			position 2 and it does not have any child patterns, so the highlighting
			engine continues at position 2 with all subpatterns from
			<literal>html</literal>. A type 2 pattern named <literal>html-attrib</literal>
			has the lowest match:</para>
			<programlisting>align="center"</programlisting>
			<para>This pattern does have a child pattern, again a type 3 pattern
			called <literal>html-attrib-sub2</literal> matching:</para>
			<programlisting>"center"</programlisting>
			<para>The pattern <literal>html-attrib-sub2</literal> does not have any
			child patterns, and subpatterns of <literal>html-attrib</literal> do not
			have any more matches, and also <literal>html</literal> subpatterns do
			not have any more matches. So we are back on the main level, the
			remaining code to highlight is:</para>
			<programlisting>&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting>
			<para>Now a pattern named <literal>php</literal> has the lowest match.
			This is a type 0 pattern, so the highlight engine continues with all the
			remaining code, but it will not only search for the lowest match of the
			child patterns of <literal>php</literal>, but it will also use for the
			end pattern of <literal>php</literal>. The lowest match in this example
			is a pattern named <literal>php-comment-C++</literal> As you can see the
			?&gt; within the comment does not end the <literal>php</literal>
			pattern, because it lies within a subpattern of <literal>php</literal>:</para>
			<programlisting>// this is a comment ?&gt;</programlisting>
			<para>The pattern <literal>php-comment-C++</literal> does not have any
			child patterns, so the remaining code for the <literal>php</literal>
			subpatterns is:</para>
			<programlisting>?&gt;</programlisting>
			<para>It is very obvious now, the lowest match will be the end pattern
			of the <literal>php</literal> pattern, so we're back on the main
			level, and we have matched all of the code!</para>
			<figure id="syntax_highlighting_example">
				<title id="figure-desc">Syntax highlighting example</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/syntax_highlighting_example.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>The syntax highlighting example</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
		
			<para>The config file for highlighting is a colon separated array with
			the following content:</para>
			<programlisting>mode:
patternname:
case_sensitive(0-on/1-off):
start reg-ex:
end reg-ex:
start &amp; end pattern(1), only start(2), subpattern(3):
parent-match:
foreground-color:
background-color:
don't change weight(0), non-bold(1), bold(2):
don't change style(0), non-italic(1), italic(2): </programlisting>
</sect2>
</sect1>

</chapter>
