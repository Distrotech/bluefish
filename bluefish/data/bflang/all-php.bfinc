<?xml version="1.0" encoding="UTF-8" ?>
<!--
		Bluefish HTML Editor
		all-php.bfinc $Revision: 4947 $
 
		Copyright (C) 2008-2009 Olivier Sessink

		This program is free software; you can redistribute it and/or modify
		it under the terms of the GNU General Public License as published by
		the Free Software Foundation; either version 2 of the License, or
		(at your option) any later version.

		This program is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.

		You should have received a copy of the GNU General Public License
		along with this program; if not, write to the Free Software
		Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.		
-->

<group class="load_php_functions" autocomplete="1" highlight="php-function"  autocomplete_append="();" autocomplete_backup_cursor="2" >
<element pattern="dotnet_load"/>
<element pattern="apache_child_terminate"/>
<element pattern="apache_get_modules"/>
<element pattern="apache_get_version"/>
<element pattern="apache_getenv"/>
<element pattern="apache_lookup_uri"/>
<element pattern="apache_note"/>
<element pattern="apache_request_headers"/>
<element pattern="apache_reset_timeout"/>
<element pattern="apache_response_headers"/>
<element pattern="apache_setenv"/>
<element pattern="ascii2ebcdic"/>
<element pattern="ebcdic2ascii"/>
<element pattern="getallheaders"/>
<element pattern="virtual"/>
<element pattern="apc_add"/>
<element pattern="apc_cache_info"/>
<element pattern="apc_clear_cache"/>
<element pattern="apc_compile_file"/>
<element pattern="apc_define_constants"/>
<element pattern="apc_delete"/>
<element pattern="apc_fetch"/>
<element pattern="apc_load_constants"/>
<element pattern="apc_sma_info"/>
<element pattern="apc_store"/>
<element pattern="apd_breakpoint"/>
<element pattern="apd_callstack"/>
<element pattern="apd_clunk"/>
<element pattern="apd_continue"/>
<element pattern="apd_croak"/>
<element pattern="apd_dump_function_table"/>
<element pattern="apd_dump_persistent_resources"/>
<element pattern="apd_dump_regular_resources"/>
<element pattern="apd_echo"/>
<element pattern="apd_get_active_symbols"/>
<element pattern="apd_set_pprof_trace"/>
<element pattern="apd_set_session_trace"/>
<element pattern="apd_set_session"/>
<element pattern="apd_set_socket_session_trace"/>
<element pattern="override_function"/>
<element pattern="rename_function"/>
<element pattern="array_change_key_case" autocomplete_append="(array $input, $case = null);">
<reference>array_change_key_case(array $input, $case = null);
Changes all keys in an array
<b> input array </b>The array to work on
<b> case int[optional] </b>Either CASE_UPPER or
CASE_LOWER (default)
<b>returns</b>  array an array with its keys lower or uppercased, or false if
input is not an array.
</reference></element>
<element pattern="array_chunk" autocomplete_append="(array $input, $size, $preserve_keys = null);">
<reference>array_chunk(array $input, $size, $preserve_keys = null);
Split an array into chunks
<b> input array </b>The array to work on
<b> size int </b>The size of each chunk
<b> preserve_keys bool[optional] </b>When set to true keys will be preserved.
Default is false which will reindex the chunk numerically
<b>returns</b>  array a multidimensional numerically indexed array, starting with zero,
with each dimension containing size elements.
</reference></element>
<element pattern="array_combine" autocomplete_append="(array $keys, array $values);">
<reference>array_combine(array $keys, array $values);
Creates an array by using one array for keys and another for its values
<b> keys array </b>Array of keys to be used. Illegal values for key will be
converted to string.
<b> values array </b>Array of values to be used
<b>returns</b>  array the combined array, false if the number of elements
for each array isn't equal or if the arrays are empty.
</reference></element>
<element pattern="array_count_values" autocomplete_append="(array $input);">
<reference>array_count_values(array $input);
Counts all the values of an array
<b> input array </b>The array of values to count
<b>returns</b>  array an associative array of values from input as
keys and their count as value.
</reference></element>
<element pattern="array_diff_assoc" autocomplete_append="(array $array1, array $array2, array $_ = null);">
<reference>array_diff_assoc(array $array1, array $array2, array $_ = null);
Computes the difference of arrays with additional index check
<b> array1 array </b>The array to compare from
<b> array2 array </b>An array to compare against
<b> _ array[optional] </b><b>returns</b>  array an array containing all the values from
array1 that are not present in any of the other arrays.
</reference></element>
<element pattern="array_diff_key" autocomplete_append="(array $array1, array $array2, array $_ = null);">
<reference>array_diff_key(array $array1, array $array2, array $_ = null);
Computes the difference of arrays using keys for comparison
<b> array1 array </b>The array to compare from
<b> array2 array </b>An array to compare against
<b> _ array[optional] </b><b>returns</b>  array an array containing all the entries from
array1 that are not present in any of the other arrays.
</reference></element>
<element pattern="array_diff_uassoc" autocomplete_append="(array $array1, array $array2, array $_ = null, $key_compare_func);">
<reference>array_diff_uassoc(array $array1, array $array2, array $_ = null, $key_compare_func);
Computes the difference of arrays with additional index check which is performed by a user supplied callback function
<b> array1 array </b>The array to compare from
<b> array2 array </b>An array to compare against
<b> _ array[optional] </b><b> key_compare_func callback </b>callback function to use.
The callback function must return an integer less than, equal
to, or greater than zero if the first argument is considered to
be respectively less than, equal to, or greater than the second.
<b>returns</b>  array an array containing all the entries from
array1 that are not present in any of the other arrays.
</reference></element>
<element pattern="array_diff_ukey" autocomplete_append="(array $array1, array $array2, array $_ = null, $key_compare_func);">
<reference>array_diff_ukey(array $array1, array $array2, array $_ = null, $key_compare_func);
Computes the difference of arrays using a callback function on the keys for comparison
<b> array1 array </b>The array to compare from
<b> array2 array </b>An array to compare against
<b> _ array[optional] </b><b> key_compare_func callback </b>callback function to use.
The callback function must return an integer less than, equal
to, or greater than zero if the first argument is considered to
be respectively less than, equal to, or greater than the second.
<b>returns</b>  array an array containing all the entries from
array1 that are not present in any of the other arrays.
</reference></element>
<element pattern="array_diff" autocomplete_append="(array $array1, array $array2, array $_ = null);">
<reference>array_diff(array $array1, array $array2, array $_ = null);
Computes the difference of arrays
<b> array1 array </b>The array to compare from
<b> array2 array </b>An array to compare against
<b> _ array[optional] </b><b>returns</b>  array an array containing all the entries from
array1 that are not present in any of the other arrays.
</reference></element>
<element pattern="array_fill_keys" autocomplete_append="(array $keys, $value);">
<reference>array_fill_keys(array $keys, $value);
Fill an array with values, specifying keys
<b> keys array </b>Array of values that will be used as keys. Illegal values
for key will be converted to string.
<b> value mixed </b>Value to use for filling
<b>returns</b>  array the filled array
</reference></element>
<element pattern="array_fill" autocomplete_append="($start_index, $num, $value);">
<reference>array_fill($start_index, $num, $value);
Fill an array with values
<b> start_index int </b>The first index of the returned array
<b> num int </b>Number of elements to insert
<b> value mixed </b>Value to use for filling
<b>returns</b>  array the filled array
</reference></element>
<element pattern="array_filter" autocomplete_append="(array $input, $callback = null);">
<reference>array_filter(array $input, $callback = null);
Filters elements of an array using a callback function
<b> input array </b>The array to iterate over
<b> callback callback[optional] </b>The callback function to use
If no callback is supplied, all entries of
input equal to false (see
converting to
boolean) will be removed.
<b>returns</b>  array the filtered array.
</reference></element>
<element pattern="array_flip" autocomplete_append="(array $trans);">
<reference>array_flip(array $trans);
Exchanges all keys with their associated values in an array
<b> trans array </b>An array of key/value pairs to be flipped.
<b>returns</b>  array the flipped array on success and false on failure.
</reference></element>
<element pattern="array_intersect_assoc" autocomplete_append="(array $array1, array $array2, array $_ = null);">
<reference>array_intersect_assoc(array $array1, array $array2, array $_ = null);
Computes the intersection of arrays with additional index check
<b> array1 array </b>The array with master values to check.
<b> array2 array </b>An array to compare values against.
<b> _ array[optional] </b><b>returns</b>  array an associative array containing all the values in 
array1 that are present in all of the arguments.
</reference></element>
<element pattern="array_intersect_key" autocomplete_append="(array $array1, array $array2, array $_ = null);">
<reference>array_intersect_key(array $array1, array $array2, array $_ = null);
Computes the intersection of arrays using keys for comparison
<b> array1 array </b>The array with master keys to check.
<b> array2 array </b>An array to compare keys against.
<b> _ array[optional] </b><b>returns</b>  array an associative array containing all the values of 
array1 which have matching keys that are present in all
arguments.
</reference></element>
<element pattern="array_intersect_uassoc" autocomplete_append="(array $array1, array $array2, array $_ = null, $key_compare_func);">
<reference>array_intersect_uassoc(array $array1, array $array2, array $_ = null, $key_compare_func);
Computes the intersection of arrays with additional index check, compares indexes by a callback function
<b> array1 array </b>Initial array for comparision of the arrays.
<b> array2 array </b>First array to compare keys against.
<b> _ array[optional] </b><b> key_compare_func callback </b>User supplied callback function to do the comparision.
<b>returns</b>  array the values of array1 whose values exist
in all of the arguments.
</reference></element>
<element pattern="array_intersect_ukey" autocomplete_append="(array $array1, array $array2, array $_ = null, $key_compare_func);">
<reference>array_intersect_ukey(array $array1, array $array2, array $_ = null, $key_compare_func);
Computes the intersection of arrays using a callback function on the keys for comparison
<b> array1 array </b>Initial array for comparision of the arrays.
<b> array2 array </b>First array to compare keys against.
<b> _ array[optional] </b><b> key_compare_func callback </b>User supplied callback function to do the comparision.
<b>returns</b>  array the values of array1 whose keys exist
in all the arguments.
</reference></element>
<element pattern="array_intersect" autocomplete_append="(array $array1, array $array2, array $_ = null);">
<reference>array_intersect(array $array1, array $array2, array $_ = null);
Computes the intersection of arrays
<b> array1 array </b>The array with master values to check.
<b> array2 array </b>An array to compare values against.
<b> _ array[optional] </b><b>returns</b>  array an array containing all of the values in 
array1 whose values exist in all of the parameters.
</reference></element>
<element pattern="array_key_exists" autocomplete_append="($key, array $search);">
<reference>array_key_exists($key, array $search);
Checks if the given key or index exists in the array
<b> key mixed </b>Value to check.
<b> search array </b>An array with keys to check.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="array_keys" autocomplete_append="(array $input, $search_value = null, $strict = null);">
<reference>array_keys(array $input, $search_value = null, $strict = null);
Return all the keys of an array
<b> input array </b>An array containing keys to return.
<b> search_value mixed[optional] </b>If specified, then only keys containing these values are returned.
<b> strict bool[optional] </b>As of PHP 5, this parameter determines if strict comparision (===)
should be used during the search.
<b>returns</b>  array an array of all the keys in input.
</reference></element>
<element pattern="array_map" autocomplete_append="($callback, array $arr1, array $_ = null);">
<reference>array_map($callback, array $arr1, array $_ = null);
Applies the callback to the elements of the given arrays
<b> callback callback </b>Callback function to run for each element in each array.
<b> arr1 array </b>An array to run through the callback function.
<b> _ array[optional] </b><b>returns</b>  array an array containing all the elements of arr1
after applying the callback function to each one.
</reference></element>
<element pattern="array_merge_recursive" autocomplete_append="(array $array1, array $_ = null);">
<reference>array_merge_recursive(array $array1, array $_ = null);
Merge two or more arrays recursively
<b> array1 array </b>Initial array to merge.
<b> _ array[optional] </b><b>returns</b>  array An array of values resulted from merging the arguments together.
</reference></element>
<element pattern="array_merge" autocomplete_append="(array $array1, array $array2 = null, array $_ = null);">
<reference>array_merge(array $array1, array $array2 = null, array $_ = null);
Merge one or more arrays
<b> array1 array </b>Initial array to merge.
<b> array2 array[optional] </b><b> _ array[optional] </b><b>returns</b>  array the resulting array.
</reference></element>
<element pattern="array_multisort" autocomplete_append="(array $arr, $arg = null, $_ = null);">
<reference>array_multisort(array $arr, $arg = null, $_ = null);
Sort multiple or multi-dimensional arrays
<b> arr array </b>An array being sorted.
<b> arg mixed[optional] </b>Optionally another array, or sort options for the
previous array argument: 
SORT_ASC, 
SORT_DESC, 
SORT_REGULAR,
SORT_NUMERIC,
SORT_STRING.
<b> _ mixed[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="array_pad" autocomplete_append="(array $input, $pad_size, $pad_value);">
<reference>array_pad(array $input, $pad_size, $pad_value);
Pad array to the specified length with a value
<b> input array </b>Initial array of values to pad.
<b> pad_size int </b>New size of the array.
<b> pad_value mixed </b>Value to pad if input is less than
pad_size.
<b>returns</b>  array a copy of the input padded to size specified
by pad_size with value 
pad_value. If pad_size is 
positive then the array is padded on the right, if it's negative then 
on the left. If the absolute value of pad_size is less than or equal to 
the length of the input then no padding takes place.
</reference></element>
<element pattern="array_pop" autocomplete_append="(array &amp;$array);">
<reference>array_pop(array &amp;$array);
Pop the element off the end of array
<b> array array </b>The array to get the value from.
<b>returns</b>  mixed the last value of array.
If array is empty (or is not an array),
&amp;null; will be returned.
</reference></element>
<element pattern="array_product" autocomplete_append="(array $array);">
<reference>array_product(array $array);
Calculate the product of values in an array
<b> array array </b>The array.
<b>returns</b>  number the product as an integer or float.
</reference></element>
<element pattern="array_push" autocomplete_append="(array &amp;$array, $var, $_ = null);">
<reference>array_push(array &amp;$array, $var, $_ = null);
Push one or more elements onto the end of array
<b> array array </b>The input array.
<b> var mixed </b>The pushed value.
<b> _ mixed[optional] </b><b>returns</b>  int the new number of elements in the array.
</reference></element>
<element pattern="array_rand" autocomplete_append="(array $input, $num_req = null);">
<reference>array_rand(array $input, $num_req = null);
Pick one or more random entries out of an array
<b> input array </b>The input array.
<b> num_req int[optional] </b>Specifies how many entries you want to pick - if not specified,
defaults to 1.
<b>returns</b>  mixed If you are picking only one entry, array_rand
returns the key for a random entry. Otherwise, it returns an array
of keys for the random entries. This is done so that you can pick
random keys as well as values out of the array.
</reference></element>
<element pattern="array_reduce" autocomplete_append="(array $input, $function, $initial = null);">
<reference>array_reduce(array $input, $function, $initial = null);
Iteratively reduce the array to a single value using a callback function
<b> input array </b>The input array.
<b> function callback </b>The callback function.
<b> initial int[optional] </b>If the optional initial is available, it will
be used at the beginning of the process, or as a final result in case
the array is empty.
<b>returns</b>  mixed the resulting value.
If the array is empty and initial is not passed,
array_reduce returns &amp;null;.
</reference></element>
<element pattern="array_reverse" autocomplete_append="(array $array, $preserve_keys = null);">
<reference>array_reverse(array $array, $preserve_keys = null);
Return an array with elements in reverse order
<b> array array </b>The input array.
<b> preserve_keys bool[optional] </b>If set to true keys are preserved.
<b>returns</b>  array the reversed array.
</reference></element>
<element pattern="array_search" autocomplete_append="($needle, array $haystack, $strict = null);">
<reference>array_search($needle, array $haystack, $strict = null);
Searches the array for a given value and returns the corresponding key if successful
<b> needle mixed </b>The searched value.
If needle is a string, the comparison is done
in a case-sensitive manner.
<b> haystack array </b>The array.
<b> strict bool[optional] </b>If the third parameter strict is set to true
then the array_search function will also check the
types of the
needle in the haystack.
<b>returns</b>  mixed the key for needle if it is found in the
array, false otherwise.
If needle is found in haystack
more than once, the first matching key is returned. To return the keys for
all matching values, use array_keys with the optional
search_value parameter instead.
</reference></element>
<element pattern="array_shift" autocomplete_append="(array &amp;$array);">
<reference>array_shift(array &amp;$array);
Shift an element off the beginning of array
<b> array array </b>The input array.
<b>returns</b>  mixed the shifted value, or &amp;null; if array is
empty or is not an array.
</reference></element>
<element pattern="array_slice" autocomplete_append="(array $array, $offset, $length = null, $preserve_keys = null);">
<reference>array_slice(array $array, $offset, $length = null, $preserve_keys = null);
Extract a slice of the array
<b> array array </b>The input array.
<b> offset int </b>If offset is non-negative, the sequence will
start at that offset in the array. If
offset is negative, the sequence will
start that far from the end of the array.
<b> length int[optional] </b>If length is given and is positive, then
the sequence will have that many elements in it. If
length is given and is negative then the
sequence will stop that many elements from the end of the
array. If it is omitted, then the sequence will have everything
from offset up until the end of the
array.
<b> preserve_keys bool[optional] </b>Note that array_slice will reorder and reset the
array indices by default. You can change this behaviour by setting
preserve_keys to true.
<b>returns</b>  array the slice.
</reference></element>
<element pattern="array_splice" autocomplete_append="(array &amp;$input, $offset, $length = null, $replacement = null);">
<reference>array_splice(array &amp;$input, $offset, $length = null, $replacement = null);
Remove a portion of the array and replace it with something else
<b> input array </b>The input array.
<b> offset int </b>If offset is positive then the start of removed
portion is at that offset from the beginning of the
input array. If offset
is negative then it starts that far from the end of the
input array.
<b> length int[optional] </b>If length is omitted, removes everything
from offset to the end of the array. If
length is specified and is positive, then
that many elements will be removed. If
length is specified and is negative then
the end of the removed portion will be that many elements from
the end of the array. Tip: to remove everything from
offset to the end of the array when
replacement is also specified, use
count($input) for
length.
<b> replacement mixed[optional] </b>If replacement array is specified, then the
removed elements are replaced with elements from this array.
If offset and length
are such that nothing is removed, then the elements from the
replacement array are inserted in the place
specified by the offset. Note that keys in
replacement array are not preserved.
If replacement is just one element it is
not necessary to put array()
around it, unless the element is an array itself.
<b>returns</b>  array the array consisting of the extracted elements.
</reference></element>
<element pattern="array_sum" autocomplete_append="(array $array);">
<reference>array_sum(array $array);
Calculate the sum of values in an array
<b> array array </b>The input array.
<b>returns</b>  number the sum of values as an integer or float.
</reference></element>
<element pattern="array_udiff_assoc" autocomplete_append="(array $array1, array $array2, array $_ = null, $data_compare_func);">
<reference>array_udiff_assoc(array $array1, array $array2, array $_ = null, $data_compare_func);
Computes the difference of arrays with additional index check, compares data by a callback function
<b> array1 array </b>The first array.
<b> array2 array </b>The second array.
<b> _ array[optional] </b><b> data_compare_func callback </b>The callback comparison function.
The user supplied callback function is used for comparison.
It must return an integer less than, equal to, or greater than zero if
the first argument is considered to be respectively less than, equal
to, or greater than the second.
<b>returns</b>  array array_udiff_assoc returns an array
containing all the values from array1
that are not present in any of the other arguments.
Note that the keys are used in the comparison unlike
array_diff and array_udiff.
The comparison of arrays' data is performed by using an user-supplied
callback. In this aspect the behaviour is opposite to the behaviour of
array_diff_assoc which uses internal function for
comparison.
</reference></element>
<element pattern="array_udiff_uassoc" autocomplete_append="(array $array1, array $array2, array $_ = null, $data_compare_func, $key_compare_func);">
<reference>array_udiff_uassoc(array $array1, array $array2, array $_ = null, $data_compare_func, $key_compare_func);
Computes the difference of arrays with additional index check, compares data and indexes by a callback function
<b> array1 array </b>The first array.
<b> array2 array </b>The second array.
<b> _ array[optional] </b><b> data_compare_func callback </b>The callback comparison function.
The user supplied callback function is used for comparison.
It must return an integer less than, equal to, or greater than zero if
the first argument is considered to be respectively less than, equal
to, or greater than the second.
The comparison of arrays' data is performed by using an user-supplied
callback : data_compare_func. In this aspect
the behaviour is opposite to the behaviour of
array_diff_assoc which uses internal function for
comparison.
<b> key_compare_func callback </b>The comparison of keys (indices) is done also by the callback function
key_compare_func. This behaviour is unlike what
array_udiff_assoc does, since the latter compares
the indices by using an internal function.
<b>returns</b>  array an array containing all the values from
array1 that are not present in any of the other
arguments.
</reference></element>
<element pattern="array_udiff" autocomplete_append="(array $array1, array $array2, array $_ = null, $data_compare_func);">
<reference>array_udiff(array $array1, array $array2, array $_ = null, $data_compare_func);
Computes the difference of arrays by using a callback function for data comparison
<b> array1 array </b>The first array.
<b> array2 array </b>The second array.
<b> _ array[optional] </b><b> data_compare_func callback </b>The callback comparison function.
The user supplied callback function is used for comparison.
It must return an integer less than, equal to, or greater than zero if
the first argument is considered to be respectively less than, equal
to, or greater than the second.
<b>returns</b>  array an array containing all the values of array1
that are not present in any of the other arguments.
</reference></element>
<element pattern="array_uintersect_assoc" autocomplete_append="(array $array1, array $array2, array $_ = null, $data_compare_func);">
<reference>array_uintersect_assoc(array $array1, array $array2, array $_ = null, $data_compare_func);
Computes the intersection of arrays with additional index check, compares data by a callback function
<b> array1 array </b>The first array.
<b> array2 array </b>The second array.
<b> _ array[optional] </b><b> data_compare_func callback </b>For comparison is used the user supplied callback function.
It must return an integer less than, equal
to, or greater than zero if the first argument is considered to
be respectively less than, equal to, or greater than the
second.
<b>returns</b>  array an array containing all the values of
array1 that are present in all the arguments.
</reference></element>
<element pattern="array_uintersect_uassoc" autocomplete_append="(array $array1, array $array2, array $_ = null, $data_compare_func, $key_compare_func);">
<reference>array_uintersect_uassoc(array $array1, array $array2, array $_ = null, $data_compare_func, $key_compare_func);
Computes the intersection of arrays with additional index check, compares data and indexes by a callback functions
<b> array1 array </b>The first array.
<b> array2 array </b>The second array.
<b> _ array[optional] </b><b> data_compare_func callback </b>For comparison is used the user supplied callback function.
It must return an integer less than, equal
to, or greater than zero if the first argument is considered to
be respectively less than, equal to, or greater than the
second.
<b> key_compare_func callback </b>Key comparison callback function.
<b>returns</b>  array an array containing all the values of
array1 that are present in all the arguments.
</reference></element>
<element pattern="array_uintersect" autocomplete_append="(array $array1, array $array2, array $_ = null, $data_compare_func);">
<reference>array_uintersect(array $array1, array $array2, array $_ = null, $data_compare_func);
Computes the intersection of arrays, compares data by a callback function
<b> array1 array </b>The first array.
<b> array2 array </b>The second array.
<b> _ array[optional] </b><b> data_compare_func callback </b>The callback comparison function.
The user supplied callback function is used for comparison.
It must return an integer less than, equal to, or greater than zero if
the first argument is considered to be respectively less than, equal
to, or greater than the second.
<b>returns</b>  array an array containing all the values of array1
that are present in all the arguments.
</reference></element>
<element pattern="array_unique" autocomplete_append="(array $array);">
<reference>array_unique(array $array);
Removes duplicate values from an array
<b> array array </b>The input array.
<b>returns</b>  array the filtered array.
</reference></element>
<element pattern="array_unshift" autocomplete_append="(array &amp;$array, $var, $_ = null);">
<reference>array_unshift(array &amp;$array, $var, $_ = null);
Prepend one or more elements to the beginning of an array
<b> array array </b>The input array.
<b> var mixed </b>The prepended variable.
<b> _ mixed[optional] </b><b>returns</b>  int the new number of elements in the array.
</reference></element>
<element pattern="array_values" autocomplete_append="(array $input);">
<reference>array_values(array $input);
Return all the values of an array
<b> input array </b>The array.
<b>returns</b>  array an indexed array of values.
</reference></element>
<element pattern="array_walk_recursive" autocomplete_append="(array &amp;$input, $funcname, $userdata = null);">
<reference>array_walk_recursive(array &amp;$input, $funcname, $userdata = null);
Apply a user function recursively to every member of an array
<b> input array </b>The input array.
<b> funcname callback </b>Typically, funcname takes on two parameters.
The input parameter's value being the first, and
the key/index second.
If funcname needs to be working with the
actual values of the array, specify the first parameter of
funcname as a
reference. Then,
any changes made to those elements will be made in the
original array itself.
<b> userdata mixed[optional] </b>If the optional userdata parameter is supplied,
it will be passed as the third parameter to the callback
funcname.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="array_walk" autocomplete_append="(array &amp;$array, $funcname, $userdata = null);">
<reference>array_walk(array &amp;$array, $funcname, $userdata = null);
Apply a user function to every member of an array
<b> array array </b>The input array.
<b> funcname callback </b>Typically, funcname takes on two parameters.
The array parameter's value being the first, and
the key/index second.
If funcname needs to be working with the
actual values of the array, specify the first parameter of
funcname as a
reference. Then,
any changes made to those elements will be made in the
original array itself.
Users may not change the array itself from the
callback function. e.g. Add/delete elements, unset elements, etc. If
the array that array_walk is applied to is
changed, the behavior of this function is undefined, and unpredictable.
<b> userdata mixed[optional] </b>If the optional userdata parameter is supplied,
it will be passed as the third parameter to the callback
funcname.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="array"/>
<element pattern="arsort" autocomplete_append="(array &amp;$array, $sort_flags = null);">
<reference>arsort(array &amp;$array, $sort_flags = null);
Sort an array in reverse order and maintain index association
<b> array array </b>The input array.
<b> sort_flags int[optional] </b>You may modify the behavior of the sort using the optional parameter
sort_flags, for details see
sort.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="asort" autocomplete_append="(array &amp;$array, $sort_flags = null);">
<reference>asort(array &amp;$array, $sort_flags = null);
Sort an array and maintain index association
<b> array array </b>The input array.
<b> sort_flags int[optional] </b>You may modify the behavior of the sort using the optional
parameter sort_flags, for details
see sort.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="compact" autocomplete_append="($varname, $_ = null);">
<reference>compact($varname, $_ = null);
Create array containing variables and their values
<b> varname mixed </b>compact takes a variable number of parameters.
Each parameter can be either a string containing the name of the
variable, or an array of variable names. The array can contain other
arrays of variable names inside it; compact
handles it recursively.
<b> _ mixed[optional] </b><b>returns</b>  array the output array with all the variables added to it.
</reference></element>
<element pattern="count" autocomplete_append="($var, $mode = null);">
<reference>count($var, $mode = null);
Count elements in an array, or properties in an object
<b> var mixed </b>The array.
<b> mode int[optional] </b>If the optional mode parameter is set to
COUNT_RECURSIVE (or 1), count
will recursively count the array. This is particularly useful for
counting all the elements of a multidimensional array. The default
value for mode is 0.
count does not detect infinite recursion.
<b>returns</b>  int the number of elements in var, which is
typically an array, since anything else will have one
element.
If var is not an array or an object with
implemented Countable interface,
1 will be returned.
There is one exception, if var is &amp;null;,
0 will be returned.
count may return 0 for a variable that isn't set,
but it may also return 0 for a variable that has been initialized with an
empty array. Use isset to test if a variable is set.
</reference></element>
<element pattern="current" autocomplete_append="(array &amp;$array);">
<reference>current(array &amp;$array);
Return the current element in an array
<b> array array </b>The array.
<b>returns</b>  mixed The current function simply returns the
value of the array element that's currently being pointed to by the
internal pointer. It does not move the pointer in any way. If the
internal pointer points beyond the end of the elements list or the array is 
empty, current returns false.
</reference></element>
<element pattern="each" autocomplete_append="(array &amp;$array);">
<reference>each(array &amp;$array);
Return the current key and value pair from an array and advance the array cursor
<b> array array </b>The input array.
<b>returns</b>  array the current key and value pair from the array
array. This pair is returned in a four-element
array, with the keys 0, 1,
key, and value. Elements
0 and key contain the key name of
the array element, and 1 and value
contain the data.
If the internal pointer for the array points past the end of the
array contents, each returns
false.
</reference></element>
<element pattern="end" autocomplete_append="(array &amp;$array);">
<reference>end(array &amp;$array);
Set the internal pointer of an array to its last element
<b> array array </b>The array.
<b>returns</b>  mixed the value of the last element.
</reference></element>
<element pattern="extract" autocomplete_append="(array $var_array, $extract_type = null, $prefix = null);">
<reference>extract(array $var_array, $extract_type = null, $prefix = null);
Import variables into the current symbol table from an array
<b> var_array array </b>Note that prefix is only required if
extract_type is EXTR_PREFIX_SAME,
EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID
or EXTR_PREFIX_IF_EXISTS. If
the prefixed result is not a valid variable name, it is not
imported into the symbol table. Prefixes are automatically separated from
the array key by an underscore character.
<b> extract_type int[optional] </b>The way invalid/numeric keys and collisions are treated is determined
by the extract_type. It can be one of the
following values:
EXTR_OVERWRITE
If there is a collision, overwrite the existing variable.
<b> prefix string[optional] Only overwrite the variable if it already exists in the</b>current symbol table, otherwise do nothing. This is useful
for defining a list of valid variables and then extracting
only those variables you have defined out of
$_REQUEST, for example.
<b>returns</b>  int the number of variables successfully imported into the symbol
table.
</reference></element>
<element pattern="in_array" autocomplete_append="($needle, array $haystack, $strict = null);">
<reference>in_array($needle, array $haystack, $strict = null);
Checks if a value exists in an array
<b> needle mixed </b>The searched value.
If needle is a string, the comparison is done
in a case-sensitive manner.
<b> haystack array </b>The array.
<b> strict bool[optional] </b>If the third parameter strict is set to true
then the in_array function will also check the
types of the
needle in the haystack.
<b>returns</b>  bool true if needle is found in the array,
false otherwise.
</reference></element>
<element pattern="key" autocomplete_append="(array &amp;$array);">
<reference>key(array &amp;$array);
Fetch a key from an array
<b> array array </b>The array.
<b>returns</b>  mixed the index.
</reference></element>
<element pattern="krsort" autocomplete_append="(array &amp;$array, $sort_flags = null);">
<reference>krsort(array &amp;$array, $sort_flags = null);
Sort an array by key in reverse order
<b> array array </b>The input array.
<b> sort_flags int[optional] </b>You may modify the behavior of the sort using the optional parameter
sort_flags, for details see
sort.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ksort" autocomplete_append="(array &amp;$array, $sort_flags = null);">
<reference>ksort(array &amp;$array, $sort_flags = null);
Sort an array by key
<b> array array </b>The input array.
<b> sort_flags int[optional] </b>You may modify the behavior of the sort using the optional
parameter sort_flags, for details
see sort.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="list"/>
<element pattern="natcasesort" autocomplete_append="(array &amp;$array);">
<reference>natcasesort(array &amp;$array);
Sort an array using a case insensitive "natural order" algorithm
<b> array array </b>The input array.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="natsort" autocomplete_append="(array &amp;$array);">
<reference>natsort(array &amp;$array);
Sort an array using a "natural order" algorithm
<b> array array </b>The input array.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="next" autocomplete_append="(array &amp;$array);">
<reference>next(array &amp;$array);
Advance the internal array pointer of an array
<b> array array </b>The array being affected.
<b>returns</b>  mixed the array value in the next place that's pointed to by the
internal array pointer, or false if there are no more elements.
</reference></element>
<element pattern="prev" autocomplete_append="(array &amp;$array);">
<reference>prev(array &amp;$array);
Rewind the internal array pointer
<b> array array </b>The input array.
<b>returns</b>  mixed the array value in the previous place that's pointed to by
the internal array pointer, or false if there are no more
elements.
</reference></element>
<element pattern="range" autocomplete_append="($low, $high, $step = null);">
<reference>range($low, $high, $step = null);
Create an array containing a range of elements
<b> low mixed </b>Low value.
<b> high mixed </b>High value.
<b> step number[optional] </b>If a step value is given, it will be used as the
increment between elements in the sequence. step
should be given as a positive number. If not specified,
step will default to 1.
<b>returns</b>  array an array of elements from low to
high, inclusive. If low &gt; high, the sequence will
be from high to low.
</reference></element>
<element pattern="reset" autocomplete_append="(array &amp;$array);">
<reference>reset(array &amp;$array);
Set the internal pointer of an array to its first element
<b> array array </b>The input array.
<b>returns</b>  mixed the value of the first array element, or false if the array is
empty.
</reference></element>
<element pattern="rsort" autocomplete_append="(array &amp;$array, $sort_flags = null);">
<reference>rsort(array &amp;$array, $sort_flags = null);
Sort an array in reverse order
<b> array array </b>The input array.
<b> sort_flags int[optional] </b>You may modify the behavior of the sort using the optional
parameter sort_flags, for details see
sort.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="shuffle" autocomplete_append="(array &amp;$array);">
<reference>shuffle(array &amp;$array);
Shuffle an array
<b> array array </b>The array.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="sort" autocomplete_append="(array &amp;$array, $sort_flags = null);">
<reference>sort(array &amp;$array, $sort_flags = null);
Sort an array
<b> array array </b>The input array.
<b> sort_flags int[optional] </b>The optional second parameter sort_flags
may be used to modify the sorting behavior using these values:
Sorting type flags:
SORT_REGULAR - compare items normally
(don't change types)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="uasort" autocomplete_append="(array &amp;$array, $cmp_function);">
<reference>uasort(array &amp;$array, $cmp_function);
Sort an array with a user-defined comparison function and maintain index association
<b> array array </b>The input array.
<b> cmp_function callback </b>See usort and uksort for
examples of user-defined comparison functions.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="uksort" autocomplete_append="(array &amp;$array, $cmp_function);">
<reference>uksort(array &amp;$array, $cmp_function);
Sort an array by keys using a user-defined comparison function
<b> array array </b>The input array.
<b> cmp_function callback </b>The callback comparison function.
Function cmp_function should accept two
parameters which will be filled by pairs of array keys.
The comparison function must return an integer less than, equal
to, or greater than zero if the first argument is considered to
be respectively less than, equal to, or greater than the
second.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="usort" autocomplete_append="(array &amp;$array, $cmp_function);">
<reference>usort(array &amp;$array, $cmp_function);
Sort an array by values using a user-defined comparison function
<b> array array </b>The input array.
<b> cmp_function callback </b>The comparison function must return an integer less than, equal to, or
greater than zero if the first argument is considered to be
respectively less than, equal to, or greater than the second.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="aspell_check_raw"/>
<element pattern="aspell_check"/>
<element pattern="aspell_new"/>
<element pattern="aspell_suggest"/>
<element pattern="bcadd" autocomplete_append="($left_operand, $right_operand, $scale = null);">
<reference>bcadd($left_operand, $right_operand, $scale = null);
Add two arbitrary precision numbers
<b> left_operand string </b>The left operand, as a string.
<b> right_operand string </b>The right operand, as a string.
<b> scale int[optional] </b><b>returns</b>  string The sum of the two operands, as a string.
</reference></element>
<element pattern="bccomp" autocomplete_append="($left_operand, $right_operand, $scale = null);">
<reference>bccomp($left_operand, $right_operand, $scale = null);
Compare two arbitrary precision numbers
<b> left_operand string </b>The left operand, as a string.
<b> right_operand string </b>The right operand, as a string.
<b> scale int[optional] </b>The optional scale parameter is used to set the
number of digits after the decimal place which will be used in the
comparison. 
<b>returns</b>  int 0 if the two operands are equal, 1 if the
left_operand is larger than the 
right_operand, -1 otherwise.
</reference></element>
<element pattern="bcdiv" autocomplete_append="($left_operand, $right_operand, $scale = null);">
<reference>bcdiv($left_operand, $right_operand, $scale = null);
Divide two arbitrary precision numbers
<b> left_operand string </b>The left operand, as a string.
<b> right_operand string </b>The right operand, as a string.
<b> scale int[optional] </b><b>returns</b>  string the result of the division as a string, or &amp;null; if 
right_operand is 0.
</reference></element>
<element pattern="bcmod" autocomplete_append="($left_operand, $modulus);">
<reference>bcmod($left_operand, $modulus);
Get modulus of an arbitrary precision number
<b> left_operand string </b>The left operand, as a string.
<b> modulus string </b>The modulus, as a string.
<b>returns</b>  string the modulus as a string, or &amp;null; if 
modulus is 0.
</reference></element>
<element pattern="bcmul" autocomplete_append="($left_operand, $right_operand, $scale = null);">
<reference>bcmul($left_operand, $right_operand, $scale = null);
Multiply two arbitrary precision number
<b> left_operand string </b>The left operand, as a string.
<b> right_operand string </b>The right operand, as a string.
<b> scale int[optional] </b><b>returns</b>  string the result as a string.
</reference></element>
<element pattern="bcpow" autocomplete_append="($left_operand, $right_operand, $scale = null);">
<reference>bcpow($left_operand, $right_operand, $scale = null);
Raise an arbitrary precision number to another
<b> left_operand string </b>The left operand, as a string.
<b> right_operand string </b>The right operand, as a string.
<b> scale int[optional] </b><b>returns</b>  string the result as a string.
</reference></element>
<element pattern="bcpowmod" autocomplete_append="($left_operand, $right_operand, $modulus, $scale = null);">
<reference>bcpowmod($left_operand, $right_operand, $modulus, $scale = null);
Raise an arbitrary precision number to another, reduced by a specified modulus
<b> left_operand string </b>The left operand, as a string.
<b> right_operand string </b>The right operand, as a string.
<b> modulus string </b>The modulus, as a string.
<b> scale int[optional] </b><b>returns</b>  string the result as a string, or &amp;null; if modulus
is 0.
</reference></element>
<element pattern="bcscale" autocomplete_append="($scale);">
<reference>bcscale($scale);
Set default scale parameter for all bc math functions
<b> scale int </b>The scale factor.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="bcsqrt" autocomplete_append="($operand, $scale = null);">
<reference>bcsqrt($operand, $scale = null);
Get the square root of an arbitrary precision number
<b> operand string </b>The operand, as a string.
<b> scale int[optional] </b><b>returns</b>  string the square root as a string, or &amp;null; if 
operand is negative.
</reference></element>
<element pattern="bcsub" autocomplete_append="($left_operand, $right_operand, $scale = null);">
<reference>bcsub($left_operand, $right_operand, $scale = null);
Subtract one arbitrary precision number from another
<b> left_operand string </b>The left operand, as a string.
<b> right_operand string </b>The right operand, as a string.
<b> scale int[optional] </b><b>returns</b>  string The result of the substraction, as a string.
</reference></element>
<element pattern="bcompiler_load_exe"/>
<element pattern="bcompiler_load"/>
<element pattern="bcompiler_parse_class"/>
<element pattern="bcompiler_read"/>
<element pattern="bcompiler_write_class"/>
<element pattern="bcompiler_write_constant"/>
<element pattern="bcompiler_write_exe_footer"/>
<element pattern="bcompiler_write_file"/>
<element pattern="bcompiler_write_footer"/>
<element pattern="bcompiler_write_function"/>
<element pattern="bcompiler_write_functions_from_file"/>
<element pattern="bcompiler_write_header"/>
<element pattern="bcompiler_write_included_filename"/>
<element pattern="bzclose" autocomplete_append="($bz);">
<reference>bzclose($bz);
Close a bzip2 file
<b> bz resource </b>The file pointer. It must be valid and must point to a file 
successfully opened by bzopen.
<b>returns</b>  int Returns true on success or false on failure.
</reference></element>
<element pattern="bzcompress" autocomplete_append="($source, $blocksize = null, $workfactor = null);">
<reference>bzcompress($source, $blocksize = null, $workfactor = null);
Compress a string into bzip2 encoded data
<b> source string </b>The string to compress.
<b> blocksize int[optional] </b>Specifies the blocksize used during compression and should be a number 
from 1 to 9 with 9 giving the best compression, but using more 
resources to do so. blocksize defaults to 4.
<b> workfactor int[optional] </b>Controls how the compression phase behaves when presented with worst
case, highly repetitive, input data. The value can be between 0 and
250 with 0 being a special case and 30 being the default value. 
Regardless of the workfactor, the generated 
output is the same.
<b>returns</b>  mixed The compressed string or number of error in case of error.
</reference></element>
<element pattern="bzdecompress" autocomplete_append="($source, $small = null);">
<reference>bzdecompress($source, $small = null);
Decompresses bzip2 encoded data
<b> source string </b>The string to decompress.
<b> small int[optional] </b>If true, an alternative decompression algorithm will be used which
uses less memory (the maximum memory requirement drops to around 2300K) 
but works at roughly half the speed.
See the bzip2 documentation for more 
information about this feature.
<b>returns</b>  mixed The decompressed string or number of error in case of error.
</reference></element>
<element pattern="bzerrno" autocomplete_append="($bz);">
<reference>bzerrno($bz);
Returns a bzip2 error number
<b> bz resource </b>The file pointer. It must be valid and must point to a file 
successfully opened by bzopen.
<b>returns</b>  int the error number as an integer.
</reference></element>
<element pattern="bzerror" autocomplete_append="($bz);">
<reference>bzerror($bz);
Returns the bzip2 error number and error string in an array
<b> bz resource </b>The file pointer. It must be valid and must point to a file 
successfully opened by bzopen.
<b>returns</b>  array an associative array, with the error code in the 
errno entry, and the error message in the
errstr entry.
</reference></element>
<element pattern="bzerrstr" autocomplete_append="($bz);">
<reference>bzerrstr($bz);
Returns a bzip2 error string
<b> bz resource </b>The file pointer. It must be valid and must point to a file 
successfully opened by bzopen.
<b>returns</b>  string a string containing the error message.
</reference></element>
<element pattern="bzflush" autocomplete_append="($bz);">
<reference>bzflush($bz);
Force a write of all buffered data
<b> bz resource </b>The file pointer. It must be valid and must point to a file 
successfully opened by bzopen.
<b>returns</b>  int Returns true on success or false on failure.
</reference></element>
<element pattern="bzopen" autocomplete_append="($filename, $mode);">
<reference>bzopen($filename, $mode);
Opens a bzip2 compressed file
<b> filename string </b>The name of the file to open.
<b> mode string </b>Similar to the fopen function ('r' for read, 
'w' for write, etc.).
<b>returns</b>  resource If the open fails, bzopen returns false, otherwise 
it returns a pointer to the newly opened file.
</reference></element>
<element pattern="bzread" autocomplete_append="($bz, $length = null);">
<reference>bzread($bz, $length = null);
Binary safe bzip2 file read
<b> bz resource </b>The file pointer. It must be valid and must point to a file 
successfully opened by bzopen.
<b> length int[optional] </b>If not specified, bzread will read 1024 
(uncompressed) bytes at a time.
<b>returns</b>  string the uncompressed data, or false on error.
</reference></element>
<element pattern="bzwrite" autocomplete_append="($bz, $data, $length = null);">
<reference>bzwrite($bz, $data, $length = null);
Binary safe bzip2 file write
<b> bz resource </b>The file pointer. It must be valid and must point to a file 
successfully opened by bzopen.
<b> data string </b>The written data.
<b> length int[optional] </b>If supplied, writing will stop after length 
(uncompressed) bytes have been written or the end of 
data is reached, whichever comes first.
<b>returns</b>  int the number of bytes written, or false on error.
</reference></element>
<element pattern="cal_days_in_month" autocomplete_append="($calendar, $month, $year);">
<reference>cal_days_in_month($calendar, $month, $year);
Return the number of days in a month for a given year and calendar
<b> calendar int </b>Calendar to use for calculation
<b> month int </b>Month in the selected calendar
<b> year int </b>Year in the selected calendar
<b>returns</b>  int The length in days of the selected month in the given calendar
</reference></element>
<element pattern="cal_from_jd" autocomplete_append="($jd, $calendar);">
<reference>cal_from_jd($jd, $calendar);
Converts from Julian Day Count to a supported calendar
<b> jd int </b>Julian day as integer
<b> calendar int </b>Calendar to convert to
<b>returns</b>  array an array containing calendar information like month, day, year,
day of week, abbreviated and full names of weekday and month and the
date in string form "month/day/year".
</reference></element>
<element pattern="cal_info" autocomplete_append="($calendar = null);">
<reference>cal_info($calendar = null);
Returns information about a particular calendar
<b> calendar int[optional] </b>Calendar to return information for. If no calendar is specified
information about all calendars is returned.
<b>returns</b>  array 
</reference></element>
<element pattern="cal_to_jd" autocomplete_append="($calendar, $month, $day, $year);">
<reference>cal_to_jd($calendar, $month, $day, $year);
Converts from a supported calendar to Julian Day Count
<b> calendar int </b>Calendar to convert from, one of 
CAL_GREGORIAN,
CAL_JULIAN,
CAL_JEWISH or
CAL_FRENCH.
<b> month int </b>The month as a number, the valid range depends 
on the calendar
<b> day int </b>The day as a number, the valid range depends 
on the calendar
<b> year int </b>The year as a number, the valid range depends 
on the calendar
<b>returns</b>  int A Julian Day number.
</reference></element>
<element pattern="easter_date" autocomplete_append="($year = null);">
<reference>easter_date($year = null);
Get Unix timestamp for midnight on Easter of a given year
<b> year int[optional] </b>The year as a number between 1970 an 2037
<b>returns</b>  int The easter date as a unix timestamp.
</reference></element>
<element pattern="easter_days" autocomplete_append="($year = null, $method = null);">
<reference>easter_days($year = null, $method = null);
Get number of days after March 21 on which Easter falls for a given year
<b> year int[optional] </b>The year as a positive number
<b> method int[optional] </b>Allows to calculate easter dates based
on the Gregorian calendar during the years 1582 - 1752 when set to
CAL_EASTER_ROMAN. See the calendar constants for more valid
constants. 
<b>returns</b>  int The number of days after March 21st that the Easter Sunday
is in the given year.
</reference></element>
<element pattern="frenchtojd" autocomplete_append="($month, $day, $year);">
<reference>frenchtojd($month, $day, $year);
Converts a date from the French Republican Calendar to a Julian Day Count
<b> month int </b>The month as a number from 1 (for Vendémiaire) to 13 (for the period of 5-6 days at the end of each year)
<b> day int </b>The day as a number from 1 to 30
<b> year int </b>The year as a number between 1 and 14
<b>returns</b>  int The julian day for the given french revolution date as an integer.
</reference></element>
<element pattern="gregoriantojd" autocomplete_append="($month, $day, $year);">
<reference>gregoriantojd($month, $day, $year);
Converts a Gregorian date to Julian Day Count
<b> month int </b>The month as a number from 1 (for January) to 12 (for December)
<b> day int </b>The day as a number from 1 to 31
<b> year int </b>The year as a number between -4714 and 9999
<b>returns</b>  int The julian day for the given gregorian date as an integer.
</reference></element>
<element pattern="jddayofweek" autocomplete_append="($julianday, $mode = null);">
<reference>jddayofweek($julianday, $mode = null);
Returns the day of the week
<b> julianday int </b>A julian day number as integer
<b> mode int[optional] </b>Calendar week modes
0 (Default) Return the day number as an int (0=Sunday, 1=Monday, etc)
1 Returns string containing the day of week (English-Gregorian)
2 Return a string containing the abbreviated day of week (English-Gregorian)
<b>returns</b>  mixed The gregorian weekday as either an integer or string.
</reference></element>
<element pattern="jdmonthname" autocomplete_append="($julianday, $mode);">
<reference>jdmonthname($julianday, $mode);
Returns a month name
<b> julianday int </b><b> mode int </b><b>returns</b>  string The month name for the given Julian Day and calendar.
</reference></element>
<element pattern="jdtofrench" autocomplete_append="($juliandaycount);">
<reference>jdtofrench($juliandaycount);
Converts a Julian Day Count to the French Republican Calendar
<b> juliandaycount int </b><b>returns</b>  string The french revolution date as a string in the form "month/day/year"
</reference></element>
<element pattern="jdtogregorian" autocomplete_append="($julianday);">
<reference>jdtogregorian($julianday);
Converts Julian Day Count to Gregorian date
<b> julianday int </b>A julian day number as integer
<b>returns</b>  string The gregorian date as a string in the form "month/day/year"
</reference></element>
<element pattern="jdtojewish" autocomplete_append="($juliandaycount, $hebrew = null, $fl = null);">
<reference>jdtojewish($juliandaycount, $hebrew = null, $fl = null);
Converts a Julian day count to a Jewish calendar date
<b> juliandaycount int </b><b> hebrew bool[optional] </b>If the hebrew parameter is set to true, the
fl parameter is used for Hebrew, string based,
output format. 
<b> fl int[optional] </b>The available formats are: 
CAL_JEWISH_ADD_ALAFIM_GERESH,
CAL_JEWISH_ADD_ALAFIM,
CAL_JEWISH_ADD_GERESHAYIM.
<b>returns</b>  string The jewish date as a string in the form "month/day/year"
</reference></element>
<element pattern="jdtojulian" autocomplete_append="($julianday);">
<reference>jdtojulian($julianday);
Converts a Julian Day Count to a Julian Calendar Date
<b> julianday int </b>A julian day number as integer
<b>returns</b>  string The julian date as a string in the form "month/day/year"
</reference></element>
<element pattern="jdtounix" autocomplete_append="($jday);">
<reference>jdtounix($jday);
Convert Julian Day to Unix timestamp
<b> jday int </b>A julian day number between 2440588 and 2465342.
<b>returns</b>  int The unix timestamp for the start of the given julian day.
</reference></element>
<element pattern="jewishtojd" autocomplete_append="($month, $day, $year);">
<reference>jewishtojd($month, $day, $year);
Converts a date in the Jewish Calendar to Julian Day Count
<b> month int </b>The month as a number from 1 to 13
<b> day int </b>The day as a number from 1 to 30
<b> year int </b>The year as a number between 1 and 9999
<b>returns</b>  int The julian day for the given jewish date as an integer.
</reference></element>
<element pattern="juliantojd" autocomplete_append="($month, $day, $year);">
<reference>juliantojd($month, $day, $year);
Converts a Julian Calendar date to Julian Day Count
<b> month int </b>The month as a number from 1 (for January) to 12 (for December)
<b> day int </b>The day as a number from 1 to 31
<b> year int </b>The year as a number between -4713 and 9999
<b>returns</b>  int The julian day for the given julian date as an integer.
</reference></element>
<element pattern="unixtojd" autocomplete_append="($timestamp = null);">
<reference>unixtojd($timestamp = null);
Convert Unix timestamp to Julian Day
<b> timestamp int[optional] </b>A unix timestamp to convert.
<b>returns</b>  int A julian day number as integer.
</reference></element>
<element pattern="ccvs_add"/>
<element pattern="ccvs_auth"/>
<element pattern="ccvs_command"/>
<element pattern="ccvs_count"/>
<element pattern="ccvs_delete"/>
<element pattern="ccvs_done"/>
<element pattern="ccvs_init"/>
<element pattern="ccvs_lookup"/>
<element pattern="ccvs_new"/>
<element pattern="ccvs_report"/>
<element pattern="ccvs_return"/>
<element pattern="ccvs_reverse"/>
<element pattern="ccvs_sale"/>
<element pattern="ccvs_status"/>
<element pattern="ccvs_textvalue"/>
<element pattern="ccvs_void"/>
<element pattern="call_user_method_array" autocomplete_append="($method_name, &amp;$obj, array $params);">
<reference>call_user_method_array($method_name, &amp;$obj, array $params);
Call a user method given with an array of parameters [deprecated]
<b> method_name string </b><b> obj object </b><b> params array </b><b>returns</b>  mixed 
</reference></element>
<element pattern="call_user_method" autocomplete_append="($method_name, &amp;$obj, $parameter = null, $_ = null);">
<reference>call_user_method($method_name, &amp;$obj, $parameter = null, $_ = null);
Call a user method on an specific object [deprecated]
<b> method_name string </b><b> obj object </b><b> parameter mixed[optional] </b><b> _ mixed[optional] </b><b>returns</b>  mixed 
</reference></element>
<element pattern="class_exists" autocomplete_append="($class_name, $autoload = null);">
<reference>class_exists($class_name, $autoload = null);
Checks if the class has been defined
<b> class_name string </b>The class name. The name is matched in a case-insensitive manner.
<b> autoload bool[optional] </b>Whether or not to call &amp;link.autoload; by default. Defaults to true.
<b>returns</b>  bool true if class_name is a defined class,
false otherwise.
</reference></element>
<element pattern="get_class_methods" autocomplete_append="($class_name);">
<reference>get_class_methods($class_name);
Gets the class methods' names
<b> class_name mixed </b>The class name or an object instance
<b>returns</b>  array an array of method names defined for the class specified by
class_name. In case of an error, it returns &amp;null;.
</reference></element>
<element pattern="get_class_vars" autocomplete_append="($class_name);">
<reference>get_class_vars($class_name);
Get the default properties of the class
<b> class_name string </b>The class name
<b>returns</b>  array an associative array of default public properties of the class.
The resulting array elements are in the form of 
varname =&gt; value.
</reference></element>
<element pattern="get_class" autocomplete_append="($object = null);">
<reference>get_class($object = null);
Returns the name of the class of an object
<b> object object[optional] </b>The tested object
<b>returns</b>  string the name of the class of which object is an
instance. Returns false if object is not an 
object.
</reference></element>
<element pattern="get_declared_classes" autocomplete_append="();">
<reference>get_declared_classes();
Returns an array with the name of the defined classes
<b>returns</b>  array an array of the names of the declared classes in the current
script.
In PHP 4.0.1, three extra classes are returned at the beginning of
the array: stdClass (defined in
Zend/zend.c),
OverloadedTestClass (defined in
ext/standard/basic_functions.c)
and Directory
(defined in ext/standard/dir.c).
Also note that depending on what extensions you have compiled or
loaded into PHP, additional classes could be present. This means that
you will not be able to define your own classes using these
names. There is a list of predefined classes in the Predefined Classes section of
the appendices.
</reference></element>
<element pattern="get_declared_interfaces" autocomplete_append="();">
<reference>get_declared_interfaces();
Returns an array of all declared interfaces
<b>returns</b>  array an array of the names of the declared interfaces in the current
script.
</reference></element>
<element pattern="get_object_vars" autocomplete_append="($object);">
<reference>get_object_vars($object);
Gets the public properties of the given object
<b> object object </b>An object instance.
<b>returns</b>  array an associative array of defined object accessible non-static properties 
for the specified object in scope. If a property have 
not been assigned a value, it will be returned with a &amp;null; value.
</reference></element>
<element pattern="get_parent_class" autocomplete_append="($object = null);">
<reference>get_parent_class($object = null);
Retrieves the parent class name for object or class
<b> object mixed[optional] </b>The tested object or class name
<b>returns</b>  string the name of the parent class of the class of which
object is an instance or the name.
If the object does not have a parent false will be returned.
If called without parameter outside object, this function returns false.
</reference></element>
<element pattern="interface_exists" autocomplete_append="($interface_name, $autoload = null);">
<reference>interface_exists($interface_name, $autoload = null);
Checks if the interface has been defined
<b> interface_name string </b>The interface name
<b> autoload bool[optional] </b>Whether to call &amp;link.autoload; or not by default
<b>returns</b>  bool true if the interface given by 
interface_name has been defined, false otherwise.
</reference></element>
<element pattern="is_a" autocomplete_append="($object, $class_name);">
<reference>is_a($object, $class_name);
Checks if the object is of this class or has this class as one of its parents
<b> object object </b>The tested object
<b> class_name string </b>The class name
<b>returns</b>  bool true if the object is of this class or has this class as one of
its parents, false otherwise.
</reference></element>
<element pattern="is_subclass_of" autocomplete_append="($object, $class_name);">
<reference>is_subclass_of($object, $class_name);
Checks if the object has this class as one of its parents
<b> object mixed </b>A class name or an object instance
<b> class_name string </b>The class name
<b>returns</b>  bool This function returns true if the object object,
belongs to a class which is a subclass of 
class_name, false otherwise.
</reference></element>
<element pattern="method_exists" autocomplete_append="($object, $method_name);">
<reference>method_exists($object, $method_name);
Checks if the class method exists
<b> object object </b>An object instance
<b> method_name string </b>The method name
<b>returns</b>  bool true if the method given by method_name
has been defined for the given object, false 
otherwise.
</reference></element>
<element pattern="property_exists" autocomplete_append="($class, $property);">
<reference>property_exists($class, $property);
Checks if the object or class has a property
<b> class mixed </b>The class name or an object of the class to test for
<b> property string </b>The name of the property
<b>returns</b>  bool true if the property exists, false if it doesn't exist or
&amp;null; in case of an error.
</reference></element>
<element pattern="classkit_import"/>
<element pattern="classkit_method_add"/>
<element pattern="classkit_method_copy"/>
<element pattern="classkit_method_redefine"/>
<element pattern="classkit_method_remove"/>
<element pattern="classkit_method_rename"/>
<element pattern="cpdf_add_annotation"/>
<element pattern="cpdf_add_outline"/>
<element pattern="cpdf_arc"/>
<element pattern="cpdf_begin_text"/>
<element pattern="cpdf_circle"/>
<element pattern="cpdf_clip"/>
<element pattern="cpdf_close"/>
<element pattern="cpdf_closepath_fill_stroke"/>
<element pattern="cpdf_closepath_stroke"/>
<element pattern="cpdf_closepath"/>
<element pattern="cpdf_continue_text"/>
<element pattern="cpdf_curveto"/>
<element pattern="cpdf_end_text"/>
<element pattern="cpdf_fill_stroke"/>
<element pattern="cpdf_fill"/>
<element pattern="cpdf_finalize_page"/>
<element pattern="cpdf_finalize"/>
<element pattern="cpdf_global_set_document_limits"/>
<element pattern="cpdf_import_jpeg"/>
<element pattern="cpdf_lineto"/>
<element pattern="cpdf_moveto"/>
<element pattern="cpdf_newpath"/>
<element pattern="cpdf_open"/>
<element pattern="cpdf_output_buffer"/>
<element pattern="cpdf_page_init"/>
<element pattern="cpdf_place_inline_image"/>
<element pattern="cpdf_rect"/>
<element pattern="cpdf_restore"/>
<element pattern="cpdf_rlineto"/>
<element pattern="cpdf_rmoveto"/>
<element pattern="cpdf_rotate_text"/>
<element pattern="cpdf_rotate"/>
<element pattern="cpdf_save_to_file"/>
<element pattern="cpdf_save"/>
<element pattern="cpdf_scale"/>
<element pattern="cpdf_set_action_url"/>
<element pattern="cpdf_set_char_spacing"/>
<element pattern="cpdf_set_creator"/>
<element pattern="cpdf_set_current_page"/>
<element pattern="cpdf_set_font_directories"/>
<element pattern="cpdf_set_font_map_file"/>
<element pattern="cpdf_set_font"/>
<element pattern="cpdf_set_horiz_scaling"/>
<element pattern="cpdf_set_keywords"/>
<element pattern="cpdf_set_leading"/>
<element pattern="cpdf_set_page_animation"/>
<element pattern="cpdf_set_subject"/>
<element pattern="cpdf_set_text_matrix"/>
<element pattern="cpdf_set_text_pos"/>
<element pattern="cpdf_set_text_rendering"/>
<element pattern="cpdf_set_text_rise"/>
<element pattern="cpdf_set_title"/>
<element pattern="cpdf_set_viewer_preferences"/>
<element pattern="cpdf_set_word_spacing"/>
<element pattern="cpdf_setdash"/>
<element pattern="cpdf_setflat"/>
<element pattern="cpdf_setgray_fill"/>
<element pattern="cpdf_setgray_stroke"/>
<element pattern="cpdf_setgray"/>
<element pattern="cpdf_setlinecap"/>
<element pattern="cpdf_setlinejoin"/>
<element pattern="cpdf_setlinewidth"/>
<element pattern="cpdf_setmiterlimit"/>
<element pattern="cpdf_setrgbcolor_fill"/>
<element pattern="cpdf_setrgbcolor_stroke"/>
<element pattern="cpdf_setrgbcolor"/>
<element pattern="cpdf_show_xy"/>
<element pattern="cpdf_show"/>
<element pattern="cpdf_stringwidth"/>
<element pattern="cpdf_stroke"/>
<element pattern="cpdf_text"/>
<element pattern="cpdf_translate"/>
<element pattern="com_addref"/>
<element pattern="com_create_guid"/>
<element pattern="com_event_sink"/>
<element pattern="com_get_active_object"/>
<element pattern="com_get"/>
<element pattern="com_invoke"/>
<element pattern="com_isenum"/>
<element pattern="com_load_typelib"/>
<element pattern="com_load"/>
<element pattern="com_message_pump"/>
<element pattern="com_print_typeinfo"/>
<element pattern="com_release"/>
<element pattern="com_set"/>
<element pattern="variant_abs"/>
<element pattern="variant_add"/>
<element pattern="variant_and"/>
<element pattern="variant_cast"/>
<element pattern="variant_cat"/>
<element pattern="variant_cmp"/>
<element pattern="variant_date_from_timestamp"/>
<element pattern="variant_date_to_timestamp"/>
<element pattern="variant_div"/>
<element pattern="variant_eqv"/>
<element pattern="variant_fix"/>
<element pattern="variant_get_type"/>
<element pattern="variant_idiv"/>
<element pattern="variant_imp"/>
<element pattern="variant_int"/>
<element pattern="variant_mod"/>
<element pattern="variant_mul"/>
<element pattern="variant_neg"/>
<element pattern="variant_not"/>
<element pattern="variant_or"/>
<element pattern="variant_pow"/>
<element pattern="variant_round"/>
<element pattern="variant_set_type"/>
<element pattern="variant_set"/>
<element pattern="variant_sub"/>
<element pattern="variant_xor"/>
<element pattern="crack_check"/>
<element pattern="crack_check"/>
<element pattern="crack_closedict"/>
<element pattern="crack_getlastmessage"/>
<element pattern="crack_opendict"/>
<element pattern="ctype_alnum" autocomplete_append="($text);">
<reference>ctype_alnum($text);
Check for alphanumeric character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is either
a letter or a digit, false otherwise.
</reference></element>
<element pattern="ctype_alpha" autocomplete_append="($text);">
<reference>ctype_alpha($text);
Check for alphabetic character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is 
a letter from the current locale, false otherwise.
</reference></element>
<element pattern="ctype_cntrl" autocomplete_append="($text);">
<reference>ctype_cntrl($text);
Check for control character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is 
a control character from the current locale, false otherwise.
</reference></element>
<element pattern="ctype_digit" autocomplete_append="($text);">
<reference>ctype_digit($text);
Check for numeric character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is 
a decimal digit, false otherwise.
</reference></element>
<element pattern="ctype_graph" autocomplete_append="($text);">
<reference>ctype_graph($text);
Check for any printable character(s) except space
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is 
printable and actually creates visible output (no white space), false
otherwise.
</reference></element>
<element pattern="ctype_lower" autocomplete_append="($text);">
<reference>ctype_lower($text);
Check for lowercase character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is 
a lowercase letter in the current locale.
</reference></element>
<element pattern="ctype_print" autocomplete_append="($text);">
<reference>ctype_print($text);
Check for printable character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text 
will actually create output (including blanks). Returns false if 
text contains control characters or characters 
that do not have any output or control function at all.
</reference></element>
<element pattern="ctype_punct" autocomplete_append="($text);">
<reference>ctype_punct($text);
Check for any printable character which is not whitespace or an
alphanumeric character
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text 
is printable, but neither letter, digit or blank, false otherwise.
</reference></element>
<element pattern="ctype_space" autocomplete_append="($text);">
<reference>ctype_space($text);
Check for whitespace character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text 
creates some sort of white space, false otherwise. Besides the 
blank character this also includes tab, vertical tab, line feed,
carriage return and form feed characters.
</reference></element>
<element pattern="ctype_upper" autocomplete_append="($text);">
<reference>ctype_upper($text);
Check for uppercase character(s)
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is 
an uppercase letter in the current locale.
</reference></element>
<element pattern="ctype_xdigit" autocomplete_append="($text);">
<reference>ctype_xdigit($text);
Check for character(s) representing a hexadecimal digit
<b> text string </b>The tested string.
<b>returns</b>  bool true if every character in text is 
a hexadecimal 'digit', that is a decimal digit or a character from 
[A-Fa-f] , false otherwise.
</reference></element>
<element pattern="curl_close" autocomplete_append="($ch);">
<reference>curl_close($ch);
Close a cURL session
<b> ch resource </b><b>returns</b>  void 
</reference></element>
<element pattern="curl_copy_handle" autocomplete_append="($ch);">
<reference>curl_copy_handle($ch);
Copy a cURL handle along with all of its preferences
<b> ch resource </b><b>returns</b>  resource a new cURL handle.
</reference></element>
<element pattern="curl_errno" autocomplete_append="($ch);">
<reference>curl_errno($ch);
Return the last error number
<b> ch resource </b><b>returns</b>  int the error number or 0 (zero) if no error
occurred.
</reference></element>
<element pattern="curl_error" autocomplete_append="($ch);">
<reference>curl_error($ch);
Return a string containing the last error for the current session
<b> ch resource </b><b>returns</b>  string the error number or '' (the empty string) if no
error occurred.
</reference></element>
<element pattern="curl_exec" autocomplete_append="($ch);">
<reference>curl_exec($ch);
Perform a cURL session
<b> ch resource </b><b>returns</b>  mixed Returns true on success or false on failure. However, if the CURLOPT_RETURNTRANSFER
option is set, it will return the result on success, false on failure.
</reference></element>
<element pattern="curl_getinfo" autocomplete_append="($ch, $opt = null);">
<reference>curl_getinfo($ch, $opt = null);
Get information regarding a specific transfer
<b> ch resource </b><b> opt int[optional] </b>This may be one of the following constants:
CURLINFO_EFFECTIVE_URL - Last effective URL
<b>returns</b>  mixed If opt is given, returns its value as a string.
Otherwise, returns an associative array with the following elements 
(which correspond to opt):
"url"
"content_type"
"http_code"
"header_size"
"request_size"
"filetime"
"ssl_verify_result"
"redirect_count"
"total_time"
"namelookup_time"
"connect_time"
"pretransfer_time"
"size_upload"
"size_download"
"speed_download"
"speed_upload"
"download_content_length"
"upload_content_length"
"starttransfer_time"
"redirect_time"
</reference></element>
<element pattern="curl_init" autocomplete_append="($url = null);">
<reference>curl_init($url = null);
Initialize a cURL session
<b> url string[optional] </b>If provided, the CURLOPT_URL option will be set
to its value. You can manually set this using the 
curl_setopt function.
<b>returns</b>  resource a cURL handle on success, false on errors.
</reference></element>
<element pattern="curl_multi_add_handle" autocomplete_append="($mh, $ch);">
<reference>curl_multi_add_handle($mh, $ch);
Add a normal cURL handle to a cURL multi handle
<b> mh resource </b><b> ch resource </b><b>returns</b>  int 0 on success, or one of the CURLM_XXX errors
code.
</reference></element>
<element pattern="curl_multi_close" autocomplete_append="($mh);">
<reference>curl_multi_close($mh);
Close a set of cURL handles
<b> mh resource </b><b>returns</b>  void 
</reference></element>
<element pattern="curl_multi_exec" autocomplete_append="($mh, &amp;$still_running);">
<reference>curl_multi_exec($mh, &amp;$still_running);
Run the sub-connections of the current cURL handle
<b> mh resource </b><b> still_running int </b>A reference to a flag to tell whether the operations are still running.
<b>returns</b>  int A cURL code defined in the cURL Predefined Constants.
This only returns errors regarding the whole multi stack. There might still have 
occurred problems on individual transfers even when this function returns 
CURLM_OK.
</reference></element>
<element pattern="curl_multi_getcontent" autocomplete_append="($ch);">
<reference>curl_multi_getcontent($ch);
Return the content of a cURL handle if &lt;constant&gt;CURLOPT_RETURNTRANSFER&lt;/constant&gt; is set
<b> ch resource </b><b>returns</b>  string Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.
</reference></element>
<element pattern="curl_multi_info_read" autocomplete_append="($mh, $msgs_in_queue = null);">
<reference>curl_multi_info_read($mh, $msgs_in_queue = null);
Get information about the current transfers
<b> mh resource </b><b> msgs_in_queue int[optional] </b>Number of messages that are still in the queue
<b>returns</b>  array On success, returns an associative array for the message, false on failure.
</reference></element>
<element pattern="curl_multi_init" autocomplete_append="();">
<reference>curl_multi_init();
Returns a new cURL multi handle
<b>returns</b>  resource a cURL on handle on success, false on failure.
</reference></element>
<element pattern="curl_multi_remove_handle" autocomplete_append="($mh, $ch);">
<reference>curl_multi_remove_handle($mh, $ch);
Remove a multi handle from a set of cURL handles
<b> mh resource </b><b> ch resource </b><b>returns</b>  int On success, returns a cURL handle, false on failure.
</reference></element>
<element pattern="curl_multi_select" autocomplete_append="($mh, $timeout = null);">
<reference>curl_multi_select($mh, $timeout = null);
Get all the sockets associated with the cURL extension, which can then be "selected"
<b> mh resource </b><b> timeout float[optional] </b>Time, in seconds, to wait for a response.
<b>returns</b>  int On success, returns the number of descriptors contained in, 
the descriptor sets. On failure, this function will return false.
</reference></element>
<element pattern="curl_setopt_array" autocomplete_append="($ch, array $options);">
<reference>curl_setopt_array($ch, array $options);
Set multiple options for a cURL transfer
<b> ch resource </b><b> options array </b>An array specifying which options to set and their values.
The keys should be valid curl_setopt constants or
their integer equivalents.
<b>returns</b>  bool true if all options were successfully set. If an option could
not be successfully set, false is immediately returned, ignoring any
future options in the options array.
</reference></element>
<element pattern="curl_setopt" autocomplete_append="($ch, $option, $value);">
<reference>curl_setopt($ch, $option, $value);
Set an option for a cURL transfer
<b> ch resource </b><b> option int </b>The CURLOPT_XXX option to set.
<b> value mixed </b>The value to be set on option.
value should be a bool for the
following values of the option parameter:
&lt;tr valign="top"&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;Set value to&lt;/td&gt;
&lt;td&gt;Notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_AUTOREFERER&lt;/td&gt;
&lt;td&gt;
true to automatically set the Referer: field in
requests where it follows a Location: redirect.
&lt;/td&gt;
&lt;td&gt;
Available since PHP 5.1.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_BINARYTRANSFER&lt;/td&gt;
&lt;td&gt;
true to return the raw output when
CURLOPT_RETURNTRANSFER is used.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_COOKIESESSION&lt;/td&gt;
&lt;td&gt;
true to mark this as a new cookie "session". It will force libcurl
to ignore all cookies it is about to load that are "session cookies"
from the previous session. By default, libcurl always stores and
loads all cookies, independent if they are session cookies are not.
Session cookies are cookies without expiry date and they are meant
to be alive and existing for this "session" only.
&lt;/td&gt;
&lt;td&gt;
Available since PHP 5.1.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_CRLF&lt;/td&gt;
&lt;td&gt;
true to convert Unix newlines to CRLF newlines
on transfers.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_DNS_USE_GLOBAL_CACHE&lt;/td&gt;
&lt;td&gt;
true to use a global DNS cache. This option is
not thread-safe and is enabled by default.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FAILONERROR&lt;/td&gt;
&lt;td&gt;
true to fail silently if the HTTP code returned
is greater than or equal to 400. The default behavior is to return
the page normally, ignoring the code.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FILETIME&lt;/td&gt;
&lt;td&gt;
true to attempt to retrieve the modification
date of the remote document. This value can be retrieved using
the CURLINFO_FILETIME option with
curl_getinfo.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FOLLOWLOCATION&lt;/td&gt;
&lt;td&gt;
true to follow any
"Location: " header that the server sends as
part of the HTTP header (note this is recursive, PHP will follow as
many "Location: " headers that it is sent,
unless CURLOPT_MAXREDIRS is set).
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FORBID_REUSE&lt;/td&gt;
&lt;td&gt;
true to force the connection to explicitly
close when it has finished processing, and not be pooled for reuse.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FRESH_CONNECT&lt;/td&gt;
&lt;td&gt;
true to force the use of a new connection
instead of a cached one.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FTP_USE_EPRT&lt;/td&gt;
&lt;td&gt;
true to use EPRT (and LPRT) when doing active
FTP downloads. Use false to disable EPRT and LPRT and use PORT
only.
&lt;/td&gt;
&lt;td&gt;
Added in PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FTP_USE_EPSV&lt;/td&gt;
&lt;td&gt;
true to first try an EPSV command for FTP
transfers before reverting back to PASV. Set to false
to disable EPSV.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FTPAPPEND&lt;/td&gt;
&lt;td&gt;
true to append to the remote file instead of
overwriting it.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FTPASCII&lt;/td&gt;
&lt;td&gt;
An alias of
CURLOPT_TRANSFERTEXT. Use that instead.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FTPLISTONLY&lt;/td&gt;
&lt;td&gt;
true to only list the names of an FTP
directory.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HEADER&lt;/td&gt;
&lt;td&gt;
true to include the header in the output.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HTTPGET&lt;/td&gt;
&lt;td&gt;
true to reset the HTTP request method to GET.
Since GET is the default, this is only necessary if the request
method has been changed.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HTTPPROXYTUNNEL&lt;/td&gt;
&lt;td&gt;
true to tunnel through a given HTTP proxy.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_MUTE&lt;/td&gt;
&lt;td&gt;
true to be completely silent with regards to
the cURL functions.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_NETRC&lt;/td&gt;
&lt;td&gt;
true to scan the ~/.netrc
file to find a username and password for the remote site that
a connection is being established with.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_NOBODY&lt;/td&gt;
&lt;td&gt;
true to exclude the body from the output.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_NOPROGRESS&lt;/td&gt;
&lt;td&gt;
true to disable the progress meter for cURL transfers.
PHP automatically sets this option to true, this should only be
changed for debugging purposes.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_NOSIGNAL&lt;/td&gt;
&lt;td&gt;
true to ignore any cURL function that causes a
signal to be sent to the PHP process. This is turned on by default
in multi-threaded SAPIs so timeout options can still be used.
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.10 and PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_POST&lt;/td&gt;
&lt;td&gt;
true to do a regular HTTP POST. This POST is the
normal application/x-www-form-urlencoded kind,
most commonly used by HTML forms.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PUT&lt;/td&gt;
&lt;td&gt;
true to HTTP PUT a file. The file to PUT must
be set with CURLOPT_INFILE and
CURLOPT_INFILESIZE.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_RETURNTRANSFER&lt;/td&gt;
&lt;td&gt;
true to return the transfer as a string of the
return value of curl_exec instead of outputting
it out directly.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSL_VERIFYPEER&lt;/td&gt;
&lt;td&gt;
false to stop cURL from verifying the peer's
certificate. Alternate certificates to verify against can be
specified with the CURLOPT_CAINFO option
or a certificate directory can be specified with the
CURLOPT_CAPATH option.
CURLOPT_SSL_VERIFYHOST may also need to be
true or false if
CURLOPT_SSL_VERIFYPEER is disabled (it
defaults to 2).
&lt;/td&gt;
&lt;td&gt;
true by default as of cURL 7.10. Default bundle installed as of
cURL 7.10.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_TRANSFERTEXT&lt;/td&gt;
&lt;td&gt;
true to use ASCII mode for FTP transfers.
For LDAP, it retrieves data in plain text instead of HTML. On
Windows systems, it will not set STDOUT to binary
mode.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_UNRESTRICTED_AUTH&lt;/td&gt;
&lt;td&gt;
true to keep sending the username and password
when following locations (using
CURLOPT_FOLLOWLOCATION), even when the
hostname has changed.
&lt;/td&gt;
&lt;td&gt;
Added in PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_UPLOAD&lt;/td&gt;
&lt;td&gt;
true to prepare for an upload.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_VERBOSE&lt;/td&gt;
&lt;td&gt;
true to output verbose information. Writes
output to STDERR, or the file specified using
CURLOPT_STDERR.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
value should be an integer for the
following values of the option parameter:
&lt;tr valign="top"&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;Set value to&lt;/td&gt;
&lt;td&gt;Notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_BUFFERSIZE&lt;/td&gt;
&lt;td&gt;
The size of the buffer to use for each read. There is no guarantee
this request will be fulfilled, however.
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.10 and PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_CLOSEPOLICY&lt;/td&gt;
&lt;td&gt;
Either
CURLCLOSEPOLICY_LEAST_RECENTLY_USED or
CURLCLOSEPOLICY_OLDEST.
There are three other CURLCLOSEPOLICY_
constants, but cURL does not support them yet.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_CONNECTTIMEOUT&lt;/td&gt;
&lt;td&gt;
The number of seconds to wait whilst trying to connect. Use 0 to
wait indefinitely.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_DNS_CACHE_TIMEOUT&lt;/td&gt;
&lt;td&gt;
The number of seconds to keep DNS entries in memory. This
option is set to 120 (2 minutes) by default.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FTPSSLAUTH&lt;/td&gt;
&lt;td&gt;
The FTP authentication method (when is activated):
CURLFTPAUTH_SSL (try SSL first),
CURLFTPAUTH_TLS (try TLS first), or
CURLFTPAUTH_DEFAULT (let cURL decide).
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.12.2 and PHP 5.1.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HTTP_VERSION&lt;/td&gt;
&lt;td&gt;
CURL_HTTP_VERSION_NONE (default, lets CURL
decide which version to use),
CURL_HTTP_VERSION_1_0 (forces HTTP/1.0),
or CURL_HTTP_VERSION_1_1 (forces HTTP/1.1).
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HTTPAUTH&lt;/td&gt;
&lt;td&gt;
The HTTP authentication method(s) to use. The options are:
CURLAUTH_BASIC,
CURLAUTH_DIGEST,
CURLAUTH_GSSNEGOTIATE,
CURLAUTH_NTLM,
CURLAUTH_ANY, and
CURLAUTH_ANYSAFE.
The bitwise | (or) operator can be used to combine
more than one method. If this is done, cURL will poll the server to see
what methods it supports and pick the best one.
CURLAUTH_ANY is an alias for
CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.
CURLAUTH_ANYSAFE is an alias for
CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.
&lt;/td&gt;
&lt;td&gt;
Added in PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_INFILESIZE&lt;/td&gt;
&lt;td&gt;
The expected size, in bytes, of the file when uploading a file to a
remote site.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_LOW_SPEED_LIMIT&lt;/td&gt;
&lt;td&gt;
The transfer speed, in bytes per second, that the transfer should be
below during CURLOPT_LOW_SPEED_TIME seconds
for PHP to consider the transfer too slow and abort.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_LOW_SPEED_TIME&lt;/td&gt;
&lt;td&gt;
The number of seconds the transfer should be below
CURLOPT_LOW_SPEED_LIMIT for PHP to consider
the transfer too slow and abort.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_MAXCONNECTS&lt;/td&gt;
&lt;td&gt;
The maximum amount of persistent connections that are allowed.
When the limit is reached,
CURLOPT_CLOSEPOLICY is used to determine
which connection to close.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_MAXREDIRS&lt;/td&gt;
&lt;td&gt;
The maximum amount of HTTP redirections to follow. Use this option
alongside CURLOPT_FOLLOWLOCATION.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PORT&lt;/td&gt;
&lt;td&gt;
An alternative port number to connect to.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PROXYAUTH&lt;/td&gt;
&lt;td&gt;
The HTTP authentication method(s) to use for the proxy connection.
Use the same bitmasks as described in
CURLOPT_HTTPAUTH. For proxy authentication,
only CURLAUTH_BASIC and
CURLAUTH_NTLM are currently supported.
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.10.7 and PHP 5.1.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PROXYPORT&lt;/td&gt;
&lt;td&gt;
The port number of the proxy to connect to. This port number can
also be set in CURLOPT_PROXY.
&lt;/td&gt;
&lt;td&gt;
Added in PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PROXYTYPE&lt;/td&gt;
&lt;td&gt;
Either CURLPROXY_HTTP (default) or
CURLPROXY_SOCKS5.
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.10 and PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_RESUME_FROM&lt;/td&gt;
&lt;td&gt;
The offset, in bytes, to resume a transfer from.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSL_VERIFYHOST&lt;/td&gt;
&lt;td&gt;
1 to check the existence of a common name in the
SSL peer certificate. 2 to check the existence of
a common name and also verify that it matches the hostname
provided.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLVERSION&lt;/td&gt;
&lt;td&gt;
The SSL version (2 or 3) to use. By default PHP will try to determine
this itself, although in some cases this must be set manually.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_TIMECONDITION&lt;/td&gt;
&lt;td&gt;
How CURLOPT_TIMEVALUE is treated.
Use CURL_TIMECOND_IFMODSINCE to return the
page only if it has been modified since the time specified in
CURLOPT_TIMEVALUE. If it hasn't been modified,
a "304 Not Modified" header will be returned
assuming CURLOPT_HEADER is true.
Use CURL_TIMECOND_ISUNMODSINCE for the reverse
effect. CURL_TIMECOND_IFMODSINCE is the
default.
&lt;/td&gt;
&lt;td&gt;
Added in PHP 5.1.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_TIMEOUT&lt;/td&gt;
&lt;td&gt;
The maximum number of seconds to allow cURL functions to execute.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_TIMEVALUE&lt;/td&gt;
&lt;td&gt;
The time in seconds since January 1st, 1970. The time will be used
by CURLOPT_TIMECONDITION. By default,
CURL_TIMECOND_IFMODSINCE is used.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
value should be a string for the
following values of the option parameter:
&lt;tr valign="top"&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;Set value to&lt;/td&gt;
&lt;td&gt;Notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_CAINFO&lt;/td&gt;
&lt;td&gt;
The name of a file holding one or more certificates to verify the
peer with. This only makes sense when used in combination with
CURLOPT_SSL_VERIFYPEER.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_CAPATH&lt;/td&gt;
&lt;td&gt;
A directory that holds multiple CA certificates. Use this option
alongside CURLOPT_SSL_VERIFYPEER.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_COOKIE&lt;/td&gt;
&lt;td&gt;
The contents of the "Set-Cookie: " header to be
used in the HTTP request.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_COOKIEFILE&lt;/td&gt;
&lt;td&gt;
The name of the file containing the cookie data. The cookie file can
be in Netscape format, or just plain HTTP-style headers dumped into
a file.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_COOKIEJAR&lt;/td&gt;
&lt;td&gt;
The name of a file to save all internal cookies to when the
connection closes.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_CUSTOMREQUEST&lt;/td&gt;
&lt;td&gt;
A custom request method to use instead of
"GET" or "HEAD" when doing
a HTTP request. This is useful for doing
"DELETE" or other, more obscure HTTP requests.
Valid values are things like "GET",
"POST", "CONNECT" and so on;
i.e. Do not enter a whole HTTP request line here. For instance,
entering "GET /index.html HTTP/1.0\r\n\r\n"
would be incorrect.
Don't do this without making sure the server supports the custom
request method first.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_EGDSOCKET&lt;/td&gt;
&lt;td&gt;
Like CURLOPT_RANDOM_FILE, except a filename
to an Entropy Gathering Daemon socket.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_ENCODING&lt;/td&gt;
&lt;td&gt;
The contents of the "Accept-Encoding: " header.
This enables decoding of the response. Supported encodings are
"identity", "deflate", and
"gzip". If an empty string, "",
is set, a header containing all supported encoding types is sent.
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.10.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FTPPORT&lt;/td&gt;
&lt;td&gt;
The value which will be used to get the IP address to use
for the FTP "POST" instruction. The "POST" instruction tells
the remote server to connect to our specified IP address. The
string may be a plain IP address, a hostname, a network
interface name (under Unix), or just a plain '-' to use the
systems default IP address.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_INTERFACE&lt;/td&gt;
&lt;td&gt;
The name of the outgoing network interface to use. This can be an
interface name, an IP address or a host name.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_KRB4LEVEL&lt;/td&gt;
&lt;td&gt;
The KRB4 (Kerberos 4) security level. Any of the following values
(in order from least to most powerful) are valid:
"clear",
"safe",
"confidential",
"private"..
If the string does not match one of these,
"private" is used. Setting this option to &amp;null;
will disable KRB4 security. Currently KRB4 security only works
with FTP transactions.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_POSTFIELDS&lt;/td&gt;
&lt;td&gt;
The full data to post in a HTTP "POST" operation.
To post a file, prepend a filename with @ and
use the full path.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PROXY&lt;/td&gt;
&lt;td&gt;
The HTTP proxy to tunnel requests through.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PROXYUSERPWD&lt;/td&gt;
&lt;td&gt;
A username and password formatted as
"[username]:[password]" to use for the
connection to the proxy.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_RANDOM_FILE&lt;/td&gt;
&lt;td&gt;
A filename to be used to seed the random number generator for SSL.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_RANGE&lt;/td&gt;
&lt;td&gt;
Range(s) of data to retrieve in the format
"X-Y" where X or Y are optional. HTTP transfers
also support several intervals, separated with commas in the format
"X-Y,N-M".
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_REFERER&lt;/td&gt;
&lt;td&gt;
The contents of the "Referer: " header to be used
in a HTTP request.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSL_CIPHER_LIST&lt;/td&gt;
&lt;td&gt;
A list of ciphers to use for SSL. For example,
RC4-SHA and TLSv1 are valid
cipher lists.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLCERT&lt;/td&gt;
&lt;td&gt;
The name of a file containing a PEM formatted certificate.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLCERTPASSWD&lt;/td&gt;
&lt;td&gt;
The password required to use the
CURLOPT_SSLCERT certificate.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLCERTTYPE&lt;/td&gt;
&lt;td&gt;
The format of the certificate. Supported formats are
"PEM" (default), "DER",
and "ENG".
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.9.3 and PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLENGINE&lt;/td&gt;
&lt;td&gt;
The identifier for the crypto engine of the private SSL key
specified in CURLOPT_SSLKEY.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLENGINE_DEFAULT&lt;/td&gt;
&lt;td&gt;
The identifier for the crypto engine used for asymmetric crypto
operations.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLKEY&lt;/td&gt;
&lt;td&gt;
The name of a file containing a private SSL key.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLKEYPASSWD&lt;/td&gt;
&lt;td&gt;
The secret password needed to use the private SSL key specified in
CURLOPT_SSLKEY.
Since this option contains a sensitive password, remember to keep
the PHP script it is contained within safe.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_SSLKEYTYPE&lt;/td&gt;
&lt;td&gt;
The key type of the private SSL key specified in
CURLOPT_SSLKEY. Supported key types are
"PEM" (default), "DER",
and "ENG".
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_URL&lt;/td&gt;
&lt;td&gt;
The URL to fetch. This can also be set when initializing a
session with curl_init.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_USERAGENT&lt;/td&gt;
&lt;td&gt;
The contents of the "User-Agent: " header to be
used in a HTTP request.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_USERPWD&lt;/td&gt;
&lt;td&gt;
A username and password formatted as
"[username]:[password]" to use for the
connection.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
value should be an array for the
following values of the option parameter:
&lt;tr valign="top"&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;Set value to&lt;/td&gt;
&lt;td&gt;Notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HTTP200ALIASES&lt;/td&gt;
&lt;td&gt;
An array of HTTP 200 responses that will be treated as valid
responses and not as errors.
&lt;/td&gt;
&lt;td&gt;
Added in cURL 7.10.3 and PHP 5.0.0.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HTTPHEADER&lt;/td&gt;
&lt;td&gt;
An array of HTTP header fields to set.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_POSTQUOTE&lt;/td&gt;
&lt;td&gt;
An array of FTP commands to execute on the server after the FTP
request has been performed.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_QUOTE&lt;/td&gt;
&lt;td&gt;
An array of FTP commands to execute on the server prior to the FTP
request.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
value should be a stream resource (using
fopen, for example) for the following values of the
option parameter:
&lt;tr valign="top"&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;Set value to&lt;/td&gt;
&lt;td&gt;Notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_FILE&lt;/td&gt;
&lt;td&gt;
The file that the transfer should be written to. The default
is STDOUT (the browser window).
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_INFILE&lt;/td&gt;
&lt;td&gt;
The file that the transfer should be read from when uploading.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_STDERR&lt;/td&gt;
&lt;td&gt;
An alternative location to output errors to instead of
STDERR.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_WRITEHEADER&lt;/td&gt;
&lt;td&gt;
The file that the header part of the transfer is written to.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
value should be a string that is the name of a valid
callback function for the following values of the
option parameter:
&lt;tr valign="top"&gt;
&lt;td&gt;Option&lt;/td&gt;
&lt;td&gt;Set value to&lt;/td&gt;
&lt;td&gt;Notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_HEADERFUNCTION&lt;/td&gt;
&lt;td&gt;
The name of a callback function where the callback function takes
two parameters. The first is the cURL resource, the second is a
string with the header data to be written. The header data must
be written when using this callback function. Return the number of 
bytes written.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_PASSWDFUNCTION&lt;/td&gt;
&lt;td&gt;
The name of a callback function where the callback function takes
three parameters. The first is the cURL resource, the second is a
string containing a password prompt, and the third is the maximum
password length. Return the string containing the password.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_READFUNCTION&lt;/td&gt;
&lt;td&gt;
The name of a callback function where the callback function takes
two parameters. The first is the cURL resource, and the second is a
string with the data to be read. The data must be read by using this
callback function. Return the number of bytes read. Return 0 to signal
EOF.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;CURLOPT_WRITEFUNCTION&lt;/td&gt;
&lt;td&gt;
The name of a callback function where the callback function takes
two parameters. The first is the cURL resource, and the second is a
string with the data to be written. The data must be written by using
this callback function. Must return the exact number of bytes written 
or this will fail.
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="curl_version" autocomplete_append="($age = null);">
<reference>curl_version($age = null);
Gets cURL version information
<b> age int[optional] </b><b>returns</b>  array an associative array with the following elements: 
&lt;tr valign="top"&gt;
&lt;td&gt;version_number&lt;/td&gt;
&lt;td&gt;cURL 24 bit version number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;version&lt;/td&gt;
&lt;td&gt;cURL version number, as a string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;ssl_version_number&lt;/td&gt;
&lt;td&gt;OpenSSL 24 bit version number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;ssl_version&lt;/td&gt;
&lt;td&gt;OpenSSL version number, as a string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;libz_version&lt;/td&gt;
&lt;td&gt;zlib version number, as a string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;host&lt;/td&gt;
&lt;td&gt;Information about the host where cURL was built&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;age&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;features&lt;/td&gt;
&lt;td&gt;A bitmask of the CURL_VERSION_XXX constants&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;protocols&lt;/td&gt;
&lt;td&gt;An array of protocols names supported by cURL&lt;/td&gt;
&lt;/tr&gt;
</reference></element>
<element pattern="cybercash_base64_decode"/>
<element pattern="cybercash_base64_encode"/>
<element pattern="cybercash_decr"/>
<element pattern="cybercash_encr"/>
<element pattern="cybermut_creerformulairecm"/>
<element pattern="cybermut_creerreponsecm"/>
<element pattern="cybermut_testmac"/>
<element pattern="cyrus_authenticate"/>
<element pattern="cyrus_bind"/>
<element pattern="cyrus_close"/>
<element pattern="cyrus_connect"/>
<element pattern="cyrus_query"/>
<element pattern="cyrus_unbind"/>
<element pattern="checkdate" autocomplete_append="($month, $day, $year);">
<reference>checkdate($month, $day, $year);
Validate a Gregorian date
<b> month int </b>The month is between 1 and 12 inclusive.
<b> day int </b>The day is within the allowed number of days for the given 
month. Leap years 
are taken into consideration.
<b> year int </b>The year is between 1 and 32767 inclusive.
<b>returns</b>  bool true if the date given is valid; otherwise returns false.
</reference></element>
<element pattern="date_create" autocomplete_append="($time = null, DateTimeZone $timezone = null);">
<reference>date_create($time = null, DateTimeZone $timezone = null);
Returns new DateTime object
<b> time string[optional] </b>String in a format accepted by strtotime, defaults
to "now".
<b> timezone DateTimeZone[optional] </b>Time zone of the time.
<b>returns</b>  DateTime DateTime object on success or false on failure.
</reference></element>
<element pattern="date_date_set" autocomplete_append="(DateTime $object, $year, $month, $day);">
<reference>date_date_set(DateTime $object, $year, $month, $day);
Sets the date
<b> object DateTime </b>DateTime object.
<b> year int </b>Year of the date.
<b> month int </b>Month of the date.
<b> day int </b>Day of the date.
<b>returns</b>  void &amp;null; on success or false on failure.
</reference></element>
<element pattern="date_default_timezone_get" autocomplete_append="();">
<reference>date_default_timezone_get();
Gets the default timezone used by all date/time functions in a script
<b>returns</b>  string a string.
</reference></element>
<element pattern="date_default_timezone_set" autocomplete_append="($timezone_identifier);">
<reference>date_default_timezone_set($timezone_identifier);
Sets the default timezone used by all date/time functions in a script
<b> timezone_identifier string </b>The timezone identifier, like UTC or
Europe/Lisbon. The list of valid identifiers is
available in the .
<b>returns</b>  bool This function returns false if the
timezone_identifier isn't valid, or true
otherwise.
</reference></element>
<element pattern="date_format" autocomplete_append="(DateTime $object, $format);">
<reference>date_format(DateTime $object, $format);
Returns date formatted according to given format
<b> object DateTime </b>DateTime object.
<b> format string </b>Format accepted by date.
<b>returns</b>  string formatted date on success or false on failure.
</reference></element>
<element pattern="date_isodate_set" autocomplete_append="(DateTime $object, $year, $week, $day = null);">
<reference>date_isodate_set(DateTime $object, $year, $week, $day = null);
Sets the ISO date
<b> object DateTime </b>DateTime object.
<b> year int </b>Year of the date.
<b> week int </b>Week of the date.
<b> day int[optional] </b>Day of the date.
<b>returns</b>  void &amp;null; on success or false on failure.
</reference></element>
<element pattern="date_modify" autocomplete_append="(DateTime $object, $modify);">
<reference>date_modify(DateTime $object, $modify);
Alters the timestamp
<b> object DateTime </b>DateTime object.
<b> modify string </b>String in a relative format accepted by strtotime.
<b>returns</b>  void &amp;null; on success or false on failure.
</reference></element>
<element pattern="date_offset_get" autocomplete_append="(DateTime $object);">
<reference>date_offset_get(DateTime $object);
Returns the daylight saving time offset
<b> object DateTime </b>DateTime object.
<b>returns</b>  int DST offset in seconds on success or false on failure.
</reference></element>
<element pattern="date_parse" autocomplete_append="($date);">
<reference>date_parse($date);
Returns associative array with detailed info about given date
<b> date string </b>Date in format accepted by strtotime.
<b>returns</b>  array array with information about the parsed date
on success, or false on failure.
</reference></element>
<element pattern="date_sun_info" autocomplete_append="($time, $latitude, $longitude);">
<reference>date_sun_info($time, $latitude, $longitude);
Returns an array with information about sunset/sunrise and twilight begin/end
<b> time int </b>Timestamp.
<b> latitude float </b>Latitude in degrees.
<b> longitude float </b>Longitude in degrees.
<b>returns</b>  array array on success or false on failure.
</reference></element>
<element pattern="date_sunrise" autocomplete_append="($timestamp, $format = null, $latitude = null, $longitude = null, $zenith = null, $gmt_offset = null);">
<reference>date_sunrise($timestamp, $format = null, $latitude = null, $longitude = null, $zenith = null, $gmt_offset = null);
Returns time of sunrise for a given day and location
<b> timestamp int </b>The timestamp of the day from which the sunrise
time is taken.
<b> format int[optional] </b>
format constants
SUNFUNCS_RET_STRING returns the result as string
SUNFUNCS_RET_DOUBLE returns the result as float
SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp)
<b> latitude float[optional] </b>Defaults to North, pass in a negative value for South.
See also: date.default_latitude
<b> longitude float[optional] </b>Defaults to East, pass in a negative value for West.
See also: date.default_longitude
<b> zenith float[optional] </b>Default: date.sunrise_zenith
<b> gmt_offset float[optional] </b><b>returns</b>  mixed the sunrise time in a specified format on
success, or false on failure.
</reference></element>
<element pattern="date_sunset" autocomplete_append="($timestamp, $format = null, $latitude = null, $longitude = null, $zenith = null, $gmt_offset = null);">
<reference>date_sunset($timestamp, $format = null, $latitude = null, $longitude = null, $zenith = null, $gmt_offset = null);
Returns time of sunset for a given day and location
<b> timestamp int </b>The timestamp of the day from which the sunset
time is taken.
<b> format int[optional] </b>
format constants
SUNFUNCS_RET_STRING returns the result as string
SUNFUNCS_RET_DOUBLE returns the result as float
SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp)
<b> latitude float[optional] </b>Defaults to North, pass in a negative value for South.
See also: date.default_latitude
<b> longitude float[optional] </b>Defaults to East, pass in a negative value for West.
See also: date.default_longitude
<b> zenith float[optional] </b>Default: date.sunrise_zenith
<b> gmt_offset float[optional] </b><b>returns</b>  mixed the sunset time in a specified format on
success, or false on failure.
</reference></element>
<element pattern="date_time_set" autocomplete_append="(DateTime $object, $hour, $minute, $second = null);">
<reference>date_time_set(DateTime $object, $hour, $minute, $second = null);
Sets the time
<b> object DateTime </b>DateTime object.
<b> hour int </b>Hour of the time.
<b> minute int </b>Minute of the time.
<b> second int[optional] </b>Second of the time.
<b>returns</b>  void &amp;null; on success or false on failure.
</reference></element>
<element pattern="date_timezone_get" autocomplete_append="(DateTime $object);">
<reference>date_timezone_get(DateTime $object);
Return time zone relative to given DateTime
<b> object DateTime </b>DateTime object.
<b>returns</b>  DateTimeZone DateTimeZone object on success or false on failure.
</reference></element>
<element pattern="date_timezone_set" autocomplete_append="(DateTime $object, DateTimeZone $timezone);">
<reference>date_timezone_set(DateTime $object, DateTimeZone $timezone);
Sets the time zone for the DateTime object
<b> object DateTime </b>DateTime object.
<b> timezone DateTimeZone </b>Desired time zone.
<b>returns</b>  void &amp;null; on success or false on failure.
</reference></element>
<element pattern="date" autocomplete_append="($format, $timestamp = null);">
<reference>date($format, $timestamp = null);
Format a local time/date
<b> format string </b>The format of the outputted date string. See the formatting
options below.

The following characters are recognized in the
format parameter string
<b>Day</b>
d Day of the month, 2 digits with leading zeros
D A textual representation of a day, three letters
j Day of the month without leading zeros
l (lowercase 'L') A full textual representation of the day of the week
N ISO-8601 numeric representation of the day of the week (added in
PHP 5.1.0)
S English ordinal suffix for the day of the month, 2 characters
w Numeric representation of the day of the week
z The day of the year (starting from 0)
<b>Week</b>
W ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)
<b>Month</b>
F A full textual representation of a month, such as January or March
m Numeric representation of a month, with leading zeros
M A short textual representation of a month, three letters
n Numeric representation of a month, without leading zeros
t Number of days in the given month
<b>Year</b>
L Whether it's a leap year 1 if it is a leap year, 0 otherwise.
o ISO-8601 year number. This has the same value as Y, except that if the 
ISO week number (W) belongs to the previous or next year, that year
is used instead. (added in PHP 5.1.0)
Y A full numeric representation of a year, 4 digits
y A two digit representation of a year
<b>Time</b>
a Lowercase Ante meridiem and Post meridiem
A Uppercase Ante meridiem and Post meridiem
B Swatch Internet time
g 12-hour format of an hour without leading zeros
G 24-hour format of an hour without leading zeros
h 12-hour format of an hour with leading zeros
H 24-hour format of an hour with leading zeros
i Minutes with leading zeros
s Seconds, with leading zeros
u Microseconds (added in PHP 5.2.2)
<b>Timezone</b>
e Timezone identifier (added in PHP 5.1.0)
I (capital i) Whether or not the date is in daylight saving time 1 if Daylight Saving Time, 0 otherwise.
O Difference to Greenwich time (GMT) in hours
P Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)
T Timezone abbreviation
Z Timezone offset in seconds. The offset for timezones west of UTC is always
negative, and for those east of UTC is always positive.
<b>Full Date/Time</b>
c ISO 8601 date (added in PHP 5)
r RFC 2822 formatted date
U Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)

Unrecognized characters in the format string will be printed
as-is. The Z format will always return
0 when using gmdate.
 
Since this function only accepts integer timestamps the
u format character is only useful when using the
date_format function with user based timestamps
created with date_create.
<b> timestamp int[optional] </b><b>returns</b>  string a formatted date string. If a non-numeric value is used for 
timestamp, false is returned and an 
E_WARNING level error is emitted.
</reference></element>
<element pattern="getdate" autocomplete_append="($timestamp = null);">
<reference>getdate($timestamp = null);
Get date/time information
<b> timestamp int[optional] </b><b>returns</b>  array an associative array of information related to
the timestamp. Elements from the returned 
associative array are as follows:

"seconds" Numeric representation of seconds
"minutes" Numeric representation of minutes
"hours" Numeric representation of hours
"mday" Numeric representation of the day of the month
"wday" Numeric representation of the day of the week
"mon" Numeric representation of a month
"year" A full numeric representation of a year, 4 digits
"yday" Numeric representation of the day of the year
"weekday" A full textual representation of the day of the week
"month" A full textual representation of a month, such as January or March

Seconds since the Unix Epoch, similar to the values returned by
time and used by date. System Dependent, typically -2147483648 through 2147483647.
</reference></element>
<element pattern="gettimeofday" autocomplete_append="($return_float = null);">
<reference>gettimeofday($return_float = null);
Get current time
<b> return_float bool[optional] </b>When set to true, a float instead of an array is returned.
<b>returns</b>  mixed By default an array is returned. If return_float
is set, then a float is returned.
Array keys:
"sec" - seconds since the Unix Epoch
"usec" - microseconds
"minuteswest" - minutes west of Greenwich
"dsttime" - type of dst correction
</reference></element>
<element pattern="gmdate" autocomplete_append="($format, $timestamp = null);">
<reference>gmdate($format, $timestamp = null);
Format a GMT/UTC date/time
<b> format string </b>The format of the outputted date string. See the formatting
options for the date function.
<b> timestamp int[optional] </b><b>returns</b>  string a formatted date string. If a non-numeric value is used for 
timestamp, false is returned and an 
E_WARNING level error is emitted.
</reference></element>
<element pattern="gmmktime" autocomplete_append="($hour = null, $minute = null, $second = null, $month = null, $day = null, $year = null, $is_dst = null);">
<reference>gmmktime($hour = null, $minute = null, $second = null, $month = null, $day = null, $year = null, $is_dst = null);
Get Unix timestamp for a GMT date
<b> hour int[optional] </b>The hour
<b> minute int[optional] </b>The minute
<b> second int[optional] </b>The second
<b> month int[optional] </b>The month
<b> day int[optional] </b>The day
<b> year int[optional] </b>The year
<b> is_dst int[optional] </b>Parameters always represent a GMT date so is_dst
doesn't influence the result.
<b>returns</b>  int a integer Unix timestamp.
</reference></element>
<element pattern="gmstrftime" autocomplete_append="($format, $timestamp = null);">
<reference>gmstrftime($format, $timestamp = null);
Format a GMT/UTC time/date according to locale settings
<b> format string </b>See description in strftime.
<b> timestamp int[optional] </b><b>returns</b>  string a string formatted according to the given format string
using the given timestamp or the current
local time if no timestamp is given. Month and weekday names and
other language dependent strings respect the current locale set
with setlocale.
</reference></element>
<element pattern="idate" autocomplete_append="($format, $timestamp = null);">
<reference>idate($format, $timestamp = null);
Format a local time/date as integer
<b> format string </b>
The following characters are recognized in the
format parameter string:

B Swatch Beat/Internet Time
d Day of the month
h Hour (12 hour format)
H Hour (24 hour format)
i Minutes
I (uppercase i) returns 1 if DST is activated, 0 otherwise
L (uppercase l) returns 1 for leap year, 0 otherwise
m Month number
s Seconds
t Days in current month
U Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC -
this is the same as time
w Day of the week (0 on Sunday)
W ISO-8601 week number of year, weeks starting on Monday
y Year (1 or 2 digits - check note below)
Y Year (4 digits)
z Day of the year
Z Timezone offset in seconds

<b> timestamp int[optional] </b><b>returns</b>  int an integer.
As idate always returns an integer and
as they can't start with a "0", idate may return
fewer digits than you would expect. See the example below.
</reference></element>
<element pattern="localtime" autocomplete_append="($timestamp = null, $is_associative = null);">
<reference>localtime($timestamp = null, $is_associative = null);
Get the local time
<b> timestamp int[optional] </b><b> is_associative bool[optional] </b>If set to false or not supplied then the array is returned as a regular, 
numerically indexed array. If the argument is set to true then
localtime returns an associative array containing
all the different elements of the structure returned by the C
function call to localtime. The names of the different keys of
the associative array are as follows:
"tm_sec" - seconds
<b>returns</b>  array 
</reference></element>
<element pattern="microtime" autocomplete_append="($get_as_float = null);">
<reference>microtime($get_as_float = null);
Return current Unix timestamp with microseconds
<b> get_as_float bool[optional] </b>When called without the optional argument, this function returns the string
"msec sec" where sec is the current time measured in the number of
seconds since the Unix Epoch (0:00:00 January 1, 1970 GMT), and
msec is the microseconds part.
Both portions of the string are returned in units of seconds.
If the optional get_as_float is set to
true then a float (in seconds) is returned.
<b>returns</b>  mixed 
</reference></element>
<element pattern="mktime" autocomplete_append="($hour = null, $minute = null, $second = null, $month = null, $day = null, $year = null, $is_dst = null);">
<reference>mktime($hour = null, $minute = null, $second = null, $month = null, $day = null, $year = null, $is_dst = null);
Get Unix timestamp for a date
<b> hour int[optional] </b>The number of the hour.
<b> minute int[optional] </b>The number of the minute.
<b> second int[optional] </b>The number of seconds past the minute.
<b> month int[optional] </b>The number of the month.
<b> day int[optional] </b>The number of the day.
<b> year int[optional] </b>The number of the year, may be a two or four digit value,
with values between 0-69 mapping to 2000-2069 and 70-100 to
1970-2000. On systems where time_t is a 32bit signed integer, as
most common today, the valid range for year 
is somewhere between 1901 and 2038. However, before PHP 5.1.0 this
range was limited from 1970 to 2038 on some systems (e.g. Windows).
<b> is_dst int[optional] </b>This parameter can be set to 1 if the time is during daylight savings time (DST), 
0 if it is not, or -1 (the default) if it is unknown whether the time is within 
daylight savings time or not. If it's unknown, PHP tries to figure it out itself.
This can cause unexpected (but not incorrect) results.
Some times are invalid if DST is enabled on the system PHP is running on or 
is_dst is set to 1. If DST is enabled in e.g. 2:00, all times 
between 2:00 and 3:00 are invalid and mktime returns an undefined 
(usually negative) value. 
Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of the day when DST 
is enabled is evaluated as 23:30 of the previous day.
As of PHP 5.1.0, this parameter became deprecated. As a result, the
new timezone handling features should be used instead.
<b>returns</b>  int mktime returns the Unix timestamp of the arguments
given.
If the arguments are invalid, the function returns false (before PHP 5.1
it returned -1).
</reference></element>
<element pattern="strftime" autocomplete_append="($format, $timestamp = null);">
<reference>strftime($format, $timestamp = null);
Format a local time/date according to locale settings
<b> format string </b>The following conversion specifiers are recognized in the format
string:
%a - abbreviated weekday name according to the current locale
<b> timestamp int[optional] </b><b>returns</b>  string a string formatted according to the given format string
using the given timestamp or the current
local time if no timestamp is given. Month and weekday names and
other language dependent strings respect the current locale set
with setlocale.
</reference></element>
<element pattern="strptime" autocomplete_append="($date, $format);">
<reference>strptime($date, $format);
Parse a time/date generated with &lt;function&gt;strftime&lt;/function&gt;
<b> date string </b>The string to parse (e.g. returned from strftime)
<b> format string </b>The format used in date (e.g. the same as
used in strftime).
For more information about the format options, read the
strftime page.
<b>returns</b>  array an array, or false on failure.
The following parameters are returned in the array
tm_sec Seconds after the minute (0-61)
tm_min Minutes after the hour (0-59)
tm_hour Hour since midnight (0-23)
tm_mday Day of the month (1-31)
tm_mon Months since January (0-11)
tm_year Years since 1900
tm_wday Days since Sunday (0-6)
tm_yday Days since January 1 (0-365)
unparsed the date part which was not recognized using the specified format
</reference></element>
<element pattern="strtotime" autocomplete_append="($time, $now = null);">
<reference>strtotime($time, $now = null);
Parse about any English textual datetime description into a Unix timestamp
<b> time string </b>The string to parse, according to the GNU Date Input Formats
syntax. Before PHP 5.0.0, microseconds weren't allowed in the time, since
PHP 5.0.0 they are allowed but ignored.
<b> now int[optional] </b>The timestamp used to calculate the returned value.
<b>returns</b>  int a timestamp on success, false otherwise. Previous to PHP 5.1.0,
this function would return -1 on failure.
</reference></element>
<element pattern="time" autocomplete_append="();">
<reference>time();
Return current Unix timestamp
<b>returns</b>  int 
</reference></element>
<element pattern="timezone_abbreviations_list" autocomplete_append="();">
<reference>timezone_abbreviations_list();
Returns associative array containing dst, offset and the timezone name
<b>returns</b>  array array on success or false on failure.
</reference></element>
<element pattern="timezone_identifiers_list" autocomplete_append="();">
<reference>timezone_identifiers_list();
Returns numerically index array with all timezone identifiers
<b>returns</b>  array array on success or false on failure.
</reference></element>
<element pattern="timezone_name_from_abbr" autocomplete_append="($abbr, $gmtOffset = null, $isdst = null);">
<reference>timezone_name_from_abbr($abbr, $gmtOffset = null, $isdst = null);
Returns the timezone name from abbrevation
<b> abbr string </b>Time zone abbreviation.
<b> gmtOffset int[optional] </b>Offset from GMT in seconds. Defaults to -1 which means that first found
time zone corresponding to abbr is returned.
Otherwise exact offset is searched and only if not found then the first
time zone with any offset is returned.
<b> isdst int[optional] </b>Daylight saving time indicator. If abbr doesn't
exist then the time zone is searched solely by
offset and isdst.
<b>returns</b>  string time zone name on success or false on failure.
</reference></element>
<element pattern="timezone_name_get" autocomplete_append="(DateTimeZone $object);">
<reference>timezone_name_get(DateTimeZone $object);
Returns the name of the timezone
<b> object DateTimeZone </b>DateTimeZone object.
<b>returns</b>  string time zone name on success or false on failure.
</reference></element>
<element pattern="timezone_offset_get" autocomplete_append="(DateTimeZone $object, DateTime $datetime);">
<reference>timezone_offset_get(DateTimeZone $object, DateTime $datetime);
Returns the timezone offset from GMT
<b> object DateTimeZone </b>DateTimeZone object.
<b> datetime DateTime </b>DateTime that contains the date/time to compute the offset from. 
<b>returns</b>  int time zone offset in seconds on success or false on failure.
</reference></element>
<element pattern="timezone_open" autocomplete_append="($timezone);">
<reference>timezone_open($timezone);
Returns new DateTimeZone object
<b> timezone string </b>Time zone identifier as full name (e.g. Europe/Prague) or abbreviation
(e.g. CET).
<b>returns</b>  DateTimeZone DateTimeZone object on success or false on failure.
</reference></element>
<element pattern="timezone_transitions_get" autocomplete_append="(DateTimeZone $object);">
<reference>timezone_transitions_get(DateTimeZone $object);
Returns all transitions for the timezone
<b> object DateTimeZone </b>DateTimeZone object.
<b>returns</b>  array numerically indexed array containing associative array with all
transitions on success or false on failure.
</reference></element>
<element pattern="dbplus_add"/>
<element pattern="dbplus_aql"/>
<element pattern="dbplus_chdir"/>
<element pattern="dbplus_close"/>
<element pattern="dbplus_curr"/>
<element pattern="dbplus_errcode"/>
<element pattern="dbplus_errno"/>
<element pattern="dbplus_find"/>
<element pattern="dbplus_first"/>
<element pattern="dbplus_flush"/>
<element pattern="dbplus_freealllocks"/>
<element pattern="dbplus_freelock"/>
<element pattern="dbplus_freerlocks"/>
<element pattern="dbplus_getlock"/>
<element pattern="dbplus_getunique"/>
<element pattern="dbplus_info"/>
<element pattern="dbplus_last"/>
<element pattern="dbplus_lockrel"/>
<element pattern="dbplus_next"/>
<element pattern="dbplus_open"/>
<element pattern="dbplus_prev"/>
<element pattern="dbplus_rchperm"/>
<element pattern="dbplus_rcreate"/>
<element pattern="dbplus_rcrtexact"/>
<element pattern="dbplus_rcrtlike"/>
<element pattern="dbplus_resolve"/>
<element pattern="dbplus_restorepos"/>
<element pattern="dbplus_rkeys"/>
<element pattern="dbplus_ropen"/>
<element pattern="dbplus_rquery"/>
<element pattern="dbplus_rrename"/>
<element pattern="dbplus_rsecindex"/>
<element pattern="dbplus_runlink"/>
<element pattern="dbplus_rzap"/>
<element pattern="dbplus_savepos"/>
<element pattern="dbplus_setindex"/>
<element pattern="dbplus_setindexbynumber"/>
<element pattern="dbplus_sql"/>
<element pattern="dbplus_tcl"/>
<element pattern="dbplus_tremove"/>
<element pattern="dbplus_undo"/>
<element pattern="dbplus_undoprepare"/>
<element pattern="dbplus_unlockrel"/>
<element pattern="dbplus_unselect"/>
<element pattern="dbplus_update"/>
<element pattern="dbplus_xlockrel"/>
<element pattern="dbplus_xunlockrel"/>
<element pattern="dba_close"/>
<element pattern="dba_delete"/>
<element pattern="dba_exists"/>
<element pattern="dba_fetch"/>
<element pattern="dba_fetch"/>
<element pattern="dba_firstkey"/>
<element pattern="dba_handlers"/>
<element pattern="dba_insert"/>
<element pattern="dba_key_split"/>
<element pattern="dba_list"/>
<element pattern="dba_nextkey"/>
<element pattern="dba_open"/>
<element pattern="dba_optimize"/>
<element pattern="dba_popen"/>
<element pattern="dba_replace"/>
<element pattern="dba_sync"/>
<element pattern="dbase_add_record"/>
<element pattern="dbase_close"/>
<element pattern="dbase_create"/>
<element pattern="dbase_delete_record"/>
<element pattern="dbase_get_header_info"/>
<element pattern="dbase_get_record_with_names"/>
<element pattern="dbase_get_record"/>
<element pattern="dbase_numfields"/>
<element pattern="dbase_numrecords"/>
<element pattern="dbase_open"/>
<element pattern="dbase_pack"/>
<element pattern="dbase_replace_record"/>
<element pattern="dblist"/>
<element pattern="dbmclose"/>
<element pattern="dbmdelete"/>
<element pattern="dbmexists"/>
<element pattern="dbmfetch"/>
<element pattern="dbmfirstkey"/>
<element pattern="dbminsert"/>
<element pattern="dbmnextkey"/>
<element pattern="dbmopen"/>
<element pattern="dbmreplace"/>
<element pattern="dbx_close"/>
<element pattern="dbx_compare"/>
<element pattern="dbx_connect"/>
<element pattern="dbx_error"/>
<element pattern="dbx_escape_string"/>
<element pattern="dbx_fetch_row"/>
<element pattern="dbx_query"/>
<element pattern="dbx_sort"/>
<element pattern="dio_close"/>
<element pattern="dio_fcntl"/>
<element pattern="dio_open"/>
<element pattern="dio_read"/>
<element pattern="dio_seek"/>
<element pattern="dio_stat"/>
<element pattern="dio_tcsetattr"/>
<element pattern="dio_truncate"/>
<element pattern="dio_write"/>
<element pattern="chdir" autocomplete_append="($directory);">
<reference>chdir($directory);
Change directory
<b> directory string </b>The new current directory
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="chroot"/>
<element pattern="dir" autocomplete_append="($directory, $context);">
<reference>dir($directory, $context);
Return an instance of the Directory class
<b> directory</b><b> context[optional]</b><b>returns</b>  string 
</reference></element>
<element pattern="read"/>
<element pattern="rewind" autocomplete_append="($handle);">
<reference>rewind($handle);
Rewind the position of a file pointer
<b> handle resource </b>The file pointer must be valid, and must point to a file
successfully opened by fopen.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="close"/>
<element pattern="closedir" autocomplete_append="($dir_handle = null);">
<reference>closedir($dir_handle = null);
Close directory handle
<b> dir_handle resource[optional] </b>The directory handle resource previously opened
with opendir. If the directory handle is 
not specified, the last link opened by opendir 
is assumed.
<b>returns</b>  void 
</reference></element>
<element pattern="getcwd" autocomplete_append="();">
<reference>getcwd();
Gets the current working directory
<b>returns</b>  string the current working directory on success, or false on
failure.
 
On some Unix variants, getcwd will return
false if any one of the parent directories does not have the
readable or search mode set, even if the current directory
does. See chmod for more information on
modes and permissions.
</reference></element>
<element pattern="opendir" autocomplete_append="($path, $context = null);">
<reference>opendir($path, $context = null);
Open directory handle
<b> path string </b>The directory path that is to be opened
<b> context resource[optional] </b>For a description of the context parameter, 
refer to the streams section of
the manual.
<b>returns</b>  resource a directory handle resource on success, or
false on failure.
 
If path is not a valid directory or the
directory can not be opened due to permission restrictions or
filesystem errors, opendir returns false and
generates a PHP error of level 
E_WARNING. You can suppress the error output of
opendir by prepending
'@' to the
front of the function name.
</reference></element>
<element pattern="readdir" autocomplete_append="($dir_handle = null);">
<reference>readdir($dir_handle = null);
Read entry from directory handle
<b> dir_handle resource[optional] </b>The directory handle resource previously opened
with opendir. If the directory handle is 
not specified, the last link opened by opendir 
is assumed.
<b>returns</b>  string the filename on success, or false on failure.
</reference></element>
<element pattern="rewinddir" autocomplete_append="($dir_handle = null);">
<reference>rewinddir($dir_handle = null);
Rewind directory handle
<b> dir_handle resource[optional] </b>The directory handle resource previously opened
with opendir. If the directory handle is 
not specified, the last link opened by opendir 
is assumed.
<b>returns</b>  void 
</reference></element>
<element pattern="scandir" autocomplete_append="($directory, $sorting_order = null, $context = null);">
<reference>scandir($directory, $sorting_order = null, $context = null);
List files and directories inside the specified path
<b> directory string </b>The directory that will be scanned.
<b> sorting_order int[optional] </b>By default, the sorted order is alphabetical in ascending order. If
the optional sorting_order is used (set to 1),
then the sort order is alphabetical in descending order.
<b> context resource[optional] </b>For a description of the context parameter, 
refer to the streams section of
the manual.
<b>returns</b>  array an array of filenames on success, or false on 
failure. If directory is not a directory, then 
boolean false is returned, and an error of level 
E_WARNING is generated.
</reference></element>
<element pattern="__construct"/>
<element pattern="isId"/>
<element pattern="appendData"/>
<element pattern="deleteData"/>
<element pattern="insertData"/>
<element pattern="replaceData"/>
<element pattern="substringData"/>
<element pattern="__construct"/>
<element pattern="__construct"/>
<element pattern="createAttribute"/>
<element pattern="createAttributeNS"/>
<element pattern="createCDATASection"/>
<element pattern="createComment"/>
<element pattern="createDocumentFragment"/>
<element pattern="createElement"/>
<element pattern="createElementNS"/>
<element pattern="createEntityReference"/>
<element pattern="createProcessingInstruction"/>
<element pattern="createTextNode"/>
<element pattern="getElementById"/>
<element pattern="getElementsByTagName"/>
<element pattern="getElementsByTagNameNS"/>
<element pattern="importNode"/>
<element pattern="load"/>
<element pattern="loadHTML"/>
<element pattern="loadHTMLFile"/>
<element pattern="loadXML"/>
<element pattern="normalizeDocument"/>
<element pattern="registerNodeClass"/>
<element pattern="relaxNGValidate"/>
<element pattern="relaxNGValidateSource"/>
<element pattern="save"/>
<element pattern="saveHTML"/>
<element pattern="saveHTMLFile"/>
<element pattern="saveXML"/>
<element pattern="schemaValidate"/>
<element pattern="schemaValidateSource"/>
<element pattern="validate"/>
<element pattern="xinclude"/>
<element pattern="appendXML"/>
<element pattern="__construct"/>
<element pattern="getAttribute"/>
<element pattern="getAttributeNode"/>
<element pattern="getAttributeNodeNS"/>
<element pattern="getAttributeNS"/>
<element pattern="getElementsByTagName"/>
<element pattern="getElementsByTagNameNS"/>
<element pattern="hasAttribute"/>
<element pattern="hasAttributeNS"/>
<element pattern="removeAttribute"/>
<element pattern="removeAttributeNode"/>
<element pattern="removeAttributeNS"/>
<element pattern="setAttribute"/>
<element pattern="setAttributeNode"/>
<element pattern="setAttributeNodeNS"/>
<element pattern="setAttributeNS"/>
<element pattern="setIdAttribute"/>
<element pattern="setIdAttributeNode"/>
<element pattern="setIdAttributeNS"/>
<element pattern="__construct"/>
<element pattern="__construct"/>
<element pattern="createDocument"/>
<element pattern="createDocumentType"/>
<element pattern="hasFeature"/>
<element pattern="getNamedItem"/>
<element pattern="getNamedItemNS"/>
<element pattern="item"/>
<element pattern="appendChild"/>
<element pattern="cloneNode"/>
<element pattern="hasAttributes"/>
<element pattern="hasChildNodes"/>
<element pattern="insertBefore"/>
<element pattern="isDefaultNamespace"/>
<element pattern="isSameNode"/>
<element pattern="isSupported"/>
<element pattern="lookupNamespaceURI"/>
<element pattern="lookupPrefix"/>
<element pattern="normalize"/>
<element pattern="removeChild"/>
<element pattern="replaceChild"/>
<element pattern="item"/>
<element pattern="__construct"/>
<element pattern="__construct"/>
<element pattern="isWhitespaceInElementContent"/>
<element pattern="splitText"/>
<element pattern="__construct"/>
<element pattern="evaluate"/>
<element pattern="query"/>
<element pattern="registerNamespace"/>
<element pattern="dom_import_simplexml" autocomplete_append="(SimpleXMLElement $node);">
<reference>dom_import_simplexml(SimpleXMLElement $node);
Gets a DOMElement object from a SimpleXMLElement object
<b> node SimpleXMLElement </b>The SimpleXMLElement node.
<b>returns</b>  DOMElement The DOMElement node added or false if any errors occur.
</reference></element>
<element pattern="name"/>
<element pattern="set_value"/>
<element pattern="specified"/>
<element pattern="value"/>
<element pattern="entities"/>
<element pattern="internal_subset"/>
<element pattern="name"/>
<element pattern="notations"/>
<element pattern="public_id"/>
<element pattern="system_id"/>
<element pattern="get_attribute_node"/>
<element pattern="get_attribute"/>
<element pattern="get_elements_by_tagname"/>
<element pattern="has_attribute"/>
<element pattern="remove_attribute"/>
<element pattern="set_attribute_node"/>
<element pattern="set_attribute"/>
<element pattern="tagname"/>
<element pattern="add_namespace"/>
<element pattern="append_child"/>
<element pattern="data"/>
<element pattern="target"/>
<element pattern="process"/>
<element pattern="result_dump_file"/>
<element pattern="result_dump_mem"/>
<element pattern="domxml_new_doc"/>
<element pattern="domxml_open_file"/>
<element pattern="domxml_open_mem"/>
<element pattern="domxml_version"/>
<element pattern="domxml_xmltree"/>
<element pattern="domxml_xslt_stylesheet_doc"/>
<element pattern="domxml_xslt_stylesheet_file"/>
<element pattern="domxml_xslt_stylesheet"/>
<element pattern="domxml_xslt_version"/>
<element pattern="xpath_eval_expression"/>
<element pattern="xpath_eval_expression"/>
<element pattern="xpath_eval"/>
<element pattern="xpath_eval"/>
<element pattern="xpath_new_context"/>
<element pattern="xpath_register_ns_auto"/>
<element pattern="xpath_register_ns"/>
<element pattern="xptr_eval"/>
<element pattern="xptr_eval"/>
<element pattern="xptr_new_context"/>
<element pattern="enchant_broker_describe"/>
<element pattern="enchant_broker_dict_exists"/>
<element pattern="enchant_broker_free_dict"/>
<element pattern="enchant_broker_free"/>
<element pattern="enchant_broker_get_error"/>
<element pattern="enchant_broker_init"/>
<element pattern="enchant_broker_list_dicts"/>
<element pattern="enchant_broker_request_dict"/>
<element pattern="enchant_broker_request_pwl_dict"/>
<element pattern="enchant_broker_set_ordering"/>
<element pattern="enchant_dict_add_to_personal"/>
<element pattern="enchant_dict_add_to_session"/>
<element pattern="enchant_dict_check"/>
<element pattern="enchant_dict_describe"/>
<element pattern="enchant_dict_get_error"/>
<element pattern="enchant_dict_is_in_session"/>
<element pattern="enchant_dict_quick_check"/>
<element pattern="enchant_dict_store_replacement"/>
<element pattern="enchant_dict_suggest"/>
<element pattern="debug_backtrace" autocomplete_append="($provide_object = null);">
<reference>debug_backtrace($provide_object = null);
Generates a backtrace
<b> provide_object bool[optional] </b>
<b>returns</b>  array an associative array.
 The possible returned elements are as follows:

function string The current function name. See also __FUNCTION__.
line integer The current line number. See also __LINE__.
file string The current file name. See also __FILE__.
class string The current class name. See also __CLASS__
object object The current object.
type string The current call type. If a method call, "-&gt;" is returned. If a static
method call, "::" is returned. If a function call, nothing is returned.
args array If inside a function, this lists the functions arguments. If
inside an included file, this lists the included file name(s).
</reference></element>
<element pattern="debug_print_backtrace" autocomplete_append="();">
<reference>debug_print_backtrace();
Prints a backtrace
<b>returns</b>  void 
</reference></element>
<element pattern="error_get_last" autocomplete_append="();">
<reference>error_get_last();
Get the last occurred error
<b>returns</b>  array an associative array describing the last error with keys "type",
"message", "file" and "line". Returns &amp;null; if there hasn't been an error
yet.
</reference></element>
<element pattern="error_log" autocomplete_append="($message, $message_type = null, $destination = null, $extra_headers = null);">
<reference>error_log($message, $message_type = null, $destination = null, $extra_headers = null);
Send an error message somewhere
<b> message string </b>The error message that should be logged.
<b> message_type int[optional] </b>Says where the error should go.
The possible message types are as follows:

0 message is sent to PHP's system logger, using the Operating 
System's system logging mechanism or a file, depending
on what the error_log configuration directive is set to. This is the default option.

1 message is sent by email to the address in
the destination parameter. This is the only
message type where the fourth parameter,
extra_headers is used.

2 No longer an option.

3 message is appended to the file
destination. A newline is not automatically 
added to the end of the message string.

<b> destination string[optional] </b>The destination. Its meaning depends on the 
message_type parameter as described above.
<b> extra_headers string[optional] </b>The extra headers. It's used when the message_type
parameter is set to 1.
This message type uses the same internal function as 
mail does.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="error_reporting" autocomplete_append="($level = null);">
<reference>error_reporting($level = null);
Sets which PHP errors are reported
<b> level int[optional] </b>The new error_reporting
level. It takes on either a bitmask, or named constants. Using named 
constants is strongly encouraged to ensure compatibility for future 
versions. As error levels are added, the range of integers increases, 
so older integer-based error levels will not always behave as expected.
The available error level constants are listed below. The actual
meanings of these error levels are described in the
predefined constants.

1 E_ERROR
2 E_WARNING
4 E_PARSE
8 E_NOTICE
16 E_CORE_ERROR
32 E_CORE_WARNING
64 E_COMPILE_ERROR
128 E_COMPILE_WARNING
256 E_USER_ERROR
512 E_USER_WARNING
1024 E_USER_NOTICE
6143 E_ALL
2048 E_STRICT
4096 E_RECOVERABLE_ERROR
8192 E_DEPRECATED
16384 E_USER_DEPRECATED

<b>returns</b>  int the old error_reporting level.
</reference></element>
<element pattern="restore_error_handler" autocomplete_append="();">
<reference>restore_error_handler();
Restores the previous error handler function
<b>returns</b>  bool This function always returns true.
</reference></element>
<element pattern="restore_exception_handler" autocomplete_append="();">
<reference>restore_exception_handler();
Restores the previously defined exception handler function
<b>returns</b>  bool This function always returns true.
</reference></element>
<element pattern="set_error_handler" autocomplete_append="($error_handler, $error_types = null);">
<reference>set_error_handler($error_handler, $error_types = null);
Sets a user-defined error handler function
<b> error_handler callback </b>The user function needs to accept two parameters: the error code, and a
string describing the error. Then there are three optional parameters 
that may be supplied: the filename in which the error occurred, the
line number in which the error occurred, and the context in which the
error occurred (an array that points to the active symbol table at the
point the error occurred). The function can be shown as:
handler
interrno
stringerrstr
stringerrfile
interrline
arrayerrcontext
errno
The first parameter, errno, contains the
level of the error raised, as an integer.
<b> error_types int[optional] </b>Can be used to mask the triggering of the
error_handler function just like the error_reporting ini setting 
controls which errors are shown. Without this mask set the
error_handler will be called for every error
regardless to the setting of the error_reporting setting.
<b>returns</b>  mixed a string containing the previously defined
error handler (if any), or &amp;null; on error. If the previous handler
was a class method, this function will return an indexed array with
the class and the method name.
</reference></element>
<element pattern="set_exception_handler" autocomplete_append="($exception_handler);">
<reference>set_exception_handler($exception_handler);
Sets a user-defined exception handler function
<b> exception_handler callback </b>Name of the function to be called when an uncaught exception occurs.
This function must be defined before calling
set_exception_handler. This handler function
needs to accept one parameter, which will be the exception object that
was thrown.
<b>returns</b>  string the name of the previously defined exception handler, or &amp;null; on error. If
no previous handler was defined, &amp;null; is also returned.
</reference></element>
<element pattern="trigger_error" autocomplete_append="($error_msg, $error_type = null);">
<reference>trigger_error($error_msg, $error_type = null);
Generates a user-level error/warning/notice message
<b> error_msg string </b>The designated error message for this error. It's limited to 1024 
characters in length. Any additional characters beyond 1024 will be 
truncated.
<b> error_type int[optional] </b>The designated error type for this error. It only works with the E_USER
family of constants, and will default to E_USER_NOTICE.
<b>returns</b>  bool This function returns false if wrong error_type is
specified, true otherwise.
</reference></element>
<element pattern="exif_imagetype" autocomplete_append="($filename);">
<reference>exif_imagetype($filename);
Determine the type of an image
<b> filename string The image being checked.</b><b>returns</b>  int When a correct signature is found, the appropriate constant value will be
returned otherwise the return value is false. The return value is the
same value that getimagesize returns in index 2 but
exif_imagetype is much faster.
</reference></element>
<element pattern="exif_read_data" autocomplete_append="($filename, $sections = null, $arrays = null, $thumbnail = null);">
<reference>exif_read_data($filename, $sections = null, $arrays = null, $thumbnail = null);
Reads the &lt;acronym&gt;EXIF&lt;/acronym&gt; headers from &lt;acronym&gt;JPEG&lt;/acronym&gt; or &lt;acronym&gt;TIFF&lt;/acronym&gt;
<b> filename string </b>The name of the image file being read. This cannot be an
URL.
<b> sections string[optional] </b>Is a comma separated list of sections that need to be present in file 
to produce a result array. If none of the requested 
sections could be found the return value is false.
&lt;tr valign="top"&gt;
&lt;td&gt;FILE&lt;/td&gt;
&lt;td&gt;FileName, FileSize, FileDateTime, SectionsFound&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;COMPUTED&lt;/td&gt;
&lt;td&gt;
html, Width, Height, IsColor, and more if available. Height and 
Width are computed the same way getimagesize
does so their values must not be part of any header returned. 
Also, html is a height/width text string to be used inside normal 
HTML.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;ANY_TAG&lt;/td&gt;
&lt;td&gt;Any information that has a Tag e.g. IFD0, EXIF, ...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;IFD0&lt;/td&gt;
&lt;td&gt;
All tagged data of IFD0. In normal imagefiles this contains
image size and so forth.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;THUMBNAIL&lt;/td&gt;
&lt;td&gt;
A file is supposed to contain a thumbnail if it has a second IFD.
All tagged information about the embedded thumbnail is stored in 
this section.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;COMMENT&lt;/td&gt;
&lt;td&gt;Comment headers of JPEG images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;EXIF&lt;/td&gt;
&lt;td&gt;
The EXIF section is a sub section of IFD0. It contains
more detailed information about an image. Most of these entries
are digital camera related.
&lt;/td&gt;
&lt;/tr&gt;
<b> arrays bool[optional] </b>Specifies whether or not each section becomes an array. The 
sections COMPUTED,
THUMBNAIL, and COMMENT 
always become arrays as they may contain values whose names conflict
with other sections.
<b> thumbnail bool[optional] </b>When set to true the thumbnail itself is read. Otherwise, only the
tagged data is read.
<b>returns</b>  array It returns an associative array where the array indexes are 
the header names and the array values are the values associated with 
those headers. If no data can be returned, 
exif_read_data will return false.
</reference></element>
<element pattern="exif_tagname" autocomplete_append="($index);">
<reference>exif_tagname($index);
Get the header name for an index
<b> index string </b>The image index
<b>returns</b>  string the header name, or false if index is
undefined.
</reference></element>
<element pattern="exif_thumbnail" autocomplete_append="($filename, &amp;$width = null, &amp;$height = null, &amp;$imagetype = null);">
<reference>exif_thumbnail($filename, &amp;$width = null, &amp;$height = null, &amp;$imagetype = null);
Retrieve the embedded thumbnail of a TIFF or JPEG image
<b> filename string </b>The name of the image file being read. This image contains an
embedded thumbnail.
<b> width int[optional] </b>The return width of the returned thumbnail.
<b> height int[optional] </b>The returned height of the returned thumbnail.
<b> imagetype int[optional] </b>The returned image type of the returned thumbnail. This is either
TIFF or JPEG.
<b>returns</b>  string the embedded thumbnail, or false if the image contains no 
thumbnail.
</reference></element>
<element pattern="expect_expectl"/>
<element pattern="expect_popen"/>
<element pattern="fam_cancel_monitor"/>
<element pattern="fam_close"/>
<element pattern="fam_monitor_collection"/>
<element pattern="fam_monitor_directory"/>
<element pattern="fam_monitor_file"/>
<element pattern="fam_next_event"/>
<element pattern="fam_open"/>
<element pattern="fam_pending"/>
<element pattern="fam_resume_monitor"/>
<element pattern="fam_suspend_monitor"/>
<element pattern="fdf_add_doc_javascript"/>
<element pattern="fdf_add_template"/>
<element pattern="fdf_close"/>
<element pattern="fdf_create"/>
<element pattern="fdf_enum_values"/>
<element pattern="fdf_errno"/>
<element pattern="fdf_error"/>
<element pattern="fdf_get_ap"/>
<element pattern="fdf_get_attachment"/>
<element pattern="fdf_get_encoding"/>
<element pattern="fdf_get_file"/>
<element pattern="fdf_get_flags"/>
<element pattern="fdf_get_opt"/>
<element pattern="fdf_get_status"/>
<element pattern="fdf_get_value"/>
<element pattern="fdf_get_version"/>
<element pattern="fdf_header"/>
<element pattern="fdf_next_field_name"/>
<element pattern="fdf_open_string"/>
<element pattern="fdf_open"/>
<element pattern="fdf_remove_item"/>
<element pattern="fdf_save_string"/>
<element pattern="fdf_save"/>
<element pattern="fdf_set_ap"/>
<element pattern="fdf_set_encoding"/>
<element pattern="fdf_set_file"/>
<element pattern="fdf_set_flags"/>
<element pattern="fdf_set_javascript_action"/>
<element pattern="fdf_set_on_import_javascript"/>
<element pattern="fdf_set_opt"/>
<element pattern="fdf_set_status"/>
<element pattern="fdf_set_submit_form_action"/>
<element pattern="fdf_set_target_frame"/>
<element pattern="fdf_set_value"/>
<element pattern="fdf_set_version"/>
<element pattern="finfo_buffer" autocomplete_append="($string, $options = null, $context = null);">
<reference>finfo_buffer($string, $options = null, $context = null);
Return information about a string buffer
<b> string string </b>Content of a file to be checked.
<b> options int[optional] </b>One or disjunction of more Fileinfo
constants.
<b> context resource[optional] </b><b>returns</b>  string a textual description of the string
argument, or false if an error occurred.
</reference></element>
<element pattern="buffer"/>
<element pattern="finfo_close" autocomplete_append="($finfo);">
<reference>finfo_close($finfo);
Close fileinfo resource
<b> finfo resource </b>Fileinfo resource returned by finfo_open.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="finfo_file" autocomplete_append="($file_name, $options = null, $context = null);">
<reference>finfo_file($file_name, $options = null, $context = null);
Return information about a file
<b> file_name string </b>Name of a file to be checked.
<b> options int[optional] </b>One or disjunction of more Fileinfo
constants.
<b> context resource[optional] </b>For a description of contexts, refer to .
<b>returns</b>  string a textual description of the contents of the
filename argument, or false if an error occurred.
</reference></element>
<element pattern="finfo_open" autocomplete_append="($options = null, $arg = null);">
<reference>finfo_open($options = null, $arg = null);
Create a new fileinfo resource
<b> options int[optional] </b>One or disjunction of more Fileinfo
constants.
<b> arg string[optional] </b><b>returns</b>  resource a magic database resource on success or false on failure.
</reference></element>
<element pattern="__construct"/>
<element pattern="finfo_set_flags" autocomplete_append="($options);">
<reference>finfo_set_flags($options);
Set libmagic configuration options
<b> options int </b>One or disjunction of more Fileinfo
constants.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="set_flags"/>
<element pattern="filepro_fieldcount"/>
<element pattern="filepro_fieldname"/>
<element pattern="filepro_fieldtype"/>
<element pattern="filepro_fieldwidth"/>
<element pattern="filepro_retrieve"/>
<element pattern="filepro_rowcount"/>
<element pattern="filepro"/>
<element pattern="basename" autocomplete_append="($path, $suffix = null);">
<reference>basename($path, $suffix = null);
Returns filename component of path
<b> path string </b>A path.
On Windows, both slash (/) and backslash
(\) are used as directory separator character. In
other environments, it is the forward slash (/).
<b> suffix string[optional] </b>If the filename ends in suffix this will also
be cut off.
<b>returns</b>  string the base name of the given path.
</reference></element>
<element pattern="chgrp" autocomplete_append="($filename, $group);">
<reference>chgrp($filename, $group);
Changes file group
<b> filename string </b>Path to the file.
<b> group mixed </b>A group name or number.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="chmod" autocomplete_append="($filename, $mode);">
<reference>chmod($filename, $mode);
Changes file mode
<b> filename string </b>Path to the file.
<b> mode int </b>Note that mode is not automatically
assumed to be an octal value, so strings (such as "g+w") will
not work properly. To ensure the expected operation,
you need to prefix mode with a zero (0):
]]&gt;
The mode parameter consists of three octal
number components specifying access restrictions for the owner,
the user group in which the owner is in, and to everybody else in
this order. One component can be computed by adding up the needed
permissions for that target user base. Number 1 means that you
grant execute rights, number 2 means that you make the file
writeable, number 4 means that you make the file readable. Add
up these numbers to specify needed rights. You can also read more
about modes on Unix systems with 'man 1 chmod' and 'man 2 chmod'.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="chown" autocomplete_append="($filename, $user);">
<reference>chown($filename, $user);
Changes file owner
<b> filename string </b>Path to the file.
<b> user mixed </b>A user name or number.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="clearstatcache" autocomplete_append="();">
<reference>clearstatcache();
Clears file status cache
<b>returns</b>  void 
</reference></element>
<element pattern="copy" autocomplete_append="($source, $dest, $context = null);">
<reference>copy($source, $dest, $context = null);
Copies file
<b> source string </b>Path to the source file.
<b> dest string </b>The destination path. If dest is a URL, the
copy operation may fail if the wrapper does not support overwriting of
existing files.
If the destination file already exists, it will be overwritten.
<b> context resource[optional] </b>A valid context resource created with 
stream_context_create.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="delete"/>
<element pattern="dirname" autocomplete_append="($path);">
<reference>dirname($path);
Returns directory name component of path
<b> path string </b>A path.
On Windows, both slash (/) and backslash
(\) are used as directory separator character. In
other environments, it is the forward slash (/).
<b>returns</b>  string the name of the directory. If there are no slashes in
path, a dot ('.') is returned,
indicating the current directory. Otherwise, the returned string is
path with any trailing
/component removed.
</reference></element>
<element pattern="disk_free_space" autocomplete_append="($directory);">
<reference>disk_free_space($directory);
Returns available space in directory
<b> directory string </b>A directory of the filesystem or disk partition.
Given a file name instead of a directory, the behaviour of the
function is unspecified and may differ between operating systems and
PHP versions.
<b>returns</b>  float the number of available bytes as a float.
</reference></element>
<element pattern="disk_total_space" autocomplete_append="($directory);">
<reference>disk_total_space($directory);
Returns the total size of a directory
<b> directory string </b>A directory of the filesystem or disk partition.
<b>returns</b>  float the total number of bytes as a float.
</reference></element>
<element pattern="fclose" autocomplete_append="($handle);">
<reference>fclose($handle);
Closes an open file pointer
<b> handle resource </b>The file pointer must be valid, and must point to a file successfully
opened by fopen or fsockopen.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="feof" autocomplete_append="($handle);">
<reference>feof($handle);
Tests for end-of-file on a file pointer
<b> handle resource &amp;fs.validfp.all;</b><b>returns</b>  bool true if the file pointer is at EOF or an error occurs
(including socket timeout); otherwise returns false.
</reference></element>
<element pattern="fflush" autocomplete_append="($handle);">
<reference>fflush($handle);
Flushes the output to a file
<b> handle resource &amp;fs.validfp.all;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="fgetc" autocomplete_append="($handle);">
<reference>fgetc($handle);
Gets character from file pointer
<b> handle resource &amp;fs.validfp.all;</b><b>returns</b>  string a string containing a single character read from the file pointed
to by handle. Returns false on EOF.
</reference></element>
<element pattern="fgetcsv" autocomplete_append="($handle, $length = null, $delimiter = null, $enclosure = null, $escape = null);">
<reference>fgetcsv($handle, $length = null, $delimiter = null, $enclosure = null, $escape = null);
Gets line from file pointer and parse for CSV fields
<b> handle resource </b>A valid file pointer to a file successfully opened by
fopen, popen, or
fsockopen.
<b> length int[optional] </b>Must be greater than the longest line (in characters) to be found in
the CSV file (allowing for trailing line-end characters). It became
optional in PHP 5. Omitting this parameter (or setting it to 0 in PHP
5.0.4 and later) the maximum line length is not limited, which is
slightly slower.
<b> delimiter string[optional] </b>Set the field delimiter (one character only). Defaults as a comma.
<b> enclosure string[optional] </b>Set the field enclosure character (one character only). Defaults as a
double quotation mark.
<b> escape string[optional] </b>Set the escape character (one character only). Defaults as a backslash
(\)
<b>returns</b>  array an indexed array containing the fields read.
A blank line in a CSV file will be returned as an array
comprising a single null field, and will not be treated
as an error.
&amp;note.line-endings;
fgetcsv returns false on error, including end of
file.
</reference></element>
<element pattern="fgets" autocomplete_append="($handle, $length = null);">
<reference>fgets($handle, $length = null);
Gets line from file pointer
<b> handle resource &amp;fs.validfp.all;</b><b> length int[optional] </b>Reading ends when length - 1 bytes have been
read, on a newline (which is included in the return value), or on EOF
(whichever comes first). If no length is specified, it will keep
reading from the stream until it reaches the end of the line.
Until PHP 4.3.0, omitting it would assume 1024 as the line length.
If the majority of the lines in the file are all larger than 8KB,
it is more resource efficient for your script to specify the maximum
line length.
<b>returns</b>  string a string of up to length - 1 bytes read from
the file pointed to by handle.
If an error occurs, returns false.
</reference></element>
<element pattern="fgetss" autocomplete_append="($handle, $length = null, $allowable_tags = null);">
<reference>fgetss($handle, $length = null, $allowable_tags = null);
Gets line from file pointer and strip HTML tags
<b> handle resource &amp;fs.validfp.all;</b><b> length int[optional] </b>Length of the data to be retrieved.
<b> allowable_tags string[optional] </b>You can use the optional third parameter to specify tags which should
not be stripped.
<b>returns</b>  string a string of up to length - 1 bytes read from
the file pointed to by handle, with all HTML and PHP
code striped.
If an error occurs, returns false.
</reference></element>
<element pattern="file_exists" autocomplete_append="($filename);">
<reference>file_exists($filename);
Checks whether a file or directory exists
<b> filename string </b>Path to the file or directory.
On windows, use //computername/share/filename or
\\computername\share\filename to check files on
network shares.
<b>returns</b>  bool true if the file or directory specified by
filename exists; false otherwise.
This function will return false for symlinks pointing to non-existing
files.
This function returns false for files inaccessible due to safe mode restrictions. However these
files still can be included if
they are located in safe_mode_include_dir.
The check is done using the real UID/GID instead of the effective one.
</reference></element>
<element pattern="file_get_contents" autocomplete_append="($filename, $flags = null, $context = null, $offset = null, $maxlen = null);">
<reference>file_get_contents($filename, $flags = null, $context = null, $offset = null, $maxlen = null);
Reads entire file into a string
<b> filename string </b>Name of the file to read.
<b> flags int[optional] </b>For all versions prior to PHP 6, this parameter is called
use_include_path and is a bool.
The flags parameter is only available since
PHP 6. If you use an older version and want to search for 
filename in the 
include path, this 
parameter must be true. Since PHP 6, you have to use the 
FILE_USE_INCLUDE_PATH flag instead.
The value of flags can be any combination of 
the following flags (with some restrictions), joined with the binary OR 
(|) operator.

Available flags:

FILE_USE_INCLUDE_PATH
Search for filename in the include directory.
See include_path for more information.

FILE_TEXT
If unicode semantics are enabled, the default encoding of the read
data is UTF-8. You can specify a different encoding by creating a 
custom context or by changing the default using 
stream_default_encoding. This flag cannot be 
used with FILE_BINARY. 

FILE_BINARY
With this flag, the file is read in binary mode. This is the default
setting and cannot be used with FILE_TEXT. 
<b> context resource[optional] </b>A valid context resource created with 
stream_context_create. If you don't need to use a
custom context, you can skip this parameter by &amp;null;.
<b> offset int[optional] </b>The offset where the reading starts.
<b> maxlen int[optional] </b>Maximum length of data read.
<b>returns</b>  string The function returns the read data or false on failure.
</reference></element>
<element pattern="file_put_contents" autocomplete_append="($filename, $data, $flags = null, $context = null);">
<reference>file_put_contents($filename, $data, $flags = null, $context = null);
Write a string to a file
<b> filename string </b>Path to the file where to write the data.
<b> data mixed </b>The data to write. Can be either a string, an
array or a stream resource (explained above).
If data is a stream resource, the
remaining buffer of that stream will be copied to the specified file.
This is similar with using stream_copy_to_stream.
You can also specify the data parameter as a single
dimension array. This is equivalent to
file_put_contents($filename, implode('', $array)).
<b> flags int[optional] </b>The value of flags can be any combination of 
the following flags (with some restrictions), joined with the binary OR 
(|) operator.

Available flags:

FILE_USE_INCLUDE_PATH
Search for filename in the include directory.
See include_path for more
information.

FILE_APPEND
If file filename already exists, append 
the data to the file instead of overwriting it.

LOCK_EX
Acquire an exclusive lock on the file while proceeding to the 
writing.

FILE_TEXT
data is written in text mode. If unicode 
semantics are enabled, the default encoding is UTF-8.
You can specify a different encoding by creating a custom context
or by using the stream_default_encoding to
change the default. This flag cannot be used with 
FILE_BINARY. This flag is only available since
PHP 6.

FILE_BINARY
data will be written in binary mode. This
is the default setting and cannot be used with
FILE_TEXT. This flag is only available since
PHP 6.
<b> context resource[optional] </b>A valid context resource created with 
stream_context_create.
<b>returns</b>  int The function returns the number of bytes that were written to the file, or
false on failure.
</reference></element>
<element pattern="file" autocomplete_append="($filename, $flags = null, $context = null);">
<reference>file($filename, $flags = null, $context = null);
Reads entire file into an array
<b> filename string </b>Path to the file.
&amp;tip.fopen-wrapper;
<b> flags int[optional] </b>The optional parameter flags can be one, or
more, of the following constants:
FILE_USE_INCLUDE_PATH
Search for the file in the include_path.
<b> context resource[optional] </b>A context resource created with the 
stream_context_create function.
&amp;note.context-support;
<b>returns</b>  array the file in an array. Each element of the array corresponds to a
line in the file, with the newline still attached. Upon failure,
file returns false.
Each line in the resulting array will include the line ending, unless
FILE_IGNORE_NEW_LINES is used, so you still need to
use rtrim if you do not want the line ending
present.
</reference></element>
<element pattern="fileatime" autocomplete_append="($filename);">
<reference>fileatime($filename);
Gets last access time of file
<b> filename string </b>Path to the file.
<b>returns</b>  int the time the file was last accessed, or false in case of
an error. The time is returned as a Unix timestamp.
</reference></element>
<element pattern="filectime" autocomplete_append="($filename);">
<reference>filectime($filename);
Gets inode change time of file
<b> filename string </b>Path to the file.
<b>returns</b>  int the time the file was last changed, or false in case of
an error. The time is returned as a Unix timestamp.
</reference></element>
<element pattern="filegroup" autocomplete_append="($filename);">
<reference>filegroup($filename);
Gets file group
<b> filename string </b>Path to the file.
<b>returns</b>  int the group ID of the file, or false in case
of an error. The group ID is returned in numerical format, use
posix_getgrgid to resolve it to a group name.
Upon failure, false is returned.
</reference></element>
<element pattern="fileinode" autocomplete_append="($filename);">
<reference>fileinode($filename);
Gets file inode
<b> filename string </b>Path to the file.
<b>returns</b>  int the inode number of the file, or false in case of an error.
</reference></element>
<element pattern="filemtime" autocomplete_append="($filename);">
<reference>filemtime($filename);
Gets file modification time
<b> filename string </b>Path to the file.
<b>returns</b>  int the time the file was last modified, or false in case of
an error. The time is returned as a Unix timestamp, which is
suitable for the date function.
</reference></element>
<element pattern="fileowner" autocomplete_append="($filename);">
<reference>fileowner($filename);
Gets file owner
<b> filename string </b>Path to the file.
<b>returns</b>  int the user ID of the owner of the file, or false in case of
an error. The user ID is returned in numerical format, use
posix_getpwuid to resolve it to a username.
</reference></element>
<element pattern="fileperms" autocomplete_append="($filename);">
<reference>fileperms($filename);
Gets file permissions
<b> filename string </b>Path to the file.
<b>returns</b>  int the permissions on the file, or false in case of an error.
</reference></element>
<element pattern="filesize" autocomplete_append="($filename);">
<reference>filesize($filename);
Gets file size
<b> filename string </b>Path to the file.
<b>returns</b>  int the size of the file in bytes, or false (and generates an error
of level E_WARNING) in case of an error.
</reference></element>
<element pattern="filetype" autocomplete_append="($filename);">
<reference>filetype($filename);
Gets file type
<b> filename string </b>Path to the file.
<b>returns</b>  string the type of the file. Possible values are fifo, char,
dir, block, link, file, socket and unknown.
Returns false if an error occurs. filetype will also
produce an E_NOTICE message if the stat call fails
or if the file type is unknown.
</reference></element>
<element pattern="flock" autocomplete_append="($handle, $operation, &amp;$wouldblock = null);">
<reference>flock($handle, $operation, &amp;$wouldblock = null);
Portable advisory file locking
<b> handle resource </b>An open file pointer.
<b> operation int </b>operation is one of the following:
LOCK_SH to acquire a shared lock (reader).
<b> wouldblock int[optional] </b>The optional third argument is set to true if the lock would block
(EWOULDBLOCK errno condition).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="fnmatch" autocomplete_append="($pattern, $string, $flags = null);">
<reference>fnmatch($pattern, $string, $flags = null);
Match filename against a pattern
<b> pattern string </b>The shell wildcard pattern.
<b> string string </b>The tested string. This function is especially useful for filenames,
but may also be used on regular strings.
The average user may be used to shell patterns or at least in their
simplest form to '?' and '*'
wildcards so using fnmatch instead of
ereg or preg_match for
frontend search expression input may be way more convenient for
non-programming users.
<b> flags int[optional] </b>See the Unix manpage on fnmatch(3) for flag names
(as long as they are not documented here).
<b>returns</b>  bool true if there is a match, false otherwise.
</reference></element>
<element pattern="fopen" autocomplete_append="($filename, $mode, $use_include_path = null, $context = null);">
<reference>fopen($filename, $mode, $use_include_path = null, $context = null);
Opens file or URL
<b> filename string </b>If filename is of the form "scheme://...", it
is assumed to be a URL and PHP will search for a protocol handler
(also known as a wrapper) for that scheme. If no wrappers for that
protocol are registered, PHP will emit a notice to help you track
potential problems in your script and then continue as though
filename specifies a regular file.
If PHP has decided that filename specifies
a local file, then it will try to open a stream on that file.
The file must be accessible to PHP, so you need to ensure that
the file access permissions allow this access.
If you have enabled &amp;safemode;,
or open_basedir further
restrictions may apply.
If PHP has decided that filename specifies
a registered protocol, and that protocol is registered as a
network URL, PHP will check to make sure that
allow_url_fopen is
enabled. If it is switched off, PHP will emit a warning and
the fopen call will fail.
The list of supported protocols can be found in . Some protocols (also referred to as
wrappers) support context
and/or &amp;php.ini; options. Refer to the specific page for the
protocol in use for a list of options which can be set. (e.g.
&amp;php.ini; value user_agent used by the
http wrapper).
On the Windows platform, be careful to escape any backslashes
used in the path to the file, or use forward slashes.
]]&gt;
<b> mode string </b>The mode parameter specifies the type of access
you require to the stream. It may be any of the following:

A list of possible modes for fopen using mode:

'r' Open for reading only; place the file pointer at the
beginning of the file.

'r+' Open for reading and writing; place the file pointer at
the beginning of the file.

'w' Open for writing only; place the file pointer at the
beginning of the file and truncate the file to zero length.
If the file does not exist, attempt to create it.

'w+' Open for reading and writing; place the file pointer at
the beginning of the file and truncate the file to zero
length. If the file does not exist, attempt to create it.

'a' Open for writing only; place the file pointer at the end of
the file. If the file does not exist, attempt to create it.

'a+' Open for reading and writing; place the file pointer at
the end of the file. If the file does not exist, attempt to
create it.

'x' Create and open for writing only; place the file pointer at the
beginning of the file. If the file already exists, the
fopen call will fail by returning false and
generating an error of level E_WARNING. If
the file does not exist, attempt to create it. This is equivalent
to specifying O_EXCL|O_CREAT flags for the
underlying open(2) system call. 

'x+' Create and open for reading and writing; place the file pointer at
the beginning of the file. If the file already exists, the
fopen call will fail by returning false and
generating an error of level E_WARNING. If
the file does not exist, attempt to create it. This is equivalent
to specifying O_EXCL|O_CREAT flags for the
underlying open(2) system call.

Different operating system families have different line-ending
conventions. When you write a text file and want to insert a line
break, you need to use the correct line-ending character(s) for your
operating system. Unix based systems use \n as the
line ending character, Windows based systems use \r\n
as the line ending characters and Macintosh based systems use
\r as the line ending character.
If you use the wrong line ending characters when writing your files, you
might find that other applications that open those files will "look
funny".
Windows offers a text-mode translation flag ('t')
which will transparently translate \n to
\r\n when working with the file. In contrast, you
can also use 'b' to force binary mode, which will not
translate your data. To use these flags, specify either
'b' or 't' as the last character
of the mode parameter.
The default translation mode depends on the SAPI and version of PHP that
you are using, so you are encouraged to always specify the appropriate
flag for portability reasons. You should use the 't'
mode if you are working with plain-text files and you use
\n to delimit your line endings in your script, but
expect your files to be readable with applications such as notepad. You
should use the 'b' in all other cases.
If you do not specify the 'b' flag when working with binary files, you
may experience strange problems with your data, including broken image
files and strange problems with \r\n characters.
For portability, it is strongly recommended that you always
use the 'b' flag when opening files with fopen.
Again, for portability, it is also strongly recommended that
you re-write code that uses or relies upon the 't'
mode so that it uses the correct line endings and
'b' mode instead.
<b> use_include_path bool[optional] </b>The optional third use_include_path parameter
can be set to '1' or true if you want to search for the file in the
include_path, too.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  resource a file pointer resource on success, or false on error.
</reference></element>
<element pattern="fpassthru" autocomplete_append="($handle);">
<reference>fpassthru($handle);
Output all remaining data on a file pointer
<b> handle resource &amp;fs.validfp.all;</b><b>returns</b>  int If an error occurs, fpassthru returns
false. Otherwise, fpassthru returns
the number of characters read from handle
and passed through to the output.
</reference></element>
<element pattern="fputcsv" autocomplete_append="($handle, array $fields, $delimiter = null, $enclosure = null);">
<reference>fputcsv($handle, array $fields, $delimiter = null, $enclosure = null);
Format line as CSV and write to file pointer
<b> handle resource &amp;fs.validfp.all;</b><b> fields array </b>An array of values.
<b> delimiter string[optional] </b>The optional delimiter parameter sets the field
delimiter (one character only). Defaults as a comma: ,.
<b> enclosure string[optional] </b>The optional enclosure parameter sets the field
enclosure (one character only) and defaults to a double quotation mark:
".
<b>returns</b>  int the length of the written string, or false on failure.
</reference></element>
<element pattern="fputs" autocomplete_append="($fp, $str, $length);">
<reference>fputs($fp, $str, $length);
&amp;Alias; &lt;function&gt;fwrite&lt;/function&gt;
<b> fp</b><b> str</b><b> length[optional]</b></reference></element>
<element pattern="fread" autocomplete_append="($handle, $length);">
<reference>fread($handle, $length);
Binary-safe file read
<b> handle resource &amp;fs.file.pointer;</b><b> length int </b>Up to length number of bytes read.
<b>returns</b>  string the read string or false in case of error.
</reference></element>
<element pattern="fscanf" autocomplete_append="($handle, $format, &amp;$_ = null);">
<reference>fscanf($handle, $format, &amp;$_ = null);
Parses input from a file according to a format
<b> handle resource &amp;fs.file.pointer;</b><b> format string </b>The specified format as described in the 
sprintf documentation.
<b> _ mixed[optional] </b><b>returns</b>  mixed If only two parameters were passed to this function, the values parsed will be
returned as an array. Otherwise, if optional parameters are passed, the
function will return the number of assigned values. The optional
parameters must be passed by reference.
</reference></element>
<element pattern="fseek" autocomplete_append="($handle, $offset, $whence = null);">
<reference>fseek($handle, $offset, $whence = null);
Seeks on a file pointer
<b> handle resource &amp;fs.file.pointer;</b><b> offset int </b>The offset.
To move to a position before the end-of-file, you need to pass a negative
value in offset.
<b> whence int[optional] </b>whence values are:
SEEK_SET - Set position equal to offset bytes.
SEEK_CUR - Set position to current location plus offset.
SEEK_END - Set position to end-of-file plus offset.
If whence is not specified, it is assumed to be
SEEK_SET.
<b>returns</b>  int Upon success, returns 0; otherwise, returns -1. Note that seeking
past EOF is not considered an error.
</reference></element>
<element pattern="fstat" autocomplete_append="($handle);">
<reference>fstat($handle);
Gets information about a file using an open file pointer
<b> handle resource &amp;fs.file.pointer;</b><b>returns</b>  array an array with the statistics of the file; the format of the array
is described in detail on the stat manual page.
</reference></element>
<element pattern="ftell" autocomplete_append="($handle);">
<reference>ftell($handle);
Returns the current position of the file read/write pointer
<b> handle resource </b>The file pointer must be valid, and must point to a file successfully
opened by fopen or popen.
ftell gives undefined results for append-only streams
(opened with "a" flag).
<b>returns</b>  int the position of the file pointer referenced by
handle as an integer; i.e., its offset into the file stream.
If an error occurs, returns false.
</reference></element>
<element pattern="ftruncate" autocomplete_append="($handle, $size);">
<reference>ftruncate($handle, $size);
Truncates a file to a given length
<b> handle resource </b>The file pointer.
The handle must be open for writing.
<b> size int </b>The size to truncate to.
If size is larger than the file it is extended
with null bytes.
If size is smaller than the extra data
will be lost.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="fwrite" autocomplete_append="($handle, $string, $length = null);">
<reference>fwrite($handle, $string, $length = null);
Binary-safe file write
<b> handle resource &amp;fs.file.pointer;</b><b> string string </b>The string that is to be written.
<b> length int[optional] </b>If the length argument is given, writing will
stop after length bytes have been written or
the end of string is reached, whichever comes
first.
Note that if the length argument is given,
then the magic_quotes_runtime
configuration option will be ignored and no slashes will be
stripped from string.
<b>returns</b>  int 
</reference></element>
<element pattern="glob" autocomplete_append="($pattern, $flags = null);">
<reference>glob($pattern, $flags = null);
Find pathnames matching a pattern
<b> pattern string </b>The pattern. No tilde expansion or parameter substitution is done.
<b> flags int[optional] </b>Valid flags:
GLOB_MARK - Adds a slash to each directory returned
<b>returns</b>  array an array containing the matched files/directories, an empty array
if no file matched or false on error.
On some systems it is impossible to distinguish between empty match and an
error.
</reference></element>
<element pattern="is_dir" autocomplete_append="($filename);">
<reference>is_dir($filename);
Tells whether the filename is a directory
<b> filename string </b>Path to the file. If filename is a relative
filename, it will be checked relative to the current working
directory.
<b>returns</b>  bool true if the filename exists and is a directory, false
otherwise.
</reference></element>
<element pattern="is_executable" autocomplete_append="($filename);">
<reference>is_executable($filename);
Tells whether the filename is executable
<b> filename string </b>Path to the file.
<b>returns</b>  bool true if the filename exists and is executable, or false on
error.
</reference></element>
<element pattern="is_file" autocomplete_append="($filename);">
<reference>is_file($filename);
Tells whether the filename is a regular file
<b> filename string </b>Path to the file.
<b>returns</b>  bool true if the filename exists and is a regular file, false
otherwise.
</reference></element>
<element pattern="is_link" autocomplete_append="($filename);">
<reference>is_link($filename);
Tells whether the filename is a symbolic link
<b> filename string </b>Path to the file.
<b>returns</b>  bool true if the filename exists and is a symbolic link, false
otherwise.
</reference></element>
<element pattern="is_readable" autocomplete_append="($filename);">
<reference>is_readable($filename);
Tells whether the filename is readable
<b> filename string </b>Path to the file.
<b>returns</b>  bool true if the file or directory specified by
filename exists and is readable, false otherwise.
</reference></element>
<element pattern="is_uploaded_file" autocomplete_append="($filename);">
<reference>is_uploaded_file($filename);
Tells whether the file was uploaded via HTTP POST
<b> filename string </b>The filename being checked.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="is_writable" autocomplete_append="($filename);">
<reference>is_writable($filename);
Tells whether the filename is writable
<b> filename string </b>The filename being checked.
<b>returns</b>  bool true if the filename exists and is
writable.
</reference></element>
<element pattern="is_writeable" autocomplete_append="($filename);">
<reference>is_writeable($filename);
&amp;Alias; &lt;function&gt;is_writable&lt;/function&gt;
<b> filename</b></reference></element>
<element pattern="lchgrp" autocomplete_append="($filename, $group);">
<reference>lchgrp($filename, $group);
Changes group ownership of symlink
<b> filename string </b>Path to the symlink.
<b> group mixed </b>The group specified by name or number.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="lchown" autocomplete_append="($filename, $user);">
<reference>lchown($filename, $user);
Changes user ownership of symlink
<b> filename string </b>Path to the file.
<b> user mixed </b>User name or number.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="link" autocomplete_append="($target, $link);">
<reference>link($target, $link);
Create a hard link
<b> target string </b>Target of the link.
<b> link string </b>The link name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="linkinfo" autocomplete_append="($path);">
<reference>linkinfo($path);
Gets information about a link
<b> path string </b>Path to the link.
<b>returns</b>  int linkinfo returns the st_dev field
of the Unix C stat structure returned by the lstat
system call. Returns 0 or false in case of error.
</reference></element>
<element pattern="lstat" autocomplete_append="($filename);">
<reference>lstat($filename);
Gives information about a file or symbolic link
<b> filename string </b>Path to a file or a symbolic link.
<b>returns</b>  array See the manual page for stat for information on
the structure of the array that lstat returns.
This function is identical to the stat function
except that if the filename parameter is a symbolic
link, the status of the symbolic link is returned, not the status of the
file pointed to by the symbolic link.
</reference></element>
<element pattern="mkdir" autocomplete_append="($pathname, $mode = null, $recursive = null, $context = null);">
<reference>mkdir($pathname, $mode = null, $recursive = null, $context = null);
Makes directory
<b> pathname string </b>The directory path.
<b> mode int[optional] </b>The mode is 0777 by default, which means the widest possible
access. For more information on modes, read the details
on the chmod page.
mode is ignored on Windows.
Note that you probably want to specify the mode as an octal number,
which means it should have a leading zero. The mode is also modified
by the current umask, which you can change using
umask.
<b> recursive bool[optional] </b>Default to false.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="move_uploaded_file" autocomplete_append="($filename, $destination);">
<reference>move_uploaded_file($filename, $destination);
Moves an uploaded file to a new location
<b> filename string </b>The filename of the uploaded file.
<b> destination string </b>The destination of the moved file.
<b>returns</b>  bool If filename is not a valid upload file,
then no action will occur, and
move_uploaded_file will return
false.
If filename is a valid upload file, but
cannot be moved for some reason, no action will occur, and
move_uploaded_file will return
false. Additionally, a warning will be issued.
</reference></element>
<element pattern="parse_ini_file" autocomplete_append="($filename, $process_sections = null);">
<reference>parse_ini_file($filename, $process_sections = null);
Parse a configuration file
<b> filename string </b>The filename of the ini file being parsed.
<b> process_sections bool[optional] </b>By setting the last process_sections
parameter to true, you get a multidimensional array, with
the section names and settings included. The default
for process_sections is false 
<b>returns</b>  array The settings are returned as an associative array.
</reference></element>
<element pattern="pathinfo" autocomplete_append="($path, $options = null);">
<reference>pathinfo($path, $options = null);
Returns information about a file path
<b> path string </b>The path being checked.
<b> options int[optional] </b>You can specify which elements are returned with optional parameter
options. It composes from
PATHINFO_DIRNAME,
PATHINFO_BASENAME,
PATHINFO_EXTENSION and
PATHINFO_FILENAME. It
defaults to return all elements.
<b>returns</b>  mixed The following associative array elements are returned:
dirname, basename,
extension (if any), and filename.
If options is used, this function will return a 
string if not all elements are requested.
</reference></element>
<element pattern="pclose" autocomplete_append="($handle);">
<reference>pclose($handle);
Closes process file pointer
<b> handle resource </b>The file pointer must be valid, and must have been returned by a
successful call to popen.
<b>returns</b>  int the termination status of the process that was run.
</reference></element>
<element pattern="popen" autocomplete_append="($command, $mode);">
<reference>popen($command, $mode);
Opens process file pointer
<b> command string </b>The command
<b> mode string </b>The mode
<b>returns</b>  resource a file pointer identical to that returned by
fopen, except that it is unidirectional (may
only be used for reading or writing) and must be closed with
pclose. This pointer may be used with
fgets, fgetss, and
fwrite.
If an error occurs, returns false.
</reference></element>
<element pattern="readfile" autocomplete_append="($filename, $use_include_path = null, $context = null);">
<reference>readfile($filename, $use_include_path = null, $context = null);
Outputs a file
<b> filename string </b>The filename being read.
<b> use_include_path bool[optional] </b>You can use the optional second parameter and set it to true, if
you want to search for the file in the include_path, too.
<b> context resource[optional] </b>A context stream resource.
<b>returns</b>  int the number of bytes read from the file. If an error
occurs, false is returned and unless the function was called as
@readfile, an error message is printed.
</reference></element>
<element pattern="readlink" autocomplete_append="($path);">
<reference>readlink($path);
Returns the target of a symbolic link
<b> path string </b>The symbolic link path.
<b>returns</b>  string the contents of the symbolic link path or false on error.
</reference></element>
<element pattern="realpath" autocomplete_append="($path);">
<reference>realpath($path);
Returns canonicalized absolute pathname
<b> path string </b>The path being checked.
<b>returns</b>  string the canonicalized absolute pathname on success. The resulting path 
will have no symbolic link, '/./' or '/../' components.
realpath returns false on failure, e.g. if
the file does not exist. On BSD systems realpath
doesn't fail if only the last path component
doesn't exist, while other systems will return false.
</reference></element>
<element pattern="rename" autocomplete_append="($oldname, $newname, $context = null);">
<reference>rename($oldname, $newname, $context = null);
Renames a file or directory
<b> oldname string </b>The old name. The wrapper used in oldname
must match the wrapper used in
newname.
<b> newname string </b>The new name.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="rewind" autocomplete_append="($handle);">
<reference>rewind($handle);
Rewind the position of a file pointer
<b> handle resource </b>The file pointer must be valid, and must point to a file
successfully opened by fopen.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="rmdir" autocomplete_append="($dirname, $context = null);">
<reference>rmdir($dirname, $context = null);
Removes directory
<b> dirname string </b>Path to the directory.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="set_file_buffer" autocomplete_append="($fp, $buffer);">
<reference>set_file_buffer($fp, $buffer);
&amp;Alias; &lt;function&gt;stream_set_write_buffer&lt;/function&gt;
<b> fp</b><b> buffer</b></reference></element>
<element pattern="stat" autocomplete_append="($filename);">
<reference>stat($filename);
Gives information about a file
<b> filename string </b>Path to the file.
<b>returns</b>  array

stat and fstat result format:

0 dev device number
1 ino inode number *
2 mode inode protection mode
3 nlink number of links
4 uid userid of owner *
5 gid groupid of owner *
6 rdev device type, if inode device
7 size size in bytes
8 atime time of last access (Unix timestamp)
9 mtime time of last modification (Unix timestamp)
10 ctime time of last inode change (Unix timestamp)
11 blksize blocksize of filesystem IO **
12 blocks number of blocks allocated **

* On Windows this will always be 0.
** Only valid on systems supporting the st_blksize type - other
systems (e.g. Windows) return -1.
In case of error, stat returns false.
</reference></element>
<element pattern="symlink" autocomplete_append="($target, $link);">
<reference>symlink($target, $link);
Creates a symbolic link
<b> target string </b>Target of the link.
<b> link string </b>The link name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="tempnam" autocomplete_append="($dir, $prefix);">
<reference>tempnam($dir, $prefix);
Create file with unique file name
<b> dir string </b>The directory where the temporary filename will be created.
<b> prefix string </b>The prefix of the generated temporary filename.
<b>returns</b>  string the new temporary filename, or false on
failure.
</reference></element>
<element pattern="tmpfile" autocomplete_append="();">
<reference>tmpfile();
Creates a temporary file
<b>returns</b>  resource a file handle, similar to the one returned by
fopen, for the new file, or false on failure.
</reference></element>
<element pattern="touch" autocomplete_append="($filename, $time = null, $atime = null);">
<reference>touch($filename, $time = null, $atime = null);
Sets access and modification time of file
<b> filename string </b>The name of the file being touched.
<b> time int[optional] </b>The touch time. If time is not supplied, 
the current system time is used.
<b> atime int[optional] </b>If present, the access time of the given filename is set to 
the value of atime
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="umask" autocomplete_append="($mask = null);">
<reference>umask($mask = null);
Changes the current umask
<b> mask int[optional] </b>The new umask.
<b>returns</b>  int umask without arguments simply returns the
current umask otherwise the old umask is returned.
</reference></element>
<element pattern="unlink" autocomplete_append="($filename, $context = null);">
<reference>unlink($filename, $context = null);
Deletes a file
<b> filename string </b>Path to the file.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="filter_has_var" autocomplete_append="($type, $variable_name);">
<reference>filter_has_var($type, $variable_name);
Checks if variable of specified type exists
<b> type int </b>One of INPUT_GET, INPUT_POST,
INPUT_COOKIE, INPUT_SERVER,
INPUT_ENV.
<b> variable_name string </b>Name of a variable to check.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="filter_id" autocomplete_append="($filtername);">
<reference>filter_id($filtername);
Returns the filter ID belonging to a named filter
<b> filtername string </b>Name of a filter to get.
<b>returns</b>  int ID of a filter on success or &amp;null; if filter doesn't exist.
</reference></element>
<element pattern="filter_input_array" autocomplete_append="($type, $definition = null);">
<reference>filter_input_array($type, $definition = null);
Gets external variables and optionally filters them
<b> type int </b>One of INPUT_GET, INPUT_POST,
INPUT_COOKIE, INPUT_SERVER,
INPUT_ENV, INPUT_SESSION, or
INPUT_REQUEST.
<b> definition mixed[optional] </b>An array defining the arguments. A valid key is a string
containing a variable name and a valid value is either a filter type,
or an array optionally specifying the filter, flags and
options. If the value is an array, valid keys are
filter which specifies the filter type,
flags which specifies any flags that apply to the
filter, and options which specifies any options
that apply to the filter. See the example below for a better
understanding.
This parameter can be also an integer holding a filter constant. Then all values in the
input array are filtered by this filter.
<b>returns</b>  mixed An array containing the values of the requested variables on success, or false 
on failure. An array value will be false if the filter fails, or &amp;null; if 
the variable is not set. Or if the flag FILTER_NULL_ON_FAILURE
is used, it returns false if the variable is not set and &amp;null; if the filter 
fails.
</reference></element>
<element pattern="filter_input" autocomplete_append="($type, $variable_name, $filter = null, $options = null);">
<reference>filter_input($type, $variable_name, $filter = null, $options = null);
Gets a specific external variable by name and optionally filters it
<b> type int </b>One of INPUT_GET, INPUT_POST,
INPUT_COOKIE, INPUT_SERVER,
INPUT_ENV, INPUT_SESSION (not
implemented yet) and INPUT_REQUEST (not
implemented yet).
<b> variable_name string </b>Name of a variable to get.
<b> filter int[optional] </b>Filter to apply. Defaults to FILTER_DEFAULT.
<b> options mixed[optional] </b>Associative array of options or bitwise disjunction of flags. If filter
accepts options, flags can be provided in "flags" field of array.
<b>returns</b>  mixed Value of the requested variable on success, false if the filter fails,
or &amp;null; if the variable_name variable is not set.
If the flag FILTER_NULL_ON_FAILURE is used, it
returns false if the variable is not set and &amp;null; if the filter fails.
</reference></element>
<element pattern="filter_list" autocomplete_append="();">
<reference>filter_list();
Returns a list of all supported filters
<b>returns</b>  array an array of names of all supported filters, empty array if there
are no such filters. Indexes of this array are not filter IDs, they can be
obtained with filter_id from a name instead.
</reference></element>
<element pattern="filter_var_array" autocomplete_append="(array $data, $definition = null);">
<reference>filter_var_array(array $data, $definition = null);
Gets multiple variables and optionally filters them
<b> data array </b>An array with string keys containing the data to filter.
<b> definition mixed[optional] </b>An array defining the arguments. A valid key is a string
containing a variable name and a valid value is either a filter type,
or an array optionally specifying the filter, flags and
options. If the value is an array, valid keys are
filter which specifies the filter type,
flags which specifies any flags that apply to the
filter, and options which specifies any options
that apply to the filter. See the example below for a better
understanding.
This parameter can be also an integer holding a filter constant. Then all values in the
input array are filtered by this filter.
<b>returns</b>  mixed An array containing the values of the requested variables on success, or false 
on failure. An array value will be false if the filter fails, or &amp;null; if 
the variable is not set.
</reference></element>
<element pattern="filter_var" autocomplete_append="($variable, $filter = null, $options = null);">
<reference>filter_var($variable, $filter = null, $options = null);
Filters a variable with a specified filter
<b> variable mixed </b>Value to filter.
<b> filter int[optional] </b>ID of a filter to use.
Defaults to FILTER_SANITIZE_STRING.
<b> options mixed[optional] </b>Associative array of options or bitwise disjunction of flags. If filter
accepts options, flags can be provided in "flags" field of array. For
the "callback" filter, callback type should be passed.
<b>returns</b>  mixed the filtered data, or false if the filter fails.
</reference></element>
<element pattern="ibase_add_user"/>
<element pattern="ibase_affected_rows"/>
<element pattern="ibase_backup"/>
<element pattern="ibase_blob_add"/>
<element pattern="ibase_blob_cancel"/>
<element pattern="ibase_blob_close"/>
<element pattern="ibase_blob_create"/>
<element pattern="ibase_blob_echo"/>
<element pattern="ibase_blob_get"/>
<element pattern="ibase_blob_import"/>
<element pattern="ibase_blob_import"/>
<element pattern="ibase_blob_info"/>
<element pattern="ibase_blob_info"/>
<element pattern="ibase_blob_open"/>
<element pattern="ibase_blob_open"/>
<element pattern="ibase_close"/>
<element pattern="ibase_commit_ret"/>
<element pattern="ibase_commit"/>
<element pattern="ibase_connect"/>
<element pattern="ibase_db_info"/>
<element pattern="ibase_delete_user"/>
<element pattern="ibase_drop_db"/>
<element pattern="ibase_errcode"/>
<element pattern="ibase_errmsg"/>
<element pattern="ibase_execute"/>
<element pattern="ibase_fetch_assoc"/>
<element pattern="ibase_fetch_object"/>
<element pattern="ibase_fetch_row"/>
<element pattern="ibase_field_info"/>
<element pattern="ibase_free_event_handler"/>
<element pattern="ibase_free_query"/>
<element pattern="ibase_free_result"/>
<element pattern="ibase_gen_id"/>
<element pattern="ibase_maintain_db"/>
<element pattern="ibase_modify_user"/>
<element pattern="ibase_name_result"/>
<element pattern="ibase_num_fields"/>
<element pattern="ibase_num_params"/>
<element pattern="ibase_param_info"/>
<element pattern="ibase_pconnect"/>
<element pattern="ibase_prepare"/>
<element pattern="ibase_prepare"/>
<element pattern="ibase_prepare"/>
<element pattern="ibase_query"/>
<element pattern="ibase_restore"/>
<element pattern="ibase_rollback_ret"/>
<element pattern="ibase_rollback"/>
<element pattern="ibase_server_info"/>
<element pattern="ibase_service_attach"/>
<element pattern="ibase_service_detach"/>
<element pattern="ibase_set_event_handler"/>
<element pattern="ibase_set_event_handler"/>
<element pattern="ibase_timefmt"/>
<element pattern="ibase_trans"/>
<element pattern="ibase_wait_event"/>
<element pattern="ibase_wait_event"/>
<element pattern="fribidi_log2vis"/>
<element pattern="fbsql_affected_rows"/>
<element pattern="fbsql_autocommit"/>
<element pattern="fbsql_blob_size"/>
<element pattern="fbsql_change_user"/>
<element pattern="fbsql_clob_size"/>
<element pattern="fbsql_close"/>
<element pattern="fbsql_commit"/>
<element pattern="fbsql_connect"/>
<element pattern="fbsql_create_blob"/>
<element pattern="fbsql_create_clob"/>
<element pattern="fbsql_create_db"/>
<element pattern="fbsql_data_seek"/>
<element pattern="fbsql_database_password"/>
<element pattern="fbsql_database"/>
<element pattern="fbsql_db_query"/>
<element pattern="fbsql_db_status"/>
<element pattern="fbsql_drop_db"/>
<element pattern="fbsql_errno"/>
<element pattern="fbsql_error"/>
<element pattern="fbsql_fetch_array"/>
<element pattern="fbsql_fetch_assoc"/>
<element pattern="fbsql_fetch_field"/>
<element pattern="fbsql_fetch_lengths"/>
<element pattern="fbsql_fetch_object"/>
<element pattern="fbsql_fetch_row"/>
<element pattern="fbsql_field_flags"/>
<element pattern="fbsql_field_len"/>
<element pattern="fbsql_field_name"/>
<element pattern="fbsql_field_seek"/>
<element pattern="fbsql_field_table"/>
<element pattern="fbsql_field_type"/>
<element pattern="fbsql_free_result"/>
<element pattern="fbsql_get_autostart_info"/>
<element pattern="fbsql_hostname"/>
<element pattern="fbsql_insert_id"/>
<element pattern="fbsql_list_dbs"/>
<element pattern="fbsql_list_fields"/>
<element pattern="fbsql_list_tables"/>
<element pattern="fbsql_next_result"/>
<element pattern="fbsql_num_fields"/>
<element pattern="fbsql_num_rows"/>
<element pattern="fbsql_password"/>
<element pattern="fbsql_pconnect"/>
<element pattern="fbsql_query"/>
<element pattern="fbsql_read_blob"/>
<element pattern="fbsql_read_clob"/>
<element pattern="fbsql_result"/>
<element pattern="fbsql_rollback"/>
<element pattern="fbsql_rows_fetched"/>
<element pattern="fbsql_select_db"/>
<element pattern="fbsql_set_characterset"/>
<element pattern="fbsql_set_lob_mode"/>
<element pattern="fbsql_set_password"/>
<element pattern="fbsql_set_transaction"/>
<element pattern="fbsql_start_db"/>
<element pattern="fbsql_stop_db"/>
<element pattern="fbsql_table_name"/>
<element pattern="fbsql_username"/>
<element pattern="fbsql_warnings"/>
<element pattern="ftp_alloc" autocomplete_append="($ftp_stream, $filesize, &amp;$result = null);">
<reference>ftp_alloc($ftp_stream, $filesize, &amp;$result = null);
Allocates space for a file to be uploaded
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> filesize int </b><b> result string[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_cdup" autocomplete_append="($ftp_stream);">
<reference>ftp_cdup($ftp_stream);
Changes to the parent directory
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_chdir" autocomplete_append="($ftp_stream, $directory);">
<reference>ftp_chdir($ftp_stream, $directory);
Changes the current directory on a FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> directory string </b>The target directory.
<b>returns</b>  bool Returns true on success or false on failure.
If changing directory fails, PHP will also throw a warning.
</reference></element>
<element pattern="ftp_chmod" autocomplete_append="($ftp_stream, $mode, $filename);">
<reference>ftp_chmod($ftp_stream, $mode, $filename);
Set permissions on a file via FTP
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> mode int </b>The new permissions, given as an octal value.
<b> filename string </b>The remote file.
<b>returns</b>  int the new file permissions on success or false on error.
</reference></element>
<element pattern="ftp_close" autocomplete_append="($ftp_stream);">
<reference>ftp_close($ftp_stream);
Closes an FTP connection
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_connect" autocomplete_append="($host, $port = null, $timeout = null);">
<reference>ftp_connect($host, $port = null, $timeout = null);
Opens an FTP connection
<b> host string </b>The FTP server address. This parameter shouldn't have any trailing 
slashes and shouldn't be prefixed with ftp://.
<b> port int[optional] </b>This parameter specifies an alternate port to connect to. If it is
omitted or set to zero, then the default FTP port, 21, will be used.
<b> timeout int[optional] </b>This parameter specifies the timeout for all subsequent network operations.
If omitted, the default value is 90 seconds. The timeout can be changed and
queried at any time with ftp_set_option and
ftp_get_option.
<b>returns</b>  resource a FTP stream on success or false on error.
</reference></element>
<element pattern="ftp_delete" autocomplete_append="($ftp_stream, $path);">
<reference>ftp_delete($ftp_stream, $path);
Deletes a file on the FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> path string </b>The file to delete.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_exec" autocomplete_append="($ftp_stream, $command);">
<reference>ftp_exec($ftp_stream, $command);
Requests execution of a command on the FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> command string </b>The command to execute.
<b>returns</b>  bool true if the command was successful (server sent response code:
200); otherwise returns false.
</reference></element>
<element pattern="ftp_fget" autocomplete_append="($ftp_stream, $handle, $remote_file, $mode, $resumepos = null);">
<reference>ftp_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos = null);
Downloads a file from the FTP server and saves to an open file
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> handle resource </b>An open file pointer in which we store the data.
<b> remote_file string </b>The remote file path.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> resumepos int[optional] </b>The position in the remote file to start downloading from.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_fput" autocomplete_append="($ftp_stream, $remote_file, $handle, $mode, $startpos = null);">
<reference>ftp_fput($ftp_stream, $remote_file, $handle, $mode, $startpos = null);
Uploads from an open file to the FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> remote_file string </b>The remote file path.
<b> handle resource </b>An open file pointer on the local file. Reading stops at end of file.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> startpos int[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_get_option" autocomplete_append="($ftp_stream, $option);">
<reference>ftp_get_option($ftp_stream, $option);
Retrieves various runtime behaviours of the current FTP stream
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> option int </b>

Currently, the following options are supported:

FTP_TIMEOUT_SEC Returns the current timeout used for network related operations.
FTP_AUTOSEEK Returns true if this option is on, false otherwise. 

<b>returns</b>  mixed the value on success or false if the given 
option is not supported. In the latter case, a
warning message is also thrown.
</reference></element>
<element pattern="ftp_get" autocomplete_append="($ftp_stream, $local_file, $remote_file, $mode, $resumepos = null);">
<reference>ftp_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos = null);
Downloads a file from the FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> local_file string </b>The local file path (will be overwritten if the file already exists).
<b> remote_file string </b>The remote file path.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> resumepos int[optional] </b>The position in the remote file to start downloading from.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_login" autocomplete_append="($ftp_stream, $username, $password);">
<reference>ftp_login($ftp_stream, $username, $password);
Logs in to an FTP connection
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> username string </b>The username (USER).
<b> password string </b>The password (PASS).
<b>returns</b>  bool Returns true on success or false on failure.
If login fails, PHP will also throw a warning.
</reference></element>
<element pattern="ftp_mdtm" autocomplete_append="($ftp_stream, $remote_file);">
<reference>ftp_mdtm($ftp_stream, $remote_file);
Returns the last modified time of the given file
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> remote_file string </b>The file from which to extract the last modification time.
<b>returns</b>  int the last modified time as a Unix timestamp on success, or -1 on 
error.
</reference></element>
<element pattern="ftp_mkdir" autocomplete_append="($ftp_stream, $directory);">
<reference>ftp_mkdir($ftp_stream, $directory);
Creates a directory
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> directory string </b>The name of the directory that will be created.
<b>returns</b>  string the newly created directory name on success or false on error.
</reference></element>
<element pattern="ftp_nb_continue" autocomplete_append="($ftp_stream);">
<reference>ftp_nb_continue($ftp_stream);
Continues retrieving/sending a file (non-blocking)
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b>returns</b>  int FTP_FAILED or FTP_FINISHED
or FTP_MOREDATA.
</reference></element>
<element pattern="ftp_nb_fget" autocomplete_append="($ftp_stream, $handle, $remote_file, $mode, $resumepos = null);">
<reference>ftp_nb_fget($ftp_stream, $handle, $remote_file, $mode, $resumepos = null);
Retrieves a file from the FTP server and writes it to an open file (non-blocking)
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> handle resource </b>An open file pointer in which we store the data.
<b> remote_file string </b>The remote file path.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> resumepos int[optional] </b><b>returns</b>  int FTP_FAILED or FTP_FINISHED
or FTP_MOREDATA.
</reference></element>
<element pattern="ftp_nb_fput" autocomplete_append="($ftp_stream, $remote_file, $handle, $mode, $startpos = null);">
<reference>ftp_nb_fput($ftp_stream, $remote_file, $handle, $mode, $startpos = null);
Stores a file from an open file to the FTP server (non-blocking)
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> remote_file string </b>The remote file path.
<b> handle resource </b>An open file pointer on the local file. Reading stops at end of file.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> startpos int[optional] </b><b>returns</b>  int FTP_FAILED or FTP_FINISHED
or FTP_MOREDATA.
</reference></element>
<element pattern="ftp_nb_get" autocomplete_append="($ftp_stream, $local_file, $remote_file, $mode, $resumepos = null);">
<reference>ftp_nb_get($ftp_stream, $local_file, $remote_file, $mode, $resumepos = null);
Retrieves a file from the FTP server and writes it to a local file (non-blocking)
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> local_file string </b>The local file path (will be overwritten if the file already exists).
<b> remote_file string </b>The remote file path.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> resumepos int[optional] </b><b>returns</b>  int FTP_FAILED or FTP_FINISHED
or FTP_MOREDATA.
</reference></element>
<element pattern="ftp_nb_put" autocomplete_append="($ftp_stream, $remote_file, $local_file, $mode, $startpos = null);">
<reference>ftp_nb_put($ftp_stream, $remote_file, $local_file, $mode, $startpos = null);
Stores a file on the FTP server (non-blocking)
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> remote_file string </b>The remote file path.
<b> local_file string </b>The local file path.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> startpos int[optional] </b><b>returns</b>  int FTP_FAILED or FTP_FINISHED
or FTP_MOREDATA.
</reference></element>
<element pattern="ftp_nlist" autocomplete_append="($ftp_stream, $directory);">
<reference>ftp_nlist($ftp_stream, $directory);
Returns a list of files in the given directory
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> directory string </b>The directory to be listed. This parameter can also include arguments, eg.
ftp_nlist($conn_id, "-la /your/dir");
Note that this parameter isn't escaped so there may be some issues with
filenames containing spaces and other characters. 
<b>returns</b>  array an array of filenames from the specified directory on success or
false on error.
</reference></element>
<element pattern="ftp_pasv" autocomplete_append="($ftp_stream, $pasv);">
<reference>ftp_pasv($ftp_stream, $pasv);
Turns passive mode on or off
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> pasv bool </b>If true, the passive mode is turned on, else it's turned off.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_put" autocomplete_append="($ftp_stream, $remote_file, $local_file, $mode, $startpos = null);">
<reference>ftp_put($ftp_stream, $remote_file, $local_file, $mode, $startpos = null);
Uploads a file to the FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> remote_file string </b>The remote file path.
<b> local_file string </b>The local file path.
<b> mode int </b>The transfer mode. Must be either FTP_ASCII or
FTP_BINARY.
<b> startpos int[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_pwd" autocomplete_append="($ftp_stream);">
<reference>ftp_pwd($ftp_stream);
Returns the current directory name
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b>returns</b>  string the current directory name or false on error.
</reference></element>
<element pattern="ftp_raw" autocomplete_append="($ftp_stream, $command);">
<reference>ftp_raw($ftp_stream, $command);
Sends an arbitrary command to an FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> command string </b>The command to execute.
<b>returns</b>  array the server's response as an array of strings.
No parsing is performed on the response string, nor does 
ftp_raw determine if the command succeeded.
</reference></element>
<element pattern="ftp_rawlist" autocomplete_append="($ftp_stream, $directory, $recursive = null);">
<reference>ftp_rawlist($ftp_stream, $directory, $recursive = null);
Returns a detailed list of files in the given directory
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> directory string </b>The directory path.
<b> recursive bool[optional] </b>If set to true, the issued command will be LIST -R.
<b>returns</b>  array an array where each element corresponds to one line of text.
The output is not parsed in any way. The system type identifier returned by
ftp_systype can be used to determine how the results 
should be interpreted.
</reference></element>
<element pattern="ftp_rename" autocomplete_append="($ftp_stream, $oldname, $newname);">
<reference>ftp_rename($ftp_stream, $oldname, $newname);
Renames a file or a directory on the FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> oldname string </b>The old file/directory name.
<b> newname string </b>The new name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_rmdir" autocomplete_append="($ftp_stream, $directory);">
<reference>ftp_rmdir($ftp_stream, $directory);
Removes a directory
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> directory string </b>The directory to delete. This must be either an absolute or relative
path to an empty directory.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_set_option" autocomplete_append="($ftp_stream, $option, $value);">
<reference>ftp_set_option($ftp_stream, $option, $value);
Set miscellaneous runtime FTP options
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> option int </b>

Currently, the following options are supported:

FTP_TIMEOUT_SEC Changes the timeout in seconds used for all network related 
functions. value must be an integer that
is greater than 0. The default timeout is 90 seconds.

FTP_AUTOSEEK When enabled, GET or PUT requests with a 
resumepos or startpos parameter will first seek to the 
requested position within the file.
This is enabled by default.

<b> value mixed </b>This parameter depends on which option is chosen
to be altered.
<b>returns</b>  bool true if the option could be set; false if not. A warning
message will be thrown if the option is not
supported or the passed value doesn't match the
expected value for the given option.
</reference></element>
<element pattern="ftp_site" autocomplete_append="($ftp_stream, $command);">
<reference>ftp_site($ftp_stream, $command);
Sends a SITE command to the server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> command string </b>The SITE command. Note that this parameter isn't escaped so there may
be some issues with filenames containing spaces and other characters.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ftp_size" autocomplete_append="($ftp_stream, $remote_file);">
<reference>ftp_size($ftp_stream, $remote_file);
Returns the size of the given file
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b> remote_file string </b>The remote file.
<b>returns</b>  int the file size on success, or -1 on error.
</reference></element>
<element pattern="ftp_ssl_connect" autocomplete_append="($host, $port = null, $timeout = null);">
<reference>ftp_ssl_connect($host, $port = null, $timeout = null);
Opens an Secure SSL-FTP connection
<b> host string </b>The FTP server address. This parameter shouldn't have any trailing 
slashes and shouldn't be prefixed with ftp://.
<b> port int[optional] </b>This parameter specifies an alternate port to connect to. If it is
omitted or set to zero, then the default FTP port, 21, will be used.
<b> timeout int[optional] </b>This parameter specifies the timeout for all subsequent network operations.
If omitted, the default value is 90 seconds. The timeout can be changed and
queried at any time with ftp_set_option and
ftp_get_option.
<b>returns</b>  resource a SSL-FTP stream on success or false on error.
</reference></element>
<element pattern="ftp_systype" autocomplete_append="($ftp_stream);">
<reference>ftp_systype($ftp_stream);
Returns the system type identifier of the remote FTP server
<b> ftp_stream resource </b>The link identifier of the FTP connection.
<b>returns</b>  string the remote system type, or false on error.
</reference></element>
<element pattern="call_user_func_array" autocomplete_append="($function, array $param_arr);">
<reference>call_user_func_array($function, array $param_arr);
Call a user function given with an array of parameters
<b> function callback </b>The function to be called.
<b> param_arr array </b>The parameters to be passed to the function, as an indexed array.
<b>returns</b>  mixed the function result, or false on error.
</reference></element>
<element pattern="call_user_func" autocomplete_append="($function, $parameter = null, $_ = null);">
<reference>call_user_func($function, $parameter = null, $_ = null);
Call a user function given by the first parameter
<b> function callback </b>The function to be called. Class methods may also be invoked
statically using this function by passing
array($classname, $methodname) to this parameter.
<b> parameter mixed[optional] </b>Zero or more parameters to be passed to the function.
Note that the parameters for call_user_func are
not passed by reference.
]]&gt;
<b> _ mixed[optional] </b><b>returns</b>  mixed the function result, or false on error.
</reference></element>
<element pattern="create_function" autocomplete_append="($args, $code);">
<reference>create_function($args, $code);
Create an anonymous (lambda-style) function
<b> args string </b>The function arguments.
<b> code string </b>The function code.
<b>returns</b>  string a unique function name as a string, or false on error.
</reference></element>
<element pattern="func_get_arg" autocomplete_append="($arg_num);">
<reference>func_get_arg($arg_num);
Return an item from the argument list
<b> arg_num int </b>The argument offset. Function arguments are counted starting from
zero.
<b>returns</b>  mixed the specified argument, or false on error.
</reference></element>
<element pattern="func_get_args" autocomplete_append="();">
<reference>func_get_args();
Returns an array comprising a function's argument list
<b>returns</b>  array an array in which each element is a copy of the corresponding
member of the current user-defined function's argument list.
</reference></element>
<element pattern="func_num_args" autocomplete_append="();">
<reference>func_num_args();
Returns the number of arguments passed to the function
<b>returns</b>  int the number of arguments passed into the current user-defined
function.
</reference></element>
<element pattern="function_exists" autocomplete_append="($function_name);">
<reference>function_exists($function_name);
Return &amp;true; if the given function has been defined
<b> function_name string </b>The function name, as a string.
<b>returns</b>  bool true if function_name exists and is a
function, false otherwise.
This function will return false for constructs, such as 
include_once and echo.
</reference></element>
<element pattern="get_defined_functions" autocomplete_append="();">
<reference>get_defined_functions();
Returns an array of all defined functions
<b>returns</b>  array an multidimensional array containing a list of all defined
functions, both built-in (internal) and user-defined. The internal
functions will be accessible via $arr["internal"], and
the user defined ones using $arr["user"] (see example
below).
</reference></element>
<element pattern="register_shutdown_function" autocomplete_append="($function, $parameter = null, $_ = null);">
<reference>register_shutdown_function($function, $parameter = null, $_ = null);
Register a function for execution on shutdown
<b> function callback </b><b> parameter mixed[optional] </b><b> _ mixed[optional] </b><b>returns</b>  void 
</reference></element>
<element pattern="register_tick_function" autocomplete_append="($function, $arg = null, $_ = null);">
<reference>register_tick_function($function, $arg = null, $_ = null);
Register a function for execution on each tick
<b> function callback </b>The function name as a string, or an array consisting of an object and
a method.
<b> arg mixed[optional] </b><b> _ mixed[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="unregister_tick_function" autocomplete_append="($function_name);">
<reference>unregister_tick_function($function_name);
De-register a function for execution on each tick
<b> function_name string </b>The function name, as a string.
<b>returns</b>  void 
</reference></element>
<element pattern="geoip_country_code_by_name"/>
<element pattern="geoip_country_code3_by_name"/>
<element pattern="geoip_country_name_by_name"/>
<element pattern="geoip_database_info"/>
<element pattern="geoip_id_by_name"/>
<element pattern="geoip_org_by_name"/>
<element pattern="geoip_record_by_name"/>
<element pattern="geoip_region_by_name"/>
<element pattern="bind_textdomain_codeset" autocomplete_append="($domain, $codeset);">
<reference>bind_textdomain_codeset($domain, $codeset);
Specify the character encoding in which the messages from the DOMAIN message catalog will be returned
<b> domain string </b>The domain
<b> codeset string </b>The code set
<b>returns</b>  string A string on success.
</reference></element>
<element pattern="bindtextdomain" autocomplete_append="($domain, $directory);">
<reference>bindtextdomain($domain, $directory);
Sets the path for a domain
<b> domain string </b>The domain
<b> directory string </b>The directory path
<b>returns</b>  string The full pathname for the domain currently being set.
</reference></element>
<element pattern="dcgettext" autocomplete_append="($domain, $message, $category);">
<reference>dcgettext($domain, $message, $category);
Overrides the domain for a single lookup
<b> domain string </b>The domain
<b> message string </b>The message
<b> category int </b>The category
<b>returns</b>  string A string on success.
</reference></element>
<element pattern="dcngettext" autocomplete_append="($domain, $msgid1, $msgid2, $n, $category);">
<reference>dcngettext($domain, $msgid1, $msgid2, $n, $category);
Plural version of dcgettext
<b> domain string </b>The domain
<b> msgid1 string </b><b> msgid2 string </b><b> n int </b><b> category int </b><b>returns</b>  string A string on success.
</reference></element>
<element pattern="dgettext" autocomplete_append="($domain, $message);">
<reference>dgettext($domain, $message);
Override the current domain
<b> domain string </b>The domain
<b> message string </b>The message
<b>returns</b>  string A string on success.
</reference></element>
<element pattern="dngettext" autocomplete_append="($domain, $msgid1, $msgid2, $n);">
<reference>dngettext($domain, $msgid1, $msgid2, $n);
Plural version of dgettext
<b> domain string </b>The domain
<b> msgid1 string </b><b> msgid2 string </b><b> n int </b><b>returns</b>  string A string on success.
</reference></element>
<element pattern="gettext" autocomplete_append="($message);">
<reference>gettext($message);
Lookup a message in the current domain
<b> message string </b><b>returns</b>  string a translated string if one is found in the 
translation table, or the submitted message if not found.
</reference></element>
<element pattern="ngettext" autocomplete_append="($msgid1, $msgid2, $n);">
<reference>ngettext($msgid1, $msgid2, $n);
Plural version of gettext
<b> msgid1 string </b><b> msgid2 string </b><b> n int </b><b>returns</b>  string correct plural form of message identified by 
msgid1 and msgid2
for count n.
</reference></element>
<element pattern="textdomain" autocomplete_append="($text_domain);">
<reference>textdomain($text_domain);
Sets the default domain
<b> text_domain string </b>The new message domain, or &amp;null; to get the current setting without
changing it
<b>returns</b>  string If successful, this function returns the current message
domain, after possibly changing it.
</reference></element>
<element pattern="gmp_abs" autocomplete_append="($a);">
<reference>gmp_abs($a);
Absolute value
<b> a resource &amp;gmp.parameter;</b><b>returns</b>  resource the absolute value of a, as a GMP number.
</reference></element>
<element pattern="gmp_add" autocomplete_append="($a, $b);">
<reference>gmp_add($a, $b);
Add numbers
<b> a resource </b>A number that will be added.
&amp;gmp.parameter;
<b> b resource </b>A number that will be added.
&amp;gmp.parameter;
<b>returns</b>  resource A GMP number representing the sum of the arguments.
</reference></element>
<element pattern="gmp_and" autocomplete_append="($a, $b);">
<reference>gmp_and($a, $b);
Bitwise AND
<b> a resource &amp;gmp.parameter;</b><b> b resource &amp;gmp.parameter;</b><b>returns</b>  resource A GMP number representing the bitwise AND comparison.
</reference></element>
<element pattern="gmp_clrbit" autocomplete_append="(&amp;$a, $index);">
<reference>gmp_clrbit(&amp;$a, $index);
Clear bit
<b> a resource &amp;gmp.parameter;</b><b> index int &amp;gmp.parameter;</b><b>returns</b>  void &amp;gmp.return;
</reference></element>
<element pattern="gmp_cmp" autocomplete_append="($a, $b);">
<reference>gmp_cmp($a, $b);
Compare numbers
<b> a resource &amp;gmp.parameter;</b><b> b resource &amp;gmp.parameter;</b><b>returns</b>  int a positive value if a &amp;gt; b, zero if
a = b and a negative value if a &amp;lt;
b.
</reference></element>
<element pattern="gmp_com" autocomplete_append="($a);">
<reference>gmp_com($a);
Calculates one's complement
<b> a resource &amp;gmp.parameter;</b><b>returns</b>  resource the one's complement of a, as a GMP number.
</reference></element>
<element pattern="gmp_div_q" autocomplete_append="($a, $b, $round = null);">
<reference>gmp_div_q($a, $b, $round = null);
Divide numbers
<b> a resource </b>The number being divided.
&amp;gmp.parameter;
<b> b resource </b>The number that a is being divided by.
&amp;gmp.parameter;
<b> round int[optional] </b>The result rounding is defined by the
round, which can have the following
values:
GMP_ROUND_ZERO: The result is truncated
towards 0.
<b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_div_qr" autocomplete_append="($n, $d, $round = null);">
<reference>gmp_div_qr($n, $d, $round = null);
Divide numbers and get quotient and remainder
<b> n resource </b>The number being divided.
&amp;gmp.parameter;
<b> d resource </b>The number that n is being divided by.
&amp;gmp.parameter;
<b> round int[optional] </b>See the gmp_div_q function for description
of the round argument.
<b>returns</b>  array an array, with the first
element being [n/d] (the integer result of the
division) and the second being (n - [n/d] * d)
(the remainder of the division).
</reference></element>
<element pattern="gmp_div_r" autocomplete_append="($n, $d, $round = null);">
<reference>gmp_div_r($n, $d, $round = null);
Remainder of the division of numbers
<b> n resource </b>The number being divided.
&amp;gmp.parameter;
<b> d resource </b>The number that n is being divided by.
&amp;gmp.parameter;
<b> round int[optional] </b>See the gmp_div_q function for description
of the round argument.
<b>returns</b>  resource The remainder, as a GMP number.
</reference></element>
<element pattern="gmp_divexact" autocomplete_append="($n, $d);">
<reference>gmp_divexact($n, $d);
Exact division of numbers
<b> n resource </b>The number being divided.
&amp;gmp.parameter;
<b> d resource </b>The number that a is being divided by.
&amp;gmp.parameter;
<b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_fact" autocomplete_append="($a);">
<reference>gmp_fact($a);
Factorial
<b> a int </b>The factorial number.
&amp;gmp.parameter;
<b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_gcd" autocomplete_append="($a, $b);">
<reference>gmp_gcd($a, $b);
Calculate GCD
<b> a resource &amp;gmp.parameter;</b><b> b resource &amp;gmp.parameter;</b><b>returns</b>  resource A positive GMP number that divides into both
a and b.
</reference></element>
<element pattern="gmp_gcdext" autocomplete_append="($a, $b);">
<reference>gmp_gcdext($a, $b);
Calculate GCD and multipliers
<b> a resource &amp;gmp.parameter;</b><b> b resource &amp;gmp.parameter;</b><b>returns</b>  array An array of GMP numbers.
</reference></element>
<element pattern="gmp_hamdist" autocomplete_append="($a, $b);">
<reference>gmp_hamdist($a, $b);
Hamming distance
<b> a resource &amp;gmp.parameter; </b>It should be positive.
<b> b resource &amp;gmp.parameter; </b>It should be positive.
<b>returns</b>  int &amp;gmp.return;
</reference></element>
<element pattern="gmp_init" autocomplete_append="($number, $base = null);">
<reference>gmp_init($number, $base = null);
Create GMP number
<b> number mixed </b>An integer or a string. The string representation can be decimal, 
hexadecimal or octal.
<b> base int[optional] </b>The base. Defaults to 0.
The base may vary from 2 to 36. If base is 0 (default value), the
actual base is determined from the leading characters: if the first
two characters are 0x or 0X,
hexadecimal is assumed, otherwise if the first character is "0",
octal is assumed, otherwise decimal is assumed.
<b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_intval" autocomplete_append="($gmpnumber);">
<reference>gmp_intval($gmpnumber);
Convert GMP number to integer
<b> gmpnumber resource </b>A GMP number.
<b>returns</b>  int An integer value of gmpnumber.
</reference></element>
<element pattern="gmp_invert" autocomplete_append="($a, $b);">
<reference>gmp_invert($a, $b);
Inverse by modulo
<b> a resource &amp;gmp.parameter;</b><b> b resource &amp;gmp.parameter;</b><b>returns</b>  resource A GMP number on success or false if an inverse does not exist.
</reference></element>
<element pattern="gmp_jacobi" autocomplete_append="($a, $p);">
<reference>gmp_jacobi($a, $p);
Jacobi symbol
<b> a resource &amp;gmp.parameter;</b><b> p resource &amp;gmp.parameter; </b>Should be odd and must be positive.
<b>returns</b>  int &amp;gmp.return;
</reference></element>
<element pattern="gmp_legendre" autocomplete_append="($a, $p);">
<reference>gmp_legendre($a, $p);
Legendre symbol
<b> a resource &amp;gmp.parameter;</b><b> p resource &amp;gmp.parameter; </b>Should be odd and must be positive.
<b>returns</b>  int &amp;gmp.return;
</reference></element>
<element pattern="gmp_mod" autocomplete_append="($n, $d);">
<reference>gmp_mod($n, $d);
Modulo operation
<b> n resource &amp;gmp.parameter;</b><b> d resource </b>The modulo that is being evaluated.
&amp;gmp.parameter;
<b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_mul" autocomplete_append="($a, $b);">
<reference>gmp_mul($a, $b);
Multiply numbers
<b> a resource </b>A number that will be multiplied by b.
&amp;gmp.parameter;
<b> b resource </b>A number that will be multiplied by a.
&amp;gmp.parameter;
<b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_neg" autocomplete_append="($a);">
<reference>gmp_neg($a);
Negate number
<b> a resource &amp;gmp.parameter;</b><b>returns</b>  resource -a, as a GMP number.
</reference></element>
<element pattern="gmp_nextprime" autocomplete_append="($a);">
<reference>gmp_nextprime($a);
Find next prime number
<b> a int &amp;gmp.parameter;</b><b>returns</b>  resource Return the next prime number greater than a,
as a GMP number.
</reference></element>
<element pattern="gmp_or" autocomplete_append="($a, $b);">
<reference>gmp_or($a, $b);
Bitwise OR
<b> a resource &amp;gmp.parameter;</b><b> b resource &amp;gmp.parameter;</b><b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_perfect_square" autocomplete_append="($a);">
<reference>gmp_perfect_square($a);
Perfect square check
<b> a resource </b>The number being checked as a perfect square.
&amp;gmp.parameter;
<b>returns</b>  bool true if a is a perfect square,
false otherwise.
</reference></element>
<element pattern="gmp_popcount" autocomplete_append="($a);">
<reference>gmp_popcount($a);
Population count
<b> a resource &amp;gmp.parameter;</b><b>returns</b>  int The population count of a, as an integer.
</reference></element>
<element pattern="gmp_pow" autocomplete_append="($base, $exp);">
<reference>gmp_pow($base, $exp);
Raise number into power
<b> base resource </b>The base number.
&amp;gmp.parameter;
<b> exp int </b>The positive power to raise the base.
<b>returns</b>  resource The new (raised) number, as a GMP number. The case of 
0^0 yields 1.
</reference></element>
<element pattern="gmp_powm" autocomplete_append="($base, $exp, $mod);">
<reference>gmp_powm($base, $exp, $mod);
Raise number into power with modulo
<b> base resource </b>The base number.
&amp;gmp.parameter;
<b> exp resource </b>The positive power to raise the base.
&amp;gmp.parameter;
<b> mod resource </b>The modulo.
&amp;gmp.parameter;
<b>returns</b>  resource The new (raised) number, as a GMP number.
</reference></element>
<element pattern="gmp_prob_prime" autocomplete_append="($a, $reps = null);">
<reference>gmp_prob_prime($a, $reps = null);
Check if number is "probably prime"
<b> a resource </b>The number being checked as a prime.
&amp;gmp.parameter;
<b> reps int[optional] </b>Reasonable values
of reps vary from 5 to 10 (default being
10); a higher value lowers the probability for a non-prime to
pass as a "probable" prime.
&amp;gmp.parameter;
<b>returns</b>  int If this function returns 0, a is
definitely not prime. If it returns 1, then
a is "probably" prime. If it returns 2,
then a is surely prime.
</reference></element>
<element pattern="gmp_random" autocomplete_append="($limiter);">
<reference>gmp_random($limiter);
Random number
<b> limiter int </b>The limiter.
&amp;gmp.parameter;
<b>returns</b>  resource A random GMP number.
</reference></element>
<element pattern="gmp_scan0" autocomplete_append="($a, $start);">
<reference>gmp_scan0($a, $start);
Scan for 0
<b> a resource </b>The number to scan.
&amp;gmp.parameter;
<b> start int </b>The starting bit.
<b>returns</b>  int the index of the found bit, as an integer. The
index starts from 0.
</reference></element>
<element pattern="gmp_scan1" autocomplete_append="($a, $start);">
<reference>gmp_scan1($a, $start);
Scan for 1
<b> a resource </b>The number to scan.
&amp;gmp.parameter;
<b> start int </b>The starting bit.
<b>returns</b>  int the index of the found bit, as an integer.
If no set bit is found, -1 is returned.
</reference></element>
<element pattern="gmp_setbit" autocomplete_append="(&amp;$a, $index, $set_clear = null);">
<reference>gmp_setbit(&amp;$a, $index, $set_clear = null);
Set bit
<b> a resource </b>The number being set to.
&amp;gmp.parameter;
<b> index int </b>The set bit.
<b> set_clear bool[optional] </b>Defines if the bit is set to 0 or 1. By default the bit is set to
1. Index starts at 0.
<b>returns</b>  void &amp;gmp.return;
</reference></element>
<element pattern="gmp_sign" autocomplete_append="($a);">
<reference>gmp_sign($a);
Sign of number
<b> a resource &amp;gmp.parameter;</b><b>returns</b>  int 1 if a is positive,
-1 if a is negative,
and 0 if a is zero.
</reference></element>
<element pattern="gmp_sqrt" autocomplete_append="($a);">
<reference>gmp_sqrt($a);
Calculate square root
<b> a resource &amp;gmp.parameter;</b><b>returns</b>  resource The integer portion of the square root, as a GMP number.
</reference></element>
<element pattern="gmp_sqrtrem" autocomplete_append="($a);">
<reference>gmp_sqrtrem($a);
Square root with remainder
<b> a resource </b>The number being square rooted.
&amp;gmp.parameter;
<b>returns</b>  array array where first element is the integer square root of
a and the second is the remainder
(i.e., the difference between a and the
first element squared).
</reference></element>
<element pattern="gmp_strval" autocomplete_append="($gmpnumber, $base = null);">
<reference>gmp_strval($gmpnumber, $base = null);
Convert GMP number to string
<b> gmpnumber resource </b>The GMP number that will be converted to a string.
&amp;gmp.parameter;
<b> base int[optional] </b>The base of the returned number. The default base is 10. 
Allowed values for the base are from 2 to 36.
<b>returns</b>  string The number, as a string.
</reference></element>
<element pattern="gmp_sub" autocomplete_append="($a, $b);">
<reference>gmp_sub($a, $b);
Subtract numbers
<b> a resource </b>The number being subtracted from.
&amp;gmp.parameter;
<b> b resource </b>The number subtracted from a.
&amp;gmp.parameter;
<b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gmp_testbit"/>
<element pattern="gmp_xor" autocomplete_append="($a, $b);">
<reference>gmp_xor($a, $b);
Bitwise XOR
<b> a resource &amp;gmp.parameter;</b><b> b resource &amp;gmp.parameter;</b><b>returns</b>  resource &amp;gmp.return;
</reference></element>
<element pattern="gnupg_adddecryptkey"/>
<element pattern="gnupg_addencryptkey"/>
<element pattern="gnupg_addsignkey"/>
<element pattern="gnupg_cleardecryptkeys"/>
<element pattern="gnupg_clearencryptkeys"/>
<element pattern="gnupg_clearsignkeys"/>
<element pattern="gnupg_decrypt"/>
<element pattern="gnupg_decryptverify"/>
<element pattern="gnupg_encrypt"/>
<element pattern="gnupg_encryptsign"/>
<element pattern="gnupg_export"/>
<element pattern="gnupg_geterror"/>
<element pattern="gnupg_getprotocol"/>
<element pattern="gnupg_import"/>
<element pattern="gnupg_keyinfo"/>
<element pattern="gnupg_setarmor"/>
<element pattern="gnupg_seterrormode"/>
<element pattern="gnupg_setsignmode"/>
<element pattern="gnupg_sign"/>
<element pattern="gnupg_verify"/>
<element pattern="gopher_parsedir"/>
<element pattern="hash_algos" autocomplete_append="();">
<reference>hash_algos();
Return a list of registered hashing algorithms
<b>returns</b>  array a numerically indexed array containing the list of supported
hashing algorithms.
</reference></element>
<element pattern="hash_file" autocomplete_append="($algo, $filename, $raw_output = null);">
<reference>hash_file($algo, $filename, $raw_output = null);
Generate a hash value using the contents of a given file
<b> algo string </b>Name of selected hashing algorithm (i.e. "md5", "sha256", "haval160,4", etc..)
<b> filename string </b>URL describing location of file to be hashed; Supports fopen wrappers.
<b> raw_output bool[optional] </b>When set to true, outputs raw binary data.
Default value (false) outputs lowercase hexits.
<b>returns</b>  string a string containing the calculated message digest as lowercase hexits
unless raw_output is set to true in which case the raw
binary representation of the message digest is returned.
</reference></element>
<element pattern="hash_final" autocomplete_append="($context, $raw_output = null);">
<reference>hash_final($context, $raw_output = null);
Finalize an incremental hash and return resulting digest
<b> context resource </b>Hashing context returned by hash_init.
<b> raw_output bool[optional] </b>When set to true, outputs raw binary data.
Default value (false) outputs lowercase hexits.
<b>returns</b>  string a string containing the calculated message digest as lowercase hexits
unless raw_output is set to true in which case the raw
binary representation of the message digest is returned.
</reference></element>
<element pattern="hash_hmac_file" autocomplete_append="($algo, $filename, $key, $raw_output = null);">
<reference>hash_hmac_file($algo, $filename, $key, $raw_output = null);
Generate a keyed hash value using the HMAC method and the contents of a given file
<b> algo string </b>Name of selected hashing algorithm (i.e. "md5", "sha256", "haval160,4", etc..)
<b> filename string </b>URL describing location of file to be hashed; Supports fopen wrappers.
<b> key string </b>Shared secret key used for generating the HMAC variant of the message digest.
<b> raw_output bool[optional] </b>When set to true, outputs raw binary data.
Default value (false) outputs lowercase hexits.
<b>returns</b>  string a string containing the calculated message digest as lowercase hexits
unless raw_output is set to true in which case the raw
binary representation of the message digest is returned.
</reference></element>
<element pattern="hash_hmac" autocomplete_append="($algo, $data, $key, $raw_output = null);">
<reference>hash_hmac($algo, $data, $key, $raw_output = null);
Generate a keyed hash value using the HMAC method
<b> algo string </b>Name of selected hashing algorithm (i.e. "md5", "sha256", "haval160,4", etc..)
<b> data string </b>Message to be hashed.
<b> key string </b>Shared secret key used for generating the HMAC variant of the message digest.
<b> raw_output bool[optional] </b>When set to true, outputs raw binary data.
Default value (false) outputs lowercase hexits.
<b>returns</b>  string a string containing the calculated message digest as lowercase hexits
unless raw_output is set to true in which case the raw
binary representation of the message digest is returned.
</reference></element>
<element pattern="hash_init" autocomplete_append="($algo, $options = null, $key = null);">
<reference>hash_init($algo, $options = null, $key = null);
Initialize an incremental hashing context
<b> algo string </b>Name of selected hashing algorithm (i.e. "md5", "sha256", "haval160,4", etc..)
<b> options int[optional] </b>Optional settings for hash generation, currently supports only one option:
HASH_HMAC. When specified, the key
must be specified.
<b> key string[optional] </b>When HASH_HMAC is specified for options,
a shared secret key to be used with the HMAC hashing method must be supplied in this
parameter.
<b>returns</b>  resource a Hashing Context resource for use with hash_update,
hash_update_stream, hash_update_file,
and hash_final.
</reference></element>
<element pattern="hash_update_file" autocomplete_append="($context, $filename, $context = null);">
<reference>hash_update_file($context, $filename, $context = null);
Pump data into an active hashing context from a file
<b> context resource </b>Stream context as returned by stream_context_create.
<b> filename string </b>URL describing location of file to be hashed; Supports fopen wrappers.
<b> context resource[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="hash_update_stream" autocomplete_append="($context, $handle, $length = null);">
<reference>hash_update_stream($context, $handle, $length = null);
Pump data into an active hashing context from an open stream
<b> context resource </b>Hashing context returned by hash_init.
<b> handle resource </b>Open file handle as returned by any stream creation function.
<b> length int[optional] </b>Maximum number of characters to copy from handle
into the hashing context.
<b>returns</b>  int Actual number of bytes added to the hashing context from handle.
</reference></element>
<element pattern="hash_update" autocomplete_append="($context, $data);">
<reference>hash_update($context, $data);
Pump data into an active hashing context
<b> context resource </b>Hashing context returned by hash_init.
<b> data string </b>Message to be included in the hash digest.
<b>returns</b>  bool true.
</reference></element>
<element pattern="hash" autocomplete_append="($algo, $data, $raw_output = null);">
<reference>hash($algo, $data, $raw_output = null);
Generate a hash value (message digest)
<b> algo string </b>Name of selected hashing algorithm (i.e. "md5", "sha256", "haval160,4", etc..)
<b> data string </b>Message to be hashed.
<b> raw_output bool[optional] </b>When set to true, outputs raw binary data.
Default value (false) outputs lowercase hexits.
<b>returns</b>  string a string containing the calculated message digest as lowercase hexits
unless raw_output is set to true in which case the raw
binary representation of the message digest is returned.
</reference></element>
<element pattern="http_cache_etag"/>
<element pattern="http_cache_last_modified"/>
<element pattern="http_chunked_decode"/>
<element pattern="http_deflate"/>
<element pattern="http_inflate"/>
<element pattern="http_get_request_body_stream"/>
<element pattern="http_get_request_body"/>
<element pattern="http_get_request_headers"/>
<element pattern="http_date"/>
<element pattern="http_support"/>
<element pattern="http_match_etag"/>
<element pattern="http_match_modified"/>
<element pattern="http_match_request_header"/>
<element pattern="http_build_cookie"/>
<element pattern="http_negotiate_charset"/>
<element pattern="http_negotiate_content_type"/>
<element pattern="http_negotiate_language"/>
<element pattern="ob_deflatehandler"/>
<element pattern="ob_etaghandler"/>
<element pattern="ob_inflatehandler"/>
<element pattern="http_parse_cookie"/>
<element pattern="http_parse_headers"/>
<element pattern="http_parse_message"/>
<element pattern="http_parse_params"/>
<element pattern="http_persistent_handles_count"/>
<element pattern="http_persistent_handles_ident"/>
<element pattern="http_persistent_handles_clean"/>
<element pattern="http_get"/>
<element pattern="http_head"/>
<element pattern="http_post_data"/>
<element pattern="http_post_fields"/>
<element pattern="http_put_data"/>
<element pattern="http_put_file"/>
<element pattern="http_put_stream"/>
<element pattern="http_request_method_exists"/>
<element pattern="http_request_method_name"/>
<element pattern="http_request_method_register"/>
<element pattern="http_request_method_unregister"/>
<element pattern="http_request"/>
<element pattern="http_request_body_encode"/>
<element pattern="http_redirect"/>
<element pattern="http_send_content_disposition"/>
<element pattern="http_send_content_type"/>
<element pattern="http_send_data"/>
<element pattern="http_send_file"/>
<element pattern="http_send_last_modified"/>
<element pattern="http_send_status"/>
<element pattern="http_send_stream"/>
<element pattern="http_throttle"/>
<element pattern="http_build_str"/>
<element pattern="http_build_url"/>
<element pattern="hw_array2objrec"/>
<element pattern="hw_changeobject"/>
<element pattern="hw_children"/>
<element pattern="hw_childrenobj"/>
<element pattern="hw_close"/>
<element pattern="hw_connect"/>
<element pattern="hw_connection_info"/>
<element pattern="hw_cp"/>
<element pattern="hw_deleteobject"/>
<element pattern="hw_docbyanchor"/>
<element pattern="hw_docbyanchorobj"/>
<element pattern="hw_document_attributes"/>
<element pattern="hw_document_bodytag"/>
<element pattern="hw_document_content"/>
<element pattern="hw_document_setcontent"/>
<element pattern="hw_document_size"/>
<element pattern="hw_dummy"/>
<element pattern="hw_edittext"/>
<element pattern="hw_error"/>
<element pattern="hw_errormsg"/>
<element pattern="hw_free_document"/>
<element pattern="hw_getanchors"/>
<element pattern="hw_getanchorsobj"/>
<element pattern="hw_getandlock"/>
<element pattern="hw_getchildcoll"/>
<element pattern="hw_getchildcollobj"/>
<element pattern="hw_getchilddoccoll"/>
<element pattern="hw_getchilddoccollobj"/>
<element pattern="hw_getobject"/>
<element pattern="hw_getobjectbyquery"/>
<element pattern="hw_getobjectbyquerycoll"/>
<element pattern="hw_getobjectbyquerycollobj"/>
<element pattern="hw_getobjectbyqueryobj"/>
<element pattern="hw_getparents"/>
<element pattern="hw_getparentsobj"/>
<element pattern="hw_getrellink"/>
<element pattern="hw_getremote"/>
<element pattern="hw_getremotechildren"/>
<element pattern="hw_getsrcbydestobj"/>
<element pattern="hw_gettext"/>
<element pattern="hw_getusername"/>
<element pattern="hw_identify"/>
<element pattern="hw_incollections"/>
<element pattern="hw_info"/>
<element pattern="hw_inscoll"/>
<element pattern="hw_insdoc"/>
<element pattern="hw_insertanchors"/>
<element pattern="hw_insertdocument"/>
<element pattern="hw_insertobject"/>
<element pattern="hw_mapid"/>
<element pattern="hw_modifyobject"/>
<element pattern="hw_mv"/>
<element pattern="hw_new_document"/>
<element pattern="hw_objrec2array"/>
<element pattern="hw_output_document"/>
<element pattern="hw_pconnect"/>
<element pattern="hw_pipedocument"/>
<element pattern="hw_root"/>
<element pattern="hw_setlinkroot"/>
<element pattern="hw_stat"/>
<element pattern="hw_unlock"/>
<element pattern="hw_who"/>
<element pattern="key" autocomplete_append="(array &amp;$array);">
<reference>key(array &amp;$array);
Fetch a key from an array
<b> array array </b>The array.
<b>returns</b>  mixed the index.
</reference></element>
<element pattern="langdepvalue"/>
<element pattern="value"/>
<element pattern="values"/>
<element pattern="hw_api_attribute"/>
<element pattern="checkin"/>
<element pattern="checkout"/>
<element pattern="children"/>
<element pattern="mimetype"/>
<element pattern="read"/>
<element pattern="content"/>
<element pattern="copy" autocomplete_append="($source, $dest, $context = null);">
<reference>copy($source, $dest, $context = null);
Copies file
<b> source string </b>Path to the source file.
<b> dest string </b>The destination path. If dest is a URL, the
copy operation may fail if the wrapper does not support overwriting of
existing files.
If the destination file already exists, it will be overwritten.
<b> context resource[optional] </b>A valid context resource created with 
stream_context_create.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="dbstat"/>
<element pattern="dcstat"/>
<element pattern="dstanchors"/>
<element pattern="dstofsrcanchor"/>
<element pattern="count" autocomplete_append="($var, $mode = null);">
<reference>count($var, $mode = null);
Count elements in an array, or properties in an object
<b> var mixed </b>The array.
<b> mode int[optional] </b>If the optional mode parameter is set to
COUNT_RECURSIVE (or 1), count
will recursively count the array. This is particularly useful for
counting all the elements of a multidimensional array. The default
value for mode is 0.
count does not detect infinite recursion.
<b>returns</b>  int the number of elements in var, which is
typically an array, since anything else will have one
element.
If var is not an array or an object with
implemented Countable interface,
1 will be returned.
There is one exception, if var is &amp;null;,
0 will be returned.
count may return 0 for a variable that isn't set,
but it may also return 0 for a variable that has been initialized with an
empty array. Use isset to test if a variable is set.
</reference></element>
<element pattern="reason"/>
<element pattern="find"/>
<element pattern="ftstat"/>
<element pattern="hwapi_hgcsp"/>
<element pattern="hwstat"/>
<element pattern="identify"/>
<element pattern="info"/>
<element pattern="insert"/>
<element pattern="insertanchor"/>
<element pattern="insertcollection"/>
<element pattern="insertdocument"/>
<element pattern="link" autocomplete_append="($target, $link);">
<reference>link($target, $link);
Create a hard link
<b> target string </b>Target of the link.
<b> link string </b>The link name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="lock"/>
<element pattern="move"/>
<element pattern="hw_api_content"/>
<element pattern="assign"/>
<element pattern="attreditable"/>
<element pattern="count" autocomplete_append="($var, $mode = null);">
<reference>count($var, $mode = null);
Count elements in an array, or properties in an object
<b> var mixed </b>The array.
<b> mode int[optional] </b>If the optional mode parameter is set to
COUNT_RECURSIVE (or 1), count
will recursively count the array. This is particularly useful for
counting all the elements of a multidimensional array. The default
value for mode is 0.
count does not detect infinite recursion.
<b>returns</b>  int the number of elements in var, which is
typically an array, since anything else will have one
element.
If var is not an array or an object with
implemented Countable interface,
1 will be returned.
There is one exception, if var is &amp;null;,
0 will be returned.
count may return 0 for a variable that isn't set,
but it may also return 0 for a variable that has been initialized with an
empty array. Use isset to test if a variable is set.
</reference></element>
<element pattern="insert"/>
<element pattern="hw_api_object"/>
<element pattern="remove"/>
<element pattern="title"/>
<element pattern="value"/>
<element pattern="object"/>
<element pattern="objectbyanchor"/>
<element pattern="parents"/>
<element pattern="description"/>
<element pattern="type"/>
<element pattern="remove"/>
<element pattern="replace"/>
<element pattern="setcommittedversion"/>
<element pattern="srcanchors"/>
<element pattern="srcsofdst"/>
<element pattern="unlock"/>
<element pattern="user"/>
<element pattern="userlist"/>
<element pattern="locale_get_default"/>
<element pattern="locale_set_default"/>
<element pattern="db2_autocommit" autocomplete_append="($connection, $value = null);">
<reference>db2_autocommit($connection, $value = null);
Returns or sets the AUTOCOMMIT state for a database connection
<b> connection resource </b>A valid database connection resource variable as returned from
db2_connect or db2_pconnect.
<b> value bool[optional] </b>One of the following constants: 
DB2_AUTOCOMMIT_OFF
Turns AUTOCOMMIT off.
<b>returns</b>  mixed When db2_autocommit receives only the
connection parameter, it returns the current state
of AUTOCOMMIT for the requested connection as an integer value. A value of
0 indicates that AUTOCOMMIT is off, while a value of 1 indicates that
AUTOCOMMIT is on.
When db2_autocommit receives both the
connection parameter and
autocommit parameter, it attempts to set the
AUTOCOMMIT state of the requested connection to the corresponding state.
Returns true on success or false on failure.
</reference></element>
<element pattern="db2_bind_param" autocomplete_append="($stmt, $parameter_number, $variable_name, $parameter_type = null, $data_type = null, $precision = null, $scale = null);">
<reference>db2_bind_param($stmt, $parameter_number, $variable_name, $parameter_type = null, $data_type = null, $precision = null, $scale = null);
Binds a PHP variable to an SQL statement parameter
<b> stmt resource </b>A prepared statement returned from db2_prepare.
<b> parameter_number int </b><b> variable_name string </b><b> parameter_type int[optional] </b><b> data_type int[optional] </b><b> precision int[optional] </b>Specifies the precision with which the variable should be bound to the
database. This parameter can also be used for retrieving XML output values 
from stored procedures. A non-negative value specifies the maximum size of 
the XML data that will be retrieved from the database. If this parameter 
is not used, a default of 1MB will be assumed for retrieving the XML 
output value from the stored procedure.
<b> scale int[optional] </b>Specifies the scale with which the variable should be bound to the
database.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_client_info" autocomplete_append="($connection);">
<reference>db2_client_info($connection);
Returns an object with properties that describe the DB2 database client
<b> connection resource </b>Specifies an active DB2 client connection.
<b>returns</b>  object an object on a successful call. Returns false on failure.
</reference></element>
<element pattern="db2_close" autocomplete_append="($connection);">
<reference>db2_close($connection);
Closes a database connection
<b> connection resource </b>Specifies an active DB2 client connection.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_column_privileges" autocomplete_append="($connection, $qualifier = null, $schema = null, $table_name = null, $column_name = null);">
<reference>db2_column_privileges($connection, $qualifier = null, $schema = null, $table_name = null, $column_name = null);
Returns a result set listing the columns and associated privileges for a table
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string[optional] </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string[optional] </b>The schema which contains the tables. To match all schemas, pass &amp;null;
or an empty string.
<b> table_name string[optional] </b><b> column_name string[optional] </b><b>returns</b>  resource a statement resource with a result set containing rows describing
the column privileges for columns matching the specified parameters.
The rows are composed of the following columns:

TABLE_CAT Name of the catalog. The value is NULL if this table does not
have catalogs.

TABLE_SCHEM Name of the schema.

TABLE_NAME Name of the table or view.

COLUMN_NAME Name of the column.

GRANTOR Authorization ID of the user who granted the privilege.

GRANTEE Authorization ID of the user to whom the privilege was granted.

PRIVILEGE The privilege for the column.

IS_GRANTABLE Whether the GRANTEE is permitted to grant this privilege to
other users
</reference></element>
<element pattern="db2_columns" autocomplete_append="($connection, $qualifier = null, $schema = null, $table_name = null, $column_name = null);">
<reference>db2_columns($connection, $qualifier = null, $schema = null, $table_name = null, $column_name = null);
Returns a result set listing the columns and associated metadata for a table
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string[optional] </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string[optional] </b>The schema which contains the tables. To match all schemas, pass
'%'.
<b> table_name string[optional] </b><b> column_name string[optional] </b>
<b>returns</b>  resource a statement resource with a result set containing rows describing
the columns matching the specified parameters.

The rows are composed of the following columns:

TABLE_CAT Name of the catalog. The value is NULL if this table does not
have catalogs.

TABLE_SCHEM Name of the schema.

TABLE_NAME Name of the table or view.

COLUMN_NAME Name of the column.

DATA_TYPE The SQL data type for the column represented as an integer value.

TYPE_NAME A string representing the data type for the column.

COLUMN_SIZE An integer value representing the size of the column.

BUFFER_LENGTH Maximum number of bytes necessary to store data from this column.

DECIMAL_DIGITS The scale of the column, or &amp;null; where scale is not applicable.

NUM_PREC_RADIX An integer value of either 10 (representing
an exact numeric data type), 2 (representing an
approximate numeric data type), or &amp;null; (representing a data type for
which radix is not applicable).

NULLABLE An integer value representing whether the column is nullable or
not.

REMARKS Description of the column.

COLUMN_DEF Default value for the column.

SQL_DATA_TYPE An integer value representing the size of the column.

SQL_DATETIME_SUB Returns an integer value representing a datetime subtype code,
or &amp;null; for SQL data types to which this does not apply.

CHAR_OCTET_LENGTH Maximum length in octets for a character data type column, which
matches COLUMN_SIZE for single-byte character set data, or &amp;null; for
non-character data types.

ORDINAL_POSITION The 1-indexed position of the column in the table.

IS_NULLABLE A string value where 'YES' means that the column is nullable and
'NO' means that the column is not nullable.
</reference></element>
<element pattern="db2_commit" autocomplete_append="($connection);">
<reference>db2_commit($connection);
Commits a transaction
<b> connection resource </b>A valid database connection resource variable as returned from
db2_connect or db2_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_conn_error" autocomplete_append="($connection = null);">
<reference>db2_conn_error($connection = null);
Returns a string containing the SQLSTATE returned by the last connection attempt
<b> connection resource[optional] </b>A connection resource associated with a connection that initially
succeeded, but which over time became invalid.
<b>returns</b>  string the SQLSTATE value resulting from a failed connection attempt.
Returns an empty string if there is no error associated with the last
connection attempt.
</reference></element>
<element pattern="db2_conn_errormsg" autocomplete_append="($connection = null);">
<reference>db2_conn_errormsg($connection = null);
Returns the last connection error message and SQLCODE value
<b> connection resource[optional] </b>A connection resource associated with a connection that initially
succeeded, but which over time became invalid.
<b>returns</b>  string a string containing the error message and SQLCODE value resulting
from a failed connection attempt. If there is no error associated with the last
connection attempt, db2_conn_errormsg returns an empty
string.
</reference></element>
<element pattern="db2_connect" autocomplete_append="($database, $username, $password, array $options = null);">
<reference>db2_connect($database, $username, $password, array $options = null);
Returns a connection to a database
<b> database string </b>For a cataloged connection to a database, database
represents the database alias in the DB2 client catalog.
For an uncataloged connection to a database, 
database represents a complete connection
string in the following format:
DATABASE=database;HOSTNAME=hostname;PORT=port;PROTOCOL=TCPIP;UID=username;PWD=password;
where the parameters represent the following values:
database
The name of the database.
<b> username string </b>The username with which you are connecting to the database.
For uncataloged connections, you must pass a &amp;null; value or empty
string.
<b> password string </b>The password with which you are connecting to the database.
For uncataloged connections, you must pass a &amp;null; value or empty
string.
<b> options array[optional] </b>An associative array of connection options that affect the behavior
of the connection, where valid array keys include:
autocommit
Passing the DB2_AUTOCOMMIT_ON value turns
autocommit on for this connection handle.
Passing the DB2_AUTOCOMMIT_OFF value turns
autocommit off for this connection handle.
<b>returns</b>  resource a connection handle resource if the connection attempt is
successful. If the connection attempt fails, db2_connect
returns false.
</reference></element>
<element pattern="db2_cursor_type" autocomplete_append="($stmt);">
<reference>db2_cursor_type($stmt);
Returns the cursor type used by a statement resource
<b> stmt resource </b>A valid statement resource.
<b>returns</b>  int either DB2_FORWARD_ONLY if the statement
resource uses a forward-only cursor or DB2_SCROLLABLE if
the statement resource uses a scrollable cursor.
</reference></element>
<element pattern="db2_escape_string" autocomplete_append="($string_literal);">
<reference>db2_escape_string($string_literal);
Used to escape certain characters
<b> string_literal string </b>The string that contains special characters that need to be modified. 
Characters that are prepended with a backslash are \x00, 
\n, \r, \, 
', " and \x1a.
<b>returns</b>  string string_literal with the special characters 
noted above prepended with backslashes.
</reference></element>
<element pattern="db2_exec" autocomplete_append="($connection, $statement, array $options = null);">
<reference>db2_exec($connection, $statement, array $options = null);
Executes an SQL statement directly
<b> connection resource </b>A valid database connection resource variable as returned from
db2_connect or db2_pconnect.
<b> statement string </b>An SQL statement. The statement cannot contain any parameter markers.
<b> options array[optional] </b>An associative array containing statement options. You can use this
parameter to request a scrollable cursor on database servers that
support this functionality.
cursor
Passing the DB2_FORWARD_ONLY value requests a
forward-only cursor for this SQL statement. This is the default
type of cursor, and it is supported by all database servers. It is
also much faster than a scrollable cursor.
Passing the DB2_SCROLLABLE value requests a
scrollable cursor for this SQL statement. This type of cursor
enables you to fetch rows non-sequentially from the database
server. However, it is only supported by DB2 servers, and is much
slower than forward-only cursors.
<b>returns</b>  resource a statement resource if the SQL statement was issued successfully,
or false if the database failed to execute the SQL statement.
</reference></element>
<element pattern="db2_execute" autocomplete_append="($stmt, array $parameters = null);">
<reference>db2_execute($stmt, array $parameters = null);
Executes a prepared SQL statement
<b> stmt resource </b>A prepared statement returned from db2_prepare.
<b> parameters array[optional] </b>An array of input parameters matching any parameter markers contained
in the prepared statement.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_fetch_array" autocomplete_append="($stmt, $row_number = null);">
<reference>db2_fetch_array($stmt, $row_number = null);
Returns an array, indexed by column position, representing a row in a result set
<b> stmt resource </b>A valid stmt resource containing a result set.
<b> row_number int[optional] </b>Requests a specific 1-indexed row from the result set. Passing this
parameter results in a PHP warning if the result set uses a
forward-only cursor.
<b>returns</b>  array a 0-indexed array with column values indexed by the column position
representing the next or requested row in the result set. Returns false if
there are no rows left in the result set, or if the row requested by
row_number does not exist in the result set.
</reference></element>
<element pattern="db2_fetch_assoc" autocomplete_append="($stmt, $row_number = null);">
<reference>db2_fetch_assoc($stmt, $row_number = null);
Returns an array, indexed by column name, representing a row in a result set
<b> stmt resource </b>A valid stmt resource containing a result set.
<b> row_number int[optional] </b>Requests a specific 1-indexed row from the result set. Passing this
parameter results in a PHP warning if the result set uses a
forward-only cursor.
<b>returns</b>  array an associative array with column values indexed by the column name
representing the next or requested row in the result set. Returns false if
there are no rows left in the result set, or if the row requested by
row_number does not exist in the result set.
</reference></element>
<element pattern="db2_fetch_both" autocomplete_append="($stmt, $row_number = null);">
<reference>db2_fetch_both($stmt, $row_number = null);
Returns an array, indexed by both column name and position, representing a row in a result set
<b> stmt resource </b>A valid stmt resource containing a result set.
<b> row_number int[optional] </b>Requests a specific 1-indexed row from the result set. Passing this
parameter results in a PHP warning if the result set uses a
forward-only cursor.
<b>returns</b>  array an associative array with column values indexed by both the column
name and 0-indexed column number. The array represents the next or
requested row in the result set. Returns false if there are no rows left
in the result set, or if the row requested by
row_number does not exist in the result set.
</reference></element>
<element pattern="db2_fetch_object" autocomplete_append="($stmt, $row_number = null);">
<reference>db2_fetch_object($stmt, $row_number = null);
Returns an object with properties representing columns in the fetched row
<b> stmt resource </b>A valid stmt resource containing a result set.
<b> row_number int[optional] </b>Requests a specific 1-indexed row from the result set. Passing this
parameter results in a PHP warning if the result set uses a
forward-only cursor.
<b>returns</b>  object an object representing a single row in the result set. The
properties of the object map to the names of the columns in the result set.
The IBM DB2, Cloudscape, and Apache Derby database servers typically fold
column names to upper-case, so the object properties will reflect that case. 
If your SELECT statement calls a scalar function to modify the value
of a column, the database servers return the column number as the name of
the column in the result set. If you prefer a more descriptive column name
and object property, you can use the AS clause to assign a name to the
column in the result set.
Returns false if no row was retrieved.
</reference></element>
<element pattern="db2_fetch_row" autocomplete_append="($stmt, $row_number = null);">
<reference>db2_fetch_row($stmt, $row_number = null);
Sets the result set pointer to the next row or requested row
<b> stmt resource </b>A valid stmt resource.
<b> row_number int[optional] </b>With scrollable cursors, you can request a specific row number in the
result set. Row numbering is 1-indexed.
<b>returns</b>  bool true if the requested row exists in the result set. Returns
false if the requested row does not exist in the result set.
</reference></element>
<element pattern="db2_field_display_size" autocomplete_append="($stmt, $column);">
<reference>db2_field_display_size($stmt, $column);
Returns the maximum number of bytes required to display a column
<b> stmt resource </b>Specifies a statement resource containing a result set.
<b> column mixed </b>Specifies the column in the result set. This can either be an integer
representing the 0-indexed position of the column, or a string
containing the name of the column.
<b>returns</b>  int an integer value with the maximum number of bytes required to
display the specified column. If the column does not exist in the result
set, db2_field_display_size returns false.
</reference></element>
<element pattern="db2_field_name" autocomplete_append="($stmt, $column);">
<reference>db2_field_name($stmt, $column);
Returns the name of the column in the result set
<b> stmt resource </b>Specifies a statement resource containing a result set.
<b> column mixed </b>Specifies the column in the result set. This can either be an integer
representing the 0-indexed position of the column, or a string
containing the name of the column.
<b>returns</b>  string a string containing the name of the specified column. If the
specified column does not exist in the result
set, db2_field_name returns false.
</reference></element>
<element pattern="db2_field_num" autocomplete_append="($stmt, $column);">
<reference>db2_field_num($stmt, $column);
Returns the position of the named column in a result set
<b> stmt resource </b>Specifies a statement resource containing a result set.
<b> column mixed </b>Specifies the column in the result set. This can either be an integer
representing the 0-indexed position of the column, or a string
containing the name of the column.
<b>returns</b>  int an integer containing the 0-indexed position of the named column in
the result set. If the specified column does not exist in the result set,
db2_field_num returns false.
</reference></element>
<element pattern="db2_field_precision" autocomplete_append="($stmt, $column);">
<reference>db2_field_precision($stmt, $column);
Returns the precision of the indicated column in a result set
<b> stmt resource </b>Specifies a statement resource containing a result set.
<b> column mixed </b>Specifies the column in the result set. This can either be an integer
representing the 0-indexed position of the column, or a string
containing the name of the column.
<b>returns</b>  int an integer containing the precision of the specified column. If the
specified column does not exist in the result set,
db2_field_precision returns false.
</reference></element>
<element pattern="db2_field_scale" autocomplete_append="($stmt, $column);">
<reference>db2_field_scale($stmt, $column);
Returns the scale of the indicated column in a result set
<b> stmt resource </b>Specifies a statement resource containing a result set.
<b> column mixed </b>Specifies the column in the result set. This can either be an integer
representing the 0-indexed position of the column, or a string
containing the name of the column.
<b>returns</b>  int an integer containing the scale of the specified column. If the
specified column does not exist in the result set,
db2_field_scale returns false.
</reference></element>
<element pattern="db2_field_type" autocomplete_append="($stmt, $column);">
<reference>db2_field_type($stmt, $column);
Returns the data type of the indicated column in a result set
<b> stmt resource </b>Specifies a statement resource containing a result set.
<b> column mixed </b>Specifies the column in the result set. This can either be an integer
representing the 0-indexed position of the column, or a string
containing the name of the column.
<b>returns</b>  string a string containing the defined data type of the specified column.
If the specified column does not exist in the result set,
db2_field_type returns false.
</reference></element>
<element pattern="db2_field_width" autocomplete_append="($stmt, $column);">
<reference>db2_field_width($stmt, $column);
Returns the width of the current value of the indicated column in a result set
<b> stmt resource </b>Specifies a statement resource containing a result set.
<b> column mixed </b>Specifies the column in the result set. This can either be an integer
representing the 0-indexed position of the column, or a string
containing the name of the column.
<b>returns</b>  int an integer containing the width of the specified character or
binary data type column in a result set. If the specified column does not
exist in the result set, db2_field_width returns
false.
</reference></element>
<element pattern="db2_foreign_keys" autocomplete_append="($connection, $qualifier, $schema, $table_name);">
<reference>db2_foreign_keys($connection, $qualifier, $schema, $table_name);
Returns a result set listing the foreign keys for a table
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string </b>The schema which contains the tables. If schema
is &amp;null;, db2_foreign_keys matches the schema for
the current connection.
<b> table_name string </b>
<b>returns</b>  resource a statement resource with a result set containing rows describing
the foreign keys for the specified table.

The result set is composed of the following columns:

PKTABLE_CAT Name of the catalog for the table containing the primary key. The
value is NULL if this table does not have catalogs.

PKTABLE_SCHEM Name of the schema for the table containing the primary key.

PKTABLE_NAME Name of the table containing the primary key.

PKCOLUMN_NAME Name of the column containing the primary key.

FKTABLE_CAT Name of the catalog for the table containing the foreign key. The
value is NULL if this table does not have catalogs.

FKTABLE_SCHEM Name of the schema for the table containing the foreign key.

FKTABLE_NAME Name of the table containing the foreign key.

FKCOLUMN_NAME Name of the column containing the foreign key.

KEY_SEQ 1-indexed position of the column in the key.

UPDATE_RULE Integer value representing the action applied to the foreign key
when the SQL operation is UPDATE.

DELETE_RULE Integer value representing the action applied to the foreign key
when the SQL operation is DELETE.

FK_NAME The name of the foreign key.

PK_NAME The name of the primary key.

DEFERRABILITY An integer value representing whether the foreign key deferrability is
SQL_INITIALLY_DEFERRED, SQL_INITIALLY_IMMEDIATE, or SQL_NOT_DEFERRABLE.
</reference></element>
<element pattern="db2_free_result" autocomplete_append="($stmt);">
<reference>db2_free_result($stmt);
Frees resources associated with a result set
<b> stmt resource </b>A valid statement resource.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_free_stmt" autocomplete_append="($stmt);">
<reference>db2_free_stmt($stmt);
Frees resources associated with the indicated statement resource
<b> stmt resource </b>A valid statement resource.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_get_option" autocomplete_append="($resource, $option);">
<reference>db2_get_option($resource, $option);
Retrieves an option value for a statement resource or a connection resource
<b> resource resource </b>A valid statement resource as returned from
db2_prepare or a valid connection resource as
returned from db2_connect or
db2_pconnect.
<b> option string </b>A valid statement or connection options. The following new options are available 
as of ibm_db2 version 1.6.0. They provide useful tracking information 
that can be set during execution with db2_get_option.
Note
Prior versions of ibm_db2 do not support these new options.
When the value in each option is being set, some servers might not handle 
the entire length provided and might truncate the value.
To ensure that the data specified in each option is converted correctly 
when transmitted to a host system, use only the characters A through Z, 
0 through 9, and the underscore (_) or period (.).
userid
SQL_ATTR_INFO_USERID - A pointer to a null-terminated 
character string used to identify the client user ID sent to the host 
database server when using DB2 Connect.
Note
DB2 for z/OS and OS/390 servers support up to a length of 16 characters. 
This user-id is not to be confused with the authentication user-id, it is for 
identification purposes only and is not used for any authorization.
<b>returns</b>  string the current setting of the connection attribute provided on success 
or false on failure.
</reference></element>
<element pattern="db2_lob_read" autocomplete_append="($stmt, $colnum, $length);">
<reference>db2_lob_read($stmt, $colnum, $length);
Gets a user defined size of LOB files with each invocation
<b> stmt resource </b>A valid stmt resource containing LOB data.
<b> colnum int </b>A valid column number in the result set of the stmt resource.
<b> length int </b>The size of the LOB data to be retrieved from the stmt resource.
<b>returns</b>  string the amount of data the user specifies. Returns
false if the data cannot be retrieved.
</reference></element>
<element pattern="db2_next_result" autocomplete_append="($stmt);">
<reference>db2_next_result($stmt);
Requests the next result set from a stored procedure
<b> stmt resource </b>A prepared statement returned from db2_exec or
db2_execute.
<b>returns</b>  resource a new statement resource containing the next result set if the
stored procedure returned another result set. Returns false if the stored
procedure did not return another result set.
</reference></element>
<element pattern="db2_num_fields" autocomplete_append="($stmt);">
<reference>db2_num_fields($stmt);
Returns the number of fields contained in a result set
<b> stmt resource </b>A valid statement resource containing a result set.
<b>returns</b>  int an integer value representing the number of fields in the result
set associated with the specified statement resource. Returns false if
the statement resource is not a valid input value.
</reference></element>
<element pattern="db2_num_rows" autocomplete_append="($stmt);">
<reference>db2_num_rows($stmt);
Returns the number of rows affected by an SQL statement
<b> stmt resource </b>A valid stmt resource containing a result set.
<b>returns</b>  int the number of rows affected by the last SQL statement issued by
the specified statement handle.
</reference></element>
<element pattern="db2_pconnect" autocomplete_append="($database, $username, $password, array $options = null);">
<reference>db2_pconnect($database, $username, $password, array $options = null);
Returns a persistent connection to a database
<b> database string </b>The database alias in the DB2 client catalog.
<b> username string </b>The username with which you are connecting to the database.
<b> password string </b>The password with which you are connecting to the database.
<b> options array[optional] </b>An associative array of connection options that affect the behavior
of the connection, where valid array keys include:
autocommit
Passing the DB2_AUTOCOMMIT_ON value turns
autocommit on for this connection handle.
Passing the DB2_AUTOCOMMIT_OFF value turns
autocommit off for this connection handle.
<b>returns</b>  resource a connection handle resource if the connection attempt is
successful. db2_pconnect tries to reuse an existing
connection resource that exactly matches the
database, username, and
password parameters. If the connection attempt fails,
db2_pconnect returns false.
</reference></element>
<element pattern="db2_prepare" autocomplete_append="($connection, $statement, array $options = null);">
<reference>db2_prepare($connection, $statement, array $options = null);
Prepares an SQL statement to be executed
<b> connection resource </b>A valid database connection resource variable as returned from
db2_connect or db2_pconnect.
<b> statement string </b>An SQL statement, optionally containing one or more parameter markers..
<b> options array[optional] </b>An associative array containing statement options. You can use this
parameter to request a scrollable cursor on database servers that
support this functionality.
cursor
Passing the DB2_FORWARD_ONLY value requests a
forward-only cursor for this SQL statement. This is the default
type of cursor, and it is supported by all database servers. It is
also much faster than a scrollable cursor.
Passing the DB2_SCROLLABLE value requests a
scrollable cursor for this SQL statement. This type of cursor
enables you to fetch rows non-sequentially from the database
server. However, it is only supported by DB2 servers, and is much
slower than forward-only cursors.
<b>returns</b>  resource a statement resource if the SQL statement was successfully parsed and
prepared by the database server. Returns false if the database server
returned an error. You can determine which error was returned by calling
db2_stmt_error or db2_stmt_errormsg.
</reference></element>
<element pattern="db2_primary_keys" autocomplete_append="($connection, $qualifier, $schema, $table_name);">
<reference>db2_primary_keys($connection, $qualifier, $schema, $table_name);
Returns a result set listing primary keys for a table
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string </b>The schema which contains the tables. If schema
is &amp;null;, db2_primary_keys matches the schema for
the current connection.
<b> table_name string </b>
<b>returns</b>  resource a statement resource with a result set containing rows describing
the primary keys for the specified table.

The result set is composed of the following columns:

TABLE_CAT Name of the catalog for the table containing the primary key. The
value is NULL if this table does not have catalogs.

TABLE_SCHEM Name of the schema for the table containing the primary key.

TABLE_NAME Name of the table containing the primary key.

COLUMN_NAME Name of the column containing the primary key.

KEY_SEQ 1-indexed position of the column in the key.

PK_NAME The name of the primary key.
</reference></element>
<element pattern="db2_procedure_columns" autocomplete_append="($connection, $qualifier, $schema, $procedure, $parameter);">
<reference>db2_procedure_columns($connection, $qualifier, $schema, $procedure, $parameter);
Returns a result set listing stored procedure parameters
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string </b>The schema which contains the procedures. This parameter accepts a
search pattern containing _ and %
as wildcards.
<b> procedure string </b>The name of the procedure. This parameter accepts a
search pattern containing _ and %
as wildcards.
<b> parameter string </b>The name of the parameter. This parameter accepts a search pattern
containing _ and % as wildcards.
If this parameter is &amp;null;, all parameters for the specified stored
procedures are returned.
<b>returns</b>  resource a statement resource with a result set containing rows describing
the parameters for the stored procedures matching the specified parameters.
The rows are composed of the following columns:

PROCEDURE_CAT
The catalog that contains the procedure. The value is &amp;null; if
this table does not have catalogs.
PROCEDURE_SCHEM
Name of the schema that contains the stored procedure.
PROCEDURE_NAME
Name of the procedure.
COLUMN_NAME
Name of the parameter.
COLUMN_TYPE
An integer value representing the type of the parameter:
1 (SQL_PARAM_INPUT) Input (IN) parameter.
2 (SQL_PARAM_INPUT_OUTPUT) Input/output (INOUT) parameter.
3 (SQL_PARAM_OUTPUT) Output (OUT) parameter.
DATA_TYPE
The SQL data type for the parameter represented as an integer value.
TYPE_NAME
A string representing the data type for the parameter.
COLUMN_SIZE
An integer value representing the size of the parameter.
BUFFER_LENGTH
Maximum number of bytes necessary to store data for this parameter.
DECIMAL_DIGITS
The scale of the parameter, or &amp;null; where scale is not applicable.
NUM_PREC_RADIX
An integer value of either 10 (representing
an exact numeric data type), 2 (representing an
approximate numeric data type), or &amp;null; (representing a data type for
which radix is not applicable).
NULLABLE
An integer value representing whether the parameter is nullable
or not.
REMARKS
Description of the parameter.
COLUMN_DEF
Default value for the parameter.
SQL_DATA_TYPE
An integer value representing the size of the parameter.
SQL_DATETIME_SUB
Returns an integer value representing a datetime subtype code,
or &amp;null; for SQL data types to which this does not apply.
CHAR_OCTET_LENGTH
Maximum length in octets for a character data type parameter, which
matches COLUMN_SIZE for single-byte character set data, or &amp;null; for
non-character data types.
ORDINAL_POSITION
The 1-indexed position of the parameter in the CALL
statement.
IS_NULLABLE
A string value where 'YES' means that the parameter accepts or
returns &amp;null; values and 'NO' means that the parameter does not
accept or return &amp;null; values.
</reference></element>
<element pattern="db2_procedures" autocomplete_append="($connection, $qualifier, $schema, $procedure);">
<reference>db2_procedures($connection, $qualifier, $schema, $procedure);
Returns a result set listing the stored procedures registered in a database
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string </b>The schema which contains the procedures. This parameter accepts a
search pattern containing _ and %
as wildcards.
<b> procedure string </b>The name of the procedure. This parameter accepts a
search pattern containing _ and %
as wildcards.
<b>returns</b>  resource a statement resource with a result set containing rows describing
the stored procedures matching the specified parameters.
The rows are composed of the following columns:

PROCEDURE_CAT The catalog that contains the procedure. The value is &amp;null; if
this table does not have catalogs.

PROCEDURE_SCHEM Name of the schema that contains the stored procedure.

PROCEDURE_NAME Name of the procedure.

NUM_INPUT_PARAMS Number of input (IN) parameters for the stored procedure.

NUM_OUTPUT_PARAMS Number of output (OUT) parameters for the stored procedure.

NUM_RESULT_SETS Number of result sets returned by the stored procedure.

REMARKS Any comments about the stored procedure.

PROCEDURE_TYPE Always returns 1, indicating that the stored
procedure does not return a return value.
</reference></element>
<element pattern="db2_result" autocomplete_append="($stmt, $column);">
<reference>db2_result($stmt, $column);
Returns a single column from a row in the result set
<b> stmt resource </b>A valid stmt resource.
<b> column mixed </b>Either an integer mapping to the 0-indexed field in the result set, or
a string matching the name of the column.
<b>returns</b>  mixed the value of the requested field if the field exists in the result
set. Returns NULL if the field does not exist, and issues a warning.
</reference></element>
<element pattern="db2_rollback" autocomplete_append="($connection);">
<reference>db2_rollback($connection);
Rolls back a transaction
<b> connection resource </b>A valid database connection resource variable as returned from
db2_connect or db2_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_server_info" autocomplete_append="($connection);">
<reference>db2_server_info($connection);
Returns an object with properties that describe the DB2 database server
<b> connection resource </b>Specifies an active DB2 client connection.
<b>returns</b>  object an object on a successful call. Returns false on failure.
</reference></element>
<element pattern="db2_set_option" autocomplete_append="($resource, array $options, $type);">
<reference>db2_set_option($resource, array $options, $type);
Set options for connection or statement resources
<b> resource resource </b>A valid statement resource as returned from
db2_prepare or a valid connection resource as
returned from db2_connect or
db2_pconnect.
<b> options array </b>An associative array containing valid statement or connection
options. This parameter can be used to change autocommit values,
cursor types (scrollable or forward), and to specify the case of
the column names (lower, upper, or natural) that will appear in a
result set.
autocommit
Passing DB2_AUTOCOMMIT_ON turns
autocommit on for the specified connection resource.
Passing DB2_AUTOCOMMIT_OFF turns
autocommit off for the specified connection resource.
<b> type int </b>An integer value that specifies the type of resource that was
passed into the function. The type of resource and this value
must correspond.
Passing 1 as the value specifies that
a connection resource has been passed into the function.
Passing any integer not equal to 1 as
the value specifies that a statement resource has been
passed into the function.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="db2_special_columns" autocomplete_append="($connection, $qualifier, $schema, $table_name, $scope);">
<reference>db2_special_columns($connection, $qualifier, $schema, $table_name, $scope);
Returns a result set listing the unique row identifier columns for a table
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string </b>The schema which contains the tables.
<b> table_name string </b>The name of the table.
<b> scope int </b>Integer value representing the minimum duration for which the
unique row identifier is valid.
This can be one of the following values:

0 SQL_SCOPE_CURROW
Row identifier is valid only while the cursor is positioned
on the row.

1 SQL_SCOPE_TRANSACTION
Row identifier is valid for the duration of the
transaction.

2 SQL_SCOPE_SESSION
Row identifier is valid for the duration of the
connection.

<b>returns</b>  resource a statement resource with a result set containing rows with unique
row identifier information for a table.
The rows are composed of the following columns:

SCOPE
0 SQL_SCOPE_CURROW
Row identifier is valid only while the cursor is positioned
on the row.
1 SQL_SCOPE_TRANSACTION
Row identifier is valid for the duration of the
transaction.
2 SQL_SCOPE_SESSION
Row identifier is valid for the duration of the
connection.

COLUMN_NAME Name of the unique column.
DATA_TYPE SQL data type for the column.
TYPE_NAME Character string representation of the SQL data type for the
column.
COLUMN_SIZE An integer value representing the size of the column.
BUFFER_LENGTH Maximum number of bytes necessary to store data from this column.
DECIMAL_DIGITS The scale of the column, or &amp;null; where scale is not applicable.
NUM_PREC_RADIX An integer value of either 10 (representing
an exact numeric data type), 2 (representing an
approximate numeric data type), or &amp;null; (representing a data type for
which radix is not applicable).
PSEUDO_COLUMN Always returns 1.
</reference></element>
<element pattern="db2_statistics" autocomplete_append="($connection, $qualifier, $schema, $table_name, $unique);">
<reference>db2_statistics($connection, $qualifier, $schema, $table_name, $unique);
Returns a result set listing the index and statistics for a table
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string </b>The schema that contains the targeted table. If this parameter is
&amp;null;, the statistics and indexes are returned for the schema of the
current user.
<b> table_name string </b>The name of the table.
<b> unique bool </b>An integer value representing the type of index information to return.
0
Return only the information for unique indexes on the table.
<b>returns</b>  resource a statement resource with a result set containing rows describing
the statistics and indexes for the base tables matching the specified
parameters.
The rows are composed of the following columns:

TABLE_CAT
The catalog that contains the table. The value is &amp;null; if
this table does not have catalogs.
TABLE_SCHEM
Name of the schema that contains the table.
TABLE_NAME
Name of the table.
NON_UNIQUE
An integer value representing whether the index prohibits unique
values, or whether the row represents statistics on the table itself:
0 (SQL_FALSE) The index allows duplicate values.
1 (SQL_TRUE) The index values must be unique.
null This row is statistics information for the table itself.
INDEX_QUALIFIER
A string value representing the qualifier that would have to be
prepended to INDEX_NAME to fully qualify the index.
INDEX_NAME
A string representing the name of the index.
TYPE
An integer value representing the type of information contained in
this row of the result set:
0 (SQL_TABLE_STAT) The row contains statistics about the table itself.
1 (SQL_INDEX_CLUSTERED) The row contains information about a clustered index.
2 (SQL_INDEX_HASH) The row contains information about a hashed index.
3 (SQL_INDEX_OTHER) The row contains information about a type of index that
is neither clustered nor hashed.
ORDINAL_POSITION
The 1-indexed position of the column in the index. &amp;null; if
the row contains statistics information about the table itself.
COLUMN_NAME
The name of the column in the index. &amp;null; if the row
contains statistics information about the table itself.
ASC_OR_DESC
A if the column is sorted in ascending order,
D if the column is sorted in descending order,
&amp; null; if the row contains statistics information about the table
itself.
CARDINALITY
If the row contains information about an index, this column contains
an integer value representing the number of unique values in the
index.
If the row contains information about the table itself, this column
contains an integer value representing the number of rows in the
table.
PAGES
If the row contains information about an index, this column contains
an integer value representing the number of pages used to store the
index.
If the row contains information about the table itself, this column
contains an integer value representing the number of pages used to
store the table.
FILTER_CONDITION
Always returns &amp;null;
</reference></element>
<element pattern="db2_stmt_error" autocomplete_append="($stmt = null);">
<reference>db2_stmt_error($stmt = null);
Returns a string containing the SQLSTATE returned by an SQL statement
<b> stmt resource[optional] </b>A valid statement resource.
<b>returns</b>  string a string containing an SQLSTATE value.
</reference></element>
<element pattern="db2_stmt_errormsg" autocomplete_append="($stmt = null);">
<reference>db2_stmt_errormsg($stmt = null);
Returns a string containing the last SQL statement error message
<b> stmt resource[optional] </b>A valid statement resource.
<b>returns</b>  string a string containing the error message and SQLCODE value for the
last error that occurred issuing an SQL statement.
</reference></element>
<element pattern="db2_table_privileges" autocomplete_append="($connection, $qualifier = null, $schema = null, $table_name = null);">
<reference>db2_table_privileges($connection, $qualifier = null, $schema = null, $table_name = null);
Returns a result set listing the tables and associated privileges in a database
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string[optional] </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string[optional] </b>The schema which contains the tables. This parameter accepts a
search pattern containing _ and %
as wildcards.
<b> table_name string[optional] </b>The name of the table. This parameter accepts a search pattern
containing _ and % as wildcards.
<b>returns</b>  resource a statement resource with a result set containing rows describing
the privileges for the tables that match the specified parameters.
The rows are composed of the following columns:

TABLE_CAT
The catalog that contains the table. The value is &amp;null; if
this table does not have catalogs.
TABLE_SCHEM
Name of the schema that contains the table.
TABLE_NAME
Name of the table.
GRANTOR
Authorization ID of the user who granted the privilege.
GRANTEE
Authorization ID of the user to whom the privilege was
granted.
PRIVILEGE
The privilege that has been granted. This can be one of ALTER,
CONTROL, DELETE, INDEX, INSERT, REFERENCES, SELECT, or UPDATE.
IS_GRANTABLE
A string value of "YES" or "NO" indicating whether the grantee
can grant the privilege to other users.
</reference></element>
<element pattern="db2_tables" autocomplete_append="($connection, $qualifier = null, $schema = null, $table_name = null, $table_type = null);">
<reference>db2_tables($connection, $qualifier = null, $schema = null, $table_name = null, $table_type = null);
Returns a result set listing the tables and associated metadata in a database
<b> connection resource </b>A valid connection to an IBM DB2, Cloudscape, or Apache Derby database.
<b> qualifier string[optional] </b>A qualifier for DB2 databases running on OS/390 or z/OS servers. For
other databases, pass &amp;null; or an empty string.
<b> schema string[optional] </b>The schema which contains the tables. This parameter accepts a
search pattern containing _ and %
as wildcards.
<b> table_name string[optional] </b><b> table_type string[optional] </b><b>returns</b>  resource a statement resource with a result set containing rows describing
the tables that match the specified parameters.
The rows are composed of the following columns:

TABLE_CAT
The catalog that contains the table. The value is &amp;null; if
this table does not have catalogs.
TABLE_SCHEM
Name of the schema that contains the table.
TABLE_NAME
Name of the table.
TABLE_TYPE
Table type identifier for the table.
REMARKS
Description of the table.
</reference></element>
<element pattern="icap_close"/>
<element pattern="icap_create_calendar"/>
<element pattern="icap_delete_calendar"/>
<element pattern="icap_delete_event"/>
<element pattern="icap_fetch_event"/>
<element pattern="icap_list_alarms"/>
<element pattern="icap_list_events"/>
<element pattern="icap_open"/>
<element pattern="icap_rename_calendar"/>
<element pattern="icap_reopen"/>
<element pattern="icap_snooze"/>
<element pattern="icap_store_event"/>
<element pattern="iconv_get_encoding" autocomplete_append="($type = null);">
<reference>iconv_get_encoding($type = null);
Retrieve internal configuration variables of iconv extension
<b> type string[optional] </b>The value of the optional type can be:
all
input_encoding
output_encoding
internal_encoding
<b>returns</b>  mixed the current value of the internal configuration variable if
successful, or false on failure.
If type is omitted or set to "all",
iconv_get_encoding returns an array that
stores all these variables.
</reference></element>
<element pattern="iconv_mime_decode_headers" autocomplete_append="($encoded_headers, $mode = null, $charset = null);">
<reference>iconv_mime_decode_headers($encoded_headers, $mode = null, $charset = null);
Decodes multiple &lt;literal&gt;MIME&lt;/literal&gt; header fields at once
<b> encoded_headers string </b>The encoded headers, as a string.
<b> mode int[optional] </b>mode determines the behaviour in the event
iconv_mime_decode_headers encounters a malformed
MIME header field. You can specify any combination
of the following bitmasks.

Bitmasks acceptable to iconv_mime_decode_headers
1 ICONV_MIME_DECODE_STRICT
If set, the given header is decoded in full conformance with the
standards defined in RFC2047.
This option is disabled by default because there are a lot of
broken mail user agents that don't follow the specification and don't
produce correct MIME headers.
2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR
If set, iconv_mime_decode_headers
attempts to ignore any grammatical errors and continue to process
a given header.
<b> charset string[optional] </b>The optional charset parameter specifies the
character set to represent the result by. If omitted,
iconv.internal_encoding
will be used.
<b>returns</b>  array 
</reference></element>
<element pattern="iconv_mime_decode" autocomplete_append="($encoded_header, $mode = null, $charset = null);">
<reference>iconv_mime_decode($encoded_header, $mode = null, $charset = null);
Decodes a &lt;literal&gt;MIME&lt;/literal&gt; header field
<b> encoded_header string </b>The encoded header, as a string.
<b> mode int[optional] </b>mode determines the behaviour in the event
iconv_mime_decode encounters a malformed
MIME header field. You can specify any combination
of the following bitmasks.

Bitmasks acceptable to iconv_mime_decode
1 ICONV_MIME_DECODE_STRICT
If set, the given header is decoded in full conformance with the
standards defined in RFC2047.
This option is disabled by default because there are a lot of
broken mail user agents that don't follow the specification and don't
produce correct MIME headers.
2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR
If set, iconv_mime_decode_headers
attempts to ignore any grammatical errors and continue to process
a given header.
<b> charset string[optional] </b>The optional charset parameter specifies the
character set to represent the result by. If omitted,
iconv.internal_encoding
will be used.
<b>returns</b>  string a decoded MIME field on success,
or false if an error occurs during the decoding.
</reference></element>
<element pattern="iconv_mime_encode" autocomplete_append="($field_name, $field_value, array $preferences = null);">
<reference>iconv_mime_encode($field_name, $field_value, array $preferences = null);
Composes a &lt;literal&gt;MIME&lt;/literal&gt; header field
<b> field_name string </b>The field name.
<b> field_value string </b>The field value.
<b> preferences array[optional] </b>You can control the behaviour of iconv_mime_encode
by specifying an associative array that contains configuration items
to the optional third parameter preferences.
The items supported by iconv_mime_encode are
listed below. Note that item names are treated case-sensitive.

Configuration items supported by iconv_mime_encode

scheme string
Specifies the method to encode a field value by. The value of
this item may be either "B" or "Q", where "B" stands for
base64 encoding scheme and "Q" stands for
quoted-printable encoding scheme.

input-charset string
Specifies the character set in which the first parameter
field_name and the second parameter
field_value are presented. If not given,
iconv_mime_encode assumes those parameters
are presented to it in the
iconv.internal_encoding ini setting.

output-charset string
Specifies the character set to use to compose the
MIME header. If not given, the same value as
input-charset will be used.

line-length integer
Specifies the maximum length of the header lines. The resulting
header is "folded" to a set of multiple lines in case
the resulting header field would be longer than the value of this
parameter, according to
RFC2822 - Internet Message Format.
If not given, the length will be limited to 76 characters.

line-break-chars string
Specifies the sequence of characters to append to each line
as an end-of-line sign when "folding" is performed on a long header
field. If not given, this defaults to "\r\n"
(CR LF). Note that
this parameter is always treated as an ASCII string regardless
of the value of input-charset.

<b>returns</b>  string an encoded MIME field on success,
or false if an error occurs during the encoding.
</reference></element>
<element pattern="iconv_set_encoding" autocomplete_append="($type, $charset);">
<reference>iconv_set_encoding($type, $charset);
Set current setting for character encoding conversion
<b> type string </b>The value of type can be any one of those:
input_encoding
output_encoding
internal_encoding
<b> charset string </b>The character set.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="iconv_strlen" autocomplete_append="($str, $charset = null);">
<reference>iconv_strlen($str, $charset = null);
Returns the character count of string
<b> str string </b>The string.
<b> charset string[optional] </b>If charset parameter is omitted,
str is assumed to be encoded in
iconv.internal_encoding.
<b>returns</b>  int the character count of str, as an integer.
</reference></element>
<element pattern="iconv_strpos" autocomplete_append="($haystack, $needle, $offset = null, $charset = null);">
<reference>iconv_strpos($haystack, $needle, $offset = null, $charset = null);
Finds position of first occurrence of a needle within a haystack
<b> haystack string </b>The entire string.
<b> needle string </b>The searched substring.
<b> offset int[optional] </b>The optional offset parameter specifies
the position from which the search should be performed.
<b> charset string[optional] </b>If charset parameter is omitted,
string are assumed to be encoded in
iconv.internal_encoding.
<b>returns</b>  int the numeric position of the first occurrence of
needle in haystack.
If needle is not found,
iconv_strpos will return false.
</reference></element>
<element pattern="iconv_strrpos" autocomplete_append="($haystack, $needle, $charset = null);">
<reference>iconv_strrpos($haystack, $needle, $charset = null);
Finds the last occurrence of a needle within a haystack
<b> haystack string </b>The entire string.
<b> needle string </b>The searched substring.
<b> charset string[optional] </b>If charset parameter is omitted,
string are assumed to be encoded in
iconv.internal_encoding.
<b>returns</b>  int the numeric position of the last occurrence of
needle in haystack.
The characters are counted
on the basis of the specified character set charset.
If needle is not found,
iconv_strrpos will return false.
</reference></element>
<element pattern="iconv_substr" autocomplete_append="($str, $offset);">
<reference>iconv_substr($str, $offset);
Cut out part of a string
<b> str string </b>The original string.
<b> offset int </b>If offset is non-negative,
iconv_substr cuts the portion out of
str beginning at offset'th
character, counting from zero.
If offset is negative,
iconv_substr cuts out the portion beginning
at the position, offset characters
away from the end of str.
<b>returns</b>  string the portion of str specified by the
offset and length parameters.
If str is shorter than offset
characters long, false will be returned.
</reference></element>
<element pattern="iconv" autocomplete_append="($in_charset, $out_charset, $str);">
<reference>iconv($in_charset, $out_charset, $str);
Convert string to requested character encoding
<b> in_charset string </b>The input charset.
<b> out_charset string </b>The output charset.
If you append the string //TRANSLIT to
out_charset transliteration is activated. This
means that when a character can't be represented in the target charset,
it can be approximated through one or several similarly looking
characters. If you append the string //IGNORE,
characters that cannot be represented in the target charset are silently
discarded. Otherwise, str is cut from the first
illegal character.
<b> str string </b>The string to be converted.
<b>returns</b>  string the converted string or false on failure.
</reference></element>
<element pattern="ob_iconv_handler" autocomplete_append="($contents, $status);">
<reference>ob_iconv_handler($contents, $status);
Convert character encoding as output buffer handler
<b> contents string </b><b> status int </b><b>returns</b>  string See ob_start for information about this handler
return values.
</reference></element>
<element pattern="id3_get_frame_long_name"/>
<element pattern="id3_get_frame_short_name"/>
<element pattern="id3_get_genre_id"/>
<element pattern="id3_get_genre_list"/>
<element pattern="id3_get_genre_name"/>
<element pattern="id3_get_tag"/>
<element pattern="id3_get_version"/>
<element pattern="id3_remove_tag"/>
<element pattern="id3_set_tag"/>
<element pattern="iis_add_server"/>
<element pattern="iis_get_dir_security"/>
<element pattern="iis_get_script_map"/>
<element pattern="iis_get_server_by_comment"/>
<element pattern="iis_get_server_by_path"/>
<element pattern="iis_get_server_rights"/>
<element pattern="iis_get_service_state"/>
<element pattern="iis_remove_server"/>
<element pattern="iis_set_app_settings"/>
<element pattern="iis_set_dir_security"/>
<element pattern="iis_set_script_map"/>
<element pattern="iis_set_server_rights"/>
<element pattern="iis_start_server"/>
<element pattern="iis_start_service"/>
<element pattern="iis_stop_server"/>
<element pattern="iis_stop_service"/>
<element pattern="gd_info" autocomplete_append="();">
<reference>gd_info();
Retrieve information about the currently installed GD library
<b>returns</b>  array an associative array.

Elements of array returned by gd_info
GD Version
string value describing the installed libgd version.
Freetype Support
boolean value. true if Freetype Support is installed.
Freetype Linkage
string value describing the way in which
Freetype was linked. Expected values are: 'with freetype',
'with TTF library', and 'with unknown library'. This element will
only be defined if Freetype Support evaluated to true.
T1Lib Support
boolean value. true if T1Lib support is included.
GIF Read Support
boolean value. true if support for reading GIF
images is included.
GIF Create Support
boolean value. true if support for creating GIF
images is included.
JPG Support
boolean value. true if JPG support is included.
PNG Support
boolean value. true if PNG support is included.
WBMP Support
boolean value. true if WBMP support is included.
XBM Support
boolean value. true if XBM support is included.
</reference></element>
<element pattern="getimagesize" autocomplete_append="($filename, array &amp;$imageinfo = null);">
<reference>getimagesize($filename, array &amp;$imageinfo = null);
Get the size of an image
<b> filename string </b>This parameter specifies the file you wish to retrieve information
about. It can reference a local file or (configuration permitting) a
remote file using one of the supported streams. 
<b> imageinfo array[optional] </b>This optional parameter allows you to extract some extended
information from the image file. Currently, this will return the
different JPG APP markers as an associative array.
Some programs use these APP markers to embed text information in 
images. A very common one is to embed 
IPTC information in the APP13 marker.
You can use the iptcparse function to parse the
binary APP13 marker into something readable.
<b>returns</b>  array an array with 7 elements.
Index 0 and 1 contains respectively the width and the height of the image.
Some formats may contain no image or may contain multiple images. In these
cases, getimagesize might not be able to properly
determine the image size. getimagesize will return
zero for width and height in these cases.
Index 2 is one of the IMAGETYPE_XXX constants indicating 
the type of the image.
Index 3 is a text string with the correct 
height="yyy" width="xxx" string that can be used
directly in an IMG tag.
mime is the correspondant MIME type of the image.
This information can be used to deliver images with correct the HTTP 
Content-type header:
getimagesize() and MIME types
]]&gt;
channels will be 3 for RGB pictures and 4 for CMYK
pictures.
bits is the number of bits for each color.
For some image types, the presence of channels and
bits values can be a bit
confusing. As an example, GIF always uses 3 channels
per pixel, but the number of bits per pixel cannot be calculated for an
animated GIF with a global color table.
On failure, false is returned.
</reference></element>
<element pattern="image_type_to_extension" autocomplete_append="($imagetype, $include_dot = null);">
<reference>image_type_to_extension($imagetype, $include_dot = null);
Get file extension for image type
<b> imagetype int </b>One of the IMAGETYPE_XXX constant.
<b> include_dot bool[optional] </b>Whether to prepend a dot to the extension or not. Default to true.
<b>returns</b>  string A string with the extension corresponding to the given image type.
</reference></element>
<element pattern="image_type_to_mime_type" autocomplete_append="($imagetype);">
<reference>image_type_to_mime_type($imagetype);
Get Mime-Type for image-type returned by getimagesize,
exif_read_data, exif_thumbnail, exif_imagetype
<b> imagetype int </b>One of the IMAGETYPE_XXX constants.
<b>returns</b>  string The returned values are as follows

Returned values Constants
IMAGETYPE_GIF image/gif
IMAGETYPE_JPEG image/jpeg
IMAGETYPE_PNG image/png
IMAGETYPE_SWF application/x-shockwave-flash
IMAGETYPE_PSD image/psd
IMAGETYPE_BMP image/bmp
IMAGETYPE_TIFF_II (intel byte order) image/tiff
IMAGETYPE_TIFF_MM (motorola byte order) image/tiff
IMAGETYPE_JPC application/octet-stream
IMAGETYPE_JP2 image/jp2
IMAGETYPE_JPX application/octet-stream
IMAGETYPE_JB2 application/octet-stream
IMAGETYPE_SWC application/x-shockwave-flash
IMAGETYPE_IFF image/iff
IMAGETYPE_WBMP image/vnd.wap.wbmp
IMAGETYPE_XBM image/xbm
IMAGETYPE_ICO image/vnd.microsoft.icon
</reference></element>
<element pattern="image2wbmp" autocomplete_append="($image, $filename = null, $threshold = null);">
<reference>image2wbmp($image, $filename = null, $threshold = null);
Output image to browser or file
<b> image resource </b><b> filename string[optional] </b>Path to the saved file. If not given, the raw image stream will be
outputed directly.
<b> threshold int[optional] </b>Threshold value, between 0 and 255 (inclusive).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagealphablending" autocomplete_append="($image, $blendmode);">
<reference>imagealphablending($image, $blendmode);
Set the blending mode for an image
<b> image resource </b><b> blendmode bool </b>Whether to enable the blending mode or not. Default to false.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imageantialias" autocomplete_append="($image, $enabled);">
<reference>imageantialias($image, $enabled);
Should antialias functions be used or not
<b> image resource </b><b> enabled bool </b>Whether to enable antialiasing or not.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagearc" autocomplete_append="($image, $cx, $cy, $width, $height, $start, $end, $color);">
<reference>imagearc($image, $cx, $cy, $width, $height, $start, $end, $color);
Draws an arc
<b> image resource </b><b> cx int </b>x-coordinate of the center.
<b> cy int </b>y-coordinate of the center.
<b> width int </b>The arc width.
<b> height int </b>The arc height.
<b> start int </b>The arc start angle, in degrees.
<b> end int </b>The arc end angle, in degrees.
0&amp;deg; is located at the three-o'clock position, and the arc is drawn
clockwise.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagechar" autocomplete_append="($image, $font, $x, $y, $c, $color);">
<reference>imagechar($image, $font, $x, $y, $c, $color);
Draw a character horizontally
<b> image resource </b><b> font int </b><b> x int </b>x-coordinate of the start.
<b> y int </b>y-coordinate of the start.
<b> c string </b>The character to draw.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecharup" autocomplete_append="($image, $font, $x, $y, $c, $color);">
<reference>imagecharup($image, $font, $x, $y, $c, $color);
Draw a character vertically
<b> image resource </b><b> font int </b><b> x int </b>x-coordinate of the start.
<b> y int </b>y-coordinate of the start.
<b> c string </b>The character to draw.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecolorallocate" autocomplete_append="($image, $red, $green, $blue);">
<reference>imagecolorallocate($image, $red, $green, $blue);
Allocate a color for an image
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b>returns</b>  int A color identifier or false if the allocation failed.
</reference></element>
<element pattern="imagecolorallocatealpha" autocomplete_append="($image, $red, $green, $blue, $alpha);">
<reference>imagecolorallocatealpha($image, $red, $green, $blue, $alpha);
Allocate a color for an image
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b> alpha int </b>A value between 0 and 127.
0 indicates completely opaque while 
127 indicates completely transparent.
<b>returns</b>  int A color identifier or false if the allocation failed.
</reference></element>
<element pattern="imagecolorat" autocomplete_append="($image, $x, $y);">
<reference>imagecolorat($image, $x, $y);
Get the index of the color of a pixel
<b> image resource </b><b> x int </b>x-coordinate of the point.
<b> y int </b>y-coordinate of the point.
<b>returns</b>  int the index of the color.
</reference></element>
<element pattern="imagecolorclosest" autocomplete_append="($image, $red, $green, $blue);">
<reference>imagecolorclosest($image, $red, $green, $blue);
Get the index of the closest color to the specified color
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b>returns</b>  int the index of the closest color, in the palette of the image, to
the specified one
</reference></element>
<element pattern="imagecolorclosestalpha" autocomplete_append="($image, $red, $green, $blue, $alpha);">
<reference>imagecolorclosestalpha($image, $red, $green, $blue, $alpha);
Get the index of the closest color to the specified color + alpha
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b> alpha int </b>A value between 0 and 127.
0 indicates completely opaque while 
127 indicates completely transparent.
<b>returns</b>  int the index of the closest color in the palette.
</reference></element>
<element pattern="imagecolorclosesthwb" autocomplete_append="($image, $red, $green, $blue);">
<reference>imagecolorclosesthwb($image, $red, $green, $blue);
Get the index of the color which has the hue, white and blackness
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b>returns</b>  int an integer with the index of the color which has 
the hue, white and blackness nearest the given color.
</reference></element>
<element pattern="imagecolordeallocate" autocomplete_append="($image, $color);">
<reference>imagecolordeallocate($image, $color);
De-allocate a color for an image
<b> image resource </b><b> color int </b>The color identifier.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecolorexact" autocomplete_append="($image, $red, $green, $blue);">
<reference>imagecolorexact($image, $red, $green, $blue);
Get the index of the specified color
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b>returns</b>  int the index of the specified color in the palette, or -1 if the
color does not exist.
</reference></element>
<element pattern="imagecolorexactalpha" autocomplete_append="($image, $red, $green, $blue, $alpha);">
<reference>imagecolorexactalpha($image, $red, $green, $blue, $alpha);
Get the index of the specified color + alpha
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b> alpha int </b>A value between 0 and 127.
0 indicates completely opaque while 
127 indicates completely transparent.
<b>returns</b>  int the index of the specified color+alpha in the palette of the
image, or -1 if the color does not exist in the image's palette.
</reference></element>
<element pattern="imagecolormatch" autocomplete_append="($image1, $image2);">
<reference>imagecolormatch($image1, $image2);
Makes the colors of the palette version of an image more closely match the true color version
<b> image1 resource </b>A truecolor image link resource.
<b> image2 resource </b>A palette image link resource pointing to an image that has the same
size as image1.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecolorresolve" autocomplete_append="($image, $red, $green, $blue);">
<reference>imagecolorresolve($image, $red, $green, $blue);
Get the index of the specified color or its closest possible alternative
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b>returns</b>  int a color index.
</reference></element>
<element pattern="imagecolorresolvealpha" autocomplete_append="($image, $red, $green, $blue, $alpha);">
<reference>imagecolorresolvealpha($image, $red, $green, $blue, $alpha);
Get the index of the specified color + alpha or its closest possible alternative
<b> image resource </b><b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b> alpha int </b>A value between 0 and 127.
0 indicates completely opaque while 
127 indicates completely transparent.
<b>returns</b>  int a color index.
</reference></element>
<element pattern="imagecolorset" autocomplete_append="($image, $index, $red, $green, $blue);">
<reference>imagecolorset($image, $index, $red, $green, $blue);
Set the color for the specified palette index
<b> image resource </b><b> index int </b>An index in the palette.
<b> red int </b>Value of red component.
<b> green int </b>Value of green component.
<b> blue int </b>Value of blue component.
<b>returns</b>  void 
</reference></element>
<element pattern="imagecolorsforindex" autocomplete_append="($image, $index);">
<reference>imagecolorsforindex($image, $index);
Get the colors for an index
<b> image resource </b><b> index int </b>The color index.
<b>returns</b>  array an associative array with red, green, blue and alpha keys that
contain the appropriate values for the specified color index.
</reference></element>
<element pattern="imagecolorstotal" autocomplete_append="($image);">
<reference>imagecolorstotal($image);
Find out the number of colors in an image's palette
<b> image resource </b><b>returns</b>  int the number of colors in the specified image's palette or 0 for
truecolor images.
</reference></element>
<element pattern="imagecolortransparent" autocomplete_append="($image, $color = null);">
<reference>imagecolortransparent($image, $color = null);
Define a color as transparent
<b> image resource </b><b> color int[optional] </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  int The identifier of the new (or current, if none is specified)
transparent color is returned.
</reference></element>
<element pattern="imageconvolution" autocomplete_append="($image, array $matrix, $div, $offset);">
<reference>imageconvolution($image, array $matrix, $div, $offset);
Apply a 3x3 convolution matrix, using coefficient and offset
<b> image resource </b><b> matrix array </b>A 3x3 matrix: an array of three arrays of three floats.
<b> div float </b>The divisor of the result of the convolution, used for normalization.
<b> offset float </b>Color offset.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecopy" autocomplete_append="($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h);">
<reference>imagecopy($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h);
Copy part of an image
<b> dst_im resource </b>Destination image link resource.
<b> src_im resource </b>Source image link resource.
<b> dst_x int </b>x-coordinate of destination point.
<b> dst_y int </b>y-coordinate of destination point.
<b> src_x int </b>x-coordinate of source point.
<b> src_y int </b>y-coordinate of source point.
<b> src_w int </b>Source width.
<b> src_h int </b>Source height.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecopymerge" autocomplete_append="($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct);">
<reference>imagecopymerge($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct);
Copy and merge part of an image
<b> dst_im resource </b>Destination image link resource.
<b> src_im resource </b>Source image link resource.
<b> dst_x int </b>x-coordinate of destination point.
<b> dst_y int </b>y-coordinate of destination point.
<b> src_x int </b>x-coordinate of source point.
<b> src_y int </b>y-coordinate of source point.
<b> src_w int </b>Source width.
<b> src_h int </b>Source height.
<b> pct int </b>The two images will be merged according to pct
which can range from 0 to 100. When pct = 0,
no action is taken, when 100 this function behaves identically
to imagecopy for pallete images, while it
implements alpha transparency for true colour images.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecopymergegray" autocomplete_append="($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct);">
<reference>imagecopymergegray($dst_im, $src_im, $dst_x, $dst_y, $src_x, $src_y, $src_w, $src_h, $pct);
Copy and merge part of an image with gray scale
<b> dst_im resource </b>Destination image link resource.
<b> src_im resource </b>Source image link resource.
<b> dst_x int </b>x-coordinate of destination point.
<b> dst_y int </b>y-coordinate of destination point.
<b> src_x int </b>x-coordinate of source point.
<b> src_y int </b>y-coordinate of source point.
<b> src_w int </b>Source width.
<b> src_h int </b>Source height.
<b> pct int </b>The src_im will be changed to grayscale according 
to pct where 0 is fully grayscale and 100 is 
unchanged. When pct = 100 this function behaves 
identically to imagecopy for pallete images, while 
it implements alpha transparency for true colour images.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecopyresampled" autocomplete_append="($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);">
<reference>imagecopyresampled($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);
Copy and resize part of an image with resampling
<b> dst_image resource </b><b> src_image resource </b><b> dst_x int </b>x-coordinate of destination point.
<b> dst_y int </b>y-coordinate of destination point.
<b> src_x int </b>x-coordinate of source point.
<b> src_y int </b>y-coordinate of source point.
<b> dst_w int </b>Destination width.
<b> dst_h int </b>Destination height.
<b> src_w int </b>Source width.
<b> src_h int </b>Source height.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecopyresized" autocomplete_append="($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);">
<reference>imagecopyresized($dst_image, $src_image, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);
Copy and resize part of an image
<b> dst_image resource </b><b> src_image resource </b><b> dst_x int </b>x-coordinate of destination point.
<b> dst_y int </b>y-coordinate of destination point.
<b> src_x int </b>x-coordinate of source point.
<b> src_y int </b>y-coordinate of source point.
<b> dst_w int </b>Destination width.
<b> dst_h int </b>Destination height.
<b> src_w int </b>Source width.
<b> src_h int </b>Source height.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagecreate" autocomplete_append="($width, $height);">
<reference>imagecreate($width, $height);
Create a new palette based image
<b> width int </b>The image width.
<b> height int </b>The image height.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromgd2" autocomplete_append="($filename);">
<reference>imagecreatefromgd2($filename);
Create a new image from GD2 file or URL
<b> filename string </b>Path to the GD2 image.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromgd2part" autocomplete_append="($filename, $srcX, $srcY, $width, $height);">
<reference>imagecreatefromgd2part($filename, $srcX, $srcY, $width, $height);
Create a new image from a given part of GD2 file or URL
<b> filename string </b>Path to the GD2 image.
<b> srcX int </b>x-coordinate of source point.
<b> srcY int </b>y-coordinate of source point.
<b> width int </b>Source width.
<b> height int </b>Source height.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromgd" autocomplete_append="($filename);">
<reference>imagecreatefromgd($filename);
Create a new image from GD file or URL
<b> filename string </b>Path to the GD file.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromgif" autocomplete_append="($filename);">
<reference>imagecreatefromgif($filename);
Create a new image from file or URL
<b> filename string </b>Path to the GIF image.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromjpeg" autocomplete_append="($filename);">
<reference>imagecreatefromjpeg($filename);
Create a new image from file or URL
<b> filename string </b>Path to the JPEG image.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefrompng" autocomplete_append="($filename);">
<reference>imagecreatefrompng($filename);
Create a new image from file or URL
<b> filename string </b>Path to the PNG image.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromstring" autocomplete_append="($data);">
<reference>imagecreatefromstring($data);
Create a new image from the image stream in the string
<b> data string </b><b>returns</b>  resource An image resource will be returned on success. false is returned if
the image type is unsupported, the data is not in a recognised format,
or the image is corrupt and cannot be loaded.
</reference></element>
<element pattern="imagecreatefromwbmp" autocomplete_append="($filename);">
<reference>imagecreatefromwbmp($filename);
Create a new image from file or URL
<b> filename string </b>Path to the WBMP image.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromxbm" autocomplete_append="($filename);">
<reference>imagecreatefromxbm($filename);
Create a new image from file or URL
<b> filename string </b>Path to the XBM image.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagecreatefromxpm"/>
<element pattern="imagecreatetruecolor" autocomplete_append="($width, $height);">
<reference>imagecreatetruecolor($width, $height);
Create a new true color image
<b> width int </b>Image width.
<b> height int </b>Image height.
<b>returns</b>  resource an image resource identifier on success, false on errors.
</reference></element>
<element pattern="imagedashedline" autocomplete_append="($image, $x1, $y1, $x2, $y2, $color);">
<reference>imagedashedline($image, $x1, $y1, $x2, $y2, $color);
Draw a dashed line
<b> image resource </b><b> x1 int </b>Upper left x coordinate.
<b> y1 int </b>Upper left y coordinate 0, 0 is the top left corner of the image.
<b> x2 int </b>Bottom right x coordinate.
<b> y2 int </b>Bottom right y coordinate.
<b> color int </b>The fill color. A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Always returns true
</reference></element>
<element pattern="imagedestroy" autocomplete_append="($image);">
<reference>imagedestroy($image);
Destroy an image
<b> image resource </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imageellipse" autocomplete_append="($image, $cx, $cy, $width, $height, $color);">
<reference>imageellipse($image, $cx, $cy, $width, $height, $color);
Draw an ellipse
<b> image resource </b><b> cx int </b>x-coordinate of the center.
<b> cy int </b>y-coordinate of the center.
<b> width int </b>The ellipse width.
<b> height int </b>The ellipse height.
<b> color int </b>The color of the ellipse. A color identifier created with
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefill" autocomplete_append="($image, $x, $y, $color);">
<reference>imagefill($image, $x, $y, $color);
Flood fill
<b> image resource </b><b> x int </b>x-coordinate of start point.
<b> y int </b>y-coordinate of start point.
<b> color int </b>The fill color. A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefilledarc" autocomplete_append="($image, $cx, $cy, $width, $height, $start, $end, $color, $style);">
<reference>imagefilledarc($image, $cx, $cy, $width, $height, $start, $end, $color, $style);
Draw a partial arc and fill it
<b> image resource </b><b> cx int </b>x-coordinate of the center.
<b> cy int </b>y-coordinate of the center.
<b> width int </b>The arc width.
<b> height int </b>The arc height.
<b> start int </b>The arc start angle, in degrees.
<b> end int </b>The arc end angle, in degrees.
0&amp;deg; is located at the three-o'clock position, and the arc is drawn
clockwise.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b> style int </b>A bitwise OR of the following possibilities:
IMG_ARC_PIE
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefilledellipse" autocomplete_append="($image, $cx, $cy, $width, $height, $color);">
<reference>imagefilledellipse($image, $cx, $cy, $width, $height, $color);
Draw a filled ellipse
<b> image resource </b><b> cx int </b>x-coordinate of the center.
<b> cy int </b>y-coordinate of the center.
<b> width int </b>The ellipse width.
<b> height int </b>The ellipse height.
<b> color int </b>The fill color. A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefilledpolygon" autocomplete_append="($image, array $points, $num_points, $color);">
<reference>imagefilledpolygon($image, array $points, $num_points, $color);
Draw a filled polygon
<b> image resource </b><b> points array </b>An array containing the x and y
coordinates of the polygons vertices consecutively.
<b> num_points int </b>Total number of vertices, which must be bigger than 3.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefilledrectangle" autocomplete_append="($image, $x1, $y1, $x2, $y2, $color);">
<reference>imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color);
Draw a filled rectangle
<b> image resource </b><b> x1 int </b>x-coordinate for point 1.
<b> y1 int </b>y-coordinate for point 1.
<b> x2 int </b>x-coordinate for point 2.
<b> y2 int </b>y-coordinate for point 2.
<b> color int </b>The fill color. A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefilltoborder" autocomplete_append="($image, $x, $y, $border, $color);">
<reference>imagefilltoborder($image, $x, $y, $border, $color);
Flood fill to specific color
<b> image resource </b><b> x int </b>x-coordinate of start.
<b> y int </b>y-coordinate of start.
<b> border int </b>The border color. A color identifier created with 
imagecolorallocate.
<b> color int </b>The fill color. A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefilter" autocomplete_append="($image, $filtertype, $arg1 = null, $arg2 = null, $arg3 = null, $arg4 = null);">
<reference>imagefilter($image, $filtertype, $arg1 = null, $arg2 = null, $arg3 = null, $arg4 = null);
Applies a filter to an image
<b> image resource </b><b> filtertype int </b>filtertype can be one of the following:
IMG_FILTER_NEGATE: Reverses all colors of
the image.
<b> arg1 int[optional] </b>IMG_FILTER_BRIGHTNESS: Brightness level.
<b> arg2 int[optional] </b>IMG_FILTER_COLORIZE: Value of green component.
<b> arg3 int[optional] </b>IMG_FILTER_COLORIZE: Value of blue component.
<b> arg4 int[optional] </b>IMG_FILTER_COLORIZE: Alpha channel, A value 
between 0 and 127. 0 indicates completely opaque while 127 indicates 
completely transparent.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagefontheight" autocomplete_append="($font);">
<reference>imagefontheight($font);
Get font height
<b> font int </b><b>returns</b>  int the height of the pixel.
</reference></element>
<element pattern="imagefontwidth" autocomplete_append="($font);">
<reference>imagefontwidth($font);
Get font width
<b> font int </b><b>returns</b>  int the width of the pixel
</reference></element>
<element pattern="imageftbbox" autocomplete_append="($size, $angle, $fontfile, $text, array $extrainfo = null);">
<reference>imageftbbox($size, $angle, $fontfile, $text, array $extrainfo = null);
Give the bounding box of a text using fonts via freetype2
<b> size float </b>The font size. Depending on your version of GD, this should be
specified as the pixel size (GD1) or point size (GD2).
<b> angle float </b>Angle in degrees in which text will be 
measured.
<b> fontfile string </b>The name of the TrueType font file (can be a URL). Depending on
which version of the GD library that PHP is using, it may attempt to
search for files that do not begin with a leading '/' by appending
'.ttf' to the filename and searching along a library-defined font path.
<b> text string </b>The string to be measured.
<b> extrainfo array[optional] </b>
Possible array indexes for extrainfo:
linespacing float
Defines drawing linespacing

<b>returns</b>  array imageftbbox returns an array with 8
elements representing four points making the bounding box of the
text:
0 lower left corner, X position
1 lower left corner, Y position
2 lower right corner, X position
3 lower right corner, Y position
4 upper right corner, X position
5 upper right corner, Y position
6 upper left corner, X position
7 upper left corner, Y position

The points are relative to the text regardless of the
angle, so "upper left" means in the top left-hand 
corner seeing the text horizontally.
</reference></element>
<element pattern="imagefttext" autocomplete_append="($image, $size, $angle, $x, $y, $color, $fontfile, $text, array $extrainfo = null);">
<reference>imagefttext($image, $size, $angle, $x, $y, $color, $fontfile, $text, array $extrainfo = null);
Write text to the image using fonts using FreeType 2
<b> image resource </b><b> size float </b>The font size to use in points.
<b> angle float  </b>The angle in degrees, with 0 degrees being left-to-right reading text.
Higher values represent a counter-clockwise rotation. For example, a 
value of 90 would result in bottom-to-top reading text.
<b> x int </b>The coordinates given by x and
y will define the basepoint of the first
character (roughly the lower-left corner of the character). This
is different from the imagestring, where
x and y define the
upper-left corner of the first character. For example, "top left"
is 0, 0.
<b> y int </b>The y-ordinate. This sets the position of the fonts baseline, not the
very bottom of the character.
<b> color int </b>The index of the desired color for the text, see 
imagecolorexact.
<b> fontfile string </b>The path to the TrueType font you wish to use.
Depending on which version of the GD library PHP is using, when
fontfile does not begin with a leading
/ then .ttf will be appended
to the filename and the library will attempt to search for that
filename along a library-defined font path.
When using versions of the GD library lower than 2.0.18, a space character,
rather than a semicolon, was used as the 'path separator' for different font files.
Unintentional use of this feature will result in the warning message:
Warning: Could not find/open font. For these affected versions, the
only solution is moving the font to a path which does not contain spaces.
In many cases where a font resides in the same directory as the script using it
the following trick will alleviate any include problems.
]]&gt;
<b> text string </b>Text to be inserted into image. 
<b> extrainfo array[optional] </b>
Possible array indexes for extrainfo:

linespacing float
Defines drawing linespacing

<b>returns</b>  array This function returns an array defining the four points of the box, starting in the lower left and moving counter-clockwise:

0 lower left x-coordinate
1 lower left y-coordinate
2 lower right x-coordinate
3 lower right y-coordinate
4 upper right x-coordinate
5 upper right y-coordinate
6 upper left x-coordinate
7 upper left y-coordinate
</reference></element>
<element pattern="imagegammacorrect" autocomplete_append="($image, $inputgamma, $outputgamma);">
<reference>imagegammacorrect($image, $inputgamma, $outputgamma);
Apply a gamma correction to a GD image
<b> image resource </b><b> inputgamma float </b>The input gamma.
<b> outputgamma float </b>The output gamma.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagegd2" autocomplete_append="($image, $filename = null, $chunk_size = null, $type = null);">
<reference>imagegd2($image, $filename = null, $chunk_size = null, $type = null);
Output GD2 image to browser or file
<b> image resource </b><b> filename string[optional] </b>The path to save the file to. If not set or &amp;null;, the raw image stream
will be outputted directly.
<b> chunk_size int[optional] </b>Chunk size.
<b> type int[optional] </b>Either IMG_GD2_RAW or 
IMG_GD2_COMPRESSED. Default is 
IMG_GD2_RAW.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagegd" autocomplete_append="($image, $filename = null);">
<reference>imagegd($image, $filename = null);
Output GD image to browser or file
<b> image resource </b><b> filename string[optional] </b>The path to save the file to. If not set or &amp;null;, the raw image stream
will be outputted directly.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagegif" autocomplete_append="($image, $filename = null);">
<reference>imagegif($image, $filename = null);
Output image to browser or file
<b> image resource </b><b> filename string[optional] </b>The path to save the file to. If not set or &amp;null;, the raw image stream
will be outputted directly.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagegrabscreen"/>
<element pattern="imagegrabwindow"/>
<element pattern="imageinterlace" autocomplete_append="($image, $interlace = null);">
<reference>imageinterlace($image, $interlace = null);
Enable or disable interlace
<b> image resource </b><b> interlace int[optional] </b>If non-zero, the image will be interlaced, else the interlace bit is
turned off.
<b>returns</b>  int 1 if the interlace bit is set for the image, 0 otherwise.
</reference></element>
<element pattern="imageistruecolor" autocomplete_append="($image);">
<reference>imageistruecolor($image);
Finds whether an image is a truecolor image
<b> image resource </b><b>returns</b>  bool true if the image is truecolor, false
otherwise.
</reference></element>
<element pattern="imagejpeg" autocomplete_append="($image, $filename = null, $quality = null);">
<reference>imagejpeg($image, $filename = null, $quality = null);
Output image to browser or file
<b> image resource </b><b> filename string[optional] </b>The path to save the file to. If not set or &amp;null;, the raw image stream
will be outputted directly.
To skip this argument in order to provide the 
quality parameter, use &amp;null;.
<b> quality int[optional] </b>quality is optional, and ranges from 0 (worst
quality, smaller file) to 100 (best quality, biggest file). The 
default is the default IJG quality value (about 75).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagelayereffect" autocomplete_append="($image, $effect);">
<reference>imagelayereffect($image, $effect);
Set the alpha blending flag to use the bundled libgd layering effects
<b> image resource </b><b> effect int </b>One of the following constants:
IMG_EFFECT_REPLACE
Use pixel replacement (equivalent of passing true to
imagealphablending)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imageline" autocomplete_append="($image, $x1, $y1, $x2, $y2, $color);">
<reference>imageline($image, $x1, $y1, $x2, $y2, $color);
Draw a line
<b> image resource </b><b> x1 int </b>x-coordinate for first point.
<b> y1 int </b>y-coordinate for first point.
<b> x2 int </b>x-coordinate for second point.
<b> y2 int </b>y-coordinate for second point.
<b> color int </b>The line color. A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imageloadfont" autocomplete_append="($file);">
<reference>imageloadfont($file);
Load a new font
<b> file string </b>The font file format is currently binary and architecture
dependent. This means you should generate the font files on the
same type of CPU as the machine you are running PHP on.

Font file format
byte 0-3 int
number of characters in the font
byte 4-7 int
value of first character in the font (often 32 for space)
byte 8-11 int
pixel width of each character
byte 12-15 int
pixel height of each character
byte 16- char
array with character data, one byte per pixel in each
character, for a total of (nchars*width*height) bytes.

<b>returns</b>  int The font identifier which is always bigger than 5 to avoid conflicts with
built-in fonts or false on errors.
</reference></element>
<element pattern="imagepalettecopy" autocomplete_append="($destination, $source);">
<reference>imagepalettecopy($destination, $source);
Copy the palette from one image to another
<b> destination resource </b>The destination image resource.
<b> source resource </b>The source image resource.
<b>returns</b>  void 
</reference></element>
<element pattern="imagepng" autocomplete_append="($image, $filename = null, $quality = null, $filters = null);">
<reference>imagepng($image, $filename = null, $quality = null, $filters = null);
Output a PNG image to either the browser or a file
<b> image resource </b><b> filename string[optional] </b>The path to save the file to. If not set or &amp;null;, the raw image stream
will be outputted directly.
&amp;null; is invalid if the quality and
filters arguments are not used.
<b> quality int[optional] </b>Compression level: from 0 (no compression) to 9.
<b> filters int[optional] </b>Allows reducing the PNG file size. It is a bitmask field which may be
set to any combination of the PNG_FILTER_XXX 
constants. PNG_NO_FILTER or 
PNG_ALL_FILTERS may also be used to respectively
disable or activate all filters.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagepolygon" autocomplete_append="($image, array $points, $num_points, $color);">
<reference>imagepolygon($image, array $points, $num_points, $color);
Draws a polygon
<b> image resource </b><b> points array </b>
An array containing the polygon's vertices, e.g.:

points[0] = x0
points[1] = y0
points[2] = x1
points[3] = y1

<b> num_points int </b>Total number of points (vertices).
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagepsbbox"/>
<element pattern="imagepsencodefont"/>
<element pattern="imagepsextendfont"/>
<element pattern="imagepsfreefont"/>
<element pattern="imagepsloadfont"/>
<element pattern="imagepsslantfont"/>
<element pattern="imagepstext"/>
<element pattern="imagerectangle" autocomplete_append="($image, $x1, $y1, $x2, $y2, $color);">
<reference>imagerectangle($image, $x1, $y1, $x2, $y2, $color);
Draw a rectangle
<b> image resource </b><b> x1 int </b>Upper left x coordinate.
<b> y1 int </b>Upper left y coordinate
0, 0 is the top left corner of the image.
<b> x2 int </b>Bottom right x coordinate.
<b> y2 int </b>Bottom right y coordinate.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagerotate" autocomplete_append="($image, $angle, $bgd_color, $ignore_transparent = null);">
<reference>imagerotate($image, $angle, $bgd_color, $ignore_transparent = null);
Rotate an image with a given angle
<b> image resource </b><b> angle float </b>Rotation angle, in degrees.
<b> bgd_color int </b>Specifies the color of the uncovered zone after the rotation
<b> ignore_transparent int[optional] </b>If set and non-zero, transparent colors are ignored (otherwise kept).
<b>returns</b>  resource 
</reference></element>
<element pattern="imagesavealpha" autocomplete_append="($image, $saveflag);">
<reference>imagesavealpha($image, $saveflag);
Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images
<b> image resource </b><b> saveflag bool </b>Whether to save the alpha channel or not. Default to false. 
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagesetbrush" autocomplete_append="($image, $brush);">
<reference>imagesetbrush($image, $brush);
Set the brush image for line drawing
<b> image resource </b><b> brush resource </b>An image resource.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagesetpixel" autocomplete_append="($image, $x, $y, $color);">
<reference>imagesetpixel($image, $x, $y, $color);
Set a single pixel
<b> image resource </b><b> x int </b>x-coordinate.
<b> y int </b>y-coordinate.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagesetstyle" autocomplete_append="($image, array $style);">
<reference>imagesetstyle($image, array $style);
Set the style for line drawing
<b> image resource </b><b> style array </b>An array of pixel colors. You can use the 
IMG_COLOR_TRANSPARENT constant to add a 
transparent pixel.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagesetthickness" autocomplete_append="($image, $thickness);">
<reference>imagesetthickness($image, $thickness);
Set the thickness for line drawing
<b> image resource </b><b> thickness int </b>Thickness, in pixels.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagesettile" autocomplete_append="($image, $tile);">
<reference>imagesettile($image, $tile);
Set the tile image for filling
<b> image resource </b><b> tile resource </b>The image resource to be used as a tile.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagestring" autocomplete_append="($image, $font, $x, $y, $string, $color);">
<reference>imagestring($image, $font, $x, $y, $string, $color);
Draw a string horizontally
<b> image resource </b><b> font int </b><b> x int </b>x-coordinate of the upper left corner.
<b> y int </b>y-coordinate of the upper left corner.
<b> string string </b>The string to be written.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagestringup" autocomplete_append="($image, $font, $x, $y, $string, $color);">
<reference>imagestringup($image, $font, $x, $y, $string, $color);
Draw a string vertically
<b> image resource </b><b> font int </b><b> x int </b>x-coordinate of the upper left corner.
<b> y int </b>y-coordinate of the upper left corner.
<b> string string </b>The string to be written.
<b> color int </b>A color identifier created with 
imagecolorallocate.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagesx" autocomplete_append="($image);">
<reference>imagesx($image);
Get image width
<b> image resource </b><b>returns</b>  int Return the width of the image or false on 
errors.
</reference></element>
<element pattern="imagesy" autocomplete_append="($image);">
<reference>imagesy($image);
Get image height
<b> image resource </b><b>returns</b>  int Return the height of the image or false on 
errors.
</reference></element>
<element pattern="imagetruecolortopalette" autocomplete_append="($image, $dither, $ncolors);">
<reference>imagetruecolortopalette($image, $dither, $ncolors);
Convert a true color image to a palette image
<b> image resource </b><b> dither bool </b>Indicates if the image should be dithered - if it is true then
dithering will be used which will result in a more speckled image but
with better color approximation.
<b> ncolors int </b>Sets the maximum number of colors that should be retained in the palette.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagettfbbox" autocomplete_append="($size, $angle, $fontfile, $text);">
<reference>imagettfbbox($size, $angle, $fontfile, $text);
Give the bounding box of a text using TrueType fonts
<b> size float </b>The font size. Depending on your version of GD, this should be
specified as the pixel size (GD1) or point size (GD2).
<b> angle float </b>Angle in degrees in which text will be measured.
<b> fontfile string </b>The name of the TrueType font file (can be a URL). Depending on
which version of the GD library that PHP is using, it may attempt to
search for files that do not begin with a leading '/' by appending
'.ttf' to the filename and searching along a library-defined font path.
<b> text string </b>The string to be measured.
<b>returns</b>  array imagettfbbox returns an array with 8
elements representing four points making the bounding box of the
text:

0 lower left corner, X position
1 lower left corner, Y position
2 lower right corner, X position
3 lower right corner, Y position
4 upper right corner, X position
5 upper right corner, Y position
6 upper left corner, X position
7 upper left corner, Y position

The points are relative to the text regardless of the
angle, so "upper left" means in the top left-hand 
corner seeing the text horizontally.
</reference></element>
<element pattern="imagettftext" autocomplete_append="($image, $size, $angle, $x, $y, $color, $fontfile, $text);">
<reference>imagettftext($image, $size, $angle, $x, $y, $color, $fontfile, $text);
Write text to the image using TrueType fonts
<b> image resource </b><b> size float </b>The font size. Depending on your version of GD, this should be
specified as the pixel size (GD1) or point size (GD2).
<b> angle float </b>The angle in degrees, with 0 degrees being left-to-right reading text.
Higher values represent a counter-clockwise rotation. For example, a 
value of 90 would result in bottom-to-top reading text.
<b> x int </b>The coordinates given by x and
y will define the basepoint of the first
character (roughly the lower-left corner of the character). This
is different from the imagestring, where
x and y define the
upper-left corner of the first character. For example, "top left"
is 0, 0.
<b> y int </b>The y-ordinate. This sets the position of the fonts baseline, not the
very bottom of the character.
<b> color int </b>The color index. Using the negative of a color index has the effect of
turning off antialiasing. See imagecolorallocate.
<b> fontfile string </b>The path to the TrueType font you wish to use.
Depending on which version of the GD library PHP is using, when
fontfile does not begin with a leading
/ then .ttf will be appended
to the filename and the library will attempt to search for that
filename along a library-defined font path.
When using versions of the GD library lower than 2.0.18, a space character,
rather than a semicolon, was used as the 'path separator' for different font files.
Unintentional use of this feature will result in the warning message:
Warning: Could not find/open font. For these affected versions, the
only solution is moving the font to a path which does not contain spaces.
In many cases where a font resides in the same directory as the script using it
the following trick will alleviate any include problems.
]]&gt;
<b> text string </b>The text string in UTF-8 encoding.
May include decimal numeric character references (of the form:
&amp;amp;#8364;) to access characters in a font beyond position 127.
The hexadecimal format (like &amp;amp;#xA9;) is supported as of PHP 5.2.0.
Strings in UTF-8 encoding can be passed directly.
Named entities, such as &amp;amp;copy;, are not supported. Consider using 
html_entity_decode
to decode these named entities into UTF-8 strings (html_entity_decode()
supports this as of PHP 5.0.0).
If a character is used in the string which is not supported by the
font, a hollow rectangle will replace the character.
<b>returns</b>  array an array with 8 elements representing four points making the
bounding box of the text. The order of the points is lower left, lower 
right, upper right, upper left. The points are relative to the text
regardless of the angle, so "upper left" means in the top left-hand 
corner when you see the text horizontally.
</reference></element>
<element pattern="imagetypes" autocomplete_append="();">
<reference>imagetypes();
Return the image types supported by this PHP build
<b>returns</b>  int a bit-field corresponding to the image formats supported by the
version of GD linked into PHP. The following bits are returned, 
IMG_GIF | IMG_JPG |
IMG_PNG | IMG_WBMP | 
IMG_XPM.
</reference></element>
<element pattern="imagewbmp" autocomplete_append="($image, $filename = null, $foreground = null);">
<reference>imagewbmp($image, $filename = null, $foreground = null);
Output image to browser or file
<b> image resource </b><b> filename string[optional] </b>The path to save the file to. If not set or &amp;null;, the raw image stream
will be outputted directly.
<b> foreground int[optional] </b>You can set the foreground color with this parameter by setting an
identifier obtained from imagecolorallocate.
The default foreground color is black.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imagexbm" autocomplete_append="($image, $filename, $foreground = null);">
<reference>imagexbm($image, $filename, $foreground = null);
Output XBM image to browser or file
<b> image resource </b><b> filename string </b>The path to save the file to. If not set or &amp;null;, the raw image stream
will be outputted directly.
<b> foreground int[optional] </b>You can set the foreground color with this parameter by setting an
identifier obtained from imagecolorallocate.
The default foreground color is black.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="iptcembed" autocomplete_append="($iptcdata, $jpeg_file_name, $spool = null);">
<reference>iptcembed($iptcdata, $jpeg_file_name, $spool = null);
Embed binary IPTC data into a JPEG image
<b> iptcdata string </b>The data to be written.
<b> jpeg_file_name string </b>Path to the JPEG image.
<b> spool int[optional] </b>Spool flag. If the spool flag is over 2 then the JPEG will be 
returned as a string.
<b>returns</b>  mixed If success and spool flag is lower than 2 then the JPEG will not be 
returned as a string, false on errors.
</reference></element>
<element pattern="iptcparse" autocomplete_append="($iptcblock);">
<reference>iptcparse($iptcblock);
Parse a binary IPTC block into single tags.
<b> iptcblock string </b>A binary IPTC block.
<b>returns</b>  array an array using the tagmarker as an index and the value as the
value. It returns false on error or if no IPTC data was found.
</reference></element>
<element pattern="jpeg2wbmp" autocomplete_append="($jpegname, $wbmpname, $dest_height, $dest_width, $threshold);">
<reference>jpeg2wbmp($jpegname, $wbmpname, $dest_height, $dest_width, $threshold);
Convert JPEG image file to WBMP image file
<b> jpegname string </b>Path to JPEG file.
<b> wbmpname string </b>Path to destination WBMP file.
<b> dest_height int </b>Destination image height.
<b> dest_width int </b>Destination image width.
<b> threshold int </b>Threshold value, between 0 and 8 (inclusive).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="png2wbmp" autocomplete_append="($pngname, $wbmpname, $dest_height, $dest_width, $threshold);">
<reference>png2wbmp($pngname, $wbmpname, $dest_height, $dest_width, $threshold);
Convert PNG image file to WBMP image file
<b> pngname string </b>Path to PNG file.
<b> wbmpname string </b>Path to destination WBMP file.
<b> dest_height int </b>Destination image height.
<b> dest_width int </b>Destination image width.
<b> threshold int </b>Threshold value, between 0 and 8 (inclusive).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_8bit" autocomplete_append="($string);">
<reference>imap_8bit($string);
Convert an 8bit string to a quoted-printable string
<b> string string </b>The 8bit string to convert
<b>returns</b>  string a quoted-printable string.
</reference></element>
<element pattern="imap_alerts" autocomplete_append="();">
<reference>imap_alerts();
Returns all IMAP alert messages that have occurred
<b>returns</b>  array an array of all of the IMAP alert messages generated or false if
no alert messages are available.
</reference></element>
<element pattern="imap_append" autocomplete_append="($imap_stream, $mailbox, $message, $options = null);">
<reference>imap_append($imap_stream, $mailbox, $message, $options = null);
Append a string message to a specified mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b> message string </b>The message to be append, as a string
When talking to the Cyrus IMAP server, you must use "\r\n" as
your end-of-line terminator instead of "\n" or the operation will
fail
<b> options string[optional] </b>If provided, the options will also be written
to the mailbox
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_base64" autocomplete_append="($text);">
<reference>imap_base64($text);
Decode BASE64 encoded text
<b> text string </b>The encoded text
<b>returns</b>  string the decoded message as a string.
</reference></element>
<element pattern="imap_binary" autocomplete_append="($string);">
<reference>imap_binary($string);
Convert an 8bit string to a base64 string
<b> string string </b>The 8bit string
<b>returns</b>  string a base64 encoded string.
</reference></element>
<element pattern="imap_body" autocomplete_append="($imap_stream, $msg_number, $options = null);">
<reference>imap_body($imap_stream, $msg_number, $options = null);
Read the message body
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> options int[optional] </b>The optional options are a bit mask
with one or more of the following:
FT_UID - The msg_number is a UID
<b>returns</b>  string the body of the specified message, as a string.
</reference></element>
<element pattern="imap_bodystruct" autocomplete_append="($imap_stream, $msg_number, $section);">
<reference>imap_bodystruct($imap_stream, $msg_number, $section);
Read the structure of a specified body section of a specific message
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> section string </b>The body section to read
<b>returns</b>  object the information in an object, for a detailed description
of the object structure and properties see 
imap_fetchstructure.
</reference></element>
<element pattern="imap_check" autocomplete_append="($imap_stream);">
<reference>imap_check($imap_stream);
Check current mailbox
<b> imap_stream resource </b><b>returns</b>  object the information in an object with following properties:
Date - current system time formatted according to RFC2822
Driver - protocol used to access this mailbox: POP3, IMAP, NNTP
Mailbox - the mailbox name
Nmsgs - number of messages in the mailbox
Recent - number of recent messages in the mailbox
 
Returns false on failure.
</reference></element>
<element pattern="imap_clearflag_full" autocomplete_append="($imap_stream, $sequence, $flag, $options = null);">
<reference>imap_clearflag_full($imap_stream, $sequence, $flag, $options = null);
Clears flags on messages
<b> imap_stream resource </b><b> sequence string </b>A sequence of message numbers. You can enumerate desired messages
with the X,Y syntax, or retrieve all messages 
within an interval with the X:Y syntax
<b> flag string </b>The flags which you can unset are "\\Seen", "\\Answered", "\\Flagged",
"\\Deleted", and "\\Draft" (as defined by RFC2060)
<b> options string[optional] </b>options are a bit mask and may contain
the single option:
ST_UID - The sequence argument contains UIDs
instead of sequence numbers
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_close" autocomplete_append="($imap_stream, $flag = null);">
<reference>imap_close($imap_stream, $flag = null);
Close an IMAP stream
<b> imap_stream resource </b><b> flag int[optional] </b>If set to CL_EXPUNGE, the function will silently
expunge the mailbox before closing, removing all messages marked for
deletion. You can achieve the same thing by using
imap_expunge
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_createmailbox" autocomplete_append="($imap_stream, $mailbox);">
<reference>imap_createmailbox($imap_stream, $mailbox);
Create a new mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information. Names containing international characters should be
encoded by imap_utf7_encode
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_delete" autocomplete_append="($imap_stream, $msg_number, $options = null);">
<reference>imap_delete($imap_stream, $msg_number, $options = null);
Mark a message for deletion from current mailbox
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> options int[optional] </b>You can set the FT_UID which tells the function
to treat the msg_number argument as an
UID.
<b>returns</b>  bool true.
</reference></element>
<element pattern="imap_deletemailbox" autocomplete_append="($imap_stream, $mailbox);">
<reference>imap_deletemailbox($imap_stream, $mailbox);
Delete a mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_errors" autocomplete_append="();">
<reference>imap_errors();
Returns all of the IMAP errors that have occured
<b>returns</b>  array This function returns an array of all of the IMAP error messages
generated since the last imap_errors call,
or the beginning of the page. Returns false if no error messages are
available.
</reference></element>
<element pattern="imap_expunge" autocomplete_append="($imap_stream);">
<reference>imap_expunge($imap_stream);
Delete all messages marked for deletion
<b> imap_stream resource </b><b>returns</b>  bool true.
</reference></element>
<element pattern="imap_fetch_overview" autocomplete_append="($imap_stream, $sequence, $options = null);">
<reference>imap_fetch_overview($imap_stream, $sequence, $options = null);
Read an overview of the information in the headers of the given message
<b> imap_stream resource </b><b> sequence string </b>A message sequence description. You can enumerate desired messages
with the X,Y syntax, or retrieve all messages 
within an interval with the X:Y syntax
<b> options int[optional] </b>sequence will contain a sequence of message
indices or UIDs, if this parameter is set to 
FT_UID. 
<b>returns</b>  array an array of objects describing one message header each.
The object will only define a property if it exists. The possible
properties are:
subject - the messages subject
from - who sent it
to - recipient
date - when was it sent
message_id - Message-ID
references - is a reference to this message id
in_reply_to - is a reply to this message id
size - size in bytes
uid - UID the message has in the mailbox
msgno - message sequence number in the mailbox
recent - this message is flagged as recent
flagged - this message is flagged
answered - this message is flagged as answered
deleted - this message is flagged for deletion
seen - this message is flagged as already read
draft - this message is flagged as being a draft
</reference></element>
<element pattern="imap_fetchbody" autocomplete_append="($imap_stream, $msg_number, $part_number, $options = null);">
<reference>imap_fetchbody($imap_stream, $msg_number, $part_number, $options = null);
Fetch a particular section of the body of the message
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> part_number string </b>The part number. It is a string of integers delimited by period which
index into a body part list as per the IMAP4 specification
<b> options int[optional] </b>A bitmask with one or more of the following:
FT_UID - The msg_number is a UID
<b>returns</b>  string a particular section of the body of the specified messages as a
text string.
</reference></element>
<element pattern="imap_fetchheader" autocomplete_append="($imap_stream, $msg_number, $options = null);">
<reference>imap_fetchheader($imap_stream, $msg_number, $options = null);
Returns header for a message
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> options int[optional] </b>The possible options are:
FT_UID - The msgno
argument is a UID
<b>returns</b>  string the header of the specified message as a text string.
</reference></element>
<element pattern="imap_fetchstructure" autocomplete_append="($imap_stream, $msg_number, $options = null);">
<reference>imap_fetchstructure($imap_stream, $msg_number, $options = null);
Read the structure of a particular message
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> options int[optional] </b>This optional parameter only has a single option, 
FT_UID, which tells the function to treat the
msg_number argument as a 
UID.
<b>returns</b>  object an object includes the envelope, internal date, size, flags and
body structure along with a similar object for each mime attachment.
The structure of the returned objects is as follows:

Returned Objects for imap_fetchstructure

type Primary body type
encoding Body transfer encoding
ifsubtype true if there is a subtype string
subtype MIME subtype
ifdescription true if there is a description string
description Content description string
ifid true if there is an identification string
id Identification string
lines Number of lines
bytes Number of bytes
ifdisposition true if there is a disposition string
disposition Disposition string
ifdparameters true if the dparameters array exists
dparameters An array of objects where each object has an "attribute" and a
"value" property corresponding to the parameters on the
Content-disposition MIMEheader.
ifparameters true if the parameters array exists
parameters An array of objects where each object has an "attribute" and
a "value" property.
parts An array of objects identical in structure to the top-level
object, each of which corresponds to a MIME body
part.

Primary body type
0 text
1 multipart
2 message
3 application
4 audio
5 image
6 video
7 other

Transfer encodings
0 7BIT
1 8BIT
2 BINARY
3 BASE64
4 QUOTED-PRINTABLE
5 OTHER
</reference></element>
<element pattern="imap_get_quota" autocomplete_append="($imap_stream, $quota_root);">
<reference>imap_get_quota($imap_stream, $quota_root);
Retrieve the quota level settings, and usage statics per mailbox
<b> imap_stream resource </b><b> quota_root string </b>quota_root should normally be in the form of
user.name where name is the mailbox you wish to
retrieve information about.
<b>returns</b>  array an array with integer values limit and usage for the given
mailbox. The value of limit represents the total amount of space
allowed for this mailbox. The usage value represents the mailboxes
current level of capacity. Will return false in the case of failure.
As of PHP 4.3, the function more properly reflects the
functionality as dictated by the RFC2087.
The array return value has changed to support an unlimited number of returned 
resources (i.e. messages, or sub-folders) with each named resource receiving
an individual array key. Each key value then contains an another array with
the usage and limit values within it.
For backwards compatibility reasons, the original access methods are
still available for use, although it is suggested to update.
</reference></element>
<element pattern="imap_get_quotaroot" autocomplete_append="($imap_stream, $quota_root);">
<reference>imap_get_quotaroot($imap_stream, $quota_root);
Retrieve the quota settings per user
<b> imap_stream resource </b><b> quota_root string </b>quota_root should normally be in the form of
which mailbox (i.e. INBOX).
<b>returns</b>  array an array of integer values pertaining to the specified user
mailbox. All values contain a key based upon the resource name, and a
corresponding array with the usage and limit values within.
This function will return false in the case of call failure, and an
array of information about the connection upon an un-parsable response
from the server.
</reference></element>
<element pattern="imap_getacl" autocomplete_append="($imap_stream, $mailbox);">
<reference>imap_getacl($imap_stream, $mailbox);
Gets the ACL for a given mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b>returns</b>  array an associative array of "folder" =&gt; "acl" pairs.
</reference></element>
<element pattern="imap_getmailboxes" autocomplete_append="($imap_stream, $ref, $pattern);">
<reference>imap_getmailboxes($imap_stream, $ref, $pattern);
Read the list of mailboxes, returning detailed information on each one
<b> imap_stream resource </b><b> ref string </b>ref should normally be just the server
specification as described in imap_open
<b> pattern string </b>Specifies where in the mailbox hierarchy to start searching.
There are two special characters you can pass as part of the
pattern: '*' and '%'. '*' means to return
all mailboxes. If you pass pattern as '*',
you will get a list of the entire mailbox hierarchy. '%' means to
return the current level only. '%' as the
pattern parameter will return only the top
level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox
in the ~/mail directory, but none in subfolders of that
directory.
<b>returns</b>  array an array of objects containing mailbox information. Each
object has the attributes name, specifying
the full name of the mailbox; delimiter,
which is the hierarchy delimiter for the part of the hierarchy
this mailbox is in; and
attributes. Attributes
is a bitmask that can be tested against:
LATT_NOINFERIORS - This mailbox contains, and may not contain any
"children" (there are no mailboxes below this one). Calling 
imap_createmailbox will not work on this mailbox.
LATT_NOSELECT - This is only a container,
not a mailbox - you cannot open it.
LATT_MARKED - This mailbox is marked. This means that it may 
contain new messages since the last time it was checked. Not provided by all IMAP
servers.
LATT_UNMARKED - This mailbox is not marked, does not contain new
messages. If either MARKED or UNMARKED is provided, you can assume the IMAP server 
supports this feature for this mailbox. 
</reference></element>
<element pattern="imap_getsubscribed" autocomplete_append="($imap_stream, $ref, $pattern);">
<reference>imap_getsubscribed($imap_stream, $ref, $pattern);
List all the subscribed mailboxes
<b> imap_stream resource </b><b> ref string </b>ref should normally be just the server
specification as described in imap_open
<b> pattern string </b>Specifies where in the mailbox hierarchy to start searching.
There are two special characters you can pass as part of the
pattern: '*' and '%'. '*' means to return
all mailboxes. If you pass pattern as '*',
you will get a list of the entire mailbox hierarchy. '%' means to
return the current level only. '%' as the
pattern parameter will return only the top
level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox
in the ~/mail directory, but none in subfolders of that
directory.
<b>returns</b>  array an array of objects containing mailbox information. Each
object has the attributes name, specifying
the full name of the mailbox; delimiter,
which is the hierarchy delimiter for the part of the hierarchy
this mailbox is in; and
attributes. Attributes
is a bitmask that can be tested against:
LATT_NOINFERIORS - This mailbox has no
"children" (there are no mailboxes below this one).
LATT_NOSELECT - This is only a container,
not a mailbox - you cannot open it.
LATT_MARKED - This mailbox is marked.
Only used by UW-IMAPD.
LATT_UNMARKED - This mailbox is not marked.
Only used by UW-IMAPD.
</reference></element>
<element pattern="imap_headerinfo" autocomplete_append="($imap_stream, $msg_number, $fromlength = null, $subjectlength = null, $defaulthost = null);">
<reference>imap_headerinfo($imap_stream, $msg_number, $fromlength = null, $subjectlength = null, $defaulthost = null);
Read the header of the message
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> fromlength int[optional] </b>Number of characters for the fetchfrom property.
Must be greater than or equal to zero.
<b> subjectlength int[optional] </b>Number of characters for the fetchsubject property
Must be greater than or equal to zero.
<b> defaulthost string[optional] </b><b>returns</b>  object the information in an object with following properties:
toaddress - full to: line, up to 1024 characters
to - an array of objects from the To: line, with the following 
properties: personal, adl,
mailbox, and host
fromaddress - full from: line, up to 1024 characters
from - an array of objects from the From: line, with the following 
properties: personal, adl,
mailbox, and host
ccaddress - full cc: line, up to 1024 characters
cc - an array of objects from the Cc: line, with the following 
properties: personal, adl,
mailbox, and host
bccaddress - full bcc: line, up to 1024 characters
bcc - an array of objects from the Bcc: line, with the following 
properties: personal, adl,
mailbox, and host
reply_toaddress - full Reply-To: line, up to 1024 characters
reply_to - an array of objects from the Reply-To: line, with the following
properties: personal, adl,
mailbox, and host
senderaddress - full sender: line, up to 1024 characters
sender - an array of objects from the Sender: line, with the following 
properties: personal, adl,
mailbox, and host
return_pathaddress - full Return-Path: line, up to 1024 characters
return_path - an array of objects from the Return-Path: line, with the
following properties: personal, 
adl, mailbox, and 
host
remail - 
date - The message date as found in its headers
Date - Same as date
subject - The message subject
Subject - Same a subject 
in_reply_to - 
message_id - 
newsgroups - 
followup_to - 
references - 
Recent - R if recent and seen, N
if recent and not seen, ' ' if not recent.
Unseen - U if not seen AND not recent, ' ' if seen
OR not seen and recent
Flagged - F if flagged, ' ' if not flagged
Answered - A if answered, ' ' if unanswered
Deleted - D if deleted, ' ' if not deleted
Draft - X if draft, ' ' if not draft
Msgno - The message number
MailDate - 
Size - The message size
udate - mail message date in Unix time
fetchfrom - from line formatted to fit fromlength
characters
fetchsubject - subject line formatted to fit 
subjectlength characters
</reference></element>
<element pattern="imap_headers" autocomplete_append="($imap_stream);">
<reference>imap_headers($imap_stream);
Returns headers for all messages in a mailbox
<b> imap_stream resource </b><b>returns</b>  array an array of string formatted with header info. One
element per mail message.
</reference></element>
<element pattern="imap_last_error" autocomplete_append="();">
<reference>imap_last_error();
Gets the last IMAP error that occurred during this page request
<b>returns</b>  string the full text of the last IMAP error message that occurred on the
current page. Returns false if no error messages are available.
</reference></element>
<element pattern="imap_list" autocomplete_append="($imap_stream, $ref, $pattern);">
<reference>imap_list($imap_stream, $ref, $pattern);
Read the list of mailboxes
<b> imap_stream resource </b><b> ref string </b>ref should normally be just the server
specification as described in imap_open.
<b> pattern string </b>Specifies where in the mailbox hierarchy to start searching.
There are two special characters you can pass as part of the
pattern: '*' and '%'. '*' means to return
all mailboxes. If you pass pattern as '*',
you will get a list of the entire mailbox hierarchy. '%' means to
return the current level only. '%' as the
pattern parameter will return only the top
level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox
in the ~/mail directory, but none in subfolders of that
directory.
<b>returns</b>  array an array containing the names of the mailboxes.
</reference></element>
<element pattern="imap_listscan"/>
<element pattern="imap_lsub" autocomplete_append="($imap_stream, $ref, $pattern);">
<reference>imap_lsub($imap_stream, $ref, $pattern);
List all the subscribed mailboxes
<b> imap_stream resource </b><b> ref string </b>ref should normally be just the server 
specification as described in imap_open
<b> pattern string </b>Specifies where in the mailbox hierarchy to start searching.
There are two special characters you can pass as part of the
pattern: '*' and '%'. '*' means to return
all mailboxes. If you pass pattern as '*',
you will get a list of the entire mailbox hierarchy. '%' means to
return the current level only. '%' as the
pattern parameter will return only the top
level mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox
in the ~/mail directory, but none in subfolders of that
directory.
<b>returns</b>  array an array of all the subscribed mailboxes.
</reference></element>
<element pattern="imap_mail_compose" autocomplete_append="(array $envelope, array $body);">
<reference>imap_mail_compose(array $envelope, array $body);
Create a MIME message based on given envelope and body sections
<b> envelope array </b>An associative array of headers fields
<b> body array </b>An indexed array of bodies
A body is an associative array which can consist of the following
keys: "type", "encoding", "subtype", "description" and "contents.data"
<b>returns</b>  string the MIME message.
</reference></element>
<element pattern="imap_mail_copy" autocomplete_append="($imap_stream, $msglist, $mailbox, $options = null);">
<reference>imap_mail_copy($imap_stream, $msglist, $mailbox, $options = null);
Copy specified messages to a mailbox
<b> imap_stream resource </b><b> msglist string </b>msglist is a range not just message
numbers (as described in RFC2060).
<b> mailbox string </b>The mailbox name, see imap_open for more
information
<b> options int[optional] </b>options is a bitmask of one or more of
CP_UID - the sequence numbers contain UIDS
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_mail_move" autocomplete_append="($imap_stream, $msglist, $mailbox, $options = null);">
<reference>imap_mail_move($imap_stream, $msglist, $mailbox, $options = null);
Move specified messages to a mailbox
<b> imap_stream resource </b><b> msglist string </b>msglist is a range not just message numbers
(as described in RFC2060).
<b> mailbox string </b>The mailbox name, see imap_open for more
information
<b> options int[optional] </b>options is a bitmask and may contain the single option:
CP_UID - the sequence numbers contain UIDS
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_mail" autocomplete_append="($to, $subject, $message, $additional_headers = null, $cc = null, $bcc = null, $rpath = null);">
<reference>imap_mail($to, $subject, $message, $additional_headers = null, $cc = null, $bcc = null, $rpath = null);
Send an email message
<b> to string </b>The receiver
<b> subject string </b>The mail subject
<b> message string </b>The mail body
<b> additional_headers string[optional] </b>As string with additional headers to be set on the mail
<b> cc string[optional] </b><b> bcc string[optional] </b>The receivers specified in bcc will get the
mail, but are excluded from the headers.
<b> rpath string[optional] </b>Use this parameter to specify return path upon mail delivery failure.
This is useful when using PHP as a mail client for multiple users.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_mailboxmsginfo" autocomplete_append="($imap_stream);">
<reference>imap_mailboxmsginfo($imap_stream);
Get information about the current mailbox
<b> imap_stream resource </b><b>returns</b>  object the information in an object with following properties:

Mailbox properties

Date date of last change
Driver driver
Mailbox name of the mailbox
Nmsgs number of messages
Recent number of recent messages
Unread number of unread messages
Deleted number of deleted messages
Size mailbox size

Returns false on failure.
</reference></element>
<element pattern="imap_mime_header_decode" autocomplete_append="($text);">
<reference>imap_mime_header_decode($text);
Decode MIME header elements
<b> text string </b>The MIME text
<b>returns</b>  array The decoded elements are returned in an array of objects, where each
object has two properties, charset and 
text.
If the element hasn't been encoded, and in other words is in
plain US-ASCII, the charset property of that element is
set to default.
</reference></element>
<element pattern="imap_msgno" autocomplete_append="($imap_stream, $uid);">
<reference>imap_msgno($imap_stream, $uid);
Gets the message sequence number for the given UID
<b> imap_stream resource </b><b> uid int </b>The message UID
<b>returns</b>  int the message sequence number for the given 
uid.
</reference></element>
<element pattern="imap_num_msg" autocomplete_append="($imap_stream);">
<reference>imap_num_msg($imap_stream);
Gets the number of messages in the current mailbox
<b> imap_stream resource </b><b>returns</b>  int Return the number of messages in the current mailbox, as an integer.
</reference></element>
<element pattern="imap_num_recent" autocomplete_append="($imap_stream);">
<reference>imap_num_recent($imap_stream);
Gets the number of recent messages in current mailbox
<b> imap_stream resource </b><b>returns</b>  int the number of recent messages in the current mailbox, as an
integer.
</reference></element>
<element pattern="imap_open" autocomplete_append="($mailbox, $username, $password, $options = null, $n_retries = null);">
<reference>imap_open($mailbox, $username, $password, $options = null, $n_retries = null);
Open an IMAP stream to a mailbox
<b> mailbox string </b>A mailbox name consists of a server and a mailbox path on this server.
The special name INBOX stands for the current users
personal mailbox. Mailbox names that contain international characters
besides those in the printable ASCII space have to be encoded width
imap_utf7_encode.
The server part, which is enclosed in '{' and '}', consists of the servers
name or ip address, an optional port (prefixed by ':'), and an optional
protocol specification (prefixed by '/'). 
The server part is mandatory in all mailbox
parameters. 
All names which start with { are remote names, and are
in the form "{" remote_system_name [":" port] [flags] "}"
[mailbox_name] where:
remote_system_name - Internet domain name or
bracketed IP address of server.
<b> username string </b>The user name
<b> password string </b>The password associated with the username
<b> options int[optional] </b>The options are a bit mask with one or more of
the following:
OP_READONLY - Open mailbox read-only
<b> n_retries int[optional] </b>Number of maximum connect attempts
<b>returns</b>  resource an IMAP stream on success or false on error.
</reference></element>
<element pattern="imap_ping" autocomplete_append="($imap_stream);">
<reference>imap_ping($imap_stream);
Check if the IMAP stream is still active
<b> imap_stream resource </b><b>returns</b>  bool true if the stream is still alive, false otherwise.
</reference></element>
<element pattern="imap_qprint" autocomplete_append="($string);">
<reference>imap_qprint($string);
Convert a quoted-printable string to an 8 bit string
<b> string string </b>A quoted-printable string
<b>returns</b>  string an 8 bits string.
</reference></element>
<element pattern="imap_renamemailbox" autocomplete_append="($imap_stream, $old_mbox, $new_mbox);">
<reference>imap_renamemailbox($imap_stream, $old_mbox, $new_mbox);
Rename an old mailbox to new mailbox
<b> imap_stream resource </b><b> old_mbox string </b>The old mailbox name, see imap_open for more
information
<b> new_mbox string </b>The new mailbox name, see imap_open for more
information
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_reopen" autocomplete_append="($imap_stream, $mailbox, $options = null, $n_retries = null);">
<reference>imap_reopen($imap_stream, $mailbox, $options = null, $n_retries = null);
Reopen IMAP stream to new mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b> options int[optional] </b>The options are a bit mask with one or more of
the following:
OP_READONLY - Open mailbox read-only
<b> n_retries int[optional] </b>Number of maximum connect attempts
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_rfc822_parse_adrlist" autocomplete_append="($address, $default_host);">
<reference>imap_rfc822_parse_adrlist($address, $default_host);
Parses an address string
<b> address string </b>A string containing addresses
<b> default_host string </b>The default host name
<b>returns</b>  array an array of objects. The objects properties are:
mailbox - the mailbox name (username)
host - the host name
personal - the personal name
adl - at domain source route
</reference></element>
<element pattern="imap_rfc822_parse_headers" autocomplete_append="($headers, $defaulthost = null);">
<reference>imap_rfc822_parse_headers($headers, $defaulthost = null);
Parse mail headers from a string
<b> headers string </b>The parsed headers data
<b> defaulthost string[optional] </b>The default host name
<b>returns</b>  object an object similar to the one returned by
imap_header, except for the flags and other 
properties that come from the IMAP server.
</reference></element>
<element pattern="imap_rfc822_write_address" autocomplete_append="($mailbox, $host, $personal);">
<reference>imap_rfc822_write_address($mailbox, $host, $personal);
Returns a properly formatted email address given the mailbox, host, and personal info
<b> mailbox string </b>The mailbox name, see imap_open for more
information
<b> host string </b>The email host part
<b> personal string </b>The name of the account owner
<b>returns</b>  string a string properly formatted email address as defined in RFC2822.
</reference></element>
<element pattern="imap_savebody" autocomplete_append="($imap_stream, $file, $msg_number, $part_number = null, $options = null);">
<reference>imap_savebody($imap_stream, $file, $msg_number, $part_number = null, $options = null);
Save a specific body section to a file
<b> imap_stream resource </b><b> file mixed </b>The path to the saved file as a string, or a valid file descriptor
returned by fopen.
<b> msg_number int </b>The message number
<b> part_number string[optional] </b>The part number. It is a string of integers delimited by period which
index into a body part list as per the IMAP4 specification
<b> options int[optional] </b>A bitmask with one or more of the following:
FT_UID - The msg_number is a UID
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_search" autocomplete_append="($imap_stream, $criteria, $options = null, $charset = null);">
<reference>imap_search($imap_stream, $criteria, $options = null, $charset = null);
This function returns an array of messages matching the given search criteria
<b> imap_stream resource </b><b> criteria string </b>A string, delimited by spaces, in which the following keywords are
allowed. Any multi-word arguments (e.g. FROM "joey smith") must be
quoted.
ALL - return all messages matching the rest of the criteria
<b> options int[optional] </b>Valid values for options are 
SE_UID, which causes the returned array to
contain UIDs instead of messages sequence numbers.
<b> charset string[optional] </b><b>returns</b>  array an array of message numbers or UIDs.
Return false if it does not understand the search
criteria or no messages have been found.
</reference></element>
<element pattern="imap_set_quota" autocomplete_append="($imap_stream, $quota_root, $quota_limit);">
<reference>imap_set_quota($imap_stream, $quota_root, $quota_limit);
Sets a quota for a given mailbox
<b> imap_stream resource </b><b> quota_root string </b>The mailbox to have a quota set. This should follow the IMAP standard
format for a mailbox: user.name.
<b> quota_limit int </b>The maximum size (in KB) for the quota_root
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_setacl" autocomplete_append="($imap_stream, $mailbox, $id, $rights);">
<reference>imap_setacl($imap_stream, $mailbox, $id, $rights);
Sets the ACL for a giving mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b> id string </b>The user to give the rights to.
<b> rights string </b>The rights to give to the user. Passing an empty string will delete
acl.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_setflag_full" autocomplete_append="($imap_stream, $sequence, $flag, $options = null);">
<reference>imap_setflag_full($imap_stream, $sequence, $flag, $options = null);
Sets flags on messages
<b> imap_stream resource </b><b> sequence string </b>A sequence of message numbers. You can enumerate desired messages
with the X,Y syntax, or retrieve all messages 
within an interval with the X:Y syntax
<b> flag string </b>The flags which you can set are \\Seen, 
\\Answered, \\Flagged,
\\Deleted, and \\Draft as
defined by RFC2060.
<b> options int[optional] </b>A bit mask that may contain the single option:
ST_UID - The sequence argument contains UIDs
instead of sequence numbers
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_sort" autocomplete_append="($imap_stream, $criteria, $reverse, $options = null, $search_criteria = null, $charset = null);">
<reference>imap_sort($imap_stream, $criteria, $reverse, $options = null, $search_criteria = null, $charset = null);
Gets and sort messages
<b> imap_stream resource </b><b> criteria int </b>Criteria can be one (and only one) of the following:
SORTDATE - message Date
<b> reverse int </b>Set this to 1 for reverse sorting
<b> options int[optional] </b>The options are a bitmask of one or more of the
following:
SE_UID - Return UIDs instead of sequence numbers
<b> search_criteria string[optional] </b><b> charset string[optional] </b><b>returns</b>  array an array of message numbers sorted by the given
parameters.
</reference></element>
<element pattern="imap_status" autocomplete_append="($imap_stream, $mailbox, $options);">
<reference>imap_status($imap_stream, $mailbox, $options);
Returns status information on a mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b> options int </b>Valid flags are:
SA_MESSAGES - set status-&gt;messages to the
number of messages in the mailbox
<b>returns</b>  object This function returns an object containing status information.
The object has the following properties: messages,
recent, unseen, 
uidnext, and uidvalidity. 
flags is also set, which contains a bitmask which can
be checked against any of the above constants.
</reference></element>
<element pattern="imap_subscribe" autocomplete_append="($imap_stream, $mailbox);">
<reference>imap_subscribe($imap_stream, $mailbox);
Subscribe to a mailbox
<b> imap_stream resource </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_thread" autocomplete_append="($imap_stream, $options = null);">
<reference>imap_thread($imap_stream, $options = null);
Returns a tree of threaded message
<b> imap_stream resource </b><b> options int[optional] </b><b>returns</b>  array imap_thread returns an associative array containing
a tree of messages threaded by REFERENCES, or false
on error.
Every message in the current mailbox will be represented by three entries
in the resulting array:
$thread["XX.num"] - current message number
$thread["XX.next"]
$thread["XX.branch"]
</reference></element>
<element pattern="imap_timeout" autocomplete_append="($timeout_type, $timeout = null);">
<reference>imap_timeout($timeout_type, $timeout = null);
Set or fetch imap timeout
<b> timeout_type int </b>One of the following:
IMAP_OPENTIMEOUT,
IMAP_READTIMEOUT,
IMAP_WRITETIMEOUT, or
IMAP_CLOSETIMEOUT.
<b> timeout int[optional] </b>The timeout, in seconds.
<b>returns</b>  mixed If the timeout parameter is set, this function
returns true on success and false on failure.
If timeout is not provided or evaluates to -1,
the current timeout value of timeout_type is
returned as an integer.
</reference></element>
<element pattern="imap_uid" autocomplete_append="($imap_stream, $msg_number);">
<reference>imap_uid($imap_stream, $msg_number);
This function returns the UID for the given message sequence number
<b> imap_stream resource </b><b> msg_number int </b>The message number.
<b>returns</b>  int The UID of the given message.
</reference></element>
<element pattern="imap_undelete" autocomplete_append="($imap_stream, $msg_number, $flags = null);">
<reference>imap_undelete($imap_stream, $msg_number, $flags = null);
Unmark the message which is marked deleted
<b> imap_stream resource </b><b> msg_number int </b>The message number
<b> flags int[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_unsubscribe" autocomplete_append="($imap_stream, $mailbox);">
<reference>imap_unsubscribe($imap_stream, $mailbox);
Unsubscribe from a mailbox
<b> imap_stream string </b><b> mailbox string </b>The mailbox name, see imap_open for more
information
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="imap_utf7_decode" autocomplete_append="($text);">
<reference>imap_utf7_decode($text);
Decodes a modified UTF-7 encoded string
<b> text string </b>A modified UTF-7 encoding string, as defined in RFC 2060, section 5.1.3 (original UTF-7
was defined in RFC1642).
<b>returns</b>  string a string that is encoded in ISO-8859-1 and consists of the same
sequence of characters in text, or false
if text contains invalid modified UTF-7 sequence
or text contains a character that is not part of
ISO-8859-1 character set.
</reference></element>
<element pattern="imap_utf7_encode" autocomplete_append="($data);">
<reference>imap_utf7_encode($data);
Converts ISO-8859-1 string to modified UTF-7 text
<b> data string </b>An ISO-8859-1 string.
<b>returns</b>  string data encoded with the modified UTF-7
encoding as defined in RFC 2060, 
section 5.1.3 (original UTF-7 was defined in RFC1642).
</reference></element>
<element pattern="imap_utf8" autocomplete_append="($mime_encoded_text);">
<reference>imap_utf8($mime_encoded_text);
Converts MIME-encoded text to UTF-8
<b> mime_encoded_text string </b>A MIME encoded string. MIME encoding method and the UTF-8 
specification are described in RFC2047 and RFC2044 respectively.
<b>returns</b>  string an UTF-8 encoded string.
</reference></element>
<element pattern="ifx_affected_rows"/>
<element pattern="ifx_blobinfile_mode"/>
<element pattern="ifx_byteasvarchar"/>
<element pattern="ifx_close"/>
<element pattern="ifx_connect"/>
<element pattern="ifx_copy_blob"/>
<element pattern="ifx_create_blob"/>
<element pattern="ifx_create_char"/>
<element pattern="ifx_do"/>
<element pattern="ifx_error"/>
<element pattern="ifx_errormsg"/>
<element pattern="ifx_fetch_row"/>
<element pattern="ifx_fieldproperties"/>
<element pattern="ifx_fieldtypes"/>
<element pattern="ifx_free_blob"/>
<element pattern="ifx_free_char"/>
<element pattern="ifx_free_result"/>
<element pattern="ifx_get_blob"/>
<element pattern="ifx_get_char"/>
<element pattern="ifx_getsqlca"/>
<element pattern="ifx_htmltbl_result"/>
<element pattern="ifx_nullformat"/>
<element pattern="ifx_num_fields"/>
<element pattern="ifx_num_rows"/>
<element pattern="ifx_pconnect"/>
<element pattern="ifx_prepare"/>
<element pattern="ifx_query"/>
<element pattern="ifx_textasvarchar"/>
<element pattern="ifx_update_blob"/>
<element pattern="ifx_update_char"/>
<element pattern="ifxus_close_slob"/>
<element pattern="ifxus_create_slob"/>
<element pattern="ifxus_free_slob"/>
<element pattern="ifxus_open_slob"/>
<element pattern="ifxus_read_slob"/>
<element pattern="ifxus_seek_slob"/>
<element pattern="ifxus_tell_slob"/>
<element pattern="ifxus_write_slob"/>
<element pattern="ingres_autocommit"/>
<element pattern="ingres_close"/>
<element pattern="ingres_commit"/>
<element pattern="ingres_connect"/>
<element pattern="ingres_cursor"/>
<element pattern="ingres_errno"/>
<element pattern="ingres_error"/>
<element pattern="ingres_errsqlstate"/>
<element pattern="ingres_fetch_array"/>
<element pattern="ingres_fetch_object"/>
<element pattern="ingres_fetch_row"/>
<element pattern="ingres_field_length"/>
<element pattern="ingres_field_name"/>
<element pattern="ingres_field_nullable"/>
<element pattern="ingres_field_precision"/>
<element pattern="ingres_field_scale"/>
<element pattern="ingres_field_type"/>
<element pattern="ingres_num_fields"/>
<element pattern="ingres_num_rows"/>
<element pattern="ingres_pconnect"/>
<element pattern="ingres_query"/>
<element pattern="ingres_rollback"/>
<element pattern="ircg_channel_mode"/>
<element pattern="ircg_disconnect"/>
<element pattern="ircg_eval_ecmascript_params"/>
<element pattern="ircg_fetch_error_msg"/>
<element pattern="ircg_get_username"/>
<element pattern="ircg_html_encode"/>
<element pattern="ircg_ignore_add"/>
<element pattern="ircg_ignore_del"/>
<element pattern="ircg_invite"/>
<element pattern="ircg_is_conn_alive"/>
<element pattern="ircg_join"/>
<element pattern="ircg_kick"/>
<element pattern="ircg_list"/>
<element pattern="ircg_lookup_format_messages"/>
<element pattern="ircg_lusers"/>
<element pattern="ircg_msg"/>
<element pattern="ircg_names"/>
<element pattern="ircg_nick"/>
<element pattern="ircg_nickname_escape"/>
<element pattern="ircg_nickname_unescape"/>
<element pattern="ircg_notice"/>
<element pattern="ircg_oper"/>
<element pattern="ircg_part"/>
<element pattern="ircg_pconnect"/>
<element pattern="ircg_register_format_messages"/>
<element pattern="ircg_set_current"/>
<element pattern="ircg_set_file"/>
<element pattern="ircg_set_on_die"/>
<element pattern="ircg_topic"/>
<element pattern="ircg_who"/>
<element pattern="ircg_whois"/>
<element pattern="java_last_exception_clear"/>
<element pattern="java_last_exception_get"/>
<element pattern="json_decode" autocomplete_append="($json, $assoc = null);">
<reference>json_decode($json, $assoc = null);
Decodes a JSON string
<b> json string </b>The json string being decoded.
<b> assoc bool[optional] </b>When true, returned objects will be converted into
associative arrays.
<b>returns</b>  mixed an object or if the optional
assoc parameter is true, an associative 
array is instead returned.
</reference></element>
<element pattern="json_encode" autocomplete_append="($value);">
<reference>json_encode($value);
Returns the JSON representation of a value
<b> value mixed </b>The value being encoded. Can be any type except
a resource.
This function only works with UTF-8 encoded data.
<b>returns</b>  string a JSON encoded string on success.
</reference></element>
<element pattern="kadm5_chpass_principal"/>
<element pattern="kadm5_create_principal"/>
<element pattern="kadm5_delete_principal"/>
<element pattern="kadm5_destroy"/>
<element pattern="kadm5_flush"/>
<element pattern="kadm5_get_policies"/>
<element pattern="kadm5_get_principal"/>
<element pattern="kadm5_get_principals"/>
<element pattern="kadm5_init_with_password"/>
<element pattern="kadm5_modify_principal"/>
<element pattern="ldap_8859_to_t61"/>
<element pattern="ldap_add" autocomplete_append="($link_identifier, $dn, array $entry);">
<reference>ldap_add($link_identifier, $dn, array $entry);
Add entries to LDAP directory
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b> entry array </b>An array that specifies the information about the entry. The values in
the entries are indexed by individual attributes.
In case of multiple values for an attribute, they are indexed using
integers starting with 0.
]]&gt;
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_bind" autocomplete_append="($link_identifier, $bind_rdn = null, $bind_password = null);">
<reference>ldap_bind($link_identifier, $bind_rdn = null, $bind_password = null);
Bind to LDAP directory
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> bind_rdn string[optional] </b><b> bind_password string[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_compare" autocomplete_append="($link_identifier, $dn, $attribute, $value);">
<reference>ldap_compare($link_identifier, $dn, $attribute, $value);
Compare value of attribute found in entry specified with DN
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b> attribute string </b>The attribute name.
<b> value string </b>The compared value.
<b>returns</b>  mixed true if value matches otherwise returns
false. Returns -1 on error.
</reference></element>
<element pattern="ldap_connect" autocomplete_append="($hostname = null, $port = null);">
<reference>ldap_connect($hostname = null, $port = null);
Connect to an LDAP server
<b> hostname string[optional] </b>If you are using OpenLDAP 2.x.x you can specify a URL instead of the
hostname. To use LDAP with SSL, compile OpenLDAP 2.x.x with SSL
support, configure PHP with SSL, and set this parameter as 
ldaps://hostname/.
<b> port int[optional] </b>The port to connect to. Not used when using URLs. Defaults to 389.
<b>returns</b>  resource a positive LDAP link identifier on success, or false on error.
When OpenLDAP 2.x.x is used, ldap_connect will always
return a resource as it does not actually connect but just
initializes the connecting parameters. The actual connect happens with
the next calls to ldap_* funcs, usually with
ldap_bind.
If no arguments are specified then the link identifier of the already
opened link will be returned.
</reference></element>
<element pattern="ldap_count_entries" autocomplete_append="($link_identifier, $result_identifier);">
<reference>ldap_count_entries($link_identifier, $result_identifier);
Count the number of entries in a search
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_identifier resource </b>The internal LDAP result.
<b>returns</b>  int number of entries in the result or false on error.
</reference></element>
<element pattern="ldap_delete" autocomplete_append="($link_identifier, $dn);">
<reference>ldap_delete($link_identifier, $dn);
Delete an entry from a directory
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_dn2ufn" autocomplete_append="($dn);">
<reference>ldap_dn2ufn($dn);
Convert DN to User Friendly Naming format
<b> dn string </b>The distinguished name of an LDAP entity.
<b>returns</b>  string the user friendly name.
</reference></element>
<element pattern="ldap_err2str" autocomplete_append="($errno);">
<reference>ldap_err2str($errno);
Convert LDAP error number into string error message
<b> errno int </b>The error number.
<b>returns</b>  string the error message, as a string.
</reference></element>
<element pattern="ldap_errno" autocomplete_append="($link_identifier);">
<reference>ldap_errno($link_identifier);
Return the LDAP error number of the last LDAP command
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b>returns</b>  int Return the LDAP error number of the last LDAP command for this
link.
</reference></element>
<element pattern="ldap_error" autocomplete_append="($link_identifier);">
<reference>ldap_error($link_identifier);
Return the LDAP error message of the last LDAP command
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b>returns</b>  string string error message.
</reference></element>
<element pattern="ldap_explode_dn" autocomplete_append="($dn, $with_attrib);">
<reference>ldap_explode_dn($dn, $with_attrib);
Splits DN into its component parts
<b> dn string </b>The distinguished name of an LDAP entity.
<b> with_attrib int </b>Used to request if the RDNs are returned with only values or their
attributes as well. To get RDNs with the attributes (i.e. in
attribute=value format) set with_attrib to 0
and to get only values set it to 1.
<b>returns</b>  array an array of all DN components.
</reference></element>
<element pattern="ldap_first_attribute" autocomplete_append="($link_identifier, $result_entry_identifier);">
<reference>ldap_first_attribute($link_identifier, $result_entry_identifier);
Return first attribute
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_entry_identifier resource </b><b>returns</b>  string the first attribute in the entry on success and false on
error.
</reference></element>
<element pattern="ldap_first_entry" autocomplete_append="($link_identifier, $result_identifier);">
<reference>ldap_first_entry($link_identifier, $result_identifier);
Return first result id
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_identifier resource </b><b>returns</b>  resource the result entry identifier for the first entry on success and
false on error.
</reference></element>
<element pattern="ldap_first_reference" autocomplete_append="($link, $result);">
<reference>ldap_first_reference($link, $result);
Return first reference
<b> link resource </b><b> result resource </b><b>returns</b>  resource 
</reference></element>
<element pattern="ldap_free_result" autocomplete_append="($result_identifier);">
<reference>ldap_free_result($result_identifier);
Free result memory
<b> result_identifier resource </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_get_attributes" autocomplete_append="($link_identifier, $result_entry_identifier);">
<reference>ldap_get_attributes($link_identifier, $result_entry_identifier);
Get attributes from a search result entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_entry_identifier resource </b><b>returns</b>  array a complete entry information in a multi-dimensional array
on success and false on error.
</reference></element>
<element pattern="ldap_get_dn" autocomplete_append="($link_identifier, $result_entry_identifier);">
<reference>ldap_get_dn($link_identifier, $result_entry_identifier);
Get the DN of a result entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_entry_identifier resource </b><b>returns</b>  string the DN of the result entry and false on error.
</reference></element>
<element pattern="ldap_get_entries" autocomplete_append="($link_identifier, $result_identifier);">
<reference>ldap_get_entries($link_identifier, $result_identifier);
Get all result entries
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_identifier resource </b><b>returns</b>  array a complete result information in a multi-dimensional array on
success and false on error.
The structure of the array is as follows.
The attribute index is converted to lowercase. (Attributes are
case-insensitive for directory servers, but not when used as
array indices.)
</reference></element>
<element pattern="ldap_get_option" autocomplete_append="($link_identifier, $option, &amp;$retval);">
<reference>ldap_get_option($link_identifier, $option, &amp;$retval);
Get the current value for given option
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> option int </b>The parameter option can be one of:

LDAP_OPT_DEREF integer
LDAP_OPT_SIZELIMIT integer
LDAP_OPT_TIMELIMIT integer
LDAP_OPT_NETWORK_TIMEOUT integer
LDAP_OPT_PROTOCOL_VERSION integer
LDAP_OPT_ERROR_NUMBER integer
LDAP_OPT_REFERRALS bool
LDAP_OPT_RESTART bool
LDAP_OPT_HOST_NAME string
LDAP_OPT_ERROR_STRING string
LDAP_OPT_MATCHED_DN string
LDAP_OPT_SERVER_CONTROLS array
LDAP_OPT_CLIENT_CONTROLS array
<b> retval mixed </b>This will be set to the option value.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_get_values_len" autocomplete_append="($link_identifier, $result_entry_identifier, $attribute);">
<reference>ldap_get_values_len($link_identifier, $result_entry_identifier, $attribute);
Get all binary values from a result entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_entry_identifier resource </b><b> attribute string </b><b>returns</b>  array an array of values for the attribute on success and false on
error. Individual values are accessed by integer index in the array. The
first index is 0. The number of values can be found by indexing "count"
in the resultant array.
</reference></element>
<element pattern="ldap_get_values" autocomplete_append="($link_identifier, $result_entry_identifier, $attribute);">
<reference>ldap_get_values($link_identifier, $result_entry_identifier, $attribute);
Get all values from a result entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_entry_identifier resource </b><b> attribute string </b><b>returns</b>  array an array of values for the attribute on success and false on
error. The number of values can be found by indexing "count" in the
resultant array. Individual values are accessed by integer index in the
array. The first index is 0.
LDAP allows more than one entry for an attribute, so it can, for example,
store a number of email addresses for one person's directory entry all
labeled with the attribute "mail"
return_value["count"] = number of values for attribute
return_value[0] = first value of attribute
return_value[i] = ith value of attribute
</reference></element>
<element pattern="ldap_list" autocomplete_append="($link_identifier, $base_dn, $filter, array $attributes = null, $attrsonly = null, $sizelimit = null, $timelimit = null, $deref = null);">
<reference>ldap_list($link_identifier, $base_dn, $filter, array $attributes = null, $attrsonly = null, $sizelimit = null, $timelimit = null, $deref = null);
Single-level search
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> base_dn string </b>The base DN for the directory.
<b> filter string </b><b> attributes array[optional] </b>An array of the required attributes, e.g. array("mail", "sn", "cn").
Note that the "dn" is always returned irrespective of which attributes
types are requested.
Using this parameter is much more efficient than the default action
(which is to return all attributes and their associated values). 
The use of this parameter should therefore be considered good
practice.
<b> attrsonly int[optional] </b>Should be set to 1 if only attribute types are wanted. If set to 0
both attributes types and attribute values are fetched which is the
default behaviour.
<b> sizelimit int[optional] </b>Enables you to limit the count of entries fetched. Setting this to 0
means no limit.
This parameter can NOT override server-side preset sizelimit. You can
set it lower though.
Some directory server hosts will be configured to return no more than
a preset number of entries. If this occurs, the server will indicate
that it has only returned a partial results set. This also occurs if
you use this parameter to limit the count of fetched entries.
<b> timelimit int[optional] </b>Sets the number of seconds how long is spend on the search. Setting
this to 0 means no limit.
This parameter can NOT override server-side preset timelimit. You can
set it lower though.
<b> deref int[optional] </b>Specifies how aliases should be handled during the search. It can be
one of the following:
LDAP_DEREF_NEVER - (default) aliases are never
dereferenced.
<b>returns</b>  resource a search result identifier or false on error.
</reference></element>
<element pattern="ldap_mod_add" autocomplete_append="($link_identifier, $dn, array $entry);">
<reference>ldap_mod_add($link_identifier, $dn, array $entry);
Add attribute values to current attributes
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b> entry array </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_mod_del" autocomplete_append="($link_identifier, $dn, array $entry);">
<reference>ldap_mod_del($link_identifier, $dn, array $entry);
Delete attribute values from current attributes
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b> entry array </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_mod_replace" autocomplete_append="($link_identifier, $dn, array $entry);">
<reference>ldap_mod_replace($link_identifier, $dn, array $entry);
Replace attribute values with new ones
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b> entry array </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_modify" autocomplete_append="($link_identifier, $dn, array $entry);">
<reference>ldap_modify($link_identifier, $dn, array $entry);
Modify an LDAP entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b> entry array </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_next_attribute" autocomplete_append="($link_identifier, $result_entry_identifier);">
<reference>ldap_next_attribute($link_identifier, $result_entry_identifier);
Get the next attribute in result
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_entry_identifier resource </b><b>returns</b>  string the next attribute in an entry on success and false on
error.
</reference></element>
<element pattern="ldap_next_entry" autocomplete_append="($link_identifier, $result_entry_identifier);">
<reference>ldap_next_entry($link_identifier, $result_entry_identifier);
Get next result entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> result_entry_identifier resource </b><b>returns</b>  resource entry identifier for the next entry in the result whose entries
are being read starting with ldap_first_entry. If
there are no more entries in the result then it returns false.
</reference></element>
<element pattern="ldap_next_reference" autocomplete_append="($link, $entry);">
<reference>ldap_next_reference($link, $entry);
Get next reference
<b> link resource </b><b> entry resource </b><b>returns</b>  resource 
</reference></element>
<element pattern="ldap_parse_reference" autocomplete_append="($link, $entry, array &amp;$referrals);">
<reference>ldap_parse_reference($link, $entry, array &amp;$referrals);
Extract information from reference entry
<b> link resource </b><b> entry resource </b><b> referrals array </b><b>returns</b>  bool 
</reference></element>
<element pattern="ldap_parse_result" autocomplete_append="($link, $result, &amp;$errcode, &amp;$matcheddn = null, &amp;$errmsg = null, array &amp;$referrals = null);">
<reference>ldap_parse_result($link, $result, &amp;$errcode, &amp;$matcheddn = null, &amp;$errmsg = null, array &amp;$referrals = null);
Extract information from result
<b> link resource </b><b> result resource </b><b> errcode int </b><b> matcheddn string[optional] </b><b> errmsg string[optional] </b><b> referrals array[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="ldap_read" autocomplete_append="($link_identifier, $base_dn, $filter, array $attributes = null, $attrsonly = null, $sizelimit = null, $timelimit = null, $deref = null);">
<reference>ldap_read($link_identifier, $base_dn, $filter, array $attributes = null, $attrsonly = null, $sizelimit = null, $timelimit = null, $deref = null);
Read an entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> base_dn string </b>The base DN for the directory.
<b> filter string </b>An empty filter is not allowed. If you want to retrieve absolutely all
information for this entry, use a filter of 
objectClass=*. If you know which entry types are
used on the directory server, you might use an appropriate filter such
as objectClass=inetOrgPerson.
<b> attributes array[optional] </b>An array of the required attributes, e.g. array("mail", "sn", "cn").
Note that the "dn" is always returned irrespective of which attributes
types are requested.
Using this parameter is much more efficient than the default action
(which is to return all attributes and their associated values). 
The use of this parameter should therefore be considered good
practice.
<b> attrsonly int[optional] </b>Should be set to 1 if only attribute types are wanted. If set to 0
both attributes types and attribute values are fetched which is the
default behaviour.
<b> sizelimit int[optional] </b>Enables you to limit the count of entries fetched. Setting this to 0
means no limit.
This parameter can NOT override server-side preset sizelimit. You can
set it lower though.
Some directory server hosts will be configured to return no more than
a preset number of entries. If this occurs, the server will indicate
that it has only returned a partial results set. This also occurs if
you use this parameter to limit the count of fetched entries.
<b> timelimit int[optional] </b>Sets the number of seconds how long is spend on the search. Setting
this to 0 means no limit.
This parameter can NOT override server-side preset timelimit. You can
set it lower though.
<b> deref int[optional] </b>Specifies how aliases should be handled during the search. It can be
one of the following:
LDAP_DEREF_NEVER - (default) aliases are never
dereferenced.
<b>returns</b>  resource a search result identifier or false on error.
</reference></element>
<element pattern="ldap_rename" autocomplete_append="($link_identifier, $dn, $newrdn, $newparent, $deleteoldrdn);">
<reference>ldap_rename($link_identifier, $dn, $newrdn, $newparent, $deleteoldrdn);
Modify the name of an entry
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> dn string </b>The distinguished name of an LDAP entity.
<b> newrdn string </b>The new RDN.
<b> newparent string </b>The new parent/superior entry.
<b> deleteoldrdn bool </b>If true the old RDN value(s) is removed, else the old RDN value(s)
is retained as non-distinguished values of the entry.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_sasl_bind"/>
<element pattern="ldap_search" autocomplete_append="($link_identifier, $base_dn, $filter, array $attributes = null, $attrsonly = null, $sizelimit = null, $timelimit = null, $deref = null);">
<reference>ldap_search($link_identifier, $base_dn, $filter, array $attributes = null, $attrsonly = null, $sizelimit = null, $timelimit = null, $deref = null);
Search LDAP tree
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> base_dn string </b>The base DN for the directory.
<b> filter string </b>The search filter can be simple or advanced, using boolean operators in
the format described in the LDAP documentation (see the Netscape Directory SDK for full
information on filters).
<b> attributes array[optional] </b>An array of the required attributes, e.g. array("mail", "sn", "cn").
Note that the "dn" is always returned irrespective of which attributes
types are requested.
Using this parameter is much more efficient than the default action
(which is to return all attributes and their associated values). 
The use of this parameter should therefore be considered good
practice.
<b> attrsonly int[optional] </b>Should be set to 1 if only attribute types are wanted. If set to 0
both attributes types and attribute values are fetched which is the
default behaviour.
<b> sizelimit int[optional] </b>Enables you to limit the count of entries fetched. Setting this to 0
means no limit.
This parameter can NOT override server-side preset sizelimit. You can
set it lower though.
Some directory server hosts will be configured to return no more than
a preset number of entries. If this occurs, the server will indicate
that it has only returned a partial results set. This also occurs if
you use this parameter to limit the count of fetched entries.
<b> timelimit int[optional] </b>Sets the number of seconds how long is spend on the search. Setting
this to 0 means no limit.
This parameter can NOT override server-side preset timelimit. You can
set it lower though.
<b> deref int[optional] </b>Specifies how aliases should be handled during the search. It can be
one of the following:
LDAP_DEREF_NEVER - (default) aliases are never
dereferenced.
<b>returns</b>  resource a search result identifier or false on error.
</reference></element>
<element pattern="ldap_set_option" autocomplete_append="($link_identifier, $option, $newval);">
<reference>ldap_set_option($link_identifier, $option, $newval);
Set the value of the given option
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b> option int </b>The parameter option can be one of:

LDAP_OPT_DEREF integer
LDAP_OPT_SIZELIMIT integer
LDAP_OPT_TIMELIMIT integer
LDAP_OPT_NETWORK_TIMEOUT integer
LDAP_OPT_PROTOCOL_VERSION integer
LDAP_OPT_ERROR_NUMBER integer
LDAP_OPT_REFERRALS bool
LDAP_OPT_RESTART bool
LDAP_OPT_HOST_NAME string
LDAP_OPT_ERROR_STRING string
LDAP_OPT_MATCHED_DN string
LDAP_OPT_SERVER_CONTROLS array
LDAP_OPT_CLIENT_CONTROLS array

LDAP_OPT_SERVER_CONTROLS and 
LDAP_OPT_CLIENT_CONTROLS require a list of
controls, this means that the value must be an array of controls. A
control consists of an oid identifying the control,
an optional value, and an optional flag for
criticality. In PHP a control is given by an
array containing an element with the key oid
and string value, and two optional elements. The optional
elements are key value with string value
and key iscritical with boolean value.
iscritical defaults to false
if not supplied. See draft-ietf-ldapext-ldap-c-api-xx.txt
for details. See also the second example below.
<b> newval mixed </b>The new value for the specified option.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ldap_set_rebind_proc" autocomplete_append="($link, $callback);">
<reference>ldap_set_rebind_proc($link, $callback);
Set a callback function to do re-binds on referral chasing
<b> link resource </b><b> callback callback </b><b>returns</b>  bool 
</reference></element>
<element pattern="ldap_sort" autocomplete_append="($link, $result, $sortfilter);">
<reference>ldap_sort($link, $result, $sortfilter);
Sort LDAP result entries
<b> link resource </b><b> result resource </b><b> sortfilter string </b><b>returns</b>  bool 
</reference></element>
<element pattern="ldap_start_tls" autocomplete_append="($link);">
<reference>ldap_start_tls($link);
Start TLS
<b> link resource </b><b>returns</b>  bool 
</reference></element>
<element pattern="ldap_t61_to_8859"/>
<element pattern="ldap_unbind" autocomplete_append="($link_identifier);">
<reference>ldap_unbind($link_identifier);
Unbind from LDAP directory
<b> link_identifier resource </b>An LDAP link identifier, returned by ldap_connect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="libxml_clear_errors" autocomplete_append="();">
<reference>libxml_clear_errors();
Clear libxml error buffer
<b>returns</b>  void 
</reference></element>
<element pattern="libxml_get_errors" autocomplete_append="();">
<reference>libxml_get_errors();
Retrieve array of errors
<b>returns</b>  array an array with LibXMLError objects if there are any
errors in the buffer, or an empty array otherwise.
</reference></element>
<element pattern="libxml_get_last_error" autocomplete_append="();">
<reference>libxml_get_last_error();
Retrieve last error from libxml
<b>returns</b>  LibXMLError a LibXMLError object if there is any error in the
buffer, false otherwise.
</reference></element>
<element pattern="libxml_set_streams_context" autocomplete_append="($streams_context);">
<reference>libxml_set_streams_context($streams_context);
Set the streams context for the next libxml document load or write
<b> streams_context resource </b>The stream context resource (created with
stream_context_create)
<b>returns</b>  void 
</reference></element>
<element pattern="libxml_use_internal_errors" autocomplete_append="($use_errors = null);">
<reference>libxml_use_internal_errors($use_errors = null);
Disable libxml errors and allow user to fetch error information as needed
<b> use_errors bool[optional] </b>Whether to enable user error handling. Defaults to false.
<b>returns</b>  bool This function returns the previous value of
use_errors.
</reference></element>
<element pattern="notes_body"/>
<element pattern="notes_copy_db"/>
<element pattern="notes_create_db"/>
<element pattern="notes_create_note"/>
<element pattern="notes_drop_db"/>
<element pattern="notes_find_note"/>
<element pattern="notes_header_info"/>
<element pattern="notes_list_msgs"/>
<element pattern="notes_mark_read"/>
<element pattern="notes_mark_unread"/>
<element pattern="notes_nav_create"/>
<element pattern="notes_search"/>
<element pattern="notes_unread"/>
<element pattern="notes_version"/>
<element pattern="lzf_compress"/>
<element pattern="lzf_decompress"/>
<element pattern="lzf_optimized_for"/>
<element pattern="ezmlm_hash" autocomplete_append="($addr);">
<reference>ezmlm_hash($addr);
Calculate the hash value needed by EZMLM
<b> addr string </b>The email address that's being hashed.
<b>returns</b>  int The hash value of addr.
</reference></element>
<element pattern="mail" autocomplete_append="($to, $subject, $message, $additional_headers = null, $additional_parameters = null);">
<reference>mail($to, $subject, $message, $additional_headers = null, $additional_parameters = null);
Send mail
<b> to string </b>Receiver, or receivers of the mail.
The formatting of this string must comply with
RFC 2822. Some examples are:
user@example.com
user@example.com, anotheruser@example.com
User &amp;lt;user@example.com&amp;gt;
User &amp;lt;user@example.com&amp;gt;, Another User &amp;lt;anotheruser@example.com&amp;gt;
<b> subject string </b>Subject of the email to be sent.
This must not contain any newline characters, or the mail may not be
sent properly.
<b> message string </b>Message to be sent.
Each line should be separated with a LF (\n). Lines should not be larger
than 70 characters.
(Windows only) When PHP is talking to a SMTP server directly, if a full
stop is found on the start of a line, it is removed. To counter-act this,
replace these occurrences with a double dot.
]]&gt;
<b> additional_headers string[optional] </b>String to be inserted at the end of the email header.
This is typically used to add extra headers (From, Cc, and Bcc).
Multiple extra headers should be separated with a CRLF (\r\n).
When sending mail, the mail must contain
a From header. This can be set with the 
additional_headers parameter, or a default
can be set in &amp;php.ini;.
Failing to do this will result in an error
message similar to Warning: mail(): "sendmail_from" not
set in php.ini or custom "From:" header missing.
The From header sets also
Return-Path under Windows.
If messages are not received, try using a LF (\n) only.
Some poor quality Unix mail transfer agents replace LF by CRLF
automatically (which leads to doubling CR if CRLF is used).
This should be a last resort, as it does not comply with
RFC 2822.
<b> additional_parameters string[optional] </b>The additional_parameters parameter
can be used to pass an additional parameter to the program configured
to use when sending mail using the sendmail_path
configuration setting. For example, this can be used to set the
envelope sender address when using sendmail with the
-f sendmail option.
The user that the webserver runs as should be added as a trusted user to the
sendmail configuration to prevent a 'X-Warning' header from being added
to the message when the envelope sender (-f) is set using this method.
For sendmail users, this file is /etc/mail/trusted-users.
<b>returns</b>  bool true if the mail was successfully accepted for delivery, false otherwise.
It is important to note that just because the mail was accepted for delivery,
it does NOT mean the mail will actually reach the intended destination.
</reference></element>
<element pattern="mailparse_determine_best_xfer_encoding"/>
<element pattern="mailparse_msg_create"/>
<element pattern="mailparse_msg_extract_part_file"/>
<element pattern="mailparse_msg_extract_part"/>
<element pattern="mailparse_msg_extract_whole_part_file"/>
<element pattern="mailparse_msg_free"/>
<element pattern="mailparse_msg_get_part_data"/>
<element pattern="mailparse_msg_get_part"/>
<element pattern="mailparse_msg_get_structure"/>
<element pattern="mailparse_msg_parse_file"/>
<element pattern="mailparse_msg_parse"/>
<element pattern="mailparse_rfc822_parse_addresses"/>
<element pattern="mailparse_stream_encode"/>
<element pattern="mailparse_uudecode_all"/>
<element pattern="abs" autocomplete_append="($number);">
<reference>abs($number);
Absolute value
<b> number mixed </b>The numeric value to process
<b>returns</b>  number The absoulte value of number. If the
argument number is
of type float, the return type is also float,
otherwise it is integer (as float usually has a
bigger value range than integer).
</reference></element>
<element pattern="acos" autocomplete_append="($arg);">
<reference>acos($arg);
Arc cosine
<b> arg float </b>The argument to process
<b>returns</b>  float The arc consine of arg in radians.
</reference></element>
<element pattern="acosh" autocomplete_append="($arg);">
<reference>acosh($arg);
Inverse hyperbolic cosine
<b> arg float </b>The value to process
<b>returns</b>  float The inverse hyperbolic cosine of arg
</reference></element>
<element pattern="asin" autocomplete_append="($arg);">
<reference>asin($arg);
Arc sine
<b> arg float </b>The argument to process
<b>returns</b>  float The arc sine of arg in radians
</reference></element>
<element pattern="asinh" autocomplete_append="($arg);">
<reference>asinh($arg);
Inverse hyperbolic sine
<b> arg float </b>The argument to process
<b>returns</b>  float The inverse hyperbolic sine of arg
</reference></element>
<element pattern="atan2" autocomplete_append="($y, $x);">
<reference>atan2($y, $x);
Arc tangent of two variables
<b> y float </b>Dividend parameter
<b> x float </b>Divisor parameter
<b>returns</b>  float The arc tangent of y/x 
in radians.
</reference></element>
<element pattern="atan" autocomplete_append="($arg);">
<reference>atan($arg);
Arc tangent
<b> arg float </b>The argument to process
<b>returns</b>  float The arc tangent of arg in radians.
</reference></element>
<element pattern="atanh" autocomplete_append="($arg);">
<reference>atanh($arg);
Inverse hyperbolic tangent
<b> arg float </b>The argument to process
<b>returns</b>  float Inverse hyperbolic tangent of arg
</reference></element>
<element pattern="base_convert" autocomplete_append="($number, $frombase, $tobase);">
<reference>base_convert($number, $frombase, $tobase);
Convert a number between arbitrary bases
<b> number string </b>The number to convert
<b> frombase int </b>The base number is in
<b> tobase int </b>The base to convert number to
<b>returns</b>  string number converted to base tobase
</reference></element>
<element pattern="bindec" autocomplete_append="($binary_string);">
<reference>bindec($binary_string);
Binary to decimal
<b> binary_string string </b>The binary string to convert
<b>returns</b>  number The decimal value of binary_string
</reference></element>
<element pattern="ceil" autocomplete_append="($value);">
<reference>ceil($value);
Round fractions up
<b> value float </b>The value to round
<b>returns</b>  float value rounded up to the next highest
integer.
The return value of ceil is still of type
float as the value range of float is 
usually bigger than that of integer.
</reference></element>
<element pattern="cos" autocomplete_append="($arg);">
<reference>cos($arg);
Cosine
<b> arg float </b>An angle in radians 
<b>returns</b>  float The cosine of arg
</reference></element>
<element pattern="cosh" autocomplete_append="($arg);">
<reference>cosh($arg);
Hyperbolic cosine
<b> arg float </b>The argument to process
<b>returns</b>  float The hyperbolic cosine of arg
</reference></element>
<element pattern="decbin" autocomplete_append="($number);">
<reference>decbin($number);
Decimal to binary
<b> number int </b>Decimal value to convert 
<b>returns</b>  string Binary string representation of number
</reference></element>
<element pattern="dechex" autocomplete_append="($number);">
<reference>dechex($number);
Decimal to hexadecimal
<b> number int </b>Decimal value to convert
<b>returns</b>  string Hexadecimal string representation of number
</reference></element>
<element pattern="decoct" autocomplete_append="($number);">
<reference>decoct($number);
Decimal to octal
<b> number int </b>Decimal value to convert
<b>returns</b>  string Octal string representation of number
</reference></element>
<element pattern="deg2rad" autocomplete_append="($number);">
<reference>deg2rad($number);
Converts the number in degrees to the radian equivalent
<b> number float </b>Angular value in degrees 
<b>returns</b>  float The radian equivalent of number
</reference></element>
<element pattern="exp" autocomplete_append="($arg);">
<reference>exp($arg);
Calculates the exponent of &lt;constant&gt;e&lt;/constant&gt;
<b> arg float </b>The argument to process
<b>returns</b>  float 'e' raised to the power of arg
</reference></element>
<element pattern="expm1" autocomplete_append="($arg);">
<reference>expm1($arg);
Returns exp(number) - 1, computed in a way that is accurate even
when the value of number is close to zero
<b> arg float </b>The argument to process
<b>returns</b>  float 'e' to the power of arg minus one
</reference></element>
<element pattern="floor" autocomplete_append="($value);">
<reference>floor($value);
Round fractions down
<b> value float </b><b>returns</b>  float value rounded to the next lowest integer.
The return value of floor is still of type
float because the value range of float is 
usually bigger than that of integer.
</reference></element>
<element pattern="fmod" autocomplete_append="($x, $y);">
<reference>fmod($x, $y);
Returns the floating point remainder (modulo) of the division
f the arguments
<b> x float </b>The dividend
<b> y float </b>The divisor
<b>returns</b>  float The floating point remainder of 
x/y
</reference></element>
<element pattern="getrandmax" autocomplete_append="();">
<reference>getrandmax();
Show largest possible random value
<b>returns</b>  int The largest possible random value returned by rand
</reference></element>
<element pattern="hexdec" autocomplete_append="($hex_string);">
<reference>hexdec($hex_string);
Hexadecimal to decimal
<b> hex_string string </b>The hexadecimal string to convert
<b>returns</b>  number The decimal representation of hex_string
</reference></element>
<element pattern="hypot" autocomplete_append="($x, $y);">
<reference>hypot($x, $y);
Calculate the length of the hypotenuse of a right-angle triangle
<b> x float </b>Length of first side
<b> y float </b>Length of second side
<b>returns</b>  float Calculated length of the hypotenuse
</reference></element>
<element pattern="is_finite" autocomplete_append="($val);">
<reference>is_finite($val);
Finds whether a value is a legal finite number
<b> val float </b>The value to check
<b>returns</b>  bool true if val is a legal finite
number within the allowed range for a PHP float on this platform,
else false.
</reference></element>
<element pattern="is_infinite" autocomplete_append="($val);">
<reference>is_infinite($val);
Finds whether a value is infinite
<b> val float </b>The value to check
<b>returns</b>  bool true if val is infinite, else false.
</reference></element>
<element pattern="is_nan" autocomplete_append="($val);">
<reference>is_nan($val);
Finds whether a value is not a number
<b> val float </b>The value to check
<b>returns</b>  bool true if val is 'not a number',
else false.
</reference></element>
<element pattern="lcg_value" autocomplete_append="();">
<reference>lcg_value();
Combined linear congruential generator
<b>returns</b>  float A pseudo random float value in the range of (0, 1)
</reference></element>
<element pattern="log10" autocomplete_append="($arg);">
<reference>log10($arg);
Base-10 logarithm
<b> arg float </b>The argument to process
<b>returns</b>  float The base-10 logaritm of arg
</reference></element>
<element pattern="log1p" autocomplete_append="($number);">
<reference>log1p($number);
Returns log(1 + number), computed in a way that is accurate even when
the value of number is close to zero
<b> number float </b>The argument to process
<b>returns</b>  float log(1 + number)
</reference></element>
<element pattern="log" autocomplete_append="($arg, $base = null);">
<reference>log($arg, $base = null);
Natural logarithm
<b> arg float </b>The value to calculate the logarithm for
<b> base float[optional] </b>The optional logarithmic base to use 
(defaults to 'e' and so to the natural logarithm).
<b>returns</b>  float The logarithm of arg to 
base, if given, or the
natural logarithm.
</reference></element>
<element pattern="max" autocomplete_append="(array $values);">
<reference>max(array $values);
Find highest value
<b> values array </b>An array containing the values.
<b>returns</b>  mixed max returns the numerically highest of the
parameter values.
</reference></element>
<element pattern="max" autocomplete_append="(array $values);">
<reference>max(array $values);
Find highest value
<b> values array </b>An array containing the values.
<b>returns</b>  mixed max returns the numerically highest of the
parameter values.
</reference></element>
<element pattern="min" autocomplete_append="(array $values);">
<reference>min(array $values);
Find lowest value
<b> values array </b>An array containing the values.
<b>returns</b>  mixed min returns the numerically lowest of the
parameter values.
</reference></element>
<element pattern="min" autocomplete_append="(array $values);">
<reference>min(array $values);
Find lowest value
<b> values array </b>An array containing the values.
<b>returns</b>  mixed min returns the numerically lowest of the
parameter values.
</reference></element>
<element pattern="mt_getrandmax" autocomplete_append="();">
<reference>mt_getrandmax();
Show largest possible random value
<b>returns</b>  int the maximum random value returned by mt_rand
</reference></element>
<element pattern="mt_rand" autocomplete_append="($min, $max);">
<reference>mt_rand($min, $max);
Generate a better random value
<b> min[optional]</b><b> max[optional]</b><b>returns</b>  int A random integer value between min (or 0)
and max (or mt_getrandmax, inclusive)
</reference></element>
<element pattern="mt_srand" autocomplete_append="($seed = null);">
<reference>mt_srand($seed = null);
Seed the better random number generator
<b> seed int[optional] </b>An optional seed value
<b>returns</b>  void 
</reference></element>
<element pattern="octdec" autocomplete_append="($octal_string);">
<reference>octdec($octal_string);
Octal to decimal
<b> octal_string string </b>The octal string to convert
<b>returns</b>  number The decimal representation of octal_string
</reference></element>
<element pattern="pi" autocomplete_append="();">
<reference>pi();
Get value of pi
<b>returns</b>  float The value of pi as float.
</reference></element>
<element pattern="pow" autocomplete_append="($base, $exp);">
<reference>pow($base, $exp);
Exponential expression
<b> base number </b>The base to use
<b> exp number </b>The exponent
<b>returns</b>  number base raised to the power of exp.
If the result can be represented as integer it will be returned as type
integer, else it will be returned as type float.
If the power cannot be computed false will be returned instead.
</reference></element>
<element pattern="rad2deg" autocomplete_append="($number);">
<reference>rad2deg($number);
Converts the radian number to the equivalent number in degrees
<b> number float </b>A radian value
<b>returns</b>  float The equivalent of number in degrees
</reference></element>
<element pattern="rand" autocomplete_append="($min, $max);">
<reference>rand($min, $max);
Generate a random integer
<b> min[optional]</b><b> max[optional]</b><b>returns</b>  int A pseudo random value between min
(or 0) and max (or getrandmax, inclusive).
</reference></element>
<element pattern="round" autocomplete_append="($val, $precision = null);">
<reference>round($val, $precision = null);
Rounds a float
<b> val float </b>The value to round
<b> precision int[optional] </b>The optional number of decimal digits to round to, defaults to 0
<b>returns</b>  float The rounded value
</reference></element>
<element pattern="sin" autocomplete_append="($arg);">
<reference>sin($arg);
Sine
<b> arg float </b>A value in radians
<b>returns</b>  float The sine of arg
</reference></element>
<element pattern="sinh" autocomplete_append="($arg);">
<reference>sinh($arg);
Hyperbolic sine
<b> arg float </b>The argument to process
<b>returns</b>  float The hyperbolic sine of arg
</reference></element>
<element pattern="sqrt" autocomplete_append="($arg);">
<reference>sqrt($arg);
Square root
<b> arg float </b>The argument to process
<b>returns</b>  float The square root of arg
or the special value NAN for negative numbers.
</reference></element>
<element pattern="srand" autocomplete_append="($seed = null);">
<reference>srand($seed = null);
Seed the random number generator
<b> seed int[optional] </b>Optional seed value
<b>returns</b>  void 
</reference></element>
<element pattern="tan" autocomplete_append="($arg);">
<reference>tan($arg);
Tangent
<b> arg float </b>The argument to process in radians 
<b>returns</b>  float The tangent of arg
</reference></element>
<element pattern="tanh" autocomplete_append="($arg);">
<reference>tanh($arg);
Hyperbolic tangent
<b> arg float </b>The argument to process
<b>returns</b>  float The hyperbolic tangent of arg
</reference></element>
<element pattern="maxdb_affected_rows"/>
<element pattern="maxdb_autocommit"/>
<element pattern="auto_commit"/>
<element pattern="maxdb_change_user"/>
<element pattern="change_user"/>
<element pattern="maxdb_character_set_name"/>
<element pattern="character_set_name"/>
<element pattern="maxdb_close"/>
<element pattern="close"/>
<element pattern="maxdb_commit"/>
<element pattern="commit"/>
<element pattern="maxdb_connect_errno"/>
<element pattern="maxdb_connect_error"/>
<element pattern="maxdb_connect"/>
<element pattern="__construct"/>
<element pattern="maxdb_data_seek"/>
<element pattern="data_seek"/>
<element pattern="maxdb_debug"/>
<element pattern="maxdb_disable_reads_from_master"/>
<element pattern="disable_reads_from_master"/>
<element pattern="maxdb_disable_rpl_parse"/>
<element pattern="maxdb_dump_debug_info"/>
<element pattern="maxdb_embedded_connect"/>
<element pattern="maxdb_enable_reads_from_master"/>
<element pattern="maxdb_enable_rpl_parse"/>
<element pattern="maxdb_errno"/>
<element pattern="maxdb_error"/>
<element pattern="maxdb_fetch_array"/>
<element pattern="fetch_array"/>
<element pattern="maxdb_fetch_assoc"/>
<element pattern="fetch_assoc"/>
<element pattern="maxdb_fetch_field_direct"/>
<element pattern="fetch_field_direct"/>
<element pattern="maxdb_fetch_field"/>
<element pattern="fetch_field"/>
<element pattern="maxdb_fetch_fields"/>
<element pattern="fetch_fields"/>
<element pattern="maxdb_fetch_lengths"/>
<element pattern="maxdb_fetch_object"/>
<element pattern="fetch_object"/>
<element pattern="maxdb_fetch_row"/>
<element pattern="fetch_row"/>
<element pattern="maxdb_field_count"/>
<element pattern="field_count"/>
<element pattern="maxdb_field_seek"/>
<element pattern="field_seek"/>
<element pattern="maxdb_field_tell"/>
<element pattern="maxdb_free_result"/>
<element pattern="free"/>
<element pattern="maxdb_get_client_info"/>
<element pattern="maxdb_get_client_version"/>
<element pattern="maxdb_get_host_info"/>
<element pattern="maxdb_get_proto_info"/>
<element pattern="maxdb_get_server_info"/>
<element pattern="maxdb_get_server_version"/>
<element pattern="maxdb_info"/>
<element pattern="maxdb_init"/>
<element pattern="maxdb_insert_id"/>
<element pattern="maxdb_kill"/>
<element pattern="kill"/>
<element pattern="maxdb_master_query"/>
<element pattern="maxdb_more_results"/>
<element pattern="maxdb_multi_query"/>
<element pattern="multi_query"/>
<element pattern="maxdb_next_result"/>
<element pattern="maxdb_num_fields"/>
<element pattern="maxdb_num_rows"/>
<element pattern="maxdb_options"/>
<element pattern="options"/>
<element pattern="maxdb_ping"/>
<element pattern="ping"/>
<element pattern="maxdb_prepare"/>
<element pattern="prepare"/>
<element pattern="maxdb_query"/>
<element pattern="query"/>
<element pattern="maxdb_real_connect"/>
<element pattern="real_connect"/>
<element pattern="maxdb_real_escape_string"/>
<element pattern="real_escape_sring"/>
<element pattern="maxdb_real_query"/>
<element pattern="real_query"/>
<element pattern="maxdb_report"/>
<element pattern="maxdb_rollback"/>
<element pattern="rollback"/>
<element pattern="maxdb_rpl_parse_enabled"/>
<element pattern="maxdb_rpl_probe"/>
<element pattern="maxdb_rpl_query_type"/>
<element pattern="rpl_query_type"/>
<element pattern="maxdb_select_db"/>
<element pattern="maxdb_send_query"/>
<element pattern="send_query"/>
<element pattern="maxdb_server_end"/>
<element pattern="maxdb_server_init"/>
<element pattern="maxdb_sqlstate"/>
<element pattern="maxdb_ssl_set"/>
<element pattern="ssl_set"/>
<element pattern="maxdb_stat"/>
<element pattern="maxdb_stmt_affected_rows"/>
<element pattern="maxdb_stmt_bind_param"/>
<element pattern="bind_param"/>
<element pattern="maxdb_stmt_bind_param"/>
<element pattern="bind_param"/>
<element pattern="maxdb_stmt_bind_result"/>
<element pattern="bind_result"/>
<element pattern="maxdb_stmt_close_long_data"/>
<element pattern="maxdb_stmt_close"/>
<element pattern="maxdb_stmt_data_seek"/>
<element pattern="data_seek"/>
<element pattern="maxdb_stmt_errno"/>
<element pattern="maxdb_stmt_error"/>
<element pattern="maxdb_stmt_execute"/>
<element pattern="execute"/>
<element pattern="maxdb_stmt_fetch"/>
<element pattern="fetch"/>
<element pattern="maxdb_stmt_free_result"/>
<element pattern="free_result"/>
<element pattern="maxdb_stmt_init"/>
<element pattern="stmt_init"/>
<element pattern="maxdb_stmt_num_rows"/>
<element pattern="maxdb_stmt_param_count"/>
<element pattern="maxdb_stmt_prepare"/>
<element pattern="prepare"/>
<element pattern="maxdb_stmt_reset"/>
<element pattern="reset" autocomplete_append="(array &amp;$array);">
<reference>reset(array &amp;$array);
Set the internal pointer of an array to its first element
<b> array array </b>The input array.
<b>returns</b>  mixed the value of the first array element, or false if the array is
empty.
</reference></element>
<element pattern="maxdb_stmt_result_metadata"/>
<element pattern="result_metadata"/>
<element pattern="maxdb_stmt_send_long_data"/>
<element pattern="stmt_send_long_data"/>
<element pattern="maxdb_stmt_sqlstate"/>
<element pattern="maxdb_stmt_store_result"/>
<element pattern="store_result"/>
<element pattern="maxdb_store_result"/>
<element pattern="store_result"/>
<element pattern="maxdb_thread_id"/>
<element pattern="maxdb_thread_safe"/>
<element pattern="maxdb_use_result"/>
<element pattern="use_result"/>
<element pattern="maxdb_warning_count"/>
<element pattern="mcal_append_event"/>
<element pattern="mcal_close"/>
<element pattern="mcal_create_calendar"/>
<element pattern="mcal_date_compare"/>
<element pattern="mcal_date_valid"/>
<element pattern="mcal_day_of_week"/>
<element pattern="mcal_day_of_year"/>
<element pattern="mcal_days_in_month"/>
<element pattern="mcal_delete_calendar"/>
<element pattern="mcal_delete_event"/>
<element pattern="mcal_event_add_attribute"/>
<element pattern="mcal_event_init"/>
<element pattern="mcal_event_set_alarm"/>
<element pattern="mcal_event_set_category"/>
<element pattern="mcal_event_set_class"/>
<element pattern="mcal_event_set_description"/>
<element pattern="mcal_event_set_end"/>
<element pattern="mcal_event_set_recur_daily"/>
<element pattern="mcal_event_set_recur_monthly_mday"/>
<element pattern="mcal_event_set_recur_monthly_wday"/>
<element pattern="mcal_event_set_recur_none"/>
<element pattern="mcal_event_set_recur_weekly"/>
<element pattern="mcal_event_set_recur_yearly"/>
<element pattern="mcal_event_set_start"/>
<element pattern="mcal_event_set_title"/>
<element pattern="mcal_expunge"/>
<element pattern="mcal_fetch_current_stream_event"/>
<element pattern="mcal_fetch_event"/>
<element pattern="mcal_is_leap_year"/>
<element pattern="mcal_list_alarms"/>
<element pattern="mcal_list_events"/>
<element pattern="mcal_next_recurrence"/>
<element pattern="mcal_open"/>
<element pattern="mcal_popen"/>
<element pattern="mcal_rename_calendar"/>
<element pattern="mcal_reopen"/>
<element pattern="mcal_snooze"/>
<element pattern="mcal_store_event"/>
<element pattern="mcal_time_valid"/>
<element pattern="mcal_week_of_year"/>
<element pattern="mcrypt_cbc" autocomplete_append="($cipher, $key, $data, $mode, $iv = null);">
<reference>mcrypt_cbc($cipher, $key, $data, $mode, $iv = null);
Encrypt/decrypt data in CBC mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b> iv string[optional] </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_cbc" autocomplete_append="($cipher, $key, $data, $mode, $iv = null);">
<reference>mcrypt_cbc($cipher, $key, $data, $mode, $iv = null);
Encrypt/decrypt data in CBC mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b> iv string[optional] </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_cfb" autocomplete_append="($cipher, $key, $data, $mode, $iv);">
<reference>mcrypt_cfb($cipher, $key, $data, $mode, $iv);
Encrypt/decrypt data in CFB mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b> iv string </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_cfb" autocomplete_append="($cipher, $key, $data, $mode, $iv);">
<reference>mcrypt_cfb($cipher, $key, $data, $mode, $iv);
Encrypt/decrypt data in CFB mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b> iv string </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_create_iv" autocomplete_append="($size, $source = null);">
<reference>mcrypt_create_iv($size, $source = null);
Create an initialization vector (IV) from a random source
<b> size int </b><b> source int[optional] </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_decrypt" autocomplete_append="($cipher, $key, $data, $mode, $iv = null);">
<reference>mcrypt_decrypt($cipher, $key, $data, $mode, $iv = null);
Decrypts crypttext with given parameters
<b> cipher string </b>cipher is one of the MCRYPT_ciphername constants
of the name of the algorithm as string.
<b> key string </b>key is the key with which the data is encrypted.
If it's smaller that the required keysize, it is padded with
'\0'.
<b> data string </b>data is the data that will be decrypted with
the given cipher and mode. If the size of the data is not n * blocksize,
the data will be padded with '\0'.
<b> mode string </b>mode is one of the MCRYPT_MODE_modename
constants of one of "ecb", "cbc", "cfb", "ofb", "nofb" or "stream".
<b> iv string[optional] </b>The iv parameter is used for the initialisation
in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If you
do not supply an IV, while it is needed for an algorithm, the function
issues a warning and uses an IV with all bytes set to
'\0'.
<b>returns</b>  string the decrypted data as a string.
</reference></element>
<element pattern="mcrypt_ecb" autocomplete_append="($cipher, $key, $data, $mode);">
<reference>mcrypt_ecb($cipher, $key, $data, $mode);
Deprecated: Encrypt/decrypt data in ECB mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_ecb" autocomplete_append="($cipher, $key, $data, $mode);">
<reference>mcrypt_ecb($cipher, $key, $data, $mode);
Deprecated: Encrypt/decrypt data in ECB mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_enc_get_algorithms_name" autocomplete_append="($td);">
<reference>mcrypt_enc_get_algorithms_name($td);
Returns the name of the opened algorithm
<b> td resource </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_enc_get_block_size" autocomplete_append="($td);">
<reference>mcrypt_enc_get_block_size($td);
Returns the blocksize of the opened algorithm
<b> td resource </b>The encryption descriptor.
<b>returns</b>  int the block size of the specified algorithm in bytes.
</reference></element>
<element pattern="mcrypt_enc_get_iv_size" autocomplete_append="($td);">
<reference>mcrypt_enc_get_iv_size($td);
Returns the size of the IV of the opened algorithm
<b> td resource </b>The encryption descriptor.
<b>returns</b>  int the size of the IV, or 0 if the IV is ignored in the algorithm.
</reference></element>
<element pattern="mcrypt_enc_get_key_size" autocomplete_append="($td);">
<reference>mcrypt_enc_get_key_size($td);
Returns the maximum supported keysize of the opened mode
<b> td resource </b>The encryption descriptor.
<b>returns</b>  int the maximum supported key size of the algorithm in bytes.
</reference></element>
<element pattern="mcrypt_enc_get_modes_name" autocomplete_append="($td);">
<reference>mcrypt_enc_get_modes_name($td);
Returns the name of the opened mode
<b> td resource </b>The encryption descriptor.
<b>returns</b>  string the name as a string.
</reference></element>
<element pattern="mcrypt_enc_get_supported_key_sizes" autocomplete_append="($td);">
<reference>mcrypt_enc_get_supported_key_sizes($td);
Returns an array with the supported keysizes of the opened algorithm
<b> td resource </b><b>returns</b>  array 
</reference></element>
<element pattern="mcrypt_enc_is_block_algorithm_mode" autocomplete_append="($td);">
<reference>mcrypt_enc_is_block_algorithm_mode($td);
Checks whether the encryption of the opened mode works on blocks
<b> td resource </b>The encryption descriptor.
<b>returns</b>  bool true if the mode is for use with block algorithms, otherwise it
returns false.
</reference></element>
<element pattern="mcrypt_enc_is_block_algorithm" autocomplete_append="($td);">
<reference>mcrypt_enc_is_block_algorithm($td);
Checks whether the algorithm of the opened mode is a block algorithm
<b> td resource </b>The encryption descriptor.
<b>returns</b>  bool true if the algorithm is a block algorithm or false if it is
a stream one.
</reference></element>
<element pattern="mcrypt_enc_is_block_mode" autocomplete_append="($td);">
<reference>mcrypt_enc_is_block_mode($td);
Checks whether the opened mode outputs blocks
<b> td resource </b>The encryption descriptor.
<b>returns</b>  bool true if the mode outputs blocks of bytes or false if it outputs bytes.
</reference></element>
<element pattern="mcrypt_enc_self_test" autocomplete_append="($td);">
<reference>mcrypt_enc_self_test($td);
Runs a self test on the opened module
<b> td resource </b>The encryption descriptor.
<b>returns</b>  int If the self test succeeds it returns false. In case of an error, it
returns true.
</reference></element>
<element pattern="mcrypt_encrypt" autocomplete_append="($cipher, $key, $data, $mode, $iv = null);">
<reference>mcrypt_encrypt($cipher, $key, $data, $mode, $iv = null);
Encrypts plaintext with given parameters
<b> cipher string </b><b> key string </b><b> data string </b><b> mode string </b><b> iv string[optional] </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_generic_deinit" autocomplete_append="($td);">
<reference>mcrypt_generic_deinit($td);
This function deinitializes an encryption module
<b> td resource </b><b>returns</b>  bool 
</reference></element>
<element pattern="mcrypt_generic_end" autocomplete_append="($td);">
<reference>mcrypt_generic_end($td);
This function terminates encryption
<b> td resource </b><b>returns</b>  bool 
</reference></element>
<element pattern="mcrypt_generic_init" autocomplete_append="($td, $key, $iv);">
<reference>mcrypt_generic_init($td, $key, $iv);
This function initializes all buffers needed for encryption
<b> td resource </b>The encryption descriptor.
<b> key string </b>The maximum length of the key should be the one obtained by calling
mcrypt_enc_get_key_size and every value smaller
than this is legal.
<b> iv string </b>The IV should normally have the size of the algorithms block size, but
you must obtain the size by calling
mcrypt_enc_get_iv_size. IV is ignored in ECB. IV
MUST exist in CFB, CBC, STREAM, nOFB and OFB modes. It needs to be
random and unique (but not secret). The same IV must be used for
encryption/decryption. If you do not want to use it you should set it
to zeros, but this is not recommended.
<b>returns</b>  int The function returns a negative value on error, -3 when the key length
was incorrect, -4 when there was a memory allocation problem and any
other return value is an unknown error. If an error occurs a warning will
be displayed accordingly. false is returned if incorrect parameters
were passed.
</reference></element>
<element pattern="mcrypt_generic" autocomplete_append="($td, $data);">
<reference>mcrypt_generic($td, $data);
This function encrypts data
<b> td resource </b><b> data string </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_get_block_size" autocomplete_append="($cipher);">
<reference>mcrypt_get_block_size($cipher);
Get the block size of the specified cipher
<b> cipher int </b><b>returns</b>  int 
</reference></element>
<element pattern="mcrypt_get_block_size" autocomplete_append="($cipher);">
<reference>mcrypt_get_block_size($cipher);
Get the block size of the specified cipher
<b> cipher int </b><b>returns</b>  int 
</reference></element>
<element pattern="mcrypt_get_cipher_name" autocomplete_append="($cipher);">
<reference>mcrypt_get_cipher_name($cipher);
Get the name of the specified cipher
<b> cipher int </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_get_cipher_name" autocomplete_append="($cipher);">
<reference>mcrypt_get_cipher_name($cipher);
Get the name of the specified cipher
<b> cipher int </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_get_iv_size" autocomplete_append="($cipher, $mode);">
<reference>mcrypt_get_iv_size($cipher, $mode);
Returns the size of the IV belonging to a specific cipher/mode combination
<b> cipher string </b><b> mode string </b><b>returns</b>  int 
</reference></element>
<element pattern="mcrypt_get_key_size" autocomplete_append="($cipher);">
<reference>mcrypt_get_key_size($cipher);
Get the key size of the specified cipher
<b> cipher int </b><b>returns</b>  int 
</reference></element>
<element pattern="mcrypt_get_key_size" autocomplete_append="($cipher);">
<reference>mcrypt_get_key_size($cipher);
Get the key size of the specified cipher
<b> cipher int </b><b>returns</b>  int 
</reference></element>
<element pattern="mcrypt_list_algorithms" autocomplete_append="($lib_dir = null);">
<reference>mcrypt_list_algorithms($lib_dir = null);
Get an array of all supported ciphers
<b> lib_dir string[optional] </b><b>returns</b>  array 
</reference></element>
<element pattern="mcrypt_list_modes" autocomplete_append="($lib_dir = null);">
<reference>mcrypt_list_modes($lib_dir = null);
Get an array of all supported modes
<b> lib_dir string[optional] </b><b>returns</b>  array 
</reference></element>
<element pattern="mcrypt_module_close" autocomplete_append="($td);">
<reference>mcrypt_module_close($td);
Close the mcrypt module
<b> td resource </b>The encryption descriptor.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mcrypt_module_get_algo_block_size" autocomplete_append="($algorithm, $lib_dir = null);">
<reference>mcrypt_module_get_algo_block_size($algorithm, $lib_dir = null);
Returns the blocksize of the specified algorithm
<b> algorithm string </b>The algorithm name.
<b> lib_dir string[optional] </b>This optional parameter can contain the location where the mode module
is on the system.
<b>returns</b>  int the block size of the algorithm specified in bytes.
</reference></element>
<element pattern="mcrypt_module_get_algo_key_size" autocomplete_append="($algorithm, $lib_dir = null);">
<reference>mcrypt_module_get_algo_key_size($algorithm, $lib_dir = null);
Returns the maximum supported keysize of the opened mode
<b> algorithm string </b>The algorithm name.
<b> lib_dir string[optional] </b>This optional parameter can contain the location where the mode module
is on the system.
<b>returns</b>  int This function returns the maximum supported key size of the
algorithm specified in bytes.
</reference></element>
<element pattern="mcrypt_module_get_supported_key_sizes" autocomplete_append="($algorithm, $lib_dir = null);">
<reference>mcrypt_module_get_supported_key_sizes($algorithm, $lib_dir = null);
Returns an array with the supported keysizes of the opened algorithm
<b> algorithm string </b><b> lib_dir string[optional] </b><b>returns</b>  array 
</reference></element>
<element pattern="mcrypt_module_is_block_algorithm_mode" autocomplete_append="($mode, $lib_dir = null);">
<reference>mcrypt_module_is_block_algorithm_mode($mode, $lib_dir = null);
Returns if the specified module is a block algorithm or not
<b> mode string </b><b> lib_dir string[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="mcrypt_module_is_block_algorithm" autocomplete_append="($algorithm, $lib_dir = null);">
<reference>mcrypt_module_is_block_algorithm($algorithm, $lib_dir = null);
This function checks whether the specified algorithm is a block algorithm
<b> algorithm string </b><b> lib_dir string[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="mcrypt_module_is_block_mode" autocomplete_append="($mode, $lib_dir = null);">
<reference>mcrypt_module_is_block_mode($mode, $lib_dir = null);
Returns if the specified mode outputs blocks or not
<b> mode string </b><b> lib_dir string[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="mcrypt_module_open" autocomplete_append="($algorithm, $algorithm_directory, $mode, $mode_directory);">
<reference>mcrypt_module_open($algorithm, $algorithm_directory, $mode, $mode_directory);
Opens the module of the algorithm and the mode to be used
<b> algorithm string </b><b> algorithm_directory string </b><b> mode string </b><b> mode_directory string </b><b>returns</b>  resource 
</reference></element>
<element pattern="mcrypt_module_self_test" autocomplete_append="($algorithm, $lib_dir = null);">
<reference>mcrypt_module_self_test($algorithm, $lib_dir = null);
This function runs a self test on the specified module
<b> algorithm string </b><b> lib_dir string[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="mcrypt_ofb" autocomplete_append="($cipher, $key, $data, $mode, $iv);">
<reference>mcrypt_ofb($cipher, $key, $data, $mode, $iv);
Encrypt/decrypt data in OFB mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b> iv string </b><b>returns</b>  string 
</reference></element>
<element pattern="mcrypt_ofb" autocomplete_append="($cipher, $key, $data, $mode, $iv);">
<reference>mcrypt_ofb($cipher, $key, $data, $mode, $iv);
Encrypt/decrypt data in OFB mode
<b> cipher int </b><b> key string </b><b> data string </b><b> mode int </b><b> iv string </b><b>returns</b>  string 
</reference></element>
<element pattern="mdecrypt_generic" autocomplete_append="($td, $data);">
<reference>mdecrypt_generic($td, $data);
Decrypt data
<b> td resource </b><b> data string </b><b>returns</b>  string 
</reference></element>
<element pattern="m_checkstatus"/>
<element pattern="m_completeauthorizations"/>
<element pattern="m_connect"/>
<element pattern="m_connectionerror"/>
<element pattern="m_deletetrans"/>
<element pattern="m_destroyconn"/>
<element pattern="m_destroyengine"/>
<element pattern="m_getcell"/>
<element pattern="m_getcellbynum"/>
<element pattern="m_getcommadelimited"/>
<element pattern="m_getheader"/>
<element pattern="m_initconn"/>
<element pattern="m_initengine"/>
<element pattern="m_iscommadelimited"/>
<element pattern="m_maxconntimeout"/>
<element pattern="m_monitor"/>
<element pattern="m_numcolumns"/>
<element pattern="m_numrows"/>
<element pattern="m_parsecommadelimited"/>
<element pattern="m_responsekeys"/>
<element pattern="m_responseparam"/>
<element pattern="m_returnstatus"/>
<element pattern="m_setblocking"/>
<element pattern="m_setdropfile"/>
<element pattern="m_setip"/>
<element pattern="m_setssl_cafile"/>
<element pattern="m_setssl_files"/>
<element pattern="m_setssl"/>
<element pattern="m_settimeout"/>
<element pattern="m_sslcert_gen_hash"/>
<element pattern="m_transactionssent"/>
<element pattern="m_transinqueue"/>
<element pattern="m_transkeyval"/>
<element pattern="m_transnew"/>
<element pattern="m_transsend"/>
<element pattern="m_uwait"/>
<element pattern="m_validateidentifier"/>
<element pattern="m_verifyconnection"/>
<element pattern="m_verifysslcert"/>
<element pattern="mhash_count" autocomplete_append="();">
<reference>mhash_count();
Get the highest available hash id
<b>returns</b>  int the highest available hash id. Hashes are numbered from 0 to this
hash id.
</reference></element>
<element pattern="mhash_get_block_size" autocomplete_append="($hash);">
<reference>mhash_get_block_size($hash);
Get the block size of the specified hash
<b> hash int </b>The hash id. One of the MHASH_XXX constants.
<b>returns</b>  int the size in bytes or false, if the hash
does not exist.
</reference></element>
<element pattern="mhash_get_hash_name" autocomplete_append="($hash);">
<reference>mhash_get_hash_name($hash);
Get the name of the specified hash
<b> hash int </b>The hash id. One of the MHASH_XXX constants.
<b>returns</b>  string the name of the hash or false, if the hash does not exist.
</reference></element>
<element pattern="mhash_keygen_s2k" autocomplete_append="($hash, $password, $salt, $bytes);">
<reference>mhash_keygen_s2k($hash, $password, $salt, $bytes);
Generates a key
<b> hash int </b>The hash id used to create the key.
One of the MHASH_XXX constants.
<b> password string </b>User supplied password.
<b> salt string </b>Must be different and random enough for every key you generate in
order to create different keys. That salt must be known when you check
the keys, thus it is a good idea to append the key to it. Salt has a
fixed length of 8 bytes and will be padded with zeros if you supply
less bytes.
<b> bytes int </b>The key length, in bytes.
<b>returns</b>  string the generated key as a string, or false on error.
</reference></element>
<element pattern="mhash" autocomplete_append="($hash, $data, $key = null);">
<reference>mhash($hash, $data, $key = null);
Compute hash
<b> hash int </b>The hash id. One of the MHASH_XXX constants.
<b> data string </b>The user input, as a string.
<b> key string[optional] </b>If specified, the function will return the resulting HMAC instead.
HMAC is keyed hashing for message authentication, or simply a message
digest that depends on the specified key. Not all algorithms 
supported in mhash can be used in HMAC mode.
<b>returns</b>  string the resulting hash (also called digest) or HMAC as a string, or
false on errors.
</reference></element>
<element pattern="mime_content_type" autocomplete_append="($filename);">
<reference>mime_content_type($filename);
Detect MIME Content-type for a file (deprecated)
<b> filename string </b>Path to the tested file.
<b>returns</b>  string the content type in MIME format, like 
text/plain or application/octet-stream.
</reference></element>
<element pattern="__construct"/>
<element pattern="__construct"/>
<element pattern="getHeight"/>
<element pattern="getWidth"/>
<element pattern="__construct"/>
<element pattern="addAction"/>
<element pattern="addASound"/>
<element pattern="addShape"/>
<element pattern="setAction"/>
<element pattern="setDown"/>
<element pattern="setHit"/>
<element pattern="setMenu"/>
<element pattern="setOver"/>
<element pattern="setUp"/>
<element pattern="addAction"/>
<element pattern="addColor"/>
<element pattern="endMask"/>
<element pattern="getRot"/>
<element pattern="getX"/>
<element pattern="getXScale"/>
<element pattern="getXSkew"/>
<element pattern="getY"/>
<element pattern="getYScale"/>
<element pattern="getYSkew"/>
<element pattern="move"/>
<element pattern="moveTo"/>
<element pattern="multColor"/>
<element pattern="remove"/>
<element pattern="rotate"/>
<element pattern="rotateTo"/>
<element pattern="scale"/>
<element pattern="scaleTo"/>
<element pattern="setDepth"/>
<element pattern="setMaskLevel"/>
<element pattern="setMatrix"/>
<element pattern="setName"/>
<element pattern="setRatio"/>
<element pattern="skewX"/>
<element pattern="skewXTo"/>
<element pattern="skewY"/>
<element pattern="skewYTo"/>
<element pattern="moveTo"/>
<element pattern="rotateTo"/>
<element pattern="scaleTo"/>
<element pattern="skewXTo"/>
<element pattern="skewYTo"/>
<element pattern="__construct"/>
<element pattern="getAscent"/>
<element pattern="getDescent"/>
<element pattern="getLeading"/>
<element pattern="getShape"/>
<element pattern="getUTF8Width"/>
<element pattern="getWidth"/>
<element pattern="addChars"/>
<element pattern="addUTF8Chars"/>
<element pattern="__construct"/>
<element pattern="addEntry"/>
<element pattern="__construct"/>
<element pattern="getShape1"/>
<element pattern="getShape2"/>
<element pattern="__construct"/>
<element pattern="add"/>
<element pattern="addExport"/>
<element pattern="addFont"/>
<element pattern="importChar"/>
<element pattern="importFont"/>
<element pattern="labelFrame"/>
<element pattern="nextFrame"/>
<element pattern="output"/>
<element pattern="remove"/>
<element pattern="save"/>
<element pattern="saveToFile"/>
<element pattern="setbackground"/>
<element pattern="setDimension"/>
<element pattern="setFrames"/>
<element pattern="setRate"/>
<element pattern="startSound"/>
<element pattern="stopSound"/>
<element pattern="streamMP3"/>
<element pattern="writeExports"/>
<element pattern="__construct"/>
<element pattern="__construct"/>
<element pattern="addFill"/>
<element pattern="addFill"/>
<element pattern="addFill"/>
<element pattern="drawArc"/>
<element pattern="drawCircle"/>
<element pattern="drawCubic"/>
<element pattern="drawCubicTo"/>
<element pattern="drawCurve"/>
<element pattern="drawCurveTo"/>
<element pattern="drawGlyph"/>
<element pattern="drawLine"/>
<element pattern="drawLineTo"/>
<element pattern="movePen"/>
<element pattern="movePenTo"/>
<element pattern="setLeftFill"/>
<element pattern="setLeftFill"/>
<element pattern="setLine"/>
<element pattern="setLine"/>
<element pattern="setRightFill"/>
<element pattern="setRightFill"/>
<element pattern="__construct"/>
<element pattern="loopCount"/>
<element pattern="loopInPoint"/>
<element pattern="loopOutPoint"/>
<element pattern="noMultiple"/>
<element pattern="__construct"/>
<element pattern="add"/>
<element pattern="labelFrame"/>
<element pattern="nextFrame"/>
<element pattern="remove"/>
<element pattern="setFrames"/>
<element pattern="startSound"/>
<element pattern="stopSound"/>
<element pattern="__construct"/>
<element pattern="addString"/>
<element pattern="addUTF8String"/>
<element pattern="getAscent"/>
<element pattern="getDescent"/>
<element pattern="getLeading"/>
<element pattern="getUTF8Width"/>
<element pattern="getWidth"/>
<element pattern="moveTo"/>
<element pattern="setColor"/>
<element pattern="setFont"/>
<element pattern="setHeight"/>
<element pattern="setSpacing"/>
<element pattern="__construct"/>
<element pattern="addChars"/>
<element pattern="addString"/>
<element pattern="align"/>
<element pattern="setBounds"/>
<element pattern="setColor"/>
<element pattern="setFont"/>
<element pattern="setHeight"/>
<element pattern="setIndentation"/>
<element pattern="setLeftMargin"/>
<element pattern="setLineSpacing"/>
<element pattern="setMargins"/>
<element pattern="setName"/>
<element pattern="setPadding"/>
<element pattern="setRightMargin"/>
<element pattern="__construct"/>
<element pattern="getNumFrames"/>
<element pattern="setDimension"/>
<element pattern="ming_keypress" autocomplete_append="($char);">
<reference>ming_keypress($char);
Returns the action flag for keyPress(char)
<b> char string </b><b>returns</b>  int What the function returns, first on success, then on failure. See
also the &amp;amp;return.success; entity
</reference></element>
<element pattern="ming_setcubicthreshold" autocomplete_append="($threshold);">
<reference>ming_setcubicthreshold($threshold);
Set cubic threshold
<b> threshold int </b>The Threshold. Lower is more accurate, hence larger file size.
<b>returns</b>  void 
</reference></element>
<element pattern="ming_setscale" autocomplete_append="($scale);">
<reference>ming_setscale($scale);
Set the global scaling factor.
<b> scale int </b>The scale to be set.
<b>returns</b>  void 
</reference></element>
<element pattern="ming_setswfcompression" autocomplete_append="($level);">
<reference>ming_setswfcompression($level);
Sets the SWF output compression
<b> level int </b>The new compression level. Should be a value between 1 and 9 
inclusive.
<b>returns</b>  void 
</reference></element>
<element pattern="ming_useconstants" autocomplete_append="($use);">
<reference>ming_useconstants($use);
Use constant pool
<b> use int </b>Its description
<b>returns</b>  void 
</reference></element>
<element pattern="ming_useswfversion" autocomplete_append="($version);">
<reference>ming_useswfversion($version);
Sets the SWF version
<b> version int </b>SWF version to use.
<b>returns</b>  void 
</reference></element>
<element pattern="connection_aborted" autocomplete_append="();">
<reference>connection_aborted();
Check whether client disconnected
<b>returns</b>  int 1 if client disconnected, 0 otherwise.
</reference></element>
<element pattern="connection_status" autocomplete_append="();">
<reference>connection_status();
Returns connection status bitfield
<b>returns</b>  int the connection status bitfield, which can be used against the
CONNECTION_XXX constants to determine the connection
status.
</reference></element>
<element pattern="connection_timeout"/>
<element pattern="constant" autocomplete_append="($name);">
<reference>constant($name);
Returns the value of a constant
<b> name string </b>The constant name.
<b>returns</b>  mixed the value of the constant, or &amp;null; if the constant is not
defined.
</reference></element>
<element pattern="define" autocomplete_append="($name, $value, $case_insensitive = null);">
<reference>define($name, $value, $case_insensitive = null);
Defines a named constant
<b> name string </b>The name of the constant.
<b> value mixed </b>The value of the constant; only scalar and null values are allowed. 
Scalar values are integer, 
float, string or boolean values.
<b> case_insensitive bool[optional] </b>If set to true, the constant will be defined case-insensitive. 
The default behaviour is case-sensitive; i.e. 
CONSTANT and Constant represent
different values.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="defined" autocomplete_append="($name);">
<reference>defined($name);
Checks whether a given named constant exists
<b> name string </b>The constant name.
<b>returns</b>  bool true if the named constant given by name
has been defined, false otherwise.
</reference></element>
<element pattern="eval"/>
<element pattern="exit"/>
<element pattern="exit"/>
<element pattern="get_browser" autocomplete_append="($user_agent = null, $return_array = null);">
<reference>get_browser($user_agent = null, $return_array = null);
Tells what the user's browser is capable of
<b> user_agent string[optional] </b>The User Agent to be analyzed. By default, the value of HTTP
User-Agent header is used; however, you can alter this (i.e., look up
another browser's info) by passing this parameter.
You can bypass this parameter with a &amp;null; value.
<b> return_array bool[optional] </b>If set to true, this function will return an array
instead of an object.
<b>returns</b>  mixed The information is returned in an object or an array which will contain
various data elements representing, for instance, the browser's major and
minor version numbers and ID string; true/false values for features
such as frames, JavaScript, and cookies; and so forth.
The cookies value simply means that the browser
itself is capable of accepting cookies and does not mean the user has
enabled the browser to accept cookies or not. The only way to test if
cookies are accepted is to set one with setcookie,
reload, and check for the value.
</reference></element>
<element pattern="__halt_compiler"/>
<element pattern="highlight_file" autocomplete_append="($filename, $return = null);">
<reference>highlight_file($filename, $return = null);
Syntax highlighting of a file
<b> filename string </b>Path to the PHP file to be highlighted.
<b> return bool[optional] </b>Set this parameter to true to make this function return the
highlighted code.
<b>returns</b>  mixed If return is set to true, returns the highlighted
code as a string instead of printing it out. Otherwise, it will return
true on success, false on failure.
</reference></element>
<element pattern="highlight_string" autocomplete_append="($str, $return = null);">
<reference>highlight_string($str, $return = null);
Syntax highlighting of a string
<b> str string </b>The PHP code to be highligthed. This should include the opening tag.
<b> return bool[optional] </b>Set this parameter to true to make this function return the
highlighted code.
<b>returns</b>  mixed If return is set to true, returns the highlighted
code as a string instead of printing it out. Otherwise, it will return
true on success, false on failure.
</reference></element>
<element pattern="ignore_user_abort" autocomplete_append="($setting = null);">
<reference>ignore_user_abort($setting = null);
Set whether a client disconnect should abort script execution
<b> setting bool[optional] </b>If not set, the function will only return the current setting.
<b>returns</b>  int the previous setting, as a boolean.
</reference></element>
<element pattern="pack" autocomplete_append="($format, $args = null, $_ = null);">
<reference>pack($format, $args = null, $_ = null);
Pack data into binary string
<b> format string </b>The format string consists of format codes
followed by an optional repeater argument. The repeater argument can
be either an integer value or * for repeating to
the end of the input data. For a, A, h, H the repeat count specifies
how many characters of one data argument are taken, for @ it is the
absolute position where to put the next data, for everything else the
repeat count specifies how many data arguments are consumed and packed
into the resulting binary string.
Currently implemented formats are:

a NUL-padded string
A SPACE-padded string
h Hex string, low nibble first
H Hex string, high nibble first
c signed char
C unsigned char
s signed short (always 16 bit, machine byte order)
S unsigned short (always 16 bit, machine byte order)
n unsigned short (always 16 bit, big endian byte order)
v unsigned short (always 16 bit, little endian byte order)
i signed integer (machine dependent size and byte order)
I unsigned integer (machine dependent size and byte order)
l signed long (always 32 bit, machine byte order)
L unsigned long (always 32 bit, machine byte order)
N unsigned long (always 32 bit, big endian byte order)
V unsigned long (always 32 bit, little endian byte order)
f float (machine dependent size and representation)
d double (machine dependent size and representation)
x NUL byte
X Back up one byte
@ NUL-fill to absolute position

<b> args mixed[optional] </b><b> _ mixed[optional] </b><b>returns</b>  string a binary string containing data.
</reference></element>
<element pattern="php_check_syntax"/>
<element pattern="php_strip_whitespace" autocomplete_append="($filename);">
<reference>php_strip_whitespace($filename);
Return source with stripped comments and whitespace
<b> filename string </b>Path to the PHP file.
<b>returns</b>  string The stripped source code will be returned on success, or an empty string
on failure.
This function works as described as of PHP 5.0.1. Before this it would
only return an empty string. For more information on this bug and its
prior behavior, see bug report
#29606.
</reference></element>
<element pattern="sleep" autocomplete_append="($seconds);">
<reference>sleep($seconds);
Delay execution
<b> seconds int </b>Halt time in seconds.
<b>returns</b>  int zero on success, or false on errors.
</reference></element>
<element pattern="sys_getloadavg" autocomplete_append="();">
<reference>sys_getloadavg();
Gets system load average
<b>returns</b>  array an array with three samples (last 1, 5 and 15
minutes).
</reference></element>
<element pattern="time_nanosleep" autocomplete_append="($seconds, $nanoseconds);">
<reference>time_nanosleep($seconds, $nanoseconds);
Delay for a number of seconds and nanoseconds
<b> seconds int </b>Must be a positive integer.
<b> nanoseconds int </b>Must be a positive integer less than 1 billion.
<b>returns</b>  mixed Returns true on success or false on failure.
If the delay was interrupted by a signal, an associative array will be
returned with the components:
seconds - number of seconds remaining in
the delay
nanoseconds - number of nanoseconds
remaining in the delay
</reference></element>
<element pattern="time_sleep_until" autocomplete_append="($timestamp);">
<reference>time_sleep_until($timestamp);
Make the script sleep until the specified time
<b> timestamp float </b>The timestamp when the script should wake.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="uniqid" autocomplete_append="($prefix = null, $more_entropy = null);">
<reference>uniqid($prefix = null, $more_entropy = null);
Generate a unique ID
<b> prefix string[optional] </b>Can be useful, for instance, if you generate identifiers
simultaneously on several hosts that might happen to generate the
identifier at the same microsecond.
With an empty prefix, the returned string will
be 13 characters long. If more_entropy is
true, it will be 23 characters.
<b> more_entropy bool[optional] </b>If set to true, uniqid will add additional
entropy (using the combined linear congruential generator) at the end
of the return value, which should make the results more unique.
<b>returns</b>  string the unique identifier, as a string.
</reference></element>
<element pattern="unpack" autocomplete_append="($format, $data);">
<reference>unpack($format, $data);
Unpack data from binary string
<b> format string </b>See pack for an explanation of the format codes.
<b> data string </b>The packed data.
<b>returns</b>  array an associative array containing unpacked elements of binary
string.
</reference></element>
<element pattern="usleep" autocomplete_append="($micro_seconds);">
<reference>usleep($micro_seconds);
Delay execution in microseconds
<b> micro_seconds int </b>Halt time in micro seconds. A micro second is one millionth of a
second.
<b>returns</b>  void 
</reference></element>
<element pattern="udm_add_search_limit"/>
<element pattern="udm_alloc_agent_array"/>
<element pattern="udm_alloc_agent"/>
<element pattern="udm_api_version"/>
<element pattern="udm_cat_list"/>
<element pattern="udm_cat_path"/>
<element pattern="udm_check_charset"/>
<element pattern="udm_check_stored"/>
<element pattern="udm_clear_search_limits"/>
<element pattern="udm_close_stored"/>
<element pattern="udm_crc32"/>
<element pattern="udm_errno"/>
<element pattern="udm_error"/>
<element pattern="udm_find"/>
<element pattern="udm_free_agent"/>
<element pattern="udm_free_ispell_data"/>
<element pattern="udm_free_res"/>
<element pattern="udm_get_doc_count"/>
<element pattern="udm_get_res_field"/>
<element pattern="udm_get_res_param"/>
<element pattern="udm_hash32"/>
<element pattern="udm_load_ispell_data"/>
<element pattern="udm_open_stored"/>
<element pattern="udm_set_agent_param"/>
<element pattern="mssql_bind" autocomplete_append="($stmt, $param_name, &amp;$var, $type, $is_output = null, $is_null = null, $maxlen = null);">
<reference>mssql_bind($stmt, $param_name, &amp;$var, $type, $is_output = null, $is_null = null, $maxlen = null);
Adds a parameter to a stored procedure or a remote stored procedure
<b> stmt resource </b>Statement resource, obtained with mssql_init.
<b> param_name string </b>The parameter name, as a string.
You have to include the @ character, like in the
T-SQL syntax. See the explanation included in
mssql_execute. 
<b> var mixed </b>The PHP variable you'll bind the MSSQL parameter to. You can pass it
by value, or by reference, to retrieve OUTPUT and RETVAL values after
the procedure execution. 
<b> type int </b>One of: SQLTEXT, 
SQLVARCHAR, SQLCHAR,
SQLINT1, SQLINT2,
SQLINT4, SQLBIT,
SQLFLT4, SQLFLT8,
SQLFLTN. 
<b> is_output int[optional] </b>Whether the value is an OUTPUT parameter or not. If it's an OUTPUT
parameter and you don't mention it, it will be treated as a normal
input parameter and no error will be thrown. 
<b> is_null int[optional] </b>Whether the parameter is &amp;null; or not. Passing the &amp;null; value as
var will not do the job.
<b> maxlen int[optional] </b>Used with char/varchar values. You have to indicate the length of the
data so if the parameter is a varchar(50), the type must be 
SQLVARCHAR and this value 50.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mssql_close" autocomplete_append="($link_identifier = null);">
<reference>mssql_close($link_identifier = null);
Close MS SQL Server connection
<b> link_identifier resource[optional] </b>A MS SQL link identifier, returned by 
mssql_connect.
This function will not close persistent links generated by
mssql_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mssql_connect" autocomplete_append="($servername = null, $username = null, $password = null, $new_link = null);">
<reference>mssql_connect($servername = null, $username = null, $password = null, $new_link = null);
Open MS SQL server connection
<b> servername string[optional] </b>The MS SQL server. It can also include a port number. e.g. 
hostname,port.
<b> username string[optional] </b>The username. 
<b> password string[optional] </b>The password. 
<b> new_link bool[optional] </b>If a second call is made to mssql_connect with the
same arguments, no new link will be established, but instead, the link
identifier of the already opened link will be returned. This parameter
modifies this behavior and makes mssql_connect
always open a new link, even if mssql_connect was
called before with the same parameters.
<b>returns</b>  resource a MS SQL link identifier on success, or false on error.
</reference></element>
<element pattern="mssql_data_seek" autocomplete_append="($result_identifier, $row_number);">
<reference>mssql_data_seek($result_identifier, $row_number);
Moves internal row pointer
<b> result_identifier resource </b>The result resource that is being evaluated. 
<b> row_number int </b>The desired row number of the new result pointer. 
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mssql_execute" autocomplete_append="($stmt, $skip_results = null);">
<reference>mssql_execute($stmt, $skip_results = null);
Executes a stored procedure on a MS SQL server database
<b> stmt resource </b>Statement handle obtained with mssql_init. 
<b> skip_results bool[optional] </b><b>returns</b>  mixed 
</reference></element>
<element pattern="mssql_fetch_array" autocomplete_append="($result, $result_type = null);">
<reference>mssql_fetch_array($result, $result_type = null);
Fetch a result row as an associative array, a numeric array, or both
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b> result_type int[optional] </b>The type of array that is to be fetched. It's a constant and can take
the following values: MSSQL_ASSOC, 
MSSQL_NUM, and the default value of 
MSSQL_BOTH.
<b>returns</b>  array an array that corresponds to the fetched row, or false if there
are no more rows.
</reference></element>
<element pattern="mssql_fetch_assoc" autocomplete_append="($result_id);">
<reference>mssql_fetch_assoc($result_id);
Returns an associative array of the current row in the result
<b> result_id resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b>returns</b>  array an associative array that corresponds to the fetched row, or
false if there are no more rows.
</reference></element>
<element pattern="mssql_fetch_batch" autocomplete_append="($result);">
<reference>mssql_fetch_batch($result);
Returns the next batch of records
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b>returns</b>  int the batch number as an integer.
</reference></element>
<element pattern="mssql_fetch_field" autocomplete_append="($result, $field_offset = null);">
<reference>mssql_fetch_field($result, $field_offset = null);
Get field information
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b> field_offset int[optional] </b>The numerical field offset. If the field offset is not specified, the
next field that was not yet retrieved by this function is retrieved. The
field_offset starts at 0.
<b>returns</b>  object an object containing field information.
The properties of the object are:
</reference></element>
<element pattern="mssql_fetch_object" autocomplete_append="($result);">
<reference>mssql_fetch_object($result);
Fetch row as object
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b>returns</b>  object an object with properties that correspond to the fetched row, or
false if there are no more rows.
</reference></element>
<element pattern="mssql_fetch_row" autocomplete_append="($result);">
<reference>mssql_fetch_row($result);
Get row as enumerated array
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b>returns</b>  array an array that corresponds to the fetched row, or false if there
are no more rows.
</reference></element>
<element pattern="mssql_field_length" autocomplete_append="($result, $offset = null);">
<reference>mssql_field_length($result, $offset = null);
Get the length of a field
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b> offset int[optional] </b>The field offset, starts at 0. If omitted, the current field is used.
<b>returns</b>  int The length of the specified field index on success, or false on failure.
</reference></element>
<element pattern="mssql_field_name" autocomplete_append="($result, $offset = null);">
<reference>mssql_field_name($result, $offset = null);
Get the name of a field
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b> offset int[optional] </b>The field offset, starts at 0. If omitted, the current field is used.
<b>returns</b>  string The name of the specified field index on success, or false on failure.
</reference></element>
<element pattern="mssql_field_seek" autocomplete_append="($result, $field_offset);">
<reference>mssql_field_seek($result, $field_offset);
Seeks to the specified field offset
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b> field_offset int </b>The field offset, starts at 0.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mssql_field_type" autocomplete_append="($result, $offset = null);">
<reference>mssql_field_type($result, $offset = null);
Gets the type of a field
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b> offset int[optional] </b>The field offset, starts at 0. If omitted, the current field is used.
<b>returns</b>  string The type of the specified field index on success, or false on failure.
</reference></element>
<element pattern="mssql_free_result" autocomplete_append="($result);">
<reference>mssql_free_result($result);
Free result memory
<b> result resource </b>The result resource that is being freed. This result comes from a
call to mssql_query.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mssql_free_statement" autocomplete_append="($stmt);">
<reference>mssql_free_statement($stmt);
Free statement memory
<b> stmt resource </b>Statement resource, obtained with mssql_init.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mssql_get_last_message" autocomplete_append="();">
<reference>mssql_get_last_message();
Returns the last message from the server
<b>returns</b>  string 
</reference></element>
<element pattern="mssql_guid_string" autocomplete_append="($binary, $short_format = null);">
<reference>mssql_guid_string($binary, $short_format = null);
Converts a 16 byte binary GUID to a string
<b> binary string </b><b> short_format int[optional] </b><b>returns</b>  string 
</reference></element>
<element pattern="mssql_init" autocomplete_append="($sp_name, $link_identifier = null);">
<reference>mssql_init($sp_name, $link_identifier = null);
Initializes a stored procedure or a remote stored procedure
<b> sp_name string </b>Stored procedure name, like ownew.sp_name or
otherdb.owner.sp_name. 
<b> link_identifier resource[optional] </b>A MS SQL link identifier, returned by 
mssql_connect.
<b>returns</b>  resource a resource identifier "statement", used in subsequent calls to
mssql_bind and mssql_execute,
or false on errors.
</reference></element>
<element pattern="mssql_min_error_severity" autocomplete_append="($severity);">
<reference>mssql_min_error_severity($severity);
Sets the lower error severity
<b> severity int </b><b>returns</b>  void 
</reference></element>
<element pattern="mssql_min_message_severity" autocomplete_append="($severity);">
<reference>mssql_min_message_severity($severity);
Sets the lower message severity
<b> severity int </b><b>returns</b>  void 
</reference></element>
<element pattern="mssql_next_result" autocomplete_append="($result_id);">
<reference>mssql_next_result($result_id);
Move the internal result pointer to the next result
<b> result_id resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b>returns</b>  bool true if an additional result set was available or false
otherwise.
</reference></element>
<element pattern="mssql_num_fields" autocomplete_append="($result);">
<reference>mssql_num_fields($result);
Gets the number of fields in result
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b>returns</b>  int the number of fields, as an integer.
</reference></element>
<element pattern="mssql_num_rows" autocomplete_append="($result);">
<reference>mssql_num_rows($result);
Gets the number of rows in result
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b>returns</b>  int the number of rows, as an integer.
</reference></element>
<element pattern="mssql_pconnect" autocomplete_append="($servername = null, $username = null, $password = null, $new_link = null);">
<reference>mssql_pconnect($servername = null, $username = null, $password = null, $new_link = null);
Open persistent MS SQL connection
<b> servername string[optional] </b>The MS SQL server. It can also include a port number. e.g. 
hostname:port.
<b> username string[optional] </b>The username. 
<b> password string[optional] </b>The password. 
<b> new_link bool[optional] </b>If a second call is made to mssql_pconnect with
the same arguments, no new link will be established, but instead, the
link identifier of the already opened link will be returned. This
parameter modifies this behavior and makes
mssql_pconnect always open a new link, even if
mssql_pconnect was called before with the same
parameters.
<b>returns</b>  resource a positive MS SQL persistent link identifier on success, or
false on error.
</reference></element>
<element pattern="mssql_query" autocomplete_append="($query, $link_identifier = null, $batch_size = null);">
<reference>mssql_query($query, $link_identifier = null, $batch_size = null);
Send MS SQL query
<b> query string </b>A SQL query.
<b> link_identifier resource[optional] </b>A MS SQL link identifier, returned by 
mssql_connect or 
mssql_pconnect.
If the link identifier isn't specified, the last opened link is
assumed. If no link is open, the function tries to establish a link
as if mssql_connect was called, and use it.
<b> batch_size int[optional] </b>The number of records to batch in the buffer.
<b>returns</b>  mixed a MS SQL result resource on success, true if no rows were
returned, or false on error.
</reference></element>
<element pattern="mssql_result" autocomplete_append="($result, $row, $field);">
<reference>mssql_result($result, $row, $field);
Get result data
<b> result resource </b>The result resource that is being evaluated. This result comes from a
call to mssql_query.
<b> row int </b>The row number.
<b> field mixed </b>Can be the field's offset, the field's name or the field's table dot
field's name (tablename.fieldname). If the column name has been
aliased ('select foo as bar from...'), it uses the alias instead of
the column name.
Specifying a numeric offset for the field
argument is much quicker than specifying a 
fieldname or 
tablename.fieldname argument.
<b>returns</b>  string the contents of the specified cell.
</reference></element>
<element pattern="mssql_rows_affected" autocomplete_append="($link_identifier);">
<reference>mssql_rows_affected($link_identifier);
Returns the number of records affected by the query
<b> link_identifier resource </b>A MS SQL link identifier, returned by 
mssql_connect or 
mssql_pconnect.
<b>returns</b>  int 
</reference></element>
<element pattern="mssql_select_db" autocomplete_append="($database_name, $link_identifier = null);">
<reference>mssql_select_db($database_name, $link_identifier = null);
Select MS SQL database
<b> database_name string </b>The database name.
To escape the name of a database that contains spaces, hyphens ("-"),
or any other exceptional characters, the database name must be
enclosed in brackets, as is shown in the example, below. This
technique must also be applied when selecting a database name that is
also a reserved word (such as primary).
<b> link_identifier resource[optional] </b>A MS SQL link identifier, returned by 
mssql_connect or 
mssql_pconnect.
If no link identifier is specified, the last opened link is assumed.
If no link is open, the function will try to establish a link as if
mssql_connect was called, and use it.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="msession_connect"/>
<element pattern="msession_count"/>
<element pattern="msession_create"/>
<element pattern="msession_destroy"/>
<element pattern="msession_disconnect"/>
<element pattern="msession_find"/>
<element pattern="msession_get_array"/>
<element pattern="msession_get_data"/>
<element pattern="msession_get"/>
<element pattern="msession_inc"/>
<element pattern="msession_list"/>
<element pattern="msession_listvar"/>
<element pattern="msession_lock"/>
<element pattern="msession_plugin"/>
<element pattern="msession_randstr"/>
<element pattern="msession_set_array"/>
<element pattern="msession_set_data"/>
<element pattern="msession_set"/>
<element pattern="msession_timeout"/>
<element pattern="msession_uniq"/>
<element pattern="msession_unlock"/>
<element pattern="msql_affected_rows"/>
<element pattern="msql_close"/>
<element pattern="msql_connect"/>
<element pattern="msql_create_db"/>
<element pattern="msql_data_seek"/>
<element pattern="msql_db_query"/>
<element pattern="msql_drop_db"/>
<element pattern="msql_error"/>
<element pattern="msql_fetch_array"/>
<element pattern="msql_fetch_field"/>
<element pattern="msql_fetch_object"/>
<element pattern="msql_fetch_row"/>
<element pattern="msql_field_flags"/>
<element pattern="msql_field_len"/>
<element pattern="msql_field_name"/>
<element pattern="msql_field_seek"/>
<element pattern="msql_field_table"/>
<element pattern="msql_field_type"/>
<element pattern="msql_free_result"/>
<element pattern="msql_list_dbs"/>
<element pattern="msql_list_fields"/>
<element pattern="msql_list_tables"/>
<element pattern="msql_num_fields"/>
<element pattern="msql_num_rows"/>
<element pattern="msql_pconnect"/>
<element pattern="msql_query"/>
<element pattern="msql_result"/>
<element pattern="msql_select_db"/>
<element pattern="mb_check_encoding" autocomplete_append="($var = null, $encoding = null);">
<reference>mb_check_encoding($var = null, $encoding = null);
Check if the string is valid for the specified encoding
<b> var string[optional] </b>The byte stream to check. If it is omitted, this function checks
all the input from the beginning of the request.
<b> encoding string[optional] </b>The expected encoding.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mb_convert_case" autocomplete_append="($str, $mode, $encoding = null);">
<reference>mb_convert_case($str, $mode, $encoding = null);
Perform case folding on a string
<b> str string </b>The string being converted.
<b> mode int </b>The mode of the conversion. It can be one of 
MB_CASE_UPPER, 
MB_CASE_LOWER, or 
MB_CASE_TITLE.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string A case folded version of string converted in the
way specified by mode.
</reference></element>
<element pattern="mb_convert_encoding" autocomplete_append="($str, $to_encoding, $from_encoding = null);">
<reference>mb_convert_encoding($str, $to_encoding, $from_encoding = null);
Convert character encoding
<b> str string </b>The string being encoded.
<b> to_encoding string </b>The type of encoding that str is being converted to.
<b> from_encoding mixed[optional] </b>Is specified by character code names before conversion. It is either
an array, or a comma separated enumerated list.
If from_encoding is not specified, the internal 
encoding will be used.
"auto" may be used, which expands to 
"ASCII,JIS,UTF-8,EUC-JP,SJIS".
<b>returns</b>  string The encoded string.
</reference></element>
<element pattern="mb_convert_kana" autocomplete_append="($str, $option = null, $encoding = null);">
<reference>mb_convert_kana($str, $option = null, $encoding = null);
Convert "kana" one from another ("zen-kaku", "han-kaku" and more)
<b> str string </b>The string being converted.
<b> option string[optional] </b>The conversion option. The default value is "KV".
Specify with a combination of following options. The default value is KV.

Applicable Conversion Options

r Convert "zen-kaku" alphabets to "han-kaku"
R Convert "han-kaku" alphabets to "zen-kaku"
n Convert "zen-kaku" numbers to "han-kaku"
N Convert "han-kaku" numbers to "zen-kaku"
a Convert "zen-kaku" alphabets and numbers to "han-kaku"
A Convert "han-kaku" alphabets and numbers to "zen-kaku"
(Characters included in "a", "A" options are
U+0021 - U+007E excluding U+0022, U+0027, U+005C, U+007E)
s Convert "zen-kaku" space to "han-kaku" (U+3000 -&gt; U+0020)
S Convert "han-kaku" space to "zen-kaku" (U+0020 -&gt; U+3000)
k Convert "zen-kaku kata-kana" to "han-kaku kata-kana"
K Convert "han-kaku kata-kana" to "zen-kaku kata-kana"
h Convert "zen-kaku hira-gana" to "han-kaku kata-kana"
H Convert "han-kaku kata-kana" to "zen-kaku hira-gana"
c Convert "zen-kaku kata-kana" to "zen-kaku hira-gana"
C Convert "zen-kaku hira-gana" to "zen-kaku kata-kana"
V Collapse voiced sound notation and convert them into a character. Use with "K","H"

<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string The converted string.
</reference></element>
<element pattern="mb_convert_variables" autocomplete_append="($to_encoding, $from_encoding, &amp;$vars, &amp;$_ = null);">
<reference>mb_convert_variables($to_encoding, $from_encoding, &amp;$vars, &amp;$_ = null);
Convert character code in variable(s)
<b> to_encoding string </b>The encoding that the string is being converted to.
<b> from_encoding mixed </b>from_encoding is specified as an array 
or comma separated string, it tries to detect encoding from
from-coding. When from_encoding 
is omitted, detect_order is used.
<b> vars mixed </b>vars is the reference to the
variable being converted. String, Array and Object are accepted.
mb_convert_variables assumes all parameters
have the same encoding.
<b> _ mixed[optional] </b><b>returns</b>  string The character encoding before conversion for success, 
or false for failure.
</reference></element>
<element pattern="mb_decode_mimeheader" autocomplete_append="($str);">
<reference>mb_decode_mimeheader($str);
Decode string in MIME header field
<b> str string </b>The string being decoded.
<b>returns</b>  string The decoded string in internal character encoding.
</reference></element>
<element pattern="mb_decode_numericentity" autocomplete_append="($str, array $convmap, $encoding = null);">
<reference>mb_decode_numericentity($str, array $convmap, $encoding = null);
Decode HTML numeric string reference to character
<b> str string </b>The string being decoded.
<b> convmap array </b>convmap is an array that specifies 
the code area to convert.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string The converted string.
</reference></element>
<element pattern="mb_detect_encoding" autocomplete_append="($str, $encoding_list = null, $strict = null);">
<reference>mb_detect_encoding($str, $encoding_list = null, $strict = null);
Detect character encoding
<b> str string </b>The string being detected.
<b> encoding_list mixed[optional] </b>encoding_list is list of character
encoding. Encoding order may be specified by array or comma
separated list string.
If encoding_list is omitted,
detect_order is used.
<b> strict bool[optional] </b>strict specifies whether to use
the strict encoding detection or not.
Default is false.
<b>returns</b>  string The detected character encoding.
</reference></element>
<element pattern="mb_detect_order" autocomplete_append="($encoding_list = null);">
<reference>mb_detect_order($encoding_list = null);
Set/Get character encoding detection order
<b> encoding_list mixed[optional] </b>encoding_list is an array or 
comma separated list of character encoding. ("auto" is expanded to
"ASCII, JIS, UTF-8, EUC-JP, SJIS")
If encoding_list is omitted, it returns
the current character encoding detection order as array.
This setting affects mb_detect_encoding and
mb_send_mail.
mbstring currently implements the following
encoding detection filters. If there is an invalid byte sequence
for the following encodings, encoding detection will fail.
UTF-8, UTF-7,
ASCII,
EUC-JP,SJIS,
eucJP-win, SJIS-win,
JIS, ISO-2022-JP 
For ISO-8859-*, mbstring
always detects as ISO-8859-*.
For UTF-16, UTF-32,
UCS2 and UCS4, encoding
detection will fail always.
Useless detect order example
<b>returns</b>  mixed Returns true on success or false on failure.
</reference></element>
<element pattern="mb_encode_mimeheader" autocomplete_append="($str, $charset = null, $transfer_encoding = null, $linefeed = null, $indent = null);">
<reference>mb_encode_mimeheader($str, $charset = null, $transfer_encoding = null, $linefeed = null, $indent = null);
Encode string for MIME header
<b> str string </b>The string being encoded.
<b> charset string[optional] </b>charset specifies the name of the character set
in which str is represented in. The default value
is determined by the current NLS setting (mbstring.language).
<b> transfer_encoding string[optional] </b>transfer_encoding specifies the scheme of MIME
encoding. It should be either "B" (Base64) or
"Q" (Quoted-Printable). Falls back to
"B" if not given.
<b> linefeed string[optional] </b>linefeed specifies the EOL (end-of-line) marker
with which mb_encode_mimeheader performs
line-folding (a RFC term,
the act of breaking a line longer than a certain length into multiple
lines. The length is currently hard-coded to 74 characters).
Falls back to "\r\n" (CRLF) if not given.
<b> indent int[optional] </b><b>returns</b>  string A converted version of the string represented in ASCII.
</reference></element>
<element pattern="mb_encode_numericentity" autocomplete_append="($str, array $convmap, $encoding = null);">
<reference>mb_encode_numericentity($str, array $convmap, $encoding = null);
Encode character to HTML numeric string reference
<b> str string </b>The string being encoded.
<b> convmap array </b>convmap is array specifies code area to
convert.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string The converted string.
</reference></element>
<element pattern="mb_ereg_match" autocomplete_append="($pattern, $string, $option = null);">
<reference>mb_ereg_match($pattern, $string, $option = null);
Regular expression match for multibyte string
<b> pattern string </b>The regular expression pattern.
<b> string string </b>The string being evaluated.
<b> option string[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="mb_ereg_replace" autocomplete_append="($pattern, $replacement, $string, $option = null);">
<reference>mb_ereg_replace($pattern, $replacement, $string, $option = null);
Replace regular expression with multibyte support
<b> pattern string </b>The regular expression pattern.
Multibyte characters may be used in pattern.
<b> replacement string </b>The replacement text.
<b> string string </b>The string being checked.
<b> option string[optional] Matching condition can be set by option</b>parameter. If i is specified for this
parameter, the case will be ignored. If x is
specified, white space will be ignored. If m
is specified, match will be executed in multiline mode and line
break will be included in '.'. If p is
specified, match will be executed in POSIX mode, line break 
will be considered as normal character. If e
is specified, replacement string will be
evaluated as PHP expression.
<b>returns</b>  string The resultant string on success, or false on error.
</reference></element>
<element pattern="mb_ereg_search_getpos" autocomplete_append="();">
<reference>mb_ereg_search_getpos();
Returns start point for next regular expression match
<b>returns</b>  int 
</reference></element>
<element pattern="mb_ereg_search_getregs" autocomplete_append="();">
<reference>mb_ereg_search_getregs();
Retrieve the result from the last multibyte regular expression match
<b>returns</b>  array 
</reference></element>
<element pattern="mb_ereg_search_init" autocomplete_append="($string, $pattern = null, $option = null);">
<reference>mb_ereg_search_init($string, $pattern = null, $option = null);
Setup string and regular expression for a multibyte regular expression match
<b> string string </b><b> pattern string[optional] </b><b> option string[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="mb_ereg_search_pos" autocomplete_append="($pattern = null, $option = null);">
<reference>mb_ereg_search_pos($pattern = null, $option = null);
Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string
<b> pattern string[optional] </b>The search pattern.
<b> option string[optional] </b>The search option.
<b>returns</b>  array 
</reference></element>
<element pattern="mb_ereg_search_regs" autocomplete_append="($pattern = null, $option = null);">
<reference>mb_ereg_search_regs($pattern = null, $option = null);
Returns the matched part of a multibyte regular expression
<b> pattern string[optional] </b>The search pattern.
<b> option string[optional] </b>The search option.
<b>returns</b>  array 
</reference></element>
<element pattern="mb_ereg_search_setpos" autocomplete_append="($position);">
<reference>mb_ereg_search_setpos($position);
Set start point of next regular expression match
<b> position int </b>The position to set.
<b>returns</b>  bool 
</reference></element>
<element pattern="mb_ereg_search" autocomplete_append="($pattern = null, $option = null);">
<reference>mb_ereg_search($pattern = null, $option = null);
Multibyte regular expression match for predefined multibyte string
<b> pattern string[optional] </b>The search pattern.
<b> option string[optional] </b>The search option.
<b>returns</b>  bool 
</reference></element>
<element pattern="mb_ereg" autocomplete_append="($pattern, $string, array $regs = null);">
<reference>mb_ereg($pattern, $string, array $regs = null);
Regular expression match with multibyte support
<b> pattern string </b>The search pattern.
<b> string string </b>The search string.
<b> regs array[optional] </b>Contains a substring of the matched string.
<b>returns</b>  int 
</reference></element>
<element pattern="mb_eregi_replace" autocomplete_append="($pattern, $replace, $string, $option = null);">
<reference>mb_eregi_replace($pattern, $replace, $string, $option = null);
Replace regular expression with multibyte support ignoring case
<b> pattern string </b>The regular expression pattern. Multibyte characters may be used. The case will be ignored.
<b> replace string </b>The replacement text.
<b> string string </b>The searched string.
<b> option string[optional] option has the same meaning as in</b>mb_ereg_replace.
<b>returns</b>  string The resultant string or false on error.
</reference></element>
<element pattern="mb_eregi" autocomplete_append="($pattern, $string, array $regs = null);">
<reference>mb_eregi($pattern, $string, array $regs = null);
Regular expression match ignoring case with multibyte support
<b> pattern string </b>The regular expression pattern.
<b> string string </b>The string being searched.
<b> regs array[optional] </b>Contains a substring of the matched string.
<b>returns</b>  int 
</reference></element>
<element pattern="mb_get_info" autocomplete_append="($type = null);">
<reference>mb_get_info($type = null);
Get internal settings of mbstring
<b> type string[optional] </b>If type isn't specified or is specified to
"all", an array having the elements "internal_encoding",
"http_output", "http_input", "func_overload", "mail_charset",
"mail_header_encoding", "mail_body_encoding" will be returned. 
If type is specified as "http_output",
"http_input", "internal_encoding", "func_overload",
the specified setting parameter will be returned.
<b>returns</b>  mixed An array of type information if type 
is not specified, otherwise a specific type.
</reference></element>
<element pattern="mb_http_input" autocomplete_append="($type = null);">
<reference>mb_http_input($type = null);
Detect HTTP input character encoding
<b> type string[optional] </b>Input string specifies the input type. 
"G" for GET, "P" for POST, "C" for COOKIE, "S" for string, "L" for list, and
"I" for the whole list (will return array). 
If type is omitted, it returns the last input type processed. 
<b>returns</b>  mixed The character encoding name, as per the type.
If mb_http_input does not process specified
HTTP input, it returns false.
</reference></element>
<element pattern="mb_http_output" autocomplete_append="($encoding = null);">
<reference>mb_http_output($encoding = null);
Set/Get HTTP output character encoding
<b> encoding string[optional] </b>If encoding is set,
mb_http_output sets the HTTP output character
encoding to encoding.
If encoding is omitted,
mb_http_output returns the current HTTP output
character encoding.
<b>returns</b>  mixed If encoding is omitted,
mb_http_output returns the current HTTP output
character encoding. Otherwise, 
Returns true on success or false on failure.
</reference></element>
<element pattern="mb_internal_encoding" autocomplete_append="($encoding = null);">
<reference>mb_internal_encoding($encoding = null);
Set/Get internal character encoding
<b> encoding string[optional] </b>encoding is the character encoding name 
used for the HTTP input character encoding conversion, HTTP output 
character encoding conversion, and the default character encoding 
for string functions defined by the mbstring module.
<b>returns</b>  mixed If encoding is set, then 
Returns true on success or false on failure.
If encoding is omitted, then 
the current character encoding name is returned.
</reference></element>
<element pattern="mb_language" autocomplete_append="($language = null);">
<reference>mb_language($language = null);
Set/Get current language
<b> language string[optional] </b>Used for encoding
e-mail messages. Valid languages are "Japanese",
"ja","English","en" and "uni"
(UTF-8). mb_send_mail uses this setting to
encode e-mail.
 
Language and its setting is ISO-2022-JP/Base64 for
Japanese, UTF-8/Base64 for uni, ISO-8859-1/quoted printable for
English.
<b>returns</b>  mixed If language is set and
language is valid, it returns
true. Otherwise, it returns false. 
When language is omitted, it returns the language
name as a string. If no language is set previously, it then returns
false.
</reference></element>
<element pattern="mb_list_encodings_alias_names"/>
<element pattern="mb_list_encodings" autocomplete_append="();">
<reference>mb_list_encodings();
Returns an array of all supported encodings
<b>returns</b>  array a numerically indexed array.
</reference></element>
<element pattern="mb_list_mime_names"/>
<element pattern="mb_output_handler" autocomplete_append="($contents, $status);">
<reference>mb_output_handler($contents, $status);
Callback function converts character encoding in output buffer
<b> contents string </b>The contents of the output buffer.
<b> status int </b>The status of the output buffer.
<b>returns</b>  string The converted string.
</reference></element>
<element pattern="mb_parse_str" autocomplete_append="($encoded_string, array &amp;$result = null);">
<reference>mb_parse_str($encoded_string, array &amp;$result = null);
Parse GET/POST/COOKIE data and set global variable
<b> encoded_string string </b>The URL encoded data.
<b> result array[optional] </b>An array containing decoded and character encoded converted values.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mb_preferred_mime_name" autocomplete_append="($encoding);">
<reference>mb_preferred_mime_name($encoding);
Get MIME charset string
<b> encoding string </b>The encoding being checked.
<b>returns</b>  string The MIME charset string for character encoding
encoding.
</reference></element>
<element pattern="mb_regex_encoding" autocomplete_append="($encoding = null);">
<reference>mb_regex_encoding($encoding = null);
Returns current encoding for multibyte regex as string
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  mixed 
</reference></element>
<element pattern="mb_regex_set_options" autocomplete_append="($options = null);">
<reference>mb_regex_set_options($options = null);
Set/Get the default options for mbregex functions
<b> options string[optional] </b>The options to set.
<b>returns</b>  string The previous options. If options is omitted, 
it returns the string that describes the current options.
</reference></element>
<element pattern="mb_send_mail" autocomplete_append="($to, $subject, $message, $additional_headers = null, $additional_parameter = null);">
<reference>mb_send_mail($to, $subject, $message, $additional_headers = null, $additional_parameter = null);
Send encoded mail
<b> to string </b>The mail addresses being sent to. Multiple
recipients may be specified by putting a comma between each
address in to. 
This parameter is not automatically encoded.
<b> subject string </b>The subject of the mail.
<b> message string </b>The message of the mail.
<b> additional_headers string[optional] </b>additional_headers is inserted at
the end of the header. This is typically used to add extra
headers. Multiple extra headers are separated with a
newline ("\n").
<b> additional_parameter string[optional] </b>additional_parameter is a MTA command line
parameter. It is useful when setting the correct Return-Path
header when using sendmail.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mb_split" autocomplete_append="($pattern, $string, $limit = null);">
<reference>mb_split($pattern, $string, $limit = null);
Split multibyte string using regular expression
<b> pattern string </b>The regular expression pattern.
<b> string string </b>The string being split.
<b> limit int[optional] If optional parameter limit is specified, </b>it will be split in limit elements as
maximum.
<b>returns</b>  array The result as an array.
</reference></element>
<element pattern="mb_strcut" autocomplete_append="($str, $start, $length = null, $encoding = null);">
<reference>mb_strcut($str, $start, $length = null, $encoding = null);
Get part of string
<b> str string </b>The string being cut.
<b> start int </b>The position that begins the cut.
<b> length int[optional] </b>The string being decoded.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string mb_strcut returns the portion of
str specified by the
start and
length parameters.
</reference></element>
<element pattern="mb_strimwidth" autocomplete_append="($str, $start, $width, $trimmarker = null, $encoding = null);">
<reference>mb_strimwidth($str, $start, $width, $trimmarker = null, $encoding = null);
Get truncated string with specified width
<b> str string </b>The string being decoded.
<b> start int </b>The start position offset. Number of
characters from the beginning of string. (First character is 0)
<b> width int </b>The width of the desired trim.
<b> trimmarker string[optional] </b>A string that is added to the end of string 
when string is truncated.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string The truncated string. If trimmarker is set,
trimmarker is appended to the return value.
</reference></element>
<element pattern="mb_stripos" autocomplete_append="($haystack, $needle, $offset = null, $encoding = null);">
<reference>mb_stripos($haystack, $needle, $offset = null, $encoding = null);
Finds position of first occurrence of a string within another, case insensitive
<b> haystack string </b>The string from which to get the position of the first occurrence
of needle
<b> needle string </b>The string to find in haystack
<b> offset int[optional] </b>The position in haystack
to start searching
<b> encoding string[optional] </b>Character encoding name to use.
If it is omitted, internal character encoding is used.
<b>returns</b>  int Return the numeric position of the first occurrence of
needle in the haystack
string, or false if needle is not found.
</reference></element>
<element pattern="mb_stristr" autocomplete_append="($haystack, $needle, $part = null, $encoding = null);">
<reference>mb_stristr($haystack, $needle, $part = null, $encoding = null);
Finds first occurrence of a string within another, case insensitive
<b> haystack string </b>The string from which to get the first occurrence
of needle
<b> needle string </b>The string to find in haystack
<b> part bool[optional] </b>Determines which portion of haystack
this function returns. 
If set to true, it returns all of haystack
from the beginning to the first occurrence of needle.
If set to false, it returns all of haystack
from the first occurrence of needle to the end,
Default value is false.
<b> encoding string[optional] </b>Character encoding name to use.
If it is omitted, internal character encoding is used.
<b>returns</b>  string the portion of haystack,
or false if needle is not found.
</reference></element>
<element pattern="mb_strlen" autocomplete_append="($str, $encoding = null);">
<reference>mb_strlen($str, $encoding = null);
Get string length
<b> str string </b>The string being checked for length.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  int the number of characters in
string str having character encoding
encoding. A multi-byte character is
counted as 1.
</reference></element>
<element pattern="mb_strpos" autocomplete_append="($haystack, $needle, $offset = null, $encoding = null);">
<reference>mb_strpos($haystack, $needle, $offset = null, $encoding = null);
Find position of first occurrence of string in a string
<b> haystack string </b>The string being checked.
<b> needle string </b>The position counted from the beginning of haystack.
<b> offset int[optional] </b>The search offset. If it is not specified, 0 is used.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  int the numeric position of
the first occurrence of needle in the
haystack string. If
needle is not found, it returns false.
</reference></element>
<element pattern="mb_strrchr" autocomplete_append="($haystack, $needle, $part = null, $encoding = null);">
<reference>mb_strrchr($haystack, $needle, $part = null, $encoding = null);
Finds the last occurrence of a character in a string within another
<b> haystack string </b>The string from which to get the last occurrence
of needle
<b> needle string </b>The string to find in haystack
<b> part bool[optional] </b>Determines which portion of haystack
this function returns. 
If set to true, it returns all of haystack
from the beginning to the last occurrence of needle.
If set to false, it returns all of haystack
from the last occurrence of needle to the end,
Default value is false.
<b> encoding string[optional] </b>Character encoding name to use.
If it is omitted, internal character encoding is used.
<b>returns</b>  string the portion of haystack.
or false if needle is not found.
</reference></element>
<element pattern="mb_strrichr" autocomplete_append="($haystack, $needle, $part = null, $encoding = null);">
<reference>mb_strrichr($haystack, $needle, $part = null, $encoding = null);
Finds the last occurrence of a character in a string within another, case insensitive
<b> haystack string </b>The string from which to get the last occurrence
of needle
<b> needle string </b>The string to find in haystack
<b> part bool[optional] </b>Determines which portion of haystack
this function returns. 
If set to true, it returns all of haystack
from the beginning to the last occurrence of needle.
If set to false, it returns all of haystack
from the last occurrence of needle to the end,
Default value is false.
<b> encoding string[optional] </b>Character encoding name to use.
If it is omitted, internal character encoding is used.
<b>returns</b>  string the portion of haystack.
or false if needle is not found.
</reference></element>
<element pattern="mb_strripos" autocomplete_append="($haystack, $needle, $offset = null, $encoding = null);">
<reference>mb_strripos($haystack, $needle, $offset = null, $encoding = null);
Finds position of last occurrence of a string within another, case insensitive
<b> haystack string </b>The string from which to get the position of the last occurrence
of needle
<b> needle string </b>The string to find in haystack
<b> offset int[optional] </b>The position in haystack
to start searching
<b> encoding string[optional] </b>Character encoding name to use.
If it is omitted, internal character encoding is used.
<b>returns</b>  int Return the numeric position of
the last occurrence of needle in the
haystack string, or false
if needle is not found.
</reference></element>
<element pattern="mb_strrpos" autocomplete_append="($haystack, $needle, $offset = null, $encoding = null);">
<reference>mb_strrpos($haystack, $needle, $offset = null, $encoding = null);
Find position of last occurrence of a string in a string
<b> haystack string </b>The string being checked, for the last occurrence
of needle
<b> needle string </b>The string to find in haystack.
<b> offset int[optional] May be specified to begin searching an arbitrary number of characters into</b>the string. Negative values will stop searching at an arbitrary point
prior to the end of the string.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  int the numeric position of
the last occurrence of needle in the
haystack string. If
needle is not found, it returns false.
</reference></element>
<element pattern="mb_strstr" autocomplete_append="($haystack, $needle, $part = null, $encoding = null);">
<reference>mb_strstr($haystack, $needle, $part = null, $encoding = null);
Finds first occurrence of a string within another
<b> haystack string </b>The string from which to get the first occurrence
of needle
<b> needle string </b>The string to find in haystack
<b> part bool[optional] </b>Determines which portion of haystack
this function returns. 
If set to true, it returns all of haystack
from the beginning to the first occurrence of needle.
If set to false, it returns all of haystack
from the first occurrence of needle to the end,
Default value is false.
<b> encoding string[optional] </b>Character encoding name to use.
If it is omitted, internal character encoding is used.
<b>returns</b>  string the portion of haystack,
or false if needle is not found.
</reference></element>
<element pattern="mb_strtolower" autocomplete_append="($str, $encoding = null);">
<reference>mb_strtolower($str, $encoding = null);
Make a string lowercase
<b> str string </b>The string being lowercased.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string str with all alphabetic characters converted to lowercase.
</reference></element>
<element pattern="mb_strtoupper" autocomplete_append="($str, $encoding = null);">
<reference>mb_strtoupper($str, $encoding = null);
Make a string uppercase
<b> str string </b>The string being uppercased.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string str with all alphabetic characters converted to uppercase.
</reference></element>
<element pattern="mb_strwidth" autocomplete_append="($str, $encoding = null);">
<reference>mb_strwidth($str, $encoding = null);
Return width of string
<b> str string </b>The string being decoded.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  int The width of string str.
</reference></element>
<element pattern="mb_substitute_character" autocomplete_append="($substrchar = null);">
<reference>mb_substitute_character($substrchar = null);
Set/Get substitution character
<b> substrchar mixed[optional] </b>Specify the Unicode value as an integer, 
or as one of the following strings:
"none" : no output
<b>returns</b>  mixed If substchar is set, it returns true for success, 
otherwise returns false. 
If substchar is not set, it returns the Unicode value, 
or "none" or "long".
</reference></element>
<element pattern="mb_substr_count" autocomplete_append="($haystack, $needle, $encoding = null);">
<reference>mb_substr_count($haystack, $needle, $encoding = null);
Count the number of substring occurrences
<b> haystack string </b>The string being checked.
<b> needle string </b>The string being found.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  int The number of times the
needle substring occurs in the
haystack string.
</reference></element>
<element pattern="mb_substr" autocomplete_append="($str, $start, $length = null, $encoding = null);">
<reference>mb_substr($str, $start, $length = null, $encoding = null);
Get part of string
<b> str string </b>The string being checked.
<b> start int </b>The first position used in str.
<b> length int[optional] </b>The maximum length of the returned string.
<b> encoding string[optional] &amp;mbstring.encoding.parameter;</b><b>returns</b>  string mb_substr returns the portion of
str specified by the
start and
length parameters.
</reference></element>
<element pattern="muscat_close"/>
<element pattern="muscat_get"/>
<element pattern="muscat_give"/>
<element pattern="muscat_setup_net"/>
<element pattern="muscat_setup"/>
<element pattern="mysql_affected_rows" autocomplete_append="($link_identifier = null);">
<reference>mysql_affected_rows($link_identifier = null);
Get number of affected rows in previous MySQL operation
<b> link_identifier resource[optional] </b><b>returns</b>  int the number of affected rows on success, and -1 if the last query
failed.
If the last query was a DELETE query with no WHERE clause, all
of the records will have been deleted from the table but this
function will return zero with MySQL versions prior to 4.1.2.
When using UPDATE, MySQL will not update columns where the new value is the 
same as the old value. This creates the possibility that 
mysql_affected_rows may not actually equal the number 
of rows matched, only the number of rows that were literally affected by 
the query.
The REPLACE statement first deletes the record with the same primary key 
and then inserts the new record. This function returns the number of 
deleted records plus the number of inserted records.
</reference></element>
<element pattern="mysql_change_user"/>
<element pattern="mysql_client_encoding" autocomplete_append="($link_identifier = null);">
<reference>mysql_client_encoding($link_identifier = null);
Returns the name of the character set
<b> link_identifier resource[optional] </b><b>returns</b>  string the default character set name for the current connection.
</reference></element>
<element pattern="mysql_close" autocomplete_append="($link_identifier = null);">
<reference>mysql_close($link_identifier = null);
Close MySQL connection
<b> link_identifier resource[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mysql_connect" autocomplete_append="($server = null, $username = null, $password = null, $new_link = null, $client_flags = null);">
<reference>mysql_connect($server = null, $username = null, $password = null, $new_link = null, $client_flags = null);
Open a connection to a MySQL Server
<b> server string[optional] </b>The MySQL server. It can also include a port number. e.g. 
"hostname:port" or a path to a local socket e.g. ":/path/to/socket" for 
the localhost.
If the PHP directive 
mysql.default_host is undefined (default), then the default 
value is 'localhost:3306'. In &amp;sqlsafemode;, this parameter is ignored
and value 'localhost:3306' is always used.
<b> username string[optional] </b>The username. Default value is defined by mysql.default_user. In
&amp;sqlsafemode;, this parameter is ignored and the name of the user that
owns the server process is used.
<b> password string[optional] </b>The password. Default value is defined by mysql.default_password. In
&amp;sqlsafemode;, this parameter is ignored and empty password is used.
<b> new_link bool[optional] </b>If a second call is made to mysql_connect
with the same arguments, no new link will be established, but
instead, the link identifier of the already opened link will be
returned. The new_link parameter modifies this 
behavior and makes mysql_connect always open 
a new link, even if mysql_connect was called 
before with the same parameters.
In &amp;sqlsafemode;, this parameter is ignored.
<b> client_flags int[optional] </b>The client_flags parameter can be a combination 
of the following constants:
128 (enable LOAD DATA LOCAL handling),
MYSQL_CLIENT_SSL,
MYSQL_CLIENT_COMPRESS, 
MYSQL_CLIENT_IGNORE_SPACE or
MYSQL_CLIENT_INTERACTIVE.
Read the section about for further information.
In &amp;sqlsafemode;, this parameter is ignored.
<b>returns</b>  resource a MySQL link identifier on success, or false on failure.
</reference></element>
<element pattern="mysql_create_db"/>
<element pattern="mysql_data_seek" autocomplete_append="($result, $row_number);">
<reference>mysql_data_seek($result, $row_number);
Move internal result pointer
<b> result resource </b><b> row_number int </b>The desired row number of the new result pointer.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mysql_db_name" autocomplete_append="($result, $row, $field = null);">
<reference>mysql_db_name($result, $row, $field = null);
Get result data
<b> result resource </b>The result pointer from a call to mysql_list_dbs.
<b> row int </b>The index into the result set.
<b> field mixed[optional] </b>The field name.
<b>returns</b>  string the database name on success, and false on failure. If false
is returned, use mysql_error to determine the nature
of the error.
</reference></element>
<element pattern="mysql_db_query" autocomplete_append="($database, $query, $link_identifier = null);">
<reference>mysql_db_query($database, $query, $link_identifier = null);
Send a MySQL query
<b> database string </b>The name of the database that will be selected.
<b> query string </b>The MySQL query.
<b> link_identifier resource[optional] </b><b>returns</b>  resource a positive MySQL result resource to the query result,
or false on error. The function also returns true/false for
INSERT/UPDATE/DELETE
queries to indicate success/failure.
</reference></element>
<element pattern="mysql_drop_db"/>
<element pattern="mysql_errno" autocomplete_append="($link_identifier = null);">
<reference>mysql_errno($link_identifier = null);
Returns the numerical value of the error message from previous MySQL operation
<b> link_identifier resource[optional] </b><b>returns</b>  int the error number from the last MySQL function, or
0 (zero) if no error occurred.
</reference></element>
<element pattern="mysql_error" autocomplete_append="($link_identifier = null);">
<reference>mysql_error($link_identifier = null);
Returns the text of the error message from previous MySQL operation
<b> link_identifier resource[optional] </b><b>returns</b>  string the error text from the last MySQL function, or
'' (empty string) if no error occurred.
</reference></element>
<element pattern="mysql_escape_string" autocomplete_append="($unescaped_string);">
<reference>mysql_escape_string($unescaped_string);
Escapes a string for use in a mysql_query
<b> unescaped_string string </b>The string that is to be escaped.
<b>returns</b>  string the escaped string.
</reference></element>
<element pattern="mysql_fetch_array" autocomplete_append="($result, $result_type = null);">
<reference>mysql_fetch_array($result, $result_type = null);
Fetch a result row as an associative array, a numeric array, or both
<b> result resource </b><b> result_type int[optional] </b>The type of array that is to be fetched. It's a constant and can
take the following values: MYSQL_ASSOC, 
MYSQL_NUM, and the default value of 
MYSQL_BOTH.
<b>returns</b>  array an array of strings that corresponds to the fetched row, or false
if there are no more rows. The type of returned array depends on
how result_type is defined. By using 
MYSQL_BOTH (default), you'll get an array with both 
associative and number indices. Using MYSQL_ASSOC, you 
only get associative indices (as mysql_fetch_assoc 
works), using MYSQL_NUM, you only get number indices 
(as mysql_fetch_row works).
If two or more columns of the result have the same field names,
the last column will take precedence. To access the other column(s)
of the same name, you must use the numeric index of the column or
make an alias for the column. For aliased columns, you cannot
access the contents with the original column name.
</reference></element>
<element pattern="mysql_fetch_assoc" autocomplete_append="($result);">
<reference>mysql_fetch_assoc($result);
Fetch a result row as an associative array
<b> result resource </b><b>returns</b>  array an associative array of strings that corresponds to the fetched row, or 
false if there are no more rows.
If two or more columns of the result have the same field names,
the last column will take precedence. To access the other
column(s) of the same name, you either need to access the
result with numeric indices by using
mysql_fetch_row or add alias names.
See the example at the mysql_fetch_array
description about aliases.
</reference></element>
<element pattern="mysql_fetch_field" autocomplete_append="($result, $field_offset = null);">
<reference>mysql_fetch_field($result, $field_offset = null);
Get column information from a result and return as an object
<b> result resource </b><b> field_offset int[optional] </b>The numerical field offset. If the field offset is not specified, the 
next field that was not yet retrieved by this function is retrieved. 
The field_offset starts at 0.
<b>returns</b>  object an object containing field information. The properties 
of the object are:
name - column name
table - name of the table the column belongs to
def - default value of the column
max_length - maximum length of the column
not_null - 1 if the column cannot be &amp;null;
primary_key - 1 if the column is a primary key
unique_key - 1 if the column is a unique key
multiple_key - 1 if the column is a non-unique key
numeric - 1 if the column is numeric
blob - 1 if the column is a BLOB
type - the type of the column
unsigned - 1 if the column is unsigned
zerofill - 1 if the column is zero-filled
</reference></element>
<element pattern="mysql_fetch_lengths" autocomplete_append="($result);">
<reference>mysql_fetch_lengths($result);
Get the length of each output in a result
<b> result resource </b><b>returns</b>  array An array of lengths on success, or false on failure.
</reference></element>
<element pattern="mysql_fetch_object" autocomplete_append="($result, $class_name = null, array $params = null);">
<reference>mysql_fetch_object($result, $class_name = null, array $params = null);
Fetch a result row as an object
<b> result resource </b><b> class_name string[optional] </b>The name of the class to instantiate, set the properties of and return.
If not specified, a stdClass object is returned.
<b> params array[optional] </b>An optional array of parameters to pass to the constructor
for class_name objects.
<b>returns</b>  object an object with string properties that correspond to the
fetched row, or false if there are no more rows.
mysql_fetch_row fetches one row of data from
the result associated with the specified result identifier. The
row is returned as an array. Each result column is stored in an
array offset, starting at offset 0.
</reference></element>
<element pattern="mysql_fetch_row" autocomplete_append="($result);">
<reference>mysql_fetch_row($result);
Get a result row as an enumerated array
<b> result resource </b><b>returns</b>  array an numerical array of strings that corresponds to the fetched row, or 
false if there are no more rows.
mysql_fetch_row fetches one row of data from
the result associated with the specified result identifier. The
row is returned as an array. Each result column is stored in an
array offset, starting at offset 0.
</reference></element>
<element pattern="mysql_field_flags" autocomplete_append="($result, $field_offset);">
<reference>mysql_field_flags($result, $field_offset);
Get the flags associated with the specified field in a result
<b> result resource </b><b> field_offset int </b><b>returns</b>  string a string of flags associated with the result, or false on failure.
The following flags are reported, if your version of MySQL
is current enough to support them: "not_null", 
"primary_key", "unique_key", 
"multiple_key", "blob", 
"unsigned", "zerofill",
"binary", "enum", 
"auto_increment" and "timestamp".
</reference></element>
<element pattern="mysql_field_len" autocomplete_append="($result, $field_offset);">
<reference>mysql_field_len($result, $field_offset);
Returns the length of the specified field
<b> result resource </b><b> field_offset int </b><b>returns</b>  int The length of the specified field index on success, or false on failure.
</reference></element>
<element pattern="mysql_field_name" autocomplete_append="($result, $field_offset);">
<reference>mysql_field_name($result, $field_offset);
Get the name of the specified field in a result
<b> result resource </b><b> field_offset int </b><b>returns</b>  string The name of the specified field index on success, or false on failure.
</reference></element>
<element pattern="mysql_field_seek" autocomplete_append="($result, $field_offset);">
<reference>mysql_field_seek($result, $field_offset);
Set result pointer to a specified field offset
<b> result resource </b><b> field_offset int </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mysql_field_table" autocomplete_append="($result, $field_offset);">
<reference>mysql_field_table($result, $field_offset);
Get name of the table the specified field is in
<b> result resource </b><b> field_offset int </b><b>returns</b>  string The name of the table on success.
</reference></element>
<element pattern="mysql_field_type" autocomplete_append="($result, $field_offset);">
<reference>mysql_field_type($result, $field_offset);
Get the type of the specified field in a result
<b> result resource </b><b> field_offset int </b><b>returns</b>  string The returned field type
will be one of "int", "real", 
"string", "blob", and others as
detailed in the MySQL
documentation.
</reference></element>
<element pattern="mysql_free_result" autocomplete_append="($result);">
<reference>mysql_free_result($result);
Free result memory
<b> result resource </b><b>returns</b>  bool Returns true on success or false on failure.
If a non-resource is used for the result, an
error of level E_WARNING will be emitted. It's worth noting that
mysql_query only returns a resource
for SELECT, SHOW, EXPLAIN, and DESCRIBE queries.
</reference></element>
<element pattern="mysql_get_client_info" autocomplete_append="();">
<reference>mysql_get_client_info();
Get MySQL client info
<b>returns</b>  string The MySQL client version.
</reference></element>
<element pattern="mysql_get_host_info" autocomplete_append="($link_identifier = null);">
<reference>mysql_get_host_info($link_identifier = null);
Get MySQL host info
<b> link_identifier resource[optional] </b><b>returns</b>  string a string describing the type of MySQL connection in use for the 
connection or false on failure.
</reference></element>
<element pattern="mysql_get_proto_info" autocomplete_append="($link_identifier = null);">
<reference>mysql_get_proto_info($link_identifier = null);
Get MySQL protocol info
<b> link_identifier resource[optional] </b><b>returns</b>  int the MySQL protocol on success, or false on failure.
</reference></element>
<element pattern="mysql_get_server_info" autocomplete_append="($link_identifier = null);">
<reference>mysql_get_server_info($link_identifier = null);
Get MySQL server info
<b> link_identifier resource[optional] </b><b>returns</b>  string the MySQL server version on success, or false on failure.
</reference></element>
<element pattern="mysql_info" autocomplete_append="($link_identifier = null);">
<reference>mysql_info($link_identifier = null);
Get information about the most recent query
<b> link_identifier resource[optional] </b><b>returns</b>  string information about the statement on success, or false on
failure. See the example below for which statements provide information,
and what the returned value may look like. Statements that are not listed 
will return false.
</reference></element>
<element pattern="mysql_insert_id" autocomplete_append="($link_identifier = null);">
<reference>mysql_insert_id($link_identifier = null);
Get the ID generated from the previous INSERT operation
<b> link_identifier resource[optional] </b><b>returns</b>  int The ID generated for an AUTO_INCREMENT column by the previous 
INSERT query on success, 0 if the previous
query does not generate an AUTO_INCREMENT value, or false if
no MySQL connection was established.
</reference></element>
<element pattern="mysql_list_dbs" autocomplete_append="($link_identifier = null);">
<reference>mysql_list_dbs($link_identifier = null);
List databases available on a MySQL server
<b> link_identifier resource[optional] </b><b>returns</b>  resource a result pointer resource on success, or false on
failure. Use the mysql_tablename function to traverse 
this result pointer, or any function for result tables, such as 
mysql_fetch_array.
</reference></element>
<element pattern="mysql_list_fields" autocomplete_append="($database_name, $table_name, $link_identifier = null);">
<reference>mysql_list_fields($database_name, $table_name, $link_identifier = null);
List MySQL table fields
<b> database_name string </b>The name of the database that's being queried.
<b> table_name string </b>The name of the table that's being queried.
<b> link_identifier resource[optional] </b><b>returns</b>  resource A result pointer resource on success, or false on
failure.
The returned result can be used with mysql_field_flags,
mysql_field_len,
mysql_field_name&amp;listendand;
mysql_field_type.
</reference></element>
<element pattern="mysql_list_processes" autocomplete_append="($link_identifier = null);">
<reference>mysql_list_processes($link_identifier = null);
List MySQL processes
<b> link_identifier resource[optional] </b><b>returns</b>  resource A result pointer resource on success, or false on failure.
</reference></element>
<element pattern="mysql_list_tables" autocomplete_append="($database, $link_identifier = null);">
<reference>mysql_list_tables($database, $link_identifier = null);
List tables in a MySQL database
<b> database string </b>The name of the database
<b> link_identifier resource[optional] </b><b>returns</b>  resource A result pointer resource on success, or false on failure.
Use the mysql_tablename function to
traverse this result pointer, or any function for result tables,
such as mysql_fetch_array.
</reference></element>
<element pattern="mysql_num_fields" autocomplete_append="($result);">
<reference>mysql_num_fields($result);
Get number of fields in result
<b> result resource </b><b>returns</b>  int the number of fields in the result set resource on
success, or false on failure.
</reference></element>
<element pattern="mysql_num_rows" autocomplete_append="($result);">
<reference>mysql_num_rows($result);
Get number of rows in result
<b> result resource </b><b>returns</b>  int The number of rows in a result set on success, or false on failure.
</reference></element>
<element pattern="mysql_pconnect" autocomplete_append="($server = null, $username = null, $password = null, $client_flags = null);">
<reference>mysql_pconnect($server = null, $username = null, $password = null, $client_flags = null);
Open a persistent connection to a MySQL server
<b> server string[optional] </b>The MySQL server. It can also include a port number. e.g. 
"hostname:port" or a path to a local socket e.g. ":/path/to/socket" for 
the localhost.
If the PHP directive 
mysql.default_host is undefined (default), then the default 
value is 'localhost:3306'
<b> username string[optional] </b>The username. Default value is the name of the user that owns the
server process.
<b> password string[optional] </b>The password. Default value is an empty password.
<b> client_flags int[optional] </b>The client_flags parameter can be a combination 
of the following constants:
128 (enable LOAD DATA LOCAL handling),
MYSQL_CLIENT_SSL, 
MYSQL_CLIENT_COMPRESS, 
MYSQL_CLIENT_IGNORE_SPACE or
MYSQL_CLIENT_INTERACTIVE.
<b>returns</b>  resource a MySQL persistent link identifier on success, or false on 
failure.
</reference></element>
<element pattern="mysql_ping" autocomplete_append="($link_identifier = null);">
<reference>mysql_ping($link_identifier = null);
Ping a server connection or reconnect if there is no connection
<b> link_identifier resource[optional] </b><b>returns</b>  bool true if the connection to the server MySQL server is working, 
otherwise false.
</reference></element>

<element pattern="mysql_query" autocomplete_append="($query, $link_identifier = null);">
<reference>mysql_query($query, $link_identifier = null);
Send a MySQL query
<b> query string </b>A SQL query
The query string should not end with a semicolon.
<b> link_identifier resource[optional] </b><b>returns</b>  resource For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset,
mysql_query 
returns a resource on success, or false on
error.
For other type of SQL statements, INSERT, UPDATE, DELETE, DROP, etc,
mysql_query returns true on success
or false on error.
The returned result resource should be passed to
mysql_fetch_array, and other
functions for dealing with result tables, to access the returned data.
Use mysql_num_rows to find out how many rows
were returned for a SELECT statement or
mysql_affected_rows to find out how many
rows were affected by a DELETE, INSERT, REPLACE, or UPDATE
statement.
mysql_query will also fail and return false
if the user does not have permission to access the table(s) referenced by
the query.
</reference></element>
<element pattern="mysql_real_escape_string" autocomplete_append="($unescaped_string, $link_identifier = null);">
<reference>mysql_real_escape_string($unescaped_string, $link_identifier = null);
Escapes special characters in a string for use in a SQL statement
<b> unescaped_string string </b>The string that is to be escaped.
<b> link_identifier resource[optional] </b><b>returns</b>  string the escaped string, or false on error.
</reference></element>
<element pattern="mysql_result" autocomplete_append="($result, $row, $field = null);">
<reference>mysql_result($result, $row, $field = null);
Get result data
<b> result resource </b><b> row int </b>The row number from the result that's being retrieved. Row numbers 
start at 0.
<b> field mixed[optional] </b>The name or offset of the field being retrieved.
It can be the field's offset, the field's name, or the field's table 
dot field name (tablename.fieldname). If the column name has been
aliased ('select foo as bar from...'), use the alias instead of the 
column name. If undefined, the first field is retrieved.
<b>returns</b>  string The contents of one cell from a MySQL result set on success, or 
false on failure.
</reference></element>
<element pattern="mysql_select_db" autocomplete_append="($database_name, $link_identifier = null);">
<reference>mysql_select_db($database_name, $link_identifier = null);
Select a MySQL database
<b> database_name string </b>The name of the database that is to be selected.
<b> link_identifier resource[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mysql_set_charset" autocomplete_append="($charset, $link_identifier = null);">
<reference>mysql_set_charset($charset, $link_identifier = null);
Sets the client character set
<b> charset string </b>A valid character set name.
<b> link_identifier resource[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mysql_stat" autocomplete_append="($link_identifier = null);">
<reference>mysql_stat($link_identifier = null);
Get current system status
<b> link_identifier resource[optional] </b><b>returns</b>  string a string with the status for uptime, threads, queries, open tables, 
flush tables and queries per second. For a complete list of other status 
variables, you have to use the SHOW STATUS SQL command. 
If link_identifier is invalid, &amp;null; is returned.
</reference></element>
<element pattern="mysql_tablename" autocomplete_append="($result, $i);">
<reference>mysql_tablename($result, $i);
Get table name of field
<b> result resource </b>A result pointer resource that's returned from 
mysql_list_tables.
<b> i int </b>The integer index (row/table number)
<b>returns</b>  string The name of the table on success, or false on failure.
Use the mysql_tablename function to
traverse this result pointer, or any function for result tables,
such as mysql_fetch_array.
</reference></element>
<element pattern="mysql_thread_id" autocomplete_append="($link_identifier = null);">
<reference>mysql_thread_id($link_identifier = null);
Return the current thread ID
<b> link_identifier resource[optional] </b><b>returns</b>  int The thread ID on success, or false on failure.
</reference></element>
<element pattern="mysql_unbuffered_query" autocomplete_append="($query, $link_identifier = null);">
<reference>mysql_unbuffered_query($query, $link_identifier = null);
Send an SQL query to MySQL, without fetching and buffering the result rows
<b> query string </b>A SQL query
<b> link_identifier resource[optional] </b><b>returns</b>  resource For SELECT, SHOW, DESCRIBE or EXPLAIN statements,
mysql_unbuffered_query 
returns a resource on success, or false on
error.
For other type of SQL statements, UPDATE, DELETE, DROP, etc,
mysql_unbuffered_query returns true on success
or false on error.
</reference></element>
<element pattern="mysqli_affected_rows" autocomplete_append="();">
<reference>mysqli_affected_rows();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="mysqli_autocommit" autocomplete_append="();">
<reference>mysqli_autocommit();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="autocommit"/>
<element pattern="mysqli_change_user" autocomplete_append="();">
<reference>mysqli_change_user();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="change_user"/>
<element pattern="mysqli_character_set_name" autocomplete_append="();">
<reference>mysqli_character_set_name();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="character_set_name"/>
<element pattern="mysqli_close" autocomplete_append="();">
<reference>mysqli_close();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="close"/>
<element pattern="mysqli_commit" autocomplete_append="();">
<reference>mysqli_commit();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="commit"/>
<element pattern="mysqli_connect_errno" autocomplete_append="();">
<reference>mysqli_connect_errno();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="mysqli_connect_error" autocomplete_append="();">
<reference>mysqli_connect_error();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="mysqli_connect" autocomplete_append="();">
<reference>mysqli_connect();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="__construct"/>
<element pattern="mysqli_data_seek" autocomplete_append="();">
<reference>mysqli_data_seek();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="data_seek"/>
<element pattern="mysqli_debug" autocomplete_append="();">
<reference>mysqli_debug();
hp
Start of mysqli v.0.1
ss mysqli_sql_exception extends RuntimeException  {
otected $message;
otected $code;
otected $file;
otected $line;
otected $sqlstate;
nal private function __clone () {}
*
 @param message[optional]
 @param code[optional]
/
blic function __construct ($message, $code) {}
nal public function getMessage () {}
nal public function getCode () {}
nal public function getFile () {}
nal public function getLine () {}
nal public function getTrace () {}
nal public function getTraceAsString () {}
blic function __toString () {}
al class mysqli_driver  {
blic function embedded_server_start () {}
blic function embedded_server_end () {}
ss mysqli  {
blic function autocommit () {}
blic function change_user () {}
blic function character_set_name () {}
blic function client_encoding () {}
blic function close () {}
blic function commit () {}
blic function connect () {}
blic function debug () {}
blic function disable_reads_from_master () {}
blic function disable_rpl_parse () {}
blic function dump_debug_info () {}
blic function enable_reads_from_master () {}
blic function enable_rpl_parse () {}
blic function get_charset () {}
blic function get_client_info () {}
blic function get_server_info () {}
blic function get_warnings () {}
blic function init () {}
blic function kill () {}
blic function set_local_infile_default () {}
blic function set_local_infile_handler () {}
blic function master_query () {}
blic function multi_query () {}
blic function mysqli () {}
blic function more_results () {}
blic function next_result () {}
blic function options () {}
blic function ping () {}
blic function prepare () {}
blic function query () {}
blic function real_connect () {}
blic function real_escape_string () {}
blic function escape_string () {}
blic function real_query () {}
blic function rollback () {}
blic function rpl_parse_enabled () {}
blic function rpl_probe () {}
blic function rpl_query_type () {}
blic function select_db () {}
blic function set_charset () {}
blic function set_opt () {}
blic function slave_query () {}
blic function ssl_set () {}
blic function stat () {}
blic function stmt_init () {}
blic function store_result () {}
blic function thread_safe () {}
blic function use_result () {}
al class mysqli_warning  {
otected function __construct () {}
blic function next () {}
ss mysqli_result  {
blic function mysqli_result () {}
blic function close () {}
blic function free () {}
blic function data_seek () {}
blic function fetch_field () {}
blic function fetch_fields () {}
blic function fetch_field_direct () {}
blic function fetch_array () {}
blic function fetch_assoc () {}
blic function fetch_object () {}
blic function fetch_row () {}
blic function field_count () {}
blic function field_seek () {}
blic function free_result () {}
ss mysqli_stmt  {
blic function mysqli_stmt () {}
blic function attr_get () {}
blic function attr_set () {}
*
 @param var1
/
blic function bind_param ($var1) {}
blic function bind_result () {}
blic function close () {}
blic function data_seek () {}
blic function execute () {}
blic function fetch () {}
blic function get_warnings () {}
blic function result_metadata () {}
blic function num_rows () {}
blic function send_long_data () {}
blic function stmt () {}
blic function free_result () {}
blic function reset () {}
blic function prepare () {}
blic function store_result () {}
</reference></element>
<element pattern="debug"/>
<element pattern="mysqli_disable_reads_from_master" autocomplete_append="();">
<reference>mysqli_disable_reads_from_master();
Disable reads from master
<b>returns</b>  void 
</reference></element>
<element pattern="disable_reads_from_master"/>
<element pattern="mysqli_disable_rpl_parse" autocomplete_append="(mysqli $link);">
<reference>mysqli_disable_rpl_parse(mysqli $link);
Disable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_dump_debug_info" autocomplete_append="();">
<reference>mysqli_dump_debug_info();
Disable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="dump_debug_info"/>
<element pattern="mysqli_embedded_server_end" autocomplete_append="();">
<reference>mysqli_embedded_server_end();
Enable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_embedded_server_start" autocomplete_append="();">
<reference>mysqli_embedded_server_start();
Enable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_enable_reads_from_master" autocomplete_append="(mysqli $link);">
<reference>mysqli_enable_reads_from_master(mysqli $link);
Enable reads from master
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_enable_rpl_parse" autocomplete_append="(mysqli $link);">
<reference>mysqli_enable_rpl_parse(mysqli $link);
Enable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_errno" autocomplete_append="();">
<reference>mysqli_errno();
Enable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_error" autocomplete_append="();">
<reference>mysqli_error();
Enable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_fetch_array" autocomplete_append="();">
<reference>mysqli_fetch_array();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="fetch_array"/>
<element pattern="mysqli_fetch_assoc" autocomplete_append="();">
<reference>mysqli_fetch_assoc();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="fetch_assoc"/>
<element pattern="mysqli_fetch_field_direct" autocomplete_append="();">
<reference>mysqli_fetch_field_direct();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="fetch_field_direct"/>
<element pattern="mysqli_fetch_field" autocomplete_append="();">
<reference>mysqli_fetch_field();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="fetch_field"/>
<element pattern="mysqli_fetch_fields" autocomplete_append="();">
<reference>mysqli_fetch_fields();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="fetch_fields"/>
<element pattern="mysqli_fetch_lengths" autocomplete_append="();">
<reference>mysqli_fetch_lengths();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_fetch_object" autocomplete_append="();">
<reference>mysqli_fetch_object();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="fetch_object"/>
<element pattern="mysqli_fetch_row" autocomplete_append="();">
<reference>mysqli_fetch_row();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="fetch_row"/>
<element pattern="mysqli_field_count" autocomplete_append="();">
<reference>mysqli_field_count();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="field_count"/>
<element pattern="mysqli_field_seek" autocomplete_append="();">
<reference>mysqli_field_seek();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="field_seek"/>
<element pattern="mysqli_field_tell" autocomplete_append="();">
<reference>mysqli_field_tell();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_free_result" autocomplete_append="();">
<reference>mysqli_free_result();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="free"/>
<element pattern="close"/>
<element pattern="free_result"/>
<element pattern="mysqli_get_charset" autocomplete_append="();">
<reference>mysqli_get_charset();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_get_client_info" autocomplete_append="();">
<reference>mysqli_get_client_info();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_get_client_version" autocomplete_append="();">
<reference>mysqli_get_client_version();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_get_host_info" autocomplete_append="();">
<reference>mysqli_get_host_info();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_get_proto_info" autocomplete_append="();">
<reference>mysqli_get_proto_info();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_get_server_info" autocomplete_append="();">
<reference>mysqli_get_server_info();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_get_server_version" autocomplete_append="();">
<reference>mysqli_get_server_version();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_get_warnings" autocomplete_append="();">
<reference>mysqli_get_warnings();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_info" autocomplete_append="();">
<reference>mysqli_info();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_init" autocomplete_append="();">
<reference>mysqli_init();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="init"/>
<element pattern="mysqli_insert_id" autocomplete_append="();">
<reference>mysqli_insert_id();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_kill" autocomplete_append="();">
<reference>mysqli_kill();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="kill"/>
<element pattern="mysqli_master_query" autocomplete_append="(mysqli $link, $query);">
<reference>mysqli_master_query(mysqli $link, $query);
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_more_results" autocomplete_append="();">
<reference>mysqli_more_results();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_multi_query" autocomplete_append="();">
<reference>mysqli_multi_query();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="multi_query"/>
<element pattern="mysqli_next_result" autocomplete_append="();">
<reference>mysqli_next_result();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_num_fields" autocomplete_append="();">
<reference>mysqli_num_fields();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_num_rows" autocomplete_append="();">
<reference>mysqli_num_rows();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_options" autocomplete_append="();">
<reference>mysqli_options();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="options"/>
<element pattern="mysqli_ping" autocomplete_append="();">
<reference>mysqli_ping();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="ping"/>
<element pattern="mysqli_prepare" autocomplete_append="();">
<reference>mysqli_prepare();
Enforce execution of a query on the master in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="prepare"/>
<element pattern="mysqli_query" autocomplete_append="();">
<reference>mysqli_query();
Enables or disables internal report functions
<b> flags int </b>
Supported flags
MYSQLI_REPORT_OFF Turns reporting off
MYSQLI_REPORT_ERROR Report errors from mysqli function calls
MYSQLI_REPORT_STRICT Report warnings from mysqli function calls
MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query
MYSQLI_REPORT_ALL Set all options (report all)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="query"/>
<element pattern="mysqli_real_connect" autocomplete_append="();">
<reference>mysqli_real_connect();
Enables or disables internal report functions
<b> flags int </b>
Supported flags
MYSQLI_REPORT_OFF Turns reporting off
MYSQLI_REPORT_ERROR Report errors from mysqli function calls
MYSQLI_REPORT_STRICT Report warnings from mysqli function calls
MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query
MYSQLI_REPORT_ALL Set all options (report all)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="real_connect"/>
<element pattern="mysqli_real_escape_string" autocomplete_append="();">
<reference>mysqli_real_escape_string();
Enables or disables internal report functions
<b> flags int </b>
Supported flags
MYSQLI_REPORT_OFF Turns reporting off
MYSQLI_REPORT_ERROR Report errors from mysqli function calls
MYSQLI_REPORT_STRICT Report warnings from mysqli function calls
MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query
MYSQLI_REPORT_ALL Set all options (report all)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="escape_string"/>
<element pattern="real_escape_string"/>
<element pattern="mysqli_real_query" autocomplete_append="();">
<reference>mysqli_real_query();
Enables or disables internal report functions
<b> flags int </b>
Supported flags
MYSQLI_REPORT_OFF Turns reporting off
MYSQLI_REPORT_ERROR Report errors from mysqli function calls
MYSQLI_REPORT_STRICT Report warnings from mysqli function calls
MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query
MYSQLI_REPORT_ALL Set all options (report all)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="real_query"/>
<element pattern="mysqli_report" autocomplete_append="($flags);">
<reference>mysqli_report($flags);
Enables or disables internal report functions
<b> flags int </b>
Supported flags
MYSQLI_REPORT_OFF Turns reporting off
MYSQLI_REPORT_ERROR Report errors from mysqli function calls
MYSQLI_REPORT_STRICT Report warnings from mysqli function calls
MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query
MYSQLI_REPORT_ALL Set all options (report all)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mysqli_rollback" autocomplete_append="();">
<reference>mysqli_rollback();
Enables or disables internal report functions
<b> flags int </b>
Supported flags
MYSQLI_REPORT_OFF Turns reporting off
MYSQLI_REPORT_ERROR Report errors from mysqli function calls
MYSQLI_REPORT_STRICT Report warnings from mysqli function calls
MYSQLI_REPORT_INDEX Report if no index or bad index was used in a query
MYSQLI_REPORT_ALL Set all options (report all)
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="rollback"/>
<element pattern="mysqli_rpl_parse_enabled" autocomplete_append="(mysqli $link);">
<reference>mysqli_rpl_parse_enabled(mysqli $link);
Check if RPL parse is enabled
<b> link mysqli </b><b>returns</b>  int 
</reference></element>
<element pattern="mysqli_rpl_probe" autocomplete_append="(mysqli $link);">
<reference>mysqli_rpl_probe(mysqli $link);
RPL probe
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_rpl_query_type" autocomplete_append="($query);">
<reference>mysqli_rpl_query_type($query);
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="rpl_query_type"/>
<element pattern="mysqli_select_db" autocomplete_append="();">
<reference>mysqli_select_db();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="select_db"/>
<element pattern="mysqli_send_query" autocomplete_append="($query);">
<reference>mysqli_send_query($query);
Send the query and return
<b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="send_query"/>
<element pattern="mysqli_server_end"/>
<element pattern="mysqli_server_init"/>
<element pattern="mysqli_set_charset" autocomplete_append="();">
<reference>mysqli_set_charset();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="set_charset"/>
<element pattern="mysqli_set_local_infile_default" autocomplete_append="();">
<reference>mysqli_set_local_infile_default();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_set_local_infile_handler" autocomplete_append="();">
<reference>mysqli_set_local_infile_handler();
Alias for &lt;function&gt;mysqli_stmt_execute&lt;/function&gt;
</reference></element>
<element pattern="mysqli_slave_query" autocomplete_append="(mysqli $link, $query);">
<reference>mysqli_slave_query(mysqli $link, $query);
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_sqlstate" autocomplete_append="();">
<reference>mysqli_sqlstate();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_ssl_set" autocomplete_append="();">
<reference>mysqli_ssl_set();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="ssl_set"/>
<element pattern="mysqli_stat" autocomplete_append="();">
<reference>mysqli_stat();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="stat" autocomplete_append="($filename);">
<reference>stat($filename);
Gives information about a file
<b> filename string </b>Path to the file.
<b>returns</b>  array 
stat and fstat result format

0 dev device number
1 ino inode number *
2 mode inode protection mode
3 nlink number of links
4 uid userid of owner *
5 gid groupid of owner *
6 rdev device type, if inode device
7 size size in bytes
8 atime time of last access (Unix timestamp)
9 mtime time of last modification (Unix timestamp)
10 ctime time of last inode change (Unix timestamp)
11 blksize blocksize of filesystem IO **
12 blocks number of blocks allocated **

* On Windows this will always be 0.
** Only valid on systems supporting the st_blksize type - other
systems (e.g. Windows) return -1.
In case of error, stat returns false.
</reference></element>
<element pattern="mysqli_stmt_affected_rows" autocomplete_append="();">
<reference>mysqli_stmt_affected_rows();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_stmt_attr_get" autocomplete_append="();">
<reference>mysqli_stmt_attr_get();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="mysqli_stmt_attr_set" autocomplete_append="();">
<reference>mysqli_stmt_attr_set();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="mysqli_stmt_bind_param" autocomplete_append="($var1, $var2);">
<reference>mysqli_stmt_bind_param($var1, $var2);
<b> var1</b><b> var2</b></reference></element>
<element pattern="bind_param"/>
<element pattern="mysqli_stmt_bind_result" autocomplete_append="($var1);">
<reference>mysqli_stmt_bind_result($var1);
<b> var1</b></reference></element>
<element pattern="bind_result"/>
<element pattern="mysqli_stmt_close" autocomplete_append="();">
<reference>mysqli_stmt_close();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="close"/>
<element pattern="mysqli_stmt_data_seek" autocomplete_append="();">
<reference>mysqli_stmt_data_seek();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="data_seek"/>
<element pattern="mysqli_stmt_errno" autocomplete_append="();">
<reference>mysqli_stmt_errno();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_stmt_error" autocomplete_append="();">
<reference>mysqli_stmt_error();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_stmt_execute" autocomplete_append="();">
<reference>mysqli_stmt_execute();
Enable RPL parse
<b> link mysqli </b><b>returns</b>  bool 
</reference></element>
<element pattern="execute"/>
<element pattern="mysqli_stmt_fetch" autocomplete_append="();">
<reference>mysqli_stmt_fetch();
<b> var1</b></reference></element>
<element pattern="fetch"/>
<element pattern="mysqli_stmt_field_count" autocomplete_append="();">
<reference>mysqli_stmt_field_count();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="mysqli_stmt_free_result" autocomplete_append="();">
<reference>mysqli_stmt_free_result();
<b> var1</b></reference></element>
<element pattern="free_result"/>
<element pattern="mysqli_stmt_get_warnings" autocomplete_append="();">
<reference>mysqli_stmt_get_warnings();
<b> var1</b></reference></element>
<element pattern="mysqli_stmt_init" autocomplete_append="();">
<reference>mysqli_stmt_init();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="stmt_init"/>
<element pattern="mysqli_stmt_insert_id" autocomplete_append="();">
<reference>mysqli_stmt_insert_id();
<b> var1</b></reference></element>
<element pattern="mysqli_stmt_num_rows" autocomplete_append="();">
<reference>mysqli_stmt_num_rows();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_stmt_param_count" autocomplete_append="();">
<reference>mysqli_stmt_param_count();
<b> var1</b></reference></element>
<element pattern="mysqli_stmt_prepare" autocomplete_append="();">
<reference>mysqli_stmt_prepare();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="prepare"/>
<element pattern="mysqli_stmt_reset" autocomplete_append="();">
<reference>mysqli_stmt_reset();
<b> var1</b></reference></element>
<element pattern="reset" autocomplete_append="(array &amp;$array);">
<reference>reset(array &amp;$array);
Set the internal pointer of an array to its first element
<b> array array </b>The input array.
<b>returns</b>  mixed the value of the first array element, or false if the array is
empty.
</reference></element>
<element pattern="mysqli_stmt_result_metadata" autocomplete_append="();">
<reference>mysqli_stmt_result_metadata();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="result_metadata"/>
<element pattern="mysqli_stmt_send_long_data" autocomplete_append="();">
<reference>mysqli_stmt_send_long_data();
Returns RPL query type
<b> query string </b><b>returns</b>  int 
</reference></element>
<element pattern="send_long_data"/>
<element pattern="mysqli_stmt_sqlstate" autocomplete_append="();">
<reference>mysqli_stmt_sqlstate();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_stmt_store_result" autocomplete_append="();">
<reference>mysqli_stmt_store_result();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="store_result"/>
<element pattern="mysqli_store_result" autocomplete_append="();">
<reference>mysqli_store_result();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="store_result"/>
<element pattern="mysqli_thread_id" autocomplete_append="();">
<reference>mysqli_thread_id();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_thread_safe" autocomplete_append="();">
<reference>mysqli_thread_safe();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="mysqli_use_result" autocomplete_append="();">
<reference>mysqli_use_result();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="use_result"/>
<element pattern="mysqli_warning_count" autocomplete_append="();">
<reference>mysqli_warning_count();
Force execution of a query on a slave in a master/slave setup
<b> link mysqli </b><b> query string </b><b>returns</b>  bool 
</reference></element>
<element pattern="ncurses_addch"/>
<element pattern="ncurses_addchnstr"/>
<element pattern="ncurses_addchstr"/>
<element pattern="ncurses_addnstr"/>
<element pattern="ncurses_addstr"/>
<element pattern="ncurses_assume_default_colors"/>
<element pattern="ncurses_attroff"/>
<element pattern="ncurses_attron"/>
<element pattern="ncurses_attrset"/>
<element pattern="ncurses_baudrate"/>
<element pattern="ncurses_beep"/>
<element pattern="ncurses_bkgd"/>
<element pattern="ncurses_bkgdset"/>
<element pattern="ncurses_border"/>
<element pattern="ncurses_bottom_panel"/>
<element pattern="ncurses_can_change_color"/>
<element pattern="ncurses_cbreak"/>
<element pattern="ncurses_clear"/>
<element pattern="ncurses_clrtobot"/>
<element pattern="ncurses_clrtoeol"/>
<element pattern="ncurses_color_content"/>
<element pattern="ncurses_color_set"/>
<element pattern="ncurses_curs_set"/>
<element pattern="ncurses_def_prog_mode"/>
<element pattern="ncurses_def_shell_mode"/>
<element pattern="ncurses_define_key"/>
<element pattern="ncurses_del_panel"/>
<element pattern="ncurses_delay_output"/>
<element pattern="ncurses_delch"/>
<element pattern="ncurses_deleteln"/>
<element pattern="ncurses_delwin"/>
<element pattern="ncurses_doupdate"/>
<element pattern="ncurses_echo"/>
<element pattern="ncurses_echochar"/>
<element pattern="ncurses_end"/>
<element pattern="ncurses_erase"/>
<element pattern="ncurses_erasechar"/>
<element pattern="ncurses_filter"/>
<element pattern="ncurses_flash"/>
<element pattern="ncurses_flushinp"/>
<element pattern="ncurses_getch"/>
<element pattern="ncurses_getmaxyx"/>
<element pattern="ncurses_getmouse"/>
<element pattern="ncurses_getyx"/>
<element pattern="ncurses_halfdelay"/>
<element pattern="ncurses_has_colors"/>
<element pattern="ncurses_has_ic"/>
<element pattern="ncurses_has_il"/>
<element pattern="ncurses_has_key"/>
<element pattern="ncurses_hide_panel"/>
<element pattern="ncurses_hline"/>
<element pattern="ncurses_inch"/>
<element pattern="ncurses_init_color"/>
<element pattern="ncurses_init_pair"/>
<element pattern="ncurses_init"/>
<element pattern="ncurses_insch"/>
<element pattern="ncurses_insdelln"/>
<element pattern="ncurses_insertln"/>
<element pattern="ncurses_insstr"/>
<element pattern="ncurses_instr"/>
<element pattern="ncurses_isendwin"/>
<element pattern="ncurses_keyok"/>
<element pattern="ncurses_keypad"/>
<element pattern="ncurses_killchar"/>
<element pattern="ncurses_longname"/>
<element pattern="ncurses_meta"/>
<element pattern="ncurses_mouse_trafo"/>
<element pattern="ncurses_mouseinterval"/>
<element pattern="ncurses_mousemask"/>
<element pattern="ncurses_move_panel"/>
<element pattern="ncurses_move"/>
<element pattern="ncurses_mvaddch"/>
<element pattern="ncurses_mvaddchnstr"/>
<element pattern="ncurses_mvaddchstr"/>
<element pattern="ncurses_mvaddnstr"/>
<element pattern="ncurses_mvaddstr"/>
<element pattern="ncurses_mvcur"/>
<element pattern="ncurses_mvdelch"/>
<element pattern="ncurses_mvgetch"/>
<element pattern="ncurses_mvhline"/>
<element pattern="ncurses_mvinch"/>
<element pattern="ncurses_mvvline"/>
<element pattern="ncurses_mvwaddstr"/>
<element pattern="ncurses_napms"/>
<element pattern="ncurses_new_panel"/>
<element pattern="ncurses_newpad"/>
<element pattern="ncurses_newwin"/>
<element pattern="ncurses_nl"/>
<element pattern="ncurses_nocbreak"/>
<element pattern="ncurses_noecho"/>
<element pattern="ncurses_nonl"/>
<element pattern="ncurses_noqiflush"/>
<element pattern="ncurses_noraw"/>
<element pattern="ncurses_pair_content"/>
<element pattern="ncurses_panel_above"/>
<element pattern="ncurses_panel_below"/>
<element pattern="ncurses_panel_window"/>
<element pattern="ncurses_pnoutrefresh"/>
<element pattern="ncurses_prefresh"/>
<element pattern="ncurses_putp"/>
<element pattern="ncurses_qiflush"/>
<element pattern="ncurses_raw"/>
<element pattern="ncurses_refresh"/>
<element pattern="ncurses_replace_panel"/>
<element pattern="ncurses_reset_prog_mode"/>
<element pattern="ncurses_reset_shell_mode"/>
<element pattern="ncurses_resetty"/>
<element pattern="ncurses_savetty"/>
<element pattern="ncurses_scr_dump"/>
<element pattern="ncurses_scr_init"/>
<element pattern="ncurses_scr_restore"/>
<element pattern="ncurses_scr_set"/>
<element pattern="ncurses_scrl"/>
<element pattern="ncurses_show_panel"/>
<element pattern="ncurses_slk_attr"/>
<element pattern="ncurses_slk_attroff"/>
<element pattern="ncurses_slk_attron"/>
<element pattern="ncurses_slk_attrset"/>
<element pattern="ncurses_slk_clear"/>
<element pattern="ncurses_slk_color"/>
<element pattern="ncurses_slk_init"/>
<element pattern="ncurses_slk_noutrefresh"/>
<element pattern="ncurses_slk_refresh"/>
<element pattern="ncurses_slk_restore"/>
<element pattern="ncurses_slk_set"/>
<element pattern="ncurses_slk_touch"/>
<element pattern="ncurses_standend"/>
<element pattern="ncurses_standout"/>
<element pattern="ncurses_start_color"/>
<element pattern="ncurses_termattrs"/>
<element pattern="ncurses_termname"/>
<element pattern="ncurses_timeout"/>
<element pattern="ncurses_top_panel"/>
<element pattern="ncurses_typeahead"/>
<element pattern="ncurses_ungetch"/>
<element pattern="ncurses_ungetmouse"/>
<element pattern="ncurses_update_panels"/>
<element pattern="ncurses_use_default_colors"/>
<element pattern="ncurses_use_env"/>
<element pattern="ncurses_use_extended_names"/>
<element pattern="ncurses_vidattr"/>
<element pattern="ncurses_vline"/>
<element pattern="ncurses_waddch"/>
<element pattern="ncurses_waddstr"/>
<element pattern="ncurses_wattroff"/>
<element pattern="ncurses_wattron"/>
<element pattern="ncurses_wattrset"/>
<element pattern="ncurses_wborder"/>
<element pattern="ncurses_wclear"/>
<element pattern="ncurses_wcolor_set"/>
<element pattern="ncurses_werase"/>
<element pattern="ncurses_wgetch"/>
<element pattern="ncurses_whline"/>
<element pattern="ncurses_wmouse_trafo"/>
<element pattern="ncurses_wmove"/>
<element pattern="ncurses_wnoutrefresh"/>
<element pattern="ncurses_wrefresh"/>
<element pattern="ncurses_wstandend"/>
<element pattern="ncurses_wstandout"/>
<element pattern="ncurses_wvline"/>
<element pattern="checkdnsrr" autocomplete_append="($host, $type = null);">
<reference>checkdnsrr($host, $type = null);
Check DNS records corresponding to a given Internet host name or IP address
<b> host string </b>host may either be the IP address in
dotted-quad notation or the host name.
<b> type string[optional] </b>type may be any one of: A, MX, NS, SOA,
PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY. The default is MX.
<b>returns</b>  bool true if any records are found; returns false if no records
were found or if an error occurred.
</reference></element>
<element pattern="closelog" autocomplete_append="();">
<reference>closelog();
Close connection to system logger
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="debugger_off"/>
<element pattern="debugger_on"/>
<element pattern="define_syslog_variables" autocomplete_append="();">
<reference>define_syslog_variables();
Initializes all syslog related constants
<b>returns</b>  void 
</reference></element>
<element pattern="dns_get_record" autocomplete_append="($hostname, $type = null);">
<reference>dns_get_record($hostname, $type = null);
Fetch DNS Resource Records associated with a hostname
<b> hostname string </b>hostname should be a valid DNS hostname such
as "www.example.com". Reverse lookups can be generated using in-addr.arpa
notation, but gethostbyaddr is more suitable for
the majority of reverse lookups.
Per DNS standards, email addresses are given in user.host format (for
example: hostmaster.example.com as opposed to hostmaster@example.com),
be sure to check this value and modify if necessary before using it
with a functions such as mail.
<b> type int[optional] </b>By default, dns_get_record will search for any
resource records associated with hostname. 
To limit the query, specify the optional type
parameter. May be any one of the following:
DNS_A, DNS_CNAME,
DNS_HINFO, DNS_MX,
DNS_NS, DNS_PTR,
DNS_SOA, DNS_TXT,
DNS_AAAA, DNS_SRV,
DNS_NAPTR, DNS_A6,
DNS_ALL or DNS_ANY.
The default is DNS_ANY.
Because of eccentricities in the performance of libresolv
between platforms, DNS_ANY will not
always return every record, the slower DNS_ALL
will collect all records more reliably.
<b>returns</b>  array This function returns an array of associative arrays. Each associative array contains
at minimum the following keys:

Basic DNS attributes

host
The record in the DNS namespace to which the rest of the associated data refers.
class
dns_get_record only returns Internet class records and as
such this parameter will always return IN.
type
String containing the record type. Additional attributes will also be contained
in the resulting array dependant on the value of type. See table below.
ttl
Time To Live remaining for this record. This will not equal
the record's original ttl, but will rather equal the original ttl minus whatever
length of time has passed since the authoritative name server was queried.

Other keys in associative arrays dependant on 'type'

A
ip: An IPv4 addresses in dotted decimal notation.
MX
pri: Priority of mail exchanger.
Lower numbers indicate greater priority.
target: FQDN of the mail exchanger.
See also dns_get_mx.
CNAME
target: FQDN of location in DNS namespace to which
the record is aliased.
NS
target: FQDN of the name server which is authoritative
for this hostname.
PTR
target: Location within the DNS namespace to which
this record points.
TXT
txt: Arbitrary string data associated with this record.
HINFO
cpu: IANA number designating the CPU of the machine
referenced by this record.
os: IANA number designating the Operating System on
the machine referenced by this record.
See IANA's Operating System
Names for the meaning of these values.
SOA
mname: FQDN of the machine from which the resource
records originated.
rname: Email address of the administrative contain
for this domain.
serial: Serial # of this revision of the requested
domain.
refresh: Refresh interval (seconds) secondary name
servers should use when updating remote copies of this domain.
retry: Length of time (seconds) to wait after a
failed refresh before making a second attempt.
expire: Maximum length of time (seconds) a secondary
DNS server should retain remote copies of the zone data without a
successful refresh before discarding.
minimum-ttl: Minimum length of time (seconds) a
client can continue to use a DNS resolution before it should request
a new resolution from the server. Can be overridden by individual
resource records.
AAAA
ipv6: IPv6 address
A6(PHP &amp;gt;= 5.1.0)
masklen: Length (in bits) to inherit from the target
specified by chain.
ipv6: Address for this specific record to merge with
chain.
chain: Parent record to merge with
ipv6 data.
SRV
pri: (Priority) lowest priorities should be used first.
weight: Ranking to weight which of commonly prioritized
targets should be chosen at random.
target and port: hostname and port
where the requested service can be found.
For additional information see: RFC 2782
NAPTR
order and pref: Equivalent to
pri and weight above.
flags, services, regex,
and replacement: Parameters as defined by
RFC 2915.
</reference></element>
<element pattern="fsockopen" autocomplete_append="($hostname, $port = null, &amp;$errno = null, &amp;$errstr = null, $timeout = null);">
<reference>fsockopen($hostname, $port = null, &amp;$errno = null, &amp;$errstr = null, $timeout = null);
Open Internet or Unix domain socket connection
<b> hostname string </b>If you have compiled in OpenSSL support, you may prefix the
hostname with either ssl://
or tls:// to use an SSL or TLS client connection
over TCP/IP to connect to the remote host.
<b> port int[optional] </b>The port number.
<b> errno int[optional] </b>If provided, holds the system level error number that occurred in the
system-level connect() call.
If the value returned in errno is
0 and the function returned false, it is an
indication that the error occurred before the 
connect() call. This is most likely due to a
problem initializing the socket.
<b> errstr string[optional] </b>The error message as a string.
<b> timeout float[optional] </b>The connection timeout, in seconds.
If you need to set a timeout for reading/writing data over the
socket, use stream_set_timeout, as the 
timeout parameter to
fsockopen only applies while connecting the
socket.
<b>returns</b>  resource fsockopen returns a file pointer which may be used
together with the other file functions (such as
fgets, fgetss,
fwrite, fclose, and
feof). If the call fails, it will return false
</reference></element>
<element pattern="gethostbyaddr" autocomplete_append="($ip_address);">
<reference>gethostbyaddr($ip_address);
Get the Internet host name corresponding to a given IP address
<b> ip_address string </b>The host IP address.
<b>returns</b>  string the host name or the unmodified ip_address
on failure.
</reference></element>
<element pattern="gethostbyname" autocomplete_append="($hostname);">
<reference>gethostbyname($hostname);
Get the IP address corresponding to a given Internet host name
<b> hostname string </b>The host name.
<b>returns</b>  string the IP address or a string containing the unmodified
hostname on failure.
</reference></element>
<element pattern="gethostbynamel" autocomplete_append="($hostname);">
<reference>gethostbynamel($hostname);
Get a list of IP addresses corresponding to a given Internet host
name
<b> hostname string </b>The host name.
<b>returns</b>  array an array of IP addresses or false if
hostname could not be resolved.
</reference></element>
<element pattern="getmxrr" autocomplete_append="($hostname, array &amp;$mxhosts, array &amp;$weight = null);">
<reference>getmxrr($hostname, array &amp;$mxhosts, array &amp;$weight = null);
Get MX records corresponding to a given Internet host name
<b> hostname string </b>The Internet host name.
<b> mxhosts array </b>A list of the MX records found is placed into the array
mxhosts. 
<b> weight array[optional] </b>If the weight array is given, it will be filled
with the weight information gathered.
<b>returns</b>  bool true if any records are found; returns false if no records
were found or if an error occurred.
</reference></element>
<element pattern="getprotobyname" autocomplete_append="($name);">
<reference>getprotobyname($name);
Get protocol number associated with protocol name
<b> name string </b>The protocol name.
<b>returns</b>  int the protocol number or -1 if the protocol is not found.
</reference></element>
<element pattern="getprotobynumber" autocomplete_append="($number);">
<reference>getprotobynumber($number);
Get protocol name associated with protocol number
<b> number int </b>The protocol number.
<b>returns</b>  string the protocol name as a string.
</reference></element>
<element pattern="getservbyname" autocomplete_append="($service, $protocol);">
<reference>getservbyname($service, $protocol);
Get port number associated with an Internet service and protocol
<b> service string </b>The Internet service name, as a string.
<b> protocol string </b>protocol is either "tcp"
or "udp" (in lowercase).
<b>returns</b>  int the port number, or false if service or
protocol is not found.
</reference></element>
<element pattern="getservbyport" autocomplete_append="($port, $protocol);">
<reference>getservbyport($port, $protocol);
Get Internet service which corresponds to port and protocol
<b> port int </b>The port number.
<b> protocol string </b>protocol is either "tcp"
or "udp" (in lowercase).
<b>returns</b>  string the Internet service name as a string.
</reference></element>
<element pattern="header" autocomplete_append="($string, $replace = null, $http_response_code = null);">
<reference>header($string, $replace = null, $http_response_code = null);
Send a raw HTTP header
<b> string string </b>The header string.
There are two special-case header calls. The first is a header
that starts with the string "HTTP/" (case is not
significant), which will be used to figure out the HTTP status
code to send. For example, if you have configured Apache to
use a PHP script to handle requests for missing files (using
the ErrorDocument directive), you may want to
make sure that your script generates the proper status code.
]]&gt;
The second special case is the "Location:" header. Not only does
it send this header back to the browser, but it also returns a
REDIRECT (302) status code to the browser unless
some 3xx status code has already been set.
]]&gt;
<b> replace bool[optional] </b>The optional replace parameter indicates
whether the header should replace a previous similar header, or
add a second header of the same type. By default it will replace,
but if you pass in false as the second argument you can force
multiple headers of the same type. For example:
]]&gt;
<b> http_response_code int[optional] </b>Forces the HTTP response code to the specified value.
<b>returns</b>  void 
</reference></element>
<element pattern="headers_list" autocomplete_append="();">
<reference>headers_list();
Returns a list of response headers sent (or ready to send)
<b>returns</b>  array a numerically indexed array of headers.
</reference></element>
<element pattern="headers_sent" autocomplete_append="(&amp;$file = null, &amp;$line = null);">
<reference>headers_sent(&amp;$file = null, &amp;$line = null);
Checks if or where headers have been sent
<b> file string[optional] </b>If the optional file and
line parameters are set, 
headers_sent will put the PHP source file name
and line number where output started in the file
and line variables.
<b> line int[optional] </b>The line number where the output started.
<b>returns</b>  bool headers_sent will return false if no HTTP headers
have already been sent or true otherwise.
</reference></element>
<element pattern="inet_ntop" autocomplete_append="($in_addr);">
<reference>inet_ntop($in_addr);
Converts a packed internet address to a human readable representation
<b> in_addr string </b>A 32bit IPv4, or 128bit IPv6 address.
<b>returns</b>  string a string representation of the address or false on failure.
</reference></element>
<element pattern="inet_pton" autocomplete_append="($address);">
<reference>inet_pton($address);
Converts a human readable IP address to its packed in_addr representation
<b> address string </b>A human readable IPv4 or IPv6 address.
<b>returns</b>  string the in_addr representation of the given
address
</reference></element>
<element pattern="ip2long" autocomplete_append="($ip_address);">
<reference>ip2long($ip_address);
Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address
<b> ip_address string </b>A standard format address.
<b>returns</b>  int the IPv4 address or false if ip_address
is invalid.
</reference></element>
<element pattern="long2ip" autocomplete_append="($proper_address);">
<reference>long2ip($proper_address);
Converts an (IPv4) Internet network address into a string in Internet standard dotted format
<b> proper_address int </b>A proper address representation.
<b>returns</b>  string the Internet IP address as a string.
</reference></element>
<element pattern="openlog" autocomplete_append="($ident, $option, $facility);">
<reference>openlog($ident, $option, $facility);
Open connection to system logger
<b> ident string </b>The string ident is added to each message. 
<b> option int </b>The option argument is used to indicate
what logging options will be used when generating a log message.

openlog Options

LOG_CONS
if there is an error while sending data to the system logger,
write directly to the system console
LOG_NDELAY
open the connection to the logger immediately
LOG_ODELAY
(default) delay opening the connection until the first
message is logged
LOG_PERROR
print log message also to standard error
LOG_PID
include PID with each message

You can use one or more of this options. When using multiple options
you need to OR them, i.e. to open the connection
immediately, write to the console and include the PID in each message,
you will use: LOG_CONS | LOG_NDELAY | LOG_PID
<b> facility int </b>The facility argument is used to specify what
type of program is logging the message. This allows you to specify
(in your machine's syslog configuration) how messages coming from
different facilities will be handled.

openlog Facilities

LOG_AUTH
security/authorization messages (use 
LOG_AUTHPRIV instead
in systems where that constant is defined)
LOG_AUTHPRIV
security/authorization messages (private)
LOG_CRON
clock daemon (cron and at)
LOG_DAEMON
other system daemons
LOG_KERN
kernel messages
LOG_LOCAL0 ... LOG_LOCAL7
reserved for local use, these are not available in Windows
LOG_LPR
line printer subsystem
LOG_MAIL
mail subsystem
LOG_NEWS
USENET news subsystem
LOG_SYSLOG
messages generated internally by syslogd
LOG_USER
generic user-level messages
LOG_UUCP
UUCP subsystem

LOG_USER is the only valid log type under Windows
operating systems
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pfsockopen" autocomplete_append="($hostname, $port = null, &amp;$errno = null, &amp;$errstr = null, $timeout = null);">
<reference>pfsockopen($hostname, $port = null, &amp;$errno = null, &amp;$errstr = null, $timeout = null);
Open persistent Internet or Unix domain socket connection
<b> hostname string </b><b> port int[optional] </b><b> errno int[optional] </b><b> errstr string[optional] </b><b> timeout float[optional] </b><b>returns</b>  resource 
</reference></element>
<element pattern="setcookie" autocomplete_append="($name, $value = null, $expire = null, $path = null, $domain = null, $secure = null, $httponly = null);">
<reference>setcookie($name, $value = null, $expire = null, $path = null, $domain = null, $secure = null, $httponly = null);
Send a cookie
<b> name string </b>The name of the cookie.
<b> value string[optional] </b>The value of the cookie. This value is stored on the clients
computer; do not store sensitive information.
Assuming the name is 'cookiename', this
value is retrieved through $_COOKIE['cookiename']
<b> expire int[optional] </b>The time the cookie expires. This is a Unix timestamp so is
in number of seconds since the epoch. In other words, you'll
most likely set this with the time function
plus the number of seconds before you want it to expire. Or
you might use mktime.
time()+60*60*24*30 will set the cookie to
expire in 30 days. If set to 0, or omitted, the cookie will expire at
the end of the session (when the browser closes).
You may notice the expire parameter takes on a
Unix timestamp, as opposed to the date format Wdy, DD-Mon-YYYY
HH:MM:SS GMT, this is because PHP does this conversion
internally.
expire is compared to the client's time which can
differ from server's time.
<b> path string[optional] </b>The path on the server in which the cookie will be available on.
If set to '/', the cookie will be available
within the entire domain. If set to
'/foo/', the cookie will only be available
within the /foo/ directory and all
sub-directories such as /foo/bar/ of
domain. The default value is the
current directory that the cookie is being set in.
<b> domain string[optional] </b>The domain that the cookie is available.
To make the cookie available on all subdomains of example.com
then you'd set it to '.example.com'. The
. is not required but makes it compatible
with more browsers. Setting it to www.example.com
will make the cookie only available in the www
subdomain. Refer to tail matching in the
spec for details.
<b> secure bool[optional] </b>Indicates that the cookie should only be transmitted over a
secure HTTPS connection from the client. When set to true, the
cookie will only be set if a secure connection exists. The default
is false. On the server-side, it's on the programmer to send this
kind of cookie only on secure connection (e.g. with respect to
$_SERVER["HTTPS"]).
<b> httponly bool[optional] </b>When true the cookie will be made accessible only through the HTTP
protocol. This means that the cookie won't be accessible by
scripting languages, such as JavaScript. This setting can effectly
help to reduce identity theft through XSS attacks (although it is
not supported by all browsers). Added in PHP 5.2.0.
true or false
<b>returns</b>  bool If output exists prior to calling this function,
setcookie will fail and return false. If
setcookie successfully runs, it will return true.
This does not indicate whether the user accepted the cookie.
</reference></element>
<element pattern="setrawcookie" autocomplete_append="($name, $value = null, $expire = null, $path = null, $domain = null, $secure = null, $httponly = null);">
<reference>setrawcookie($name, $value = null, $expire = null, $path = null, $domain = null, $secure = null, $httponly = null);
Send a cookie without urlencoding the cookie value
<b> name string </b><b> value string[optional] </b><b> expire int[optional] </b><b> path string[optional] </b><b> domain string[optional] </b><b> secure bool[optional] </b><b> httponly bool[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="syslog" autocomplete_append="($priority, $message);">
<reference>syslog($priority, $message);
Generate a system log message
<b> priority int </b>priority is a combination of the facility and
the level. Possible values are:

syslog Priorities (in descending order)

LOG_EMERG
system is unusable
LOG_ALERT
action must be taken immediately
LOG_CRIT
critical conditions
LOG_ERR
error conditions
LOG_WARNING
warning conditions
LOG_NOTICE
normal, but significant, condition
LOG_INFO
informational message
LOG_DEBUG
debug-level message

<b> message string </b>The message to send, except that the two characters
%m will be replaced by the error message string
(strerror) corresponding to the present value of
errno.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="newt_bell"/>
<element pattern="newt_button_bar"/>
<element pattern="newt_button"/>
<element pattern="newt_centered_window"/>
<element pattern="newt_checkbox_get_value"/>
<element pattern="newt_checkbox_set_flags"/>
<element pattern="newt_checkbox_set_value"/>
<element pattern="newt_checkbox_tree_add_item"/>
<element pattern="newt_checkbox_tree_find_item"/>
<element pattern="newt_checkbox_tree_get_current"/>
<element pattern="newt_checkbox_tree_get_entry_value"/>
<element pattern="newt_checkbox_tree_get_multi_selection"/>
<element pattern="newt_checkbox_tree_get_selection"/>
<element pattern="newt_checkbox_tree_multi"/>
<element pattern="newt_checkbox_tree_set_current"/>
<element pattern="newt_checkbox_tree_set_entry_value"/>
<element pattern="newt_checkbox_tree_set_entry"/>
<element pattern="newt_checkbox_tree_set_width"/>
<element pattern="newt_checkbox_tree"/>
<element pattern="newt_checkbox"/>
<element pattern="newt_clear_key_buffer"/>
<element pattern="newt_cls"/>
<element pattern="newt_compact_button"/>
<element pattern="newt_component_add_callback"/>
<element pattern="newt_component_takes_focus"/>
<element pattern="newt_create_grid"/>
<element pattern="newt_cursor_off"/>
<element pattern="newt_cursor_on"/>
<element pattern="newt_delay"/>
<element pattern="newt_draw_form"/>
<element pattern="newt_draw_root_text"/>
<element pattern="newt_entry_get_value"/>
<element pattern="newt_entry_set_filter"/>
<element pattern="newt_entry_set_flags"/>
<element pattern="newt_entry_set"/>
<element pattern="newt_entry"/>
<element pattern="newt_finished"/>
<element pattern="newt_form_add_component"/>
<element pattern="newt_form_add_components"/>
<element pattern="newt_form_add_hot_key"/>
<element pattern="newt_form_destroy"/>
<element pattern="newt_form_get_current"/>
<element pattern="newt_form_run"/>
<element pattern="newt_form_set_background"/>
<element pattern="newt_form_set_height"/>
<element pattern="newt_form_set_size"/>
<element pattern="newt_form_set_timer"/>
<element pattern="newt_form_set_width"/>
<element pattern="newt_form_watch_fd"/>
<element pattern="newt_form"/>
<element pattern="newt_get_screen_size"/>
<element pattern="newt_grid_add_components_to_form"/>
<element pattern="newt_grid_basic_window"/>
<element pattern="newt_grid_free"/>
<element pattern="newt_grid_get_size"/>
<element pattern="newt_grid_h_close_stacked"/>
<element pattern="newt_grid_h_stacked"/>
<element pattern="newt_grid_place"/>
<element pattern="newt_grid_set_field"/>
<element pattern="newt_grid_simple_window"/>
<element pattern="newt_grid_v_close_stacked"/>
<element pattern="newt_grid_v_stacked"/>
<element pattern="newt_grid_wrapped_window_at"/>
<element pattern="newt_grid_wrapped_window"/>
<element pattern="newt_init"/>
<element pattern="newt_label_set_text"/>
<element pattern="newt_label"/>
<element pattern="newt_listbox_append_entry"/>
<element pattern="newt_listbox_clear_selection"/>
<element pattern="newt_listbox_clear"/>
<element pattern="newt_listbox_delete_entry"/>
<element pattern="newt_listbox_get_current"/>
<element pattern="newt_listbox_get_selection"/>
<element pattern="newt_listbox_insert_entry"/>
<element pattern="newt_listbox_item_count"/>
<element pattern="newt_listbox_select_item"/>
<element pattern="newt_listbox_set_current_by_key"/>
<element pattern="newt_listbox_set_current"/>
<element pattern="newt_listbox_set_data"/>
<element pattern="newt_listbox_set_entry"/>
<element pattern="newt_listbox_set_width"/>
<element pattern="newt_listbox"/>
<element pattern="newt_listitem_get_data"/>
<element pattern="newt_listitem_set"/>
<element pattern="newt_listitem"/>
<element pattern="newt_open_window"/>
<element pattern="newt_pop_help_line"/>
<element pattern="newt_pop_window"/>
<element pattern="newt_push_help_line"/>
<element pattern="newt_radio_get_current"/>
<element pattern="newt_radiobutton"/>
<element pattern="newt_redraw_help_line"/>
<element pattern="newt_reflow_text"/>
<element pattern="newt_refresh"/>
<element pattern="newt_resize_screen"/>
<element pattern="newt_resume"/>
<element pattern="newt_run_form"/>
<element pattern="newt_scale_set"/>
<element pattern="newt_scale"/>
<element pattern="newt_scrollbar_set"/>
<element pattern="newt_set_help_callback"/>
<element pattern="newt_set_suspend_callback"/>
<element pattern="newt_suspend"/>
<element pattern="newt_textbox_get_num_lines"/>
<element pattern="newt_textbox_reflowed"/>
<element pattern="newt_textbox_set_height"/>
<element pattern="newt_textbox_set_text"/>
<element pattern="newt_textbox"/>
<element pattern="newt_vertical_scrollbar"/>
<element pattern="newt_wait_for_key"/>
<element pattern="newt_win_choice"/>
<element pattern="newt_win_entries"/>
<element pattern="newt_win_menu"/>
<element pattern="newt_win_message"/>
<element pattern="newt_win_messagev"/>
<element pattern="newt_win_ternary"/>
<element pattern="nsapi_request_headers"/>
<element pattern="nsapi_response_headers"/>
<element pattern="nsapi_virtual"/>
<element pattern="aggregate_info"/>
<element pattern="_secret_super_dicing"/>
<element pattern="aggregate_methods_by_list"/>
<element pattern="aggregate_methods_by_regexp"/>
<element pattern="aggregate_methods"/>
<element pattern="aggregate_properties_by_list"/>
<element pattern="aggregate_properties_by_regexp"/>
<element pattern="aggregate_properties"/>
<element pattern="aggregate"/>
<element pattern="deaggregate"/>
<element pattern="oci_bind_array_by_name" autocomplete_append="($statement, $name, array &amp;$var_array, $max_table_length, $max_item_length = null, $type = null);">
<reference>oci_bind_array_by_name($statement, $name, array &amp;$var_array, $max_table_length, $max_item_length = null, $type = null);
Binds PHP array to Oracle PL/SQL array by name
<b> statement resource </b>A valid OCI statement identifier.
<b> name string </b>The Oracle placeholder.
<b> var_array array </b>An array.
<b> max_table_length int </b>Sets the maximum length both for incoming and result arrays.
<b> max_item_length int[optional] </b>Sets maximum length for array items. If not specified or equals to -1,
oci_bind_array_by_name will use find the longest
element in the incoming array and will use it as maximum length for
array items.
<b> type int[optional] </b>Should be used to set the type of PL/SQL array items. See list of
available types below:
SQLT_NUM - for arrays of NUMBER.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_bind_by_name" autocomplete_append="($statement, $ph_name, &amp;$variable, $maxlength = null, $type = null);">
<reference>oci_bind_by_name($statement, $ph_name, &amp;$variable, $maxlength = null, $type = null);
Binds the PHP variable to the Oracle placeholder
<b> statement resource </b>An OCI statement.
<b> ph_name string </b>The placeholder.
<b> variable mixed </b>The PHP variable.
<b> maxlength int[optional] </b>Sets the maximum length for the bind. If you set it to -1, this
function will use the current length of variable
to set the maximum length.
<b> type int[optional] </b>If you need to bind an abstract datatype (LOB/ROWID/BFILE) you
need to allocate it first using the
oci_new_descriptor function. The
length is not used for abstract datatypes
and should be set to -1. The type parameter
tells Oracle which descriptor is used. Default to SQLT_CHR.
Possible values are:
SQLT_FILE - for BFILEs;
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_cancel" autocomplete_append="($statement);">
<reference>oci_cancel($statement);
Cancels reading from cursor
<b> statement resource </b>An OCI statement.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_close" autocomplete_append="($connection);">
<reference>oci_close($connection);
Closes Oracle connection
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="append"/>
<element pattern="assign"/>
<element pattern="assignElem"/>
<element pattern="free"/>
<element pattern="getElem"/>
<element pattern="max" autocomplete_append="(array $values);">
<reference>max(array $values);
Find highest value
<b> values array </b>An array containing the values.
<b>returns</b>  mixed max returns the numerically highest of the
parameter values.
</reference></element>
<element pattern="size"/>
<element pattern="trim" autocomplete_append="($str, $charlist = null);">
<reference>trim($str, $charlist = null);
Strip whitespace (or other characters) from the beginning and end of a string
<b> str string </b>The string that will be trimmed.
<b> charlist string[optional] </b>Optionally, the stripped characters can also be specified using
the charlist parameter.
Simply list all characters that you want to be stripped. With
.. you can specify a range of characters.
<b>returns</b>  string The trimmed string.
</reference></element>
<element pattern="oci_commit" autocomplete_append="($connection);">
<reference>oci_commit($connection);
Commits outstanding statements
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_connect" autocomplete_append="($username, $password, $db = null, $charset = null, $session_mode = null);">
<reference>oci_connect($username, $password, $db = null, $charset = null, $session_mode = null);
Establishes a connection to the Oracle server
<b> username string </b>The Oracle user name.
<b> password string </b>The password for username.
<b> db string[optional] </b>This optional parameter can either contain the name of the local
Oracle instance or the name of the entry in
tnsnames.ora.
If the not specified, PHP uses environment variables
ORACLE_SID and TWO_TASK to
determine the name of local Oracle instance and location of 
tnsnames.ora accordingly.
<b> charset string[optional] &amp;oci.charset;</b><b> session_mode int[optional] </b>This parameter is available since version 1.1 and accepts the
following values: OCI_DEFAULT,
OCI_SYSOPER and OCI_SYSDBA.
If either OCI_SYSOPER or
OCI_SYSDBA were specified, this function will try
to establish privileged connection using external credentials. 
Privileged connections are disabled by default. To enable them you
need to set oci8.privileged_connect
to On.
<b>returns</b>  resource a connection identifier or false on error.
</reference></element>
<element pattern="oci_define_by_name" autocomplete_append="($statement, $column_name, &amp;$variable, $type = null);">
<reference>oci_define_by_name($statement, $column_name, &amp;$variable, $type = null);
Uses a PHP variable for the define-step during a SELECT
<b> statement resource </b>A valid OCI statement identifier.
<b> column_name string </b>The column name. Must be uppercased.
Take into consideration that Oracle uses ALL-UPPERCASE column names, 
whereby in your select you can also use lowercase.
If you define a variable that doesn't exists in your select statement,
no error will be issued.
<b> variable mixed </b>The PHP variable.
<b> type int[optional] </b>If you need to define an abstract datatype (LOB/ROWID/BFILE) you must
allocate it first using oci_new_descriptor. See 
also the oci_bind_by_name function.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_error" autocomplete_append="($source = null);">
<reference>oci_error($source = null);
Returns the last error found
<b> source resource[optional] </b>For most errors, the parameter is the most appropriate resource
handle. For connection errors with oci_connect,
oci_new_connect or 
oci_pconnect do not pass a parameter.
<b>returns</b>  array If no error is found, oci_error
returns false. oci_error returns the error as an
associative array. In this array, code
consists the oracle error code and message
the oracle error string.
</reference></element>
<element pattern="oci_execute" autocomplete_append="($statement, $mode = null);">
<reference>oci_execute($statement, $mode = null);
Executes a statement
<b> statement resource </b>A valid OCI statement identifier.
<b> mode int[optional] </b>Allows you to specify the execution mode (default is 
OCI_COMMIT_ON_SUCCESS).
If you don't want statements to be committed automatically, you should
specify OCI_DEFAULT as your
mode.
When using OCI_DEFAULT mode, you're creating a
transaction. Transactions are automatically rolled back when you close
the connection, or when the script ends, whichever is soonest. You
need to explicitly call oci_commit to commit
the transaction, or oci_rollback to abort it.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_fetch_all" autocomplete_append="($statement, array &amp;$output, $skip = null, $maxrows = null, $flags = null);">
<reference>oci_fetch_all($statement, array &amp;$output, $skip = null, $maxrows = null, $flags = null);
Fetches all rows of result data into an array
<b> statement resource </b>A valid OCI statement identifier.
<b> output array &amp;database.fetch-null;</b><b> skip int[optional] </b>The number of initial rows to ignore when fetching the result (default
value of 0, to start at the first line).
<b> maxrows int[optional] </b>The number of rows to read, starting at the skipth
row (default to -1, meaning all the rows).
<b> flags int[optional] </b>Parameter flags can be any combination of
the following:
OCI_FETCHSTATEMENT_BY_ROW
OCI_FETCHSTATEMENT_BY_COLUMN (default value)
OCI_NUM
OCI_ASSOC
<b>returns</b>  int the number of rows fetched or false in case of an error.
</reference></element>
<element pattern="oci_fetch_array" autocomplete_append="($statement, $mode = null);">
<reference>oci_fetch_array($statement, $mode = null);
Returns the next row from the result data as an associative or
numeric array, or both
<b> statement resource </b>An optional second parameter can be any combination of the following
constants:
OCI_BOTH - return an array with both associative
and numeric indices (the same as OCI_ASSOC
+ OCI_NUM). This is the default behavior.
OCI_ASSOC - return an associative array
(as oci_fetch_assoc works).
OCI_NUM - return a numeric array,
(as oci_fetch_row works).
OCI_RETURN_NULLS - create empty elements
for the &amp;null; fields.
OCI_RETURN_LOBS - return the value of a LOB
of the descriptor.
Default mode is OCI_BOTH.
<b> mode int[optional] </b><b>returns</b>  array an array with both associative and numeric indices, or false if
there are no more rows in the statement.
</reference></element>
<element pattern="oci_fetch_assoc" autocomplete_append="($statement);">
<reference>oci_fetch_assoc($statement);
Returns the next row from the result data as an associative array
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  array an associative array, or false if there are no more rows in the
statement.
</reference></element>
<element pattern="oci_fetch_object" autocomplete_append="($statement);">
<reference>oci_fetch_object($statement);
Returns the next row from the result data as an object
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  object an object, which attributes correspond to fields in statement, or
false if there are no more rows in the statement.
</reference></element>
<element pattern="oci_fetch_row" autocomplete_append="($statement);">
<reference>oci_fetch_row($statement);
Returns the next row from the result data as a numeric array
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  array an indexed array with the field information, or false if there
are no more rows in the statement.
</reference></element>
<element pattern="oci_fetch" autocomplete_append="($statement);">
<reference>oci_fetch($statement);
Fetches the next row into result-buffer
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_field_is_null" autocomplete_append="($statement, $field);">
<reference>oci_field_is_null($statement, $field);
Checks if the field is &amp;null;
<b> statement resource </b>A valid OCI statement identifier.
<b> field mixed </b>Can be a field's index or a field's name (uppercased).
<b>returns</b>  bool true if field is &amp;null;, false otherwise.
</reference></element>
<element pattern="oci_field_name" autocomplete_append="($statement, $field);">
<reference>oci_field_name($statement, $field);
Returns the name of a field from the statement
<b> statement resource </b>A valid OCI statement identifier.
<b> field int </b>Can be the field's index (1-based) or name.
<b>returns</b>  string the name as a string, or false on errors.
</reference></element>
<element pattern="oci_field_precision" autocomplete_append="($statement, $field);">
<reference>oci_field_precision($statement, $field);
Tell the precision of a field
<b> statement resource </b>A valid OCI statement identifier.
<b> field int </b>Can be the field's index (1-based) or name.
<b>returns</b>  int the precision as an integer, or false on errors.
</reference></element>
<element pattern="oci_field_scale" autocomplete_append="($statement, $field);">
<reference>oci_field_scale($statement, $field);
Tell the scale of the field
<b> statement resource </b>A valid OCI statement identifier.
<b> field int </b>Can be the field's index (1-based) or name.
<b>returns</b>  int the scale as an integer, or false on errors.
</reference></element>
<element pattern="oci_field_size" autocomplete_append="($statement, $field);">
<reference>oci_field_size($statement, $field);
Returns field's size
<b> statement resource </b>A valid OCI statement identifier.
<b> field mixed </b>Can be the field's index (1-based) or name.
<b>returns</b>  int the size of a field in bytes, or false on
errors.
</reference></element>
<element pattern="oci_field_type_raw" autocomplete_append="($statement, $field);">
<reference>oci_field_type_raw($statement, $field);
Tell the raw Oracle data type of the field
<b> statement resource </b>A valid OCI statement identifier.
<b> field int </b>Can be the field's index (1-based) or name.
<b>returns</b>  int Oracle's raw data type as a string, or false on errors.
</reference></element>
<element pattern="oci_field_type" autocomplete_append="($statement, $field);">
<reference>oci_field_type($statement, $field);
Returns field's data type
<b> statement resource </b>A valid OCI statement identifier.
<b> field int </b>Can be the field's index (1-based) or name.
<b>returns</b>  mixed the field data type as a string, or false on errors.
</reference></element>
<element pattern="oci_free_statement" autocomplete_append="($statement);">
<reference>oci_free_statement($statement);
Frees all resources associated with statement or cursor
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_internal_debug" autocomplete_append="($onoff);">
<reference>oci_internal_debug($onoff);
Enables or disables internal debug output
<b> onoff bool </b>Set this to false to turn debug output off or true to turn it on.
<b>returns</b>  void 
</reference></element>
<element pattern="append"/>
<element pattern="close"/>
<element pattern="oci_lob_copy" autocomplete_append="(OCI-Lob $lob_to, OCI-Lob $lob_from, $length = null);">
<reference>oci_lob_copy(OCI-Lob $lob_to, OCI-Lob $lob_from, $length = null);
Copies large object
<b> lob_to OCI-Lob </b>The destination LOB.
<b> lob_from OCI-Lob </b>The copied LOB.
<b> length int[optional] </b>Indicates the length of data to be copied.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="eof"/>
<element pattern="erase"/>
<element pattern="export"/>
<element pattern="flush" autocomplete_append="();">
<reference>flush();
Flush the output buffer
<b>returns</b>  void 
</reference></element>
<element pattern="free"/>
<element pattern="getBuffering"/>
<element pattern="import"/>
<element pattern="oci_lob_is_equal" autocomplete_append="(OCI-Lob $lob1, OCI-Lob $lob2);">
<reference>oci_lob_is_equal(OCI-Lob $lob1, OCI-Lob $lob2);
Compares two LOB/FILE locators for equality
<b> lob1 OCI-Lob </b>A LOB identifier.
<b> lob2 OCI-Lob </b>A LOB identifier.
<b>returns</b>  bool true if these objects are equal, false otherwise.
</reference></element>
<element pattern="load"/>
<element pattern="read"/>
<element pattern="rewind" autocomplete_append="($handle);">
<reference>rewind($handle);
Rewind the position of a file pointer
<b> handle resource </b>The file pointer must be valid, and must point to a file
successfully opened by fopen.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="save"/>
<element pattern="seek"/>
<element pattern="setBuffering"/>
<element pattern="size"/>
<element pattern="tell"/>
<element pattern="truncate"/>
<element pattern="write"/>
<element pattern="writeTemporary"/>
<element pattern="oci_new_collection" autocomplete_append="($connection, $tdo, $schema = null);">
<reference>oci_new_collection($connection, $tdo, $schema = null);
Allocates new collection object
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b> tdo string </b>Should be a valid named type (uppercase).
<b> schema string[optional] </b>Should point to the scheme, where the named type was created. The name
of the current user is the default value.
<b>returns</b>  OCI-Collection a new OCICollection object or false on
error.
</reference></element>
<element pattern="oci_new_connect" autocomplete_append="($username, $password, $db = null, $charset = null, $session_mode = null);">
<reference>oci_new_connect($username, $password, $db = null, $charset = null, $session_mode = null);
Establishes a new connection to the Oracle server
<b> username string </b>The Oracle user name.
<b> password string </b>The password for username.
<b> db string[optional] </b>This optional parameter can either contain the name of the local
Oracle instance or the name of the entry in
tnsnames.ora.
If the not specified, PHP uses environment variables
ORACLE_SID and TWO_TASK to
determine the name of local Oracle instance and location of 
tnsnames.ora accordingly.
<b> charset string[optional] &amp;oci.charset;</b><b> session_mode int[optional] </b>This parameter is available since version 1.1 and accepts the
following values: OCI_DEFAULT,
OCI_SYSOPER and OCI_SYSDBA.
If either OCI_SYSOPER or
OCI_SYSDBA were specified, this function will try
to establish privileged connection using external credentials. 
Privileged connections are disabled by default. To enable them you
need to set oci8.privileged_connect
to On.
<b>returns</b>  resource a connection identifier or false on error.
</reference></element>
<element pattern="oci_new_cursor" autocomplete_append="($connection);">
<reference>oci_new_cursor($connection);
Allocates and returns a new cursor (statement handle)
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b>returns</b>  resource a new statement handle, or false on error.
</reference></element>
<element pattern="oci_new_descriptor" autocomplete_append="($connection, $type = null);">
<reference>oci_new_descriptor($connection, $type = null);
Initializes a new empty LOB or FILE descriptor
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b> type int[optional] </b>Valid values for type are: 
OCI_D_FILE, OCI_D_LOB and
OCI_D_ROWID.
<b>returns</b>  OCI-Lob a new LOB or FILE descriptor on success, false on error.
</reference></element>
<element pattern="oci_num_fields" autocomplete_append="($statement);">
<reference>oci_num_fields($statement);
Returns the number of result columns in a statement
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  int the number of columns as an integer, or false on errors.
</reference></element>
<element pattern="oci_num_rows" autocomplete_append="($statement);">
<reference>oci_num_rows($statement);
Returns number of rows affected during statement execution
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  int the number of rows affected as an integer, or false on errors.
</reference></element>
<element pattern="oci_parse" autocomplete_append="($connection, $query);">
<reference>oci_parse($connection, $query);
Prepares Oracle statement for execution
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b> query string </b>The SQL query.
<b>returns</b>  resource a statement handler on success, or false on error.
</reference></element>
<element pattern="oci_password_change" autocomplete_append="($connection, $username, $old_password, $new_password);">
<reference>oci_password_change($connection, $username, $old_password, $new_password);
Changes password of Oracle's user
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b> username string </b>The Oracle user name.
<b> old_password string </b>The old password.
<b> new_password string </b>The new password to be set.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_password_change" autocomplete_append="($connection, $username, $old_password, $new_password);">
<reference>oci_password_change($connection, $username, $old_password, $new_password);
Changes password of Oracle's user
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b> username string </b>The Oracle user name.
<b> old_password string </b>The old password.
<b> new_password string </b>The new password to be set.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_pconnect" autocomplete_append="($username, $password, $db = null, $charset = null, $session_mode = null);">
<reference>oci_pconnect($username, $password, $db = null, $charset = null, $session_mode = null);
Connect to an Oracle database using a persistent connection
<b> username string </b>The Oracle user name.
<b> password string </b>The password for username.
<b> db string[optional] </b>This optional parameter can either contain the name of the local
Oracle instance or the name of the entry in
tnsnames.ora.
If the not specified, PHP uses environment variables
ORACLE_SID and TWO_TASK to
determine the name of local Oracle instance and location of 
tnsnames.ora accordingly.
<b> charset string[optional] &amp;oci.charset;</b><b> session_mode int[optional] </b>This parameter is available since version 1.1 and accepts the
following values: OCI_DEFAULT,
OCI_SYSOPER and OCI_SYSDBA.
If either OCI_SYSOPER or
OCI_SYSDBA were specified, this function will try
to establish privileged connection using external credentials. 
Privileged connections are disabled by default. To enable them you
need to set oci8.privileged_connect
to On.
<b>returns</b>  resource a connection identifier or false on error.
</reference></element>
<element pattern="oci_result" autocomplete_append="($statement, $field);">
<reference>oci_result($statement, $field);
Returns field's value from the fetched row
<b> statement resource </b><b> field mixed </b>Can be either use the column number (1-based) or the column name (in
uppercase).
<b>returns</b>  mixed everything as strings except for abstract types (ROWIDs, LOBs and
FILEs). Returns false on error.
</reference></element>
<element pattern="oci_rollback" autocomplete_append="($connection);">
<reference>oci_rollback($connection);
Rolls back outstanding transaction
<b> connection resource </b>An Oracle connection identifier, returned by 
oci_connect or oci_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_server_version" autocomplete_append="($connection);">
<reference>oci_server_version($connection);
Returns server version
<b> connection resource </b><b>returns</b>  string the version information as a string or false on error.
</reference></element>
<element pattern="oci_set_prefetch" autocomplete_append="($statement, $rows);">
<reference>oci_set_prefetch($statement, $rows);
Sets number of rows to be prefetched
<b> statement resource </b><b> rows int </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="oci_statement_type" autocomplete_append="($statement);">
<reference>oci_statement_type($statement);
Returns the type of an OCI statement
<b> statement resource </b>A valid OCI statement identifier.
<b>returns</b>  string the query type ofstatement as one of the
following values:
SELECT
UPDATE
DELETE
INSERT
CREATE
DROP
ALTER
BEGIN
DECLARE
CALL (since PHP 5.2.1 and OCI8
1.2.3)
UNKNOWN
Returns false on error.
</reference></element>
<element pattern="ocifetchinto" autocomplete_append="($statement, array &amp;$result, $mode = null);">
<reference>ocifetchinto($statement, array &amp;$result, $mode = null);
Fetches the next row into an array (deprecated)
<b> statement resource </b><b> result array </b><b> mode int[optional] </b><b>returns</b>  int 
</reference></element>
<element pattern="odbc_autocommit" autocomplete_append="($connection_id, $OnOff = null);">
<reference>odbc_autocommit($connection_id, $OnOff = null);
Toggle autocommit behaviour
<b> connection_id resource &amp;odbc.connection.id;</b><b> OnOff bool[optional] </b>If OnOff is true, auto-commit is enabled, if
it is false auto-commit is disabled.
<b>returns</b>  mixed Without the OnOff parameter, this function returns
auto-commit status for connection_id. Non-zero is
returned if auto-commit is on, 0 if it is off, or false if an error
occurs.
If OnOff is set, this function returns true on
success and false on failure.
</reference></element>
<element pattern="odbc_binmode" autocomplete_append="($result_id, $mode);">
<reference>odbc_binmode($result_id, $mode);
Handling of binary column data
<b> result_id resource </b>The result identifier.
If result_id is 0, the
settings apply as default for new results.
Default for longreadlen is 4096 and
mode defaults to
ODBC_BINMODE_RETURN. Handling of binary long
columns is also affected by odbc_longreadlen.
<b> mode int </b>Possible values for mode are:
ODBC_BINMODE_PASSTHRU: Passthru BINARY data
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="odbc_close_all" autocomplete_append="();">
<reference>odbc_close_all();
Close all ODBC connections
<b>returns</b>  void 
</reference></element>
<element pattern="odbc_close" autocomplete_append="($connection_id);">
<reference>odbc_close($connection_id);
Close an ODBC connection
<b> connection_id resource &amp;odbc.connection.id;</b><b>returns</b>  void 
</reference></element>
<element pattern="odbc_columnprivileges" autocomplete_append="($connection_id, $qualifier, $owner, $table_name, $column_name);">
<reference>odbc_columnprivileges($connection_id, $qualifier, $owner, $table_name, $column_name);
Lists columns and associated privileges for the given table
<b> connection_id resource &amp;odbc.connection.id;</b><b> qualifier string </b>The qualifier.
<b> owner string </b>The owner.
<b> table_name string </b>The table name.
<b> column_name string </b>The column_name argument accepts search
patterns ('%' to match zero or more characters and '_' to match a
single character).
<b>returns</b>  resource an ODBC result identifier or false on failure.
This result identifier can be used to fetch a list of columns and
associated privileges.
The result set has the following columns:
TABLE_QUALIFIER
TABLE_OWNER
TABLE_NAME
GRANTOR
GRANTEE
PRIVILEGE
IS_GRANTABLE
The result set is ordered by TABLE_QUALIFIER, TABLE_OWNER and
TABLE_NAME.
</reference></element>
<element pattern="odbc_columns" autocomplete_append="($connection_id, $qualifier = null, $schema = null, $table_name = null, $column_name = null);">
<reference>odbc_columns($connection_id, $qualifier = null, $schema = null, $table_name = null, $column_name = null);
Lists the column names in specified tables
<b> connection_id resource &amp;odbc.connection.id;</b><b> qualifier string[optional] </b>The qualifier.
<b> schema string[optional] </b>The owner.
<b> table_name string[optional] </b>The table name.
<b> column_name string[optional] </b>The column name.
<b>returns</b>  resource an ODBC result identifier or false on failure.
The result set has the following columns:
TABLE_QUALIFIER
TABLE_SCHEM
TABLE_NAME
COLUMN_NAME
DATA_TYPE
TYPE_NAME
PRECISION
LENGTH
SCALE
RADIX
NULLABLE
REMARKS
The result set is ordered by TABLE_QUALIFIER, TABLE_SCHEM and
TABLE_NAME.
</reference></element>
<element pattern="odbc_commit" autocomplete_append="($connection_id);">
<reference>odbc_commit($connection_id);
Commit an ODBC transaction
<b> connection_id resource &amp;odbc.connection.id;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="odbc_connect" autocomplete_append="($dsn, $user, $password, $cursor_type = null);">
<reference>odbc_connect($dsn, $user, $password, $cursor_type = null);
Connect to a datasource
<b> dsn string </b>The database source name for the connection.
<b> user string </b>The username.
<b> password string </b>The password.
<b> cursor_type int[optional] </b>This sets the type of cursor to be used
for this connection. This parameter is not normally needed, but
can be useful for working around problems with some ODBC drivers.
The following constants are defined for cursortype:
SQL_CUR_USE_IF_NEEDED
<b>returns</b>  resource an ODBC connection id or 0 (false) on
error.
</reference></element>
<element pattern="odbc_cursor" autocomplete_append="($result_id);">
<reference>odbc_cursor($result_id);
Get cursorname
<b> result_id resource </b>The result identifier.
<b>returns</b>  string the cursor name, as a string.
</reference></element>
<element pattern="odbc_data_source" autocomplete_append="($connection_id, $fetch_type);">
<reference>odbc_data_source($connection_id, $fetch_type);
Returns information about a current connection
<b> connection_id resource &amp;odbc.connection.id;</b><b> fetch_type int </b>The fetch_type can be one of two constant types:
SQL_FETCH_FIRST, SQL_FETCH_NEXT.
Use SQL_FETCH_FIRST the first time this function is
called, thereafter use the SQL_FETCH_NEXT.
<b>returns</b>  array false on error, and an array upon success.
</reference></element>
<element pattern="odbc_do" autocomplete_append="();">
<reference>odbc_do();
&amp;Alias; &lt;function&gt;odbc_exec&lt;/function&gt;
</reference></element>
<element pattern="odbc_error" autocomplete_append="($connection_id = null);">
<reference>odbc_error($connection_id = null);
Get the last error code
<b> connection_id resource[optional] &amp;odbc.connection.id;</b><b>returns</b>  string If connection_id is specified, the last state
of that connection is returned, else the last state of any connection
is returned.
This function returns meaningful value only if last odbc query failed
(i.e. odbc_exec returned false).
</reference></element>
<element pattern="odbc_errormsg" autocomplete_append="($connection_id = null);">
<reference>odbc_errormsg($connection_id = null);
Get the last error message
<b> connection_id resource[optional] &amp;odbc.connection.id;</b><b>returns</b>  string If connection_id is specified, the last state
of that connection is returned, else the last state of any connection
is returned.
This function returns meaningful value only if last odbc query failed
(i.e. odbc_exec returned false).
</reference></element>
<element pattern="odbc_exec" autocomplete_append="($connection_id, $query_string, $flags = null);">
<reference>odbc_exec($connection_id, $query_string, $flags = null);
Prepare and execute a SQL statement
<b> connection_id resource &amp;odbc.connection.id;</b><b> query_string string </b>The SQL statement.
<b> flags int[optional] </b><b>returns</b>  resource an ODBC result identifier if the SQL command was executed
successfully, or false on error.
</reference></element>
<element pattern="odbc_execute" autocomplete_append="($result_id, array $parameters_array = null);">
<reference>odbc_execute($result_id, array $parameters_array = null);
Execute a prepared statement
<b> result_id resource </b>The result id resource, from odbc_prepare.
<b> parameters_array array[optional] </b>Parameters in parameter_array will be
substituted for placeholders in the prepared statement in order.
Elements of this array will be converted to strings by calling this
function.
Any parameters in parameter_array which
start and end with single quotes will be taken as the name of a
file to read and send to the database server as the data for the
appropriate placeholder.
If you wish to store a string which actually begins and ends with
single quotes, you must add a space or other non-single-quote character
to the beginning or end of the parameter, which will prevent the
parameter from being taken as a file name. If this is not an option,
then you must use another mechanism to store the string, such as
executing the query directly with odbc_exec).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="odbc_fetch_array" autocomplete_append="($result, $rownumber = null);">
<reference>odbc_fetch_array($result, $rownumber = null);
Fetch a result row as an associative array
<b> result resource </b>The result resource from odbc_exec.
<b> rownumber int[optional] </b>Optionally choose which row number to retrieve.
<b>returns</b>  array an array that corresponds to the fetched row, or false if there 
are no more rows.
</reference></element>
<element pattern="odbc_fetch_into" autocomplete_append="($result_id, array $result_array, $rownumber = null);">
<reference>odbc_fetch_into($result_id, array $result_array, $rownumber = null);
Fetch one result row into array
<b> result_id resource </b>The result resource.
<b> result_array array </b>The result array
that can be of any type since it will be converted to type
array. The array will contain the column values starting at array
index 0.
<b> rownumber int[optional] </b>The row number.
<b>returns</b>  int the number of columns in the result;
false on error.
</reference></element>
<element pattern="odbc_fetch_into" autocomplete_append="($result_id, array $result_array, $rownumber = null);">
<reference>odbc_fetch_into($result_id, array $result_array, $rownumber = null);
Fetch one result row into array
<b> result_id resource </b>The result resource.
<b> result_array array </b>The result array
that can be of any type since it will be converted to type
array. The array will contain the column values starting at array
index 0.
<b> rownumber int[optional] </b>The row number.
<b>returns</b>  int the number of columns in the result;
false on error.
</reference></element>
<element pattern="odbc_fetch_object" autocomplete_append="($result, $rownumber = null);">
<reference>odbc_fetch_object($result, $rownumber = null);
Fetch a result row as an object
<b> result resource </b>The result resource from odbc_exec.
<b> rownumber int[optional] </b>Optionally choose which row number to retrieve.
<b>returns</b>  object an object that corresponds to the fetched row, or false if there 
are no more rows.
</reference></element>
<element pattern="odbc_fetch_row" autocomplete_append="($result_id, $row_number = null);">
<reference>odbc_fetch_row($result_id, $row_number = null);
Fetch a row
<b> result_id resource </b>The result identifier.
<b> row_number int[optional] </b>If row_number is not specified,
odbc_fetch_row will try to fetch the next row in
the result set. Calls to odbc_fetch_row with and
without row_number can be mixed.
To step through the result more than once, you can call
odbc_fetch_row with
row_number 1, and then continue doing
odbc_fetch_row without
row_number to review the result. If a driver
doesn't support fetching rows by number, the
row_number parameter is ignored.
<b>returns</b>  bool true if there was a row, false otherwise.
</reference></element>
<element pattern="odbc_field_len" autocomplete_append="($result_id, $field_number);">
<reference>odbc_field_len($result_id, $field_number);
Get the length (precision) of a field
<b> result_id resource </b>The result identifier.
<b> field_number int </b>The field number. Field numbering starts at 1.
<b>returns</b>  int the field name as a string, or false on error.
</reference></element>
<element pattern="odbc_field_name" autocomplete_append="($result_id, $field_number);">
<reference>odbc_field_name($result_id, $field_number);
Get the columnname
<b> result_id resource </b>The result identifier.
<b> field_number int </b>The field number. Field numbering starts at 1.
<b>returns</b>  string the field name as a string, or false on error.
</reference></element>
<element pattern="odbc_field_num" autocomplete_append="($result_id, $field_name);">
<reference>odbc_field_num($result_id, $field_name);
Return column number
<b> result_id resource </b>The result identifier.
<b> field_name string </b>The field name.
<b>returns</b>  int the field number as a integer, or false on error.
Field numbering starts at 1.
</reference></element>
<element pattern="odbc_field_precision" autocomplete_append="();">
<reference>odbc_field_precision();
&amp;Alias; &lt;function&gt;odbc_field_len&lt;/function&gt;
</reference></element>
<element pattern="odbc_field_scale" autocomplete_append="($result_id, $field_number);">
<reference>odbc_field_scale($result_id, $field_number);
Get the scale of a field
<b> result_id resource </b>The result identifier.
<b> field_number int </b>The field number. Field numbering starts at 1.
<b>returns</b>  int the field scale as a integer, or false on error.
</reference></element>
<element pattern="odbc_field_type" autocomplete_append="($result_id, $field_number);">
<reference>odbc_field_type($result_id, $field_number);
Datatype of a field
<b> result_id resource </b>The result identifier.
<b> field_number int </b>The field number. Field numbering starts at 1.
<b>returns</b>  string the field type as a string, or false on error.
</reference></element>
<element pattern="odbc_foreignkeys" autocomplete_append="($connection_id, $pk_qualifier, $pk_owner, $pk_table, $fk_qualifier, $fk_owner, $fk_table);">
<reference>odbc_foreignkeys($connection_id, $pk_qualifier, $pk_owner, $pk_table, $fk_qualifier, $fk_owner, $fk_table);
Retrieves a list of foreign keys
<b> connection_id resource &amp;odbc.connection.id;</b><b> pk_qualifier string </b>The primary key qualifier.
<b> pk_owner string </b>The primary key owner.
<b> pk_table string </b>The primary key table.
<b> fk_qualifier string </b>The foreign key qualifier.
<b> fk_owner string </b>The foreign key owner.
<b> fk_table string </b>The foreign key table.
<b>returns</b>  resource an ODBC result identifier or false on failure.
The result set has the following columns:
PKTABLE_QUALIFIER
PKTABLE_OWNER
PKTABLE_NAME
PKCOLUMN_NAME
FKTABLE_QUALIFIER
FKTABLE_OWNER
FKTABLE_NAME
FKCOLUMN_NAME
KEY_SEQ
UPDATE_RULE
DELETE_RULE
FK_NAME
PK_NAME
If pk_table contains a table name,
odbc_foreignkeys returns a result set
containing the primary key of the specified table and all of the
foreign keys that refer to it.
If fk_table contains a table name,
odbc_foreignkeys returns a result set
containing all of the foreign keys in the specified table and the
primary keys (in other tables) to which they refer.
If both pk_table and
fk_table contain table names,
odbc_foreignkeys returns the foreign keys in
the table specified in fk_table that refer
to the primary key of the table specified in
pk_table
</reference></element>
<element pattern="odbc_free_result" autocomplete_append="($result_id);">
<reference>odbc_free_result($result_id);
Free resources associated with a result
<b> result_id resource </b>The result identifier.
<b>returns</b>  bool Always returns true.
</reference></element>
<element pattern="odbc_gettypeinfo" autocomplete_append="($connection_id, $data_type = null);">
<reference>odbc_gettypeinfo($connection_id, $data_type = null);
Retrieves information about data types supported by the data source
<b> connection_id resource &amp;odbc.connection.id;</b><b> data_type int[optional] </b>The data type, which can be used to restrict the information to a
single data type.
<b>returns</b>  resource an ODBC result identifier or
false on failure.
The result set has the following columns:
TYPE_NAME
DATA_TYPE
PRECISION
LITERAL_PREFIX
LITERAL_SUFFIX
CREATE_PARAMS
NULLABLE
CASE_SENSITIVE
SEARCHABLE
UNSIGNED_ATTRIBUTE
MONEY
AUTO_INCREMENT
LOCAL_TYPE_NAME
MINIMUM_SCALE
MAXIMUM_SCALE
The result set is ordered by DATA_TYPE and TYPE_NAME.
</reference></element>
<element pattern="odbc_longreadlen" autocomplete_append="($result_id, $length);">
<reference>odbc_longreadlen($result_id, $length);
Handling of LONG columns
<b> result_id resource </b>The result identifier.
<b> length int </b>The number of bytes returned to PHP is controlled by the parameter
length. If it is set to 0, Long column data is passed through to the
client.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="odbc_next_result" autocomplete_append="($result_id);">
<reference>odbc_next_result($result_id);
Checks if multiple results are available
<b> result_id resource </b>The result identifier.
<b>returns</b>  bool true if there are more result sets, false otherwise.
</reference></element>
<element pattern="odbc_num_fields" autocomplete_append="($result_id);">
<reference>odbc_num_fields($result_id);
Number of columns in a result
<b> result_id resource </b>The result identifier returned by odbc_exec.
<b>returns</b>  int the number of fields, or -1 on error.
</reference></element>
<element pattern="odbc_num_rows" autocomplete_append="($result_id);">
<reference>odbc_num_rows($result_id);
Number of rows in a result
<b> result_id resource </b>The result identifier returned by odbc_exec.
<b>returns</b>  int the number of rows in an ODBC result.
This function will return -1 on error.
</reference></element>
<element pattern="odbc_pconnect" autocomplete_append="($dsn, $user, $password, $cursor_type = null);">
<reference>odbc_pconnect($dsn, $user, $password, $cursor_type = null);
Open a persistent database connection
<b> dsn string </b><b> user string </b><b> password string </b><b> cursor_type int[optional] </b><b>returns</b>  resource an ODBC connection id or 0 (false) on
error.
</reference></element>
<element pattern="odbc_prepare" autocomplete_append="($connection_id, $query_string);">
<reference>odbc_prepare($connection_id, $query_string);
Prepares a statement for execution
<b> connection_id resource &amp;odbc.connection.id;</b><b> query_string string </b>The query string statement being prepared.
<b>returns</b>  resource an ODBC result identifier if the SQL command was prepared
successfully. Returns false on error.
</reference></element>
<element pattern="odbc_primarykeys" autocomplete_append="($connection_id, $qualifier, $owner, $table);">
<reference>odbc_primarykeys($connection_id, $qualifier, $owner, $table);
Gets the primary keys for a table
<b> connection_id resource &amp;odbc.connection.id;</b><b> qualifier string </b><b> owner string </b><b> table string </b><b>returns</b>  resource an ODBC result identifier or false on failure.
The result set has the following columns:
TABLE_QUALIFIER
TABLE_OWNER
TABLE_NAME
COLUMN_NAME
KEY_SEQ
PK_NAME
</reference></element>
<element pattern="odbc_procedurecolumns" autocomplete_append="($connection_id);">
<reference>odbc_procedurecolumns($connection_id);
Retrieve information about parameters to procedures
<b> connection_id resource &amp;odbc.connection.id;</b><b>returns</b>  resource the list of input and output parameters, as well as the
columns that make up the result set for the specified procedures. 
Returns an ODBC result identifier or false on failure.
The result set has the following columns:
PROCEDURE_QUALIFIER
PROCEDURE_OWNER
PROCEDURE_NAME
COLUMN_NAME
COLUMN_TYPE
DATA_TYPE
TYPE_NAME
PRECISION
LENGTH
SCALE
RADIX
NULLABLE
REMARKS
</reference></element>
<element pattern="odbc_procedures" autocomplete_append="($connection_id);">
<reference>odbc_procedures($connection_id);
Get the list of procedures stored in a specific data source
<b> connection_id resource &amp;odbc.connection.id;</b><b>returns</b>  resource an ODBC
result identifier containing the information or false on failure.
The result set has the following columns:
PROCEDURE_QUALIFIER
PROCEDURE_OWNER
PROCEDURE_NAME
NUM_INPUT_PARAMS
NUM_OUTPUT_PARAMS
NUM_RESULT_SETS
REMARKS
PROCEDURE_TYPE
</reference></element>
<element pattern="odbc_result_all" autocomplete_append="($result_id, $format = null);">
<reference>odbc_result_all($result_id, $format = null);
Print result as HTML table
<b> result_id resource </b>The result identifier.
<b> format string[optional] </b>Additional overall table formatting.
<b>returns</b>  int the number of rows in the result or false on error.
</reference></element>
<element pattern="odbc_result" autocomplete_append="($result_id, $field);">
<reference>odbc_result($result_id, $field);
Get result data
<b> result_id resource </b>The ODBC resource.
<b> field mixed </b>The field name being retrieved. It can either be an integer containing
the column number of the field you want; or it can be a string
containing the name of the field.
<b>returns</b>  mixed the string contents of the field, false on error, &amp;null; for
NULL data, or true for binary data.
</reference></element>
<element pattern="odbc_rollback" autocomplete_append="($connection_id);">
<reference>odbc_rollback($connection_id);
Rollback a transaction
<b> connection_id resource &amp;odbc.connection.id;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="odbc_setoption" autocomplete_append="($id, $function, $option, $param);">
<reference>odbc_setoption($id, $function, $option, $param);
Adjust ODBC settings
<b> id resource </b>Is a connection id or result id on which to change the settings.
For SQLSetConnectOption(), this is a connection id.
For SQLSetStmtOption(), this is a result id.
<b> function int </b>Is the ODBC function to use. The value should be
1 for SQLSetConnectOption() and
2 for SQLSetStmtOption().
<b> option int </b>The option to set.
<b> param int </b>The value for the given option.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="odbc_specialcolumns" autocomplete_append="($connection_id, $type, $qualifier, $owner, $table, $scope, $nullable);">
<reference>odbc_specialcolumns($connection_id, $type, $qualifier, $owner, $table, $scope, $nullable);
Retrieves special columns
<b> connection_id resource &amp;odbc.connection.id;</b><b> type int When the type argument is SQL_BEST_ROWID,</b>odbc_specialcolumns returns the
column or columns that uniquely identify each row in the table.
When the type argument is SQL_ROWVER,
odbc_specialcolumns returns the column or columns in the
specified table, if any, that are automatically updated by the data source
when any value in the row is updated by any transaction.
<b> qualifier string </b>The qualifier.
<b> owner string </b>The owner.
<b> table string </b>The table.
<b> scope int </b>The scope, which orders the result set.
<b> nullable int </b>The nullable option.
<b>returns</b>  resource an ODBC result identifier or false on
failure.
The result set has the following columns:
SCOPE
COLUMN_NAME
DATA_TYPE
TYPE_NAME
PRECISION
LENGTH
SCALE
PSEUDO_COLUMN
</reference></element>
<element pattern="odbc_statistics" autocomplete_append="($connection_id, $qualifier, $owner, $table_name, $unique, $accuracy);">
<reference>odbc_statistics($connection_id, $qualifier, $owner, $table_name, $unique, $accuracy);
Retrieve statistics about a table
<b> connection_id resource &amp;odbc.connection.id;</b><b> qualifier string </b>The qualifier.
<b> owner string </b>The owner.
<b> table_name string </b>The table name.
<b> unique int </b>The unique attribute.
<b> accuracy int </b>The accuracy.
<b>returns</b>  resource an ODBC result identifier or false on failure.
The result set has the following columns:
TABLE_QUALIFIER
TABLE_OWNER
TABLE_NAME
NON_UNIQUE
INDEX_QUALIFIER
INDEX_NAME
TYPE
SEQ_IN_INDEX
COLUMN_NAME
COLLATION
CARDINALITY
PAGES
FILTER_CONDITION
</reference></element>
<element pattern="odbc_tableprivileges" autocomplete_append="($connection_id, $qualifier, $owner, $name);">
<reference>odbc_tableprivileges($connection_id, $qualifier, $owner, $name);
Lists tables and the privileges associated with each table
<b> connection_id resource &amp;odbc.connection.id;</b><b> qualifier string </b>The qualifier.
<b> owner string </b>The owner. Accepts the following search patterns:
('%' to match zero or more characters and '_' to match a single character)
<b> name string </b>The name. Accepts the following search patterns:
('%' to match zero or more characters and '_' to match a single character)
<b>returns</b>  resource An ODBC result identifier or false on failure.
The result set has the following columns:
TABLE_QUALIFIER
TABLE_OWNER
TABLE_NAME
GRANTOR
GRANTEE
PRIVILEGE
IS_GRANTABLE
</reference></element>
<element pattern="odbc_tables" autocomplete_append="($connection_id, $qualifier = null, $owner = null, $name = null, $types = null);">
<reference>odbc_tables($connection_id, $qualifier = null, $owner = null, $name = null, $types = null);
Get the list of table names stored in a specific data source
<b> connection_id resource &amp;odbc.connection.id;</b><b> qualifier string[optional] </b>The qualifier.
<b> owner string[optional] </b>The owner. Accepts search patterns ('%' to match zero or more
characters and '_' to match a single character).
<b> name string[optional] </b>The name. Accepts search patterns ('%' to match zero or more
characters and '_' to match a single character).
<b> types string[optional] </b>If table_type is not an empty string, it
must contain a list of comma-separated values for the types of
interest; each value may be enclosed in single quotes (') or
unquoted. For example, "'TABLE','VIEW'" or "TABLE, VIEW". If the
data source does not support a specified table type,
odbc_tables does not return any results for
that type.
<b>returns</b>  resource an ODBC result identifier containing the information 
or false on failure.
The result set has the following columns:
TABLE_QUALIFIER
TABLE_OWNER
TABLE_NAME
TABLE_TYPE
REMARKS
</reference></element>
<element pattern="openal_buffer_create"/>
<element pattern="openal_buffer_data"/>
<element pattern="openal_buffer_destroy"/>
<element pattern="openal_buffer_get"/>
<element pattern="openal_buffer_loadwav"/>
<element pattern="openal_context_create"/>
<element pattern="openal_context_current"/>
<element pattern="openal_context_destroy"/>
<element pattern="openal_context_process"/>
<element pattern="openal_context_suspend"/>
<element pattern="openal_device_close"/>
<element pattern="openal_device_open"/>
<element pattern="openal_listener_get"/>
<element pattern="openal_listener_set"/>
<element pattern="openal_source_create"/>
<element pattern="openal_source_destroy"/>
<element pattern="openal_source_get"/>
<element pattern="openal_source_pause"/>
<element pattern="openal_source_play"/>
<element pattern="openal_source_rewind"/>
<element pattern="openal_source_set"/>
<element pattern="openal_source_stop"/>
<element pattern="openal_stream"/>
<element pattern="openssl_csr_export_to_file" autocomplete_append="($csr, $outfilename, $notext = null);">
<reference>openssl_csr_export_to_file($csr, $outfilename, $notext = null);
Exports a CSR to a file
<b> csr resource </b><b> outfilename string </b>Path to the output file.
<b> notext bool[optional] &amp;note.openssl.param-notext;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_csr_export" autocomplete_append="($csr, &amp;$out, $notext = null);">
<reference>openssl_csr_export($csr, &amp;$out, $notext = null);
Exports a CSR as a string
<b> csr resource </b><b> out string </b><b> notext bool[optional] &amp;note.openssl.param-notext;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_csr_get_public_key" autocomplete_append="($csr, $use_shortnames = null);">
<reference>openssl_csr_get_public_key($csr, $use_shortnames = null);
Returns the public key of a CERT
<b> csr mixed </b><b> use_shortnames bool[optional] </b><b>returns</b>  resource 
</reference></element>
<element pattern="openssl_csr_get_subject" autocomplete_append="($csr, $use_shortnames = null);">
<reference>openssl_csr_get_subject($csr, $use_shortnames = null);
Returns the subject of a CERT
<b> csr mixed </b><b> use_shortnames bool[optional] </b><b>returns</b>  array 
</reference></element>
<element pattern="openssl_csr_new" autocomplete_append="(array $dn, &amp;$privkey, array $configargs = null, array $extraattribs = null);">
<reference>openssl_csr_new(array $dn, &amp;$privkey, array $configargs = null, array $extraattribs = null);
Generates a CSR
<b> dn array </b>The Distinguished Name to be used in the certificate.
<b> privkey resource </b>privkey should be set to a private key that was
previously generated by openssl_pkey_new (or
otherwise obtained from the other openssl_pkey family of functions).
The corresponding public portion of the key will be used to sign the
CSR.
<b> configargs array[optional] </b>By default, the information in your system openssl.conf
is used to initialize the request; you can specify a configuration file
section by setting the config_section_section key of
configargs. You can also specify an alternative
openssl configuration file by setting the value of the
config key to the path of the file you want to use.
The following keys, if present in configargs
behave as their equivalents in the openssl.conf, as
listed in the table below.

Configuration overrides
digest_alg string default_md
Selects which digest method to use
x509_extensions string x509_extensions
Selects which extensions should be used when creating an x509
certificate
req_extensions string req_extensions
Selects which extensions should be used when creating a CSR
private_key_bits integer default_bits
Specifies how many bits should be used to generate a private
key
private_key_type integer none
Specifies the type of private key to create. This can be one
of OPENSSL_KEYTYPE_DSA,
OPENSSL_KEYTYPE_DH or
OPENSSL_KEYTYPE_RSA.
The default value is OPENSSL_KEYTYPE_RSA which
is currently the only supported key type.
encrypt_key boolean encrypt_key
Should an exported key (with passphrase) be encrypted?

<b> extraattribs array[optional] </b>extraattribs is used to specify additional
configuration options for the CSR. Both dn and
extraattribs are associative arrays whose keys are
converted to OIDs and applied to the relevant part of the request.
<b>returns</b>  mixed the CSR.
</reference></element>
<element pattern="openssl_csr_sign" autocomplete_append="($csr, $cacert, $priv_key, $days, array $configargs = null, $serial = null);">
<reference>openssl_csr_sign($csr, $cacert, $priv_key, $days, array $configargs = null, $serial = null);
Sign a CSR with another certificate (or itself) and generate a certificate
<b> csr mixed </b>A CSR previously generated by openssl_csr_new.
It can also be the path to a PEM encoded CSR when specified as
file://path/to/csr or an exported string generated
by openssl_csr_export.
<b> cacert mixed </b>The generated certificate will be signed by cacert.
If cacert is &amp;null;, the generated certificate
will be a self-signed certificate.
<b> priv_key mixed </b>priv_key is the private key that corresponds to
cacert.
<b> days int </b>days specifies the length of time for which the
generated certificate will be valid, in days.
<b> configargs array[optional] </b>You can finetune the CSR signing by configargs.
See openssl_csr_new for more information about
configargs.
<b> serial int[optional] </b>An optional the serial number of issued certificate. If not specified
it will default to 0.
<b>returns</b>  resource an x509 certificate resource on success, false on failure.
</reference></element>
<element pattern="openssl_error_string" autocomplete_append="();">
<reference>openssl_error_string();
Return openSSL error message
<b>returns</b>  string an error message string, or false if there are no more error
messages to return.
</reference></element>
<element pattern="openssl_free_key" autocomplete_append="($key_identifier);">
<reference>openssl_free_key($key_identifier);
Free key resource
<b> key_identifier resource </b><b>returns</b>  void 
</reference></element>
<element pattern="openssl_open" autocomplete_append="($sealed_data, &amp;$open_data, $env_key, $priv_key_id);">
<reference>openssl_open($sealed_data, &amp;$open_data, $env_key, $priv_key_id);
Open sealed data
<b> sealed_data string </b><b> open_data string </b>If the call is successful the opened data is returned in this
parameter.
<b> env_key string </b><b> priv_key_id mixed </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_pkcs7_decrypt" autocomplete_append="($infilename, $outfilename, $recipcert, $recipkey = null);">
<reference>openssl_pkcs7_decrypt($infilename, $outfilename, $recipcert, $recipkey = null);
Decrypts an S/MIME encrypted message
<b> infilename string </b><b> outfilename string </b>The decrypted message is written to the file specified by
outfilename.
<b> recipcert mixed </b><b> recipkey mixed[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_pkcs7_encrypt" autocomplete_append="($infile, $outfile, $recipcerts, array $headers, $flags = null, $cipherid = null);">
<reference>openssl_pkcs7_encrypt($infile, $outfile, $recipcerts, array $headers, $flags = null, $cipherid = null);
Encrypt an S/MIME message
<b> infile string </b><b> outfile string </b><b> recipcerts mixed </b>Either a lone X.509 certificate, or an array of X.509 certificates.
<b> headers array </b>headers is an array of headers that
will be prepended to the data after it has been encrypted.
headers can be either an associative array
keyed by header name, or an indexed array, where each element contains
a single header line.
<b> flags int[optional] </b>flags can be used to specify options that affect
the encoding process - see PKCS7
constants.
<b> cipherid int[optional] </b>Cipher can be selected with cipherid.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_pkcs7_sign" autocomplete_append="($infilename, $outfilename, $signcert, $privkey, array $headers, $flags = null, $extracerts = null);">
<reference>openssl_pkcs7_sign($infilename, $outfilename, $signcert, $privkey, array $headers, $flags = null, $extracerts = null);
Sign an S/MIME message
<b> infilename string </b><b> outfilename string </b><b> signcert mixed </b><b> privkey mixed </b><b> headers array </b>headers is an array of headers that
will be prepended to the data after it has been signed (see
openssl_pkcs7_encrypt for more information about
the format of this parameter.
<b> flags int[optional] </b>flags can be used to alter the output - see PKCS7 constants - if not specified,
it defaults to PKCS7_DETACHED.
<b> extracerts string[optional] </b>extracerts specifies the name of a file containing
a bunch of extra certificates to include in the signature which can for
example be used to help the recipient to verify the certificate that you used.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_pkcs7_verify" autocomplete_append="($filename, $flags, $outfilename = null, array $cainfo = null, $extracerts = null, $content = null);">
<reference>openssl_pkcs7_verify($filename, $flags, $outfilename = null, array $cainfo = null, $extracerts = null, $content = null);
Verifies the signature of an S/MIME signed message
<b> filename string </b>Path to the message.
<b> flags int </b>flags can be used to affect how the signature is
verified - see PKCS7 constants
for more information.
<b> outfilename string[optional] </b>If the outfilename is specified, it should be a
string holding the name of a file into which the certificates of the
persons that signed the messages will be stored in PEM format.
<b> cainfo array[optional] </b>If the cainfo is specified, it should hold
information about the trusted CA certificates to use in the verification
process - see certificate
verification for more information about this parameter.
<b> extracerts string[optional] </b>If the extracerts is specified, it is the filename
of a file containing a bunch of certificates to use as untrusted CAs.
<b> content string[optional] </b>You can specify a filename with content that will
be filled with the verified data, but with the signature information
stripped.
<b>returns</b>  mixed true if the signature is verified, false if it is not correct
(the message has been tampered with, or the signing certificate is invalid),
or -1 on error.
</reference></element>
<element pattern="openssl_pkey_export_to_file" autocomplete_append="($key, $outfilename, $passphrase = null, array $configargs = null);">
<reference>openssl_pkey_export_to_file($key, $outfilename, $passphrase = null, array $configargs = null);
Gets an exportable representation of a key into a file
<b> key mixed </b><b> outfilename string </b>Path to the output file.
<b> passphrase string[optional] </b>The key can be optionally protected by a
passphrase.
<b> configargs array[optional] </b>configargs can be used to fine-tune the export
process by specifying and/or overriding options for the openssl
configuration file. See openssl_csr_new for more
information about configargs.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_pkey_export" autocomplete_append="($key, &amp;$out, $passphrase = null, array $configargs = null);">
<reference>openssl_pkey_export($key, &amp;$out, $passphrase = null, array $configargs = null);
Gets an exportable representation of a key into a string
<b> key mixed </b><b> out string </b><b> passphrase string[optional] </b>The key is optionally protected by passphrase.
<b> configargs array[optional] </b>configargs can be used to fine-tune the export
process by specifying and/or overriding options for the openssl
configuration file. See openssl_csr_new for more
information about configargs.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_pkey_free" autocomplete_append="($key);">
<reference>openssl_pkey_free($key);
Frees a private key
<b> key resource </b>Resource holding the key.
<b>returns</b>  void 
</reference></element>
<element pattern="openssl_pkey_get_details" autocomplete_append="($key);">
<reference>openssl_pkey_get_details($key);
Returns an array with the key details
<b> key resource </b>Resource holding the key.
<b>returns</b>  array an array with the key details in success or false in failure.
Returned array has indexes bits (number of bits),
key (string representation of the public key) and
type (type of the key which is one of
OPENSSL_KEYTYPE_RSA,
OPENSSL_KEYTYPE_DSA,
OPENSSL_KEYTYPE_DH,
OPENSSL_KEYTYPE_EC or -1 meaning unknown).
</reference></element>
<element pattern="openssl_pkey_get_private" autocomplete_append="($key, $passphrase = null);">
<reference>openssl_pkey_get_private($key, $passphrase = null);
Get a private key
<b> key mixed </b>key can be one of the following:
a string having the format
file://path/to/file.pem. The named file must
contain a PEM encoded certificate/private key (it may contain both).
<b> passphrase string[optional] </b>The optional parameter passphrase must be used
if the specified key is encrypted (protected by a passphrase).
<b>returns</b>  resource a positive key resource identifier on success, or false on error.
</reference></element>
<element pattern="openssl_pkey_get_public" autocomplete_append="($certificate);">
<reference>openssl_pkey_get_public($certificate);
Extract public key from certificate and prepare it for use
<b> certificate mixed </b>certificate can be one of the following:
an X.509 certificate resource
<b>returns</b>  resource a positive key resource identifier on success, or false on error.
</reference></element>
<element pattern="openssl_pkey_new" autocomplete_append="(array $configargs = null);">
<reference>openssl_pkey_new(array $configargs = null);
Generates a new private key
<b> configargs array[optional] </b>You can finetune the key generation (such as specifying the number of
bits) using configargs. See
openssl_csr_new for more information about
configargs.
<b>returns</b>  resource a resource identifier for the pkey on success, or false on
error.
</reference></element>
<element pattern="openssl_private_decrypt" autocomplete_append="($data, &amp;$decrypted, $key, $padding = null);">
<reference>openssl_private_decrypt($data, &amp;$decrypted, $key, $padding = null);
Decrypts data with private key
<b> data string </b><b> decrypted string </b><b> key mixed </b>key must be the private key corresponding that
was used to encrypt the data. 
<b> padding int[optional] </b>padding defaults to
OPENSSL_PKCS1_PADDING, but can also be one of
OPENSSL_SSLV23_PADDING,
OPENSSL_PKCS1_OAEP_PADDING,
OPENSSL_NO_PADDING.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_private_encrypt" autocomplete_append="($data, &amp;$crypted, $key, $padding = null);">
<reference>openssl_private_encrypt($data, &amp;$crypted, $key, $padding = null);
Encrypts data with private key
<b> data string </b><b> crypted string </b><b> key mixed </b><b> padding int[optional] </b>padding defaults to 
OPENSSL_PKCS1_PADDING, but can also be
OPENSSL_NO_PADDING.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_public_decrypt" autocomplete_append="($data, &amp;$decrypted, $key, $padding = null);">
<reference>openssl_public_decrypt($data, &amp;$decrypted, $key, $padding = null);
Decrypts data with public key
<b> data string </b><b> decrypted string </b><b> key mixed </b>key must be the public key corresponding that
was used to encrypt the data. 
<b> padding int[optional] </b>padding defaults to
OPENSSL_PKCS1_PADDING, but can also be
OPENSSL_NO_PADDING.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_public_encrypt" autocomplete_append="($data, &amp;$crypted, $key, $padding = null);">
<reference>openssl_public_encrypt($data, &amp;$crypted, $key, $padding = null);
Encrypts data with public key
<b> data string </b><b> crypted string </b>This will hold the result of the encryption.
<b> key mixed </b>The public key.
<b> padding int[optional] </b>padding defaults to 
OPENSSL_PKCS1_PADDING, but can also be one of 
OPENSSL_SSLV23_PADDING,
OPENSSL_PKCS1_OAEP_PADDING,
OPENSSL_NO_PADDING.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_seal" autocomplete_append="($data, &amp;$sealed_data, array &amp;$env_keys, array $pub_key_ids);">
<reference>openssl_seal($data, &amp;$sealed_data, array &amp;$env_keys, array $pub_key_ids);
Seal (encrypt) data
<b> data string </b><b> sealed_data string </b><b> env_keys array </b><b> pub_key_ids array </b><b>returns</b>  int the length of the sealed data on success, or false on error.
If successful the sealed data is returned in
sealed_data, and the envelope keys in
env_keys.
</reference></element>
<element pattern="openssl_sign" autocomplete_append="($data, &amp;$signature, $priv_key_id, $signature_alg = null);">
<reference>openssl_sign($data, &amp;$signature, $priv_key_id, $signature_alg = null);
Generate signature
<b> data string </b><b> signature string </b>If the call was successful the signature is returned in
signature.
<b> priv_key_id mixed </b><b> signature_alg int[optional] </b>Defaults to OPENSSL_ALGO_SHA1. For more
information see the list of Signature Algorithms.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_verify" autocomplete_append="($data, $signature, $pub_key_id, $signature_alg = null);">
<reference>openssl_verify($data, $signature, $pub_key_id, $signature_alg = null);
Verify signature
<b> data string </b><b> signature string </b><b> pub_key_id mixed </b><b> signature_alg int[optional] </b>Defaults to OPENSSL_ALGO_SHA1. For more
information see the list of Signature Algorithms.
<b>returns</b>  int 1 if the signature is correct, 0 if it is incorrect, and
-1 on error.
</reference></element>
<element pattern="openssl_x509_check_private_key" autocomplete_append="($cert, $key);">
<reference>openssl_x509_check_private_key($cert, $key);
Checks if a private key corresponds to a certificate
<b> cert mixed </b>The certificate.
<b> key mixed </b>The private key.
<b>returns</b>  bool true if key is the private key that
corresponds to cert, or false otherwise.
</reference></element>
<element pattern="openssl_x509_checkpurpose" autocomplete_append="($x509cert, $purpose, array $cainfo = null, $untrustedfile = null);">
<reference>openssl_x509_checkpurpose($x509cert, $purpose, array $cainfo = null, $untrustedfile = null);
Verifies if a certificate can be used for a particular purpose
<b> x509cert mixed </b>The examined certificate.
<b> purpose int </b>
openssl_x509_checkpurpose purposes

X509_PURPOSE_SSL_CLIENT
Can the certificate be used for the client side of an SSL
connection?
X509_PURPOSE_SSL_SERVER
Can the certificate be used for the server side of an SSL
connection?
X509_PURPOSE_NS_SSL_SERVER
Can the cert be used for Netscape SSL server?
X509_PURPOSE_SMIME_SIGN
Can the cert be used to sign S/MIME email?
X509_PURPOSE_SMIME_ENCRYPT
Can the cert be used to encrypt S/MIME email?
X509_PURPOSE_CRL_SIGN
Can the cert be used to sign a certificate revocation list
(CRL)?
X509_PURPOSE_ANY
Can the cert be used for Any/All purposes?

These options are not bitfields - you may specify one only!
<b> cainfo array[optional] </b>cainfo should be an array of trusted CA files/dirs
as described in Certificate
Verification. It defaults to an empty array.
<b> untrustedfile string[optional] </b>If specified, this should be the name of a PEM encoded file holding
certificates that can be used to help verify the certificate, although
no trust in placed in the certificates that come from that file.
<b>returns</b>  int true if the certificate can be used for the intended purpose,
false if it cannot, or -1 on error.
</reference></element>
<element pattern="openssl_x509_export_to_file" autocomplete_append="($x509, $outfilename, $notext = null);">
<reference>openssl_x509_export_to_file($x509, $outfilename, $notext = null);
Exports a certificate to file
<b> x509 mixed </b><b> outfilename string </b>Path to the output file.
<b> notext bool[optional] &amp;note.openssl.param-notext;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_x509_export" autocomplete_append="($x509, &amp;$output, $notext = null);">
<reference>openssl_x509_export($x509, &amp;$output, $notext = null);
Exports a certificate as a string
<b> x509 mixed </b><b> output string </b>On success, this will hold the PEM.
<b> notext bool[optional] &amp;note.openssl.param-notext;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openssl_x509_free" autocomplete_append="($x509cert);">
<reference>openssl_x509_free($x509cert);
Free certificate resource
<b> x509cert resource </b><b>returns</b>  void 
</reference></element>
<element pattern="openssl_x509_parse" autocomplete_append="($x509cert, $shortnames = null);">
<reference>openssl_x509_parse($x509cert, $shortnames = null);
Parse an X509 certificate and return the information as an array
<b> x509cert mixed </b><b> shortnames bool[optional] </b>shortnames controls how the data is indexed in the
array - if shortnames is true (the default) then
fields will be indexed with the short name form, otherwise, the long name
form will be used - e.g.: CN is the shortname form of commonName.
<b>returns</b>  array The structure of the returned data is (deliberately) not
yet documented, as it is still subject to change.
</reference></element>
<element pattern="openssl_x509_read" autocomplete_append="($x509certdata);">
<reference>openssl_x509_read($x509certdata);
Parse an X.509 certificate and return a resource identifier for
t
<b> x509certdata mixed </b><b>returns</b>  resource a resource identifier on success, or false on failure.
</reference></element>
<element pattern="ora_bind"/>
<element pattern="ora_close"/>
<element pattern="ora_columnname"/>
<element pattern="ora_columnsize"/>
<element pattern="ora_columntype"/>
<element pattern="ora_commit"/>
<element pattern="ora_commitoff"/>
<element pattern="ora_commiton"/>
<element pattern="ora_do"/>
<element pattern="ora_error"/>
<element pattern="ora_errorcode"/>
<element pattern="ora_exec"/>
<element pattern="ora_fetch_into"/>
<element pattern="ora_fetch"/>
<element pattern="ora_getcolumn"/>
<element pattern="ora_logoff"/>
<element pattern="ora_logon"/>
<element pattern="ora_numcols"/>
<element pattern="ora_numrows"/>
<element pattern="ora_open"/>
<element pattern="ora_parse"/>
<element pattern="ora_plogon"/>
<element pattern="ora_rollback"/>
<element pattern="flush" autocomplete_append="();">
<reference>flush();
Flush the output buffer
<b>returns</b>  void 
</reference></element>
<element pattern="ob_clean" autocomplete_append="();">
<reference>ob_clean();
Clean (erase) the output buffer
<b>returns</b>  void 
</reference></element>
<element pattern="ob_end_clean" autocomplete_append="();">
<reference>ob_end_clean();
Clean (erase) the output buffer and turn off output buffering
<b>returns</b>  bool Returns true on success or false on failure. Reasons for failure are first that you called the
function without an active buffer or that for some reason a buffer could
not be deleted (possible for special buffer).
</reference></element>
<element pattern="ob_end_flush" autocomplete_append="();">
<reference>ob_end_flush();
Flush (send) the output buffer and turn off output buffering
<b>returns</b>  bool Returns true on success or false on failure. Reasons for failure are first that you called the
function without an active buffer or that for some reason a buffer could
not be deleted (possible for special buffer).
</reference></element>
<element pattern="ob_flush" autocomplete_append="();">
<reference>ob_flush();
Flush (send) the output buffer
<b>returns</b>  void 
</reference></element>
<element pattern="ob_get_clean" autocomplete_append="();">
<reference>ob_get_clean();
Get current buffer contents and delete current output buffer
<b>returns</b>  string the contents of the output buffer and end output buffering.
If output buffering isn't active then false is returned.
</reference></element>
<element pattern="ob_get_contents" autocomplete_append="();">
<reference>ob_get_contents();
Return the contents of the output buffer
<b>returns</b>  string This will return the contents of the output buffer or false, if output
buffering isn't active.
</reference></element>
<element pattern="ob_get_flush" autocomplete_append="();">
<reference>ob_get_flush();
Flush the output buffer, return it as a string and turn off output buffering
<b>returns</b>  string the output buffer or false if no buffering is active.
</reference></element>
<element pattern="ob_get_length" autocomplete_append="();">
<reference>ob_get_length();
Return the length of the output buffer
<b>returns</b>  int the length of the output buffer contents or false if no
buffering is active.
</reference></element>
<element pattern="ob_get_level" autocomplete_append="();">
<reference>ob_get_level();
Return the nesting level of the output buffering mechanism
<b>returns</b>  int the level of nested output buffering handlers or zero if output
buffering is not active.
</reference></element>
<element pattern="ob_get_status" autocomplete_append="($full_status = null);">
<reference>ob_get_status($full_status = null);
Get status of output buffers
<b> full_status bool[optional] </b>true to return all active output buffer levels. If false or not
set, only the top level output buffer is returned.
<b>returns</b>  array If called without the full_status parameter
or with full_status = false a simple array
with the following elements is returned:
2
[type] =&gt; 0
[status] =&gt; 0
[name] =&gt; URL-Rewriter
[del] =&gt; 1
)
]]&gt;
Simple ob_get_status results
KeyValue
levelOutput nesting level
typePHP_OUTPUT_HANDLER_INTERNAL (0) or PHP_OUTPUT_HANDLER_USER (1)
statusOne of PHP_OUTPUT_HANDLER_START (0), PHP_OUTPUT_HANDLER_CONT (1) or PHP_OUTPUT_HANDLER_END (2)
nameName of active output handler or ' default output handler' if none is set
delErase-flag as set by ob_start
If called with full_status = true an array
with one element for each active output buffer level is returned.
The output level is used as key of the top level array and each array
element itself is another array holding status information
on one active output level.
Array
(
[chunk_size] =&gt; 0
[size] =&gt; 40960
[block_size] =&gt; 10240
[type] =&gt; 1
[status] =&gt; 0
[name] =&gt; default output handler
[del] =&gt; 1
)
[1] =&gt; Array
(
[chunk_size] =&gt; 0
[size] =&gt; 40960
[block_size] =&gt; 10240
[type] =&gt; 0
[buffer_size] =&gt; 0
[status] =&gt; 0
[name] =&gt; URL-Rewriter
[del] =&gt; 1
)
)
]]&gt;
The full output contains these additional elements:
Full ob_get_status results
KeyValue
chunk_sizeChunk size as set by ob_start
size...
blocksize...
</reference></element>
<element pattern="ob_gzhandler" autocomplete_append="($buffer, $mode);">
<reference>ob_gzhandler($buffer, $mode);
ob_start callback function to gzip output buffer
<b> buffer string </b><b> mode int </b><b>returns</b>  string 
</reference></element>
<element pattern="ob_implicit_flush" autocomplete_append="($flag = null);">
<reference>ob_implicit_flush($flag = null);
Turn implicit flush on/off
<b> flag int[optional] </b>true to turn implicit flushing on, false otherwise.
Defaults to true.
<b>returns</b>  void 
</reference></element>
<element pattern="ob_list_handlers" autocomplete_append="();">
<reference>ob_list_handlers();
List all output handlers in use
<b>returns</b>  array This will return an array with the output handlers in use (if any). If
output_buffering is enabled or
an anonymous function was used with ob_start,
ob_list_handlers will return "default output
handler".
</reference></element>
<element pattern="ob_start" autocomplete_append="($output_callback = null, $chunk_size = null, $erase = null);">
<reference>ob_start($output_callback = null, $chunk_size = null, $erase = null);
Turn on output buffering
<b> output_callback callback[optional] </b>An optional output_callback function may be
specified. This function takes a string as a parameter and should
return a string. The function will be called when
ob_end_flush is called, or when the output buffer
is flushed to the browser at the end of the request. When
output_callback is called, it will receive the
contents of the output buffer as its parameter and is expected to
return a new output buffer as a result, which will be sent to the
browser. If the output_callback is not a
callable function, this function will return false.
If the callback function has two parameters, the second parameter is
filled with a bit-field consisting of
PHP_OUTPUT_HANDLER_START,
PHP_OUTPUT_HANDLER_CONT and
PHP_OUTPUT_HANDLER_END.
If output_callback returns false original
input is sent to the browser.
The output_callback parameter may be bypassed
by passing a &amp;null; value.
ob_end_clean, ob_end_flush,
ob_clean, ob_flush and
ob_start may not be called from a callback
function. If you call them from callback function, the behavior is
undefined. If you would like to delete the contents of a buffer,
return "" (a null string) from callback function.
You can't even call functions using the output buffering functions like
print_r($expression, true) or
highlight_file($filename, true) from a callback
function.
In PHP 4.0.4, ob_gzhandler was introduced to
facilitate sending gz-encoded data to web browsers that support
compressed web pages. ob_gzhandler determines
what type of content encoding the browser will accept and will return
its output accordingly.
<b> chunk_size int[optional] </b>If the optional parameter chunk_size is passed, the
buffer will be flushed after any output call which causes the buffer's
length to equal or exceed chunk_size.
Default value 0 means that the function is called only in the end,
other special value 1 sets chunk_size to 4096.
<b> erase bool[optional] </b>If the optional parameter erase is set to false,
the buffer will not be deleted until the script finishes (as of PHP 4.3.0).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="output_add_rewrite_var" autocomplete_append="($name, $value);">
<reference>output_add_rewrite_var($name, $value);
Add URL rewriter values
<b> name string </b>The variable name.
<b> value string </b>The variable value.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="output_reset_rewrite_vars" autocomplete_append="();">
<reference>output_reset_rewrite_vars();
Reset URL rewriter values
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="ovrimos_close"/>
<element pattern="ovrimos_commit"/>
<element pattern="ovrimos_connect"/>
<element pattern="ovrimos_cursor"/>
<element pattern="ovrimos_exec"/>
<element pattern="ovrimos_execute"/>
<element pattern="ovrimos_fetch_into"/>
<element pattern="ovrimos_fetch_row"/>
<element pattern="ovrimos_field_len"/>
<element pattern="ovrimos_field_name"/>
<element pattern="ovrimos_field_num"/>
<element pattern="ovrimos_field_type"/>
<element pattern="ovrimos_free_result"/>
<element pattern="ovrimos_longreadlen"/>
<element pattern="ovrimos_num_fields"/>
<element pattern="ovrimos_num_rows"/>
<element pattern="ovrimos_prepare"/>
<element pattern="ovrimos_result_all"/>
<element pattern="ovrimos_result"/>
<element pattern="ovrimos_rollback"/>
<element pattern="px_close"/>
<element pattern="px_create_fp"/>
<element pattern="px_date2string"/>
<element pattern="px_delete_record"/>
<element pattern="px_delete"/>
<element pattern="px_get_field"/>
<element pattern="px_get_info"/>
<element pattern="px_get_parameter"/>
<element pattern="px_get_record"/>
<element pattern="px_get_schema"/>
<element pattern="px_get_value"/>
<element pattern="px_insert_record"/>
<element pattern="px_new"/>
<element pattern="px_numfields"/>
<element pattern="px_numrecords"/>
<element pattern="px_open_fp"/>
<element pattern="px_put_record"/>
<element pattern="px_retrieve_record"/>
<element pattern="px_set_blob_file"/>
<element pattern="px_set_parameter"/>
<element pattern="px_set_tablename"/>
<element pattern="px_set_targetencoding"/>
<element pattern="px_set_value"/>
<element pattern="px_timestamp2string"/>
<element pattern="px_update_record"/>
<element pattern="parsekit_compile_file"/>
<element pattern="parsekit_compile_string"/>
<element pattern="parsekit_func_arginfo"/>
<element pattern="pcntl_alarm" autocomplete_append="($seconds);">
<reference>pcntl_alarm($seconds);
Set an alarm clock for delivery of a signal
<b> seconds int </b>The number of seconds to wait. If seconds is
zero, no new alarm is created.
<b>returns</b>  int the time in seconds that any previously scheduled alarm had
remaining before it was to be delivered, or 0 if there
was no previously scheduled alarm.
</reference></element>
<element pattern="pcntl_exec" autocomplete_append="($path, array $args = null, array $envs = null);">
<reference>pcntl_exec($path, array $args = null, array $envs = null);
Executes specified program in current process space
<b> path string </b>path must be the path to a binary executable or a
script with a valid path pointing to an executable in the shebang (
#!/usr/local/bin/perl for example) as the first line. See your system's
man execve(2) page for additional information.
<b> args array[optional] </b>args is an array of argument strings passed to the
program.
<b> envs array[optional] </b>envs is an array of strings which are passed as
environment to the program. The array is in the format of name =&gt; value,
the key being the name of the environmental variable and the value being
the value of that variable.
<b>returns</b>  void false on error and does not return on success.
</reference></element>
<element pattern="pcntl_fork" autocomplete_append="();">
<reference>pcntl_fork();
Forks the currently running process
<b>returns</b>  int On success, the PID of the child process is returned in the
parent's thread of execution, and a 0 is returned in the child's
thread of execution. On failure, a -1 will be returned in the
parent's context, no child process will be created, and a PHP
error is raised.
</reference></element>
<element pattern="pcntl_getpriority" autocomplete_append="($pid = null, $process_identifier = null);">
<reference>pcntl_getpriority($pid = null, $process_identifier = null);
Get the priority of any process
<b> pid int[optional] </b>If not specified, the pid of the current process is used.
<b> process_identifier int[optional] </b>One of PRIO_PGRP, PRIO_USER
or PRIO_PROCESS.
<b>returns</b>  int pcntl_getpriority returns the priority of the process
or false on error. A lower numerical value causes more favorable
scheduling.
</reference></element>
<element pattern="pcntl_setpriority" autocomplete_append="($priority, $pid = null, $process_identifier = null);">
<reference>pcntl_setpriority($priority, $pid = null, $process_identifier = null);
Change the priority of any process
<b> priority int </b>priority is generally a value in the range
-20 to 20. The default priority
is 0 while a lower numerical value causes more
favorable scheduling. Because priority levels can differ between
system types and kernel versions, please see your system's setpriority(2)
man page for specific details.
<b> pid int[optional] </b>If not specified, the pid of the current process is used.
<b> process_identifier int[optional] </b>One of PRIO_PGRP, PRIO_USER
or PRIO_PROCESS.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pcntl_signal" autocomplete_append="($signo, $handler, $restart_syscalls = null);">
<reference>pcntl_signal($signo, $handler, $restart_syscalls = null);
Installs a signal handler
<b> signo int </b>The signal number.
<b> handler callback </b>The signal handler which may be the name of a user created function,
or method, or either of the two global constants 
SIG_IGN or SIG_DFL. 
Note that when you set a handler to an object method, that object's
reference count is increased which makes it persist until you either
change the handler to something else, or your script ends.
<b> restart_syscalls bool[optional] </b>Specifies whether system call restarting should be used when this
signal arrives and defaults to true.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pcntl_wait" autocomplete_append="(&amp;$status, $options = null);">
<reference>pcntl_wait(&amp;$status, $options = null);
Waits on or returns the status of a forked child
<b> status int </b>pcntl_wait will store status information
in the status parameter which can be
evaluated using the following functions:
pcntl_wifexited,
pcntl_wifstopped,
pcntl_wifsignaled,
pcntl_wexitstatus,
pcntl_wtermsig and
pcntl_wstopsig.
<b> options int[optional] </b>If wait3 is available on your system (mostly BSD-style systems), you can
provide the optional options parameter. If this
parameter is not provided, wait will be used for the system call. If
wait3 is not available, providing a value for options
will have no effect. The value of options
is the value of zero or more of the following two constants
OR'ed together:

Possible values for options

WNOHANG
Return immediately if no child has exited.
WUNTRACED
Return for children which are stopped, and whose status has
not been reported.

<b>returns</b>  int pcntl_wait returns the process ID of the
child which exited, -1 on error or zero if WNOHANG was provided as an
option (on wait3-available systems) and no child was available.
</reference></element>
<element pattern="pcntl_waitpid" autocomplete_append="($pid, &amp;$status, $options = null);">
<reference>pcntl_waitpid($pid, &amp;$status, $options = null);
Waits on or returns the status of a forked child
<b> pid int </b>The value of pid can be one of the following:

possible values for pid:

&lt; -1 wait for any child process whose process group ID is equal to
the absolute value of pid.
-1 wait for any child process; this is the same behaviour that
the wait function exhibits.
0 wait for any child process whose process group ID is equal to
that of the calling process.
&gt; 0 wait for the child whose process ID is equal to the value of
pid.

Specifying -1 as the pid is
equivalent to the functionality pcntl_wait provides
(minus options).
<b> status int </b>pcntl_waitpid will store status information
in the status parameter which can be
evaluated using the following functions:
pcntl_wifexited,
pcntl_wifstopped,
pcntl_wifsignaled,
pcntl_wexitstatus,
pcntl_wtermsig and
pcntl_wstopsig.
<b> options int[optional] </b>The value of options is the value of zero
or more of the following two global constants
OR'ed together:

possible values for options:

WNOHANG
return immediately if no child has exited.
WUNTRACED
return for children which are stopped, and whose status has
not been reported.

<b>returns</b>  int pcntl_waitpid returns the process ID of the
child which exited, -1 on error or zero if WNOHANG was used and no
child was available
</reference></element>
<element pattern="pcntl_wexitstatus" autocomplete_append="($status);">
<reference>pcntl_wexitstatus($status);
Returns the return code of a terminated child
<b> status int &amp;pcntl.parameter.status;</b><b>returns</b>  int the return code, as an integer.
</reference></element>
<element pattern="pcntl_wifexited" autocomplete_append="($status);">
<reference>pcntl_wifexited($status);
Checks if status code represents a normal exit
<b> status int &amp;pcntl.parameter.status;</b><b>returns</b>  bool true if the child status code represents a normal exit, false
otherwise.
</reference></element>
<element pattern="pcntl_wifsignaled" autocomplete_append="($status);">
<reference>pcntl_wifsignaled($status);
Checks whether the status code represents a termination due to a signal
<b> status int &amp;pcntl.parameter.status;</b><b>returns</b>  bool true if the child process exited because of a signal which was
not caught, false otherwise.
</reference></element>
<element pattern="pcntl_wifstopped" autocomplete_append="($status);">
<reference>pcntl_wifstopped($status);
Checks whether the child process is currently stopped
<b> status int &amp;pcntl.parameter.status;</b><b>returns</b>  bool true if the child process which caused the return is
currently stopped, false otherwise.
</reference></element>
<element pattern="pcntl_wstopsig" autocomplete_append="($status);">
<reference>pcntl_wstopsig($status);
Returns the signal which caused the child to stop
<b> status int &amp;pcntl.parameter.status;</b><b>returns</b>  int the signal number.
</reference></element>
<element pattern="pcntl_wtermsig" autocomplete_append="($status);">
<reference>pcntl_wtermsig($status);
Returns the signal which caused the child to terminate
<b> status int &amp;pcntl.parameter.status;</b><b>returns</b>  int the signal number, as an integer.
</reference></element>
<element pattern="preg_grep" autocomplete_append="($pattern, array $input, $flags = null);">
<reference>preg_grep($pattern, array $input, $flags = null);
Return array entries that match the pattern
<b> pattern string </b>The pattern to search for, as a string.
<b> input array </b>The input array.
<b> flags int[optional] </b>If set to PREG_GREP_INVERT, this function returns
the elements of the input array that do not match
the given pattern.
<b>returns</b>  array an array indexed using the keys from the
input array.
</reference></element>
<element pattern="preg_last_error" autocomplete_append="();">
<reference>preg_last_error();
Returns the error code of the last PCRE regex execution
<b>returns</b>  int one of the following constants (explained on their own page):
PREG_NO_ERROR
PREG_INTERNAL_ERROR
PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)
PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)
PREG_BAD_UTF8_ERROR
PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)
</reference></element>
<element pattern="preg_match_all" autocomplete_append="($pattern, $subject, array &amp;$matches, $flags = null, $offset = null);">
<reference>preg_match_all($pattern, $subject, array &amp;$matches, $flags = null, $offset = null);
Perform a global regular expression match
<b> pattern string </b>The pattern to search for, as a string.
<b> subject string </b>The input string.
<b> matches array </b>Normally, the search starts from the beginning of the subject string.
The optional parameter offset can be used to
specify the alternate place from which to start the search (in bytes).
Using offset is not equivalent to passing 
substr($subject, $offset) to
preg_match_all in place of the subject string,
because pattern can contain assertions such as
^, $ or
(?&amp;lt;=x). See preg_match
for examples.
<b> flags int[optional] </b>Can be a combination of the following flags (note that it doesn't make
sense to use PREG_PATTERN_ORDER together with
PREG_SET_ORDER):
PREG_PATTERN_ORDER
Orders results so that $matches[0] is an array of full
pattern matches, $matches[1] is an array of strings matched by
the first parenthesized subpattern, and so on.
]]&gt;
&amp;example.outputs;
example: , this is a test
example: , this is a test
]]&gt;
So, $out[0] contains array of strings that matched full pattern,
and $out[1] contains array of strings enclosed by tags.
<b> offset int[optional] </b><b>returns</b>  int the number of full pattern matches (which might be zero),
or false if an error occurred.
</reference></element>
<element pattern="preg_match" autocomplete_append="($pattern, $subject, array &amp;$matches = null, $flags = null, $offset = null);">
<reference>preg_match($pattern, $subject, array &amp;$matches = null, $flags = null, $offset = null);
Perform a regular expression match
<b> pattern string </b>The pattern to search for, as a string.
<b> subject string </b>The input string.
<b> matches array[optional] </b>If matches is provided, then it is filled with
the results of search. $matches[0] will contain the
text that matched the full pattern, $matches[1]
will have the text that matched the first captured parenthesized
subpattern, and so on.
<b> flags int[optional] </b>flags can be the following flag:
PREG_OFFSET_CAPTURE
If this flag is passed, for every occurring match the appendant string
offset will also be returned. Note that this changes the return value
in an array where every element is an array consisting of the matched
string at index 0 and its string offset into
subject at index 1.
<b> offset int[optional] </b>Normally, the search starts from the beginning of the subject string.
The optional parameter offset can be used to
specify the alternate place from which to start the search (in bytes).
Using offset is not equivalent to passing 
substr($subject, $offset) to
preg_match in place of the subject string,
because pattern can contain assertions such as
^, $ or
(?&amp;lt;=x). Compare:
]]&gt;
&amp;example.outputs;
while this example
]]&gt;
will produce
Array
(
[0] =&gt; def
[1] =&gt; 0
)
)
]]&gt;
<b>returns</b>  int preg_match returns the number of times
pattern matches. That will be either 0 times
(no match) or 1 time because preg_match will stop
searching after the first match. preg_match_all
on the contrary will continue until it reaches the end of
subject.
preg_match returns false if an error occurred.
</reference></element>
<element pattern="preg_quote" autocomplete_append="($str, $delimiter = null);">
<reference>preg_quote($str, $delimiter = null);
Quote regular expression characters
<b> str string </b>The input string.
<b> delimiter string[optional] </b>If the optional delimiter is specified, it
will also be escaped. This is useful for escaping the delimiter
that is required by the PCRE functions. The / is the most commonly
used delimiter.
<b>returns</b>  string the quoted string.
</reference></element>
<element pattern="preg_replace_callback" autocomplete_append="($pattern, $callback, $subject, $limit = null, &amp;$count = null);">
<reference>preg_replace_callback($pattern, $callback, $subject, $limit = null, &amp;$count = null);
Perform a regular expression search and replace using a callback
<b> pattern mixed </b>The pattern to search for. It can be either a string or an array with
strings.
<b> callback callback </b>A callback that will be called and passed an array of matched elements
in the subject string. The callback should
return the replacement string.
You'll often need the callback function
for a preg_replace_callback in just one place.
In this case you can use create_function to
declare an anonymous function as callback within the call to
preg_replace_callback. By doing it this way
you have all information for the call in one place and do not
clutter the function namespace with a callback function's name
not used anywhere else.
preg_replace_callback and 
create_function
]]&gt;
<b> subject mixed </b>The string or an array with strings to search and replace.
<b> limit int[optional] </b>The maximum possible replacements for each pattern in each
subject string. Defaults to
-1 (no limit).
<b> count int[optional] </b>If specified, this variable will be filled with the number of
replacements done.
<b>returns</b>  mixed preg_replace_callback returns an array if the
subject parameter is an array, or a string
otherwise.
If matches are found, the new subject will be returned, otherwise
subject will be returned unchanged.
</reference></element>
<element pattern="preg_replace" autocomplete_append="($pattern, $replacement, $subject, $limit = null, &amp;$count = null);">
<reference>preg_replace($pattern, $replacement, $subject, $limit = null, &amp;$count = null);
Perform a regular expression search and replace
<b> pattern mixed </b>The pattern to search for. It can be either a string or an array with
strings.
The e modifier makes preg_replace
treat the replacement parameter as PHP code after
the appropriate references substitution is done. Tip: make sure that
replacement constitutes a valid PHP code string,
otherwise PHP will complain about a parse error at the line containing
preg_replace.
<b> replacement mixed </b>The string or an array with strings to replace. If this parameter is a
string and the pattern parameter is an array,
all patterns will be replaced by that string. If both
pattern and replacement
parameters are arrays, each pattern will be
replaced by the replacement counterpart. If
there are fewer elements in the replacement
array than in the pattern array, any extra
patterns will be replaced by an empty string.
replacement may contain references of the form
\\n or (since PHP 4.0.4)
$n, with the latter form
being the preferred one. Every such reference will be replaced by the text
captured by the n'th parenthesized pattern.
n can be from 0 to 99, and
\\0 or $0 refers to the text matched
by the whole pattern. Opening parentheses are counted from left to right
(starting from 1) to obtain the number of the capturing subpattern.
When working with a replacement pattern where a backreference is 
immediately followed by another number (i.e.: placing a literal number
immediately after a matched pattern), you cannot use the familiar 
\\1 notation for your backreference. 
\\11, for example, would confuse
preg_replace since it does not know whether you
want the \\1 backreference followed by a literal 
1, or the \\11 backreference
followed by nothing. In this case the solution is to use 
\${1}1. This creates an isolated 
$1 backreference, leaving the 1
as a literal.
When using the e modifier, this function escapes
some characters (namely ', ",
\ and NULL) in the strings that replace the
backreferences. This is done to ensure that no syntax errors arise
from backreference usage with either single or double quotes (e.g.
'strlen(\'$1\')+strlen("$2")'). Make sure you are
aware of PHP's string
syntax to know exactly how the interpreted string will look
like.
<b> subject mixed </b>The string or an array with strings to search and replace.
If subject is an array, then the search and
replace is performed on every entry of subject,
and the return value is an array as well.
<b> limit int[optional] </b>The maximum possible replacements for each pattern in each
subject string. Defaults to
-1 (no limit).
<b> count int[optional] </b>If specified, this variable will be filled with the number of
replacements done.
<b>returns</b>  mixed preg_replace returns an array if the
subject parameter is an array, or a string
otherwise.
If matches are found, the new subject will
be returned, otherwise subject will be
returned unchanged or &amp;null; if an error occurred.
</reference></element>
<element pattern="preg_split" autocomplete_append="($pattern, $subject, $limit = null, $flags = null);">
<reference>preg_split($pattern, $subject, $limit = null, $flags = null);
Split string by a regular expression
<b> pattern string </b>The pattern to search for, as a string.
<b> subject string </b>The input string.
<b> limit int[optional] </b>If specified, then only substrings up to limit
are returned, and if limit is -1, it actually
means "no limit", which is useful for specifying the
flags.
<b> flags int[optional] </b>flags can be any combination of the following
flags (combined with bitwise | operator):
PREG_SPLIT_NO_EMPTY
If this flag is set, only non-empty pieces will be returned by
preg_split.
<b>returns</b>  array an array containing substrings of subject
split along boundaries matched by pattern.
</reference></element>
<element pattern="PDF_activate_item"/>
<element pattern="PDF_add_launchlink"/>
<element pattern="PDF_add_locallink"/>
<element pattern="PDF_add_nameddest"/>
<element pattern="PDF_add_note"/>
<element pattern="PDF_add_pdflink"/>
<element pattern="PDF_add_table_cell"/>
<element pattern="PDF_add_textflow"/>
<element pattern="PDF_add_thumbnail"/>
<element pattern="PDF_add_weblink"/>
<element pattern="PDF_arc"/>
<element pattern="PDF_arcn"/>
<element pattern="PDF_attach_file"/>
<element pattern="PDF_begin_document"/>
<element pattern="PDF_begin_font"/>
<element pattern="PDF_begin_glyph"/>
<element pattern="PDF_begin_item"/>
<element pattern="PDF_begin_layer"/>
<element pattern="PDF_begin_page_ext"/>
<element pattern="PDF_begin_page"/>
<element pattern="PDF_begin_pattern"/>
<element pattern="PDF_begin_template_ext"/>
<element pattern="PDF_begin_template"/>
<element pattern="PDF_circle"/>
<element pattern="PDF_clip"/>
<element pattern="PDF_close_image"/>
<element pattern="PDF_close_pdi_page"/>
<element pattern="PDF_close_pdi"/>
<element pattern="PDF_close"/>
<element pattern="PDF_closepath_fill_stroke"/>
<element pattern="PDF_closepath_stroke"/>
<element pattern="PDF_closepath"/>
<element pattern="PDF_concat"/>
<element pattern="PDF_continue_text"/>
<element pattern="PDF_create_3dview"/>
<element pattern="PDF_create_action"/>
<element pattern="PDF_create_annotation"/>
<element pattern="PDF_create_bookmark"/>
<element pattern="PDF_create_field"/>
<element pattern="PDF_create_fieldgroup"/>
<element pattern="PDF_create_gstate"/>
<element pattern="PDF_create_pvf"/>
<element pattern="PDF_create_textflow"/>
<element pattern="PDF_curveto"/>
<element pattern="PDF_define_layer"/>
<element pattern="PDF_delete_pvf"/>
<element pattern="PDF_delete_table"/>
<element pattern="PDF_delete_textflow"/>
<element pattern="PDF_delete"/>
<element pattern="PDF_encoding_set_char"/>
<element pattern="PDF_end_document"/>
<element pattern="PDF_end_font"/>
<element pattern="PDF_end_glyph"/>
<element pattern="PDF_end_item"/>
<element pattern="PDF_end_layer"/>
<element pattern="PDF_end_page_ext"/>
<element pattern="PDF_end_page"/>
<element pattern="PDF_end_pattern"/>
<element pattern="PDF_end_template"/>
<element pattern="PDF_endpath"/>
<element pattern="PDF_fill_imageblock"/>
<element pattern="PDF_fill_pdfblock"/>
<element pattern="PDF_fill_stroke"/>
<element pattern="PDF_fill_textblock"/>
<element pattern="PDF_fill"/>
<element pattern="PDF_findfont"/>
<element pattern="PDF_fit_image"/>
<element pattern="PDF_fit_pdi_page"/>
<element pattern="PDF_fit_table"/>
<element pattern="PDF_fit_textflow"/>
<element pattern="PDF_fit_textline"/>
<element pattern="PDF_get_apiname"/>
<element pattern="PDF_get_buffer"/>
<element pattern="PDF_get_errmsg"/>
<element pattern="PDF_get_errnum"/>
<element pattern="PDF_get_majorversion"/>
<element pattern="PDF_get_minorversion"/>
<element pattern="PDF_get_parameter"/>
<element pattern="PDF_get_pdi_parameter"/>
<element pattern="PDF_get_pdi_value"/>
<element pattern="PDF_get_value"/>
<element pattern="PDF_info-font"/>
<element pattern="PDF_info_matchbox"/>
<element pattern="PDF_info_table"/>
<element pattern="PDF_info_textflow"/>
<element pattern="PDF_info_textline"/>
<element pattern="PDF_initgraphics"/>
<element pattern="PDF_lineto"/>
<element pattern="PDF_load_3ddata"/>
<element pattern="PDF_load_font"/>
<element pattern="PDF_load_iccprofile"/>
<element pattern="PDF_load_image"/>
<element pattern="PDF_makespotcolor"/>
<element pattern="PDF_moveto"/>
<element pattern="PDF_new"/>
<element pattern="PDF_open_ccitt"/>
<element pattern="PDF_open_file"/>
<element pattern="PDF_open_image_file"/>
<element pattern="PDF_open_image"/>
<element pattern="PDF_open_memory_image"/>
<element pattern="PDF_open_pdi_page"/>
<element pattern="PDF_open_pdi"/>
<element pattern="PDF_pcos_get_number"/>
<element pattern="PDF_pcos_get_stream"/>
<element pattern="PDF_pcos_get_string"/>
<element pattern="PDF_place_image"/>
<element pattern="PDF_place_pdi_page"/>
<element pattern="PDF_process_pdi"/>
<element pattern="PDF_rect"/>
<element pattern="PDF_restore"/>
<element pattern="PDF_resume_page"/>
<element pattern="PDF_rotate"/>
<element pattern="PDF_save"/>
<element pattern="PDF_scale"/>
<element pattern="PDF_set_border_color"/>
<element pattern="PDF_set_border_dash"/>
<element pattern="PDF_set_border_style"/>
<element pattern="PDF_set_gstate"/>
<element pattern="PDF_set_info"/>
<element pattern="PDF_set_layer_dependency"/>
<element pattern="PDF_set_parameter"/>
<element pattern="PDF_set_text_pos"/>
<element pattern="PDF_set_value"/>
<element pattern="PDF_setcolor"/>
<element pattern="PDF_setdash"/>
<element pattern="PDF_setdashpattern"/>
<element pattern="PDF_setflat"/>
<element pattern="PDF_setfont"/>
<element pattern="PDF_setgray_fill"/>
<element pattern="PDF_setgray_stroke"/>
<element pattern="PDF_setgray"/>
<element pattern="PDF_setlinecap"/>
<element pattern="PDF_setlinejoin"/>
<element pattern="PDF_setlinewidth"/>
<element pattern="PDF_setmatrix"/>
<element pattern="PDF_setmiterlimit"/>
<element pattern="PDF_setrgbcolor_fill"/>
<element pattern="PDF_setrgbcolor_stroke"/>
<element pattern="PDF_setrgbcolor"/>
<element pattern="PDF_shading_pattern"/>
<element pattern="PDF_shading"/>
<element pattern="PDF_shfill"/>
<element pattern="PDF_show_boxed"/>
<element pattern="PDF_show_xy"/>
<element pattern="PDF_show"/>
<element pattern="PDF_skew"/>
<element pattern="PDF_stringwidth"/>
<element pattern="PDF_stroke"/>
<element pattern="PDF_suspend_page"/>
<element pattern="PDF_translate"/>
<element pattern="PDF_utf16_to_utf8"/>
<element pattern="PDF_utf32_to_utf16"/>
<element pattern="PDF_utf8_to_utf16"/>
<element pattern="beginTransaction"/>
<element pattern="commit"/>
<element pattern="__construct"/>
<element pattern="errorCode"/>
<element pattern="errorInfo"/>
<element pattern="exec" autocomplete_append="($command, array &amp;$output = null, &amp;$return_var = null);">
<reference>exec($command, array &amp;$output = null, &amp;$return_var = null);
Execute an external program
<b> command string </b>The command that will be executed.
<b> output array[optional] </b>If the output argument is present, then the
specified array will be filled with every line of output from the
command. Trailing whitespace, such as \n, is not
included in this array. Note that if the array already contains some
elements, exec will append to the end of the array.
If you do not want the function to append elements, call
unset on the array before passing it to
exec.
<b> return_var int[optional] </b>If the return_var argument is present
along with the output argument, then the
return status of the executed command will be written to this
variable.
<b>returns</b>  string The last line from the result of the command. If you need to execute a 
command and have all the data from the command passed directly back without 
any interference, use the passthru function.
To get the output of the executed command, be sure to set and use the
output parameter.
</reference></element>
<element pattern="getAttribute"/>
<element pattern="getAvailableDrivers"/>
<element pattern="lastInsertId"/>
<element pattern="prepare"/>
<element pattern="query"/>
<element pattern="query"/>
<element pattern="query"/>
<element pattern="query"/>
<element pattern="quote"/>
<element pattern="rollBack"/>
<element pattern="setAttribute"/>
<element pattern="bindColumn"/>
<element pattern="bindParam"/>
<element pattern="bindValue"/>
<element pattern="closeCursor"/>
<element pattern="columnCount"/>
<element pattern="errorCode"/>
<element pattern="errorInfo"/>
<element pattern="execute"/>
<element pattern="fetch"/>
<element pattern="fetchAll"/>
<element pattern="fetchColumn"/>
<element pattern="fetchObject"/>
<element pattern="getAttribute"/>
<element pattern="getColumnMeta"/>
<element pattern="nextRowset"/>
<element pattern="rowCount"/>
<element pattern="setAttribute"/>
<element pattern="setFetchMode"/>
<element pattern="setFetchMode"/>
<element pattern="setFetchMode"/>
<element pattern="setFetchMode"/>
<element pattern="assert_options" autocomplete_append="($what, $value = null);">
<reference>assert_options($what, $value = null);
Set/get the various assert flags
<b> what int </b>
Assert Options:
ASSERT_ACTIVE
assert.active
Default value: 1
enable assert evaluation
ASSERT_WARNING
assert.warning
Default value: 1
issue a PHP warning for each failed assertion
ASSERT_BAIL
assert.bail
Default value: 0
terminate execution on failed assertions
ASSERT_QUIET_EVAL
assert.quiet_eval
Default value: 0
disable error_reporting during assertion expression
evaluation
ASSERT_CALLBACK
assert.callback
Default value: (null)
user function to call on failed assertions

<b> value mixed[optional] </b>An optional new value for the option.
<b>returns</b>  mixed the original setting of any option or false on errors.
</reference></element>
<element pattern="assert" autocomplete_append="($assertion);">
<reference>assert($assertion);
Checks if assertion is &amp;false;
<b> assertion mixed </b>The assertion.
<b>returns</b>  bool false if the assertion is false, true otherwise.
</reference></element>
<element pattern="dl" autocomplete_append="($library);">
<reference>dl($library);
Loads a PHP extension at runtime
<b> library string </b>This parameter is only the filename of the
extension to load which also depends on your platform. For example,
the sockets extension (if compiled
as a shared module, not the default!) would be called 
sockets.so on Unix platforms whereas it is called
php_sockets.dll on the Windows platform.
The directory where the extension is loaded from depends on your
platform:
Windows - If not explicitly set in the &amp;php.ini;, the extension is
loaded from c:\php4\extensions\ by default.
Unix - If not explicitly set in the &amp;php.ini;, the default extension
directory depends on
whether PHP has been built with --enable-debug
or not
<b>returns</b>  int Returns true on success or false on failure. If the functionality of loading modules is not available
(see Note) or has been disabled (either by turning it off
enable_dl or by enabling &amp;safemode;
in &amp;php.ini;) an E_ERROR is emitted
and execution is stopped. If dl fails because the
specified library couldn't be loaded, in addition to false an
E_WARNING message is emitted.
</reference></element>
<element pattern="extension_loaded" autocomplete_append="($name);">
<reference>extension_loaded($name);
Find out whether an extension is loaded
<b> name string </b>The extension name.
You can see the names of various extensions by using
phpinfo or if you're using the
CGI or CLI version of
PHP you can use the -m switch to
list all available extensions:
<b>returns</b>  bool true if the extension identified by name
is loaded, false otherwise.
</reference></element>
<element pattern="get_cfg_var" autocomplete_append="($option);">
<reference>get_cfg_var($option);
Gets the value of a PHP configuration option
<b> option string </b>The configuration option name.
<b>returns</b>  string the current value of the PHP configuration variable specified by
varname, or false if an error occurs.
</reference></element>
<element pattern="get_current_user" autocomplete_append="();">
<reference>get_current_user();
Gets the name of the owner of the current PHP script
<b>returns</b>  string the username as a string.
</reference></element>
<element pattern="get_defined_constants" autocomplete_append="($categorize = null);">
<reference>get_defined_constants($categorize = null);
Returns an associative array with the names of all the constants and their values
<b> categorize mixed[optional] </b>May be passed, causing this function to return a multi-dimensional
array with categories in the keys of the first dimension and constants
and their values in the second dimension.
]]&gt;
&amp;example.outputs.similar;
Array
(
[E_ERROR] =&gt; 1
[E_WARNING] =&gt; 2
[E_PARSE] =&gt; 4
[E_NOTICE] =&gt; 8
[E_CORE_ERROR] =&gt; 16
[E_CORE_WARNING] =&gt; 32
[E_COMPILE_ERROR] =&gt; 64
[E_COMPILE_WARNING] =&gt; 128
[E_USER_ERROR] =&gt; 256
[E_USER_WARNING] =&gt; 512
[E_USER_NOTICE] =&gt; 1024
[E_ALL] =&gt; 2047
[TRUE] =&gt; 1
)
[pcre] =&gt; Array
(
[PREG_PATTERN_ORDER] =&gt; 1
[PREG_SET_ORDER] =&gt; 2
[PREG_OFFSET_CAPTURE] =&gt; 256
[PREG_SPLIT_NO_EMPTY] =&gt; 1
[PREG_SPLIT_DELIM_CAPTURE] =&gt; 2
[PREG_SPLIT_OFFSET_CAPTURE] =&gt; 4
[PREG_GREP_INVERT] =&gt; 1
)
[user] =&gt; Array
(
[MY_CONSTANT] =&gt; 1
)
)
]]&gt;
The value of the categorize parameter is irrelevant,
only its presence is considered.
<b>returns</b>  array 
</reference></element>
<element pattern="get_extension_funcs" autocomplete_append="($module_name);">
<reference>get_extension_funcs($module_name);
Returns an array with the names of the functions of a module
<b> module_name string </b>The module name.
This parameter must be in lowercase.
<b>returns</b>  array an array with all the functions, or false if 
module_name is not a valid extension.
</reference></element>
<element pattern="get_include_path" autocomplete_append="();">
<reference>get_include_path();
Gets the current include_path configuration option
<b>returns</b>  string the path, as a string.
</reference></element>
<element pattern="get_included_files" autocomplete_append="();">
<reference>get_included_files();
Returns an array with the names of included or required files
<b>returns</b>  array an array of the names of all files.
The script originally called is considered an "included file," so it will
be listed together with the files referenced by 
include and family.
Files that are included or required multiple times only show up once in
the returned array.
</reference></element>
<element pattern="get_loaded_extensions" autocomplete_append="($zend_extensions = null);">
<reference>get_loaded_extensions($zend_extensions = null);
Returns an array with the names of all modules compiled and loaded
<b> zend_extensions bool[optional] </b>Return zend_extensions or not, defaults to false (do not list
zend_extensions).
<b>returns</b>  array an indexed array of all the modules names.
</reference></element>
<element pattern="get_magic_quotes_gpc" autocomplete_append="();">
<reference>get_magic_quotes_gpc();
Gets the current configuration setting of magic quotes gpc
<b>returns</b>  int 0 if magic quotes gpc are off, 1 otherwise.
</reference></element>
<element pattern="get_magic_quotes_runtime" autocomplete_append="();">
<reference>get_magic_quotes_runtime();
Gets the current active configuration setting of magic_quotes_runtime
<b>returns</b>  int 0 if magic quotes runtime is off, 1 otherwise.
</reference></element>
<element pattern="getenv" autocomplete_append="($varname);">
<reference>getenv($varname);
Gets the value of an environment variable
<b> varname string </b>The variable name.
<b>returns</b>  string the value of the environment variable
varname, or false on an error.
</reference></element>
<element pattern="getlastmod" autocomplete_append="();">
<reference>getlastmod();
Gets time of last page modification
<b>returns</b>  int the time of the last modification of the current
page. The value returned is a Unix timestamp, suitable for
feeding to date. Returns false on error.
</reference></element>
<element pattern="getmygid" autocomplete_append="();">
<reference>getmygid();
Get PHP script owner's GID
<b>returns</b>  int the group ID of the current script, or false on error.
</reference></element>
<element pattern="getmyinode" autocomplete_append="();">
<reference>getmyinode();
Gets the inode of the current script
<b>returns</b>  int the current script's inode as an integer, or false on error.
</reference></element>
<element pattern="getmypid" autocomplete_append="();">
<reference>getmypid();
Gets PHP's process ID
<b>returns</b>  int the current PHP process ID, or false on error.
</reference></element>
<element pattern="getmyuid" autocomplete_append="();">
<reference>getmyuid();
Gets PHP script owner's UID
<b>returns</b>  int the user ID of the current script, or false on error.
</reference></element>
<element pattern="getopt" autocomplete_append="($options, array $longopts = null);">
<reference>getopt($options, array $longopts = null);
Gets options from the command line argument list
<b> options string Each character in this string will be used as option characters and</b>matched against options passed to the script starting with a single
hyphen (-).
For example, an option string "x" recognizes an
option -x.
<b> longopts array[optional] An array of options. Each element in this array will be used as option</b>strings and matched against options passed to the script starting with
two hyphens (--).
For example, an longopts element "opt" recognizes an
option --opt.
Prior to PHP5.3.0 this parameter was only available on few systems
<b>returns</b>  array This function will return an array of option / argument pairs or false on
failure.
</reference></element>
<element pattern="getrusage" autocomplete_append="($who = null);">
<reference>getrusage($who = null);
Gets the current resource usages
<b> who int[optional] </b>If who is 1, getrusage will be called with RUSAGE_CHILDREN.
<b>returns</b>  array an associative array containing the data returned from the system
call. All entries are accessible by using their documented field names.
</reference></element>
<element pattern="ini_get_all" autocomplete_append="($extension = null, $details = null);">
<reference>ini_get_all($extension = null, $details = null);
Gets all configuration options
<b> extension string[optional] </b>An optional extension name. If set, the function return only options
specific for that extension.
<b> details bool[optional] </b>Retrieve details settings or only the current value for each setting.
Default is true (retrieve details).
<b>returns</b>  array an associative array with directive name as the array key.
When details is true (default) the array will
contain global_value (set in
&amp;php.ini;), local_value (perhaps set with
ini_set or &amp;htaccess;), and
access (the access level).
When details is false the value will be the
current value of the option.
See the manual section
for information on what access levels mean.
It's possible for a directive to have multiple access levels, which is
why access shows the appropriate bitmask values.
</reference></element>
<element pattern="ini_get" autocomplete_append="($varname);">
<reference>ini_get($varname);
Gets the value of a configuration option
<b> varname string </b>The configuration option name.
<b>returns</b>  string the value of the configuration option as a string on success, or
an empty string on failure or for null values.
</reference></element>
<element pattern="ini_restore" autocomplete_append="($varname);">
<reference>ini_restore($varname);
Restores the value of a configuration option
<b> varname string </b>The configuration option name.
<b>returns</b>  void 
</reference></element>
<element pattern="ini_set" autocomplete_append="($varname, $newvalue);">
<reference>ini_set($varname, $newvalue);
Sets the value of a configuration option
<b> varname string </b>Not all the available options can be changed using
ini_set. There is a list of all available options
in the appendix.
<b> newvalue string </b>The new value for the option.
<b>returns</b>  string the old value on success, false on failure.
</reference></element>
<element pattern="memory_get_peak_usage" autocomplete_append="($real_usage = null);">
<reference>memory_get_peak_usage($real_usage = null);
Returns the peak of memory allocated by PHP
<b> real_usage bool[optional] </b>Set this to true to get the real size of memory allocated from
system. If not set or false only the memory used by
emalloc() is reported.
<b>returns</b>  int the memory peak in bytes.
</reference></element>
<element pattern="memory_get_usage" autocomplete_append="($real_usage = null);">
<reference>memory_get_usage($real_usage = null);
Returns the amount of memory allocated to PHP
<b> real_usage bool[optional] </b>Set this to true to get the real size of memory allocated from
system. If not set or false only the memory used by
emalloc() is reported.
<b>returns</b>  int the memory amount in bytes.
</reference></element>
<element pattern="php_ini_scanned_files" autocomplete_append="();">
<reference>php_ini_scanned_files();
Return a list of .ini files parsed from the additional ini dir
<b>returns</b>  string a comma-separated string of .ini files on success. Each comma is
followed by a newline. If the directive --with-config-file-scan-dir wasn't set,
false is returned. If it was set and the directory was empty, an
empty string is returned. If a file is unrecognizable, the file will
still make it into the returned string but a PHP error will also result.
This PHP error will be seen both at compile time and while using
php_ini_scanned_files.
</reference></element>
<element pattern="php_logo_guid" autocomplete_append="();">
<reference>php_logo_guid();
Gets the logo guid
<b>returns</b>  string PHPE9568F34-D428-11d2-A769-00AA001ACF42.
</reference></element>
<element pattern="php_sapi_name" autocomplete_append="();">
<reference>php_sapi_name();
Returns the type of interface between web server and PHP
<b>returns</b>  string the interface type, as a lowercase string.
</reference></element>
<element pattern="php_uname" autocomplete_append="($mode = null);">
<reference>php_uname($mode = null);
Returns information about the operating system PHP is running on
<b> mode string[optional] </b>mode is a single character that defines what
information is returned:
'a': This is the default. Contains all modes in
the sequence "s n r v m".
<b>returns</b>  string the description, as a string.
</reference></element>
<element pattern="phpcredits" autocomplete_append="($flag = null);">
<reference>phpcredits($flag = null);
Prints out the credits for PHP
<b> flag int[optional] </b>To generate a custom credits page, you may want to use the
flag parameter. flag is
optional, and it defaults to CREDITS_ALL.

Pre-defined phpcredits flags

CREDITS_ALL
All the credits, equivalent to using: CREDITS_DOCS +
CREDITS_GENERAL + CREDITS_GROUP + CREDITS_MODULES +
CREDITS_FULLPAGE. It generates a complete stand-alone HTML
page with the appropriate tags.
CREDITS_DOCS
The credits for the documentation team
CREDITS_FULLPAGE
Usually used in combination with the other flags. Indicates
that a complete stand-alone HTML page needs to be
printed including the information indicated by the other
flags.
CREDITS_GENERAL
General credits: Language design and concept, PHP 4.0
authors and SAPI module.
CREDITS_GROUP
A list of the core developers
CREDITS_MODULES
A list of the extension modules for PHP, and their authors
CREDITS_SAPI
A list of the server API modules for PHP, and their authors

<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="phpinfo" autocomplete_append="($what = null);">
<reference>phpinfo($what = null);
Outputs lots of PHP information
<b> what int[optional] </b>The output may be customized by passing one or more of the
following constants bitwise values summed
together in the optional what parameter.
One can also combine the respective constants or bitwise values
together with the or operator.

phpinfo options

INFO_GENERAL
Value: 1
The configuration line, &amp;php.ini; location, build date, Web
Server, System and more.
INFO_CREDITS
Value: 2
PHP Credits. See also phpcredits.
INFO_CONFIGURATION
Value: 4
Current Local and Master values for PHP directives. See
also ini_get.
INFO_MODULES
Value: 8
Loaded modules and their respective settings. See also
get_loaded_extensions.
INFO_ENVIRONMENT
Value: 16
Environment Variable information that's also available in
$_ENV.
INFO_VARIABLES
Value: 32
Shows all predefined variables from EGPCS (Environment, GET,
POST, Cookie, Server).
INFO_LICENSE
Value: 64
PHP License information. See also the license FAQ.
INFO_ALL
Value: -1
Shows all of the above. This is the default value.

<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="phpversion" autocomplete_append="($extension = null);">
<reference>phpversion($extension = null);
Gets the current PHP version
<b> extension string[optional] </b>An optional extension name.
<b>returns</b>  string If the optional extension parameter is
specified, phpversion returns the version of that
extension, or false if there is no version information associated or
the extension isn't enabled.
</reference></element>
<element pattern="putenv" autocomplete_append="($setting);">
<reference>putenv($setting);
Sets the value of an environment variable
<b> setting string </b>The setting, like "FOO=BAR"
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="restore_include_path" autocomplete_append="();">
<reference>restore_include_path();
Restores the value of the include_path configuration option
<b>returns</b>  void 
</reference></element>
<element pattern="set_include_path" autocomplete_append="($new_include_path);">
<reference>set_include_path($new_include_path);
Sets the include_path configuration option
<b> new_include_path string </b>The new value for the include_path
<b>returns</b>  string the old include_path on
success or false on failure.
</reference></element>
<element pattern="set_magic_quotes_runtime" autocomplete_append="($new_setting);">
<reference>set_magic_quotes_runtime($new_setting);
Sets the current active configuration setting of magic_quotes_runtime
<b> new_setting int </b>0 for off, 1 for on.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="set_time_limit" autocomplete_append="($seconds);">
<reference>set_time_limit($seconds);
Limits the maximum execution time
<b> seconds int </b>The maximum execution time, in seconds. If set to zero, no time limit
is imposed.
<b>returns</b>  void 
</reference></element>
<element pattern="sys_get_temp_dir" autocomplete_append="();">
<reference>sys_get_temp_dir();
Returns directory path used for temporary files
<b>returns</b>  string the path of the temporary directory.
</reference></element>
<element pattern="version_compare" autocomplete_append="($version1, $version2, $operator = null);">
<reference>version_compare($version1, $version2, $operator = null);
Compares two "PHP-standardized" version number strings
<b> version1 string </b>First version number.
<b> version2 string </b>Second version number.
<b> operator string[optional] </b>If you specify the third optional operator
argument, you can test for a particular relationship. The
possible operators are: &amp;lt;,
lt, &amp;lt;=,
le, &amp;gt;,
gt, &amp;gt;=,
ge, ==,
=, eq,
!=, &amp;lt;&amp;gt;,
ne respectively. 
This parameter is case-sensitive, so values should be lowercase.
<b>returns</b>  mixed By default, version_compare returns
-1 if the first version is lower than the second, 
0 if they are equal, and
1 if the second is lower. 
When using the optional operator argument, the
function will return true if the relationship is the one specified
by the operator, false otherwise.
</reference></element>
<element pattern="zend_logo_guid" autocomplete_append="();">
<reference>zend_logo_guid();
Gets the Zend guid
<b>returns</b>  string PHPE9568F35-D428-11d2-A769-00AA001ACF42.
</reference></element>
<element pattern="zend_version" autocomplete_append="();">
<reference>zend_version();
Gets the version of the current Zend engine
<b>returns</b>  string the Zend Engine version number, as a string.
</reference></element>
<element pattern="posix_access" autocomplete_append="($file, $mode = null);">
<reference>posix_access($file, $mode = null);
Determine accessibility of a file
<b> file string </b>The name of the file to be tested.
<b> mode int[optional] </b>A mask consisting of one or more of POSIX_F_OK,
POSIX_R_OK, POSIX_W_OK and
POSIX_X_OK. Defaults to
POSIX_F_OK.
POSIX_R_OK, POSIX_W_OK and
POSIX_X_OK request checking whether the file
exists and has read, write and execute permissions, respectively.
POSIX_F_OK just requests checking for the
existence of the file.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_ctermid" autocomplete_append="();">
<reference>posix_ctermid();
Get path name of controlling terminal
<b>returns</b>  string Upon successful completion, returns string of the pathname to 
the current controlling terminal. Otherwise false is returned and errno
is set, which can be checked with posix_get_last_error.
</reference></element>
<element pattern="posix_get_last_error" autocomplete_append="();">
<reference>posix_get_last_error();
Retrieve the error number set by the last posix function that failed
<b>returns</b>  int the errno (error number) set by the last posix function that
failed. If no errors exist, 0 is returned.
</reference></element>
<element pattern="posix_getcwd" autocomplete_append="();">
<reference>posix_getcwd();
Pathname of current directory
<b>returns</b>  string a string of the absolute pathname on success. 
On error, returns false and sets errno which can be checked with
posix_get_last_error.
</reference></element>
<element pattern="posix_getegid" autocomplete_append="();">
<reference>posix_getegid();
Return the effective group ID of the current process
<b>returns</b>  int an integer of the effective group ID.
</reference></element>
<element pattern="posix_geteuid" autocomplete_append="();">
<reference>posix_geteuid();
Return the effective user ID of the current process
<b>returns</b>  int the user id, as an integer
</reference></element>
<element pattern="posix_getgid" autocomplete_append="();">
<reference>posix_getgid();
Return the real group ID of the current process
<b>returns</b>  int the real group id, as an integer.
</reference></element>
<element pattern="posix_getgrgid" autocomplete_append="($gid);">
<reference>posix_getgrgid($gid);
Return info about a group by group id
<b> gid int </b>The group id.
<b>returns</b>  array

The array elements returned are:

name
The name element contains the name of the group. This is
a short, usually less than 16 character "handle" of the
group, not the real, full name.

passwd
The passwd element contains the group's password in an
encrypted format. Often, for example on a system employing
"shadow" passwords, an asterisk is returned instead.

gid
Group ID, should be the same as the
gid parameter used when calling the
function, and hence redundant.

members
This consists of an array of
string's for all the members in the group.

</reference></element>
<element pattern="posix_getgrnam" autocomplete_append="($name);">
<reference>posix_getgrnam($name);
Return info about a group by name
<b> name string The name of the group</b><b>returns</b>  array

The array elements returned are:

name
The name element contains the name of the group. This is
a short, usually less than 16 character "handle" of the
group, not the real, full name. This should be the same as
the name parameter used when
calling the function, and hence redundant.
passwd
The passwd element contains the group's password in an
encrypted format. Often, for example on a system employing
"shadow" passwords, an asterisk is returned instead.
gid
Group ID of the group in numeric form.
members
This consists of an array of
string's for all the members in the group.

</reference></element>
<element pattern="posix_getgroups" autocomplete_append="();">
<reference>posix_getgroups();
Return the group set of the current process
<b>returns</b>  array an array of integers containing the numeric group ids of the group
set of the current process.
</reference></element>
<element pattern="posix_getlogin" autocomplete_append="();">
<reference>posix_getlogin();
Return login name
<b>returns</b>  string the login name of the user, as a string.
</reference></element>
<element pattern="posix_getpgid" autocomplete_append="($pid);">
<reference>posix_getpgid($pid);
Get process group id for job control
<b> pid int </b>The process id.
<b>returns</b>  int the identifier, as an integer.
</reference></element>
<element pattern="posix_getpgrp" autocomplete_append="();">
<reference>posix_getpgrp();
Return the current process group identifier
<b>returns</b>  int the identifier, as an integer.
</reference></element>
<element pattern="posix_getpid" autocomplete_append="();">
<reference>posix_getpid();
Return the current process identifier
<b>returns</b>  int the identifier, as an integer.
</reference></element>
<element pattern="posix_getppid" autocomplete_append="();">
<reference>posix_getppid();
Return the parent process identifier
<b>returns</b>  int the identifier, as an integer.
</reference></element>
<element pattern="posix_getpwnam" autocomplete_append="($username);">
<reference>posix_getpwnam($username);
Return info about a user by username
<b> username string </b>An alphanumeric username.
<b>returns</b>  array

The array elements returned are:

name
The name element contains the username of the user. This is
a short, usually less than 16 character "handle" of the
user, not the real, full name. This should be the same as
the username parameter used when
calling the function, and hence redundant.

passwd
The passwd element contains the user's password in an
encrypted format. Often, for example on a system employing
"shadow" passwords, an asterisk is returned instead.

uid
User ID of the user in numeric form.

gid
The group ID of the user. Use the function
posix_getgrgid to resolve the group
name and a list of its members.

gecos
GECOS is an obsolete term that refers to the finger
information field on a Honeywell batch processing system.
The field, however, lives on, and its contents have been
formalized by POSIX. The field contains a comma separated
list containing the user's full name, office phone, office
number, and home phone number. On most systems, only the
user's full name is available.

dir
This element contains the absolute path to the home
directory of the user.

shell
The shell element contains the absolute path to the
executable of the user's default shell.
</reference></element>
<element pattern="posix_getpwuid" autocomplete_append="($uid);">
<reference>posix_getpwuid($uid);
Return info about a user by user id
<b> uid int </b>The user identifier.
<b>returns</b>  array 
an associative array with the following elements:

name
The name element contains the username of the user. This is
a short, usually less than 16 character "handle" of the
user, not the real, full name.

passwd
The passwd element contains the user's password in an
encrypted format. Often, for example on a system employing
"shadow" passwords, an asterisk is returned instead.

uid
User ID, should be the same as the
uid parameter used when calling the
function, and hence redundant.

gid
The group ID of the user. Use the function
posix_getgrgid to resolve the group
name and a list of its members.

gecos
GECOS is an obsolete term that refers to the finger
information field on a Honeywell batch processing system.
The field, however, lives on, and its contents have been
formalized by POSIX. The field contains a comma separated
list containing the user's full name, office phone, office
number, and home phone number. On most systems, only the
user's full name is available.

dir
This element contains the absolute path to the
home directory of the user.

shell
The shell element contains the absolute path to the
executable of the user's default shell.
</reference></element>
<element pattern="posix_getrlimit" autocomplete_append="();">
<reference>posix_getrlimit();
Return info about system resource limits
<b>returns</b>  array an associative array of elements for each
limit that is defined. Each limit has a soft and a hard limit.

List of possible limits returned:

core
The maximum size of the core file. When 0, not core files are
created. When core files are larger than this size, they will
be truncated at this size.

totalmem
The maximum size of the memory of the process, in bytes.

virtualmem
The maximum size of the virtual memory for the process, in bytes.

data
The maximum size of the data segment for the process, in bytes.

stack
The maximum size of the process stack, in bytes.

rss
The maximum number of virtual pages resident in RAM

maxproc
The maximum number of processes that can be created for the
real user ID of the calling process.

memlock
The maximum number of bytes of memory that may be locked into RAM.

cpu
The amount of time the process is allowed to use the CPU.

filesize
The maximum size of the data segment for the process, in bytes.

openfiles
One more than the maximum number of open file descriptors.
</reference></element>
<element pattern="posix_getsid" autocomplete_append="($pid);">
<reference>posix_getsid($pid);
Get the current sid of the process
<b> pid int </b>The process identifier. If set to 0, the current process is
assumed. If an invalid pid is
specified, then false is returned and an error is set which
can be checked with posix_get_last_error.
<b>returns</b>  int the identifier, as an integer.
</reference></element>
<element pattern="posix_getuid" autocomplete_append="();">
<reference>posix_getuid();
Return the real user ID of the current process
<b>returns</b>  int the user id, as an integer
</reference></element>
<element pattern="posix_initgroups" autocomplete_append="($name, $base_group_id);">
<reference>posix_initgroups($name, $base_group_id);
Calculate the group access list
<b> name string </b>The user to calculate the list for.
<b> base_group_id int </b>Typically the group number from the password file.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_isatty" autocomplete_append="($fd);">
<reference>posix_isatty($fd);
Determine if a file descriptor is an interactive terminal
<b> fd int </b>The file descriptor.
<b>returns</b>  bool true if fd is an open descriptor connected
to a terminal and false otherwise.
</reference></element>
<element pattern="posix_kill" autocomplete_append="($pid, $sig);">
<reference>posix_kill($pid, $sig);
Send a signal to a process
<b> pid int </b>The process identifier.
<b> sig int </b>One of the PCNTL signals constants.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_mkfifo" autocomplete_append="($pathname, $mode);">
<reference>posix_mkfifo($pathname, $mode);
Create a fifo special file (a named pipe)
<b> pathname string </b>Path to the FIFO file.
<b> mode int </b>The second parameter mode has to be given in
octal notation (e.g. 0644). The permission of the newly created
FIFO also depends on the setting of the current
umask. The permissions of the created file are
(mode &amp;amp; ~umask).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_mknod" autocomplete_append="($pathname, $mode, $major = null, $minor = null);">
<reference>posix_mknod($pathname, $mode, $major = null, $minor = null);
Create a special or ordinary file (POSIX.1)
<b> pathname string </b>The file to create
<b> mode int </b>This parameter is constructed by a bitwise OR between file type (one of
the following constants: POSIX_S_IFREG,
POSIX_S_IFCHR, POSIX_S_IFBLK,
POSIX_S_IFIFO or
POSIX_S_IFSOCK) and permissions.
<b> major int[optional] </b>The major device kernel identifier (required to pass when using
S_IFCHR or S_IFBLK).
<b> minor int[optional] </b>The minor device kernel identifier (defaults to 0).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_setegid" autocomplete_append="($gid);">
<reference>posix_setegid($gid);
Set the effective GID of the current process
<b> gid int </b>The group id.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_seteuid" autocomplete_append="($uid);">
<reference>posix_seteuid($uid);
Set the effective UID of the current process
<b> uid int </b>The user id.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_setgid" autocomplete_append="($gid);">
<reference>posix_setgid($gid);
Set the GID of the current process
<b> gid int </b>The group id.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_setpgid" autocomplete_append="($pid, $pgid);">
<reference>posix_setpgid($pid, $pgid);
Set process group id for job control
<b> pid int </b>The process id.
<b> pgid int </b>The process group id.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_setsid" autocomplete_append="();">
<reference>posix_setsid();
Make the current process a session leader
<b>returns</b>  int the session id, or -1 on errors.
</reference></element>
<element pattern="posix_setuid" autocomplete_append="($uid);">
<reference>posix_setuid($uid);
Set the UID of the current process
<b> uid int </b>The user id.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="posix_strerror" autocomplete_append="($errno);">
<reference>posix_strerror($errno);
Retrieve the system error message associated with the given errno
<b> errno int </b>A POSIX error number, returned by 
posix_get_last_error. If set to 0, then the
string "Success" is returned.
<b>returns</b>  string the error message, as a string.
</reference></element>
<element pattern="posix_times" autocomplete_append="();">
<reference>posix_times();
Get process times
<b>returns</b>  array a hash of strings with information about the current
process CPU usage. The indices of the hash are:
ticks - the number of clock ticks that have elapsed since
reboot.
utime - user time used by the current process.
stime - system time used by the current process.
cutime - user time used by current process and children.
cstime - system time used by current process and children.
</reference></element>
<element pattern="posix_ttyname" autocomplete_append="($fd);">
<reference>posix_ttyname($fd);
Determine terminal device name
<b> fd int </b>The file descriptor.
<b>returns</b>  string On success, returns a string of the absolute path of the
fd. On failure, returns false
</reference></element>
<element pattern="posix_uname" autocomplete_append="();">
<reference>posix_uname();
Get system name
<b>returns</b>  array a hash of strings with information about the
system. The indices of the hash are
sysname - operating system name (e.g. Linux)
nodename - system name (e.g. valiant)
release - operating system release (e.g. 2.2.10)
version - operating system version (e.g. #4 Tue Jul 20
17:01:36 MEST 1999)
machine - system architecture (e.g. i586)
domainname - DNS domainname (e.g. example.com)
domainname is a GNU extension and not part of POSIX.1, so this
field is only available on GNU systems or when using the GNU
libc.
</reference></element>
<element pattern="ereg_replace" autocomplete_append="($pattern, $replacement, $string);">
<reference>ereg_replace($pattern, $replacement, $string);
Replace regular expression
<b> pattern string </b>A POSIX extended regular expression.
<b> replacement string </b>If pattern contains parenthesized substrings,
replacement may contain substrings of the form
\\digit, which will be
replaced by the text matching the digit'th parenthesized substring; 
\\0 will produce the entire contents of string.
Up to nine substrings may be used. Parentheses may be nested, in which
case they are counted by the opening parenthesis.
<b> string string </b>The input string.
<b>returns</b>  string The modified string is returned. If no matches are found in 
string, then it will be returned unchanged.
</reference></element>
<element pattern="ereg" autocomplete_append="($pattern, $string, array &amp;$regs = null);">
<reference>ereg($pattern, $string, array &amp;$regs = null);
Regular expression match
<b> pattern string </b>Case sensitive regular expression.
<b> string string </b>The input string.
<b> regs array[optional] </b>If matches are found for parenthesized substrings of
pattern and the function is called with the
third argument regs, the matches will be stored
in the elements of the array regs. 
$regs[1] will contain the substring which starts at the first left
parenthesis; $regs[2] will contain the substring starting at the
second, and so on. $regs[0] will contain a copy of the complete string
matched.
<b>returns</b>  int the length of the matched string if a match for
pattern was found in string,
or false if no matches were found or an error occurred.
If the optional parameter regs was not passed or
the length of the matched string is 0, this function returns 1.
</reference></element>
<element pattern="eregi_replace" autocomplete_append="($pattern, $replacement, $string);">
<reference>eregi_replace($pattern, $replacement, $string);
Replace regular expression case insensitive
<b> pattern string </b>A POSIX extended regular expression.
<b> replacement string </b>If pattern contains parenthesized substrings,
replacement may contain substrings of the form
\\digit, which will be
replaced by the text matching the digit'th parenthesized substring; 
\\0 will produce the entire contents of string.
Up to nine substrings may be used. Parentheses may be nested, in which
case they are counted by the opening parenthesis.
<b> string string </b>The input string.
<b>returns</b>  string The modified string is returned. If no matches are found in 
string, then it will be returned unchanged.
</reference></element>
<element pattern="eregi" autocomplete_append="($pattern, $string, array &amp;$regs = null);">
<reference>eregi($pattern, $string, array &amp;$regs = null);
Case insensitive regular expression match
<b> pattern string </b>Case insensitive regular expression.
<b> string string </b>The input string.
<b> regs array[optional] </b>If matches are found for parenthesized substrings of
pattern and the function is called with the
third argument regs, the matches will be stored
in the elements of the array regs. 
$regs[1] will contain the substring which starts at the first left
parenthesis; $regs[2] will contain the substring starting at the
second, and so on. $regs[0] will contain a copy of the complete string
matched.
<b>returns</b>  int the length of the matched string if a match for
pattern was found in string,
or false if no matches were found or an error occurred.
If the optional parameter regs was not passed or
the length of the matched string is 0, this function returns 1.
</reference></element>
<element pattern="split" autocomplete_append="($pattern, $string, $limit = null);">
<reference>split($pattern, $string, $limit = null);
Split string into array by regular expression
<b> pattern string </b>Case sensitive regular expression.
If you want to split on any of the characters which are considered
special by regular expressions, you'll need to escape them first. If
you think split (or any other regex function, for
that matter) is doing something weird, please read the file
regex.7, included in the 
regex/ subdirectory of the PHP distribution. It's
in manpage format, so you'll want to do something along the lines of
man /usr/local/src/regex/regex.7 in order to read it.
<b> string string </b>The input string.
<b> limit int[optional] </b>If limit is set, the returned array will
contain a maximum of limit elements with the
last element containing the whole rest of
string.
<b>returns</b>  array an array of strings, each of which is a substring of
string formed by splitting it on boundaries formed
by the case-sensitive regular expression pattern.
If there are n occurrences of
pattern, the returned array will contain
n+1 items. For example, if
there is no occurrence of pattern, an array with
only one element will be returned. Of course, this is also true if
string is empty. If an error occurs,
split returns false.
</reference></element>
<element pattern="spliti" autocomplete_append="($pattern, $string, $limit = null);">
<reference>spliti($pattern, $string, $limit = null);
Split string into array by regular expression case insensitive
<b> pattern string </b>Case insensitive regular expression.
If you want to split on any of the characters which are considered
special by regular expressions, you'll need to escape them first. If
you think spliti (or any other regex function, for
that matter) is doing something weird, please read the file
regex.7, included in the 
regex/ subdirectory of the PHP distribution. It's
in manpage format, so you'll want to do something along the lines of
man /usr/local/src/regex/regex.7 in order to read it.
<b> string string </b>The input string.
<b> limit int[optional] </b>If limit is set, the returned array will
contain a maximum of limit elements with the
last element containing the whole rest of
string.
<b>returns</b>  array an array of strings, each of which is a substring of
string formed by splitting it on boundaries formed
by the case insensitive regular expression pattern.
If there are n occurrences of
pattern, the returned array will contain
n+1 items. For example, if
there is no occurrence of pattern, an array with
only one element will be returned. Of course, this is also true if
string is empty. If an error occurs,
spliti returns false.
</reference></element>
<element pattern="sql_regcase" autocomplete_append="($string);">
<reference>sql_regcase($string);
Make regular expression for case insensitive match
<b> string string </b>The input string.
<b>returns</b>  string a valid regular expression which will match
string, ignoring case. This expression is
string with each alphabetic character converted to
a bracket expression; this bracket expression contains that character's
uppercase and lowercase form. Other characters remain unchanged.
</reference></element>
<element pattern="pg_affected_rows" autocomplete_append="($result);">
<reference>pg_affected_rows($result);
Returns number of affected records (tuples)
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b>returns</b>  int The number of rows affected by the query. If no tuple is
affected, it will return 0.
</reference></element>
<element pattern="pg_cancel_query" autocomplete_append="($connection);">
<reference>pg_cancel_query($connection);
Cancel an asynchronous query
<b> connection resource </b>PostgreSQL database connection resource.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_client_encoding" autocomplete_append="($connection = null);">
<reference>pg_client_encoding($connection = null);
Gets the client encoding
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  string The client encoding, or false on error.
</reference></element>
<element pattern="pg_close" autocomplete_append="($connection = null);">
<reference>pg_close($connection = null);
Closes a PostgreSQL connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_connect" autocomplete_append="($connection_string, $connect_type = null);">
<reference>pg_connect($connection_string, $connect_type = null);
Open a PostgreSQL connection
<b> connection_string string </b>The connection_string can be empty to use all default parameters, or it 
can contain one or more parameter settings separated by whitespace. 
Each parameter setting is in the form keyword = value. Spaces around 
the equal sign are optional. To write an empty value or a value 
containing spaces, surround it with single quotes, e.g., keyword = 
'a value'. Single quotes and backslashes within the value must be 
escaped with a backslash, i.e., \' and \\. 
The currently recognized parameter keywords are:
host, hostaddr, port,
dbname, user,
password, connect_timeout,
options, tty (ignored), sslmode,
requiressl (deprecated in favor of sslmode), and
service. Which of these arguments exist depends
on your PostgreSQL version.
<b> connect_type int[optional] </b>If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection
is created, even if the connection_string is identical to
an existing connection.
<b>returns</b>  resource PostgreSQL connection resource on success, false on failure.
</reference></element>
<element pattern="pg_connection_busy" autocomplete_append="($connection);">
<reference>pg_connection_busy($connection);
Get connection is busy or not
<b> connection resource </b>PostgreSQL database connection resource.
<b>returns</b>  bool true if the connection is busy, false otherwise.
</reference></element>
<element pattern="pg_connection_reset" autocomplete_append="($connection);">
<reference>pg_connection_reset($connection);
Reset connection (reconnect)
<b> connection resource </b>PostgreSQL database connection resource.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_connection_status" autocomplete_append="($connection);">
<reference>pg_connection_status($connection);
Get connection status
<b> connection resource </b>PostgreSQL database connection resource.
<b>returns</b>  int PGSQL_CONNECTION_OK or 
PGSQL_CONNECTION_BAD.
</reference></element>
<element pattern="pg_convert" autocomplete_append="($connection, $table_name, array $assoc_array, $options = null);">
<reference>pg_convert($connection, $table_name, array $assoc_array, $options = null);
Convert associative array values into suitable for SQL statement
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>Name of the table against which to convert types.
<b> assoc_array array </b>Data to be converted.
<b> options int[optional] </b>Any number of PGSQL_CONV_IGNORE_DEFAULT, 
PGSQL_CONV_FORCE_NULL or
PGSQL_CONV_IGNORE_NOT_NULL, combined.
<b>returns</b>  array An array of converted values, or false on error.
</reference></element>
<element pattern="pg_copy_from" autocomplete_append="($connection, $table_name, array $rows, $delimiter = null, $null_as = null);">
<reference>pg_copy_from($connection, $table_name, array $rows, $delimiter = null, $null_as = null);
Insert records into a table from an array
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>Name of the table into which to copy the rows.
<b> rows array </b>An array of data to be copied into table_name.
Each value in rows becomes a row in table_name.
Each value in rows should be a delimited string of the values
to insert into each field. Values should be linefeed terminated.
<b> delimiter string[optional] </b>The token that separates values for each field in each element of
rows. Default is TAB.
<b> null_as string[optional] </b>How SQL NULL values are represented in the
rows. Default is \N ("\\N").
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_copy_to" autocomplete_append="($connection, $table_name, $delimiter = null, $null_as = null);">
<reference>pg_copy_to($connection, $table_name, $delimiter = null, $null_as = null);
Copy a table to an array
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>Name of the table from which to copy the data into rows.
<b> delimiter string[optional] </b>The token that separates values for each field in each element of
rows. Default is TAB.
<b> null_as string[optional] </b>How SQL NULL values are represented in the
rows. Default is \N ("\\N").
<b>returns</b>  array An array with one element for each line of COPY data.
It returns false on failure.
</reference></element>
<element pattern="pg_dbname" autocomplete_append="($connection = null);">
<reference>pg_dbname($connection = null);
Get the database name
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  string A string containing the name of the database the 
connection is to, or false on error.
</reference></element>
<element pattern="pg_delete" autocomplete_append="($connection, $table_name, array $assoc_array, $options = null);">
<reference>pg_delete($connection, $table_name, array $assoc_array, $options = null);
Deletes records
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>Name of the table from which to delete rows.
<b> assoc_array array </b>An array whose keys are field names in the table table_name,
and whose values are the values of those fields that are to be deleted.
<b> options int[optional] </b>Any number of PGSQL_CONV_FORCE_NULL, 
PGSQL_DML_NO_CONV,
PGSQL_DML_EXEC or
PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the
options then query string is returned.
<b>returns</b>  mixed Returns true on success or false on failure. Returns string if PGSQL_DML_STRING is passed
via options.
</reference></element>
<element pattern="pg_end_copy" autocomplete_append="($connection = null);">
<reference>pg_end_copy($connection = null);
Sync with PostgreSQL backend
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_escape_bytea" autocomplete_append="($connection = null, $data);">
<reference>pg_escape_bytea($connection = null, $data);
Escape a string for insertion into a bytea field
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> data string </b>A string containing text or binary data to be inserted into a bytea
column.
<b>returns</b>  string A string containing the escaped data.
</reference></element>
<element pattern="pg_escape_string" autocomplete_append="($connection = null, $data);">
<reference>pg_escape_string($connection = null, $data);
Escape a string for insertion into a text field
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> data string </b>A string containing text to be escaped.
<b>returns</b>  string A string containing the escaped data.
</reference></element>
<element pattern="pg_execute" autocomplete_append="($connection, $stmtname, array $params);">
<reference>pg_execute($connection, $stmtname, array $params);
Sends a request to execute a prepared statement with given parameters, and waits for the result.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> stmtname string </b>The name of the prepared statement to execute. if
"" is specified, then the unnamed statement is executed. The name must have
been previously prepared using pg_prepare, 
pg_send_prepare or a PREPARE SQL
command.
<b> params array </b>An array of parameter values to substitute for the $1, $2, etc. placeholders
in the original prepared query string. The number of elements in the array
must match the number of placeholders.
Elements are converted to strings by calling this function.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_execute" autocomplete_append="($connection, $stmtname, array $params);">
<reference>pg_execute($connection, $stmtname, array $params);
Sends a request to execute a prepared statement with given parameters, and waits for the result.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> stmtname string </b>The name of the prepared statement to execute. if
"" is specified, then the unnamed statement is executed. The name must have
been previously prepared using pg_prepare, 
pg_send_prepare or a PREPARE SQL
command.
<b> params array </b>An array of parameter values to substitute for the $1, $2, etc. placeholders
in the original prepared query string. The number of elements in the array
must match the number of placeholders.
Elements are converted to strings by calling this function.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_fetch_all_columns" autocomplete_append="($result, $column = null);">
<reference>pg_fetch_all_columns($result, $column = null);
Fetches all rows in a particular result column as an array
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> column int[optional] </b>Column number, zero-based, to be retrieved from the result resource. Defaults
to the first column if not specified.
<b>returns</b>  array An array with all values in the result column.
false is returned if column is larger than the number 
of columns in the result, or on any other error.
</reference></element>
<element pattern="pg_fetch_all" autocomplete_append="($result);">
<reference>pg_fetch_all($result);
Fetches all rows from a result as an array
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b>returns</b>  array An array with all rows in the result. Each row is an array
of field values indexed by field name.
false is returned if there are no rows in the result, or on any
other error.
</reference></element>
<element pattern="pg_fetch_array" autocomplete_append="($result, $row = null, $result_type = null);">
<reference>pg_fetch_array($result, $row = null, $result_type = null);
Fetch a row as an array
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int[optional] </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
next row is fetched.
<b> result_type int[optional] </b>An optional parameter that controls
how the returned array is indexed.
result_type is a constant and can take the
following values: PGSQL_ASSOC, 
PGSQL_NUM and PGSQL_BOTH.
Using PGSQL_NUM, pg_fetch_array
will return an array with numerical indices, using
PGSQL_ASSOC it will return only associative indices
while PGSQL_BOTH, the default, will return both
numerical and associative indices.
<b>returns</b>  array An array indexed numerically (beginning with 0) or
associatively (indexed by field name), or both.
Each value in the array is represented as a 
string. Database NULL
values are returned as &amp;null;.
false is returned if row exceeds the number
of rows in the set, there are no more rows, or on any other error.
</reference></element>
<element pattern="pg_fetch_assoc" autocomplete_append="($result, $row = null);">
<reference>pg_fetch_assoc($result, $row = null);
Fetch a row as an associative array
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int[optional] </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
next row is fetched.
<b>returns</b>  array An array indexed associatively (by field name).
Each value in the array is represented as a 
string. Database NULL
values are returned as &amp;null;.
false is returned if row exceeds the number
of rows in the set, there are no more rows, or on any other error.
</reference></element>
<element pattern="pg_fetch_object" autocomplete_append="($result, $row = null, $result_type = null);">
<reference>pg_fetch_object($result, $row = null, $result_type = null);
Fetch a row as an object
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int[optional] </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
next row is fetched.
<b> result_type int[optional] </b>Ignored and deprecated. Defaults to PGSQL_ASSOC.
<b>returns</b>  object An object with one attribute for each field
name in the result. Database NULL
values are returned as &amp;null;.
false is returned if row exceeds the number
of rows in the set, there are no more rows, or on any other error.
</reference></element>
<element pattern="pg_fetch_object" autocomplete_append="($result, $row = null, $result_type = null);">
<reference>pg_fetch_object($result, $row = null, $result_type = null);
Fetch a row as an object
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int[optional] </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
next row is fetched.
<b> result_type int[optional] </b>Ignored and deprecated. Defaults to PGSQL_ASSOC.
<b>returns</b>  object An object with one attribute for each field
name in the result. Database NULL
values are returned as &amp;null;.
false is returned if row exceeds the number
of rows in the set, there are no more rows, or on any other error.
</reference></element>
<element pattern="pg_fetch_result" autocomplete_append="($result, $row, $field);">
<reference>pg_fetch_result($result, $row, $field);
Returns values from a result resource
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
next row is fetched.
<b> field mixed  </b>A string representing the name of the field (column) to fetch, otherwise
an int representing the field number to fetch. Fields are
numbered from 0 upwards.
<b>returns</b>  string Boolean is returned as &amp;quot;t&amp;quot; or &amp;quot;f&amp;quot;. All
other types, including arrays are returned as strings formatted
in the same default PostgreSQL manner that you would see in the
psql program. Database NULL
values are returned as &amp;null;.
false is returned if row exceeds the number
of rows in the set, or on any other error.
</reference></element>
<element pattern="pg_fetch_result" autocomplete_append="($result, $row, $field);">
<reference>pg_fetch_result($result, $row, $field);
Returns values from a result resource
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
next row is fetched.
<b> field mixed  </b>A string representing the name of the field (column) to fetch, otherwise
an int representing the field number to fetch. Fields are
numbered from 0 upwards.
<b>returns</b>  string Boolean is returned as &amp;quot;t&amp;quot; or &amp;quot;f&amp;quot;. All
other types, including arrays are returned as strings formatted
in the same default PostgreSQL manner that you would see in the
psql program. Database NULL
values are returned as &amp;null;.
false is returned if row exceeds the number
of rows in the set, or on any other error.
</reference></element>
<element pattern="pg_fetch_row" autocomplete_append="($result, $row = null, $result_type = null);">
<reference>pg_fetch_row($result, $row = null, $result_type = null);
Get a row as an enumerated array
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int[optional] </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
next row is fetched.
<b> result_type int[optional] </b><b>returns</b>  array An array, indexed from 0 upwards, with each value
represented as a string. Database NULL
values are returned as &amp;null;.
false is returned if row exceeds the number
of rows in the set, there are no more rows, or on any other error.
</reference></element>
<element pattern="pg_field_is_null" autocomplete_append="($result, $row, $field);">
<reference>pg_field_is_null($result, $row, $field);
Test if a field is SQL &lt;literal&gt;NULL&lt;/literal&gt;
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
current row is fetched.
<b> field mixed </b>Field number (starting from 0) as an integer or 
the field name as a string.
<b>returns</b>  int 1 if the field in the given row is SQL NULL, 0
if not. false is returned if the row is out of range, or upon any other error.
</reference></element>
<element pattern="pg_field_is_null" autocomplete_append="($result, $row, $field);">
<reference>pg_field_is_null($result, $row, $field);
Test if a field is SQL &lt;literal&gt;NULL&lt;/literal&gt;
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row int </b>Row number in result to fetch. Rows are numbered from 0 upwards. If omitted,
current row is fetched.
<b> field mixed </b>Field number (starting from 0) as an integer or 
the field name as a string.
<b>returns</b>  int 1 if the field in the given row is SQL NULL, 0
if not. false is returned if the row is out of range, or upon any other error.
</reference></element>
<element pattern="pg_field_name" autocomplete_append="($result, $field_number);">
<reference>pg_field_name($result, $field_number);
Returns the name of a field
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> field_number int </b>Field number, starting from 0.
<b>returns</b>  string The field name, or false on error.
</reference></element>
<element pattern="pg_field_num" autocomplete_append="($result, $field_name);">
<reference>pg_field_num($result, $field_name);
Returns the field number of the named field
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> field_name string </b>The name of the field.
<b>returns</b>  int The field number (numbered from 0), or -1 on error.
</reference></element>
<element pattern="pg_field_prtlen" autocomplete_append="($result, $row_number, $field_name_or_number);">
<reference>pg_field_prtlen($result, $row_number, $field_name_or_number);
Returns the printed length
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row_number int </b><b> field_name_or_number mixed </b><b>returns</b>  int The field printed length, or false on error.
</reference></element>
<element pattern="pg_field_prtlen" autocomplete_append="($result, $row_number, $field_name_or_number);">
<reference>pg_field_prtlen($result, $row_number, $field_name_or_number);
Returns the printed length
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> row_number int </b><b> field_name_or_number mixed </b><b>returns</b>  int The field printed length, or false on error.
</reference></element>
<element pattern="pg_field_size" autocomplete_append="($result, $field_number);">
<reference>pg_field_size($result, $field_number);
Returns the internal storage size of the named field
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> field_number int </b>Field number, starting from 0.
<b>returns</b>  int The internal field storage size (in bytes). -1 indicates a variable
length field. false is returned on error.
</reference></element>
<element pattern="pg_field_table" autocomplete_append="($result, $field_number, $oid_only = null);">
<reference>pg_field_table($result, $field_number, $oid_only = null);
Returns the name or oid of the tables field
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> field_number int </b>Field number, starting from 0.
<b> oid_only bool[optional] </b>By default the tables name that field belongs to is returned but
if oid_only is set to true, then the
oid will instead be returned.
<b>returns</b>  mixed On success either the fields table name or oid. Or, false on failure.
</reference></element>
<element pattern="pg_field_type_oid" autocomplete_append="($result, $field_number);">
<reference>pg_field_type_oid($result, $field_number);
Returns the type ID (OID) for the corresponding field number
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> field_number int </b>Field number, starting from 0.
<b>returns</b>  int The OID of the field's base type. false is returned on error.
</reference></element>
<element pattern="pg_field_type" autocomplete_append="($result, $field_number);">
<reference>pg_field_type($result, $field_number);
Returns the type name for the corresponding field number
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> field_number int </b>Field number, starting from 0.
<b>returns</b>  string A string containing the base name of the field's type, or false
on error.
</reference></element>
<element pattern="pg_free_result" autocomplete_append="($result);">
<reference>pg_free_result($result);
Free result memory
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_get_notify" autocomplete_append="($connection, $result_type = null);">
<reference>pg_get_notify($connection, $result_type = null);
Gets SQL NOTIFY message
<b> connection resource </b>PostgreSQL database connection resource.
<b> result_type int[optional] </b>An optional parameter that controls
how the returned array is indexed.
result_type is a constant and can take the
following values: PGSQL_ASSOC, 
PGSQL_NUM and PGSQL_BOTH.
Using PGSQL_NUM, pg_get_notify
will return an array with numerical indices, using
PGSQL_ASSOC it will return only associative indices
while PGSQL_BOTH, the default, will return both
numerical and associative indices.
<b>returns</b>  array An array containing the NOTIFY message name and backend PID.
Otherwise if no NOTIFY is waiting, then false is returned.
</reference></element>
<element pattern="pg_get_pid" autocomplete_append="($connection);">
<reference>pg_get_pid($connection);
Gets the backend's process ID
<b> connection resource </b>PostgreSQL database connection resource.
<b>returns</b>  int The backend database process ID.
</reference></element>
<element pattern="pg_get_result" autocomplete_append="($connection = null);">
<reference>pg_get_result($connection = null);
Get asynchronous query result
<b> connection resource[optional] </b>PostgreSQL database connection resource.
<b>returns</b>  resource The result resource, or false if no more results are available.
</reference></element>
<element pattern="pg_host" autocomplete_append="($connection = null);">
<reference>pg_host($connection = null);
Returns the host name associated with the connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  string A string containing the name of the host the 
connection is to, or false on error.
</reference></element>
<element pattern="pg_insert" autocomplete_append="($connection, $table_name, array $assoc_array, $options = null);">
<reference>pg_insert($connection, $table_name, array $assoc_array, $options = null);
Insert array into table
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>Name of the table into which to insert rows. The table table_name must at least 
have as many columns as assoc_array has elements.
<b> assoc_array array </b>An array whose keys are field names in the table table_name,
and whose values are the values of those fields that are to be inserted.
<b> options int[optional] </b>Any number of PGSQL_CONV_OPTS, 
PGSQL_DML_NO_CONV,
PGSQL_DML_EXEC,
PGSQL_DML_ASYNC or
PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the
options then query string is returned.
<b>returns</b>  mixed Returns true on success or false on failure. Returns string if PGSQL_DML_STRING is passed
via options.
</reference></element>
<element pattern="pg_last_error" autocomplete_append="($connection = null);">
<reference>pg_last_error($connection = null);
Get the last error message string of a connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  string A string containing the last error message on the 
given connection, or false on error.
</reference></element>
<element pattern="pg_last_notice" autocomplete_append="($connection);">
<reference>pg_last_notice($connection);
Returns the last notice message from PostgreSQL server
<b> connection resource </b>PostgreSQL database connection resource.
<b>returns</b>  string A string containing the last notice on the 
given connection, or false on error.
</reference></element>
<element pattern="pg_last_oid" autocomplete_append="($result);">
<reference>pg_last_oid($result);
Returns the last row's OID
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b>returns</b>  string A string containing the OID assigned to the most recently inserted
row in the specified connection, or false on error or
no available OID.
</reference></element>
<element pattern="pg_lo_close" autocomplete_append="($large_object);">
<reference>pg_lo_close($large_object);
Close a large object
<b> large_object resource </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_lo_create" autocomplete_append="($connection = null, $object_id = null);">
<reference>pg_lo_create($connection = null, $object_id = null);
Create a large object
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> object_id mixed[optional] </b>If an object_id is given the function
will try to create a large object with this id, else a free
object id is assigned by the server. The parameter
was added in PHP 5.3 and relies on functionality that first
appeared in PostgreSQL 8.1.
<b>returns</b>  int A large object OID or false on error.
</reference></element>
<element pattern="pg_lo_export" autocomplete_append="($connection, $oid, $pathname);">
<reference>pg_lo_export($connection, $oid, $pathname);
Export a large object to file
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> oid int </b>The OID of the large object in the database.
<b> pathname string </b>The full path and file name of the file in which to write the
large object on the client filesystem.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_lo_export" autocomplete_append="($connection, $oid, $pathname);">
<reference>pg_lo_export($connection, $oid, $pathname);
Export a large object to file
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> oid int </b>The OID of the large object in the database.
<b> pathname string </b>The full path and file name of the file in which to write the
large object on the client filesystem.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_lo_import" autocomplete_append="($connection, $pathname, $object_id);">
<reference>pg_lo_import($connection, $pathname, $object_id);
Import a large object from file
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> pathname string </b>The full path and file name of the file on the client
filesystem from which to read the large object data.
<b> object_id mixed </b>If an object_id is given the function
will try to create a large object with this id, else a free
object id is assigned by the server. The parameter
was added in PHP 5.3 and relies on functionality that first
appeared in PostgreSQL 8.1.
<b>returns</b>  int The OID of the newly created large object, or
false on failure.
</reference></element>
<element pattern="pg_lo_import" autocomplete_append="($connection, $pathname, $object_id);">
<reference>pg_lo_import($connection, $pathname, $object_id);
Import a large object from file
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> pathname string </b>The full path and file name of the file on the client
filesystem from which to read the large object data.
<b> object_id mixed </b>If an object_id is given the function
will try to create a large object with this id, else a free
object id is assigned by the server. The parameter
was added in PHP 5.3 and relies on functionality that first
appeared in PostgreSQL 8.1.
<b>returns</b>  int The OID of the newly created large object, or
false on failure.
</reference></element>
<element pattern="pg_lo_import" autocomplete_append="($connection, $pathname, $object_id);">
<reference>pg_lo_import($connection, $pathname, $object_id);
Import a large object from file
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> pathname string </b>The full path and file name of the file on the client
filesystem from which to read the large object data.
<b> object_id mixed </b>If an object_id is given the function
will try to create a large object with this id, else a free
object id is assigned by the server. The parameter
was added in PHP 5.3 and relies on functionality that first
appeared in PostgreSQL 8.1.
<b>returns</b>  int The OID of the newly created large object, or
false on failure.
</reference></element>
<element pattern="pg_lo_open" autocomplete_append="($connection, $oid, $mode);">
<reference>pg_lo_open($connection, $oid, $mode);
Open a large object
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> oid int </b>The OID of the large object in the database.
<b> mode string </b>Can be either "r" for read-only, "w" for write only or "rw" for read and 
write.
<b>returns</b>  resource A large object resource or false on error.
</reference></element>
<element pattern="pg_lo_read_all" autocomplete_append="($large_object);">
<reference>pg_lo_read_all($large_object);
Reads an entire large object and send straight to browser
<b> large_object resource </b>PostgreSQL large object (LOB) resource, returned by pg_lo_open.
<b>returns</b>  int Number of bytes read or false on error.
</reference></element>
<element pattern="pg_lo_read" autocomplete_append="($large_object, $len = null);">
<reference>pg_lo_read($large_object, $len = null);
Read a large object
<b> large_object resource </b>PostgreSQL large object (LOB) resource, returned by pg_lo_open.
<b> len int[optional] </b>An optional maximum number of bytes to return. Defaults to 8192.
<b>returns</b>  string A string containing len bytes from the
large object, or false on error.
</reference></element>
<element pattern="pg_lo_seek" autocomplete_append="($large_object, $offset, $whence = null);">
<reference>pg_lo_seek($large_object, $offset, $whence = null);
Seeks position within a large object
<b> large_object resource </b>PostgreSQL large object (LOB) resource, returned by pg_lo_open.
<b> offset int </b>The number of bytes to seek.
<b> whence int[optional] </b>One of the constants PGSQL_SEEK_SET (seek from object start), 
PGSQL_SEEK_CUR (seek from current position)
or PGSQL_SEEK_END (seek from object end) .
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_lo_tell" autocomplete_append="($large_object);">
<reference>pg_lo_tell($large_object);
Returns current seek position a of large object
<b> large_object resource </b>PostgreSQL large object (LOB) resource, returned by pg_lo_open.
<b>returns</b>  int The current seek offset (in number of bytes) from the beginning of the large
object. If there is an error, the return value is negative.
</reference></element>
<element pattern="pg_lo_unlink" autocomplete_append="($connection, $oid);">
<reference>pg_lo_unlink($connection, $oid);
Delete a large object
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> oid int </b>The OID of the large object in the database.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_lo_write" autocomplete_append="($large_object, $data, $len = null);">
<reference>pg_lo_write($large_object, $data, $len = null);
Write to a large object
<b> large_object resource </b>PostgreSQL large object (LOB) resource, returned by pg_lo_open.
<b> data string </b>The data to be written to the large object. If len is
specified and is less than the length of data, only
len bytes will be written.
<b> len int[optional] </b>An optional maximum number of bytes to write. Must be greater than zero
and no greater than the length of data. Defaults to
the length of data.
<b>returns</b>  int The number of bytes written to the large object, or false on error.
</reference></element>
<element pattern="pg_meta_data" autocomplete_append="($connection, $table_name);">
<reference>pg_meta_data($connection, $table_name);
Get meta data for table
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>The name of the table.
<b>returns</b>  array An array of the table definition, or false on error.
</reference></element>
<element pattern="pg_num_fields" autocomplete_append="($result);">
<reference>pg_num_fields($result);
Returns the number of fields in a result
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b>returns</b>  int The number of fields (columns) in the result. On error, -1 is returned.
</reference></element>
<element pattern="pg_num_rows" autocomplete_append="($result);">
<reference>pg_num_rows($result);
Returns the number of rows in a result
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b>returns</b>  int The number of rows in the result. On error, -1 is returned.
</reference></element>
<element pattern="pg_options" autocomplete_append="($connection = null);">
<reference>pg_options($connection = null);
Get the options associated with the connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  string A string containing the connection
options, or false on error.
</reference></element>
<element pattern="pg_parameter_status" autocomplete_append="($connection, $param_name);">
<reference>pg_parameter_status($connection, $param_name);
Looks up a current parameter setting of the server.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> param_name string </b>Possible param_name values include server_version, 
server_encoding, client_encoding, 
is_superuser, session_authorization, 
DateStyle, TimeZone, and 
integer_datetimes.
<b>returns</b>  string A string containing the value of the parameter, false on failure or invalid
param_name.
</reference></element>
<element pattern="pg_parameter_status" autocomplete_append="($connection, $param_name);">
<reference>pg_parameter_status($connection, $param_name);
Looks up a current parameter setting of the server.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> param_name string </b>Possible param_name values include server_version, 
server_encoding, client_encoding, 
is_superuser, session_authorization, 
DateStyle, TimeZone, and 
integer_datetimes.
<b>returns</b>  string A string containing the value of the parameter, false on failure or invalid
param_name.
</reference></element>
<element pattern="pg_pconnect" autocomplete_append="($connection_string, $connect_type = null);">
<reference>pg_pconnect($connection_string, $connect_type = null);
Open a persistent PostgreSQL connection
<b> connection_string string </b>The connection_string can be empty to use all default parameters, or it 
can contain one or more parameter settings separated by whitespace. 
Each parameter setting is in the form keyword = value. Spaces around 
the equal sign are optional. To write an empty value or a value 
containing spaces, surround it with single quotes, e.g., keyword = 
'a value'. Single quotes and backslashes within the value must be 
escaped with a backslash, i.e., \' and \\. 
The currently recognized parameter keywords are:
host, hostaddr, port,
dbname, user,
password, connect_timeout,
options, tty (ignored), sslmode,
requiressl (deprecated in favor of sslmode), and
service. Which of these arguments exist depends
on your PostgreSQL version.
<b> connect_type int[optional] </b>If PGSQL_CONNECT_FORCE_NEW is passed, then a new connection
is created, even if the connection_string is identical to
an existing connection.
<b>returns</b>  resource PostgreSQL connection resource on success, false on failure.
</reference></element>
<element pattern="pg_ping" autocomplete_append="($connection = null);">
<reference>pg_ping($connection = null);
Ping database connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_port" autocomplete_append="($connection = null);">
<reference>pg_port($connection = null);
Return the port number associated with the connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  int An int containing the port number of the database
server the connection is to, 
or false on error.
</reference></element>
<element pattern="pg_prepare" autocomplete_append="($connection, $stmtname, $query);">
<reference>pg_prepare($connection, $stmtname, $query);
Submits a request to create a prepared statement with the 
iven parameters, and waits for completion.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> stmtname string </b>The name to give the prepared statement. Must be unique per-connection. If
"" is specified, then an unnamed statement is created, overwriting any
previously defined unnamed statement.
<b> query string </b>The parameterised SQL statement. Must contain only a single statement.
(multiple statements separated by semi-colons are not allowed.) If any parameters 
are used, they are referred to as $1, $2, etc.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_prepare" autocomplete_append="($connection, $stmtname, $query);">
<reference>pg_prepare($connection, $stmtname, $query);
Submits a request to create a prepared statement with the 
iven parameters, and waits for completion.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> stmtname string </b>The name to give the prepared statement. Must be unique per-connection. If
"" is specified, then an unnamed statement is created, overwriting any
previously defined unnamed statement.
<b> query string </b>The parameterised SQL statement. Must contain only a single statement.
(multiple statements separated by semi-colons are not allowed.) If any parameters 
are used, they are referred to as $1, $2, etc.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_put_line" autocomplete_append="($data);">
<reference>pg_put_line($data);
Send a NULL-terminated string to PostgreSQL backend
<b> data string </b>A line of text to be sent directly to the PostgreSQL backend. A NULL
terminator is added automatically.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_put_line" autocomplete_append="($data);">
<reference>pg_put_line($data);
Send a NULL-terminated string to PostgreSQL backend
<b> data string </b>A line of text to be sent directly to the PostgreSQL backend. A NULL
terminator is added automatically.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_query_params" autocomplete_append="($connection, $query, array $params);">
<reference>pg_query_params($connection, $query, array $params);
Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> query string </b>The parameterised SQL statement. Must contain only a single statement.
(multiple statements separated by semi-colons are not allowed.) If any parameters 
are used, they are referred to as $1, $2, etc.
<b> params array </b>An array of parameter values to substitute for the $1, $2, etc. placeholders
in the original prepared query string. The number of elements in the array
must match the number of placeholders.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_query_params" autocomplete_append="($connection, $query, array $params);">
<reference>pg_query_params($connection, $query, array $params);
Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> query string </b>The parameterised SQL statement. Must contain only a single statement.
(multiple statements separated by semi-colons are not allowed.) If any parameters 
are used, they are referred to as $1, $2, etc.
<b> params array </b>An array of parameter values to substitute for the $1, $2, etc. placeholders
in the original prepared query string. The number of elements in the array
must match the number of placeholders.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_query" autocomplete_append="($query);">
<reference>pg_query($query);
Execute a query
<b> query string </b>The SQL statement or statements to be executed. When multiple statements are passed to the function,
they are automatically executed as one transaction, unless there are explicit BEGIN/COMMIT commands
included in the query string. However, using multiple transactions in one function call is not recommended.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_query" autocomplete_append="($query);">
<reference>pg_query($query);
Execute a query
<b> query string </b>The SQL statement or statements to be executed. When multiple statements are passed to the function,
they are automatically executed as one transaction, unless there are explicit BEGIN/COMMIT commands
included in the query string. However, using multiple transactions in one function call is not recommended.
<b>returns</b>  resource A query result resource on success, or false on failure.
</reference></element>
<element pattern="pg_result_error_field" autocomplete_append="($result, $fieldcode);">
<reference>pg_result_error_field($result, $fieldcode);
Returns an individual field of an error report.
<b> result resource </b>A PostgreSQL query result resource from a previously executed
statement.
<b> fieldcode int </b>Possible fieldcode values are: PGSQL_DIAG_SEVERITY,
PGSQL_DIAG_SQLSTATE, PGSQL_DIAG_MESSAGE_PRIMARY,
PGSQL_DIAG_MESSAGE_DETAIL,
PGSQL_DIAG_MESSAGE_HINT, PGSQL_DIAG_STATEMENT_POSITION,
PGSQL_DIAG_INTERNAL_POSITION (PostgreSQL 8.0+ only),
PGSQL_DIAG_INTERNAL_QUERY (PostgreSQL 8.0+ only),
PGSQL_DIAG_CONTEXT, PGSQL_DIAG_SOURCE_FILE,
PGSQL_DIAG_SOURCE_LINE or
PGSQL_DIAG_SOURCE_FUNCTION.
<b>returns</b>  string A string containing the contents of the error field, &amp;null; if the field does not exist or false
on failure.
</reference></element>
<element pattern="pg_result_error" autocomplete_append="($result);">
<reference>pg_result_error($result);
Get error message associated with result
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b>returns</b>  string a string if there is an error associated with the
result parameter, false otherwise.
</reference></element>
<element pattern="pg_result_seek" autocomplete_append="($result, $offset);">
<reference>pg_result_seek($result, $offset);
Set internal row offset in result resource
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> offset int </b>Row to move the internal offset to in the result resource.
Rows are numbered starting from zero.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_result_status" autocomplete_append="($result, $type = null);">
<reference>pg_result_status($result, $type = null);
Get status of query result
<b> result resource </b>PostgreSQL query result resource, returned by pg_query,
pg_query_params or pg_execute
(among others).
<b> type int[optional] </b>Either PGSQL_STATUS_LONG to return the numeric status 
of the result, or PGSQL_STATUS_STRING 
to return the command tag of the result.
If not specified, PGSQL_STATUS_LONG is the default.
<b>returns</b>  mixed Possible return values are PGSQL_EMPTY_QUERY,
PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_OUT,
PGSQL_COPY_IN, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR and
PGSQL_FATAL_ERROR if PGSQL_STATUS_LONG is
specified. Otherwise, a string containing the PostgreSQL command tag is returned.
</reference></element>
<element pattern="pg_select" autocomplete_append="($connection, $table_name, array $assoc_array, $options = null);">
<reference>pg_select($connection, $table_name, array $assoc_array, $options = null);
Select records
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>Name of the table from which to select rows.
<b> assoc_array array </b>An array whose keys are field names in the table table_name,
and whose values are the conditions that a row must meet to be retrieved.
<b> options int[optional] </b>Any number of PGSQL_CONV_FORCE_NULL, 
PGSQL_DML_NO_CONV,
PGSQL_DML_EXEC,
PGSQL_DML_ASYNC or
PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the
options then query string is returned.
<b>returns</b>  mixed Returns true on success or false on failure. Returns string if PGSQL_DML_STRING is passed
via options.
</reference></element>
<element pattern="pg_send_execute" autocomplete_append="($connection, $stmtname, array $params);">
<reference>pg_send_execute($connection, $stmtname, array $params);
Sends a request to execute a prepared statement with given parameters, without waiting for the result(s).
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> stmtname string </b>The name of the prepared statement to execute. if
"" is specified, then the unnamed statement is executed. The name must have
been previously prepared using pg_prepare, 
pg_send_prepare or a PREPARE SQL
command.
<b> params array </b>An array of parameter values to substitute for the $1, $2, etc. placeholders
in the original prepared query string. The number of elements in the array
must match the number of placeholders.
<b>returns</b>  bool true on success, false on failure. Use pg_get_result
to determine the query result.
</reference></element>
<element pattern="pg_send_prepare" autocomplete_append="($connection, $stmtname, $query);">
<reference>pg_send_prepare($connection, $stmtname, $query);
Sends a request to create a prepared statement with the given parameters, without waiting for completion.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> stmtname string </b>The name to give the prepared statement. Must be unique per-connection. If
"" is specified, then an unnamed statement is created, overwriting any
previously defined unnamed statement.
<b> query string </b>The parameterised SQL statement. Must contain only a single statement.
(multiple statements separated by semi-colons are not allowed.) If any parameters 
are used, they are referred to as $1, $2, etc.
<b>returns</b>  bool true on success, false on failure. Use pg_get_result
to determine the query result.
</reference></element>
<element pattern="pg_send_query_params" autocomplete_append="($connection, $query, array $params);">
<reference>pg_send_query_params($connection, $query, array $params);
Submits a command and separate parameters to the server without waiting for the result(s).
<b> connection resource </b>PostgreSQL database connection resource.
<b> query string </b>The parameterised SQL statement. Must contain only a single statement.
(multiple statements separated by semi-colons are not allowed.) If any parameters 
are used, they are referred to as $1, $2, etc.
<b> params array </b>An array of parameter values to substitute for the $1, $2, etc. placeholders
in the original prepared query string. The number of elements in the array
must match the number of placeholders.
<b>returns</b>  bool Returns true on success or false on failure.
Use pg_get_result to determine the query result.
</reference></element>
<element pattern="pg_send_query" autocomplete_append="($connection, $query);">
<reference>pg_send_query($connection, $query);
Sends asynchronous query
<b> connection resource </b>PostgreSQL database connection resource.
<b> query string </b>The SQL statement or statements to be executed.
<b>returns</b>  bool Returns true on success or false on failure.
Use pg_get_result to determine the query result.
</reference></element>
<element pattern="pg_set_client_encoding" autocomplete_append="($encoding);">
<reference>pg_set_client_encoding($encoding);
Set the client encoding
<b> encoding string </b>The required client encoding. One of SQL_ASCII, EUC_JP, 
EUC_CN, EUC_KR, EUC_TW, 
UNICODE, MULE_INTERNAL, LATINX (X=1...9), 
KOI8, WIN, ALT, SJIS, 
BIG5 or WIN1250.
The exact list of available encodings depends on your PostgreSQL version, so check your
PostgreSQL manual for a more specific list.
<b>returns</b>  int 0 on success or -1 on error.
</reference></element>
<element pattern="pg_set_client_encoding" autocomplete_append="($encoding);">
<reference>pg_set_client_encoding($encoding);
Set the client encoding
<b> encoding string </b>The required client encoding. One of SQL_ASCII, EUC_JP, 
EUC_CN, EUC_KR, EUC_TW, 
UNICODE, MULE_INTERNAL, LATINX (X=1...9), 
KOI8, WIN, ALT, SJIS, 
BIG5 or WIN1250.
The exact list of available encodings depends on your PostgreSQL version, so check your
PostgreSQL manual for a more specific list.
<b>returns</b>  int 0 on success or -1 on error.
</reference></element>
<element pattern="pg_set_error_verbosity" autocomplete_append="($connection, $verbosity);">
<reference>pg_set_error_verbosity($connection, $verbosity);
Determines the verbosity of messages returned by &lt;function&gt;pg_last_error&lt;/function&gt; 
and &lt;function&gt;pg_result_error&lt;/function&gt;.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> verbosity int </b>The required verbosity: PGSQL_ERRORS_TERSE,
PGSQL_ERRORS_DEFAULT
or PGSQL_ERRORS_VERBOSE.
<b>returns</b>  int The previous verbosity level: PGSQL_ERRORS_TERSE,
PGSQL_ERRORS_DEFAULT
or PGSQL_ERRORS_VERBOSE.
</reference></element>
<element pattern="pg_set_error_verbosity" autocomplete_append="($connection, $verbosity);">
<reference>pg_set_error_verbosity($connection, $verbosity);
Determines the verbosity of messages returned by &lt;function&gt;pg_last_error&lt;/function&gt; 
and &lt;function&gt;pg_result_error&lt;/function&gt;.
<b> connection resource </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b> verbosity int </b>The required verbosity: PGSQL_ERRORS_TERSE,
PGSQL_ERRORS_DEFAULT
or PGSQL_ERRORS_VERBOSE.
<b>returns</b>  int The previous verbosity level: PGSQL_ERRORS_TERSE,
PGSQL_ERRORS_DEFAULT
or PGSQL_ERRORS_VERBOSE.
</reference></element>
<element pattern="pg_trace" autocomplete_append="($pathname, $mode = null, $connection = null);">
<reference>pg_trace($pathname, $mode = null, $connection = null);
Enable tracing a PostgreSQL connection
<b> pathname string </b>An optional file access mode, same as for fopen.
Defaults to "w".
<b> mode string[optional] </b><b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="pg_transaction_status" autocomplete_append="($connection);">
<reference>pg_transaction_status($connection);
Returns the current in-transaction status of the server.
<b> connection resource </b>PostgreSQL database connection resource.
<b>returns</b>  int The status can be PGSQL_TRANSACTION_IDLE (currently idle),
PGSQL_TRANSACTION_ACTIVE (a command is in progress),
PGSQL_TRANSACTION_INTRANS (idle, in a valid transaction block),
or PGSQL_TRANSACTION_INERROR (idle, in a failed transaction block).
PGSQL_TRANSACTION_UNKNOWN is reported if the connection is bad.
PGSQL_TRANSACTION_ACTIVE is reported only when a query
has been sent to the server and not yet completed.
</reference></element>
<element pattern="pg_tty" autocomplete_append="($connection = null);">
<reference>pg_tty($connection = null);
Return the TTY name associated with the connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  string A string containing the debug TTY of 
the connection, or false on error.
</reference></element>
<element pattern="pg_unescape_bytea" autocomplete_append="($data);">
<reference>pg_unescape_bytea($data);
Unescape binary for bytea type
<b> data string </b>A string containing PostgreSQL bytea data to be converted into
a PHP binary string.
<b>returns</b>  string A string containing the unescaped data.
</reference></element>
<element pattern="pg_untrace" autocomplete_append="($connection = null);">
<reference>pg_untrace($connection = null);
Disable tracing of a PostgreSQL connection
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  bool Always returns true.
</reference></element>
<element pattern="pg_update" autocomplete_append="($connection, $table_name, array $data, array $condition, $options = null);">
<reference>pg_update($connection, $table_name, array $data, array $condition, $options = null);
Update table
<b> connection resource </b>PostgreSQL database connection resource.
<b> table_name string </b>Name of the table into which to update rows.
<b> data array </b>An array whose keys are field names in the table table_name,
and whose values are what matched rows are to be updated to.
<b> condition array </b>An array whose keys are field names in the table table_name,
and whose values are the conditions that a row must meet to be updated.
<b> options int[optional] </b>Any number of PGSQL_CONV_OPTS, 
PGSQL_DML_NO_CONV,
PGSQL_DML_EXEC or
PGSQL_DML_STRING combined. If PGSQL_DML_STRING is part of the
options then query string is returned.
<b>returns</b>  mixed Returns true on success or false on failure. Returns string if PGSQL_DML_STRING is passed
via options.
</reference></element>
<element pattern="pg_version" autocomplete_append="($connection = null);">
<reference>pg_version($connection = null);
Returns an array with client, protocol and server version (when available)
<b> connection resource[optional] </b>PostgreSQL database connection resource. When 
connection is not present, the default connection 
is used. The default connection is the last connection made by 
pg_connect or pg_pconnect.
<b>returns</b>  array an array with client, protocol 
and server_version keys and values (if available). Returns
false on error or invalid connection.
</reference></element>
<element pattern="printer_abort"/>
<element pattern="printer_close"/>
<element pattern="printer_create_brush"/>
<element pattern="printer_create_dc"/>
<element pattern="printer_create_font"/>
<element pattern="printer_create_pen"/>
<element pattern="printer_delete_brush"/>
<element pattern="printer_delete_dc"/>
<element pattern="printer_delete_font"/>
<element pattern="printer_delete_pen"/>
<element pattern="printer_draw_bmp"/>
<element pattern="printer_draw_chord"/>
<element pattern="printer_draw_elipse"/>
<element pattern="printer_draw_line"/>
<element pattern="printer_draw_pie"/>
<element pattern="printer_draw_rectangle"/>
<element pattern="printer_draw_roundrect"/>
<element pattern="printer_draw_text"/>
<element pattern="printer_end_doc"/>
<element pattern="printer_end_page"/>
<element pattern="printer_get_option"/>
<element pattern="printer_list"/>
<element pattern="printer_logical_fontheight"/>
<element pattern="printer_open"/>
<element pattern="printer_select_brush"/>
<element pattern="printer_select_font"/>
<element pattern="printer_select_pen"/>
<element pattern="printer_set_option"/>
<element pattern="printer_start_doc"/>
<element pattern="printer_start_page"/>
<element pattern="printer_write"/>
<element pattern="escapeshellarg" autocomplete_append="($arg);">
<reference>escapeshellarg($arg);
Escape a string to be used as a shell argument
<b> arg string </b>The argument that will be escaped.
<b>returns</b>  string The escaped string.
</reference></element>
<element pattern="escapeshellcmd" autocomplete_append="($command);">
<reference>escapeshellcmd($command);
Escape shell metacharacters
<b> command string </b>The command that will be escaped.
<b>returns</b>  string The escaped string.
</reference></element>
<element pattern="exec" autocomplete_append="($command, array &amp;$output = null, &amp;$return_var = null);">
<reference>exec($command, array &amp;$output = null, &amp;$return_var = null);
Execute an external program
<b> command string </b>The command that will be executed.
<b> output array[optional] </b>If the output argument is present, then the
specified array will be filled with every line of output from the
command. Trailing whitespace, such as \n, is not
included in this array. Note that if the array already contains some
elements, exec will append to the end of the array.
If you do not want the function to append elements, call
unset on the array before passing it to
exec.
<b> return_var int[optional] </b>If the return_var argument is present
along with the output argument, then the
return status of the executed command will be written to this
variable.
<b>returns</b>  string The last line from the result of the command. If you need to execute a 
command and have all the data from the command passed directly back without 
any interference, use the passthru function.
To get the output of the executed command, be sure to set and use the
output parameter.
</reference></element>
<element pattern="passthru" autocomplete_append="($command, &amp;$return_var = null);">
<reference>passthru($command, &amp;$return_var = null);
Execute an external program and display raw output
<b> command string </b>The command that will be executed.
<b> return_var int[optional] </b>If the return_var argument is present, the 
return status of the Unix command will be placed here.
<b>returns</b>  void 
</reference></element>
<element pattern="proc_close" autocomplete_append="($process);">
<reference>proc_close($process);
Close a process opened by &lt;function&gt;proc_open&lt;/function&gt; and return the exit code of that process.
<b> process resource </b>The proc_open resource that will
be closed.
<b>returns</b>  int the termination status of the process that was run.
</reference></element>
<element pattern="proc_get_status" autocomplete_append="($process);">
<reference>proc_get_status($process);
Get information about a process opened by &lt;function&gt;proc_open&lt;/function&gt;
<b> process resource </b>The proc_open resource that will
be evaluated.
<b>returns</b>  array An array of collected information on success, and false
on failure. The returned array contains the following elements:
&lt;tr valign="top"&gt;&lt;td&gt;element&lt;/td&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;description&lt;/td&gt;&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;command&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;
The command string that was passed to proc_open.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;pid&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;process id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;running&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;
true if the process is still running, false if it has
terminated.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;signaled&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;
true if the child process has been terminated by
an uncaught signal. Always set to false on Windows.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;stopped&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;
true if the child process has been stopped by a
signal. Always set to false on Windows.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;exitcode&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;
The exit code returned by the process (which is only
meaningful if running is false).
Only first call of this function return real value, next calls return
-1.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;termsig&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;
The number of the signal that caused the child process to terminate
its execution (only meaningful if signaled is true).
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;stopsig&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;
The number of the signal that caused the child process to stop its
execution (only meaningful if stopped is true).
&lt;/td&gt;
&lt;/tr&gt;
</reference></element>
<element pattern="proc_nice" autocomplete_append="($increment);">
<reference>proc_nice($increment);
Change the priority of the current process
<b> increment int </b>The increment value of the priority change.
<b>returns</b>  bool Returns true on success or false on failure.
If an error occurs, like the user lacks permission to change the priority, 
an error of level E_WARNING is also generated.
</reference></element>
<element pattern="proc_open" autocomplete_append="($cmd, array $descriptorspec, array &amp;$pipes, $cwd = null, array $env = null, array $other_options = null);">
<reference>proc_open($cmd, array $descriptorspec, array &amp;$pipes, $cwd = null, array $env = null, array $other_options = null);
Execute a command and open file pointers for input/output
<b> cmd string </b>The command to execute
<b> descriptorspec array </b>An indexed array where the key represents the descriptor number and the
value represents how PHP will pass that descriptor to the child
process. 0 is stdin, 1 is stdout, while 2 is stderr.
The currently supported pipe types are file and
pipe .
The file descriptor numbers are not limited to 0, 1 and 2 - you may
specify any valid file descriptor number and it will be passed to the
child process. This allows your script to interoperate with other
scripts that run as "co-processes". In particular, this is useful for
passing passphrases to programs like PGP, GPG and openssl in a more
secure manner. It is also useful for reading status information
provided by those programs on auxiliary file descriptors.
<b> pipes array </b>Will be set to an indexed array of file pointers that correspond to
PHP's end of any pipes that are created.
<b> cwd string[optional] </b>The initial working dir for the command. This must be an
absolute directory path, or &amp;null;
if you want to use the default value (the working dir of the current
PHP process)
<b> env array[optional] </b>An array with the environment variables for the command that will be
run, or &amp;null; to use the same environment as the current PHP process
<b> other_options array[optional] </b>Allows you to specify additional options. Currently supported options
include:
suppress_errors (windows only): suppresses errors
generated by this function when it's set to true
bypass_shell (windows only): bypass
cmd.exe shell when set to true
context: stream context used when opening files
(created with stream_context_create)
binary_pipes: open pipes in binary mode, instead
of using the usual stream_encoding
<b>returns</b>  resource a resource representing the process, which should be freed using
proc_close when you are finished with it. On failure
returns false.
</reference></element>
<element pattern="proc_terminate" autocomplete_append="($process, $signal = null);">
<reference>proc_terminate($process, $signal = null);
Kills a process opened by proc_open
<b> process resource </b>The proc_open resource that will
be closed.
<b> signal int[optional] </b>This optional parameter is only useful on POSIX
operating systems; you may specify a signal to send to the process
using the kill(2) system call. The default is
SIGTERM.
<b>returns</b>  bool the termination status of the process that was run.
</reference></element>
<element pattern="shell_exec" autocomplete_append="($cmd);">
<reference>shell_exec($cmd);
Execute command via shell and return the complete output as a string
<b> cmd string </b>The command that will be executed.
<b>returns</b>  string The output from the executed command.
</reference></element>
<element pattern="system" autocomplete_append="($command, &amp;$return_var = null);">
<reference>system($command, &amp;$return_var = null);
Execute an external program and display the output
<b> command string </b>The command that will be executed.
<b> return_var int[optional] </b>If the return_var argument is present, then the
return status of the executed command will be written to this
variable.
<b>returns</b>  string the last line of the command output on success, and false
on failure.
</reference></element>
<element pattern="ps_add_bookmark"/>
<element pattern="ps_add_launchlink"/>
<element pattern="ps_add_locallink"/>
<element pattern="ps_add_note"/>
<element pattern="ps_add_pdflink"/>
<element pattern="ps_add_weblink"/>
<element pattern="ps_arc"/>
<element pattern="ps_arcn"/>
<element pattern="ps_begin_page"/>
<element pattern="ps_begin_pattern"/>
<element pattern="ps_begin_template"/>
<element pattern="ps_circle"/>
<element pattern="ps_clip"/>
<element pattern="ps_close_image"/>
<element pattern="ps_close"/>
<element pattern="ps_closepath_stroke"/>
<element pattern="ps_closepath"/>
<element pattern="ps_continue_text"/>
<element pattern="ps_curveto"/>
<element pattern="ps_delete"/>
<element pattern="ps_end_page"/>
<element pattern="ps_end_pattern"/>
<element pattern="ps_end_template"/>
<element pattern="ps_fill_stroke"/>
<element pattern="ps_fill"/>
<element pattern="ps_findfont"/>
<element pattern="ps_get_buffer"/>
<element pattern="ps_get_parameter"/>
<element pattern="ps_get_value"/>
<element pattern="ps_hyphenate"/>
<element pattern="ps_include_file"/>
<element pattern="ps_lineto"/>
<element pattern="ps_makespotcolor"/>
<element pattern="ps_moveto"/>
<element pattern="ps_new"/>
<element pattern="ps_open_file"/>
<element pattern="ps_open_image_file"/>
<element pattern="ps_open_image"/>
<element pattern="ps_open_memory_image"/>
<element pattern="ps_place_image"/>
<element pattern="ps_rect"/>
<element pattern="ps_restore"/>
<element pattern="ps_rotate"/>
<element pattern="ps_save"/>
<element pattern="ps_scale"/>
<element pattern="ps_set_border_color"/>
<element pattern="ps_set_border_dash"/>
<element pattern="ps_set_border_style"/>
<element pattern="ps_set_info"/>
<element pattern="ps_set_parameter"/>
<element pattern="ps_set_text_pos"/>
<element pattern="ps_set_value"/>
<element pattern="ps_setcolor"/>
<element pattern="ps_setdash"/>
<element pattern="ps_setflat"/>
<element pattern="ps_setfont"/>
<element pattern="ps_setgray"/>
<element pattern="ps_setlinecap"/>
<element pattern="ps_setlinejoin"/>
<element pattern="ps_setlinewidth"/>
<element pattern="ps_setmiterlimit"/>
<element pattern="ps_setoverprintmode"/>
<element pattern="ps_setpolydash"/>
<element pattern="ps_shading_pattern"/>
<element pattern="ps_shading"/>
<element pattern="ps_shfill"/>
<element pattern="ps_show_boxed"/>
<element pattern="ps_show_xy2"/>
<element pattern="ps_show_xy"/>
<element pattern="ps_show2"/>
<element pattern="ps_show"/>
<element pattern="ps_string_geometry"/>
<element pattern="ps_stringwidth"/>
<element pattern="ps_stroke"/>
<element pattern="ps_symbol_name"/>
<element pattern="ps_symbol_width"/>
<element pattern="ps_symbol"/>
<element pattern="ps_translate"/>
<element pattern="pspell_add_to_personal"/>
<element pattern="pspell_add_to_session"/>
<element pattern="pspell_check"/>
<element pattern="pspell_clear_session"/>
<element pattern="pspell_config_create"/>
<element pattern="pspell_config_data_dir"/>
<element pattern="pspell_config_dict_dir"/>
<element pattern="pspell_config_ignore"/>
<element pattern="pspell_config_mode"/>
<element pattern="pspell_config_personal"/>
<element pattern="pspell_config_repl"/>
<element pattern="pspell_config_runtogether"/>
<element pattern="pspell_config_save_repl"/>
<element pattern="pspell_new_config"/>
<element pattern="pspell_new_personal"/>
<element pattern="pspell_new"/>
<element pattern="pspell_save_wordlist"/>
<element pattern="pspell_store_replacement"/>
<element pattern="pspell_suggest"/>
<element pattern="qdom_error"/>
<element pattern="qdom_tree"/>
<element pattern="radius_acct_open"/>
<element pattern="radius_add_server"/>
<element pattern="radius_auth_open"/>
<element pattern="radius_close"/>
<element pattern="radius_config"/>
<element pattern="radius_create_request"/>
<element pattern="radius_cvt_addr"/>
<element pattern="radius_cvt_int"/>
<element pattern="radius_cvt_string"/>
<element pattern="radius_demangle_mppe_key"/>
<element pattern="radius_demangle"/>
<element pattern="radius_get_attr"/>
<element pattern="radius_get_vendor_attr"/>
<element pattern="radius_put_addr"/>
<element pattern="radius_put_attr"/>
<element pattern="radius_put_int"/>
<element pattern="radius_put_string"/>
<element pattern="radius_put_vendor_addr"/>
<element pattern="radius_put_vendor_attr"/>
<element pattern="radius_put_vendor_int"/>
<element pattern="radius_put_vendor_string"/>
<element pattern="radius_request_authenticator"/>
<element pattern="radius_send_request"/>
<element pattern="radius_server_secret"/>
<element pattern="radius_strerror"/>
<element pattern="rar_close"/>
<element pattern="rar_entry_get"/>
<element pattern="extract" autocomplete_append="(array $var_array, $extract_type = null, $prefix = null);">
<reference>extract(array $var_array, $extract_type = null, $prefix = null);
Import variables into the current symbol table from an array
<b> var_array array </b>Note that prefix is only required if
extract_type is EXTR_PREFIX_SAME,
EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID
or EXTR_PREFIX_IF_EXISTS. If
the prefixed result is not a valid variable name, it is not
imported into the symbol table. Prefixes are automatically separated from
the array key by an underscore character.
<b> extract_type int[optional] </b>The way invalid/numeric keys and collisions are treated is determined
by the extract_type. It can be one of the
following values:
EXTR_OVERWRITE
If there is a collision, overwrite the existing variable.
<b> prefix string[optional] Only overwrite the variable if it already exists in the</b>current symbol table, otherwise do nothing. This is useful
for defining a list of valid variables and then extracting
only those variables you have defined out of
$_REQUEST, for example.
<b>returns</b>  int the number of variables successfully imported into the symbol
table.
</reference></element>
<element pattern="getAttr"/>
<element pattern="getCrc"/>
<element pattern="getFileTime"/>
<element pattern="getHostOs"/>
<element pattern="getMethod"/>
<element pattern="getName"/>
<element pattern="getPackedSize"/>
<element pattern="getUnpackedSize"/>
<element pattern="getVersion"/>
<element pattern="rar_list"/>
<element pattern="rar_open"/>
<element pattern="readline_add_history"/>
<element pattern="readline_callback_handler_install"/>
<element pattern="readline_callback_handler_remove"/>
<element pattern="readline_callback_read_char"/>
<element pattern="readline_clear_history"/>
<element pattern="readline_completion_function"/>
<element pattern="readline_info"/>
<element pattern="readline_list_history"/>
<element pattern="readline_on_new_line"/>
<element pattern="readline_read_history"/>
<element pattern="readline_redisplay"/>
<element pattern="readline_write_history"/>
<element pattern="readline"/>
<element pattern="recode_file"/>
<element pattern="recode_string"/>
<element pattern="rpm_close"/>
<element pattern="rpm_get_tag"/>
<element pattern="rpm_is_valid"/>
<element pattern="rpm_open"/>
<element pattern="rpm_version"/>
<element pattern="runkit_class_adopt"/>
<element pattern="runkit_class_emancipate"/>
<element pattern="runkit_constant_add"/>
<element pattern="runkit_constant_redefine"/>
<element pattern="runkit_constant_remove"/>
<element pattern="runkit_function_add"/>
<element pattern="runkit_function_copy"/>
<element pattern="runkit_function_redefine"/>
<element pattern="runkit_function_remove"/>
<element pattern="runkit_function_rename"/>
<element pattern="runkit_import"/>
<element pattern="runkit_lint_file"/>
<element pattern="runkit_lint"/>
<element pattern="runkit_method_add"/>
<element pattern="runkit_method_copy"/>
<element pattern="runkit_method_redefine"/>
<element pattern="runkit_method_remove"/>
<element pattern="runkit_method_rename"/>
<element pattern="runkit_return_value_used"/>
<element pattern="runkit_sandbox_output_handler"/>
<element pattern="runkit_superglobals"/>
<element pattern="commit"/>
<element pattern="connect"/>
<element pattern="__construct"/>
<element pattern="disconnect"/>
<element pattern="isConnected"/>
<element pattern="peek"/>
<element pattern="peekAll"/>
<element pattern="receive"/>
<element pattern="remove"/>
<element pattern="rollback"/>
<element pattern="send"/>
<element pattern="send"/>
<element pattern="subscribe"/>
<element pattern="unsubscribe"/>
<element pattern="__construct"/>
<element pattern="OrbitEnum"/>
<element pattern="OrbitObject"/>
<element pattern="OrbitStruct"/>
<element pattern="satellite_caught_exception"/>
<element pattern="satellite_exception_id"/>
<element pattern="satellite_exception_value"/>
<element pattern="satellite_get_repository_id"/>
<element pattern="satellite_load_idl"/>
<element pattern="satellite_object_to_string"/>
<element pattern="ftok" autocomplete_append="($pathname, $proj);">
<reference>ftok($pathname, $proj);
Convert a pathname and a project identifier to a System V IPC key
<b> pathname string </b>Path to an accessible file.
<b> proj string </b>Project identifier. This must be a one character string.
<b>returns</b>  int On success the return value will be the created key value, otherwise
-1 is returned.
</reference></element>
<element pattern="msg_get_queue" autocomplete_append="($key, $perms = null);">
<reference>msg_get_queue($key, $perms = null);
Create or attach to a message queue
<b> key int </b>Message queue numeric ID
<b> perms int[optional] </b>Queue permissions. Default to 0666. If the message queue already
exists, the perms will be ignored.
<b>returns</b>  resource a resource handle that can be used to access the System V message queue.
</reference></element>
<element pattern="msg_receive" autocomplete_append="($queue, $desiredmsgtype, &amp;$msgtype, $maxsize, &amp;$message, $unserialize = null, $flags = null, &amp;$errorcode = null);">
<reference>msg_receive($queue, $desiredmsgtype, &amp;$msgtype, $maxsize, &amp;$message, $unserialize = null, $flags = null, &amp;$errorcode = null);
Receive a message from a message queue
<b> queue resource </b><b> desiredmsgtype int </b>If desiredmsgtype is 0, the message from the front
of the queue is returned. If desiredmsgtype is
greater than 0, then the first message of that type is returned.
If desiredmsgtype is less than 0, the first
message on the queue with the lowest type less than or equal to the
absolute value of desiredmsgtype will be read.
If no messages match the criteria, your script will wait until a suitable
message arrives on the queue. You can prevent the script from blocking
by specifying MSG_IPC_NOWAIT in the
flags parameter.
<b> msgtype int </b>The type of the message that was received will be stored in this
parameter.
<b> maxsize int </b>The maximum size of message to be accepted is specified by the
maxsize; if the message in the queue is larger
than this size the function will fail (unless you set
flags as described below).
<b> message mixed </b>The received message will be stored in message,
unless there were errors receiving the message.
<b> unserialize bool[optional] </b>unserialize defaults to true; if it is set to
true, the message is treated as though it was serialized using the
same mechanism as the session module. The message will be unserialized
and then returned to your script. This allows you to easily receive
arrays or complex object structures from other PHP scripts, or if you
are using the WDDX serializer, from any WDDX compatible source.
If unserialize is false, the message will be
returned as a binary-safe string.
<b> flags int[optional] </b>The optional flags allows you to pass flags to the
low-level msgrcv system call. It defaults to 0, but you may specify one
or more of the following values (by adding or ORing them together).

Flag values for msg_receive:

MSG_IPC_NOWAIT
If there are no messages of the
desiredmsgtype, return immediately and do not
wait. The function will fail and return an integer value
corresponding to MSG_ENOMSG.

MSG_EXCEPT
Using this flag in combination with a
desiredmsgtype greater than 0 will cause the
function to receive the first message that is not equal to
desiredmsgtype.

MSG_NOERROR
If the message is longer than maxsize,
setting this flag will truncate the message to
maxsize and will not signal an error.

<b> errorcode int[optional] </b>If the function fails, the optional errorcode
will be set to the value of the system errno variable.
<b>returns</b>  bool Returns true on success or false on failure.
Upon successful completion the message queue data structure is updated as
follows: msg_lrpid is set to the process-ID of the
calling process, msg_qnum is decremented by 1 and
msg_rtime is set to the current time.
</reference></element>
<element pattern="msg_remove_queue" autocomplete_append="($queue);">
<reference>msg_remove_queue($queue);
Destroy a message queue
<b> queue resource </b>Message queue resource handle
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="msg_send" autocomplete_append="($queue, $msgtype, $message, $serialize = null, $blocking = null, &amp;$errorcode = null);">
<reference>msg_send($queue, $msgtype, $message, $serialize = null, $blocking = null, &amp;$errorcode = null);
Send a message to a message queue
<b> queue resource </b><b> msgtype int </b><b> message mixed </b><b> serialize bool[optional] </b>The optional serialize controls how the
message is sent. serialize
defaults to true which means that the message is
serialized using the same mechanism as the session module before being
sent to the queue. This allows complex arrays and objects to be sent to
other PHP scripts, or if you are using the WDDX serializer, to any WDDX
compatible client.
<b> blocking bool[optional] </b>If the message is too large to fit in the queue, your script will wait
until another process reads messages from the queue and frees enough
space for your message to be sent.
This is called blocking; you can prevent blocking by setting the
optional blocking parameter to false, in which
case msg_send will immediately return false if the
message is too big for the queue, and set the optional
errorcode to MSG_EAGAIN,
indicating that you should try to send your message again a little
later on.
<b> errorcode int[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
Upon successful completion the message queue data structure is updated as
follows: msg_lspid is set to the process-ID of the
calling process, msg_qnum is incremented by 1 and
msg_stime is set to the current time.
</reference></element>
<element pattern="msg_set_queue" autocomplete_append="($queue, array $data);">
<reference>msg_set_queue($queue, array $data);
Set information in the message queue data structure
<b> queue resource </b>Message queue resource handle
<b> data array </b>You specify the values you require by setting the value of the keys
that you require in the data array.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="msg_stat_queue" autocomplete_append="($queue);">
<reference>msg_stat_queue($queue);
Returns information from the message queue data structure
<b> queue resource </b>Message queue resource handle
<b>returns</b>  array
The return value is an array whose keys and values have the following meanings:

Array structure for msg_stat_queue

msg_perm.uid
The uid of the owner of the queue.
msg_perm.gid
The gid of the owner of the queue.
msg_perm.mode
The file access mode of the queue.
msg_stime
The time that the last message was sent to the queue.
msg_rtime
The time that the last message was received from the queue.
msg_ctime
The time that the queue was last changed.
msg_qnum
The number of messages waiting to be read from the queue.
msg_qbytes
The number of bytes of space currently available in the queue to
hold sent messages until they are received.
msg_lspid
The pid of the process that sent the last message to the queue.
msg_lrpid
The pid of the process that received the last message from the queue.
</reference></element>
<element pattern="sem_acquire" autocomplete_append="($sem_identifier);">
<reference>sem_acquire($sem_identifier);
Acquire a semaphore
<b> sem_identifier resource </b>sem_identifier is a semaphore resource,
obtained from sem_get.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="sem_get" autocomplete_append="($key, $max_acquire = null, $perm = null, $auto_release = null);">
<reference>sem_get($key, $max_acquire = null, $perm = null, $auto_release = null);
Get a semaphore id
<b> key int </b><b> max_acquire int[optional] </b>The number of processes that can acquire the semaphore simultaneously
is set to max_acquire (defaults to 1).
<b> perm int[optional] </b>The semaphore permissions. Defaults to 0666. Actually this value is
set only if the process finds it is the only process currently
attached to the semaphore.
<b> auto_release int[optional] </b>Specifies if the semaphore should be automatically released on request
shutdown.
<b>returns</b>  resource a positive semaphore identifier on success, or false on
error.
</reference></element>
<element pattern="sem_release" autocomplete_append="($sem_identifier);">
<reference>sem_release($sem_identifier);
Release a semaphore
<b> sem_identifier resource </b>A Semaphore resource handle as returned by
sem_get.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="sem_remove" autocomplete_append="($sem_identifier);">
<reference>sem_remove($sem_identifier);
Remove a semaphore
<b> sem_identifier resource </b>A semaphore resource identifier as returned
by sem_get.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="shm_attach" autocomplete_append="($key, $memsize = null, $perm = null);">
<reference>shm_attach($key, $memsize = null, $perm = null);
Creates or open a shared memory segment
<b> key int </b>A numeric shared memory segment ID
<b> memsize int[optional] </b>The memory size. If not provided, default to the
sysvshm.init_mem in the &amp;php.ini;, otherwise 10000
bytes.
<b> perm int[optional] </b>The optional permission bits. Default to 0666.
<b>returns</b>  int a shared memory segment identifier.
</reference></element>
<element pattern="shm_detach" autocomplete_append="($shm_identifier);">
<reference>shm_detach($shm_identifier);
Disconnects from shared memory segment
<b> shm_identifier int </b>A shared memory resource handle as returned by
shm_attach
<b>returns</b>  bool shm_detach always returns true.
</reference></element>
<element pattern="shm_get_var" autocomplete_append="($shm_identifier, $variable_key);">
<reference>shm_get_var($shm_identifier, $variable_key);
Returns a variable from shared memory
<b> shm_identifier int </b>Shared memory segment, obtained from shm_attach.
<b> variable_key int </b>The variable key.
<b>returns</b>  mixed the variable with the given key.
</reference></element>
<element pattern="shm_put_var" autocomplete_append="($shm_identifier, $variable_key, $variable);">
<reference>shm_put_var($shm_identifier, $variable_key, $variable);
Inserts or updates a variable in shared memory
<b> shm_identifier int </b>A shared memory resource handle as returned by
shm_attach
<b> variable_key int </b>The variable key.
<b> variable mixed </b>The variable. All variable-types
are supported.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="shm_remove_var" autocomplete_append="($shm_identifier, $variable_key);">
<reference>shm_remove_var($shm_identifier, $variable_key);
Removes a variable from shared memory
<b> shm_identifier int </b>The shared memory identifier as returned by
shm_attach
<b> variable_key int </b>The variable key.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="shm_remove" autocomplete_append="($shm_identifier);">
<reference>shm_remove($shm_identifier);
Removes shared memory from Unix systems
<b> shm_identifier int </b>The shared memory identifier as returned by
shm_attach
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="sesam_affected_rows"/>
<element pattern="sesam_commit"/>
<element pattern="sesam_connect"/>
<element pattern="sesam_diagnostic"/>
<element pattern="sesam_disconnect"/>
<element pattern="sesam_errormsg"/>
<element pattern="sesam_execimm"/>
<element pattern="sesam_fetch_array"/>
<element pattern="sesam_fetch_result"/>
<element pattern="sesam_fetch_row"/>
<element pattern="sesam_field_array"/>
<element pattern="sesam_field_name"/>
<element pattern="sesam_free_result"/>
<element pattern="sesam_num_fields"/>
<element pattern="sesam_query"/>
<element pattern="sesam_rollback"/>
<element pattern="sesam_seek_row"/>
<element pattern="sesam_settransaction"/>
<element pattern="session_pgsql_add_error"/>
<element pattern="session_pgsql_get_error"/>
<element pattern="session_pgsql_get_field"/>
<element pattern="session_pgsql_reset"/>
<element pattern="session_pgsql_set_field"/>
<element pattern="session_pgsql_status"/>
<element pattern="session_cache_expire" autocomplete_append="($new_cache_expire = null);">
<reference>session_cache_expire($new_cache_expire = null);
Return current cache expire
<b> new_cache_expire int[optional] </b>If new_cache_expire is given, the current cache
expire is replaced with new_cache_expire.
Setting new_cache_expire is of value only, if
session.cache_limiter is set to a value
different from nocache.
<b>returns</b>  int the current setting of session.cache_expire.
The value returned should be read in minutes, defaults to 180.
</reference></element>
<element pattern="session_cache_limiter" autocomplete_append="($cache_limiter = null);">
<reference>session_cache_limiter($cache_limiter = null);
Get and/or set the current cache limiter
<b> cache_limiter string[optional] </b>If cache_limiter is specified, the name of the
current cache limiter is changed to the new value.
<b>returns</b>  string the name of the current cache limiter.
</reference></element>
<element pattern="session_decode" autocomplete_append="($data);">
<reference>session_decode($data);
Decodes session data from a string
<b> data string </b>The encoded data to be stored.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="session_destroy" autocomplete_append="();">
<reference>session_destroy();
Destroys all data registered to a session
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="session_encode" autocomplete_append="();">
<reference>session_encode();
Encodes the current session data as a string
<b>returns</b>  string the contents of the current session encoded.
</reference></element>
<element pattern="session_get_cookie_params" autocomplete_append="();">
<reference>session_get_cookie_params();
Get the session cookie parameters
<b>returns</b>  array an array with the current session cookie information, the array
contains the following items:
"lifetime" - The lifetime of the cookie in seconds.
"path" - The path where information is stored.
"domain" - The domain of the cookie.
"secure" - The cookie should only be sent over secure connections.
"httponly" - The cookie can only be accessed through the HTTP protocol.
</reference></element>
<element pattern="session_id" autocomplete_append="($id = null);">
<reference>session_id($id = null);
Get and/or set the current session id
<b> id string[optional] </b>If id is specified, it will replace the current
session id. session_id needs to be called before
session_start for that purpose. Depending on the
session handler, not all characters are allowed within the session id.
For example, the file session handler only allows characters in the
range a-z, A-Z and 0-9!
When using session cookies, specifying an id
for session_id will always send a new cookie
when session_start is called, regardless if the
current session id is identical to the one being set.
<b>returns</b>  string session_id returns the session id for the current
session or the empty string ("") if there is no current
session (no current session id exists).
</reference></element>
<element pattern="session_is_registered" autocomplete_append="($name);">
<reference>session_is_registered($name);
Find out whether a global variable is registered in a session
<b> name string </b>The variable name.
<b>returns</b>  bool session_is_registered returns true if there is a
global variable with the name name registered in
the current session, false otherwise.
</reference></element>
<element pattern="session_module_name" autocomplete_append="($module = null);">
<reference>session_module_name($module = null);
Get and/or set the current session module
<b> module string[optional] </b>If module is specified, that module will be
used instead.
<b>returns</b>  string the name of the current session module.
</reference></element>
<element pattern="session_name" autocomplete_append="($name = null);">
<reference>session_name($name = null);
Get and/or set the current session name
<b> name string[optional] </b>The session name references the session id in cookies and URLs. It
should contain only alphanumeric characters; it should be short and
descriptive (i.e. for users with enabled cookie warnings).
If name is specified, the name of the current
session is changed to its value.
The session name can't consist of digits only, at least one letter
must be present. Otherwise a new session id is generated every time.
<b>returns</b>  string the name of the current session.
</reference></element>
<element pattern="session_regenerate_id" autocomplete_append="($delete_old_session = null);">
<reference>session_regenerate_id($delete_old_session = null);
Update the current session id with a newly generated one
<b> delete_old_session bool[optional] </b>Whether to delete the old associated session file or not. Defaults to
false.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="session_register" autocomplete_append="($name, $_ = null);">
<reference>session_register($name, $_ = null);
Register one or more global variables with the current session
<b> name mixed </b>A string holding the name of a variable or an array consisting of
variable names or other arrays.
<b> _ mixed[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="session_save_path" autocomplete_append="($path = null);">
<reference>session_save_path($path = null);
Get and/or set the current session save path
<b> path string[optional] </b>Session data path. If specified, the path to which data is saved will
be changed. session_save_path needs to be called
before session_start for that purpose.
On some operating systems, you may want to specify a path on a
filesystem that handles lots of small files efficiently. For example,
on Linux, reiserfs may provide better performance than ext2fs.
<b>returns</b>  string the path of the current directory used for data storage.
</reference></element>
<element pattern="session_set_cookie_params" autocomplete_append="($lifetime, $path = null, $domain = null, $secure = null, $httponly = null);">
<reference>session_set_cookie_params($lifetime, $path = null, $domain = null, $secure = null, $httponly = null);
Set the session cookie parameters
<b> lifetime int </b>Lifetime of the session cookie, defined in seconds.
<b> path string[optional] </b>Path on the domain where the cookie will work. Use a single 
slash ('/') for all paths on the domain.
<b> domain string[optional] </b>Cookie domain, for example 'www.php.net'. To make cookies visable 
on all subdomains then the domain must be prefixed with a dot like 
'.php.net'.
<b> secure bool[optional] </b>If true cookie will only be sent over secure connections.
<b> httponly bool[optional] </b>If set to true then PHP will attempt to send the httponly 
flag when setting the session cookie.
<b>returns</b>  void 
</reference></element>
<element pattern="session_set_save_handler" autocomplete_append="($open, $close, $read, $write, $destroy, $gc);">
<reference>session_set_save_handler($open, $close, $read, $write, $destroy, $gc);
Sets user-level session storage functions
<b> open callback </b>Open function, this works like a constructor in classes and is 
executed when the session is being opened. The open function 
expects two parameters, where the first is the save path and 
the second is the session name.
<b> close callback </b>Close function, this works like a destructor in classes and is 
executed when the session operation is done.
<b> read callback </b>Read function must return string value always to make save handler
work as expected. Return empty string if there is no data to read.
Return values from other handlers are converted to boolean expression.
true for success, false for failure.
<b> write callback </b>The "write" handler is not executed until after the output stream is
closed. Thus, output from debugging statements in the "write"
handler will never be seen in the browser. If debugging output is
necessary, it is suggested that the debug output be written to a
file instead.
<b> destroy callback </b>The destroy handler, this is executed when a session is destroyed with 
session_destroy and takes the session id as its 
only parameter.
<b> gc callback </b>The garbage collector, this is executed when the session garbage collector 
is executed and takes the max session lifetime as its only parameter.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="session_start" autocomplete_append="();">
<reference>session_start();
Initialize session data
<b>returns</b>  bool This function always returns true.
</reference></element>
<element pattern="session_unregister" autocomplete_append="($name);">
<reference>session_unregister($name);
Unregister a global variable from the current session
<b> name string </b>The variable name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="session_unset" autocomplete_append="();">
<reference>session_unset();
Free all session variables
<b>returns</b>  void 
</reference></element>
<element pattern="session_write_close" autocomplete_append="();">
<reference>session_write_close();
Write session data and end session
<b>returns</b>  void 
</reference></element>
<element pattern="shmop_close" autocomplete_append="($shmid);">
<reference>shmop_close($shmid);
Close shared memory block
<b> shmid int </b>The shared memory block identifier created by 
shmop_open
<b>returns</b>  void 
</reference></element>
<element pattern="shmop_delete" autocomplete_append="($shmid);">
<reference>shmop_delete($shmid);
Delete shared memory block
<b> shmid int </b>The shared memory block identifier created by 
shmop_open
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="shmop_open" autocomplete_append="($key, $flags, $mode, $size);">
<reference>shmop_open($key, $flags, $mode, $size);
Create or open shared memory block
<b> key int </b>System's id for the shared memory block.
Can be passed as a decimal or hex.
<b> flags string </b>The flags that you can use:
"a" for access (sets SHM_RDONLY for shmat)
use this flag when you need to open an existing shared memory
segment for read only
<b> mode int </b>The permissions that you wish to assign to your memory segment, those
are the same as permission for a file. Permissions need to be passed
in octal form, like for example 0644
<b> size int </b>The size of the shared memory block you wish to create in bytes
<b>returns</b>  int On success shmop_open will return an id that you can
use to access the shared memory segment you've created. false is 
returned on failure.
</reference></element>
<element pattern="shmop_read" autocomplete_append="($shmid, $start, $count);">
<reference>shmop_read($shmid, $start, $count);
Read data from shared memory block
<b> shmid int </b>The shared memory block identifier created by 
shmop_open
<b> start int </b>Offset from which to start reading
<b> count int </b>The number of bytes to read
<b>returns</b>  string the data or false on failure.
</reference></element>
<element pattern="shmop_size" autocomplete_append="($shmid);">
<reference>shmop_size($shmid);
Get size of shared memory block
<b> shmid int </b>The shared memory block identifier created by 
shmop_open
<b>returns</b>  int an int, which represents the number of bytes the shared memory
block occupies.
</reference></element>
<element pattern="shmop_write" autocomplete_append="($shmid, $data, $offset);">
<reference>shmop_write($shmid, $data, $offset);
Write data into shared memory block
<b> shmid int </b>The shared memory block identifier created by 
shmop_open
<b> data string </b>A string to write into shared memory block 
<b> offset int </b>Specifies where to start writing data inside the shared memory
segment.
<b>returns</b>  int The size of the written data, or false on 
failure.
</reference></element>
<element pattern="addAttribute"/>
<element pattern="addChild"/>
<element pattern="asXML"/>
<element pattern="attributes"/>
<element pattern="children"/>
<element pattern="__construct"/>
<element pattern="getDocNamespaces"/>
<element pattern="getName"/>
<element pattern="getNamespaces"/>
<element pattern="registerXPathNamespace"/>
<element pattern="xpath"/>
<element pattern="simplexml_import_dom" autocomplete_append="(DOMNode $node, $class_name = null);">
<reference>simplexml_import_dom(DOMNode $node, $class_name = null);
Get a &lt;literal&gt;SimpleXMLElement&lt;/literal&gt; object from a DOM node.
<b> node DOMNode </b>A DOM Element node
<b> class_name string[optional] </b>You may use this optional parameter so that
simplexml_import_dom will return an object of 
the specified class. That class should extend the 
SimpleXMLElement class.
<b>returns</b>  SimpleXMLElement a SimpleXMLElement or false on failure.
</reference></element>
<element pattern="simplexml_load_file" autocomplete_append="($filename, $class_name = null, $options = null, $ns = null, $is_prefix = null);">
<reference>simplexml_load_file($filename, $class_name = null, $options = null, $ns = null, $is_prefix = null);
Interprets an XML file into an object
<b> filename string </b>Path to the XML file
Libxml 2 unescapes the URI, so if you want to pass e.g.
b&amp;amp;c as the URI parameter a,
you have to call
simplexml_load_file(rawurlencode('http://example.com/?a=' .
urlencode('b&amp;amp;c'))). Since PHP 5.1.0 you don't need to do
this because PHP will do it for you.
<b> class_name string[optional] </b>You may use this optional parameter so that
simplexml_load_file will return an object of 
the specified class. That class should extend the 
SimpleXMLElement class.
<b> options int[optional] </b>Since PHP 5.1.0 and Libxml 2.6.0, you may also use the
options parameter to specify additional Libxml parameters.
<b> ns string[optional] </b><b> is_prefix bool[optional] </b><b>returns</b>  object an object of class SimpleXMLElement with
properties containing the data held within the XML document. On errors, it
will return false.
</reference></element>
<element pattern="simplexml_load_string" autocomplete_append="($data, $class_name = null, $options = null, $ns = null, $is_prefix = null);">
<reference>simplexml_load_string($data, $class_name = null, $options = null, $ns = null, $is_prefix = null);
Interprets a string of XML into an object
<b> data string </b>A well-formed XML string
<b> class_name string[optional] </b>You may use this optional parameter so that
simplexml_load_string will return an object of 
the specified class. That class should extend the 
SimpleXMLElement class.
<b> options int[optional] </b>Since PHP 5.1.0 and Libxml 2.6.0, you may also use the
options parameter to specify additional Libxml parameters.
<b> ns string[optional] </b><b> is_prefix bool[optional] </b><b>returns</b>  object an object of class SimpleXMLElement with
properties containing the data held within the xml document. On errors, it
will return false.
</reference></element>
<element pattern="snmp_get_quick_print"/>
<element pattern="snmp_get_valueretrieval"/>
<element pattern="snmp_read_mib"/>
<element pattern="snmp_set_enum_print"/>
<element pattern="snmp_set_oid_numeric_print"/>
<element pattern="snmp_set_oid_output_format"/>
<element pattern="snmp_set_quick_print"/>
<element pattern="snmp_set_valueretrieval"/>
<element pattern="snmpget"/>
<element pattern="snmpgetnext"/>
<element pattern="snmprealwalk"/>
<element pattern="snmpset"/>
<element pattern="snmpwalk"/>
<element pattern="snmpwalkoid"/>
<element pattern="is_soap_fault" autocomplete_append="($obj);">
<reference>is_soap_fault($obj);
Checks if SOAP call was failed
<b> obj mixed </b>The tested object.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="__call"/>
<element pattern="__construct"/>
<element pattern="__doRequest"/>
<element pattern="__getFunctions"/>
<element pattern="__getLastRequest"/>
<element pattern="__getLastRequestHeaders"/>
<element pattern="__getLastResponse"/>
<element pattern="__getLastResponseHeaders"/>
<element pattern="__getTypes"/>
<element pattern="__setCookie"/>
<element pattern="__soapCall"/>
<element pattern="__construct"/>
<element pattern="__construct"/>
<element pattern="__construct"/>
<element pattern="addFunction"/>
<element pattern="__construct"/>
<element pattern="fault"/>
<element pattern="getFunctions"/>
<element pattern="handle"/>
<element pattern="setClass"/>
<element pattern="setPersistence"/>
<element pattern="__construct"/>
<element pattern="use_soap_error_handler" autocomplete_append="($handler = null);">
<reference>use_soap_error_handler($handler = null);
Set whether to use the SOAP error handler and return the former value
<b> handler bool[optional] </b><b>returns</b>  bool 
</reference></element>
<element pattern="socket_accept" autocomplete_append="($socket);">
<reference>socket_accept($socket);
Accepts a connection on a socket
<b> socket resource </b>A valid socket resource created with socket_create.
<b>returns</b>  resource a new socket resource on success, or false on error. The actual
error code can be retrieved by calling
socket_last_error. This error code may be passed to
socket_strerror to get a textual explanation of the
error.
</reference></element>
<element pattern="socket_bind" autocomplete_append="($socket, $address, $port = null);">
<reference>socket_bind($socket, $address, $port = null);
Binds a name to a socket
<b> socket resource </b>A valid socket resource created with socket_create.
<b> address string </b>If the socket is of the AF_INET family, the
address is an IP in dotted-quad notation
(e.g. 127.0.0.1).
If the socket is of the AF_UNIX family, the
address is the path of a
Unix-domain socket (e.g. /tmp/my.sock).
<b> port int[optional] </b>The port parameter is only used when
connecting to an AF_INET socket, and
designates the port on the remote host to which a connection
should be made.
<b>returns</b>  bool Returns true on success or false on failure.
The error code can be retrieved with socket_last_error.
This code may be passed to socket_strerror to get a
textual explanation of the error.
</reference></element>
<element pattern="socket_clear_error" autocomplete_append="($socket = null);">
<reference>socket_clear_error($socket = null);
Clears the error on the socket or the last error code
<b> socket resource[optional] </b>A valid socket resource created with socket_create.
<b>returns</b>  void 
</reference></element>
<element pattern="socket_close" autocomplete_append="($socket);">
<reference>socket_close($socket);
Closes a socket resource
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b>returns</b>  void 
</reference></element>
<element pattern="socket_connect" autocomplete_append="($socket, $address, $port = null);">
<reference>socket_connect($socket, $address, $port = null);
Initiates a connection on a socket
<b> socket resource </b><b> address string </b>The address parameter is either an IPv4 address
in dotted-quad notation (e.g. 127.0.0.1) if 
socket is AF_INET, a valid 
IPv6 address (e.g. ::1) if IPv6 support is enabled and 
socket is AF_INET6
or the pathname of a Unix domain socket, if the socket family is
AF_UNIX.
<b> port int[optional] </b>The port parameter is only used and is mandatory
when connecting to an AF_INET or an 
AF_INET6 socket, and designates
the port on the remote host to which a connection should be made.
<b>returns</b>  bool Returns true on success or false on failure. The error code can be retrieved with
socket_last_error. This code may be passed to
socket_strerror to get a textual explanation of the
error.
If the socket is non-blocking then this function returns false with an
error Operation now in progress.
</reference></element>
<element pattern="socket_create_listen" autocomplete_append="($port, $backlog = null);">
<reference>socket_create_listen($port, $backlog = null);
Opens a socket on port to accept connections
<b> port int </b>The port on which to listen on all interfaces.
<b> backlog int[optional] </b>The backlog parameter defines the maximum length
the queue of pending connections may grow to.
SOMAXCONN may be passed as
backlog parameter, see
socket_listen for more information.
<b>returns</b>  resource socket_create_listen returns a new socket resource
on success or false on error. The error code can be retrieved with
socket_last_error. This code may be passed to
socket_strerror to get a textual explanation of the
error.
</reference></element>
<element pattern="socket_create_pair" autocomplete_append="($domain, $type, $protocol, array &amp;$fd);">
<reference>socket_create_pair($domain, $type, $protocol, array &amp;$fd);
Creates a pair of indistinguishable sockets and stores them in an array
<b> domain int </b>The domain parameter specifies the protocol
family to be used by the socket. See socket_create
for the full list.
<b> type int </b>The type parameter selects the type of communication
to be used by the socket. See socket_create for the 
full list.
<b> protocol int </b>The protocol parameter sets the specific
protocol within the specified domain to be used
when communicating on the returned socket. The proper value can be retrieved by
name by using getprotobyname. If
the desired protocol is TCP, or UDP the corresponding constants
SOL_TCP, and SOL_UDP
can also be used.
See socket_create for the full list of supported 
protocols.
<b> fd array </b>Reference to an array in which the two socket resources will be inserted.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="socket_create" autocomplete_append="($domain, $type, $protocol);">
<reference>socket_create($domain, $type, $protocol);
Create a socket (endpoint for communication)
<b> domain int </b>The domain parameter specifies the protocol
family to be used by the socket.

Available address/protocol families

AF_INET
IPv4 Internet based protocols. TCP and UDP are common protocols of
this protocol family.
AF_INET6
IPv6 Internet based protocols. TCP and UDP are common protocols of
this protocol family. Support added in PHP 5.0.0.
AF_UNIX
Local communication protocol family. High efficiency and low
overhead make it a great form of IPC (Interprocess Communication).

<b> type int </b>The type parameter selects the type of communication
to be used by the socket.

Available socket types

SOCK_STREAM
Provides sequenced, reliable, full-duplex, connection-based byte streams.
An out-of-band data transmission mechanism may be supported.
The TCP protocol is based on this socket type.
SOCK_DGRAM
Supports datagrams (connectionless, unreliable messages of a fixed maximum length).
The UDP protocol is based on this socket type.
SOCK_SEQPACKET
Provides a sequenced, reliable, two-way connection-based data transmission path for
datagrams of fixed maximum length; a consumer is required to read an
entire packet with each read call.
SOCK_RAW
Provides raw network protocol access. This special type of socket
can be used to manually construct any type of protocol. A common use
for this socket type is to perform ICMP requests (like ping,
traceroute, etc).
SOCK_RDM
Provides a reliable datagram layer that does not guarantee ordering.
This is most likely not implemented on your operating system.

<b> protocol int </b>The protocol parameter sets the specific
protocol within the specified domain to be used
when communicating on the returned socket. The proper value can be
retrieved by name by using getprotobyname. If
the desired protocol is TCP, or UDP the corresponding constants
SOL_TCP, and SOL_UDP
can also be used.

Common protocols

icmp
The Internet Control Message Protocol is used primarily by gateways
and hosts to report errors in datagram communication. The "ping"
command (present in most modern operating systems) is an example
application of ICMP.

udp
The User Datagram Protocol is a connectionless, unreliable,
protocol with fixed record lengths. Due to these aspects, UDP
requires a minimum amount of protocol overhead.

tcp
The Transmission Control Protocol is a reliable, connection based,
stream oriented, full duplex protocol. TCP guarantees that all data packets
will be received in the order in which they were sent. If any packet is somehow
lost during communication, TCP will automatically retransmit the packet until
the destination host acknowledges that packet. For reliability and performance
reasons, the TCP implementation itself decides the appropriate octet boundaries
of the underlying datagram communication layer. Therefore, TCP applications must
allow for the possibility of partial record transmission.

<b>returns</b>  resource socket_create returns a socket resource on success,
or false on error. The actual error code can be retrieved by calling
socket_last_error. This error code may be passed to
socket_strerror to get a textual explanation of the
error.
</reference></element>
<element pattern="socket_get_option" autocomplete_append="($socket, $level, $optname);">
<reference>socket_get_option($socket, $level, $optname);
Gets socket options for the socket
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b> level int </b>The level parameter specifies the protocol
level at which the option resides. For example, to retrieve options at
the socket level, a level parameter of
SOL_SOCKET would be used. Other levels, such as TCP, can be used by
specifying the protocol number of that level. Protocol numbers can be
found by using the getprotobyname function.
<b> optname int </b>
Available Socket Options:

SO_DEBUG
Reports whether debugging information is being recorded.
int
SO_BROADCAST
Reports whether transmission of broadcast messages is supported.
int
SO_REUSEADDR
Reports whether local addresses can be reused.
int
SO_KEEPALIVE
Reports whether connections are kept active with periodic transmission
of messages. If the connected socket fails to respond to these messages,
the connection is broken and processes writing to that socket are notified
with a SIGPIPE signal.
int
SO_LINGER
Reports whether the socket lingers on 
socket_close if data is present. By default, 
when the socket is closed, it attempts to send all unsent data.
In the case of a connection-oriented socket, 
socket_close will wait for its peer to
acknowledge the data. 
If l_onoff is non-zero and 
l_linger is zero, all the 
unsent data will be discarded and RST (reset) is sent to the 
peer in the case of a connection-oriented socket. 
On the other hand, if l_onoff is 
non-zero and l_linger is non-zero,
socket_close will block until all the data 
is sent or the time specified in l_linger
elapses. If the socket is non-blocking, 
socket_close will fail and return an error.

array. The array will contain two keys:
l_onoff and 
l_linger. 

SO_OOBINLINE
Reports whether the socket leaves out-of-band data inline.
int
SO_SNDBUF
Reports the size of the send buffer.
int
SO_RCVBUF
Reports the size of the receive buffer.
int
SO_ERROR
Reports information about error status and clears it.
int (cannot be set by socket_set_option)
SO_TYPE
Reports the socket type (e.g. 
SOCK_STREAM).
int (cannot be set by socket_set_option)
SO_DONTROUTE
Reports whether outgoing messages bypass the standard routing facilities.
int
SO_RCVLOWAT
Reports the minimum number of bytes to process for socket 
input operations.
int
SO_RCVTIMEO
Reports the timeout value for input operations.
array. The array will contain two keys:
sec which is the seconds part on the timeout
value and usec which is the microsecond part 
of the timeout value. 
SO_SNDTIMEO
Reports the timeout value specifying the amount of time that an output
function blocks because flow control prevents data from being sent.
array. The array will contain two keys:
sec which is the seconds part on the timeout
value and usec which is the microsecond part 
of the timeout value. 
SO_SNDLOWAT
Reports the minimum number of bytes to process for socket output operations.
int

<b>returns</b>  mixed the value of the given option, or false on errors.
</reference></element>
<element pattern="socket_getpeername" autocomplete_append="($socket, &amp;$address, &amp;$port = null);">
<reference>socket_getpeername($socket, &amp;$address, &amp;$port = null);
Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b> address string </b>If the given socket is of type AF_INET or
AF_INET6, socket_getpeername
will return the peers (remote) IP address in
appropriate notation (e.g. 127.0.0.1 or
fe80::1) in the address
parameter and, if the optional port parameter is
present, also the associated port.
If the given socket is of type AF_UNIX,
socket_getpeername will return the Unix filesystem
path (e.g. /var/run/daemon.sock) in the
address parameter.
<b> port int[optional] </b>If given, this will hold the port associated to
address.
<b>returns</b>  bool Returns true on success or false on failure. socket_getpeername may also return
false if the socket type is not any of AF_INET,
AF_INET6, or AF_UNIX, in which
case the last socket error code is not updated.
</reference></element>
<element pattern="socket_getsockname" autocomplete_append="($socket, &amp;$addr, &amp;$port = null);">
<reference>socket_getsockname($socket, &amp;$addr, &amp;$port = null);
Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type
<b> socket resource </b>A valid socket resource created with socket_create 
or socket_accept.
<b> addr string </b>If the given socket is of type AF_INET
or AF_INET6, socket_getsockname
will return the local IP address in appropriate notation (e.g.
127.0.0.1 or fe80::1) in the
address parameter and, if the optional
port parameter is present, also the associated port.
If the given socket is of type AF_UNIX,
socket_getsockname will return the Unix filesystem
path (e.g. /var/run/daemon.sock) in the
address parameter.
<b> port int[optional] </b>If provided, this will hold the associated port.
<b>returns</b>  bool Returns true on success or false on failure. socket_getsockname may also return
false if the socket type is not any of AF_INET,
AF_INET6, or AF_UNIX, in which
case the last socket error code is not updated.
</reference></element>
<element pattern="socket_last_error" autocomplete_append="($socket = null);">
<reference>socket_last_error($socket = null);
Returns the last error on the socket
<b> socket resource[optional] </b>A valid socket resource created with socket_create.
<b>returns</b>  int This function returns a socket error code.
</reference></element>
<element pattern="socket_listen" autocomplete_append="($socket, $backlog = null);">
<reference>socket_listen($socket, $backlog = null);
Listens for a connection on a socket
<b> socket resource </b>A valid socket resource created with socket_create.
<b> backlog int[optional] </b>A maximum of backlog incoming connections will be
queued for processing. If a connection request arrives with the queue
full the client may receive an error with an indication of
ECONNREFUSED, or, if the underlying protocol supports
retransmission, the request may be ignored so that retries may succeed.
The maximum number passed to the backlog
parameter highly depends on the underlying platform. On Linux, it is
silently truncated to SOMAXCONN. On win32, if
passed SOMAXCONN, the underlying service provider
responsible for the socket will set the backlog to a maximum
reasonable value. There is no standard provision to
find out the actual backlog value on this platform.
<b>returns</b>  bool Returns true on success or false on failure. The error code can be retrieved with
socket_last_error. This code may be passed to
socket_strerror to get a textual explanation of the
error.
</reference></element>
<element pattern="socket_read" autocomplete_append="($socket, $length, $type = null);">
<reference>socket_read($socket, $length, $type = null);
Reads a maximum of length bytes from a socket
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b> length int </b>The maximum number of bytes read is specified by the
length parameter. Otherwise you can use \r, \n,
or \0 to end reading (depending on the type
parameter, see below).
<b> type int[optional] </b>Optional type parameter is a named constant:
PHP_BINARY_READ (Default) - use the system
recv() function. Safe for reading binary data.
<b>returns</b>  string socket_read returns the data as a string on success,
or false on error (including if the remote host has closed the
connection). The error code can be retrieved with
socket_last_error. This code may be passed to
socket_strerror to get a textual representation of
the error.
socket_read returns a zero length string ("")
when there is no more data to read.
</reference></element>
<element pattern="socket_recv" autocomplete_append="($socket, &amp;$buf, $len, $flags);">
<reference>socket_recv($socket, &amp;$buf, $len, $flags);
Receives data from a connected socket
<b> socket resource </b><b> buf string </b><b> len int </b><b> flags int </b><b>returns</b>  int 
</reference></element>
<element pattern="socket_recvfrom" autocomplete_append="($socket, &amp;$buf, $len, $flags, &amp;$name, &amp;$port = null);">
<reference>socket_recvfrom($socket, &amp;$buf, $len, $flags, &amp;$name, &amp;$port = null);
Receives data from a socket whether or not it is connection-oriented
<b> socket resource </b>The socket must be a socket resource previously
created by socket_create().
<b> buf string </b>The data received will be fetched to the variable specified with
buf.
<b> len int </b>Up to len bytes will be fetched from remote host.
<b> flags int </b>The value of flags can be any combination of 
the following flags, joined with the binary OR (|)
operator.

Possible values for flags:

MSG_OOB
Process out-of-band data.
MSG_PEEK
Receive data from the beginning of the receive queue without
removing it from the queue.
MSG_WAITALL
Block until at least len are received.
However, if a signal is caught or the remote host disconnects, the
function may return less data.
MSG_DONTWAIT
With this flag set, the function returns even if it would normally
have blocked.

<b> name string </b>If the socket is of the type AF_UNIX type,
name is the path to the file. Else, for
unconnected sockets, name is the IP address of,
the remote host, or &amp;null; if the socket is connection-oriented.
<b> port int[optional] </b>This argument only applies to AF_INET and
AF_INET6 sockets, and specifies the remote port
from which the data is received. If the socket is connection-oriented,
port will be &amp;null;.
<b>returns</b>  int socket_recvfrom returns the number of bytes received,
or -1 if there was an error. The actual error code can be retrieved by 
calling socket_last_error. This error code may be
passed to socket_strerror to get a textual explanation
of the error.
</reference></element>
<element pattern="socket_select" autocomplete_append="(array &amp;$read, array &amp;$write, array &amp;$except, $tv_sec, $tv_usec = null);">
<reference>socket_select(array &amp;$read, array &amp;$write, array &amp;$except, $tv_sec, $tv_usec = null);
Runs the select() system call on the given arrays of sockets with a specified timeout
<b> read array </b>The sockets listed in the read array will be
watched to see if characters become available for reading (more
precisely, to see if a read will not block - in particular, a socket
resource is also ready on end-of-file, in which case a
socket_read will return a zero length string).
<b> write array </b>The sockets listed in the write array will be
watched to see if a write will not block.
<b> except array </b>The sockets listed in the except array will be
watched for exceptions.
<b> tv_sec int </b>The tv_sec and tv_usec
together form the timeout parameter. The
timeout is an upper bound on the amount of time
elapsed before socket_select return.
tv_sec may be zero , causing
socket_select to return immediately. This is useful
for polling. If tv_sec is &amp;null; (no timeout),
socket_select can block indefinitely.
<b> tv_usec int[optional] </b><b>returns</b>  int On success socket_select returns the number of
socket resources contained in the modified arrays, which may be zero if
the timeout expires before anything interesting happens. On error false
is returned. The error code can be retrieved with
socket_last_error.
Be sure to use the === operator when checking for an
error. Since the socket_select may return 0 the
comparison with == would evaluate to true:
Understanding socket_select's result
]]&gt;
</reference></element>
<element pattern="socket_send" autocomplete_append="($socket, $buf, $len, $flags);">
<reference>socket_send($socket, $buf, $len, $flags);
Sends data to a connected socket
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b> buf string </b>A buffer containing the data that will be sent to the remote host.
<b> len int </b>The number of bytes that will be sent to the remote host from 
buf.
<b> flags int </b>The value of flags can be any combination of 
the following flags, joined with the binary OR (|)
operator.

Possible values for flags:

MSG_OOB
Send OOB (out-of-band) data.

MSG_EOR
Indicate a record mark. The sent data completes the record.

MSG_EOF
Close the sender side of the socket and include an appropriate
notification of this at the end of the sent data. The sent data
completes the transaction.

MSG_DONTROUTE
Bypass routing, use direct interface.

<b>returns</b>  int 
</reference></element>
<element pattern="socket_sendto" autocomplete_append="($socket, $buf, $len, $flags, $addr, $port = null);">
<reference>socket_sendto($socket, $buf, $len, $flags, $addr, $port = null);
Sends a message to a socket, whether it is connected or not
<b> socket resource </b>A valid socket ressource created using socket_create.
<b> buf string </b>The sent data will be taken from buffer buf.
<b> len int </b>len bytes from buf will be
sent.
<b> flags int </b>The value of flags can be any combination of 
the following flags, joined with the binary OR (|)
operator.

Possible values for flags:

MSG_OOB
Send OOB (out-of-band) data.

MSG_EOR
Indicate a record mark. The sent data completes the record.

MSG_EOF
Close the sender side of the socket and include an appropriate
notification of this at the end of the sent data. The sent data
completes the transaction.

MSG_DONTROUTE
Bypass routing, use direct interface.

<b> addr string </b>IP address of the remote host.
<b> port int[optional] </b>port is the remote port number at which the data
will be sent.
<b>returns</b>  int socket_sendto returns the number of bytes sent to the
remote host or -1 if an error occured.
</reference></element>
<element pattern="socket_set_block" autocomplete_append="($socket);">
<reference>socket_set_block($socket);
Sets blocking mode on a socket resource
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="socket_set_nonblock" autocomplete_append="($socket);">
<reference>socket_set_nonblock($socket);
Sets nonblocking mode for file descriptor fd
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="socket_set_option" autocomplete_append="($socket, $level, $optname, $optval);">
<reference>socket_set_option($socket, $level, $optname, $optval);
Sets socket options for the socket
<b> socket resource </b>A valid socket resource created with socket_create
or socket_accept.
<b> level int </b>The level parameter specifies the protocol
level at which the option resides. For example, to retrieve options at
the socket level, a level parameter of
SOL_SOCKET would be used. Other levels, such as
TCP, can be used by specifying the protocol number of that level. 
Protocol numbers can be found by using the 
getprotobyname function.
<b> optname int </b>The available socket options are the same as those for the
socket_get_option function.
<b> optval mixed </b>The option value.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="socket_shutdown" autocomplete_append="($socket, $how = null);">
<reference>socket_shutdown($socket, $how = null);
Shuts down a socket for receiving, sending, or both
<b> socket resource </b>A valid socket resource created with socket_create.
<b> how int[optional] </b>

The value of how can be one of the following:

0 Shutdown socket reading
1 Shutdown socket writing
2 Shutdown socket reading and writing

<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="socket_strerror" autocomplete_append="($errno);">
<reference>socket_strerror($errno);
Return a string describing a socket error
<b> errno int </b>A valid socket error number, likely produced by 
socket_last_error.
<b>returns</b>  string the error message associated with the errno
parameter.
</reference></element>
<element pattern="socket_write" autocomplete_append="($socket, $buffer, $length = null);">
<reference>socket_write($socket, $buffer, $length = null);
Write to a socket
<b> socket resource </b><b> buffer string </b>The buffer to be written.
<b> length int[optional] </b>The optional parameter length can specify an
alternate length of bytes written to the socket. If this length is
greater then the buffer length, it is silently truncated to the length
of the buffer.
<b>returns</b>  int the number of bytes successfully written to the socket or false
one error. The error code can be retrieved with
socket_last_error. This code may be passed to
socket_strerror to get a textual explanation of the
error.
It is perfectly valid for socket_write to
return zero which means no bytes have been written. Be sure to use the
=== operator to check for false in case of an
error.
</reference></element>
<element pattern="class_implements" autocomplete_append="($class, $autoload = null);">
<reference>class_implements($class, $autoload = null);
Return the interfaces which are implemented by the given class
<b> class mixed </b>An object (class instance) or a string (class name).
<b> autoload bool[optional] </b>Whether to allow this function to load the class automatically through
the __autoload magic
method. Defaults to true.
<b>returns</b>  array An array on success, or false on error.
</reference></element>
<element pattern="class_parents" autocomplete_append="($class, $autoload = null);">
<reference>class_parents($class, $autoload = null);
Return the parent classes of the given class
<b> class mixed </b>An object (class instance) or a string (class name).
<b> autoload bool[optional] </b>Whether to allow this function to load the class automatically through
the __autoload magic
method. Defaults to true.
<b>returns</b>  array An array on success, or false on error.
</reference></element>
<element pattern="iterator_count" autocomplete_append="($iterator);">
<reference>iterator_count($iterator);
Count the elements in an iterator
<b> iterator IteratorAggregate </b>The iterator being counted.
<b>returns</b>  int The number of elements in iterator.
</reference></element>
<element pattern="iterator_to_array" autocomplete_append="($iterator, $use_keys = null);">
<reference>iterator_to_array($iterator, $use_keys = null);
Copy the iterator into an array
<b> iterator IteratorAggregate </b>The iterator being counted.
<b> use_keys bool[optional] </b><b>returns</b>  array The number of elements in iterator.
</reference></element>
<element pattern="spl_autoload_call" autocomplete_append="($class_name);">
<reference>spl_autoload_call($class_name);
Try all registered __autoload() function to load the requested class
<b> class_name string </b>The class name being searched.
<b>returns</b>  void 
</reference></element>
<element pattern="spl_autoload_extensions" autocomplete_append="($file_extensions = null);">
<reference>spl_autoload_extensions($file_extensions = null);
Register and return default file extensions for spl_autoload
<b> file_extensions string[optional] </b>When calling without an argument, it simply returns the current list
of extensions each separated by comma. To modify the list of file
extensions, simply invoke the functions with the new list of file
extensions to use in a single string with each extensions separated
by comma.
<b>returns</b>  string A comma delimitated list of default file extensions for
spl_autoload.
</reference></element>
<element pattern="spl_autoload_functions" autocomplete_append="();">
<reference>spl_autoload_functions();
Return all registered __autoload() functions
<b>returns</b>  array An array of all registered __autoload functions.
If the autoload stack is not activated then the return value is false.
If no function is registered the return value will be an empty array.
</reference></element>
<element pattern="spl_autoload_register" autocomplete_append="($autoload_function = null);">
<reference>spl_autoload_register($autoload_function = null);
Register given function as __autoload() implementation
<b> autoload_function callback[optional] </b>The autoload function being registered.
If no parameter is provided, then the default implementation of
spl_autoload will be registered. 
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="spl_autoload_unregister" autocomplete_append="($autoload_function);">
<reference>spl_autoload_unregister($autoload_function);
Unregister given function as __autoload() implementation
<b> autoload_function mixed </b>The autoload function being unregistered.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="spl_autoload" autocomplete_append="($class_name, $file_extensions = null);">
<reference>spl_autoload($class_name, $file_extensions = null);
Default implementation for __autoload()
<b> class_name string </b><b> file_extensions string[optional] </b>By default it checks all include paths to
contain filenames built up by the lowercase class name appended by the
filename extensions .inc and .php. 
<b>returns</b>  void 
</reference></element>
<element pattern="spl_classes" autocomplete_append="();">
<reference>spl_classes();
Return available SPL classes
<b>returns</b>  array 
</reference></element>
<element pattern="spl_object_hash" autocomplete_append="($obj);">
<reference>spl_object_hash($obj);
Return hash id for given object
<b> obj object </b><b>returns</b>  string A string that is unique for each object and is always the same for
the same object.
</reference></element>
<element pattern="sqlite_array_query" autocomplete_append="($query, $result_type = null, $decode_binary = null);">
<reference>sqlite_array_query($query, $result_type = null, $decode_binary = null);
Execute a query against a given database and returns an array
<b> query string </b>The query to be executed.
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> decode_binary bool[optional] &amp;sqlite.decode-bin;</b><b>returns</b>  array an array of the entire result set; false otherwise.
</reference></element>
<element pattern="sqlite_array_query" autocomplete_append="($query, $result_type = null, $decode_binary = null);">
<reference>sqlite_array_query($query, $result_type = null, $decode_binary = null);
Execute a query against a given database and returns an array
<b> query string </b>The query to be executed.
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> decode_binary bool[optional] &amp;sqlite.decode-bin;</b><b>returns</b>  array an array of the entire result set; false otherwise.
</reference></element>
<element pattern="arrayQuery"/>
<element pattern="sqlite_busy_timeout" autocomplete_append="($milliseconds);">
<reference>sqlite_busy_timeout($milliseconds);
Set busy timeout duration, or disable busy handlers
<b> milliseconds int </b>The number of milliseconds. When set to
0, busy handlers will be disabled and SQLite will
return immediately with a SQLITE_BUSY status code
if another process/thread has the database locked for an update.
PHP sets the default busy timeout to be 60 seconds when the database is
opened.
There are one thousand (1000) milliseconds in one second.
<b>returns</b>  void 
</reference></element>
<element pattern="busyTimeout"/>
<element pattern="sqlite_changes" autocomplete_append="();">
<reference>sqlite_changes();
Returns the number of rows that were changed by the most
recent SQL statement
<b>returns</b>  int 
</reference></element>
<element pattern="changes"/>
<element pattern="sqlite_close" autocomplete_append="($dbhandle);">
<reference>sqlite_close($dbhandle);
Closes an open SQLite database
<b> dbhandle resource </b>The SQLite Database resource; returned from sqlite_open
when used procedurally.
<b>returns</b>  void 
</reference></element>
<element pattern="sqlite_column" autocomplete_append="($index_or_name, $decode_binary = null);">
<reference>sqlite_column($index_or_name, $decode_binary = null);
Fetches a column from the current row of a result set
<b> index_or_name mixed </b>The column index or name to fetch.
<b> decode_binary bool[optional] &amp;sqlite.decode-bin;</b><b>returns</b>  mixed 
</reference></element>
<element pattern="column"/>
<element pattern="column"/>
<element pattern="sqlite_create_aggregate" autocomplete_append="($function_name, $step_func, $finalize_func, $num_args = null);">
<reference>sqlite_create_aggregate($function_name, $step_func, $finalize_func, $num_args = null);
Register an aggregating UDF for use in SQL statements
<b> function_name string </b>The name of the function used in SQL statements.
<b> step_func callback </b>Callback function called for each row of the result set.
<b> finalize_func callback </b>Callback function to aggregate the "stepped" data from each row.
<b> num_args int[optional] </b>Hint to the SQLite parser if the callback function accepts a
predetermined number of arguments.
<b>returns</b>  void 
</reference></element>
<element pattern="createAggregate"/>
<element pattern="sqlite_create_function" autocomplete_append="($function_name, $callback, $num_args = null);">
<reference>sqlite_create_function($function_name, $callback, $num_args = null);
Registers a "regular" User Defined Function for use in SQL statements
<b> function_name string </b>The name of the function used in SQL statements.
<b> callback callback </b>Callback function to handle the defined SQL function.
Callback functions should return a type understood by SQLite (i.e.
scalar type).
<b> num_args int[optional] </b>Hint to the SQLite parser if the callback function accepts a
predetermined number of arguments.
<b>returns</b>  void 
</reference></element>
<element pattern="createFunction"/>
<element pattern="sqlite_current" autocomplete_append="($result_type = null, $decode_binary = null);">
<reference>sqlite_current($result_type = null, $decode_binary = null);
Fetches the current row from a result set as an array
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> decode_binary bool[optional] &amp;sqlite.decode-bin;</b><b>returns</b>  array an array of the current row from a result set; false if the
current position is beyond the final row.
</reference></element>
<element pattern="current" autocomplete_append="(array &amp;$array);">
<reference>current(array &amp;$array);
Return the current element in an array
<b> array array </b>The array.
<b>returns</b>  mixed The current function simply returns the
value of the array element that's currently being pointed to by the
internal pointer. It does not move the pointer in any way. If the
internal pointer points beyond the end of the elements list or the array is 
empty, current returns false.
</reference></element>
<element pattern="current" autocomplete_append="(array &amp;$array);">
<reference>current(array &amp;$array);
Return the current element in an array
<b> array array </b>The array.
<b>returns</b>  mixed The current function simply returns the
value of the array element that's currently being pointed to by the
internal pointer. It does not move the pointer in any way. If the
internal pointer points beyond the end of the elements list or the array is 
empty, current returns false.
</reference></element>
<element pattern="sqlite_error_string" autocomplete_append="($error_code);">
<reference>sqlite_error_string($error_code);
Returns the textual description of an error code
<b> error_code int </b>The error code being used, which might be passed in from
sqlite_last_error.
<b>returns</b>  string a human readable description of the error_code,
as a string.
</reference></element>
<element pattern="sqlite_escape_string" autocomplete_append="($item);">
<reference>sqlite_escape_string($item);
Escapes a string for use as a query parameter
<b> item string </b>The string being quoted.
If the item contains a NUL
character, or if it begins with a character whose ordinal value is
0x01, PHP will apply a binary encoding scheme so that
you can safely store and retrieve binary data.
<b>returns</b>  string an escaped string for use in an SQLite SQL statement.
</reference></element>
<element pattern="sqlite_exec" autocomplete_append="($query, &amp;$error_msg = null);">
<reference>sqlite_exec($query, &amp;$error_msg = null);
Executes a result-less query against a given database
<b> query string </b>The query to be executed.
<b> error_msg string[optional] </b>The specified variable will be filled if an error occurs. This is
specially important because SQL syntax errors can't be fetched using
the sqlite_last_error function.
<b>returns</b>  bool This function will return a boolean result; true for success or false for failure.
If you need to run a query that returns rows, see sqlite_query.
</reference></element>
<element pattern="sqlite_exec" autocomplete_append="($query, &amp;$error_msg = null);">
<reference>sqlite_exec($query, &amp;$error_msg = null);
Executes a result-less query against a given database
<b> query string </b>The query to be executed.
<b> error_msg string[optional] </b>The specified variable will be filled if an error occurs. This is
specially important because SQL syntax errors can't be fetched using
the sqlite_last_error function.
<b>returns</b>  bool This function will return a boolean result; true for success or false for failure.
If you need to run a query that returns rows, see sqlite_query.
</reference></element>
<element pattern="queryExec"/>
<element pattern="sqlite_factory" autocomplete_append="($filename, $mode = null, &amp;$error_message = null);">
<reference>sqlite_factory($filename, $mode = null, &amp;$error_message = null);
Opens a SQLite database and returns a SQLiteDatabase object
<b> filename string </b>The filename of the SQLite database.
<b> mode int[optional] </b>The mode of the file. Intended to be used to open the database in
read-only mode. Presently, this parameter is ignored by the sqlite
library. The default value for mode is the octal value
0666 and this is the recommended value.
<b> error_message string[optional] </b>Passed by reference and is set to hold a descriptive error message
explaining why the database could not be opened if there was an error.
<b>returns</b>  SQLiteDatabase a SQLiteDatabase object on success, &amp;null; on error.
</reference></element>
<element pattern="sqlite_fetch_all" autocomplete_append="($result_type = null, $decode_binary = null);">
<reference>sqlite_fetch_all($result_type = null, $decode_binary = null);
Fetches all rows from a result set as an array of arrays
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> decode_binary bool[optional] &amp;sqlite.decode-bin;</b><b>returns</b>  array an array of the remaining rows in a result set. If called right
after sqlite_query, it returns all rows. If called
after sqlite_fetch_array, it returns the rest. If
there are no rows in a result set, it returns an empty array.
</reference></element>
<element pattern="fetchAll"/>
<element pattern="fetchAll"/>
<element pattern="sqlite_fetch_array" autocomplete_append="($result_type = null, $decode_binary = null);">
<reference>sqlite_fetch_array($result_type = null, $decode_binary = null);
Fetches the next row from a result set as an array
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> decode_binary bool[optional] &amp;sqlite.decode-bin;</b><b>returns</b>  array an array of the next row from a result set; false if the
next position is beyond the final row.
</reference></element>
<element pattern="fetch"/>
<element pattern="fetch"/>
<element pattern="sqlite_fetch_column_types" autocomplete_append="($table_name, $result_type = null);">
<reference>sqlite_fetch_column_types($table_name, $result_type = null);
Return an array of column types from a particular table
<b> table_name string </b>The table name to query.
<b> result_type int[optional] </b>The optional result_type parameter accepts a
constant and determines how the returned array will be indexed. Using
SQLITE_ASSOC will return only associative indices
(named fields) while SQLITE_NUM will return only
numerical indices (ordinal field numbers).
SQLITE_BOTH will return both associative and
numerical indices. SQLITE_ASSOC is the default for
this function.
<b>returns</b>  array an array of column data types; false on error.
</reference></element>
<element pattern="fetchColumnTypes"/>
<element pattern="sqlite_fetch_object" autocomplete_append="($class_name = null, array $ctor_params = null, $decode_binary = null);">
<reference>sqlite_fetch_object($class_name = null, array $ctor_params = null, $decode_binary = null);
Fetches the next row from a result set as an object
<b> class_name string[optional] </b><b> ctor_params array[optional] </b><b> decode_binary bool[optional] </b><b>returns</b>  object 
</reference></element>
<element pattern="fetchObject"/>
<element pattern="fetchObject"/>
<element pattern="sqlite_fetch_single" autocomplete_append="($decode_binary = null);">
<reference>sqlite_fetch_single($decode_binary = null);
Fetches the first column of a result set as a string
<b> decode_binary bool[optional] &amp;sqlite.decode-bin;</b><b>returns</b>  string 
</reference></element>
<element pattern="fetchSingle"/>
<element pattern="fetchSingle"/>
<element pattern="sqlite_field_name" autocomplete_append="($field_index);">
<reference>sqlite_field_name($field_index);
Returns the name of a particular field
<b> field_index int </b>The ordinal column number in the result set.
<b>returns</b>  string the name of a field in an SQLite result set, given the ordinal
column number; false on error.
</reference></element>
<element pattern="fieldName"/>
<element pattern="fieldName"/>
<element pattern="sqlite_has_more" autocomplete_append="($result);">
<reference>sqlite_has_more($result);
Finds whether or not more rows are available
<b> result resource </b>The SQLite result resource.
<b>returns</b>  bool true if there are more rows available from the
result handle, or false otherwise.
</reference></element>
<element pattern="sqlite_has_prev" autocomplete_append="();">
<reference>sqlite_has_prev();
Returns whether or not a previous row is available
<b>returns</b>  bool true if there are more previous rows available from the
result handle, or false otherwise.
</reference></element>
<element pattern="hasPrev"/>
<element pattern="sqlite_key"/>
<element pattern="key" autocomplete_append="(array &amp;$array);">
<reference>key(array &amp;$array);
Fetch a key from an array
<b> array array </b>The array.
<b>returns</b>  mixed the index.
</reference></element>
<element pattern="sqlite_last_error" autocomplete_append="();">
<reference>sqlite_last_error();
Returns the error code of the last error for a database
<b>returns</b>  int 
</reference></element>
<element pattern="lastError"/>
<element pattern="sqlite_last_insert_rowid" autocomplete_append="();">
<reference>sqlite_last_insert_rowid();
Returns the rowid of the most recently inserted row
<b>returns</b>  int 
</reference></element>
<element pattern="lastInsertRowid"/>
<element pattern="sqlite_libencoding" autocomplete_append="();">
<reference>sqlite_libencoding();
Returns the encoding of the linked SQLite library
<b>returns</b>  string 
</reference></element>
<element pattern="sqlite_libversion" autocomplete_append="();">
<reference>sqlite_libversion();
Returns the version of the linked SQLite library
<b>returns</b>  string 
</reference></element>
<element pattern="sqlite_next" autocomplete_append="();">
<reference>sqlite_next();
Seek to the next row number
<b>returns</b>  bool true on success, or false if there are no more rows.
</reference></element>
<element pattern="next" autocomplete_append="(array &amp;$array);">
<reference>next(array &amp;$array);
Advance the internal array pointer of an array
<b> array array </b>The array being affected.
<b>returns</b>  mixed the array value in the next place that's pointed to by the
internal array pointer, or false if there are no more elements.
</reference></element>
<element pattern="next" autocomplete_append="(array &amp;$array);">
<reference>next(array &amp;$array);
Advance the internal array pointer of an array
<b> array array </b>The array being affected.
<b>returns</b>  mixed the array value in the next place that's pointed to by the
internal array pointer, or false if there are no more elements.
</reference></element>
<element pattern="sqlite_num_fields" autocomplete_append="();">
<reference>sqlite_num_fields();
Returns the number of fields in a result set
<b>returns</b>  int 
</reference></element>
<element pattern="numFields"/>
<element pattern="numFields"/>
<element pattern="sqlite_num_rows" autocomplete_append="();">
<reference>sqlite_num_rows();
Returns the number of rows in a buffered result set
<b>returns</b>  int 
</reference></element>
<element pattern="numRows"/>
<element pattern="sqlite_open" autocomplete_append="($filename, $mode = null, &amp;$error_message = null);">
<reference>sqlite_open($filename, $mode = null, &amp;$error_message = null);
Opens a SQLite database and create the database if it does not exist
<b> filename string </b>The filename of the SQLite database. If the file does not exist, SQLite
will attempt to create it. PHP must have write permissions to the file
if data is inserted, the database schema is modified or to create the
database if it does not exist.
<b> mode int[optional] </b>The mode of the file. Intended to be used to open the database in
read-only mode. Presently, this parameter is ignored by the sqlite
library. The default value for mode is the octal value
0666 and this is the recommended value.
<b> error_message string[optional] </b>Passed by reference and is set to hold a descriptive error message
explaining why the database could not be opened if there was an error.
<b>returns</b>  resource a resource (database handle) on success, false on error.
</reference></element>
<element pattern="__construct"/>
<element pattern="sqlite_popen" autocomplete_append="($filename, $mode = null, &amp;$error_message = null);">
<reference>sqlite_popen($filename, $mode = null, &amp;$error_message = null);
Opens a persistent handle to an SQLite database and create the database if it does not exist
<b> filename string </b>The filename of the SQLite database. If the file does not exist, SQLite
will attempt to create it. PHP must have write permissions to the file
if data is inserted, the database schema is modified or to create the
database if it does not exist.
<b> mode int[optional] </b>The mode of the file. Intended to be used to open the database in
read-only mode. Presently, this parameter is ignored by the sqlite
library. The default value for mode is the octal value
0666 and this is the recommended value.
<b> error_message string[optional] </b>Passed by reference and is set to hold a descriptive error message
explaining why the database could not be opened if there was an error.
<b>returns</b>  resource a resource (database handle) on success, false on error.
</reference></element>
<element pattern="sqlite_prev" autocomplete_append="();">
<reference>sqlite_prev();
Seek to the previous row number of a result set
<b>returns</b>  bool true on success, or false if there are no more previous rows.
</reference></element>
<element pattern="prev" autocomplete_append="(array &amp;$array);">
<reference>prev(array &amp;$array);
Rewind the internal array pointer
<b> array array </b>The input array.
<b>returns</b>  mixed the array value in the previous place that's pointed to by
the internal array pointer, or false if there are no more
elements.
</reference></element>
<element pattern="sqlite_query" autocomplete_append="($query, $result_type = null, &amp;$error_msg = null);">
<reference>sqlite_query($query, $result_type = null, &amp;$error_msg = null);
Executes a query against a given database and returns a result handle
<b> query string </b>The query to be executed.
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> error_msg string[optional] </b>The specified variable will be filled if an error occurs. This is
specially important because SQL syntax errors can't be fetched using
the sqlite_last_error function.
<b>returns</b>  SQLiteResult This function will return a result handle or false on failure.
For queries that return rows, the result handle can then be used with
functions such as sqlite_fetch_array and
sqlite_seek.
Regardless of the query type, this function will return false if the
query failed.
sqlite_query returns a buffered, seekable result
handle. This is useful for reasonably small queries where you need to
be able to randomly access the rows. Buffered result handles will
allocate memory to hold the entire result and will not return until it
has been fetched. If you only need sequential access to the data, it is
recommended that you use the much higher performance
sqlite_unbuffered_query instead.
</reference></element>
<element pattern="sqlite_query" autocomplete_append="($query, $result_type = null, &amp;$error_msg = null);">
<reference>sqlite_query($query, $result_type = null, &amp;$error_msg = null);
Executes a query against a given database and returns a result handle
<b> query string </b>The query to be executed.
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> error_msg string[optional] </b>The specified variable will be filled if an error occurs. This is
specially important because SQL syntax errors can't be fetched using
the sqlite_last_error function.
<b>returns</b>  SQLiteResult This function will return a result handle or false on failure.
For queries that return rows, the result handle can then be used with
functions such as sqlite_fetch_array and
sqlite_seek.
Regardless of the query type, this function will return false if the
query failed.
sqlite_query returns a buffered, seekable result
handle. This is useful for reasonably small queries where you need to
be able to randomly access the rows. Buffered result handles will
allocate memory to hold the entire result and will not return until it
has been fetched. If you only need sequential access to the data, it is
recommended that you use the much higher performance
sqlite_unbuffered_query instead.
</reference></element>
<element pattern="query"/>
<element pattern="sqlite_rewind" autocomplete_append="();">
<reference>sqlite_rewind();
Seek to the first row number
<b>returns</b>  bool false if there are no rows in the result set, true otherwise.
</reference></element>
<element pattern="rewind" autocomplete_append="($handle);">
<reference>rewind($handle);
Rewind the position of a file pointer
<b> handle resource </b>The file pointer must be valid, and must point to a file
successfully opened by fopen.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="sqlite_seek" autocomplete_append="($rownum);">
<reference>sqlite_seek($rownum);
Seek to a particular row number of a buffered result set
<b> rownum int </b>The ordinal row number to seek to. The row number is zero-based (0 is
the first row).
&amp;sqlite.no-unbuffered;
<b>returns</b>  bool false if the row does not exist, true otherwise.
</reference></element>
<element pattern="seek"/>
<element pattern="sqlite_single_query" autocomplete_append="($query, $first_row_only = null, $decode_binary = null);">
<reference>sqlite_single_query($query, $first_row_only = null, $decode_binary = null);
Executes a query and returns either an array for one single column or the value of the first row
<b> query string </b><b> first_row_only bool[optional] </b><b> decode_binary bool[optional] </b><b>returns</b>  array 
</reference></element>
<element pattern="singleQuery"/>
<element pattern="sqlite_udf_decode_binary" autocomplete_append="($data);">
<reference>sqlite_udf_decode_binary($data);
Decode binary data passed as parameters to an UDF
<b> data string </b>The encoded data that will be decoded, data that was applied by either
sqlite_udf_encode_binary or
sqlite_escape_string. 
<b>returns</b>  string The decoded string.
</reference></element>
<element pattern="sqlite_udf_encode_binary" autocomplete_append="($data);">
<reference>sqlite_udf_encode_binary($data);
Encode binary data before returning it from an UDF
<b> data string </b>The string being encoded.
<b>returns</b>  string The encoded string.
</reference></element>
<element pattern="sqlite_unbuffered_query" autocomplete_append="($query, $result_type = null, &amp;$error_msg = null);">
<reference>sqlite_unbuffered_query($query, $result_type = null, &amp;$error_msg = null);
Execute a query that does not prefetch and buffer all data
<b> query string </b>The query to be executed.
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> error_msg string[optional] </b>The specified variable will be filled if an error occurs. This is
specially important because SQL syntax errors can't be fetched using
the sqlite_last_error function.
<b>returns</b>  SQLiteUnbuffered a result handle or false on failure.
sqlite_unbuffered_query returns a sequential
forward-only result set that can only be used to read each row, one after
the other.
</reference></element>
<element pattern="sqlite_unbuffered_query" autocomplete_append="($query, $result_type = null, &amp;$error_msg = null);">
<reference>sqlite_unbuffered_query($query, $result_type = null, &amp;$error_msg = null);
Execute a query that does not prefetch and buffer all data
<b> query string </b>The query to be executed.
<b> result_type int[optional] &amp;sqlite.result-type;</b><b> error_msg string[optional] </b>The specified variable will be filled if an error occurs. This is
specially important because SQL syntax errors can't be fetched using
the sqlite_last_error function.
<b>returns</b>  SQLiteUnbuffered a result handle or false on failure.
sqlite_unbuffered_query returns a sequential
forward-only result set that can only be used to read each row, one after
the other.
</reference></element>
<element pattern="unbufferedQuery"/>
<element pattern="sqlite_valid" autocomplete_append="();">
<reference>sqlite_valid();
Returns whether more rows are available
<b>returns</b>  bool true if there are more rows available from the
result handle, or false otherwise.
</reference></element>
<element pattern="valid"/>
<element pattern="valid"/>
<element pattern="sqliteCreateAggregate"/>
<element pattern="sqliteCreateFunction"/>
<element pattern="ssh2_auth_hostbased_file"/>
<element pattern="ssh2_auth_none"/>
<element pattern="ssh2_auth_password"/>
<element pattern="ssh2_auth_pubkey_file"/>
<element pattern="ssh2_connect"/>
<element pattern="ssh2_exec"/>
<element pattern="ssh2_fetch_stream"/>
<element pattern="ssh2_fingerprint"/>
<element pattern="ssh2_methods_negotiated"/>
<element pattern="ssh2_publickey_add"/>
<element pattern="ssh2_publickey_init"/>
<element pattern="ssh2_publickey_list"/>
<element pattern="ssh2_publickey_remove"/>
<element pattern="ssh2_scp_recv"/>
<element pattern="ssh2_scp_send"/>
<element pattern="ssh2_sftp_lstat"/>
<element pattern="ssh2_sftp_mkdir"/>
<element pattern="ssh2_sftp_readlink"/>
<element pattern="ssh2_sftp_realpath"/>
<element pattern="ssh2_sftp_rename"/>
<element pattern="ssh2_sftp_rmdir"/>
<element pattern="ssh2_sftp_stat"/>
<element pattern="ssh2_sftp_symlink"/>
<element pattern="ssh2_sftp_unlink"/>
<element pattern="ssh2_sftp"/>
<element pattern="ssh2_shell"/>
<element pattern="ssh2_tunnel"/>
<element pattern="stats_absolute_deviation"/>
<element pattern="stats_cdf_beta"/>
<element pattern="stats_cdf_binomial"/>
<element pattern="stats_cdf_cauchy"/>
<element pattern="stats_cdf_chisquare"/>
<element pattern="stats_cdf_exponential"/>
<element pattern="stats_cdf_f"/>
<element pattern="stats_cdf_gamma"/>
<element pattern="stats_cdf_laplace"/>
<element pattern="stats_cdf_logistic"/>
<element pattern="stats_cdf_negative_binomial"/>
<element pattern="stats_cdf_noncentral_chisquare"/>
<element pattern="stats_cdf_noncentral_f"/>
<element pattern="stats_cdf_poisson"/>
<element pattern="stats_cdf_t"/>
<element pattern="stats_cdf_uniform"/>
<element pattern="stats_cdf_weibull"/>
<element pattern="stats_covariance"/>
<element pattern="stats_den_uniform"/>
<element pattern="stats_dens_beta"/>
<element pattern="stats_dens_cauchy"/>
<element pattern="stats_dens_chisquare"/>
<element pattern="stats_dens_exponential"/>
<element pattern="stats_dens_f"/>
<element pattern="stats_dens_gamma"/>
<element pattern="stats_dens_laplace"/>
<element pattern="stats_dens_logistic"/>
<element pattern="stats_dens_negative_binomial"/>
<element pattern="stats_dens_normal"/>
<element pattern="stats_dens_pmf_binomial"/>
<element pattern="stats_dens_pmf_hypergeometric"/>
<element pattern="stats_dens_pmf_poisson"/>
<element pattern="stats_dens_t"/>
<element pattern="stats_dens_weibull"/>
<element pattern="stats_harmonic_mean"/>
<element pattern="stats_kurtosis"/>
<element pattern="stats_rand_gen_beta"/>
<element pattern="stats_rand_gen_chisquare"/>
<element pattern="stats_rand_gen_exponential"/>
<element pattern="stats_rand_gen_f"/>
<element pattern="stats_rand_gen_funiform"/>
<element pattern="stats_rand_gen_gamma"/>
<element pattern="stats_rand_gen_ibinomial_negative"/>
<element pattern="stats_rand_gen_ibinomial"/>
<element pattern="stats_rand_gen_int"/>
<element pattern="stats_rand_gen_ipoisson"/>
<element pattern="stats_rand_gen_iuniform"/>
<element pattern="stats_rand_gen_noncenral_chisquare"/>
<element pattern="stats_rand_gen_noncentral_f"/>
<element pattern="stats_rand_gen_noncentral_t"/>
<element pattern="stats_rand_gen_normal"/>
<element pattern="stats_rand_gen_t"/>
<element pattern="stats_rand_get_seeds"/>
<element pattern="stats_rand_phrase_to_seeds"/>
<element pattern="stats_rand_ranf"/>
<element pattern="stats_rand_setall"/>
<element pattern="stats_skew"/>
<element pattern="stats_standard_deviation"/>
<element pattern="stats_stat_binomial_coef"/>
<element pattern="stats_stat_correlation"/>
<element pattern="stats_stat_gennch"/>
<element pattern="stats_stat_independent_t"/>
<element pattern="stats_stat_innerproduct"/>
<element pattern="stats_stat_noncentral_t"/>
<element pattern="stats_stat_paired_t"/>
<element pattern="stats_stat_percentile"/>
<element pattern="stats_stat_powersum"/>
<element pattern="stats_variance"/>
<element pattern="my_notifier"/>
<element pattern="stream_bucket_append" autocomplete_append="($brigade, $bucket);">
<reference>stream_bucket_append($brigade, $bucket);
Append bucket to brigade
<b> brigade resource </b><b> bucket resource </b><b>returns</b>  void 
</reference></element>
<element pattern="stream_bucket_make_writeable" autocomplete_append="($brigade);">
<reference>stream_bucket_make_writeable($brigade);
Return a bucket object from the brigade for operating on
<b> brigade resource </b><b>returns</b>  object 
</reference></element>
<element pattern="stream_bucket_new" autocomplete_append="($stream, $buffer);">
<reference>stream_bucket_new($stream, $buffer);
Create a new bucket for use on the current stream
<b> stream resource </b><b> buffer string </b><b>returns</b>  object 
</reference></element>
<element pattern="stream_bucket_prepend" autocomplete_append="($brigade, $bucket);">
<reference>stream_bucket_prepend($brigade, $bucket);
Prepend bucket to brigade
<b> brigade resource </b><b> bucket resource </b><b>returns</b>  void 
</reference></element>
<element pattern="stream_context_create" autocomplete_append="(array $options = null, array $params = null);">
<reference>stream_context_create(array $options = null, array $params = null);
Create a streams context
<b> options array[optional] </b>Must be an associative array of associative arrays in the format
$arr['wrapper']['option'] = $value.
Default to an empty array.
<b> params array[optional] </b>Must be an associative array in the format
$arr['parameter'] = $value.
Refer to stream_context_set_params for
a listing of standard stream parameters.
<b>returns</b>  resource A stream context resource.
</reference></element>
<element pattern="stream_context_get_default" autocomplete_append="($options);">
<reference>stream_context_get_default($options);
Retreive the default streams context
<b> options[optional]</b></reference></element>
<element pattern="stream_context_get_options" autocomplete_append="($stream_or_context);">
<reference>stream_context_get_options($stream_or_context);
Retrieve options for a stream/wrapper/context
<b> stream_or_context</b></reference></element>
<element pattern="stream_context_set_option" autocomplete_append="($stream_or_context, $wrappername, $optionname, $value);">
<reference>stream_context_set_option($stream_or_context, $wrappername, $optionname, $value);
Sets an option for a stream/wrapper/context
<b> stream_or_context</b><b> wrappername</b><b> optionname</b><b> value</b></reference></element>
<element pattern="stream_context_set_option" autocomplete_append="($stream_or_context, $wrappername, $optionname, $value);">
<reference>stream_context_set_option($stream_or_context, $wrappername, $optionname, $value);
Sets an option for a stream/wrapper/context
<b> stream_or_context</b><b> wrappername</b><b> optionname</b><b> value</b></reference></element>
<element pattern="stream_context_set_params" autocomplete_append="($stream_or_context, $options);">
<reference>stream_context_set_params($stream_or_context, $options);
Set parameters for a stream/wrapper/context
<b> stream_or_context</b><b> options</b></reference></element>
<element pattern="stream_copy_to_stream" autocomplete_append="($source, $dest, $maxlength = null, $offset = null);">
<reference>stream_copy_to_stream($source, $dest, $maxlength = null, $offset = null);
Copies data from one stream to another
<b> source resource </b>The source stream
<b> dest resource </b>The destination stream
<b> maxlength int[optional] </b>Maximum bytes to copy
<b> offset int[optional] </b>The offset where to start to copy data
<b>returns</b>  int the total count of bytes copied.
</reference></element>
<element pattern="stream_encoding"/>
<element pattern="stream_filter_append" autocomplete_append="($stream, $filtername, $read_write, $filterparams);">
<reference>stream_filter_append($stream, $filtername, $read_write, $filterparams);
Attach a filter to a stream
<b> stream</b><b> filtername</b><b> read_write[optional]</b><b> filterparams[optional]</b></reference></element>
<element pattern="stream_filter_prepend" autocomplete_append="($stream, $filtername, $read_write, $filterparams);">
<reference>stream_filter_prepend($stream, $filtername, $read_write, $filterparams);
Attach a filter to a stream
<b> stream</b><b> filtername</b><b> read_write[optional]</b><b> filterparams[optional]</b></reference></element>
<element pattern="stream_filter_register" autocomplete_append="($filtername, $classname);">
<reference>stream_filter_register($filtername, $classname);
Register a stream filter implemented as a PHP class derived from &lt;literal&gt;php_user_filter&lt;/literal&gt;
<b> filtername</b><b> classname</b></reference></element>
<element pattern="filter"/>
<element pattern="filter"/>
<element pattern="onCreate"/>
<element pattern="onClose"/>
<element pattern="stream_filter_remove" autocomplete_append="($stream_filter);">
<reference>stream_filter_remove($stream_filter);
Remove a filter from a stream
<b> stream_filter</b></reference></element>
<element pattern="stream_get_contents" autocomplete_append="($source, $maxlen, $offset);">
<reference>stream_get_contents($source, $maxlen, $offset);
Reads remainder of a stream into a string
<b> source</b><b> maxlen[optional]</b><b> offset[optional]</b></reference></element>
<element pattern="stream_get_filters" autocomplete_append="();">
<reference>stream_get_filters();
Retrieve list of registered filters
</reference></element>
<element pattern="stream_get_line" autocomplete_append="($stream, $maxlen, $ending);">
<reference>stream_get_line($stream, $maxlen, $ending);
Gets line from stream resource up to a given delimiter
<b> stream</b><b> maxlen</b><b> ending[optional]</b></reference></element>
<element pattern="stream_get_meta_data" autocomplete_append="($fp);">
<reference>stream_get_meta_data($fp);
Retrieves header/meta data from streams/file pointers
<b> fp</b></reference></element>
<element pattern="stream_get_transports" autocomplete_append="();">
<reference>stream_get_transports();
Retrieve list of registered socket transports
</reference></element>
<element pattern="stream_get_wrappers" autocomplete_append="();">
<reference>stream_get_wrappers();
Retrieve list of registered streams
</reference></element>
<element pattern="stream_resolve_include_path"/>
<element pattern="stream_select" autocomplete_append="(&amp;$read_streams, &amp;$write_streams, &amp;$except_streams, $tv_sec, $tv_usec);">
<reference>stream_select(&amp;$read_streams, &amp;$write_streams, &amp;$except_streams, $tv_sec, $tv_usec);
Runs the equivalent of the select() system call on the given
arrays of streams with a timeout specified by tv_sec and tv_usec
<b> read_streams</b><b> write_streams</b><b> except_streams</b><b> tv_sec</b><b> tv_usec[optional]</b></reference></element>
<element pattern="stream_set_blocking" autocomplete_append="($socket, $mode);">
<reference>stream_set_blocking($socket, $mode);
Set blocking/non-blocking mode on a stream
<b> socket</b><b> mode</b></reference></element>
<element pattern="stream_set_timeout" autocomplete_append="($stream, $seconds, $microseconds);">
<reference>stream_set_timeout($stream, $seconds, $microseconds);
Set timeout period on a stream
<b> stream</b><b> seconds</b><b> microseconds</b></reference></element>
<element pattern="stream_set_write_buffer" autocomplete_append="($fp, $buffer);">
<reference>stream_set_write_buffer($fp, $buffer);
Sets file buffering on the given stream
<b> fp</b><b> buffer</b></reference></element>
<element pattern="stream_socket_accept" autocomplete_append="($serverstream, $timeout, &amp;$peername);">
<reference>stream_socket_accept($serverstream, $timeout, &amp;$peername);
Accept a connection on a socket created by &lt;function&gt;stream_socket_server&lt;/function&gt;
<b> serverstream</b><b> timeout[optional]</b><b> peername[optional]</b></reference></element>
<element pattern="stream_socket_client" autocomplete_append="($remoteaddress, &amp;$errcode, &amp;$errstring, $timeout, $flags, $context);">
<reference>stream_socket_client($remoteaddress, &amp;$errcode, &amp;$errstring, $timeout, $flags, $context);
Open Internet or Unix domain socket connection
<b> remoteaddress</b><b> errcode[optional]</b><b> errstring[optional]</b><b> timeout[optional]</b><b> flags[optional]</b><b> context[optional]</b></reference></element>
<element pattern="stream_socket_enable_crypto" autocomplete_append="($stream, $enable, $cryptokind, $sessionstream);">
<reference>stream_socket_enable_crypto($stream, $enable, $cryptokind, $sessionstream);
Turns encryption on/off on an already connected socket
<b> stream</b><b> enable</b><b> cryptokind[optional]</b><b> sessionstream[optional]</b></reference></element>
<element pattern="stream_socket_get_name" autocomplete_append="($stream, $want_peer);">
<reference>stream_socket_get_name($stream, $want_peer);
Retrieve the name of the local or remote sockets
<b> stream</b><b> want_peer</b></reference></element>
<element pattern="stream_socket_pair" autocomplete_append="($domain, $type, $protocol);">
<reference>stream_socket_pair($domain, $type, $protocol);
Creates a pair of connected, indistinguishable socket streams
<b> domain int </b>The protocol family to be used: STREAM_PF_INET,
STREAM_PF_INET6 or
STREAM_PF_UNIX
<b> type int </b>The type of communication to be used:
STREAM_SOCK_DGRAM,
STREAM_SOCK_RAW,
STREAM_SOCK_RDM,
STREAM_SOCK_SEQPACKET or
STREAM_SOCK_STREAM
<b> protocol int </b>The protocol to be used: STREAM_IPPROTO_ICMP,
STREAM_IPPROTO_IP,
STREAM_IPPROTO_RAW,
STREAM_IPPROTO_TCP or
STREAM_IPPROTO_UDP 
<b>returns</b>  array an array with the two socket resources on success, or
false on failure.
</reference></element>
<element pattern="stream_socket_recvfrom" autocomplete_append="($stream, $amount, $flags, &amp;$remote_addr);">
<reference>stream_socket_recvfrom($stream, $amount, $flags, &amp;$remote_addr);
Receives data from a socket, connected or not
<b> stream</b><b> amount</b><b> flags[optional]</b><b> remote_addr[optional]</b></reference></element>
<element pattern="stream_socket_sendto" autocomplete_append="($stream, $data, $flags, $target_addr);">
<reference>stream_socket_sendto($stream, $data, $flags, $target_addr);
Sends a message to a socket, whether it is connected or not
<b> stream</b><b> data</b><b> flags[optional]</b><b> target_addr[optional]</b></reference></element>
<element pattern="stream_socket_server" autocomplete_append="($localaddress, &amp;$errcode, &amp;$errstring, $flags, $context);">
<reference>stream_socket_server($localaddress, &amp;$errcode, &amp;$errstring, $flags, $context);
Create an Internet or Unix domain server socket
<b> localaddress</b><b> errcode[optional]</b><b> errstring[optional]</b><b> flags[optional]</b><b> context[optional]</b></reference></element>
<element pattern="stream_socket_shutdown" autocomplete_append="($stream, $how);">
<reference>stream_socket_shutdown($stream, $how);
Shutdown a full-duplex connection
<b> stream resource </b>An open stream (opened with stream_socket_client,
for example)
<b> how int </b>One of the following constants: STREAM_SHUT_RD
(disable further receptions), STREAM_SHUT_WR
(disable further transmissions) or
STREAM_SHUT_RDWR (disable further receptions and
transmissions).
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="stream_wrapper_register" autocomplete_append="($protocol, $classname, $flags);">
<reference>stream_wrapper_register($protocol, $classname, $flags);
Register a URL wrapper implemented as a PHP class
<b> protocol</b><b> classname</b><b> flags[optional]</b></reference></element>
<element pattern="stream_open"/>
<element pattern="stream_close"/>
<element pattern="stream_read"/>
<element pattern="stream_write"/>
<element pattern="stream_eof"/>
<element pattern="stream_tell"/>
<element pattern="stream_seek"/>
<element pattern="stream_flush"/>
<element pattern="stream_stat"/>
<element pattern="unlink" autocomplete_append="($filename, $context = null);">
<reference>unlink($filename, $context = null);
Deletes a file
<b> filename string </b>Path to the file.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="rename" autocomplete_append="($oldname, $newname, $context = null);">
<reference>rename($oldname, $newname, $context = null);
Renames a file or directory
<b> oldname string </b>The old name. The wrapper used in oldname
must match the wrapper used in
newname.
<b> newname string </b>The new name.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="mkdir" autocomplete_append="($pathname, $mode = null, $recursive = null, $context = null);">
<reference>mkdir($pathname, $mode = null, $recursive = null, $context = null);
Makes directory
<b> pathname string </b>The directory path.
<b> mode int[optional] </b>The mode is 0777 by default, which means the widest possible
access. For more information on modes, read the details
on the chmod page.
mode is ignored on Windows.
Note that you probably want to specify the mode as an octal number,
which means it should have a leading zero. The mode is also modified
by the current umask, which you can change using
umask.
<b> recursive bool[optional] </b>Default to false.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="rmdir" autocomplete_append="($dirname, $context = null);">
<reference>rmdir($dirname, $context = null);
Removes directory
<b> dirname string </b>Path to the directory.
<b> context resource[optional] &amp;note.context-support;</b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="dir_opendir"/>
<element pattern="url_stat"/>
<element pattern="dir_readdir"/>
<element pattern="dir_rewinddir"/>
<element pattern="dir_closedir"/>
<element pattern="stream_wrapper_restore" autocomplete_append="($protocol);">
<reference>stream_wrapper_restore($protocol);
Restores a previously unregistered built-in wrapper
<b> protocol string </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="stream_wrapper_unregister" autocomplete_append="($protocol);">
<reference>stream_wrapper_unregister($protocol);
Unregister a URL wrapper
<b> protocol string </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="addcslashes" autocomplete_append="($str, $charlist);">
<reference>addcslashes($str, $charlist);
Quote string with slashes in a C style
<b> str string </b>The string to be escaped.
<b> charlist string </b>A list of characters to be escaped. If
charlist contains characters
\n, \r etc., they are
converted in C-like style, while other non-alphanumeric characters
with ASCII codes lower than 32 and higher than 126 converted to
octal representation.
When you define a sequence of characters in the charlist argument
make sure that you know what characters come between the
characters that you set as the start and end of the range.
]]&gt;
Also, if the first character in a range has a higher ASCII value
than the second character in the range, no range will be
constructed. Only the start, end and period characters will be
escaped. Use the ord function to find the
ASCII value for a character.
]]&gt;
Be careful if you choose to escape characters 0, a, b, f, n, r,
t and v. They will be converted to \0, \a, \b, \f, \n, \r, \t
and \v.
In PHP \0 (NULL), \r (carriage return), \n (newline), \f (form feed),
\v (vertical tab) and \t (tab) are predefined escape sequences, 
while in C all of these are predefined escape sequences.
<b>returns</b>  string the escaped string.
</reference></element>
<element pattern="addslashes" autocomplete_append="($str);">
<reference>addslashes($str);
Quote string with slashes
<b> str string </b>The string to be escaped.
<b>returns</b>  string the escaped string.
</reference></element>
<element pattern="bin2hex" autocomplete_append="($str);">
<reference>bin2hex($str);
Convert binary data into hexadecimal representation
<b> str string </b>A character.
<b>returns</b>  string the hexadecimal representation of the given string.
</reference></element>
<element pattern="chr" autocomplete_append="($ascii);">
<reference>chr($ascii);
Return a specific character
<b> ascii int </b>The ascii code.
<b>returns</b>  string the specified character.
</reference></element>
<element pattern="chunk_split" autocomplete_append="($body, $chunklen = null, $end = null);">
<reference>chunk_split($body, $chunklen = null, $end = null);
Split a string into smaller chunks
<b> body string </b>The string to be chunked.
<b> chunklen int[optional] </b>The chunk length. Defaults to 76.
<b> end string[optional] </b>The line ending sequence. Defaults to "\r\n".
<b>returns</b>  string the chunked string.
</reference></element>
<element pattern="convert_cyr_string" autocomplete_append="($str, $from, $to);">
<reference>convert_cyr_string($str, $from, $to);
Convert from one Cyrillic character set to another
<b> str string </b>The string to be converted.
<b> from string </b>The source Cyrillic character set, as a single character.
<b> to string </b>The target Cyrillic character set, as a single character.
<b>returns</b>  string the converted string.
</reference></element>
<element pattern="convert_uudecode" autocomplete_append="($data);">
<reference>convert_uudecode($data);
Decode a uuencoded string
<b> data string </b>The uuencoded data.
<b>returns</b>  string the decoded data as a string.
</reference></element>
<element pattern="convert_uuencode" autocomplete_append="($data);">
<reference>convert_uuencode($data);
Uuencode a string
<b> data string </b>The data to be encoded.
<b>returns</b>  string the uuencoded data.
</reference></element>
<element pattern="count_chars" autocomplete_append="($string, $mode = null);">
<reference>count_chars($string, $mode = null);
Return information about characters used in a string
<b> string string </b>The examined string.
<b> mode int[optional] </b>The optional parameter mode defaults to 0.
<b>returns</b>  mixed Depending on mode
count_chars returns one of the following:
0 - an array with the byte-value as key and the frequency of
every byte as value.
1 - same as 0 but only byte-values with a frequency greater
than zero are listed.
2 - same as 0 but only byte-values with a frequency equal to
zero are listed.
3 - a string containing all unique characters is returned.
4 - a string containing all not used characters is returned.
</reference></element>
<element pattern="crc32" autocomplete_append="($str);">
<reference>crc32($str);
Calculates the crc32 polynomial of a string
<b> str string </b>The data.
<b>returns</b>  int the crc32 checksum of str as an integer.
</reference></element>
<element pattern="crypt" autocomplete_append="($str, $salt = null);">
<reference>crypt($str, $salt = null);
One-way string encryption (hashing)
<b> str string </b>The string to be encrypted.
<b> salt string[optional] </b>An optional salt string to base the encryption on. If not provided,
one will be randomly generated by PHP each time you call this function.
If you are using the supplied salt, you should be aware that the salt
is generated once. If you are calling this function repeatedly, this
may impact both appearance and security.
<b>returns</b>  string the encrypted string.
</reference></element>
<element pattern="explode" autocomplete_append="($delimiter, $string, $limit = null);">
<reference>explode($delimiter, $string, $limit = null);
Split a string by string
<b> delimiter string </b>The boundary string.
<b> string string </b>The input string.
<b> limit int[optional] </b>If limit is set, the returned array will contain
a maximum of limit elements with the last
element containing the rest of string.
If the limit parameter is negative, all components
except the last -limit are returned.
<b>returns</b>  array If delimiter is an empty string (""),
explode will return false. If
delimiter contains a value that is not contained
in string, then explode will
return an array containing string.
</reference></element>
<element pattern="fprintf" autocomplete_append="($handle, $format, $args = null, $_ = null);">
<reference>fprintf($handle, $format, $args = null, $_ = null);
Write a formatted string to a stream
<b> handle resource &amp;fs.file.pointer;</b><b> format string </b>See sprintf for a description of 
format.
<b> args mixed[optional] </b><b> _ mixed[optional] </b><b>returns</b>  int the length of the string written.
</reference></element>
<element pattern="get_html_translation_table" autocomplete_append="($table = null, $quote_style = null);">
<reference>get_html_translation_table($table = null, $quote_style = null);
Returns the translation table used by &lt;function&gt;htmlspecialchars&lt;/function&gt; and &lt;function&gt;htmlentities&lt;/function&gt;
<b> table int[optional] </b>There are two new constants (HTML_ENTITIES,
HTML_SPECIALCHARS) that allow you to specify the
table you want. Default value for table is
HTML_SPECIALCHARS.
<b> quote_style int[optional] </b>Like the htmlspecialchars and
htmlentities functions you can optionally specify
the quote_style you are working with. The
default is ENT_COMPAT mode. See the description
of these modes in htmlspecialchars.
<b>returns</b>  array the translation table as an array.
</reference></element>
<element pattern="hebrev" autocomplete_append="($hebrew_text, $max_chars_per_line = null);">
<reference>hebrev($hebrew_text, $max_chars_per_line = null);
Convert logical Hebrew text to visual text
<b> hebrew_text string </b>A Hebrew input string.
<b> max_chars_per_line int[optional] </b>This optional parameter indicates maximum number of characters per
line that will be returned.
<b>returns</b>  string the visual string.
</reference></element>
<element pattern="hebrevc" autocomplete_append="($hebrew_text, $max_chars_per_line = null);">
<reference>hebrevc($hebrew_text, $max_chars_per_line = null);
Convert logical Hebrew text to visual text with newline conversion
<b> hebrew_text string </b>A Hebrew input string.
<b> max_chars_per_line int[optional] </b>This optional parameter indicates maximum number of characters per
line that will be returned.
<b>returns</b>  string the visual string.
</reference></element>
<element pattern="html_entity_decode" autocomplete_append="($string, $quote_style = null, $charset = null);">
<reference>html_entity_decode($string, $quote_style = null, $charset = null);
Convert all HTML entities to their applicable characters
<b> string string </b>The input string.
<b> quote_style int[optional] </b>The optional second quote_style parameter lets
you define what will be done with 'single' and "double" quotes. It takes
on one of three constants with the default being
ENT_COMPAT:

Available quote_style constants

ENT_COMPAT
Will convert double-quotes and leave single-quotes alone.
ENT_QUOTES
Will convert both double and single quotes.
ENT_NOQUOTES
Will leave both double and single quotes unconverted.

<b> charset string[optional] </b>The ISO-8859-1 character set is used as default for the optional third
charset. This defines the character set used in
conversion.
&amp;reference.strings.charsets;
<b>returns</b>  string the decoded string.
</reference></element>
<element pattern="htmlentities" autocomplete_append="($string, $quote_style = null, $charset = null, $double_encode = null);">
<reference>htmlentities($string, $quote_style = null, $charset = null, $double_encode = null);
Convert all applicable characters to HTML entities
<b> string string </b>The input string.
<b> quote_style int[optional] </b>Like htmlspecialchars, the optional second
quote_style parameter lets you define what will
be done with 'single' and "double" quotes. It takes on one of three
constants with the default being ENT_COMPAT:

Available quote_style constants

ENT_COMPAT
Will convert double-quotes and leave single-quotes alone.
ENT_QUOTES
Will convert both double and single quotes.
ENT_NOQUOTES
Will leave both double and single quotes unconverted.

<b> charset string[optional] </b>Like htmlspecialchars, it takes an optional
third argument charset which defines character
set used in conversion.
Presently, the ISO-8859-1 character set is used as the default.
&amp;reference.strings.charsets;
<b> double_encode bool[optional] </b>When double_encode is turned off PHP will not
encode existing html entities. The default is to convert everything.
<b>returns</b>  string the encoded string.
</reference></element>
<element pattern="htmlspecialchars_decode" autocomplete_append="($string, $quote_style = null);">
<reference>htmlspecialchars_decode($string, $quote_style = null);
Convert special HTML entities back to characters
<b> string string </b>The string to decode
<b> quote_style int[optional] </b>The quote style. One of the following constants:

Available quote_style constants

ENT_COMPAT
Will convert double-quotes and leave single-quotes alone.
ENT_QUOTES
Will convert both double and single quotes.
ENT_NOQUOTES
Will leave both double and single quotes unconverted.

<b>returns</b>  string the decoded string.
</reference></element>
<element pattern="htmlspecialchars" autocomplete_append="($string, $quote_style = null, $charset = null, $double_encode = null);">
<reference>htmlspecialchars($string, $quote_style = null, $charset = null, $double_encode = null);
Convert special characters to HTML entities
<b> string string </b>The string being converted.
<b> quote_style int[optional] </b>The optional second argument, quote_style, tells
the function what to do with single and double quote characters.
The default mode, ENT_COMPAT, is the backwards compatible mode
which only translates the double-quote character and leaves the
single-quote untranslated. If ENT_QUOTES is set, both single and
double quotes are translated and if ENT_NOQUOTES is set neither
single nor double quotes are translated.
<b> charset string[optional] </b>Defines character set used in conversion.
The default character set is ISO-8859-1.
&amp;reference.strings.charsets;
<b> double_encode bool[optional] </b>When double_encode is turned off PHP will not
encode existing html entities, the default is to convert everything.
<b>returns</b>  string The converted string.
</reference></element>
<element pattern="implode" autocomplete_append="($glue, array $pieces);">
<reference>implode($glue, array $pieces);
Join array elements with a string
<b> glue string </b>Defaults to an empty string. This is not the preferred usage of
implode as glue would be
the second parameter and thus, the bad prototype would be used.
<b> pieces array </b>The array of strings to implode.
<b>returns</b>  string a string containing a string representation of all the array
elements in the same order, with the glue string between each element.
</reference></element>
<element pattern="levenshtein" autocomplete_append="($str1, $str2);">
<reference>levenshtein($str1, $str2);
Calculate Levenshtein distance between two strings
<b> str1 string </b>One of the strings being evaluated for Levenshtein distance.
<b> str2 string </b>One of the strings being evaluated for Levenshtein distance.
<b>returns</b>  int This function returns the Levenshtein-Distance between the
two argument strings or -1, if one of the argument strings
is longer than the limit of 255 characters.
</reference></element>
<element pattern="localeconv" autocomplete_append="();">
<reference>localeconv();
Get numeric formatting information
<b>returns</b>  array localeconv returns data based upon the current locale
as set by setlocale. The associative array that is
returned contains the following fields:
&lt;tr valign="top"&gt;
&lt;td&gt;Array element&lt;/td&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;decimal_point&lt;/td&gt;
&lt;td&gt;Decimal point character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;thousands_sep&lt;/td&gt;
&lt;td&gt;Thousands separator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;grouping&lt;/td&gt;
&lt;td&gt;Array containing numeric groupings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;int_curr_symbol&lt;/td&gt;
&lt;td&gt;International currency symbol (i.e. USD)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;currency_symbol&lt;/td&gt;
&lt;td&gt;Local currency symbol (i.e. $)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;mon_decimal_point&lt;/td&gt;
&lt;td&gt;Monetary decimal point character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;mon_thousands_sep&lt;/td&gt;
&lt;td&gt;Monetary thousands separator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;mon_grouping&lt;/td&gt;
&lt;td&gt;Array containing monetary groupings&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;positive_sign&lt;/td&gt;
&lt;td&gt;Sign for positive values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;negative_sign&lt;/td&gt;
&lt;td&gt;Sign for negative values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;int_frac_digits&lt;/td&gt;
&lt;td&gt;International fractional digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;frac_digits&lt;/td&gt;
&lt;td&gt;Local fractional digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;p_cs_precedes&lt;/td&gt;
&lt;td&gt;
true if currency_symbol precedes a positive value, false
if it succeeds one
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;p_sep_by_space&lt;/td&gt;
&lt;td&gt;
true if a space separates currency_symbol from a positive
value, false otherwise
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;n_cs_precedes&lt;/td&gt;
&lt;td&gt;
true if currency_symbol precedes a negative value, false
if it succeeds one
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr valign="top"&gt;
&lt;td&gt;n_sep_by_space&lt;/td&gt;
&lt;td&gt;
true if a space separates currency_symbol from a negative
value, false otherwise
&lt;/td&gt;
&lt;/tr&gt;
&lt;td&gt;p_sign_posn&lt;/td&gt;
&lt;td&gt;
0 - Parentheses surround the quantity and currency_symbol
1 - The sign string precedes the quantity and currency_symbol
2 - The sign string succeeds the quantity and currency_symbol
3 - The sign string immediately precedes the currency_symbol
4 - The sign string immediately succeeds the currency_symbol
&lt;/td&gt;
&lt;/tr&gt;
&lt;td&gt;n_sign_posn&lt;/td&gt;
&lt;td&gt;
0 - Parentheses surround the quantity and currency_symbol
1 - The sign string precedes the quantity and currency_symbol
2 - The sign string succeeds the quantity and currency_symbol
3 - The sign string immediately precedes the currency_symbol
4 - The sign string immediately succeeds the currency_symbol
&lt;/td&gt;
&lt;/tr&gt;
The p_sign_posn, and n_sign_posn contain a string
of formatting options. Each number representing one of the above listed conditions.
The grouping fields contain arrays that define the way numbers should be
grouped. For example, the monetary grouping field for the nl_NL locale (in
UTF-8 mode with the euro sign), would contain a 2 item array with the
values 3 and 3. The higher the index in the array, the farther left the
grouping is. If an array element is equal to CHAR_MAX,
no further grouping is done. If an array element is equal to 0, the previous
element should be used.
</reference></element>
<element pattern="ltrim" autocomplete_append="($str, $charlist = null);">
<reference>ltrim($str, $charlist = null);
Strip whitespace (or other characters) from the beginning of a string
<b> str string </b>The input string.
<b> charlist string[optional] </b>You can also specify the characters you want to strip, by means of the
charlist parameter.
Simply list all characters that you want to be stripped. With
.. you can specify a range of characters.
<b>returns</b>  string This function returns a string with whitespace stripped from the
beginning of str.
Without the second parameter,
ltrim will strip these characters:
" " (ASCII 32
(0x20)), an ordinary space.
"\t" (ASCII 9
(0x09)), a tab.
"\n" (ASCII 10
(0x0A)), a new line (line feed).
"\r" (ASCII 13
(0x0D)), a carriage return.
"\0" (ASCII 0
(0x00)), the NUL-byte.
"\x0B" (ASCII 11
(0x0B)), a vertical tab.
</reference></element>
<element pattern="md5_file" autocomplete_append="($filename, $raw_output = null);">
<reference>md5_file($filename, $raw_output = null);
Calculates the md5 hash of a given file
<b> filename string </b>The filename
<b> raw_output bool[optional] </b>When true, returns the digest in raw binary format with a length of
16. Defaults to false.
<b>returns</b>  string a string on success, false otherwise.
</reference></element>
<element pattern="md5" autocomplete_append="($str, $raw_output = null);">
<reference>md5($str, $raw_output = null);
Calculate the md5 hash of a string
<b> str string </b>The string.
<b> raw_output bool[optional] </b>If the optional raw_output is set to true,
then the md5 digest is instead returned in raw binary format with a
length of 16. Defaults to false.
<b>returns</b>  string the hash as a 32-character hexadecimal number.
</reference></element>
<element pattern="metaphone" autocomplete_append="($str, $phones = null);">
<reference>metaphone($str, $phones = null);
Calculate the metaphone key of a string
<b> str string </b>The input string.
<b> phones int[optional] </b><b>returns</b>  string the metaphone key as a string.
</reference></element>
<element pattern="money_format" autocomplete_append="($format, $number);">
<reference>money_format($format, $number);
Formats a number as a currency string
<b> format string </b>The format specification consists of the following sequence:
a % character
<b> number float </b>The number to be formatted.
<b>returns</b>  string the formatted string. Characters before and after the formatting
string will be returned unchanged.
</reference></element>
<element pattern="nl_langinfo" autocomplete_append="($item);">
<reference>nl_langinfo($item);
Query language and locale information
<b> item int </b>item may be an integer value of the element or the
constant name of the element. The following is a list of constant names
for item that may be used and their description.
Some of these constants may not be defined or hold no value for certain
locales.

nl_langinfo Constants

LC_TIME Category Constants
ABDAY_(1-7)
Abbreviated name of n-th day of the week.
DAY_(1-7)
Name of the n-th day of the week (DAY_1 = Sunday).
ABMON_(1-12)
Abbreviated name of the n-th month of the year.
MON_(1-12)
Name of the n-th month of the year.
AM_STR
String for Ante meridian.
PM_STR
String for Post meridian.
D_T_FMT
String that can be used as the format string for strftime to represent time and date.
D_FMT
String that can be used as the format string for strftime to represent date.
T_FMT
String that can be used as the format string for strftime to represent time.
T_FMT_AMPM
String that can be used as the format string for strftime to represent time in 12-hour format with ante/post meridian.
ERA
Alternate era.
ERA_YEAR
Year in alternate era format.
ERA_D_T_FMT
Date and time in alternate era format (string can be used in strftime).
ERA_D_FMT
Date in alternate era format (string can be used in strftime).
ERA_T_FMT
Time in alternate era format (string can be used in strftime).

LC_MONETARY Category Constants
INT_CURR_SYMBOL
International currency symbol.
CURRENCY_SYMBOL
Local currency symbol.
CRNCYSTR
Same value as CURRENCY_SYMBOL.
MON_DECIMAL_POINT
Decimal point character.
MON_THOUSANDS_SEP
Thousands separator (groups of three digits).
MON_GROUPING
Like 'grouping' element.
POSITIVE_SIGN
Sign for positive values.
NEGATIVE_SIGN
Sign for negative values.
INT_FRAC_DIGITS
International fractional digits.
FRAC_DIGITS
Local fractional digits.
P_CS_PRECEDES
Returns 1 if CURRENCY_SYMBOL precedes a positive value.
P_SEP_BY_SPACE
Returns 1 if a space separates CURRENCY_SYMBOL from a positive value.
N_CS_PRECEDES
Returns 1 if CURRENCY_SYMBOL precedes a negative value.
N_SEP_BY_SPACE
Returns 1 if a space separates CURRENCY_SYMBOL from a negative value.
P_SIGN_POSN
Returns 0 if parentheses surround the quantity and currency_symbol.

<b>returns</b>  string the element as a string, or false if item
is not valid.
</reference></element>
<element pattern="nl2br" autocomplete_append="($string, $is_xhtml = null);">
<reference>nl2br($string, $is_xhtml = null);
Inserts HTML line breaks before all newlines in a string
<b> string string </b>The input string.
<b> is_xhtml bool[optional] </b>Whenever to use XHTML compatible line breaks or not (defaults to true).
<b>returns</b>  string the altered string.
</reference></element>
<element pattern="number_format" autocomplete_append="($number, $decimals = null);">
<reference>number_format($number, $decimals = null);
Format a number with grouped thousands
<b> number float </b>The number being formatted.
<b> decimals int[optional] </b>Sets the number of decimal points.
<b>returns</b>  string A formatted version of number.
</reference></element>
<element pattern="ord" autocomplete_append="($string);">
<reference>ord($string);
Return ASCII value of character
<b> string string </b>A character.
<b>returns</b>  int the ASCII value as an integer.
</reference></element>
<element pattern="parse_str" autocomplete_append="($str, array &amp;$arr = null);">
<reference>parse_str($str, array &amp;$arr = null);
Parses the string into variables
<b> str string </b>The input string.
<b> arr array[optional] </b>If the second parameter arr is present,
variables are stored in this variable as array elements instead.
<b>returns</b>  void 
</reference></element>
<element pattern="print"/>
<element pattern="printf" autocomplete_append="($format, $args = null, $_ = null);">
<reference>printf($format, $args = null, $_ = null);
Output a formatted string
<b> format string </b>See sprintf for a description of
format.
<b> args mixed[optional] </b><b> _ mixed[optional] </b><b>returns</b>  int the length of the outputted string.
</reference></element>
<element pattern="quoted_printable_decode" autocomplete_append="($str);">
<reference>quoted_printable_decode($str);
Convert a quoted-printable string to an 8 bit string
<b> str string </b>The input string.
<b>returns</b>  string the 8-bit binary string.
</reference></element>
<element pattern="quotemeta" autocomplete_append="($str);">
<reference>quotemeta($str);
Quote meta characters
<b> str string </b>The input string.
<b>returns</b>  string the string with meta characters quoted.
</reference></element>
<element pattern="rtrim" autocomplete_append="($str, $charlist = null);">
<reference>rtrim($str, $charlist = null);
Strip whitespace (or other characters) from the end of a string
<b> str string </b>The input string.
<b> charlist string[optional] </b>You can also specify the characters you want to strip, by means
of the charlist parameter.
Simply list all characters that you want to be stripped. With
.. you can specify a range of characters.
<b>returns</b>  string the modified string.
</reference></element>
<element pattern="setlocale" autocomplete_append="($category, $locale, $_ = null);">
<reference>setlocale($category, $locale, $_ = null);
Set locale information
<b> category int </b>category is a named constant specifying the
category of the functions affected by the locale setting:
LC_ALL for all of the below
<b> locale string </b>If locale is &amp;null; or the empty string
"", the locale names will be set from the
values of environment variables with the same names as the above
categories, or from "LANG".
If locale is "0",
the locale setting is not affected, only the current setting is returned.
If locale is an array or followed by additional
parameters then each array element or parameter is tried to be set as
new locale until success. This is useful if a locale is known under
different names on different systems or for providing a fallback
for a possibly not available locale.
<b> _ string[optional] </b><b>returns</b>  string the new current locale, or false if the locale functionality is
not implemented on your platform, the specified locale does not exist or
the category name is invalid.
An invalid category name also causes a warning message. Category/locale
names can be found in RFC 1766
and ISO 639.
Different systems have different naming schemes for locales.
The return value of setlocale depends
on the system that PHP is running. It returns exactly
what the system setlocale function returns.
</reference></element>
<element pattern="setlocale" autocomplete_append="($category, $locale, $_ = null);">
<reference>setlocale($category, $locale, $_ = null);
Set locale information
<b> category int </b>category is a named constant specifying the
category of the functions affected by the locale setting:
LC_ALL for all of the below
<b> locale string </b>If locale is &amp;null; or the empty string
"", the locale names will be set from the
values of environment variables with the same names as the above
categories, or from "LANG".
If locale is "0",
the locale setting is not affected, only the current setting is returned.
If locale is an array or followed by additional
parameters then each array element or parameter is tried to be set as
new locale until success. This is useful if a locale is known under
different names on different systems or for providing a fallback
for a possibly not available locale.
<b> _ string[optional] </b><b>returns</b>  string the new current locale, or false if the locale functionality is
not implemented on your platform, the specified locale does not exist or
the category name is invalid.
An invalid category name also causes a warning message. Category/locale
names can be found in RFC 1766
and ISO 639.
Different systems have different naming schemes for locales.
The return value of setlocale depends
on the system that PHP is running. It returns exactly
what the system setlocale function returns.
</reference></element>
<element pattern="sha1_file" autocomplete_append="($filename, $raw_output = null);">
<reference>sha1_file($filename, $raw_output = null);
Calculate the sha1 hash of a file
<b> filename string </b>The filename
<b> raw_output bool[optional] </b>When true, returns the digest in raw binary format with a length of
20. Defaults to false.
<b>returns</b>  string a string on success, false otherwise.
</reference></element>
<element pattern="sha1" autocomplete_append="($str, $raw_output = null);">
<reference>sha1($str, $raw_output = null);
Calculate the sha1 hash of a string
<b> str string </b>The input string.
<b> raw_output bool[optional] </b>If the optional raw_output is set to true,
then the sha1 digest is instead returned in raw binary format with a
length of 20, otherwise the returned value is a 40-character
hexadecimal number. Defaults to false.
<b>returns</b>  string the sha1 hash as a string.
</reference></element>
<element pattern="similar_text" autocomplete_append="($first, $second, &amp;$percent = null);">
<reference>similar_text($first, $second, &amp;$percent = null);
Calculate the similarity between two strings
<b> first string </b>The first string.
<b> second string </b>The second string.
<b> percent float[optional] </b>By passing a reference as third argument,
similar_text will calculate the similarity in
percent for you. 
<b>returns</b>  int the number of matching chars in both strings.
</reference></element>
<element pattern="soundex" autocomplete_append="($str);">
<reference>soundex($str);
Calculate the soundex key of a string
<b> str string </b>The input string.
<b>returns</b>  string the soundex key as a string.
</reference></element>
<element pattern="sprintf" autocomplete_append="($format, $args = null, $_ = null);">
<reference>sprintf($format, $args = null, $_ = null);
Return a formatted string
<b> format string </b>The format string is composed of zero or more directives:
ordinary characters (excluding %) that are
copied directly to the result, and conversion
specifications, each of which results in fetching its
own parameter. This applies to both sprintf
and printf.
Each conversion specification consists of a percent sign
(%), followed by one or more of these
elements, in order:
An optional sign specifier that forces a sign
(- or +) to be used on a number. By default, only the - sign is used
on a number if it's negative. This specifier forces positive numbers
to have the + sign attached as well, and was added in PHP 4.3.0.
<b> args mixed[optional] </b><b> _ mixed[optional] </b><b>returns</b>  string a string produced according to the formatting string
format.
</reference></element>
<element pattern="sscanf" autocomplete_append="($str, $format, &amp;$_ = null);">
<reference>sscanf($str, $format, &amp;$_ = null);
Parses input from a string according to a format
<b> str string </b>The input string being parsed.
<b> format string </b>The interpreted format for str, which is
described in the documentation for sprintf.
<b> _ mixed[optional] </b><b>returns</b>  mixed If only
two parameters were passed to this function, the values parsed
will be returned as an array. Otherwise, if optional parameters are passed,
the function will return the number of assigned values. The optional
parameters must be passed by reference.
</reference></element>
<element pattern="str_getcsv"/>
<element pattern="str_ireplace" autocomplete_append="($search, $replace, $subject, &amp;$count = null);">
<reference>str_ireplace($search, $replace, $subject, &amp;$count = null);
Case-insensitive version of &lt;function&gt;str_replace&lt;/function&gt;.
<b> search mixed </b>Every replacement with search array is
performed on the result of previous replacement.
<b> replace mixed </b><b> subject mixed </b>If subject is an array, then the search and
replace is performed with every entry of 
subject, and the return value is an array as
well.
<b> count int[optional] </b>The number of matched and replaced needles will
be returned in count which is passed by
reference.
<b>returns</b>  mixed a string or an array of replacements.
</reference></element>
<element pattern="str_pad" autocomplete_append="($input, $pad_length, $pad_string = null, $pad_type = null);">
<reference>str_pad($input, $pad_length, $pad_string = null, $pad_type = null);
Pad a string to a certain length with another string
<b> input string </b>The input string.
<b> pad_length int </b>If the value of pad_length is negative or
less than the length of the input string, no padding takes place.
<b> pad_string string[optional] </b>The pad_string may be truncated if the
required number of padding characters can't be evenly divided by the
pad_string's length.
<b> pad_type int[optional] </b>Optional argument pad_type can be
STR_PAD_RIGHT, STR_PAD_LEFT,
or STR_PAD_BOTH. If
pad_type is not specified it is assumed to be
STR_PAD_RIGHT.
<b>returns</b>  string the padded string.
</reference></element>
<element pattern="str_repeat" autocomplete_append="($input, $multiplier);">
<reference>str_repeat($input, $multiplier);
Repeat a string
<b> input string </b>The string to be repeated.
<b> multiplier int </b>Number of time the input string should be
repeated.
multiplier has to be greater than or equal to 0.
If the multiplier is set to 0, the function
will return an empty string.
<b>returns</b>  string the repeated string.
</reference></element>
<element pattern="str_replace" autocomplete_append="($search, $replace, $subject, &amp;$count = null);">
<reference>str_replace($search, $replace, $subject, &amp;$count = null);
Replace all occurrences of the search string with the replacement string
<b> search mixed </b><b> replace mixed </b><b> subject mixed </b>If subject is an array, then the search and
replace is performed with every entry of
subject, and the return value is an array as
well.
<b> count int[optional] If passed, this will hold the number of matched and replaced needles.</b><b>returns</b>  mixed This function returns a string or an array with the replaced values.
</reference></element>
<element pattern="str_rot13" autocomplete_append="($str);">
<reference>str_rot13($str);
Perform the rot13 transform on a string
<b> str string </b>The input string.
<b>returns</b>  string the ROT13 version of the given string.
</reference></element>
<element pattern="str_shuffle" autocomplete_append="($str);">
<reference>str_shuffle($str);
Randomly shuffles a string
<b> str string </b>The input string.
<b>returns</b>  string the shuffled string.
</reference></element>
<element pattern="str_split" autocomplete_append="($string, $split_length = null);">
<reference>str_split($string, $split_length = null);
Convert a string to an array
<b> string string </b>The input string.
<b> split_length int[optional] </b>Maximum length of the chunk.
<b>returns</b>  array If the optional split_length parameter is
specified, the returned array will be broken down into chunks with each
being split_length in length, otherwise each chunk
will be one character in length.
false is returned if split_length is less than 1.
If the split_length length exceeds the length of
string, the entire string is returned as the first
(and only) array element.
</reference></element>
<element pattern="str_word_count" autocomplete_append="($string, $format = null, $charlist = null);">
<reference>str_word_count($string, $format = null, $charlist = null);
Return information about words used in a string
<b> string string </b>The string
<b> format int[optional] </b>Specify the return value of this function. The current supported values
are:
0 - returns the number of words found
<b> charlist string[optional] </b>A list of additional characters which will be considered as 'word'
<b>returns</b>  mixed an array or an integer, depending on the
format chosen.
</reference></element>
<element pattern="strcasecmp" autocomplete_append="($str1, $str2);">
<reference>strcasecmp($str1, $str2);
Binary safe case-insensitive string comparison
<b> str1 string </b>The first string
<b> str2 string </b>The second string
<b>returns</b>  int &amp;lt; 0 if str1 is less than
str2; &amp;gt; 0 if str1
is greater than str2, and 0 if they are
equal.
</reference></element>
<element pattern="strcmp" autocomplete_append="($str1, $str2);">
<reference>strcmp($str1, $str2);
Binary safe string comparison
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b>returns</b>  int &amp;lt; 0 if str1 is less than
str2; &amp;gt; 0 if str1
is greater than str2, and 0 if they are
equal.
</reference></element>
<element pattern="strcoll" autocomplete_append="($str1, $str2);">
<reference>strcoll($str1, $str2);
Locale based string comparison
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b>returns</b>  int &amp;lt; 0 if str1 is less than
str2; &amp;gt; 0 if
str1 is greater than
str2, and 0 if they are equal.
</reference></element>
<element pattern="strcspn" autocomplete_append="($str1, $str2, $start = null, $length = null);">
<reference>strcspn($str1, $str2, $start = null, $length = null);
Find length of initial segment not matching mask
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b> start int[optional] </b>The start position of the string to examine.
<b> length int[optional] </b>The length of the string to examine.
<b>returns</b>  int the length of the segment as an integer.
</reference></element>
<element pattern="strip_tags" autocomplete_append="($str, $allowable_tags = null);">
<reference>strip_tags($str, $allowable_tags = null);
Strip HTML and PHP tags from a string
<b> str string </b>The input string.
<b> allowable_tags string[optional] </b>You can use the optional second parameter to specify tags which should
not be stripped.
HTML comments and PHP tags are also stripped. This is hardcoded and
can not be changed with allowable_tags.
<b>returns</b>  string the stripped string.
</reference></element>
<element pattern="stripcslashes" autocomplete_append="($str);">
<reference>stripcslashes($str);
Un-quote string quoted with &lt;function&gt;addcslashes&lt;/function&gt;
<b> str string </b>The string to be unescaped.
<b>returns</b>  string the unescaped string.
</reference></element>
<element pattern="stripos" autocomplete_append="($haystack, $needle, $offset = null);">
<reference>stripos($haystack, $needle, $offset = null);
Find position of first occurrence of a case-insensitive string
<b> haystack string </b>The string to search in
<b> needle string </b>Note that the needle may be a string of one or
more characters.
If needle is not a string, it is converted to
an integer and applied as the ordinal value of a character.
<b> offset int[optional] </b>The optional offset parameter allows you
to specify which character in haystack to
start searching. The position returned is still relative to the
beginning of haystack.
<b>returns</b>  int If needle is not found,
stripos will return boolean false.
</reference></element>
<element pattern="stripslashes" autocomplete_append="($str);">
<reference>stripslashes($str);
Un-quotes a quoted string
<b> str string </b>The input string.
<b>returns</b>  string a string with backslashes stripped off.
(\' becomes ' and so on.)
Double backslashes (\\) are made into a single
backslash (\).
</reference></element>
<element pattern="stristr" autocomplete_append="($haystack, $needle, $before_needle = null);">
<reference>stristr($haystack, $needle, $before_needle = null);
Case-insensitive &lt;function&gt;strstr&lt;/function&gt;
<b> haystack string </b>The string to search in
<b> needle mixed </b>If needle is not a string, it is converted to
an integer and applied as the ordinal value of a character.
<b> before_needle bool[optional] </b>If true (the default is false), stristr
returns the part of the haystack before the
first occurence of the needle.
<b>returns</b>  string the matched substring. If needle is not
found, returns false.
</reference></element>
<element pattern="strlen" autocomplete_append="($string);">
<reference>strlen($string);
Get string length
<b> string string </b>The string being measured for length.
<b>returns</b>  int The length of the string on success, 
and 0 if the string is empty.
</reference></element>
<element pattern="strnatcasecmp" autocomplete_append="($str1, $str2);">
<reference>strnatcasecmp($str1, $str2);
Case insensitive string comparisons using a "natural order" algorithm
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b>returns</b>  int Similar to other string comparison functions, this one returns &amp;lt; 0 if
str1 is less than str2 &amp;gt;
0 if str1 is greater than
str2, and 0 if they are equal.
</reference></element>
<element pattern="strnatcmp" autocomplete_append="($str1, $str2);">
<reference>strnatcmp($str1, $str2);
String comparisons using a "natural order" algorithm
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b>returns</b>  int Similar to other string comparison functions, this one returns &amp;lt; 0 if
str1 is less than str2; &amp;gt;
0 if str1 is greater than
str2, and 0 if they are equal.
</reference></element>
<element pattern="strncasecmp" autocomplete_append="($str1, $str2, $len);">
<reference>strncasecmp($str1, $str2, $len);
Binary safe case-insensitive string comparison of the first n characters
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b> len int </b>The length of strings to be used in the comparison.
<b>returns</b>  int &amp;lt; 0 if str1 is less than
str2; &amp;gt; 0 if str1 is
greater than str2, and 0 if they are equal.
</reference></element>
<element pattern="strncmp" autocomplete_append="($str1, $str2, $len);">
<reference>strncmp($str1, $str2, $len);
Binary safe string comparison of the first n characters
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b> len int </b>Number of characters to use in the comparison.
<b>returns</b>  int &amp;lt; 0 if str1 is less than
str2; &amp;gt; 0 if str1
is greater than str2, and 0 if they are
equal.
</reference></element>
<element pattern="strpbrk" autocomplete_append="($haystack, $char_list);">
<reference>strpbrk($haystack, $char_list);
Search a string for any of a set of characters
<b> haystack string </b>The string where char_list is looked for.
<b> char_list string </b>This parameter is case sensitive.
<b>returns</b>  string a string starting from the character found, or false if it is
not found.
</reference></element>
<element pattern="strpos" autocomplete_append="($haystack, $needle, $offset = null);">
<reference>strpos($haystack, $needle, $offset = null);
Find position of first occurrence of a string
<b> haystack string </b>The string to search in
<b> needle mixed </b>If needle is not a string, it is converted
to an integer and applied as the ordinal value of a character.
<b> offset int[optional] </b>The optional offset parameter allows you
to specify which character in haystack to
start searching. The position returned is still relative to the
beginning of haystack.
<b>returns</b>  int the position as an integer. If needle is
not found, strpos will return boolean
false.
</reference></element>
<element pattern="strrchr" autocomplete_append="($haystack, $needle);">
<reference>strrchr($haystack, $needle);
Find the last occurrence of a character in a string
<b> haystack string </b>The string to search in
<b> needle mixed </b>If needle contains more than one character,
only the first is used. This behavior is different from that of
strstr.
If needle is not a string, it is converted to
an integer and applied as the ordinal value of a character.
<b>returns</b>  string This function returns the portion of string, or false if
needle is not found.
</reference></element>
<element pattern="strrev" autocomplete_append="($string);">
<reference>strrev($string);
Reverse a string
<b> string string </b>The string to be reversed.
<b>returns</b>  string the reversed string.
</reference></element>
<element pattern="strripos" autocomplete_append="($haystack, $needle, $offset = null);">
<reference>strripos($haystack, $needle, $offset = null);
Find position of last occurrence of a case-insensitive string in a string
<b> haystack string </b>The string to search in
<b> needle string </b>Note that the needle may be a string of one or
more characters.
<b> offset int[optional] </b>The offset parameter may be specified to begin
searching an arbitrary number of characters into the string.
Negative offset values will start the search at
offset characters from the
start of the string.
<b>returns</b>  int the numerical position of the last occurence of
needle. Also note that string positions start at 0,
and not 1.
If needle is not found, false is returned.
</reference></element>
<element pattern="strrpos" autocomplete_append="($haystack, $needle, $offset = null);">
<reference>strrpos($haystack, $needle, $offset = null);
Find position of last occurrence of a char in a string
<b> haystack string </b><b> needle string </b><b> offset int[optional] </b><b>returns</b>  int 
</reference></element>
<element pattern="strspn" autocomplete_append="($str1, $str2, $start = null, $length = null);">
<reference>strspn($str1, $str2, $start = null, $length = null);
Find length of initial segment matching mask
<b> str1 string </b>The first string.
<b> str2 string </b>The second string.
<b> start int[optional] </b>The start position of the string to examine.
Negative value counts position from the end of a string.
<b> length int[optional] </b>The length of the string to examine.
Negative value sets length from the end of a string.
<b>returns</b>  int the length of the initial segment of str1
which consists entirely of characters in str2.
</reference></element>
<element pattern="strstr" autocomplete_append="($haystack, $needle, $before_needle = null);">
<reference>strstr($haystack, $needle, $before_needle = null);
Find first occurrence of a string
<b> haystack string </b>The input string.
<b> needle mixed </b>If needle is not a string, it is converted to
an integer and applied as the ordinal value of a character.
<b> before_needle bool[optional] </b>If true (the default is false), strstr returns
the part of the haystack before the first
occurence of the needle.
<b>returns</b>  string the portion of string, or false if needle
is not found.
</reference></element>
<element pattern="strtok" autocomplete_append="($str, $token);">
<reference>strtok($str, $token);
Tokenize string
<b> str string </b>The string being split up into smaller strings (tokens).
<b> token string </b>The delimiter used when splitting up str.
<b>returns</b>  string A string token.
</reference></element>
<element pattern="strtolower" autocomplete_append="($str);">
<reference>strtolower($str);
Make a string lowercase
<b> str string </b>The input string.
<b>returns</b>  string the lowercased string.
</reference></element>
<element pattern="strtoupper" autocomplete_append="($string);">
<reference>strtoupper($string);
Make a string uppercase
<b> string string </b>The input string.
<b>returns</b>  string the uppercased string.
</reference></element>
<element pattern="strtr" autocomplete_append="($str, $from, $to);">
<reference>strtr($str, $from, $to);
Translate certain characters
<b> str string </b>The string being translated.
<b> from string </b>The string being translated to to.
<b> to string </b>The string replacing from.
<b>returns</b>  string This function returns a copy of str,
translating all occurrences of each character in
from to the corresponding character in
to.
</reference></element>
<element pattern="strtr" autocomplete_append="($str, $from, $to);">
<reference>strtr($str, $from, $to);
Translate certain characters
<b> str string </b>The string being translated.
<b> from string </b>The string being translated to to.
<b> to string </b>The string replacing from.
<b>returns</b>  string This function returns a copy of str,
translating all occurrences of each character in
from to the corresponding character in
to.
</reference></element>
<element pattern="substr_compare" autocomplete_append="($main_str, $str, $offset, $length = null, $case_insensitivity = null);">
<reference>substr_compare($main_str, $str, $offset, $length = null, $case_insensitivity = null);
Binary safe comparison of 2 strings from an offset, up to length characters
<b> main_str string </b><b> str string </b><b> offset int </b>The start position for the comparison. If negative, it starts counting
from the end of the string.
<b> length int[optional] </b>The length of the comparison.
<b> case_insensitivity bool[optional] </b>If case_insensitivity is true, comparison is
case insensitive.
<b>returns</b>  int &amp;lt; 0 if main_str from position
offset is less than str, &amp;gt;
0 if it is greater than str, and 0 if they are equal.
If length is equal or greater than length of
main_str and length is set,
substr_compare prints warning and returns false.
</reference></element>
<element pattern="substr_count" autocomplete_append="($haystack, $needle, $offset = null, $length = null);">
<reference>substr_count($haystack, $needle, $offset = null, $length = null);
Count the number of substring occurrences
<b> haystack string </b>The string to search in
<b> needle string </b>The substring to search for
<b> offset int[optional] </b>The offset where to start counting
<b> length int[optional] </b>The maximum length after the specified offset to search for the
substring. It outputs a warning if the offset plus the length is
greater than the haystack length.
<b>returns</b>  int This functions returns an integer.
</reference></element>
<element pattern="substr_replace" autocomplete_append="($string, $replacement, $start, $length = null);">
<reference>substr_replace($string, $replacement, $start, $length = null);
Replace text within a portion of a string
<b> string mixed </b>The input string.
<b> replacement string </b>The replacement string.
<b> start int </b>If start is positive, the replacing will
begin at the start'th offset into
string.
If start is negative, the replacing will
begin at the start'th character from the
end of string.
<b> length int[optional] </b>If given and is positive, it represents the length of the portion of
string which is to be replaced. If it is
negative, it represents the number of characters from the end of
string at which to stop replacing. If it
is not given, then it will default to strlen(
string ); i.e. end the replacing at the
end of string. Of course, if
length is zero then this function will have the
effect of inserting replacement into
string at the given
start offset.
<b>returns</b>  mixed The result string is returned. If string is an
array then array is returned.
</reference></element>
<element pattern="substr" autocomplete_append="($string, $start, $length = null);">
<reference>substr($string, $start, $length = null);
Return part of a string
<b> string string </b>The input string.
<b> start int </b>If start is non-negative, the returned string
will start at the start'th position in
string, counting from zero. For instance,
in the string 'abcdef', the character at
position 0 is 'a', the
character at position 2 is
'c', and so forth.
If start is negative, the returned string
will start at the start'th character
from the end of string.
Using a negative start
]]&gt;
<b> length int[optional] </b>If length is given and is positive, the string
returned will contain at most length characters
beginning from start (depending on the length of
string). If string is less
than or equal to start characters long, false
will be returned.
If length is given and is negative, then that many
characters will be omitted from the end of string
(after the start position has been calculated when a
start is negative). If
start denotes a position beyond this truncation,
an empty string will be returned.
Using a negative length
]]&gt;
<b>returns</b>  string the extracted part of string.
</reference></element>
<element pattern="trim" autocomplete_append="($str, $charlist = null);">
<reference>trim($str, $charlist = null);
Strip whitespace (or other characters) from the beginning and end of a string
<b> str string </b>The string that will be trimmed.
<b> charlist string[optional] </b>Optionally, the stripped characters can also be specified using
the charlist parameter.
Simply list all characters that you want to be stripped. With
.. you can specify a range of characters.
<b>returns</b>  string The trimmed string.
</reference></element>
<element pattern="ucfirst" autocomplete_append="($str);">
<reference>ucfirst($str);
Make a string's first character uppercase
<b> str string </b>The input string.
<b>returns</b>  string the resulting string.
</reference></element>
<element pattern="ucwords" autocomplete_append="($str);">
<reference>ucwords($str);
Uppercase the first character of each word in a string
<b> str string </b>The input string.
<b>returns</b>  string the modified string.
</reference></element>
<element pattern="vfprintf" autocomplete_append="($handle, $format, array $args);">
<reference>vfprintf($handle, $format, array $args);
Write a formatted string to a stream
<b> handle resource </b><b> format string </b>See sprintf for a description of
format.
<b> args array </b><b>returns</b>  int the length of the outputted string.
</reference></element>
<element pattern="vprintf" autocomplete_append="($format, array $args);">
<reference>vprintf($format, array $args);
Output a formatted string
<b> format string </b>See sprintf for a description of
format.
<b> args array </b><b>returns</b>  int the length of the outputted string.
</reference></element>
<element pattern="vsprintf" autocomplete_append="($format, array $args);">
<reference>vsprintf($format, array $args);
Return a formatted string
<b> format string </b>See sprintf for a description of
format.
<b> args array </b><b>returns</b>  string Return array values as a formatted string according to
format (which is described in the documentation
for sprintf).
</reference></element>
<element pattern="wordwrap" autocomplete_append="($str, $width = null, $break = null, $cut = null);">
<reference>wordwrap($str, $width = null, $break = null, $cut = null);
Wraps a string to a given number of characters
<b> str string </b>The input string.
<b> width int[optional] </b>The column width. Defaults to 75.
<b> break string[optional] </b>The line is broken using the optional
break parameter. Defaults to 
'\n'.
<b> cut bool[optional] </b>If the cut is set to true, the string is
always wrapped at the specified width. So if you have a word that
is larger than the given width, it is broken apart. (See second
example).
<b>returns</b>  string the given string wrapped at the specified column.
</reference></element>
<element pattern="swf_actiongeturl"/>
<element pattern="swf_actiongotoframe"/>
<element pattern="swf_actiongotolabel"/>
<element pattern="swf_actionnextframe"/>
<element pattern="swf_actionplay"/>
<element pattern="swf_actionprevframe"/>
<element pattern="swf_actionsettarget"/>
<element pattern="swf_actionstop"/>
<element pattern="swf_actiontogglequality"/>
<element pattern="swf_actionwaitforframe"/>
<element pattern="swf_addbuttonrecord"/>
<element pattern="swf_addcolor"/>
<element pattern="swf_closefile"/>
<element pattern="swf_definebitmap"/>
<element pattern="swf_definefont"/>
<element pattern="swf_defineline"/>
<element pattern="swf_definepoly"/>
<element pattern="swf_definerect"/>
<element pattern="swf_definetext"/>
<element pattern="swf_endbutton"/>
<element pattern="swf_enddoaction"/>
<element pattern="swf_endshape"/>
<element pattern="swf_endsymbol"/>
<element pattern="swf_fontsize"/>
<element pattern="swf_fontslant"/>
<element pattern="swf_fonttracking"/>
<element pattern="swf_getbitmapinfo"/>
<element pattern="swf_getfontinfo"/>
<element pattern="swf_getframe"/>
<element pattern="swf_labelframe"/>
<element pattern="swf_lookat"/>
<element pattern="swf_modifyobject"/>
<element pattern="swf_mulcolor"/>
<element pattern="swf_nextid"/>
<element pattern="swf_oncondition"/>
<element pattern="swf_openfile"/>
<element pattern="swf_ortho2"/>
<element pattern="swf_ortho"/>
<element pattern="swf_perspective"/>
<element pattern="swf_placeobject"/>
<element pattern="swf_polarview"/>
<element pattern="swf_popmatrix"/>
<element pattern="swf_posround"/>
<element pattern="swf_pushmatrix"/>
<element pattern="swf_removeobject"/>
<element pattern="swf_rotate"/>
<element pattern="swf_scale"/>
<element pattern="swf_setfont"/>
<element pattern="swf_setframe"/>
<element pattern="swf_shapearc"/>
<element pattern="swf_shapecurveto3"/>
<element pattern="swf_shapecurveto"/>
<element pattern="swf_shapefillbitmapclip"/>
<element pattern="swf_shapefillbitmaptile"/>
<element pattern="swf_shapefilloff"/>
<element pattern="swf_shapefillsolid"/>
<element pattern="swf_shapelinesolid"/>
<element pattern="swf_shapelineto"/>
<element pattern="swf_shapemoveto"/>
<element pattern="swf_showframe"/>
<element pattern="swf_startbutton"/>
<element pattern="swf_startdoaction"/>
<element pattern="swf_startshape"/>
<element pattern="swf_startsymbol"/>
<element pattern="swf_textwidth"/>
<element pattern="swf_translate"/>
<element pattern="swf_viewport"/>
<element pattern="sybase_affected_rows" autocomplete_append="($link_identifier = null);">
<reference>sybase_affected_rows($link_identifier = null);
Gets number of affected rows in last query
<b> link_identifier resource[optional]</b><b>returns</b>  int the number of affected rows, as an integer.
</reference></element>
<element pattern="sybase_close" autocomplete_append="($link_identifier = null);">
<reference>sybase_close($link_identifier = null);
Closes a Sybase connection
<b> link_identifier resource[optional]</b><b>returns</b>  bool 
</reference></element>
<element pattern="sybase_connect" autocomplete_append="($servername = null, $username = null, $password = null, $charset = null, $appname = null);">
<reference>sybase_connect($servername = null, $username = null, $password = null, $charset = null, $appname = null);
Opens a Sybase server connection
<b> servername string[optional]</b><b> username string[optional]</b><b> password string[optional]</b><b> charset string[optional]</b><b> appname string[optional]</b><b>returns</b>  resource a positive Sybase link identifier on success, or false on
</reference></element>
<element pattern="sybase_data_seek" autocomplete_append="($result_identifier, $row_number);">
<reference>sybase_data_seek($result_identifier, $row_number);
Moves internal row pointer
<b> result_identifier resource</b><b> row_number int</b><b>returns</b>  bool 
</reference></element>
<element pattern="sybase_deadlock_retry_count" autocomplete_append="($retry_count);">
<reference>sybase_deadlock_retry_count($retry_count);
Sets the deadlock retry count
<b> retry_count int</b><b>returns</b>  void 
</reference></element>
<element pattern="sybase_fetch_array" autocomplete_append="($result);">
<reference>sybase_fetch_array($result);
Fetch row as array
<b> result resource</b><b>returns</b>  array an array that corresponds to the fetched row, or false if there
</reference></element>
<element pattern="sybase_fetch_assoc" autocomplete_append="($result);">
<reference>sybase_fetch_assoc($result);
Fetch a result row as an associative array
<b> result resource</b><b>returns</b>  array an array that corresponds to the fetched row, or false if there
</reference></element>
<element pattern="sybase_fetch_field" autocomplete_append="($result, $field_offset = null);">
<reference>sybase_fetch_field($result, $field_offset = null);
Get field information from a result
<b> result resource</b><b> field_offset int[optional]</b><b>returns</b>  object an object containing field information.
</reference></element>
<element pattern="sybase_fetch_object" autocomplete_append="($result, $object = null);">
<reference>sybase_fetch_object($result, $object = null);
Fetch a row as an object
<b> result resource</b><b> object mixed[optional]</b><b>returns</b>  object an object with properties that correspond to the fetched row, or
</reference></element>
<element pattern="sybase_fetch_row" autocomplete_append="($result);">
<reference>sybase_fetch_row($result);
Get a result row as an enumerated array
<b> result resource</b><b>returns</b>  array an array that corresponds to the fetched row, or false if there
</reference></element>
<element pattern="sybase_field_seek" autocomplete_append="($result, $field_offset);">
<reference>sybase_field_seek($result, $field_offset);
Sets field offset
<b> result resource</b><b> field_offset int</b><b>returns</b>  bool 
</reference></element>
<element pattern="sybase_free_result" autocomplete_append="($result);">
<reference>sybase_free_result($result);
Frees result memory
<b> result resource</b><b>returns</b>  bool 
</reference></element>
<element pattern="sybase_get_last_message" autocomplete_append="();">
<reference>sybase_get_last_message();
Returns the last message from the server
<b>returns</b>  string the message as a string.
</reference></element>
<element pattern="sybase_min_client_severity" autocomplete_append="($severity);">
<reference>sybase_min_client_severity($severity);
Sets minimum client severity
<b> severity int</b><b>returns</b>  void 
</reference></element>
<element pattern="sybase_min_error_severity"/>
<element pattern="sybase_min_message_severity"/>
<element pattern="sybase_min_server_severity" autocomplete_append="($severity);">
<reference>sybase_min_server_severity($severity);
Sets minimum server severity
<b> severity int</b><b>returns</b>  void 
</reference></element>
<element pattern="sybase_num_fields" autocomplete_append="($result);">
<reference>sybase_num_fields($result);
Gets the number of fields in a result set
<b> result resource</b><b>returns</b>  int the number of fields as an integer.
</reference></element>
<element pattern="sybase_num_rows" autocomplete_append="($result);">
<reference>sybase_num_rows($result);
Get number of rows in a result set
<b> result resource</b><b>returns</b>  int the number of rows as an integer.
</reference></element>
<element pattern="sybase_pconnect" autocomplete_append="($servername = null, $username = null, $password = null, $charset = null, $appname = null);">
<reference>sybase_pconnect($servername = null, $username = null, $password = null, $charset = null, $appname = null);
Open persistent Sybase connection
<b> servername string[optional]</b><b> username string[optional]</b><b> password string[optional]</b><b> charset string[optional]</b><b> appname string[optional]</b><b>returns</b>  resource a positive Sybase persistent link identifier on success, or
</reference></element>
<element pattern="sybase_query" autocomplete_append="($query, $link_identifier = null);">
<reference>sybase_query($query, $link_identifier = null);
Sends a Sybase query
<b> query string</b><b> link_identifier resource[optional]</b><b>returns</b>  mixed a positive Sybase result identifier on success, false on error,
</reference></element>
<element pattern="sybase_result" autocomplete_append="($result, $row, $field);">
<reference>sybase_result($result, $row, $field);
Get result data
<b> result resource</b><b> row int</b><b> field mixed</b><b>returns</b>  string 
</reference></element>
<element pattern="sybase_select_db" autocomplete_append="($database_name, $link_identifier = null);">
<reference>sybase_select_db($database_name, $link_identifier = null);
Selects a Sybase database
<b> database_name string</b><b> link_identifier resource[optional]</b><b>returns</b>  bool 
</reference></element>
<element pattern="sybase_set_message_handler" autocomplete_append="($handler, $connection = null);">
<reference>sybase_set_message_handler($handler, $connection = null);
Sets the handler called when a server message is raised
<b> handler callback</b><b> connection resource[optional]</b><b>returns</b>  bool 
</reference></element>
<element pattern="sybase_unbuffered_query" autocomplete_append="($query, $link_identifier, $store_result = null);">
<reference>sybase_unbuffered_query($query, $link_identifier, $store_result = null);
Send a Sybase query and do not block
<b> query string</b><b> link_identifier resource</b><b> store_result bool[optional]</b><b>returns</b>  resource a positive Sybase result identifier on success, or false on
</reference></element>
<element pattern="tcpwrap_check"/>
<element pattern="ob_tidyhandler" autocomplete_append="($input, $mode = null);">
<reference>ob_tidyhandler($input, $mode = null);
ob_start callback function to repair the buffer
<b> input string </b>The buffer.
<b> mode int[optional] </b>The buffer mode.
<b>returns</b>  string the modified buffer.
</reference></element>
<element pattern="tidy_access_count" autocomplete_append="(tidy $object);">
<reference>tidy_access_count(tidy $object);
Returns the Number of Tidy accessibility warnings encountered for specified document
<b> object tidy </b>The Tidy object.
<b>returns</b>  int the number of warnings.
</reference></element>
<element pattern="tidy_clean_repair" autocomplete_append="();">
<reference>tidy_clean_repair();
Execute configured cleanup and repair operations on parsed markup
</reference></element>
<element pattern="tidy_config_count" autocomplete_append="();">
<reference>tidy_config_count();
Returns the Number of Tidy configuration errors encountered for specified document
</reference></element>
<element pattern="tidy_diagnose" autocomplete_append="();">
<reference>tidy_diagnose();
Run configured diagnostics on parsed and repaired markup
</reference></element>
<element pattern="tidy_error_count" autocomplete_append="();">
<reference>tidy_error_count();
Returns the Number of Tidy errors encountered for specified document
</reference></element>
<element pattern="tidy_get_body" autocomplete_append="();">
<reference>tidy_get_body();
Returns a tidyNode Object starting from the &amp;lt;body&amp;gt; tag of the tidy parse tree
</reference></element>
<element pattern="tidy_get_config" autocomplete_append="();">
<reference>tidy_get_config();
Get current Tidy configuration
</reference></element>
<element pattern="tidy_get_error_buffer" autocomplete_append="();">
<reference>tidy_get_error_buffer();
Return warnings and errors which occurred parsing the specified document
</reference></element>
<element pattern="tidy_get_head" autocomplete_append="();">
<reference>tidy_get_head();
Returns a tidyNode Object starting from the &amp;lt;head&amp;gt; tag of the tidy parse tree
</reference></element>
<element pattern="tidy_get_html_ver" autocomplete_append="();">
<reference>tidy_get_html_ver();
Get the Detected HTML version for the specified document
</reference></element>
<element pattern="tidy_get_html" autocomplete_append="();">
<reference>tidy_get_html();
Returns a tidyNode Object starting from the &amp;lt;html&amp;gt; tag of the tidy parse tree
</reference></element>
<element pattern="tidy_get_opt_doc" autocomplete_append="(tidy $object, $optname);">
<reference>tidy_get_opt_doc(tidy $object, $optname);
Returns the documentation for the given option name
<b> object tidy </b>A tidy object
<b> optname string </b>The option name
<b>returns</b>  string a string if the option exists and has documentation available, or
false otherwise.
</reference></element>
<element pattern="tidy_get_output" autocomplete_append="(tidy $object);">
<reference>tidy_get_output(tidy $object);
Return a string representing the parsed tidy markup
<b> object tidy </b>The tidy object.
<b>returns</b>  string the parsed tidy markup.
</reference></element>
<element pattern="tidy_get_release" autocomplete_append="();">
<reference>tidy_get_release();
Get release date (version) for Tidy library
<b>returns</b>  string a string with the release date of the Tidy library.
</reference></element>
<element pattern="tidy_get_root" autocomplete_append="();">
<reference>tidy_get_root();
Returns a tidyNode object representing the root of the tidy parse tree
</reference></element>
<element pattern="tidy_get_status" autocomplete_append="();">
<reference>tidy_get_status();
Get status of specified document
</reference></element>
<element pattern="tidy_getopt" autocomplete_append="();">
<reference>tidy_getopt();
Returns the value of the specified configuration option for the tidy document
</reference></element>
<element pattern="tidy_is_xhtml" autocomplete_append="();">
<reference>tidy_is_xhtml();
Indicates if the document is a XHTML document
</reference></element>
<element pattern="tidy_is_xml" autocomplete_append="();">
<reference>tidy_is_xml();
Indicates if the document is a generic (non HTML/XHTML) XML document
</reference></element>
<element pattern="tidy_load_config"/>
<element pattern="tidy_parse_file" autocomplete_append="();">
<reference>tidy_parse_file();
Parse markup in file or URI
</reference></element>
<element pattern="tidy_parse_string" autocomplete_append="();">
<reference>tidy_parse_string();
Parse a document stored in a string
</reference></element>
<element pattern="tidy_repair_file" autocomplete_append="();">
<reference>tidy_repair_file();
Repair a file and return it as a string
</reference></element>
<element pattern="tidy_repair_string" autocomplete_append="();">
<reference>tidy_repair_string();
Repair a string using an optionally provided configuration file
</reference></element>
<element pattern="tidy_reset_config"/>
<element pattern="tidy_save_config"/>
<element pattern="tidy_set_encoding"/>
<element pattern="tidy_setopt"/>
<element pattern="tidy_warning_count" autocomplete_append="(tidy $object);">
<reference>tidy_warning_count(tidy $object);
Returns the Number of Tidy warnings encountered for specified document
<b> object tidy </b>The Tidy object.
<b>returns</b>  int the number of warnings.
</reference></element>
<element pattern="token_get_all" autocomplete_append="($source);">
<reference>token_get_all($source);
Split given source into PHP tokens
<b> source string </b>The PHP source to parse.
<b>returns</b>  array An array of token identifiers. Each individual token identifier is either
a single character (i.e.: ;, ., 
&amp;gt;, !, etc...),
or a three element array containing the token index in element 0, the string
content of the original token in element 1 and the line number in element 2.
</reference></element>
<element pattern="token_name" autocomplete_append="($token);">
<reference>token_name($token);
Get the symbolic name of a given PHP token
<b> token int </b>The token value.
<b>returns</b>  string The symbolic name of the given token. The returned
name returned matches the name of the matching token constant.
</reference></element>
<element pattern="unicode_encode"/>
<element pattern="unicode_semantics"/>
<element pattern="base64_decode" autocomplete_append="($data, $strict = null);">
<reference>base64_decode($data, $strict = null);
Decodes data encoded with MIME base64
<b> data string </b>The decoded data.
<b> strict bool[optional] </b>Returns false if input contains space or some other separator.
<b>returns</b>  string the original data or false on failure. The returned data may be
binary.
</reference></element>
<element pattern="base64_encode" autocomplete_append="($data);">
<reference>base64_encode($data);
Encodes data with MIME base64
<b> data string </b>The data to encode.
<b>returns</b>  string The encoded data, as a string.
</reference></element>
<element pattern="get_headers" autocomplete_append="($url, $format = null);">
<reference>get_headers($url, $format = null);
Fetches all the headers sent by the server in response to a HTTP request
<b> url string </b>The target URL.
<b> format int[optional] </b>If the optional format parameter is set to 1,
get_headers parses the response and sets the 
array's keys.
<b>returns</b>  array an indexed or associative array with the headers, or false on
failure.
</reference></element>
<element pattern="get_meta_tags" autocomplete_append="($filename, $use_include_path = null);">
<reference>get_meta_tags($filename, $use_include_path = null);
Extracts all meta tag content attributes from a file and returns an array
<b> filename string </b>The path to the HTML file, as a string. This can be a local file or an
URL.
What get_meta_tags parses
]]&gt;
(pay attention to line endings - PHP uses a native function to
parse the input, so a Mac file won't work on Unix).
<b> use_include_path bool[optional] </b>Setting use_include_path to true will result
in PHP trying to open the file along the standard include path as per
the include_path directive.
This is used for local files, not URLs.
<b>returns</b>  array an array with all the parsed meta tags.
The value of the name property becomes the key, the value of the content
property becomes the value of the returned array, so you can easily use
standard array functions to traverse it or access single values. 
Special characters in the value of the name property are substituted with
'_', the rest is converted to lower case. If two meta tags have the same
name, only the last one is returned.
</reference></element>
<element pattern="http_build_query" autocomplete_append="(array $formdata, $numeric_prefix = null, $arg_separator = null);">
<reference>http_build_query(array $formdata, $numeric_prefix = null, $arg_separator = null);
Generate URL-encoded query string
<b> formdata array </b>May be an array or object containing properties.
The array form may be a simple one-dimensional structure, or an array
of arrays (who in turn may contain other arrays).
<b> numeric_prefix string[optional] </b>If numeric indices are used in the base array and this parameter is
provided, it will be prepended to the numeric index for elements in
the base array only.
This is meant to allow for legal variable names when the data is
decoded by PHP or another CGI application later on.
<b> arg_separator string[optional] </b>arg_separator.output
is used to separate arguments, unless this parameter is specified,
and is then used.
<b>returns</b>  string a URL-encoded string.
</reference></element>
<element pattern="parse_url" autocomplete_append="($url, $component = null);">
<reference>parse_url($url, $component = null);
Parse a URL and return its components
<b> url string </b>The URL to parse
<b> component int[optional] </b>Specify one of PHP_URL_SCHEME,
PHP_URL_HOST, PHP_URL_PORT,
PHP_URL_USER, PHP_URL_PASS,
PHP_URL_PATH, PHP_URL_QUERY
or PHP_URL_FRAGMENT to retrieve just a specific
URL component as a string.
<b>returns</b>  mixed On seriously malformed URLs, parse_url may return
false and emit a E_WARNING. Otherwise an associative
array is returned, whose components may be (at least one):
scheme - e.g. http
host 
port
user
pass
path
query - after the question mark ?
fragment - after the hashmark #
If the component parameter is specified a
string is returned instead of an array.
</reference></element>
<element pattern="rawurldecode" autocomplete_append="($str);">
<reference>rawurldecode($str);
Decode URL-encoded strings
<b> str string </b>The URL to be decoded.
<b>returns</b>  string the decoded URL, as a string.
</reference></element>
<element pattern="rawurlencode" autocomplete_append="($str);">
<reference>rawurlencode($str);
URL-encode according to RFC 1738
<b> str string </b>The URL to be encoded.
<b>returns</b>  string a string in which all non-alphanumeric characters except
-_. have been replaced with a percent
(%) sign followed by two hex digits. This is the
encoding described in RFC 1738 for
protecting literal characters from being interpreted as special URL
delimiters, and for protecting URLs from being mangled by transmission
media with character conversions (like some email systems).
</reference></element>
<element pattern="urldecode" autocomplete_append="($str);">
<reference>urldecode($str);
Decodes URL-encoded string
<b> str string </b>The string to be decoded.
<b>returns</b>  string the decoded string.
</reference></element>
<element pattern="urlencode" autocomplete_append="($str);">
<reference>urlencode($str);
URL-encodes string
<b> str string </b>The string to be encoded.
<b>returns</b>  string a string in which all non-alphanumeric characters except
-_. have been replaced with a percent
(%) sign followed by two hex digits and spaces encoded
as plus (+) signs. It is encoded the same way that the
posted data from a WWW form is encoded, that is the same way as in
application/x-www-form-urlencoded media type. This
differs from the RFC 1738 encoding (see
rawurlencode) in that for historical reasons, spaces
are encoded as plus (+) signs.
</reference></element>
<element pattern="debug_zval_dump" autocomplete_append="($variable);">
<reference>debug_zval_dump($variable);
Dumps a string representation of an internal zend value to output
<b> variable mixed </b>The variable being evaluated.
<b>returns</b>  void 
</reference></element>
<element pattern="empty"/>
<element pattern="floatval" autocomplete_append="($var);">
<reference>floatval($var);
Get float value of a variable
<b> var mixed </b>May be any scalar type. You cannot use floatval 
on arrays or objects.
<b>returns</b>  float The float value of the given variable.
</reference></element>
<element pattern="get_defined_vars" autocomplete_append="();">
<reference>get_defined_vars();
Returns an array of all defined variables
<b>returns</b>  array A multidimensional array with all the variables.
</reference></element>
<element pattern="get_resource_type" autocomplete_append="($handle);">
<reference>get_resource_type($handle);
Returns the resource type
<b> handle resource </b>The evaluated resource handle.
<b>returns</b>  string If the given handle is a resource, this function
will return a string representing its type. If the type is not identified
by this function, the return value will be the string 
Unknown.
This function will return false and generate an error if 
handle is not a resource.
</reference></element>
<element pattern="gettype" autocomplete_append="($var);">
<reference>gettype($var);
Get the type of a variable
<b> var mixed </b>The variable being type checked.
<b>returns</b>  string Possibles values for the returned string are:
"boolean"
"integer"
"double" (for historical reasons "double" is
returned in case of a float, and not simply
"float")
"string"
"array"
"object"
"resource"
"NULL"
"unknown type"
</reference></element>
<element pattern="import_request_variables" autocomplete_append="($types, $prefix = null);">
<reference>import_request_variables($types, $prefix = null);
Import GET/POST/Cookie variables into the global scope
<b> types string </b>Using the types parameter, you can specify
which request variables to import. You can use 'G', 'P' and 'C' 
characters respectively for GET, POST and Cookie. These characters are
not case sensitive, so you can also use any combination of 'g', 'p'
and 'c'. POST includes the POST uploaded file information.
Note that the order of the letters matters, as when using "gp", the
POST variables will overwrite GET variables with the same name. Any
other letters than GPC are discarded.
<b> prefix string[optional] </b>Variable name prefix, prepended before all variable's name imported
into the global scope. So if you have a GET value named "userid", and
provide a prefix "pref_", then you'll get a global variable named
$pref_userid.
Although the prefix parameter is optional, you
will get an E_NOTICE level
error if you specify no prefix, or specify an empty string as a
prefix. This is a possible security hazard. Notice level errors are
not displayed using the default error reporting level.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="intval" autocomplete_append="($var, $base = null);">
<reference>intval($var, $base = null);
Get the integer value of a variable
<b> var mixed </b>The scalar value being converted to an integer
<b> base int[optional] </b>The base for the conversion (default is base 10)
<b>returns</b>  int The integer value of var on success, or 0 on
failure. Empty arrays and objects return 0, non-empty arrays and
objects return 1.
The maximum value depends on the system. 32 bit systems have a 
maximum signed integer range of -2147483648 to 2147483647. So for example 
on such a system, intval('1000000000000') will return 
2147483647. The maximum signed integer value for 64 bit systems is 
9223372036854775807.
Strings will most likely return 0 although this depends on the 
leftmost characters of the string. The common rules of 
integer casting 
apply.
</reference></element>
<element pattern="is_array" autocomplete_append="($var);">
<reference>is_array($var);
Finds whether a variable is an array
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is an array, 
false otherwise.
</reference></element>
<element pattern="is_binary"/>
<element pattern="is_bool" autocomplete_append="($var);">
<reference>is_bool($var);
Finds out whether a variable is a boolean
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is a boolean,
false otherwise.
</reference></element>
<element pattern="is_buffer"/>
<element pattern="is_callable" autocomplete_append="($var, $syntax_only = null, &amp;$callable_name = null);">
<reference>is_callable($var, $syntax_only = null, &amp;$callable_name = null);
Verify that the contents of a variable can be called as a function
<b> var mixed </b>Can be either the name of a function stored in a string variable, or
an object and the name of a method within the object, like this: 
array($SomeObject, 'MethodName')
<b> syntax_only bool[optional] </b>If set to true the function only verifies that
var might be a function or method. It will only
reject simple variables that are not strings, or an array that does
not have a valid structure to be used as a callback. The valid ones
are supposed to have only 2 entries, the first of which is an object
or a string, and the second a string.
<b> callable_name string[optional] </b>Receives the "callable name". In the example below it is
"someClass::someMethod". Note, however, that despite the implication
that someClass::SomeMethod() is a callable static method, this is not
the case.
<b>returns</b>  bool true if var is callable, false 
otherwise.
</reference></element>
<element pattern="is_float" autocomplete_append="($var);">
<reference>is_float($var);
Finds whether the type of a variable is float
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is a float, 
false otherwise.
</reference></element>
<element pattern="is_int" autocomplete_append="($var);">
<reference>is_int($var);
Find whether the type of a variable is integer
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is an integer, 
false otherwise.
</reference></element>
<element pattern="is_null" autocomplete_append="($var);">
<reference>is_null($var);
Finds whether a variable is &amp;null;
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is null, false
otherwise.
</reference></element>
<element pattern="is_numeric" autocomplete_append="($var);">
<reference>is_numeric($var);
Finds whether a variable is a number or a numeric string
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is a number or a numeric
string, false otherwise.
</reference></element>
<element pattern="is_object" autocomplete_append="($var);">
<reference>is_object($var);
Finds whether a variable is an object
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is an object, 
false otherwise.
</reference></element>
<element pattern="is_resource" autocomplete_append="($var);">
<reference>is_resource($var);
Finds whether a variable is a resource
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is a resource,
false otherwise.
</reference></element>
<element pattern="is_scalar" autocomplete_append="($var);">
<reference>is_scalar($var);
Finds whether a variable is a scalar
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is a scalar false
otherwise.
</reference></element>
<element pattern="is_string" autocomplete_append="($var);">
<reference>is_string($var);
Find whether the type of a variable is string
<b> var mixed </b>The variable being evaluated.
<b>returns</b>  bool true if var is of type string,
false otherwise.
</reference></element>
<element pattern="is_unicode"/>
<element pattern="isset"/>
<element pattern="print_r" autocomplete_append="($expression, $return = null);">
<reference>print_r($expression, $return = null);
Prints human-readable information about a variable
<b> expression mixed </b>The expression to be printed.
<b> return bool[optional] </b>If you would like to capture the output of print_r, 
use the return parameter. If this parameter is set
to true, print_r will return its output, instead of
printing it (which it does by default).
<b>returns</b>  mixed If given a string, integer or float,
the value itself will be printed. If given an array, values
will be presented in a format that shows keys and elements. Similar
notation is used for objects.
</reference></element>
<element pattern="serialize" autocomplete_append="($value);">
<reference>serialize($value);
Generates a storable representation of a value
<b> value mixed </b>The value to be serialized. serialize
handles all types, except the resource-type.
You can even serialize arrays that contain
references to itself. Circular references inside the array/object you 
are serializeing will also be stored. Any other 
reference will be lost.
When serializing objects, PHP will attempt to call the member function
__sleep prior to serialization. 
This is to allow the object to do any last minute clean-up, etc. prior 
to being serialized. Likewise, when the object is restored using 
unserialize the __wakeup member function is called.
<b>returns</b>  string a string containing a byte-stream representation of 
value that can be stored anywhere.
</reference></element>
<element pattern="settype" autocomplete_append="(&amp;$var, $type);">
<reference>settype(&amp;$var, $type);
Set the type of a variable
<b> var mixed </b>The variable being converted.
<b> type string </b>Possibles values of type are:
"boolean" (or, since PHP 4.2.0, "bool")
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="strval" autocomplete_append="($var);">
<reference>strval($var);
Get string value of a variable
<b> var mixed </b>The variable that is being converted to a string.
var may be any scalar type. You cannot use
strval on arrays or objects.
<b>returns</b>  string The string value of var.
</reference></element>
<element pattern="unserialize" autocomplete_append="($str);">
<reference>unserialize($str);
Creates a PHP value from a stored representation
<b> str string </b>The serialized string.
If the variable being unserialized is an object, after successfully 
reconstructing the object PHP will automatically attempt to call the
__wakeup member function (if it exists).
unserialize_callback_func directive
It's possible to set a callback-function which will be called,
if an undefined class should be instantiated during unserializing.
(to prevent getting an incomplete object "__PHP_Incomplete_Class".)
Use your &amp;php.ini;, ini_set or &amp;htaccess; 
to define 'unserialize_callback_func'. Everytime an undefined class
should be instantiated, it'll be called. To disable this feature just
empty this setting.
<b>returns</b>  mixed The converted value is returned, and can be a boolean,
integer, float, string,
array or object.
In case the passed string is not unserializeable, false is returned and
E_NOTICE is issued.
</reference></element>
<element pattern="unset"/>
<element pattern="var_dump" autocomplete_append="($expression, $expression = null);">
<reference>var_dump($expression, $expression = null);
Dumps information about a variable
<b> expression mixed </b>The variable you want to export.
<b> expression mixed[optional] </b><b>returns</b>  void 
</reference></element>
<element pattern="var_export" autocomplete_append="($expression, $return = null);">
<reference>var_export($expression, $return = null);
Outputs or returns a parsable string representation of a variable
<b> expression mixed </b>The variable you want to export.
<b> return bool[optional] </b>If used and set to true, var_export will return
the variable representation instead of outputing it.
&amp;note.uses-ob;
<b>returns</b>  mixed the variable representation when the return 
parameter is used and evaluates to true. Otherwise, this function will
return &amp;null;.
</reference></element>
<element pattern="pfpro_cleanup"/>
<element pattern="pfpro_init"/>
<element pattern="pfpro_process_raw"/>
<element pattern="pfpro_process"/>
<element pattern="pfpro_version"/>
<element pattern="vpopmail_add_alias_domain_ex"/>
<element pattern="vpopmail_add_alias_domain"/>
<element pattern="vpopmail_add_domain_ex"/>
<element pattern="vpopmail_add_domain"/>
<element pattern="vpopmail_add_user"/>
<element pattern="vpopmail_alias_add"/>
<element pattern="vpopmail_alias_del_domain"/>
<element pattern="vpopmail_alias_del"/>
<element pattern="vpopmail_alias_get_all"/>
<element pattern="vpopmail_alias_get"/>
<element pattern="vpopmail_auth_user"/>
<element pattern="vpopmail_del_domain_ex"/>
<element pattern="vpopmail_del_domain"/>
<element pattern="vpopmail_del_user"/>
<element pattern="vpopmail_error"/>
<element pattern="vpopmail_passwd"/>
<element pattern="vpopmail_set_user_quota"/>
<element pattern="w32api_deftype"/>
<element pattern="w32api_init_dtype"/>
<element pattern="w32api_invoke_function"/>
<element pattern="w32api_register_function"/>
<element pattern="w32api_set_call_method"/>
<element pattern="wddx_add_vars" autocomplete_append="($packet_id, $var_name, $_ = null);">
<reference>wddx_add_vars($packet_id, $var_name, $_ = null);
Add variables to a WDDX packet with the specified ID
<b> packet_id resource </b>A WDDX packet, returned by wddx_packet_start.
<b> var_name mixed </b>Can be either a string naming a variable or an array containing
strings naming the variables or another array, etc.
<b> _ mixed[optional] </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="wddx_packet_end" autocomplete_append="($packet_id);">
<reference>wddx_packet_end($packet_id);
Ends a WDDX packet with the specified ID
<b> packet_id resource </b>A WDDX packet, returned by wddx_packet_start.
<b>returns</b>  string the string containing the WDDX packet.
</reference></element>
<element pattern="wddx_packet_start" autocomplete_append="($comment = null);">
<reference>wddx_packet_start($comment = null);
Starts a new WDDX packet with structure inside it
<b> comment string[optional] </b>An optional comment string.
<b>returns</b>  resource a packet ID for use in later functions, or false on error.
</reference></element>
<element pattern="wddx_serialize_value" autocomplete_append="($var, $comment = null);">
<reference>wddx_serialize_value($var, $comment = null);
Serialize a single value into a WDDX packet
<b> var mixed </b>The value to be serialized
<b> comment string[optional] </b>An optional comment string that appears in the packet header.
<b>returns</b>  string the WDDX packet, or false on error.
</reference></element>
<element pattern="wddx_serialize_vars" autocomplete_append="($var_name, $_ = null);">
<reference>wddx_serialize_vars($var_name, $_ = null);
Serialize variables into a WDDX packet
<b> var_name mixed </b>Can be either a string naming a variable or an array containing
strings naming the variables or another array, etc.
<b> _ mixed[optional] </b><b>returns</b>  string the WDDX packet, or false on error.
</reference></element>
<element pattern="wddx_unserialize"/>
<element pattern="win32_ps_list_procs"/>
<element pattern="win32_ps_stat_mem"/>
<element pattern="win32_ps_stat_proc"/>
<element pattern="win32_create_service"/>
<element pattern="win32_delete_service"/>
<element pattern="win32_get_last_control_message"/>
<element pattern="win32_query_service_status"/>
<element pattern="win32_set_service_status"/>
<element pattern="win32_start_service_ctrl_dispatcher"/>
<element pattern="win32_start_service"/>
<element pattern="win32_stop_service"/>
<element pattern="xattr_get"/>
<element pattern="xattr_list"/>
<element pattern="xattr_remove"/>
<element pattern="xattr_set"/>
<element pattern="xattr_supported"/>
<element pattern="xdiff_file_diff_binary"/>
<element pattern="xdiff_file_diff"/>
<element pattern="xdiff_file_merge3"/>
<element pattern="xdiff_file_patch_binary"/>
<element pattern="xdiff_file_patch"/>
<element pattern="xdiff_string_diff_binary"/>
<element pattern="xdiff_string_diff"/>
<element pattern="xdiff_string_merge3"/>
<element pattern="xdiff_string_patch_binary"/>
<element pattern="xdiff_string_patch"/>
<element pattern="utf8_decode" autocomplete_append="($data);">
<reference>utf8_decode($data);
Converts a string with ISO-8859-1 characters encoded with UTF-8
to single-byte ISO-8859-1
<b> data string </b>An UTF-8 encoded string.
<b>returns</b>  string the ISO-8859-1 translation of data.
</reference></element>
<element pattern="utf8_encode" autocomplete_append="($data);">
<reference>utf8_encode($data);
Encodes an ISO-8859-1 string to UTF-8
<b> data string </b>An ISO-8859-1 string.
<b>returns</b>  string the UTF-8 translation of data.
</reference></element>
<element pattern="xml_error_string" autocomplete_append="($code);">
<reference>xml_error_string($code);
Get XML parser error string
<b> code int </b>An error code from xml_get_error_code.
<b>returns</b>  string a string with a textual description of the error
code, or false if no description was found.
</reference></element>
<element pattern="xml_get_current_byte_index" autocomplete_append="($parser);">
<reference>xml_get_current_byte_index($parser);
Get current byte index for an XML parser
<b> parser resource </b>A reference to the XML parser to get byte index from.
<b>returns</b>  int This function returns false if parser does
not refer to a valid parser, or else it returns which byte index
the parser is currently at in its data buffer (starting at 0).
</reference></element>
<element pattern="xml_get_current_column_number" autocomplete_append="($parser);">
<reference>xml_get_current_column_number($parser);
Get current column number for an XML parser
<b> parser resource </b>A reference to the XML parser to get column number from.
<b>returns</b>  int This function returns false if parser does
not refer to a valid parser, or else it returns which column on
the current line (as given by
xml_get_current_line_number) the parser is
currently at.
</reference></element>
<element pattern="xml_get_current_line_number" autocomplete_append="($parser);">
<reference>xml_get_current_line_number($parser);
Get current line number for an XML parser
<b> parser resource </b>A reference to the XML parser to get line number from.
<b>returns</b>  int This function returns false if parser does
not refer to a valid parser, or else it returns which line the
parser is currently at in its data buffer.
</reference></element>
<element pattern="xml_get_error_code" autocomplete_append="($parser);">
<reference>xml_get_error_code($parser);
Get XML parser error code
<b> parser resource </b>A reference to the XML parser to get error code from.
<b>returns</b>  int This function returns false if parser does
not refer to a valid parser, or else it returns one of the error
codes listed in the error codes
section.
</reference></element>
<element pattern="xml_parse_into_struct" autocomplete_append="($parser, $data, array &amp;$values, array &amp;$index = null);">
<reference>xml_parse_into_struct($parser, $data, array &amp;$values, array &amp;$index = null);
Parse XML data into an array structure
<b> parser resource </b><b> data string </b><b> values array </b><b> index array[optional] </b><b>returns</b>  int xml_parse_into_struct returns 0 for failure and 1 for
success. This is not the same as false and true, be careful with
operators such as ===.
</reference></element>
<element pattern="xml_parse" autocomplete_append="($parser, $data, $is_final = null);">
<reference>xml_parse($parser, $data, $is_final = null);
Start parsing an XML document
<b> parser resource </b>A reference to the XML parser to use.
<b> data string </b>Chunk of data to parse. A document may be parsed piece-wise by
calling xml_parse several times with new data,
as long as the is_final parameter is set and
true when the last data is parsed.
<b> is_final bool[optional] </b>If set and true, data is the last piece of
data sent in this parse.
<b>returns</b>  int 1 on success or 0 on failure.
For unsuccessful parses, error information can be retrieved with
xml_get_error_code,
xml_error_string,
xml_get_current_line_number,
xml_get_current_column_number and
xml_get_current_byte_index.
Entity errors are reported at the end of the data thus only if
is_final is set and true.
</reference></element>
<element pattern="xml_parser_create_ns" autocomplete_append="($encoding = null, $separator = null);">
<reference>xml_parser_create_ns($encoding = null, $separator = null);
Create an XML parser with namespace support
<b> encoding string[optional] </b>The optional encoding specifies the character
encoding for the input/output in PHP 4. Starting from PHP 5, the input
encoding is automatically detected, so that the
encoding parameter specifies only the output
encoding. In PHP 4, the default output encoding is the same as the
input charset. In PHP 5.0.0 and 5.0.1, the default output charset is
ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported
encodings are ISO-8859-1, UTF-8 and
US-ASCII.
<b> separator string[optional] </b>With a namespace aware parser tag parameters passed to the various
handler functions will consist of namespace and tag name separated by
the string specified in seperator or
':' by default. 
<b>returns</b>  resource a resource handle for the new XML parser.
</reference></element>
<element pattern="xml_parser_create" autocomplete_append="($encoding = null);">
<reference>xml_parser_create($encoding = null);
Create an XML parser
<b> encoding string[optional] </b>The optional encoding specifies the character
encoding for the input/output in PHP 4. Starting from PHP 5, the input
encoding is automatically detected, so that the
encoding parameter specifies only the output
encoding. In PHP 4, the default output encoding is the same as the
input charset. If empty string is passed, the parser attempts to identify
which encoding the document is encoded in by looking at the heading 3 or
4 bytes. In PHP 5.0.0 and 5.0.1, the default output charset is
ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported
encodings are ISO-8859-1, UTF-8 and
US-ASCII.
<b>returns</b>  resource a resource handle for the new XML parser.
</reference></element>
<element pattern="xml_parser_free" autocomplete_append="($parser);">
<reference>xml_parser_free($parser);
Free an XML parser
<b> parser resource A reference to the XML parser to free.</b><b>returns</b>  bool This function returns false if parser does not
refer to a valid parser, or else it frees the parser and returns true.
</reference></element>
<element pattern="xml_parser_get_option" autocomplete_append="($parser, $option);">
<reference>xml_parser_get_option($parser, $option);
Get options from an XML parser
<b> parser resource A reference to the XML parser to get an option from.</b><b> option int Which option to fetch. XML_OPTION_CASE_FOLDING</b>and XML_OPTION_TARGET_ENCODING are available.
See xml_parser_set_option for their description.
<b>returns</b>  mixed This function returns false if parser does
not refer to a valid parser or if option isn't
valid (generates also a E_WARNING).
Else the option's value is returned.
</reference></element>
<element pattern="xml_parser_set_option" autocomplete_append="($parser, $option, $value);">
<reference>xml_parser_set_option($parser, $option, $value);
Set options in an XML parser
<b> parser resource </b>A reference to the XML parser to set an option in.
<b> option int </b>Which option to set. See below.
The following options are available:

XML parser options
XML_OPTION_CASE_FOLDING
integer
Controls whether case-folding is enabled for this
XML parser. Enabled by default.
XML_OPTION_SKIP_TAGSTART
integer 
Specify how many characters should be skipped in the beginning of a
tag name.
XML_OPTION_SKIP_WHITE
integer 
Whether to skip values consisting of whitespace characters.
XML_OPTION_TARGET_ENCODING
string 
Sets which target encoding to
use in this XML parser.By default, it is set to the same as the
source encoding used by xml_parser_create.
Supported target encodings are ISO-8859-1,
US-ASCII and UTF-8.

<b> value mixed </b>The option's new value.
<b>returns</b>  bool This function returns false if parser does not
refer to a valid parser, or if the option could not be set. Else the
option is set and true is returned.
</reference></element>
<element pattern="xml_set_character_data_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_character_data_handler($parser, $handler);
Set up character data handler
<b> parser resource </b><b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept
two parameters:
handler
resourceparser
stringdata
parser
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_default_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_default_handler($parser, $handler);
Set up default handler
<b> parser resource </b><b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept
two parameters:
handler
resourceparser
stringdata
parser
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_element_handler" autocomplete_append="($parser, $start_element_handler, $end_element_handler);">
<reference>xml_set_element_handler($parser, $start_element_handler, $end_element_handler);
Set up start and end element handlers
<b> parser resource </b><b> start_element_handler callback </b>The function named by start_element_handler
must accept three parameters:
start_element_handler
resourceparser
stringname
arrayattribs
parser 
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b> end_element_handler callback </b>The function named by end_element_handler
must accept two parameters:
end_element_handler
resourceparser
stringname
parser 
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_end_namespace_decl_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_end_namespace_decl_handler($parser, $handler);
Set up end namespace declaration handler
<b> parser resource </b>A reference to the XML parser.
<b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept
three parameters, and should return an integer value. If the
value returned from the handler is false (which it will be if no
value is returned), the XML parser will stop parsing and
xml_get_error_code will return
XML_ERROR_EXTERNAL_ENTITY_HANDLING.
handler
resourceparser
stringuser_data
stringprefix
parser
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_external_entity_ref_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_external_entity_ref_handler($parser, $handler);
Set up external entity reference handler
<b> parser resource </b><b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept
five parameters, and should return an integer value.If the
value returned from the handler is false (which it will be if no
value is returned), the XML parser will stop parsing and
xml_get_error_code will return
XML_ERROR_EXTERNAL_ENTITY_HANDLING.
handler
resourceparser
stringopen_entity_names
stringbase
stringsystem_id
stringpublic_id
parser
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_notation_decl_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_notation_decl_handler($parser, $handler);
Set up notation declaration handler
<b> parser resource </b><b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept
five parameters:
handler
resourceparser
stringnotation_name
stringbase
stringsystem_id
stringpublic_id
parser
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_object" autocomplete_append="($parser, &amp;$object);">
<reference>xml_set_object($parser, &amp;$object);
Use XML Parser within an object
<b> parser resource </b><b> object object </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_processing_instruction_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_processing_instruction_handler($parser, $handler);
Set up processing instruction (PI) handler
<b> parser resource </b><b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept
three parameters:
handler
resourceparser
stringtarget
stringdata
parser
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_start_namespace_decl_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_start_namespace_decl_handler($parser, $handler);
Set up start namespace declaration handler
<b> parser resource </b>A reference to the XML parser.
<b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept
four parameters, and should return an integer value. If the
value returned from the handler is false (which it will be if no
value is returned), the XML parser will stop parsing and
xml_get_error_code will return
XML_ERROR_EXTERNAL_ENTITY_HANDLING.
handler
resourceparser
stringuser_data
stringprefix
stringuri
parser
The first parameter, parser, is a
reference to the XML parser calling the handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xml_set_unparsed_entity_decl_handler" autocomplete_append="($parser, $handler);">
<reference>xml_set_unparsed_entity_decl_handler($parser, $handler);
Set up unparsed entity declaration handler
<b> parser resource </b><b> handler callback </b>handler is a string containing the name of a
function that must exist when xml_parse is called
for parser.
The function named by handler must accept six
parameters:
handler
resourceparser
stringentity_name
stringbase
stringsystem_id
stringpublic_id
stringnotation_name
parser
The first parameter, parser, is a
reference to the XML parser calling the
handler.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="xmlrpc_decode_request" autocomplete_append="($xml, &amp;$method, $encoding = null);">
<reference>xmlrpc_decode_request($xml, &amp;$method, $encoding = null);
Decodes XML into native PHP types
<b> xml string </b><b> method string </b><b> encoding string[optional] </b><b>returns</b>  mixed 
</reference></element>
<element pattern="xmlrpc_decode" autocomplete_append="($xml, $encoding = null);">
<reference>xmlrpc_decode($xml, $encoding = null);
Decodes XML into native PHP types
<b> xml string </b>XML response returned by XMLRPC method.
<b> encoding string[optional] </b>Input encoding supported by iconv (defaults to "iso-8859-1").
<b>returns</b>  mixed either an array, or an integer, or a string, or a boolean according
to the response returned by the XMLRPC method.
</reference></element>
<element pattern="xmlrpc_encode_request" autocomplete_append="($method, $params, array $output_options = null);">
<reference>xmlrpc_encode_request($method, $params, array $output_options = null);
Generates XML for a method request
<b> method string </b>Name of the method to call.
<b> params mixed </b>Method parameters compatible with method signature.
<b> output_options array[optional] </b>Array specifying output options may contain (default values are
emphasised):
output_type: php, xml
<b>returns</b>  string a string containing the XML representation of the request.
</reference></element>
<element pattern="xmlrpc_encode" autocomplete_append="($value);">
<reference>xmlrpc_encode($value);
Generates XML for a PHP value
<b> value mixed </b><b>returns</b>  string 
</reference></element>
<element pattern="xmlrpc_get_type" autocomplete_append="($value);">
<reference>xmlrpc_get_type($value);
Gets xmlrpc type for a PHP value
<b> value mixed </b><b>returns</b>  string 
</reference></element>
<element pattern="xmlrpc_is_fault" autocomplete_append="(array $arg);">
<reference>xmlrpc_is_fault(array $arg);
Determines if an array value represents an XMLRPC fault
<b> arg array </b>Array returned by xmlrpc_decode.
<b>returns</b>  bool true if the argument means fault, false otherwise. Fault
description is available in $arg["faultString"], fault
code is in $arg["faultCode"].
</reference></element>
<element pattern="xmlrpc_parse_method_descriptions" autocomplete_append="($xml);">
<reference>xmlrpc_parse_method_descriptions($xml);
Decodes XML into a list of method descriptions
<b> xml string </b><b>returns</b>  array 
</reference></element>
<element pattern="xmlrpc_server_add_introspection_data" autocomplete_append="($server, array $desc);">
<reference>xmlrpc_server_add_introspection_data($server, array $desc);
Adds introspection documentation
<b> server resource </b><b> desc array </b><b>returns</b>  int 
</reference></element>
<element pattern="xmlrpc_server_call_method" autocomplete_append="($server, $xml, $user_data, array $output_options = null);">
<reference>xmlrpc_server_call_method($server, $xml, $user_data, array $output_options = null);
Parses XML requests and call methods
<b> server resource </b><b> xml string </b><b> user_data mixed </b><b> output_options array[optional] </b><b>returns</b>  string 
</reference></element>
<element pattern="xmlrpc_server_create" autocomplete_append="();">
<reference>xmlrpc_server_create();
Creates an xmlrpc server
<b>returns</b>  resource 
</reference></element>
<element pattern="xmlrpc_server_destroy" autocomplete_append="($server);">
<reference>xmlrpc_server_destroy($server);
Destroys server resources
<b> server resource </b><b>returns</b>  int 
</reference></element>
<element pattern="xmlrpc_server_register_introspection_callback" autocomplete_append="($server, $function);">
<reference>xmlrpc_server_register_introspection_callback($server, $function);
Register a PHP function to generate documentation
<b> server resource </b><b> function string </b><b>returns</b>  bool 
</reference></element>
<element pattern="xmlrpc_server_register_method" autocomplete_append="($server, $method_name, $function);">
<reference>xmlrpc_server_register_method($server, $method_name, $function);
Register a PHP function to resource method matching method_name
<b> server resource </b><b> method_name string </b><b> function string </b><b>returns</b>  bool 
</reference></element>
<element pattern="xmlrpc_set_type" autocomplete_append="(&amp;$value, $type);">
<reference>xmlrpc_set_type(&amp;$value, $type);
Sets xmlrpc type, base64 or datetime, for a PHP string value
<b> value string </b>Value to set the type
<b> type string </b>'base64' or 'datetime'
<b>returns</b>  bool Returns true on success or false on failure.
If successful, value is converted to an object.
</reference></element>
<element pattern="close"/>
<element pattern="expand"/>
<element pattern="getAttribute"/>
<element pattern="getAttributeNo"/>
<element pattern="getAttributeNs"/>
<element pattern="getParserProperty"/>
<element pattern="isValid"/>
<element pattern="lookupNamespace"/>
<element pattern="moveToAttribute"/>
<element pattern="moveToAttributeNo"/>
<element pattern="moveToAttributeNs"/>
<element pattern="moveToElement"/>
<element pattern="moveToFirstAttribute"/>
<element pattern="moveToNextAttribute"/>
<element pattern="next" autocomplete_append="(array &amp;$array);">
<reference>next(array &amp;$array);
Advance the internal array pointer of an array
<b> array array </b>The array being affected.
<b>returns</b>  mixed the array value in the next place that's pointed to by the
internal array pointer, or false if there are no more elements.
</reference></element>
<element pattern="open"/>
<element pattern="read"/>
<element pattern="setParserProperty"/>
<element pattern="setRelaxNGSchema"/>
<element pattern="setRelaxNGSchemaSource"/>
<element pattern="open"/>
<element pattern="endAttribute"/>
<element pattern="xmlwriter_end_attribute" autocomplete_append="();">
<reference>xmlwriter_end_attribute();
End attribute
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endCData"/>
<element pattern="xmlwriter_end_cdata" autocomplete_append="();">
<reference>xmlwriter_end_cdata();
End current CDATA
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endComment"/>
<element pattern="xmlwriter_end_comment" autocomplete_append="();">
<reference>xmlwriter_end_comment();
Create end comment
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endDocument"/>
<element pattern="xmlwriter_end_document" autocomplete_append="();">
<reference>xmlwriter_end_document();
End current document
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endDTDAttlist"/>
<element pattern="xmlwriter_end_dtd_attlist" autocomplete_append="();">
<reference>xmlwriter_end_dtd_attlist();
End current DTD AttList
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endDTDElement"/>
<element pattern="xmlwriter_end_dtd_element" autocomplete_append="();">
<reference>xmlwriter_end_dtd_element();
End current DTD element
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endDTDEntity"/>
<element pattern="xmlwriter_end_dtd_entity" autocomplete_append="();">
<reference>xmlwriter_end_dtd_entity();
End current DTD Entity
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endDTD"/>
<element pattern="xmlwriter_end_dtd" autocomplete_append="();">
<reference>xmlwriter_end_dtd();
End current DTD
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endElement"/>
<element pattern="xmlwriter_end_element" autocomplete_append="();">
<reference>xmlwriter_end_element();
End current element
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="endPI"/>
<element pattern="xmlwriter_end_pi" autocomplete_append="();">
<reference>xmlwriter_end_pi();
End current PI
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="flush" autocomplete_append="();">
<reference>flush();
Flush the output buffer
<b>returns</b>  void 
</reference></element>
<element pattern="xmlwriter_flush" autocomplete_append="($empty = null);">
<reference>xmlwriter_flush($empty = null);
Flush current buffer
<b> empty bool[optional] </b>Whether to empty the buffer or no. Default is true.
<b>returns</b>  mixed If you opened the writer in memory, this function returns the generated XML buffer,
Else, if using URI, this function will write the buffer and return the number of 
written bytes.
</reference></element>
<element pattern="fullEndElement"/>
<element pattern="xmlwriter_full_end_element" autocomplete_append="();">
<reference>xmlwriter_full_end_element();
End current element
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="openMemory"/>
<element pattern="xmlwriter_open_memory" autocomplete_append="();">
<reference>xmlwriter_open_memory();
Create new xmlwriter using memory for string output
<b>returns</b>  bool Object oriented style: Returns true on success or false on failure.
Procedural style: Returns a new xmlwriter resource for later use with the
xmlwriter functions on success, false on error.
</reference></element>
<element pattern="openURI"/>
<element pattern="xmlwriter_open_uri" autocomplete_append="($uri);">
<reference>xmlwriter_open_uri($uri);
Create new xmlwriter using source uri for output
<b> uri string </b>The URI of the resource for the output.
<b>returns</b>  bool Object oriented style: Returns true on success or false on failure.
Procedural style: Returns a new xmlwriter resource for later use with the
xmlwriter functions on success, false on error.
</reference></element>
<element pattern="outputMemory"/>
<element pattern="xmlwriter_output_memory" autocomplete_append="($flush = null);">
<reference>xmlwriter_output_memory($flush = null);
Returns current buffer
<b> flush bool[optional] </b>Whether to flush the output buffer or no. Default is true.
<b>returns</b>  string the current buffer as a string.
</reference></element>
<element pattern="setIndentString"/>
<element pattern="xmlwriter_set_indent_string" autocomplete_append="($indentString);">
<reference>xmlwriter_set_indent_string($indentString);
Set string used for indenting
<b> indentString string </b>The indentation string.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="setIndent"/>
<element pattern="xmlwriter_set_indent" autocomplete_append="($indent);">
<reference>xmlwriter_set_indent($indent);
Toggle indentation on/off
<b> indent bool </b>Whether indentation is enabled. Defaults to false.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startAttributeNS"/>
<element pattern="xmlwriter_start_attribute_ns" autocomplete_append="($prefix, $name, $uri);">
<reference>xmlwriter_start_attribute_ns($prefix, $name, $uri);
Create start namespaced attribute
<b> prefix string </b>The namespace prefix.
<b> name string </b>The attribute name.
<b> uri string </b>The namespace URI.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startAttribute"/>
<element pattern="xmlwriter_start_attribute" autocomplete_append="($name);">
<reference>xmlwriter_start_attribute($name);
Create start attribute
<b> name string </b>The attribute name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startCData"/>
<element pattern="xmlwriter_start_cdata" autocomplete_append="();">
<reference>xmlwriter_start_cdata();
Create start CDATA tag
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startComment"/>
<element pattern="xmlwriter_start_comment" autocomplete_append="();">
<reference>xmlwriter_start_comment();
Create start comment
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startDocument"/>
<element pattern="xmlwriter_start_document" autocomplete_append="($version = null, $encoding = null, $standalone = null);">
<reference>xmlwriter_start_document($version = null, $encoding = null, $standalone = null);
Create document tag
<b> version string[optional] </b>The version number of the document as part of the XML declaration. 
Defaults to 1.0.
<b> encoding string[optional] </b>The encoding of the document as part of the XML declaration.
&amp;null; by default.
<b> standalone string[optional] </b>yes or no.
&amp;null; by default.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startDTDAttlist"/>
<element pattern="xmlwriter_start_dtd_attlist" autocomplete_append="($name);">
<reference>xmlwriter_start_dtd_attlist($name);
Create start DTD AttList
<b> name string </b>The attribute list name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startDTDElement"/>
<element pattern="xmlwriter_start_dtd_element" autocomplete_append="($qualifiedName);">
<reference>xmlwriter_start_dtd_element($qualifiedName);
Create start DTD element
<b> qualifiedName string </b>The qualified name of the document type to create.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startDTDEntity"/>
<element pattern="xmlwriter_start_dtd_entity" autocomplete_append="($name, $isparam);">
<reference>xmlwriter_start_dtd_entity($name, $isparam);
Create start DTD Entity
<b> name string </b>The name of the entity.
<b> isparam bool </b><b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startDTD"/>
<element pattern="xmlwriter_start_dtd" autocomplete_append="($qualifiedName, $publicId = null, $systemId = null);">
<reference>xmlwriter_start_dtd($qualifiedName, $publicId = null, $systemId = null);
Create start DTD tag
<b> qualifiedName string </b>The qualified name of the document type to create.
<b> publicId string[optional] </b>The external subset public identifier.
<b> systemId string[optional] </b>The external subset system identifier.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startElementNS"/>
<element pattern="xmlwriter_start_element_ns" autocomplete_append="($prefix, $name, $uri);">
<reference>xmlwriter_start_element_ns($prefix, $name, $uri);
Create start namespaced element tag
<b> prefix string </b>The namespace prefix.
<b> name string </b>The element name.
<b> uri string </b>The namespace URI.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startElement"/>
<element pattern="xmlwriter_start_element" autocomplete_append="($name);">
<reference>xmlwriter_start_element($name);
Create start element tag
<b> name string </b>The element name.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="startPI"/>
<element pattern="xmlwriter_start_pi" autocomplete_append="($target);">
<reference>xmlwriter_start_pi($target);
Create start PI tag
<b> target string </b>The target of the processing instruction.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="text"/>
<element pattern="xmlwriter_text" autocomplete_append="($content);">
<reference>xmlwriter_text($content);
Write text
<b> content string </b>The contents of the text.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeAttributeNS"/>
<element pattern="xmlwriter_write_attribute_ns" autocomplete_append="($prefix, $name, $uri, $content);">
<reference>xmlwriter_write_attribute_ns($prefix, $name, $uri, $content);
Write full namespaced attribute
<b> prefix string </b>The namespace prefix.
<b> name string </b>The attribute name.
<b> uri string </b>The namespace URI.
<b> content string </b>The attribute value.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeAttribute"/>
<element pattern="xmlwriter_write_attribute" autocomplete_append="($name, $value);">
<reference>xmlwriter_write_attribute($name, $value);
Write full attribute
<b> name string </b>The name of the attribute.
<b> value string </b>The value of the attribute.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeCData"/>
<element pattern="xmlwriter_write_cdata" autocomplete_append="($content);">
<reference>xmlwriter_write_cdata($content);
Write full CDATA tag
<b> content string </b>The contents of the CDATA.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeComment"/>
<element pattern="xmlwriter_write_comment" autocomplete_append="($content);">
<reference>xmlwriter_write_comment($content);
Write full comment tag
<b> content string </b>The contents of the comment.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeDTDAttlist"/>
<element pattern="xmlwriter_write_dtd_attlist" autocomplete_append="($name, $content);">
<reference>xmlwriter_write_dtd_attlist($name, $content);
Write full DTD AttList tag
<b> name string </b>The name of the DTD attribute list.
<b> content string </b>The content of the DTD attribute list.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeDTDElement"/>
<element pattern="xmlwriter_write_dtd_element" autocomplete_append="($name, $content);">
<reference>xmlwriter_write_dtd_element($name, $content);
Write full DTD element tag
<b> name string </b>The name of the DTD element.
<b> content string </b>The content of the element.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeDTDEntity"/>
<element pattern="xmlwriter_write_dtd_entity" autocomplete_append="($name, $content);">
<reference>xmlwriter_write_dtd_entity($name, $content);
Write full DTD Entity tag
<b> name string </b>The name of the entity.
<b> content string </b>The content of the entity.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeDTD"/>
<element pattern="xmlwriter_write_dtd" autocomplete_append="($name, $publicId = null, $systemId = null, $subset = null);">
<reference>xmlwriter_write_dtd($name, $publicId = null, $systemId = null, $subset = null);
Write full DTD tag
<b> name string </b>The DTD name.
<b> publicId string[optional] </b>The external subset public identifier.
<b> systemId string[optional] </b>The external subset system identifier.
<b> subset string[optional] </b>The content of the DTD.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeElementNS"/>
<element pattern="xmlwriter_write_element_ns" autocomplete_append="($prefix, $name, $uri, $content = null);">
<reference>xmlwriter_write_element_ns($prefix, $name, $uri, $content = null);
Write full namesapced element tag
<b> prefix string </b>The namespace prefix.
<b> name string </b>The element name.
<b> uri string </b>The namespace URI.
<b> content string[optional] </b>The element contents.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeElement"/>
<element pattern="xmlwriter_write_element" autocomplete_append="($name, $content = null);">
<reference>xmlwriter_write_element($name, $content = null);
Write full element tag
<b> name string </b>The element name.
<b> content string[optional] </b>The element contents.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writePI"/>
<element pattern="xmlwriter_write_pi" autocomplete_append="($target, $content);">
<reference>xmlwriter_write_pi($target, $content);
Writes a PI
<b> target string </b>The target of the processing instruction.
<b> content string </b>The content of the processing instruction.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="writeRaw"/>
<element pattern="xmlwriter_write_raw" autocomplete_append="($content);">
<reference>xmlwriter_write_raw($content);
Write a raw XML text
<b> content string </b>The text string to write.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="__construct"/>
<element pattern="getParameter"/>
<element pattern="hasExsltSupport"/>
<element pattern="importStylesheet"/>
<element pattern="registerPHPFunctions"/>
<element pattern="removeParameter"/>
<element pattern="setParameter"/>
<element pattern="setParameter"/>
<element pattern="transformToDoc"/>
<element pattern="transformToURI"/>
<element pattern="transformToXML"/>
<element pattern="xslt_backend_info"/>
<element pattern="xslt_backend_name"/>
<element pattern="xslt_backend_version"/>
<element pattern="xslt_create"/>
<element pattern="xslt_errno"/>
<element pattern="xslt_error"/>
<element pattern="xslt_free"/>
<element pattern="xslt_getopt"/>
<element pattern="xslt_process"/>
<element pattern="xslt_set_base"/>
<element pattern="xslt_set_encoding"/>
<element pattern="xslt_set_error_handler"/>
<element pattern="xslt_set_log"/>
<element pattern="xslt_set_object"/>
<element pattern="xslt_set_sax_handler"/>
<element pattern="xslt_set_sax_handlers"/>
<element pattern="xslt_set_scheme_handler"/>
<element pattern="xslt_set_scheme_handlers"/>
<element pattern="xslt_setopt"/>
<element pattern="yaz_addinfo"/>
<element pattern="yaz_ccl_conf"/>
<element pattern="yaz_ccl_parse"/>
<element pattern="yaz_close"/>
<element pattern="yaz_connect"/>
<element pattern="yaz_database"/>
<element pattern="yaz_element"/>
<element pattern="yaz_errno"/>
<element pattern="yaz_error"/>
<element pattern="yaz_es_result"/>
<element pattern="yaz_es"/>
<element pattern="yaz_get_option"/>
<element pattern="yaz_hits"/>
<element pattern="yaz_itemorder"/>
<element pattern="yaz_present"/>
<element pattern="yaz_range"/>
<element pattern="yaz_record"/>
<element pattern="yaz_scan_result"/>
<element pattern="yaz_scan"/>
<element pattern="yaz_schema"/>
<element pattern="yaz_search"/>
<element pattern="yaz_set_option"/>
<element pattern="yaz_set_option"/>
<element pattern="yaz_sort"/>
<element pattern="yaz_syntax"/>
<element pattern="yaz_wait"/>
<element pattern="yp_all"/>
<element pattern="yp_cat"/>
<element pattern="yp_err_string"/>
<element pattern="yp_errno"/>
<element pattern="yp_first"/>
<element pattern="yp_get_default_domain"/>
<element pattern="yp_master"/>
<element pattern="yp_match"/>
<element pattern="yp_next"/>
<element pattern="yp_order"/>
<element pattern="zip_close" autocomplete_append="($zip);">
<reference>zip_close($zip);
Close a ZIP file archive
<b> zip resource </b>A ZIP file previously opened with zip_open.
<b>returns</b>  void 
</reference></element>
<element pattern="zip_entry_close" autocomplete_append="($zip_entry);">
<reference>zip_entry_close($zip_entry);
Close a directory entry
<b> zip_entry resource </b>A directory entry previously opened zip_entry_open.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="zip_entry_compressedsize" autocomplete_append="($zip_entry);">
<reference>zip_entry_compressedsize($zip_entry);
Retrieve the compressed size of a directory entry
<b> zip_entry resource </b>A directory entry returned by zip_read.
<b>returns</b>  int The compressed size.
</reference></element>
<element pattern="zip_entry_compressionmethod" autocomplete_append="($zip_entry);">
<reference>zip_entry_compressionmethod($zip_entry);
Retrieve the compression method of a directory entry
<b> zip_entry resource </b>A directory entry returned by zip_read.
<b>returns</b>  string The compression method.
</reference></element>
<element pattern="zip_entry_filesize" autocomplete_append="($zip_entry);">
<reference>zip_entry_filesize($zip_entry);
Retrieve the actual file size of a directory entry
<b> zip_entry resource </b>A directory entry returned by zip_read.
<b>returns</b>  int The size of the directory entry.
</reference></element>
<element pattern="zip_entry_name" autocomplete_append="($zip_entry);">
<reference>zip_entry_name($zip_entry);
Retrieve the name of a directory entry
<b> zip_entry resource </b>A directory entry returned by zip_read.
<b>returns</b>  string The name of the directory entry.
</reference></element>
<element pattern="zip_entry_open" autocomplete_append="($zip, $zip_entry, $mode = null);">
<reference>zip_entry_open($zip, $zip_entry, $mode = null);
Open a directory entry for reading
<b> zip resource </b>A valid resource handle returned by zip_open.
<b> zip_entry resource </b>A directory entry returned by zip_read.
<b> mode string[optional] </b>Any of the modes specified in the documentation of
fopen.
Currently, mode is ignored and is always
"rb". This is due to the fact that zip support
in PHP is read only access.
<b>returns</b>  bool Returns true on success or false on failure.
Unlike fopen and other similar functions,
the return value of zip_entry_open only
indicates the result of the operation and is not needed for
reading or closing the directory entry.
</reference></element>
<element pattern="zip_entry_read" autocomplete_append="($zip_entry, $length = null);">
<reference>zip_entry_read($zip_entry, $length = null);
Read from an open directory entry
<b> zip_entry resource </b>A directory entry returned by zip_read.
<b> length int[optional] </b>The number of bytes to return. If not specified, this function will 
attempt to read 1024 bytes.
This should be the uncompressed length you wish to read.
<b>returns</b>  string the data read, or false if the end of the file is
reached.
</reference></element>
<element pattern="zip_open" autocomplete_append="($filename);">
<reference>zip_open($filename);
Open a ZIP file archive
<b> filename string </b>The file name of the ZIP archive to open.
<b>returns</b>  mixed a resource handle for later use with
zip_read and zip_close
or returns the number of error if filename does not
exist or in case of other error.
</reference></element>
<element pattern="zip_read" autocomplete_append="($zip);">
<reference>zip_read($zip);
Read next entry in a ZIP file archive
<b> zip resource </b>A ZIP file previously opened with zip_open.
<b>returns</b>  mixed a directory entry resource for later use with the
zip_entry_... functions or false if
there's no more entries to read or number of error in case of other error.
</reference></element>
<element pattern="gzclose" autocomplete_append="($zp);">
<reference>gzclose($zp);
Close an open gz-file pointer
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="gzcompress" autocomplete_append="($data, $level = null);">
<reference>gzcompress($data, $level = null);
Compress a string
<b> data string </b>The data to compress.
<b> level int[optional] </b>The level of compression. Can be given as 0 for no compression up to 9
for maximum compression.
<b>returns</b>  string The compressed string or false if an error occurred.
</reference></element>
<element pattern="gzdecode"/>
<element pattern="gzdeflate" autocomplete_append="($data, $level = null);">
<reference>gzdeflate($data, $level = null);
Deflate a string
<b> data string </b>The data to deflate.
<b> level int[optional] </b>The level of compression. Can be given as 0 for no compression up to 9
for maximum compression. If not given, the default compression level will
be the default compression level of the zlib library.
<b>returns</b>  string The deflated string or false if an error occurred.
</reference></element>
<element pattern="gzencode" autocomplete_append="($data, $level = null, $encoding_mode = null);">
<reference>gzencode($data, $level = null, $encoding_mode = null);
Create a gzip compressed string
<b> data string </b>The data to encode.
<b> level int[optional] </b>The level of compression. Can be given as 0 for no compression up to 9
for maximum compression. If not given, the default compression level will
be the default compression level of the zlib library.
<b> encoding_mode int[optional] </b>The encoding mode. Can be FORCE_GZIP (the default)
or FORCE_DEFLATE. 
If you use FORCE_DEFLATE, you get a standard zlib
deflated string (inclusive zlib headers) after the gzip file header but
without the trailing crc32 checksum.
<b>returns</b>  string The encoded string, or false if an error occurred.
</reference></element>
<element pattern="gzeof" autocomplete_append="($zp);">
<reference>gzeof($zp);
Test for end-of-file on a gz-file pointer
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b>returns</b>  int true if the gz-file pointer is at EOF or an error occurs;
otherwise returns false.
</reference></element>
<element pattern="gzfile" autocomplete_append="($filename, $use_include_path = null);">
<reference>gzfile($filename, $use_include_path = null);
Read entire gz-file into an array
<b> filename string </b>The file name.
<b> use_include_path int[optional] </b>You can set this optional parameter to 1, if you
want to search for the file in the include_path too.
<b>returns</b>  array An array containing the file, one line per cell.
</reference></element>
<element pattern="gzgetc" autocomplete_append="($zp);">
<reference>gzgetc($zp);
Get character from gz-file pointer
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b>returns</b>  string The uncompressed character or false on EOF (unlike gzeof).
</reference></element>
<element pattern="gzgets" autocomplete_append="($zp, $length);">
<reference>gzgets($zp, $length);
Get line from file pointer
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b> length int </b>The length of data to get.
<b>returns</b>  string The uncompressed string, or false on error.
</reference></element>
<element pattern="gzgetss" autocomplete_append="($zp, $length, $allowable_tags = null);">
<reference>gzgetss($zp, $length, $allowable_tags = null);
Get line from gz-file pointer and strip HTML tags
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b> length int </b>The length of data to get.
<b> allowable_tags string[optional] </b>You can use this optional parameter to specify tags which should not 
be stripped.
<b>returns</b>  string The uncompressed and striped string, or false on error.
</reference></element>
<element pattern="gzinflate" autocomplete_append="($data, $length = null);">
<reference>gzinflate($data, $length = null);
Inflate a deflated string
<b> data string </b>The data compressed by gzdeflate.
<b> length int[optional] </b>The maximum length of data to decode.
<b>returns</b>  string The original uncompressed data or false on error.
The function will return an error if the uncompressed data is more than
32768 times the length of the compressed input data 
or more than the optional parameter length.
</reference></element>
<element pattern="gzopen" autocomplete_append="($filename, $mode, $use_include_path = null);">
<reference>gzopen($filename, $mode, $use_include_path = null);
Open gz-file
<b> filename string </b>The file name.
<b> mode string </b>As in fopen (rb or 
wb) but can also include a compression level 
(wb9) or a strategy: f for
filtered data as in wb6f, h for
Huffman only compression as in wb1h.
(See the description of deflateInit2 in zlib.h for 
more information about the strategy parameter.)
<b> use_include_path int[optional] </b>You can set this optional parameter to 1, if you
want to search for the file in the include_path too.
<b>returns</b>  resource a file pointer to the file opened, after that, everything you read
from this file descriptor will be transparently decompressed and what you 
write gets compressed.
If the open fails, the function returns false.
</reference></element>
<element pattern="gzpassthru" autocomplete_append="($zp);">
<reference>gzpassthru($zp);
Output all remaining data on a gz-file pointer
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b>returns</b>  int The number of uncompressed characters read from gz
and passed through to the input, or false on error.
</reference></element>
<element pattern="gzread" autocomplete_append="($zp, $length);">
<reference>gzread($zp, $length);
Binary-safe gz-file read
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b> length int </b>The number of bytes to read.
<b>returns</b>  string The data that have been read.
</reference></element>
<element pattern="gzrewind" autocomplete_append="($zp);">
<reference>gzrewind($zp);
Rewind the position of a gz-file pointer
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b>returns</b>  bool Returns true on success or false on failure.
</reference></element>
<element pattern="gzseek" autocomplete_append="($zp, $offset);">
<reference>gzseek($zp, $offset);
Seek on a gz-file pointer
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b> offset int </b>The seeked offset.
<b>returns</b>  int Upon success, returns 0; otherwise, returns -1. Note that seeking
past EOF is not considered an error.
</reference></element>
<element pattern="gztell" autocomplete_append="($zp);">
<reference>gztell($zp);
Tell gz-file pointer read/write position
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b>returns</b>  int The position of the file pointer or false if an error occurs.
</reference></element>
<element pattern="gzuncompress" autocomplete_append="($data, $length = null);">
<reference>gzuncompress($data, $length = null);
Uncompress a compressed string
<b> data string </b>The data compressed by gzcompress.
<b> length int[optional] </b>The maximum length of data to decode.
<b>returns</b>  string The original uncompressed data or false on error.
The function will return an error if the uncompressed data is more than
32768 times the length of the compressed input data 
or more than the optional parameter length.
</reference></element>
<element pattern="gzwrite" autocomplete_append="($zp, $string, $length = null);">
<reference>gzwrite($zp, $string, $length = null);
Binary-safe gz-file write
<b> zp resource </b>The gz-file pointer. It must be valid, and must point to a file
successfully opened by gzopen.
<b> string string </b>The string to write.
<b> length int[optional] </b>The number of uncompressed bytes to write. If supplied, writing will 
stop after length (uncompressed) bytes have been
written or the end of string is reached,
whichever comes first.
Note that if the length argument is given,
then the magic_quotes_runtime
configuration option will be ignored and no slashes will be
stripped from string.
<b>returns</b>  int the number of (uncompressed) bytes written to the given gz-file 
stream.
</reference></element>
<element pattern="readgzfile" autocomplete_append="($filename, $use_include_path = null);">
<reference>readgzfile($filename, $use_include_path = null);
Output a gz-file
<b> filename string </b>The file name. This file will be opened from the filesystem and its
contents written to standard output.
<b> use_include_path int[optional] </b>You can set this optional parameter to 1, if you
want to search for the file in the include_path too.
<b>returns</b>  int the number of (uncompressed) bytes read from the file. If
an error occurs, false is returned and unless the function was
called as @readgzfile, an error message is
printed.
</reference></element>
<element pattern="zlib_get_coding_type" autocomplete_append="();">
<reference>zlib_get_coding_type();
Returns the coding type used for output compression
<b>returns</b>  string Possible return values are gzip, deflate,
or false.
</reference></element>
</group>

<group highlight="php-keyword" autocomplete="1">
<element pattern="if" autocomplete_append="() {"  autocomplete_backup_cursor="3" />
<element pattern="else" autocomplete_append=" {" />
<element pattern="elseif" autocomplete_append="() {"  autocomplete_backup_cursor="3" />
<element pattern="do" autocomplete_append=" {" />
<element pattern="while" autocomplete_append="() {"  autocomplete_backup_cursor="3" />
<element pattern="for" autocomplete_append="() {"  autocomplete_backup_cursor="3" />
<element pattern="foreach" />
<element pattern="break" autocomplete_append=";" />
<element pattern="continue" autocomplete_append=";" />
<element pattern="switch" autocomplete_append="() {"  autocomplete_backup_cursor="3" />
<element pattern="declare" />
<element pattern="return" autocomplete_append=";" />
<element pattern="require" />
<element pattern="include" />
<element pattern="require_once" />
<element pattern="include_once" />
<element pattern="function" autocomplete_append=" () {"  autocomplete_backup_cursor="4" identifier_mode="1" />
<element pattern="case" autocomplete_append=" :"  autocomplete_backup_cursor="1" />
<element pattern="default" autocomplete_append=":" />
<element pattern="echo" />
<element pattern="class" />
<element pattern="var" />
<element pattern="public" />
<element pattern="private" />
<element pattern="protected" />
<element pattern="static" />
<element pattern="final" />
<element pattern="extends" />
<element pattern="global" />
</group>
<element pattern="[0-9.]+" is_regex="1" highlight="php-value"/>
<!-- autocompletion does not recognize both TRUE and true unless they are in separate elements.
	 using case_insens="1" does not add both TRUE and true. -->
<element pattern="TRUE" autocomplete="1" highlight="php-value"/>
<element pattern="FALSE" autocomplete="1" highlight="php-value"/>
<element pattern="false" autocomplete="1" highlight="php-value"/>
<element pattern="true" autocomplete="1" highlight="php-value"/>
<element pattern="NULL" autocomplete="1" highlight="php-value"/>
<element pattern="null" autocomplete="1" highlight="php-value"/>
<element pattern="'" highlight="string">
	<context symbols="\'" highlight="string">
		<element pattern="\\." highlight="string" is_regex="1" />
		<group class="sql-in-php-string" highlight="php-string-sql-keyword" case_insens="1">
			<element pattern="SELECT" />
			<element pattern="FROM" />
			<element pattern="WHERE" />
			<element pattern="ON" />
			<element pattern="AS" />
			<element pattern="ORDER" />
			<element pattern="LEFT" />
			<element pattern="INNER" />
			<element pattern="JOIN" />
			<element pattern="UPDATE" />
			<element pattern="INSERT" />
			<element pattern="DELETE" />
		</group>
		<element pattern="'" highlight="string" ends_context="1" />
	</context>
</element>
