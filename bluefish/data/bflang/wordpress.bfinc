<?xml version="1.0" encoding="UTF-8" ?>
<!--
		Bluefish HTML Editor
		wordpress.bfinc $Revision: 1 $
 
		Copyright (C) 2010 David Binovec
		based on all-php.bfinc $Revision 4947 $ by Copyright (C) 2008-2009 Olivier Sessink

		This program is free software; you can redistribute it and/or modify
		it under the terms of the GNU General Public License as published by
		the Free Software Foundation; either version 2 of the License, or
		(at your option) any later version.

		This program is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.

		You should have received a copy of the GNU General Public License
		along with this program; if not, write to the Free Software
		Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.		
-->

<group class="load_wordpress_functions" autocomplete="1" highlight="php-function"  autocomplete_append="();" autocomplete_backup_cursor="2" >
<!-- Wordpress template tags -->
<element pattern="comments_template" autocomplete_append="($file = '/comments.php', $separate_comments = false"><reference>
 * Loads the comment template specified in $file.
 *
 * Will not display the comments template if not on single post or page, or if
 * the post does not have comments.
 *
 * Uses the WordPress database object to query for the comments. The comments
 * are passed through the 'comments_array' filter hook with the list of comments
 * and the post ID respectively.
 *
 * The $file path is passed through a filter hook called, 'comments_template'
 * which includes the TEMPLATEPATH and $file combined. Tries the $filtered path
 * first and if it fails it will require the default comment themplate from the
 * default theme. If either does not exist, then the WordPress process will be
 * halted. It is advised for that reason, that the default theme is not deleted.
 *
 * @since 1.5.0
 * @global array $comment List of comment objects for the current post
 * @uses $wpdb
 * @uses $id
 * @uses $post
 * @uses $withcomments Will not try to get the comments if the post has none.
 *
 * @param string $file Optional, default '/comments.php'. The file to load
 * @param bool $separate_comments Optional, whether to separate the comments by comment type. Default is false.
 * @return null Returns null if no comments appear
</reference></element>
<element pattern="get_footer" autocomplete_append="($name = null);"><reference>
 * Load footer template.
 *
 * Includes the footer template for a theme or if a name is specified then a
 * specialised footer will be included.
 *
 * For the parameter, if the file is called "footer-special.php" then specify
 * "special".
 *
 * @uses locate_template()
 * @since 1.5.0
 * @uses do_action() Calls 'get_footer' action.
 *
 * @param string $name The name of the specialised footer.
</reference></element>
<element pattern="get_header" autocomplete_append="($name = null);"><reference>
* Load header template.
 *
 * Includes the header template for a theme or if a name is specified then a
 * specialised header will be included.
 *
 * For the parameter, if the file is called "header-special.php" then specify
 * "special".
 *
 * @uses locate_template()
 * @since 1.5.0
 * @uses do_action() Calls 'get_header' action.
 *
 * @param string $name The name of the specialised header.
</reference></element>
<element pattern="get_search_form" autocomplete_append="($echo = true);"><reference>
 * Display search form.
 *
 * Will first attempt to locate the searchform.php file in either the child or
 * the parent, then load it. If it doesn't exist, then the default search form
 * will be displayed. The default search form is HTML, which will be displayed.
 * There is a filter applied to the search form HTML in order to edit or replace
 * it. The filter is 'get_search_form'.
 *
 * This function is primarily used by themes which want to hardcode the search
 * form into the sidebar and also by the search widget in WordPress.
 *
 * There is also an action that is called whenever the function is run called,
 * 'get_search_form'. This can be useful for outputting JavaScript that the
 * search relies on or various formatting that applies to the beginning of the
 * search. To give a few examples of what it can be used for.
 *
 * @since 2.7.0
 * @param boolean $echo Default to echo and not return the form.
</reference></element>
<element pattern="get_sidebar" autocomplete_append="($name = null);"><reference>
 * Load sidebar template.
 *
 * Includes the sidebar template for a theme or if a name is specified then a
 * specialised sidebar will be included.
 *
 * For the parameter, if the file is called "sidebar-special.php" then specify
 * "special".
 *
 * @uses locate_template()
 * @since 1.5.0
 * @uses do_action() Calls 'get_sidebar' action.
 *
 * @param string $name The name of the specialised sidebar.
</reference></element>
<element pattern="get_template_part" autocomplete_append="($slug, $name = null);"><reference>
 * Load a template part into a template
 *
 * Makes it easy for a theme to reuse sections of code in a easy to overload way
 * for child themes.
 *
 * Includes the named template part for a theme or if a name is specified then a
 * specialised part will be included. If the theme contains no {slug}.php file
 * then no template will be included.
 *
 * The template is included using require, not require_once, so you may include the
 * same template part multiple times.
 *
 * For the parameter, if the file is called "{slug}-special.php" then specify
 * "special".
 *
 * @uses locate_template()
 * @since 3.0.0
 * @uses do_action() Calls 'get_template_part{$slug}' action.
 *
 * @param string $slug The slug name for the generic template.
 * @param string $name The name of the specialised template.
</reference></element>
<element pattern="bloginfo" autocomplete_append="($show='');"><reference>
 * Display information about the blog.
 *
 * @see get_bloginfo() For possible values for the parameter.
 * @since 0.71
 *
 * @param string $show What to display.
name = Testpilot
description = Just another WordPress blog
admin_email = admin@example
url = http://example/home
wpurl = http://example/home/wp
stylesheet_directory = http://example/home/wp/wp-content/themes/child-theme
stylesheet_url = http://example/home/wp/wp-content/themes/child-theme/style.css
template_directory = http://example/home/wp/wp-content/themes/parent-theme
template_url = http://example/home/wp/wp-content/themes/parent-theme
atom_url = http://example/home/feed/atom
rss2_url = http://example/home/feed
rss_url = http://example/home/feed/rss
pingback_url = http://example/home/wp/xmlrpc.php
rdf_url = http://example/home/feed/rdf
comments_atom_url = http://example/home/comments/feed/atom
comments_rss2_url = http://example/home/comments/feed
charset = UTF-8
html_type = text/html
language = en-US
text_direction = ltr
version = 2.9.2
</reference></element>
<element pattern="wp_generator" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Display the XHTML generator that is generated on the wp_head hook.
 *
 * @since 2.5.0
</reference></element>
<element pattern="paginate_links" autocomplete_append="(array( 'base' => '%_%', 'format' => '?page=%#%', 'total' => 1, 'current' => 0, 'show_all' => false, 'prev_next' => true, 'prev_text' => __('&amp;laquo; Previous'), 'next_text' => __('Next &amp;raquo;'), 'end_size' => 1, 'mid_size' => 2, 'type' => 'plain', 'add_args' => false, 'add_fragment' => ''));"><reference>
 * Retrieve paginated link for archive post pages.
 *
 * Technically, the function can be used to create paginated link list for any
 * area. The 'base' argument is used to reference the url, which will be used to
 * create the paginated links. The 'format' argument is then used for replacing
 * the page number. It is however, most likely and by default, to be used on the
 * archive post pages.
 *
 * The 'type' argument controls format of the returned value. The default is
 * 'plain', which is just a string with the links separated by a newline
 * character. The other possible values are either 'array' or 'list'. The
 * 'array' value will return an array of the paginated link list to offer full
 * control of display. The 'list' value will place all of the paginated links in
 * an unordered HTML list.
 *
 * The 'total' argument is the total amount of pages and is an integer. The
 * 'current' argument is the current page number and is also an integer.
 *
 * An example of the 'base' argument is "http://example.com/all_posts.php%_%"
 * and the '%_%' is required. The '%_%' will be replaced by the contents of in
 * the 'format' argument. An example for the 'format' argument is "?page=%#%"
 * and the '%#%' is also required. The '%#%' will be replaced with the page
 * number.
 *
 * You can include the previous and next links in the list by setting the
 * 'prev_next' argument to true, which it is by default. You can set the
 * previous text, by using the 'prev_text' argument. You can set the next text
 * by setting the 'next_text' argument.
 *
 * If the 'show_all' argument is set to true, then it will show all of the pages
 * instead of a short list of the pages near the current page. By default, the
 * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size'
 * arguments. The 'end_size' argument is how many numbers on either the start
 * and the end list edges, by default is 1. The 'mid_size' argument is how many
 * numbers to either side of current page, but not including current page.
 *
 * It is possible to add query vars to the link by using the 'add_args' argument
 * and see {@link add_query_arg()} for more information.
 *
 * @since 2.1.0
 *
 * @param string|array $args Optional. Override defaults.
 * @return array|string String of page links or array of page links.
</reference></element>
<element pattern="get_the_generator" autocomplete_append="( $type = '');"><reference>
 * Creates the generator XML or Comment for RSS, ATOM, etc.
 *
 * Returns the correct generator type for the requested output format. Allows
 * for a plugin to filter generators on an individual basis using the
 * 'get_the_generator_{$type}' filter.
 *
 * @since 2.5.0
 * @uses apply_filters() Calls 'get_the_generator_$type' hook.
 *
 * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).
 * @return string The HTML content for the generator.
</reference></element>
<element pattern="the_generator" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Display the generator XML or Comment for RSS, ATOM, etc.
 *
 * Returns the correct generator type for the requested output format. Allows
 * for a plugin to filter generators overall the the_generator filter.
 *
 * @since 2.5.0
 * @uses apply_filters() Calls 'the_generator' hook.
 *
 * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).
</reference></element>
<element pattern="language_attributes" autocomplete_append="($doctype = 'html');"><reference>
 * Display the language attributes for the html tag.
 *
 * Builds up a set of html attributes containing the text direction and language
 * information for the page.
 *
 * @since 2.1.0
 *
 * @param string $doctype The type of html document (xhtml|html).
</reference></element>
<element pattern="bloginfo_rss" autocomplete_append="($show);"><reference>
Display RSS container for the bloginfo function.

You can retrieve anything that you can using the get_bloginfo() function. Everything will be stripped of tags and characters converted, when the values are retrieved for use in the feeds. 

$show
    (string) (optional) See get_bloginfo() for possible values.

        Default: '' 

admin_email = admin@example
atom_url = http://example/home/feed/atom
charset = UTF-8
comments_atom_url = http://example/home/comments/feed/atom
comments_rss2_url = http://example/home/comments/feed
description = Just another WordPress blog
home = http://example/home
html_type = text/html
language = en-US
name = Testpilot
pingback_url = http://example/home/wp/xmlrpc.php
rdf_url = http://example/home/feed/rdf
rss2_url = http://example/home/feed
rss_url = http://example/home/feed/rss
siteurl = http://example/home
stylesheet_directory = http://example/home/wp/wp-content/themes/largo
stylesheet_url = http://example/home/wp/wp-content/themes/largo/style.css
template_directory = http://example/home/wp/wp-content/themes/largo
template_url = http://example/home/wp/wp-content/themes/largo
text_direction = ltr
url = http://example/home
version = 2.7
wpurl = http://example/home/wp

Returns: string
</reference></element>
<element pattern="get_bloginfo" autocomplete_append="($show);"><reference>
The get_bloginfo() function returns information about your blog which can then be used elsewhere in your PHP code. This function, as well as bloginfo(), can also be used to display your blog information. 

$show
    (string) (optional) See get_bloginfo() for possible values.

        Default: '' 

admin_email = admin@example
atom_url = http://example/home/feed/atom
charset = UTF-8
comments_atom_url = http://example/home/comments/feed/atom
comments_rss2_url = http://example/home/comments/feed
description = Just another WordPress blog
home = http://example/home
html_type = text/html
language = en-US
name = Testpilot
pingback_url = http://example/home/wp/xmlrpc.php
rdf_url = http://example/home/feed/rdf
rss2_url = http://example/home/feed
rss_url = http://example/home/feed/rss
siteurl = http://example/home
stylesheet_directory = http://example/home/wp/wp-content/themes/largo
stylesheet_url = http://example/home/wp/wp-content/themes/largo/style.css
template_directory = http://example/home/wp/wp-content/themes/largo
template_url = http://example/home/wp/wp-content/themes/largo
text_direction = ltr
url = http://example/home
version = 2.7
wpurl = http://example/home/wp

Returns: string
</reference></element>
<element pattern="get_bloginfo_rss" autocomplete_append="($show);"><reference>
RSS container for the bloginfo function.

You can retrieve anything that you can using the get_bloginfo() function. Everything will be stripped of tags and characters converted, when the values are retrieved for use in the feeds. 

$show
    (string) (optional) Informational detail about your blog. Valid values:

        Default: '' 

        * 'name' - Weblog title; set in General Options. (Default)
        * 'description' - Tagline for your blog; set in General Options.
        * 'url' - URL for your blog's web site address.
        * 'rdf_url' - URL for RDF/RSS 1.0 feed.
        * 'rss_url' - URL for RSS 0.92 feed.
        * 'rss2_url' - URL for RSS 2.0 feed.
        * 'atom_url' - URL for Atom feed.
        * 'comments_rss2_url' - URL for comments RSS 2.0 feed.
        * 'pingback_url' - URL for Pingback (XML-RPC file).
        * 'admin_email' - Administrator's email address; set in General Options.
        * 'charset' - Character encoding for your blog; set in Reading Options.
        * 'version' - Version of WordPress your blog uses. 

    The following work in WordPress version 1.5 or after:

        * 'html_type' - "Content-type" for your blog.
        * 'wpurl' - URL for WordPress installation.
        * 'template_url' - URL for template in use.
        * 'template_directory' - URL for template's directory.
        * 'stylesheet_url' - URL for primary CSS file.
        * 'stylesheet_directory' - URL for stylesheet directory. 
Returns: string

</reference></element>
<element pattern="wp_dropdown_categories" autocomplete_append="($args);"><reference>
Display or retrieve the HTML dropdown list of categories.

The list of arguments is below:
    'show_option_all' (string) - Text to display for showing all categories.
    'show_option_none' (string) - Text to display for showing no categories.
    'orderby' (string) default is 'ID' - What column to use for ordering the
categories.
    'order' (string) default is 'ASC' - What direction to order categories.
    'show_last_update' (bool|int) default is 0 .
    'echo' (bool|int) default is 1 - Whether to display or retrieve content.
    'depth' (int) - The max depth.
    'tab_index' (int) - Tab index for select element.
    'name' (string) - The name attribute value for select element.
    'id' (string) - The ID attribute value for select element. Defaults to name if omitted.
    'class' (string) - The class attribute value for select element.
    'selected' (int) - Which category ID is selected.
    'taxonomy' (string) - The name of the taxonomy to retrieve. Defaults to category.

The 'hierarchical' argument, which is disabled by default, will override the
depth argument, unless it is true. When the argument is false, it will
display all of the categories. When it is enabled it will use the value in
the 'depth' argument.

@param string|array $args Optional. Override default arguments.
@return string HTML content only if 'echo' argument is 0.
</reference></element>
<element pattern="wp_dropdown_pages" autocomplete_append="($args);"><reference>
Displays a list of pages in a select (i.e dropdown) box with no submit button. 

$args = array(
    'depth'            => 0,
    'child_of'         => 0,
    'selected'         => 0,
    'echo'             => 1,
    'name'             => 'page_id');
    
By default, the usage shows:

    * Pages and sub-pages displayed in hierarchical (indented) form
    * Displays all pages (not restricted to child pages)
    * No page is be 'selected' or presented in the display box
    * The name assigned to the dropdown form is 'page_id'
    * Allows you to select NONE of the pages (show_option_none=>'' not shown in above example)
    * Exclude no pages (exclude=>'' not shown in above example)
    * Exclude no 'tree' (exclude_tree=>'' not shown in above example) 
</reference></element>
<element pattern="wp_dropdown_users" autocomplete_append="($args);"><reference>
Create dropdown HTML content of users. 

$args = array(
    'show_option_all'  => ,
    'show_option_none' => ,
    'orderby'          => 'display_name',
    'order'            => 'ASC',
    'include'          => ,
    'exclude'          => ,
    'multi'            => 0,
    'show'             => 'display_name',
    'echo'             => 1,
    'selected'         => 0,
    'name'             => 'user',
    'class'            =>  );
</reference></element>
<element pattern="get_archives_link" autocomplete_append="($url, $text, $format = 'html', $before = '', $after = '');"><reference>
 * Retrieve archive link content based on predefined or custom code.
 *
 * The format can be one of four styles. The 'link' for head element, 'option'
 * for use in the select element, 'html' for use in list (either ol or ul HTML
 * elements). Custom content is also supported using the before and after
 * parameters.
 *
 * The 'link' format uses the link HTML element with the <em>archives</em>
 * relationship. The before and after parameters are not used. The text
 * parameter is used to describe the link.
 *
 * The 'option' format uses the option HTML element for use in select element.
 * The value is the url parameter and the before and after parameters are used
 * between the text description.
 *
 * The 'html' format, which is the default, uses the li HTML element for use in
 * the list HTML elements. The before parameter is before the link and the after
 * parameter is after the closing link.
 *
 * The custom format uses the before parameter before the link ('a' HTML
 * element) and the after parameter after the closing link tag. If the above
 * three values for the format are not used, then custom format is assumed.
 *
 * @since 1.0.0
 *
 * @param string $url URL to archive.
 * @param string $text Archive text description.
 * @param string $format Optional, default is 'html'. Can be 'link', 'option', 'html', or custom.
 * @param string $before Optional.
 * @param string $after Optional.
 * @return string HTML link content for archive.
</reference></element>
<element pattern="wp_get_archives" autocomplete_append="(array( 'type'=> 'monthly', 'limit' => null, 'format'=> 'html', 'before'=> null, 'after' => null, 'show_post_count' => false, 'echo'=> 1 ));"><reference>
 * Display archive links based on type and format.
 *
 * The 'type' argument offers a few choices and by default will display monthly
 * archive links. The other options for values are 'daily', 'weekly', 'monthly',
 * 'yearly', 'postbypost' or 'alpha'. Both 'postbypost' and 'alpha' display the
 * same archive link list, the difference between the two is that 'alpha'
 * will order by post title and 'postbypost' will order by post date.
 *
 * The date archives will logically display dates with links to the archive post
 * page. The 'postbypost' and 'alpha' values for 'type' argument will display
 * the post titles.
 *
 * The 'limit' argument will only display a limited amount of links, specified
 * by the 'limit' integer value. By default, there is no limit. The
 * 'show_post_count' argument will show how many posts are within the archive.
 * By default, the 'show_post_count' argument is set to false.
 *
 * For the 'format', 'before', and 'after' arguments, see {@link
 * get_archives_link()}. The values of these arguments have to do with that
 * function.
 *
 * @since 1.2.0
 *
 * @param string|array $args Optional. Override defaults.
</reference></element>
<element pattern="wp_list_authors" autocomplete_append="( array('optioncount'=> false,'exclude_admin' => true, 'show_fullname' => false, 'hide_empty' => true, 'echo' => true, 'feed' => '', 'feed_image' => '', 'style' => list, 'html' => '' ) );"><reference>
* List all the authors of the blog, with several options available.
 *
 * &lt;ul&gt;
 * &lt;li&gt;optioncount (boolean) (false): Show the count in parenthesis next to the
 * author's name.&lt;/li&gt;
 * &lt;li&gt;exclude_admin (boolean) (true): Exclude the 'admin' user that is
 * installed bydefault.&lt;/li&gt;
 * &lt;li&gt;show_fullname (boolean) (false): Show their full names.&lt;/li&gt;
 * &lt;li&gt;hide_empty (boolean) (true): Don't show authors without any posts.&lt;/li&gt;
 * &lt;li&gt;feed (string) (''): If isn't empty, show links to author's feeds.&lt;/li&gt;
 * &lt;li&gt;feed_image (string) (''): If isn't empty, use this image to link to
 * feeds.&lt;/li&gt;
 * &lt;li&gt;echo (boolean) (true): Set to false to return the output, instead of
 * echoing.&lt;/li&gt;
 * &lt;li&gt;style (string) ('list'): Whether to display list of authors in list form
 * or as a string.&lt;/li&gt;
 * &lt;li&gt;html (bool) (true): Whether to list the items in html for or plaintext.
 * &lt;/li&gt;
 * &lt;/ul&gt;
 *
 * &lt;a href=&quot;http://codex.wordpress.org/Template_Tags/wp_list_authors&quot;&gt;Wordpress codex&lt;/a&gt;
 * @since 1.2.0
 * @param array $args The argument array.
 * @return null|string The output, if echo is set to false.
</reference></element>
<element pattern="wp_list_bookmarks" autocomplete_append="($args = '');"><reference>
 * Retrieve or echo all of the bookmarks.
 *
 * List of default arguments are as follows:
 * 'orderby' - Default is 'name' (string). How to order the links by. String is
 *		based off of the bookmark scheme.
 * 'order' - Default is 'ASC' (string). Either 'ASC' or 'DESC'. Orders in either
 *		ascending or descending order.
 * 'limit' - Default is -1 (integer) or show all. The amount of bookmarks to
 *		display.
 * 'category' - Default is empty string (string). Include the links in what
 *		category ID(s).
 * 'category_name' - Default is empty string (string). Get links by category
 *		name.
 * 'hide_invisible' - Default is 1 (integer). Whether to show (default) or hide
 *		links marked as 'invisible'.
 * 'show_updated' - Default is 0 (integer). Will show the time of when the
 *		bookmark was last updated.
 * 'echo' - Default is 1 (integer). Whether to echo (default) or return the
 *		formatted bookmarks.
 * 'categorize' - Default is 1 (integer). Whether to show links listed by
 *		category (default) or show links in one column.
 * 'show_description' - Default is 0 (integer). Whether to show the description
 *		of the bookmark.
 *
 * These options define how the Category name will appear before the category
 * links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will
 * display for only the 'title_li' string and only if 'title_li' is not empty.
 * 'title_li' - Default is 'Bookmarks' (translatable string). What to show
 *		before the links appear.
 * 'title_before' - Default is '&lt;h2&gt;' (string). The HTML or text to show before
 *		the 'title_li' string.
 * 'title_after' - Default is '&lt;/h2&gt;' (string). The HTML or text to show after
 *		the 'title_li' string.
 * 'class' - Default is 'linkcat' (string). The CSS class to use for the
 *		'title_li'.
 *
 * 'category_before' - Default is '&lt;li id="%id" class="%class"&gt;'. String must
 *		contain '%id' and '%class' to get
 * the id of the category and the 'class' argument. These are used for
 *		formatting in themes.
 * Argument will be displayed before the 'title_before' argument.
 * 'category_after' - Default is '&lt;/li&gt;' (string). The HTML or text that will
 *		appear after the list of links.
 *
 * These are only used if 'categorize' is set to 1 or true.
 * 'category_orderby' - Default is 'name'. How to order the bookmark category
 *		based on term scheme.
 * 'category_order' - Default is 'ASC'. Set the order by either ASC (ascending)
 *		or DESC (descending).
 *
 * @param string|array $args Optional. Overwrite the defaults of the function
 * @return string|null Will only return if echo option is set to not echo.
 *		Default is not return anything.
</reference></element>
<element pattern="wp_list_categories" autocomplete_append="(array('show_option_all'=>'','orderby'=>'name','order'=>'ASC','show_last_update'=>0,'style'=>'list','show_count'=>0,'hide_empty'=>1,'use_desc_for_title'=>1,'child_of'=>0,'feed'=>'','feed_type'=>'','feed_image'=>'','exclude'=>'','exclude_tree'=>'','include'=>'','hierarchical'=>true,'title_li'=>__('Categories'),'number'=>NULL,'echo'=>1,'depth'=>0,'current_category'=>0,'pad_counts'=>0,'taxonomy'=>'category','walker'=>'Walker_Category'));"><reference>
 * Display or retrieve the HTML list of categories.
 *
 * The list of arguments is below:
 *     'show_option_all' (string) - Text to display for showing all categories.
 *     'orderby' (string) default is 'ID' - What column to use for ordering the
 * categories.
 *     'order' (string) default is 'ASC' - What direction to order categories.
 *     'show_last_update' (bool|int) default is 0 
 *     'show_count' (bool|int) default is 0 - Whether to show how many posts are
 * in the category.
 *     'hide_empty' (bool|int) default is 1 - Whether to hide categories that
 * don't have any posts attached to them.
 *     'use_desc_for_title' (bool|int) default is 1 - Whether to use the
 * description instead of the category title.
 *     'feed' .
 *     'depth' (int) - The max depth.
 *
 * @since 2.1.0
 *
 * @param string|array $args Optional. Override default arguments.
 * @return string HTML content only if 'echo' argument is 0.
</reference></element>
<element pattern="wp_list_comments" autocomplete_append="( array( 'walker'=> null, 'max_depth' => null, 'style' => 'ul', 'callback'=> null, 'end-callback'=> null, 'type'=> 'all', 'page'=> null, 'per_page'=> null, 'avatar_size' => 32, 'reverse_top_level' => null, 'reverse_children'=> null) , $comments = null);"><reference>
 * List comments
 *
 * Used in the comments.php template to list comments for a particular post
 *
 * @since 2.7.0
 * @uses Walker_Comment
 *
 * @param string|array $args Formatting options
 * @param array $comments Optional array of comment objects.  Defaults to $wp_query->comments 
    
max_depth, per_page, and reverse_top_level can be more easily controlled through the Administration Panel Settings_Discussion_SubPanel but a theme can override those settings here. 
</reference></element>
<element pattern="wp_list_pages" autocomplete_append="(array('depth'=> 0, 'show_date'=> null, 'date_format'=> get_option('date_format'), 'child_of' => 0, 'exclude'=> null, 'include'=> null, 'title_li' => __('Pages'), 'echo' => 1, 'authors'=> null, 'sort_column'=> 'menu_order, post_title', 'link_before'=> null, 'link_after' => null, 'walker' => null));"><reference>
Displays a list of WordPress Pages as links. It is often used to customize the Sidebar or Header, but may be used in other Templates as well. 
    
By default, the usage shows:

    * All Pages and sub-pages are displayed (no depth restriction)
    * Date created is not displayed
    * Is not restricted to the child_of any Page
    * No pages are excluded
    * No pages are explicitly included
    * The title of the pages listed is "Pages"
    * Results are echoed (displayed)
    * Is not restricted to any specific author
    * Sorted by Page Order then Page Title.
    * Sorted in ascending order
    * Pages displayed in a hierarchical indented fashion (not shown in defaults above)
    * Includes all Pages (not shown in defaults above)
    * Not restricted to Pages with specific meta key/meta value (not shown in defaults above)
    * No Parent/Child trees excluded 
</reference></element>
<element pattern="wp_page_menu" autocomplete_append="($args);"><reference>
Displays a list of WordPress Pages as links, and affords the opportunity to have Home added automatically to the list of Pages displayed. This Tag is useful to customize the Sidebar or Header, but may be used in other Templates as well. 

$args = array(
	'sort_column' => 'menu_order, post_title',
	'menu_class'  => 'menu',
	'include'     => '',
	'exclude'     => '',
	'echo'        => true,
	'show_home'   => false,
	'link_before' => '',
	'link_after'  => '' );

By default, the usage shows:

    * Sorted by menu order and title
    * The div class is 'menu'
    * No pages are excluded
    * No pages are explicitly included
    * Results are echoed (displayed)
    * No link_before or link_after text
    * Do not add "Home" to the list of pages
    * Note: Output is encompassed by the &lt;ul&gt; and &lt;/ul&gt; tags 
</reference></element>
<element pattern="is_user_logged_in" autocomplete_append="()"><reference>
This Conditional Tag checks if the current visitor is logged in. This is a boolean function, meaning it returns either TRUE or FALSE. 

This function does not accept any parameters. 

Return Values:

(boolean) 
    True if user is logged in, false if not logged in. 
</reference></element>
<element pattern="wp_login_form" autocomplete_append="($args = array());"><reference>
 * Provides a simple login form for use anywhere within WordPress. By default, it echoes
 * the HTML immediately. Pass array('echo'=>false) to return the string instead.
 *
 * @since 3.0.0
 * @param array $args Configuration options to modify the form output
 * @return Void, or string containing the form
</reference></element>
<element pattern="wp_login_url" autocomplete_append="($redirect = '', $force_reauth = false);"><reference>
 * Returns the Log In URL.
 *
 * Returns the URL that allows the user to log in to the site
 *
 * @since 2.7
 * @uses site_url() To generate the log in URL
 * @uses apply_filters() calls 'login_url' hook on final login url
 *
 * @param string $redirect Path to redirect to on login.
 * @param bool $force_reauth Whether to force reauthorization, even if a cookie is present. Default is false.
 * @return string A log in url
</reference></element>
<element pattern="wp_loginout" autocomplete_append="($redirect = '', $echo = true);"><reference>
 * Display the Log In/Out link.
 *
 * Displays a link, which allows users to navigate to the Log In page to log in
 * or log out depending on whether they are currently logged in.
 *
 * @since 1.5.0
 * @uses apply_filters() Calls 'loginout' hook on HTML link content.
 *
 * @param string $redirect Optional path to redirect to on login/logout.
 * @param boolean $echo Default to echo and not return the link.
</reference></element>
<element pattern="wp_logout" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Log the current user out, by destroying the current user session. 

This function does not accept any parameters. 
</reference></element>
<element pattern="wp_logout_url" autocomplete_append="($redirect = '');"><reference>
 * Returns the Log Out URL.
 *
 * Returns the URL that allows the user to log out of the site
 *
 * @since 2.7
 * @uses wp_nonce_url() To protect against CSRF
 * @uses site_url() To generate the log in URL
 * @uses apply_filters() calls 'logout_url' hook on final logout url
 *
 * @param string $redirect Path to redirect to on logout.
</reference></element>
<element pattern="wp_lostpassword_url" autocomplete_append="($redirect = '');"><reference>
 * Returns the Lost Password URL.
 *
 * Returns the URL that allows the user to retrieve the lost password
 *
 * @since 2.8.0
 * @uses site_url() To generate the lost password URL
 * @uses apply_filters() calls 'lostpassword_url' hook on the lostpassword url
 *
 * @param string $redirect Path to redirect to on login.
</reference></element>
<element pattern="wp_register" autocomplete_append="($before = '&lt;li&gt;', $after = '&lt;/li&gt;', $echo = true);"><reference>
 * Display the Registration or Admin link.
 *
 * Display a link which allows the user to navigate to the registration page if
 * not logged in and registration is enabled or to the dashboard if logged in.
 *
 * @since 1.5.0
 * @uses apply_filters() Calls 'register' hook on register / admin link content.
 *
 * @param string $before Text to output before the link (defaults to <li>).
 * @param string $after Text to output after the link (defaults to </li>).
 * @param boolean $echo Default to echo and not return the link.
</reference></element>
<element pattern="wp_registration_url" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="body_class" autocomplete_append="($class);"><reference>
Themes have a template tag for the body tag which will help theme authors to style more effectively with CSS. The Template Tag is called body_class. This function gives the body element different classes and can be added, typically, in the header.php's HTML body tag.

class
    (string or array) (optional) One or more classes to add to the class attribute, separated by a single space.

        Default: null 


</reference></element>
<element pattern="next_image_link" autocomplete_append="($size, $text);"><reference>
This creates a link to the next image attached to the current post. 

$size
    (string) (optional) Size of image, either array or string. 0 or none will default to post_title or $text.

        Default: thumbnail 

$text
    (string) (optional) If included, link will reflect $text variable.

        Default: false 


</reference></element>
<element pattern="next_post_link" autocomplete_append="($format, $link, $in_same_cat, $excluded_categories);"><reference>
Used on single post permalink pages, this template tag displays a link to the next post which exists in chronological order from the current post.

This tag must be used in The Loop. 

format 
    (string) Format string for the link. This is where to control what comes before and after the link. '%link' in string will be replaced with whatever is declared as 'link' (see next parameter). 'Go to %link' will generate "Go to &lt;a href=..." Put HTML tags here to style the final results. Defaults to '%link »'. 
link 
    (string) Link text to display. Defaults to next post's title ('%title'). 
in_same_cat 
    (boolean) Indicates whether next post must be within the same category as the current post. If set to TRUE, only posts from the current category will be displayed. Options are:

        * TRUE
        * FALSE (Default) 

Note that if the post is in both the parent and subcategory, or more than one category, the next post link will lead to the next post in any of those categories.

excluded_categories 
    (string) Numeric category ID(s) from which the next post should not be listed. Separate multiple categories with and; example: '1 and 5 and 15'. There is no default. 
    In Wordpress 2.2 (only), apparently, concatenating multiple categories for exclusion is done with a comma, not and; example: '1, 5, 15'. Still no default. 

Examples:
next_post_link('&lt;strong&gt;%link&lt;/strong&gt;');
next_post_link('%link', 'Next post in category', TRUE);
next_post_link('%link', 'Next post in category', TRUE, '13');


</reference></element>
<element pattern="next_posts_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Prints a link to the next set of posts within the current query.

If you need the values for use in PHP, use get_next_posts_link($label, $max_pages).

Because post queries are usually sorted in reverse chronological order, next_posts_link() usually points to older entries (toward the end of the set) and prev_posts_link() usually points to newer entries (toward the beginning of the set). 

$label
    (string) (optional) The link text.

        Default: 'Next Page »' 

$max_pages
    (integer) (optional) Limit the number of pages on which the link is displayed

        Default: 0 

Example:
next_posts_link('Older Entries »', 0);
</reference></element>
<element pattern="post_class" autocomplete_append="($class);"><reference>
WordPress Themes have a template tag for the post HMTL tag which will help theme authors to style more effectively with CSS. The Template Tag is called post_class. This function prints out different post container classes which can be added, typically, in the index.php, single.php, and other template files featuring post content, typically in the HTML &lt;div id="post"&gt; tag. If you don't want the post classes to be echoed use get_post_class().

The post_class template tag creates CSS selectors to style content only within the post content area. For information on styling entire pages based upon a distinctive CSS selector, see Template Tags/body_class. 

class
    (string or array) (optional) One or more classes to add to the class attribute, separated by a single space.

        Default: null 


</reference></element>
<element pattern="post_password_required" autocomplete_append="($post);"><reference>
Whether post requires password and correct password has been provided.

$post
    (mixed) (Global $post variable) Either the post ID (integer) or the post object.

        Default: None 

Return Values

(boolean) 
    False if a password is not required or the correct password cookie is present, true otherwise. 
</reference></element>
<element pattern="posts_nav_link" autocomplete_append="($sep, $prelabel, $nxtlabel);"><reference>
Displays links for next and previous pages. Useful for providing "paged" navigation of index, category and archive pages.

For displaying next and previous pages of posts see next_posts_link and previous_posts_link().

For displaying next and previous post navigation on individual posts, see next_post_link() and previous_post_link(). 

sep 
    (string) Text displayed between the links.

        * Defaults to ' :: ' in 1.2.x.
        * Defaults to ' — ' in 1.5. 

prelabel 
    (string) Link text for the previous page.

        * Defaults to '&lt;&lt; Previous Page' in 1.2.x.
        * Defaults to '« Previous Page' in 1.5. 

nxtlabel 
    (string) Link text for the next page.

        * Defaults to 'Next Page &gt;&gt;' in 1.2.x.
        * Defaults to 'Next Page »' in 1.5 

</reference></element>
<element pattern="previous_post_link" autocomplete_append="($format, $link, $in_same_cat);"><reference>
Used on single post permalink pages, this template tag displays a link to the previous post which exists in chronological order from the current post.

This tag must be used in The Loop. 

format 
    (string) Format string for the link. This is where to control what comes before and after the link. '%link' in string will be replaced with whatever is declared as 'link' (see next parameter). 'Go to %link' will generate "Go to &lt;a href=..." Put HTML tags here to style the final results. Defaults to » %link'. 
link 
    (string) Link text to display. Defaults to previous post's title ('%title'). 
in_same_cat 
    (boolean) Indicates whether previous post must be within the same category as the current post. If set to TRUE, only posts from the current category will be displayed. Options are:

        * TRUE
        * FALSE (Default) 

excluded_categories 
    (string) Numeric category ID(s) from which the previous post should not be listed. Separate multiple categories with and; example: '1 and 5 and 15'. There is no default. 
</reference></element>
<element pattern="previous_posts_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Prints a link to the previous set of posts within the current query.

If you need the values for use in PHP, use get_previous_posts_link($label, $max_pages).

Because post queries are usually sorted in reverse chronological order, next_posts_link() usually points to older entries (toward the end of the set) and previous_posts_link() usually points to newer entries (toward the beginning of the set). 

$label
    (string) (optional) The link text.

        Default: '« Previous Page' 

$max_pages
    (integer) (optional) Limit the number of pages on which the link is displayed

        Default: 0 

</reference></element>
<element pattern="single_post_title" autocomplete_append="($prefix = '', $display = true);"><reference>
 * Display or retrieve page title for post.
 *
 * This is optimized for single.php template file for displaying the post title.
 * Only useful for posts, does not support pages for example.
 *
 * It does not support placing the separator after the title, but by leaving the
 * prefix parameter empty, you can set the title separator manually. The prefix
 * does not automatically place a space between the prefix, so if there should
 * be a space, the parameter value will need to have it at the end.
 *
 * @since 0.71
 * @uses $wpdb
 *
 * @param string $prefix Optional. What to display before the title.
 * @param bool $display Optional, default is true. Whether to display or retrieve title.
 * @return string|null Title when retrieving, null when displaying or failure.
</reference></element>
<element pattern="sticky_class" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Displays the sticky post class on a post if applicable. This tag must be within The Loop. 

This tag has no parameters. 
</reference></element>
<element pattern="the_category" autocomplete_append="($separator = '', $parents='', $post_id = false);"><reference>
* Display the category list for the post.
 *
 * @since 0.71
 *
 * @param string $separator Optional, default is empty string. Separator for between the categories.
 * @param string $parents Optional. How to display the parents.
 * @param int $post_id Optional. Post ID to retrieve categories.    
</reference></element>
<element pattern="previous_image_link" autocomplete_append="($size, $text);"><reference>
This creates a link to the previous image attached to the current post. 

$size
    (string) (optional) Size of image, either array or string. 0 or none will default to post_title or $text.

        Default: thumbnail 

$text
    (string) (optional) If included, link will reflect $text variable.

        Default: false 


</reference></element>
<element pattern="the_category_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Display the post categories in the feed. 

$type
    (string) (optional) default is 'rss'. Either 'rss', 'atom', or 'rdf'.

        Default: 'rss' 


</reference></element>
<element pattern="the_content" autocomplete_append="($more_link_text, $strip_teaser, $more_file);"><reference>
Displays the contents of the current post. This tag must be within The_Loop.

If the quicktag &lt;!--more--&gt; is used in a post to designate the "cut-off" point for the post to be excerpted, the_content() tag will only show the excerpt up to the <!--more--> quicktag point on non-single/non-permalink post pages. By design, the_content() tag includes a parameter for formatting the &lt;!--more--&gt; content and look, which creates a link to "continue reading" the full post.

$more_link_text
    (string) (optional) The link text to display for the "more" link.

        Default: '(more...)' 

$strip_teaser
    (boolean) (optional) Should the text before the "more" link be hidden (TRUE) or displayed (FALSE).

        Default: FALSE 

$more_file
    (string) (optional) File the "more" link points to (no longer used).

        Default: The current file 

Example:
 the_content('Read more...'); 
</reference></element>
<element pattern="the_content_rss" autocomplete_append="($more_link_text, $stripteaser, $more_file, $cut, $encode_html);"><reference>
Display the post content for the feed.

For encoding the html or the $encode_html parameter, there are three possible values. '0' will make urls footnotes and use make_url_footnote(). '1' will encode special characters and automatically display all of the content. The value of '2' will strip all HTML tags from the content.

Also note that you cannot set the amount of words and not set the html encoding. If that is the case, then the html encoding will default to 2, which will strip all HTML tags.

To restrict the amount of words of the content, you can use the cut parameter. If the content is less than the amount, then there won't be any dots added to the end. If there is content left over, then dots will be added and the rest of the content will be removed. 

$more_link_text
    (string) (optional) Text to display when more content is available but not displayed.

        Default: 'more...' 

$stripteaser
    (integer|boolean) (optional) Default is 0.

        Default: 0 

$more_file
    (string) (optional) Optional.

        Default: '' 

$cut
    (integer) (optional) Amount of words to keep for the content.

        Default: 0 
        
$encode_html
    (integer) (optional) How to encode the content.

        Default: 0 



</reference></element>
<element pattern="the_excerpt" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Displays the excerpt of the current post with [...] at the end, which is not a "read more" link. If you do not provide an explicit excerpt to a post (in the post editor's optional excerpt field), it will display an automatic excerpt which refers to the first 55 words of the post's content. Also in the latter case, HTML tags and graphics are stripped from the excerpt's content. This tag must be within The Loop.

Note: If the current post is an attachment, such as in the attachment.php and image.php template loops, then the attachment caption is displayed. Captions do not include the excerpt [...] marks. 

This tag has no parameters. 
</reference></element>
<element pattern="the_excerpt_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Display the post excerpt for the feed. 

This tag has no parameters. 
</reference></element>
<element pattern="the_ID" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Displays the numeric ID of the current post. This tag must be within The Loop.

Note: This function displays the ID of the post, to return the ID use get_the_ID(). 

This tag has no parameters. 
</reference></element>
<element pattern="the_meta" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
This is a simple built-in function for displaying custom fields for the current post, known as the "post-meta" (stored in the wp_postmeta table). It formats the data into an unordered list (see output below).

It must be used from within The Loop or in a theme file that handles data from a single post (e.g. single.php). the_meta() will ignore meta_keys (i.e. field names) that begin with an underscore.

For more information on this tag, see Custom Fields. 

This tag has no parameters. 
</reference></element>
<element pattern="the_shortlink" autocomplete_append="($text, $title, $before, $after);"><reference>
Used on single post permalink pages, this template tag displays a "URL shortening" link for the current post. By default, this will mean the URL has a format of /?p=1234, and will only appear if pretty permalinks are enabled. However, this feature is limited by design and intended to be leveraged by plugins that may offer links in a different format, a custom format, or even a format provided by a third-party URL shortening service.

This tag must be used in The Loop. 

$text
    (string) (optional) Link text to display.

        Default: 'This is the short link.' 

$title
    (string) (optional) Tool-tip text displayed with the link.

        Default: post title 

$before
    (string) (optional) Text or HTML prefix added to the link.

        Default: None 

$after
    (string) (optional) Text or HTML suffix added to the link.

        Default: None 
</reference></element>
<element pattern="the_tags" autocomplete_append="($before, $separator, $after);"><reference>
This template tag displays a link to the tag or tags a post belongs to. If no tags are associated with the current entry, the associated category is displayed instead. This tag should be used within The Loop. 

$before 
    (string) Text to display before the actual tags are displayed. Defaults to Tags: 
$separator 
    (string) Text or character to display between each tag link. The default is a comma (,) between each tag. 
$after 
    (string) Text to display after the last tag. The default is to display nothing. 
</reference></element>
<element pattern="allowed_tags()" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Display all of the allowed tags in HTML format with attributes.
 *
 * This is useful for displaying in the comment area, which elements and
 * attributes are supported. As well as any plugins which want to display it.
 *
 * @since 1.0.1
 * @uses $allowedtags
 *
 * @return string HTML allowed tags entity encoded.
 </reference></element>
<element pattern="the_title" autocomplete_append="($before, $after, $echo);"><reference>
Displays or returns the title of the current post. This tag must be within The Loop. If the post is protected or private, this will be noted by the words "Protected: " or "Private: " prepended to the title. 

$before 
    (string) Text to place before the title. Defaults to ''. 
$after 
    (string) Text to place after the title. Defaults to ''. 
$echo 
    (Boolean) Display the title (true) or return it for use in PHP (false). Defaults to true. 
</reference></element>
<element pattern="the_title_attribute" autocomplete_append="($before, $afrer, $echo);"><reference>
Displays or returns the title of the current post. It somewhat duplicates the functionality of the_title(), but provides a 'clean' version of the title by stripping HTML tags and converting certain characters (including quotes) to their character entity equivalent; it also uses query-string style parameters. This tag must be within The Loop. 

before
    (string) (optional) Text to place before the title.

        Default: None 

after
    (string) (optional) Text to place after the title.

        Default: None 

echo
    (Boolean) (optional) Echo the title or return it for use in PHP.

        * 1 - echo
        * 0 - return 

        Default: 1 
</reference></element>
<element pattern="the_title_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Display the post title in the feed. 

This tag has no parameters. 
</reference></element>
<element pattern="wp_link_pages" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
Displays page-links for paginated posts (i.e. includes the &lt;!--nextpage--&gt; Quicktag one or more times). This works in much the same way as link_pages(), the difference being that arguments are given in query string format. This tag must be within The_Loop. 

$args = array(
    'before'           => '&lt;p&gt;' . __('Pages:'),
    'after'            => '&lt;/p&gt;',
    'link_before'      => ,
    'link_after'       => ,
    'next_or_number'   => 'number',
    'nextpagelink'     => __('Next page'),
    'previouspagelink' => __('Previous page'),
    'pagelink'         => '%',
    'more_file'        => ,
    'echo'             => 1 );

before 
    (string) Text to put before all the links. Defaults to &lt;p&gt;Pages:. 

after 
    (string) Text to put after all the links. Defaults to &lt;/p&gt;. 

link_before 
    (string) Text that goes before the text of the link. Defaults to (blank). Version 2.7 or later required. 

link_after 
    (string) Text that goes after the text of the link. Defaults to (blank). Version 2.7 or later required. 

next_or_number 
    (string) Indicates whether page numbers should be used. Valid values are:

        * number (Default)
        * next (Valid in WordPress 1.5 or after) 

nextpagelink 
    (string) Text for link to next page. Defaults to Next page. (Valid in WordPress 1.5 or after) 

previouspagelink
    (string) Text for link to previous page. Defaults to Previous page. (Valid in WordPress 1.5 or after) 

pagelink 
    (string) Format string for page numbers.  % in the string will be replaced with the number, so Page % would generate "Page 1", "Page 2", etc. Defaults to %. 

more_file 
    (string) Page the links should point to. Defaults to the current page. 

echo 
    (boolean) Toggles whether to echo or return the result. The default is true. Valid values:

        * 1 (True) - Default
        * 0 (False) 

</reference></element>
<element pattern="cancel_comment_reply_link" autocomplete_append="($args = array(), $comment = null, $post = null);"><reference>
 * Displays the HTML content for reply to comment link.
 *
 * @since 2.7.0
 * @see get_comment_reply_link() Echoes result
 *
 * @param array $args Optional. Override default options.
 * @param int $comment Optional. Comment being replied to.
 * @param int $post Optional. Post that the comment is going to be displayed on.
 * @return string|bool|null Link to show comment form, if successful. False, if comments are closed.
</reference></element>
<element pattern="comment_author" autocomplete_append="($comment_ID = 0);"><reference>
 * Displays the author of the current comment.
 *
 * @since 0.71
 * @uses apply_filters() Calls 'comment_author' on comment author before displaying
 *
 * @param int $comment_ID The ID of the comment for which to print the author. Optional.
</reference></element>
<element pattern="comment_author_email" autocomplete_append="($comment_ID = 0);"><reference>
 * Display the email of the author of the current global $comment.
 *
 * Care should be taken to protect the email address and assure that email
 * harvesters do not capture your commentors' email address. Most assume that
 * their email address will not appear in raw form on the blog. Doing so will
 * enable anyone, including those that people don't want to get the email
 * address and use it for their own means good and bad.
 *
 * @since 0.71
 * @uses apply_filters() Calls 'author_email' hook on the author email
 *
 * @param int $comment_ID The ID of the comment for which to print the author's email. Optional.
</reference></element>
<element pattern="get_comment_author_email" autocomplete_append="($comment_ID = 0);"><reference>
 * Retrieve the email of the author of the current comment.
 *
 * @since 1.5.0
 * @uses apply_filters() Calls the 'get_comment_author_email' hook on the comment author email
 * @uses $comment
 *
 * @param int $comment_ID The ID of the comment for which to get the author's email.  Optional.
 * @return string The current comment author's email
</reference></element>
<element pattern="comment_author_email_link" autocomplete_append="($linktext='', $before='', $after='');"><reference>
 * Display the html email link to the author of the current comment.
 *
 * Care should be taken to protect the email address and assure that email
 * harvesters do not capture your commentors' email address. Most assume that
 * their email address will not appear in raw form on the blog. Doing so will
 * enable anyone, including those that people don't want to get the email
 * address and use it for their own means good and bad.
 *
 * @since 0.71
 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email
 * @uses get_comment_author_email_link() For generating the link
 * @global object $comment The current Comment row object
 *
 * @param string $linktext The text to display instead of the comment author's email address
 * @param string $before The text or HTML to display before the email link.
 * @param string $after The text or HTML to display after the email link.
</reference></element>
<element pattern="get_comment_author_email_link" autocomplete_append="($linktext='', $before='', $after='');"><reference>
 * Return the html email link to the author of the current comment.
 *
 * Care should be taken to protect the email address and assure that email
 * harvesters do not capture your commentors' email address. Most assume that
 * their email address will not appear in raw form on the blog. Doing so will
 * enable anyone, including those that people don't want to get the email
 * address and use it for their own means good and bad.
 *
 * @since 2.7
 * @uses apply_filters() Calls 'comment_email' hook for the display of the comment author's email
 * @global object $comment The current Comment row object
 *
 * @param string $linktext The text to display instead of the comment author's email address
 * @param string $before The text or HTML to display before the email link.
 * @param string $after The text or HTML to display after the email link.
</reference></element>
<element pattern="comment_author_IP" autocomplete_append="($comment_ID = 0);"><reference>
 * Display the IP address of the author of the current comment.
 *
 * @since 0.71
 * @see get_comment_author_IP() Echoes Result
 *
 * @param int $comment_ID The ID of the comment for which to print the author's IP address.  Optional.
</reference></element>
<element pattern="get_comment_author_link" autocomplete_append="($comment_ID = 0);"><reference>
 * Retrieve the html link to the url of the author of the current comment.
 *
 * @since 1.5.0
 * @uses apply_filters() Calls 'get_comment_author_link' hook on the complete link HTML or author
 *
 * @param int $comment_ID The ID of the comment for which to get the author's link.  Optional.
 * @return string Comment Author name or HTML link for author's URL
</reference></element>
<element pattern="comment_author_link" autocomplete_append="($comment_ID = 0);"><reference>
 * Display the html link to the url of the author of the current comment.
 *
 * @since 0.71
 * @see get_comment_author_link() Echoes result
 *
 * @param int The ID of the comment for which to print the author's link. Optional.
</reference></element>
<element pattern="comment_author_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="comment_author_url" autocomplete_append="($comment_ID = 0);"><reference>
* Display the url of the author of the current comment.
 *
 * @since 0.71
 * @uses apply_filters()
 * @uses get_comment_author_url() Retrieves the comment author's URL
 *
 * @param int $comment_ID The ID of the comment for which to print the author's URL. Optional.
</reference></element>
<element pattern="comment_author_url_link" autocomplete_append="($linktext = '', $before = '', $after = '');"><reference>
 * Displays the HTML link of the url of the author of the current comment.
 *
 * @since 0.71
 * @see get_comment_author_url_link() Echoes result
 *
 * @param string $linktext The text to display instead of the comment author's email address
 * @param string $before The text or HTML to display before the email link.
 * @param string $after The text or HTML to display after the email link.
</reference></element>
<element pattern="comment_class" autocomplete_append="($class = '', $comment_id = null, $post_id = null, $echo = true);"><reference>
 * Generates semantic classes for each comment element
 *
 * @since 2.7.0
 *
 * @param string|array $class One or more classes to add to the class list
 * @param int $comment_id An optional comment ID
 * @param int $post_id An optional post ID
 * @param bool $echo Whether comment_class should echo or return
</reference></element>
<element pattern="comment_date" autocomplete_append="($d = '', $comment_ID = 0);"><reference>
 * Display the comment date of the current comment.
 *
 * @since 0.71
 *
 * @param string $d The format of the date (defaults to user's config)
 * @param int $comment_ID The ID of the comment for which to print the date.  Optional.
</reference></element>
<element pattern="comment_excerpt" autocomplete_append="($comment_ID = 0);"><reference>
 * Display the excerpt of the current comment.
 *
 * @since 1.2.0
 * @uses apply_filters() Calls 'comment_excerpt' hook before displaying excerpt
 *
 * @param int $comment_ID The ID of the comment for which to print the excerpt. Optional.
</reference></element>
<element pattern="comment_form_title" autocomplete_append="($noreplytext = false, $replytext = false, $linktoparent = TRUE);"><reference>
 * Display text based on comment reply status. Only affects users with Javascript disabled.
 *
 * @since 2.7.0
 *
 * @param string $noreplytext Optional. Text to display when not replying to a comment.
 * @param string $replytext Optional. Text to display when replying to a comment. Accepts "%s" for the author of the comment being replied to.
 * @param string $linktoparent Optional. Boolean to control making the author's name a link to their comment.
</reference></element>
<element pattern="comment_form" autocomplete_append="($args = array(), $post_id = null);"><reference>
 * Outputs a complete commenting form for use within a template.
 * Most strings and form fields may be controlled through the $args array passed
 * into the function, while you may also choose to use the comment_form_default_fields
 * filter to modify the array of default fields if you'd just like to add a new
 * one or remove a single field. All fields are also individually passed through
 * a filter of the form comment_form_field_$name where $name is the key used
 * in the array of fields.
 *
 * @since 3.0.0
 * @param array $args Options for strings, fields etc in the form
 * @param mixed $post_id Post ID to generate the form for, uses the current post if null
 * @return void
</reference></element>
<element pattern="comment_ID" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Displays the comment id of the current comment.
 *
 * @since 0.71
 * @see get_comment_ID() Echoes Result
</reference></element>
<element pattern="post_reply_link" autocomplete_append="($args = array(), $post = null);"><reference>
* Displays the HTML content for reply to post link.
 * @since 2.7.0
 * @see get_post_reply_link()
 *
 * @param array $args Optional. Override default options.
 * @param int|object $post Optional. Post that the comment is going to be displayed on.
 * @return string|bool|null Link to show comment form, if successful. False, if comments are closed.
</reference></element>
<element pattern="comment_id_fields" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Output hidden input HTML for replying to comments.
 *
 * @since 2.7.0
 * @see get_comment_id_fields() Echoes result
</reference></element>
<element pattern="comment_reply_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="comment_text_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="comment_text" autocomplete_append="($comment_ID = 0);"><reference>
 * Displays the text of the current comment.
 *
 * @since 0.71
 * @uses apply_filters() Passes the comment content through the 'comment_text' hook before display
 * @uses get_comment_text() Gets the comment content
 *
 * @param int $comment_ID The ID of the comment for which to print the text. Optional.
</reference></element>
<element pattern="comment_time" autocomplete_append="($d = '');"><reference>
 * Display the comment time of the current comment.
 *
 * @since 0.71
 *
 * @param string $d Optional. The format of the time (defaults to user's config)
</reference></element>
<element pattern="comment_type" autocomplete_append="($commenttxt = false, $trackbacktxt = false, $pingbacktxt = false);"><reference>
 * Display the comment type of the current comment.
 *
 * @since 0.71
 *
 * @param string $commenttxt The string to display for comment type
 * @param string $trackbacktxt The string to display for trackback type
 * @param string $pingbacktxt The string to display for pingback type
</reference></element>
<element pattern="comments_link" autocomplete_append="($deprecated = '', $deprecated_2 = '');"><reference>
 * Displays the link to the current post comments.
 *
 * @since 0.71
 *
 * @param string $deprecated Not Used
 * @param bool $deprecated_2 Not Used
</reference></element>
<element pattern="comments_number" autocomplete_append="($zero = false, $one = false, $more = false, $deprecated = '');"><reference>
 * Display the language string for the number of comments the current post has.
 *
 * @since 0.71
 * @uses $id
 * @uses apply_filters() Calls the 'comments_number' hook on the output and number of comments respectively.
 *
 * @param string $zero Text for no comments
 * @param string $one Text for one comment
 * @param string $more Text for more than one comment
 * @param string $deprecated Not used.
</reference></element>
<element pattern="comments_popup_link" autocomplete_append="($zero = false, $one = false, $more = false, $css_class = '', $none = false);"><reference>
 * Displays the link to the comments popup window for the current post ID.
 *
 * Is not meant to be displayed on single posts and pages. Should be used on the
 * lists of posts
 *
 * @since 0.71
 * @uses $id
 * @uses $wpcommentspopupfile
 * @uses $wpcommentsjavascript
 * @uses $post
 *
 * @param string $zero The string to display when no comments
 * @param string $one The string to display when only one comment is available
 * @param string $more The string to display when there are more than one comment
 * @param string $css_class The CSS class to use for comments
 * @param string $none The string to display when comments have been turned off
 * @return null Returns null on single posts and pages.
</reference></element>
<element pattern="comments_popup_script" autocomplete_append="($width=400, $height=400, $file='');"><reference>
 * Displays the JS popup script to show a comment.
 *
 * If the $file parameter is empty, then the home page is assumed. The defaults
 * for the window are 400px by 400px.
 *
 * For the comment link popup to work, this function has to be called or the
 * normal comment link will be assumed.
 *
 * @since 0.71
 * @global string $wpcommentspopupfile The URL to use for the popup window
 * @global int $wpcommentsjavascript Whether to use JavaScript. Set when function is called
 *
 * @param int $width Optional. The width of the popup window
 * @param int $height Optional. The height of the popup window
 * @param string $file Optional. Sets the location of the popup window
</reference></element>
<element pattern="comments_rss_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_avatar" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="next_comments_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="paginate_comments_links" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="permalink_comments_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="previous_comments_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_post_thumbnail_id" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_the_post_thumbnail" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="has_post_thumbnail" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="the_post_thumbnail" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_attachment_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="is_attachment" autocomplete_append="()"><reference>
checks if an attachment is being displayed. An attachment is an image or other file uploaded through the post editor's upload utility. Attachments can be displayed on their own 'page' or template.
</reference></element>
<element pattern="the_attachment_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_attachment_is_image" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_get_attachment_image" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_get_attachment_image_src" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_get_attachment_metadata" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="category_description" autocomplete_append="($category = 0);"><reference>
 * Retrieve category description.
 *
 * @since 1.0.0
 *
 * @param int $category Optional. Category ID. Will use global category ID by default.
 * @return string Category description, available.
</reference></element>
<element pattern="single_cat_title" autocomplete_append="($prefix = '', $display = true);"><reference>
 * Display or retrieve page title for category archive.
 *
 * This is useful for category template file or files, because it is optimized
 * for category page title and with less overhead than {@link wp_title()}.
 *
 * It does not support placing the separator after the title, but by leaving the
 * prefix parameter empty, you can set the title separator manually. The prefix
 * does not automatically place a space between the prefix, so if there should
 * be a space, the parameter value will need to have it at the end.
 *
 * @since 0.71
 *
 * @param string $prefix Optional. What to display before the title.
 * @param bool $display Optional, default is true. Whether to display or retrieve title.
 * @return string|null Title when retrieving, null when displaying or failure.
</reference></element>
<element pattern="the_category" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="the_category_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="single_tag_title" autocomplete_append="($prefix = '', $display = true);"><reference>
 * Display or retrieve page title for tag post archive.
 *
 * Useful for tag template files for displaying the tag page title. It has less
 * overhead than {@link wp_title()}, because of its limited implementation.
 *
 * It does not support placing the separator after the title, but by leaving the
 * prefix parameter empty, you can set the title separator manually. The prefix
 * does not automatically place a space between the prefix, so if there should
 * be a space, the parameter value will need to have it at the end.
 *
 * @since 2.3.0
 *
 * @param string $prefix Optional. What to display before the title.
 * @param bool $display Optional, default is true. Whether to display or retrieve title.
 * @return string|null Title when retrieving, null when displaying or failure.
</reference></element>
<element pattern="tag_description" autocomplete_append="($tag = 0);"><reference>
 * Retrieve tag description.
 *
 * @since 2.8
 *
 * @param int $tag Optional. Tag ID. Will use global tag ID by default.
 * @return string Tag description, available.
</reference></element>
<element pattern="the_tags" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_generate_tag_cloud" autocomplete_append="($tags, $args = '');"><reference>
 * Generates a tag cloud (heatmap) from provided data.
 *
 * The text size is set by the 'smallest' and 'largest' arguments, which will
 * use the 'unit' argument value for the CSS text size unit. The 'format'
 * argument can be 'flat' (default), 'list', or 'array'. The flat value for the
 * 'format' argument will separate tags with spaces. The list value for the
 * 'format' argument will format the tags in a UL HTML list. The array value for
 * the 'format' argument will return in PHP array type format.
 *
 * The 'tag_cloud_sort' filter allows you to override the sorting.
 * Passed to the filter: $tags array and $args array, has to return the $tags array
 * after sorting it.
 *
 * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'.
 * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC' or
 * 'RAND'.
 *
 * The 'number' argument is how many tags to return. By default, the limit will
 * be to return the entire tag cloud list.
 *
 * The 'topic_count_text_callback' argument is a function, which given the count
 * of the posts  with that tag returns a text for the tooltip of the tag link.
 *
 * @todo Complete functionality.
 * @since 2.3.0
 *
 * @param array $tags List of tags.
 * @param string|array $args Optional, override default arguments.
 * @return string
</reference></element>
<element pattern="wp_tag_cloud" autocomplete_append="($args = '');"><reference>
* Display tag cloud.
 *
 * The text size is set by the 'smallest' and 'largest' arguments, which will
 * use the 'unit' argument value for the CSS text size unit. The 'format'
 * argument can be 'flat' (default), 'list', or 'array'. The flat value for the
 * 'format' argument will separate tags with spaces. The list value for the
 * 'format' argument will format the tags in a UL HTML list. The array value for
 * the 'format' argument will return in PHP array type format.
 *
 * The 'orderby' argument will accept 'name' or 'count' and defaults to 'name'.
 * The 'order' is the direction to sort, defaults to 'ASC' and can be 'DESC'.
 *
 * The 'number' argument is how many tags to return. By default, the limit will
 * be to return the top 45 tags in the tag cloud list.
 *
 * The 'topic_count_text_callback' argument is a function, which, given the count
 * of the posts  with that tag, returns a text for the tooltip of the tag link.
 *
 * The 'exclude' and 'include' arguments are used for the 
 * function. Only one should be used, because only one will be used and the
 * other ignored, if they are both set.
 *
 * @since 2.3.0
 *
 * @param array|string $args Optional. Override default arguments.
 * @return array Generated tag cloud, only if no failures and 'array' is set for the 'format' argument.
</reference></element>
<element pattern="the_author" autocomplete_append="($deprecated = '', $deprecated_echo = true);"><reference>
 * Display the name of the author of the current post.
 *
 * The behavior of this function is based off of old functionality predating
 * get_the_author(). This function is not deprecated, but is designed to echo
 * the value from get_the_author() and as an result of any old theme that might
 * still use the old behavior will also pass the value from get_the_author().
 *
 * The normal, expected behavior of this function is to echo the author and not
 * return it. However, backwards compatiability has to be maintained.
 *
 * @since 0.71
 * @see get_the_author()
 * &lt;a href=&quot;http://codex.wordpress.org/Template_Tags/the_author&quot;&gt;Wordpress codex&lt;/a&gt;
 *
 * @param string $deprecated Deprecated.
 * @param string $deprecated_echo Deprecated. Use get_the_author(). Echo the string or return it.
 * @return string The author's display name, from get_the_author().
</reference></element>
<element pattern="get_the_author" autocomplete_append="($deprecated = '');"><reference>
 * Retrieve the author of the current post.
 *
 * @since 1.5
 * @uses $authordata The current author's DB object.
 * @uses apply_filters() Calls 'the_author' hook on the author display name.
 *
 * @param string $deprecated Deprecated.
 * @return string The author's display name.
</reference></element>
<element pattern="the_author_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Display either author's link or author's name.
 *
 * If the author has a home page set, echo an HTML link, otherwise just echo the
 * author's name.
 *
 * &lt;a href=&quot;http://codex.wordpress.org/Template_Tags/the_author_link&quot;&gt;Wordpress codex&lt;/a&gt;
 * @since 2.1
 * @uses get_the_author_link()
</reference></element>
<element pattern="get_the_author_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Retrieve either author's link or author's name.
 *
 * If the author has a home page set, return an HTML link, otherwise just return the
 * author's name.
 *
 * @uses get_the_author_meta()
 * @uses get_the_author()
</reference></element>
<element pattern="get_the_author_meta" autocomplete_append="($field = '', $user_id = false);"><reference>
 * Retrieve the requested data of the author of the current post.
 * &lt;a href=&quot;http://codex.wordpress.org/Template_Tags/the_author_meta&quot;&gt;Wordpress codex&lt;/a&gt;
 * @since 2.8.0
 * @uses $authordata The current author's DB object (if $user_id not specified).
 * @param string $field selects the field of the users record.
 * @param int $user_id Optional. User ID.
 * @return string The author's field from the current author's DB object.
</reference></element>
<element pattern="the_author_meta" autocomplete_append="($field = '', $user_id = false)"><reference>
 * Retrieve the requested data of the author of the current post.
 * &lt;a href=&quot;http://codex.wordpress.org/Template_Tags/the_author_meta&quot;&gt;Wordpress codex&lt;/a&gt;
 * @since 2.8.0
 * @param string $field selects the field of the users record.
 * @param int $user_id Optional. User ID.
 * @echo string The author's field from the current author's DB object.
 </reference></element>
<element pattern="get_the_author_posts" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Retrieve the number of posts by the author of the current post.
 *
 * @since 1.5
 * @uses $post The current post in the Loop's DB object.
 * @uses count_user_posts()
 * @return int The number of posts by the author.
</reference></element>
<element pattern="the_author_posts" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Display the number of posts by the author of the current post.
 *
 * &lt;a href=&quot;http://codex.wordpress.org/Template_Tags/the_author_posts&quot;&gt;Wordpress codex&lt;/a&gt;
 * @since 0.71
 * @uses get_the_author_posts() Echoes returned value from function.
</reference></element>
<element pattern="the_author_posts_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Display an HTML link to the author page of the author of the current post.
 *
 * Does just echo get_author_posts_url() function, like the others do. The
 * reason for this, is that another function is used to help in printing the
 * link to the author's posts.
 *
 * &lt;a href=&quot;http://codex.wordpress.org/Template_Tags/the_author_posts_link&quot;&gt;Wordpress codex&lt;/a&gt;
 * @since 1.2.0
 * @uses $authordata The current author's DB object.
 * @uses get_author_posts_url()
 * @uses get_the_author()
 * @param string $deprecated Deprecated.
</reference></element>
<element pattern="get_author_posts_url" autocomplete_append="($author_id, $author_nicename = '');"><reference>
 * Retrieve the URL to the author page of the author of the current post.
 *
 * @since 2.1.0
 * @uses $wp_rewrite WP_Rewrite
 * @return string The URL to the author's page.
</reference></element>
<element pattern="wp_dropdown_users" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_calendar" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="the_date" autocomplete_append="($d = '', $before = '', $after = '', $echo = true);"><reference>
 * Display or Retrieve the date the current $post was written (once per date)
 *
 * Will only output the date if the current post's date is different from the
 * previous one output.

 * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the
 * function is called several times for each post.
 *
 * HTML output can be filtered with 'the_date'.
 * Date string output can be filtered with 'get_the_date'.
 *
 * @since 0.71
 * @uses get_the_date()
 * @param string $d Optional. PHP date format defaults to the date_format option if not specified.
 * @param string $before Optional. Output before the date.
 * @param string $after Optional. Output after the date.
 * @param bool $echo Optional, default is display. Whether to echo the date or return it.
 * @return string|null Null if displaying, string if retrieving.
</reference></element>
<element pattern="single_month_title" autocomplete_append="($prefix = '', $display = true);"><reference>
 * Display or retrieve page title for post archive based on date.
 *
 * Useful for when the template only needs to display the month and year, if
 * either are available. Optimized for just this purpose, so if it is all that
 * is needed, should be better than {@link wp_title()}.
 *
 * It does not support placing the separator after the title, but by leaving the
 * prefix parameter empty, you can set the title separator manually. The prefix
 * does not automatically place a space between the prefix, so if there should
 * be a space, the parameter value will need to have it at the end.
 *
 * @since 0.71
 *
 * @param string $prefix Optional. What to display before the title.
 * @param bool $display Optional, default is true. Whether to display or retrieve title.
 * @return string|null Title when retrieving, null when displaying or failure.
</reference></element>
<element pattern="get_the_date" autocomplete_append="($d = '');"><reference>
 * Retrieve the date the current $post was written.
 *
 * Unlike the_date() this function will always return the date.
 * Modify output with 'get_the_date' filter.
 *
 * @since 3.0.0
 *
 * @param string $d Optional. PHP date format defaults to the date_format option if not specified.
 * @return string|null Null if displaying, string if retrieving.
</reference></element>
<element pattern="the_date_xml" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Outputs the date in iso8601 format for xml files.
 *
 * @since 1.0.0
</reference></element>
<element pattern="get_the_modified_author" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
* Retrieve the author who last edited the current post.
 *
 * @since 2.8
 * @uses $post The current post's DB object.
 * @uses get_post_meta() Retrieves the ID of the author who last edited the current post.
 * @uses get_userdata() Retrieves the author's DB object.
 * @uses apply_filters() Calls 'the_modified_author' hook on the author display name.
 * @return string The author's display name.
</reference></element>
<element pattern="the_modified_author" autocomplete_append="();"><reference>
 * Display the name of the author who last edited the current post.
 *
 * @since 2.8
 * @see get_the_author()
 * @return string The author's display name, from get_the_modified_author().
</reference></element>
<element pattern="the_modified_date" autocomplete_append="($d = '', $before='', $after='', $echo = true);"><reference>
 * Display the date on which the post was last modified.
 *
 * @since 2.1.0
 *
 * @param string $d Optional. PHP date format defaults to the date_format option if not specified.
 * @param string $before Optional. Output before the date.
 * @param string $after Optional. Output after the date.
 * @param bool $echo Optional, default is display. Whether to echo the date or return it.
 * @return string|null Null if displaying, string if retrieving.
</reference></element>
<element pattern="the_weekday_date" autocomplete_append="($before='',$after='');"><reference>
* Display the weekday on which the post was written.
 *
 * Will only output the weekday if the current post's weekday is different from
 * the previous one output.
 *
 * @since 0.71
 *
 * @param string $before Optional Output before the date.
 * @param string $after Optional Output after the date.
</reference></element>
<element pattern="the_weekday" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
* Display the weekday on which the post was written.
 *
 * @since 0.71
 * @uses $wp_locale
 * @uses $post
</reference></element>
<element pattern="get_post_modified_time" autocomplete_append="($d = 'U', $gmt = false, $post = null, $translate = false);"><reference>
* Retrieve the time at which the post was last modified.
 *
 * @since 2.0.0
 *
 * @param string $d Optional, default is 'U'. Either 'G', 'U', or php date format.
 * @param bool $gmt Optional, default is false. Whether to return the gmt time.
 * @param int|object $post Optional, default is global post object. A post_id or post object
 * @param bool $translate Optional, default is false. Whether to translate the result
 * @return string Returns timestamp
</reference></element>
<element pattern="get_the_modified_time" autocomplete_append="($d = '');"><reference>
* Retrieve the time at which the post was last modified.
 *
 * @since 2.0.0
 *
 * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.
 * @return string
</reference></element>
<element pattern="the_modified_time" autocomplete_append="($d = '');"><reference>
 * Display the time at which the post was last modified.
 *
 * @since 2.0.0
 *
 * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.
</reference></element>
<element pattern="the_time" autocomplete_append="($d = '');"><reference>
 * Display the time at which the post was written.
 *
 * @since 0.71
 *
 * @param string $d Either 'G', 'U', or php date format.
</reference></element>
<element pattern="get_permalink" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_post_permalink" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="permalink_anchor" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="permalink_single_rss" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="post_permalink" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="the_permalink" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="the_shortlink" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_get_shortlink" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_shortlink_header" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_shortlink_wp_head" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_bookmark" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_bookmark_field" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_bookmarks" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="edit_bookmark_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="edit_comment_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="edit_post_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="edit_tag_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="single_cat_title" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="single_month_title" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="single_post_title" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="single_tag_title" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="the_search_query" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Display the contents of the search query variable.
 *
 * The search query string is passed through {@link esc_attr()}
 * to ensure that it is safe for placing in an html attribute.
 *
 * @uses esc_attr()
 * @since 2.1.0
</reference></element>
<element pattern="wp_title" autocomplete_append="($sep = '&amp;raquo;', $display = true, $seplocation = '');"><reference>
 * Display or retrieve page title for all areas of blog.
 *
 * By default, the page title will display the separator before the page title,
 * so that the blog title will be before the page title. This is not good for
 * title display, since the blog title shows up on most tabs and not what is
 * important, which is the page that the user is looking at.
 *
 * There are also SEO benefits to having the blog title after or to the 'right'
 * or the page title. However, it is mostly common sense to have the blog title
 * to the right with most browsers supporting tabs. You can achieve this by
 * using the seplocation parameter and setting the value to 'right'. This change
 * was introduced around 2.5.0, in case backwards compatibility of themes is
 * important.
 *
 * @since 1.0.0
 *
 * @param string $sep Optional, default is '&amp;raquo;'. How to separate the various items within the page title.
 * @param bool $display Optional, default is true. Whether to display or retrieve title.
 * @param string $seplocation Optional. Direction to display title, 'right'.
 * @return string|null String on retrieve, null when displaying.
</reference></element>
<element pattern="get_posts" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="query_posts" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
&lt;a href=&quot;http://codex.wordpress.org/Template_Tags/query_posts&quot;&gt;http://codex.wordpress.org/Template_Tags/query_posts&lt;/a&gt;
query_posts() can be used to control which posts show up in The Loop.
cat, category__and, category__in, category__not_in - must use cat ids
category_name - must use cat slugs
tag
tag_id, tag__and, tag__in, tag__not_in - must use tag ids
tag_slug__and, tag_slug__in 
author=3 , author=-3 - exclude author id 3 posts, author_name=Harriet 
'p' =&gt; 27 , 'name' =&gt; 'about-my-life' 
'page_id' =&gt; 7 , 'pagename' =&gt; 'about' 
'posts_per_page' =&gt; 1 , 'showposts' =&gt; 1 -
'post__in' =&gt; array(5,12,2,14,7) , 'post__not_in' =&gt; array(6,2,8) 
'post_type' =&gt; 'page' , 'post_status' =&gt; 'publish'
'post_parent' =&gt; 93  
array('post__in'=&gt;get_option('sticky_posts'))
ignore_sticky_posts=1 
hour= - from 0 to 23, minute= from 0 to 60
second= - second (0 to 60), day= - day of the month (from 1 to 31)
monthnum= - from 1 to 12, year= - 4 digit year
w= - week of the year (from 0 to 53) 
orderby=author (date, title, modified, parent, ID, rand)
orderby=menu_order , orderby=meta_value 
orderby=meta_value_num, orderby=none - No order, orderby=comment_count
order=ASC order=DESC - ascending from lowest to highest values or vice versa  
meta_key= , meta_value= , meta_compare=   
</reference></element>
<element pattern="rewind_posts" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_reset_query" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_get_nav_menu" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_get_nav_menu_item" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_nav_menu" autocomplete_append="(array('menu' => null, 'container' => 'div', 'container_class' => null, 'container_id'=> null, 'menu_class'=> 'menu', 'menu_id'=> null,'echo'=> true,'fallback_cb'=> 'wp_page_menu','before'=> null,'after'=> null,'link_before'=> null,'link_after'=> null,'depth'=> 0,'walker'=> null,'theme_location'=>null ));"><reference>
 * Displays a navigation menu.
 *
 * Optional $args contents:
 *
 * menu - The menu that is desired.  Accepts (matching in order) id, slug, name. Defaults to blank.
 * menu_class - CSS class to use for the ul element which forms the menu. Defaults to 'menu'.
 * menu_id - The ID that is applied to the ul element which forms the menu. Defaults to the menu slug, incremented.
 * container - Whether to wrap the ul, and what to wrap it with. Defaults to 'div'.
 * container_class - the class that is applied to the container. Defaults to 'menu-{menu slug}-container'.
 * container_id - The ID that is applied to the container. Defaults to blank.
 * fallback_cb - If the menu doesn't exists, a callback function will fire. Defaults to 'wp_page_menu'.
 * before - Text before the link text.
 * after - Text after the link text.
 * link_before - Text before the link.
 * link_after - Text after the link.
 * echo - Whether to echo the menu or return it. Defaults to echo.
 * depth - how many levels of the hierarchy are to be included.  0 means all.  Defaults to 0.
 * walker - allows a custom walker to be specified.
 * theme_location - the location in the theme to be used.  Must be registered with register_nav_menu() in order to be selectable by the user.
 *
 * @since 3.0.0
 *
 * @param array $args Arguments
</reference></element>
<element pattern="get_admin_url" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>3.0+</reference></element>
<element pattern="get_home_url" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>3.0+</reference></element>
<element pattern="get_search_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>3.0+</reference></element>
<element pattern="get_site_url" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>3.0+</reference></element>
<element pattern="home_url" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>3.0+</reference></element>
<element pattern="the_feed_link" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>3.0+</reference></element>
<element pattern="wp_ajaxurl" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>3.0+</reference></element>
<element pattern="term_description" autocomplete_append="($term = 0, $taxonomy = 'post_tag');"><reference>
 * Retrieve term description.
 *
 * @since 2.8
 *
 * @param int $term Optional. Term ID. Will use global term ID by default.
 * @return string Term description, available.
</reference></element>
<element pattern="single_term_title" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_the_term_list" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<!-- Wordpress functions -->
<element pattern="get_adjacent_post" autocomplete_append="();"><reference></reference></element>
<element pattern="get_children" autocomplete_append="();"><reference></reference></element>
<element pattern="get_extended" autocomplete_append="();"><reference></reference></element>
<element pattern="get_next_post" autocomplete_append="();"><reference></reference></element>
<element pattern="get_permalink" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_ancestors" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_mime_type" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_status" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_type" autocomplete_append="();"><reference></reference></element>
<element pattern="get_previous_post" autocomplete_append="();"><reference></reference></element>
<element pattern="get_posts" autocomplete_append="();"><reference></reference></element>
<element pattern="is_post" autocomplete_append="()"><reference><b>deprecated</b></reference></element>
<element pattern="is_sticky" autocomplete_append="()"><reference></reference></element>
<element pattern="register_post_type" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_recent_posts" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_single_post" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_delete_post" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_insert_post" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_publish_post" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_update_post" autocomplete_append="();"><reference></reference></element>
<element pattern="get_all_page_ids" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page_by_path" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page_by_title" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page_children" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page_hierarchy" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page_uri" autocomplete_append="();"><reference></reference></element>
<element pattern="get_pages" autocomplete_append="();"><reference></reference></element>
<element pattern="page_uri_index" autocomplete_append="();"><reference></reference></element>
<element pattern="add_post_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="delete_post_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_custom" autocomplete_append="();"><reference></reference></element> 
<element pattern="get_post_custom_keys" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_custom_values" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="update_post_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="get_attached_file" autocomplete_append="();"><reference></reference></element>
<element pattern="is_local_attachment" autocomplete_append="()"><reference></reference></element>
<element pattern="update_attached_file" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_insert_attachment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_delete_attachment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_attachment_metadata" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_attachment_thumb_file" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_attachment_thumb_url" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_attachment_url" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_check_for_changed_slugs" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_count_posts" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_mime_type_icon" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_update_attachment_metadata" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_list_bookmarks" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_post_categories" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_set_post_categories" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_post_tags" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_set_post_tags" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_post_terms" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_set_post_terms" autocomplete_append="();"><reference></reference></element>
<element pattern="add_meta_box" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_meta_box" autocomplete_append="();"><reference></reference></element>
<element pattern="get_the_ID" autocomplete_append="();"><reference></reference></element>
<element pattern="get_the_content" autocomplete_append="();"><reference></reference></element>
<element pattern="get_the_title" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_trim_excerpt" autocomplete_append="();"><reference></reference></element>
<element pattern="cat_is_ancestor_of" autocomplete_append="($cat1, $cat2)"><reference>
 * Check if a category is an ancestor of another category.
 *
 * You can use either an id or the category object for both parameters. If you
 * use an integer the category will be retrieved.
 *
 * @since 2.1.0
 *
 * @param int|object $cat1 ID or object to check if this is the parent category.
 * @param int|object $cat2 The child category.
 * @return bool Whether $cat2 is child of $cat1
</reference></element>
<element pattern="get_all_category_ids" autocomplete_append="();"><reference>
 * Retrieves all category IDs.
 *
 * @since 2.0.0
 * &lt;a href=&quot;http://codex.wordpress.org/Function_Reference/get_all_category_ids&quot;&gt;Wordpress codex&lt;/a&gt;
 *
 * @return object List of all of the category IDs.
</reference></element>
<element pattern="get_cat_ID" autocomplete_append="($cat_name='General')"><reference>
 * Retrieve the ID of a category from its name.
 *
 * @since 1.0.0
 *
 * @param string $cat_name Optional. Default is 'General' and can be any category name.
 * @return int 0, if failure and ID of category on success.
</reference></element>
<element pattern="get_cat_name" autocomplete_append="($cat_ID)"><reference>
 * Retrieve the name of a category from its ID.
 *
 * @since 1.0.0
 *
 * @param int $cat_id Category ID
 * @return string Category name, or an empty string if category doesn't exist.
</reference></element>
<element pattern="get_categories" autocomplete_append="($args = '')"><reference>
* Retrieve list of category objects.
 *
 * If you change the type to 'link' in the arguments, then the link categories
 * will be returned instead. Also all categories will be updated to be backwards
 * compatible with pre-2.3 plugins and themes.
 *
 * @since 2.1.0
 * @see get_terms() Type of arguments that can be changed.
 * &lt;a href=&quot;http://codex.wordpress.org/Function_Reference/get_categories&quot;&gt;Wordpress codex&lt;/a&gt;
 *
 * @param string|array $args Optional. Change the defaults retrieving categories.
 * @return array List of categories.
</reference></element>
<element pattern="get_category" autocomplete_append="($category, $output = OBJECT, $filter = 'raw');"><reference>
 * Retrieves category data given a category ID or category object.
 *
 * If you pass the $category parameter an object, which is assumed to be the
 * category row object retrieved the database. It will cache the category data.
 *
 * If you pass $category an integer of the category ID, then that category will
 * be retrieved from the database, if it isn't already cached, and pass it back.
 *
 * If you look at get_term(), then both types will be passed through several
 * filters and finally sanitized based on the $filter parameter value.
 *
 * The category will converted to maintain backwards compatibility.
 *
 * @since 1.5.1
 * @uses get_term() Used to get the category data from the taxonomy.
 *
 * @param int|object $category Category ID or Category row object
 * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N
 * @param string $filter Optional. Default is raw or no WordPress defined filter will applied.
 * @return mixed Category data in type defined by $output parameter.
</reference></element>
<element pattern="get_category_by_path" autocomplete_append="();"><reference></reference></element>
<element pattern="get_category_by_slug" autocomplete_append="($slug)"><reference>
* Retrieve category object by category slug.
 *
 * @since 2.3.0
 *
 * @param string $slug The category slug.
 * @return object Category data object
</reference></element>
<element pattern="get_category_link" autocomplete_append="($category_id)"><reference>
 Retrieve category link URL.

 @param int $category_id Category ID.
 @return string
</reference></element>
<element pattern="get_category_parents" autocomplete_append="($id, $link = false, $separator = '/', $nicename = false, $visited = array())"><reference>
 Retrieve category parents with separator.

 @param int $id Category ID.
 @param bool $link Optional, default is false. Whether to format with link.
 @param string $separator Optional, default is '/'. How to separate categories.
 @param bool $nicename Optional, default is false. Whether to use nice name for display.
 @param array $visited Optional. Already linked to categories to prevent duplicates.
 @return string
</reference></element>
<element pattern="get_the_category" autocomplete_append="($id)"><reference>
 Retrieve post categories.

@param int $id Optional, default to current post ID. The post ID.
@return array
</reference></element>
<element pattern="get_the_category_by_id" autocomplete_append="($cat_ID)"><reference>
 * Retrieve category name based on category ID.
 *
 * @since 0.71
 *
 * @param int $cat_ID Category ID.
 * @return string Category name.
</reference></element>
<element pattern="in_category" autocomplete_append="($category, $_post = null)"><reference>
 * Check if the current post in within any of the given categories.
 *
 * The given categories are checked against the post's categories' term_ids, names and slugs.
 * Categories given as integers will only be checked against the post's categories' term_ids.
 *
 * Prior to v2.5 of WordPress, category names were not supported.
 * Prior to v2.7, category slugs were not supported.
 * Prior to v2.7, only one category could be compared: in_category( $single_category ).
 * Prior to v2.7, this function could only be used in the WordPress Loop.
 * As of 2.7, the function can be used anywhere if it is provided a post ID or post object.
 *
 * @since 1.2.0
 *
 * @uses is_object_in_term()
 *
 * @param int|string|array $category. Category ID, name or slug, or array of said.
 * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0
 * @return bool True if the current post is in any of the given categories.
</reference></element>
<element pattern="is_category" autocomplete_append="($category)"><reference>
This Conditional Tag checks if a Category archive page is being displayed. This is a boolean function, meaning it returns either TRUE or FALSE. 

$category (mixed) (optional) Category ID, Category Title or Category Slug
Default: None 

is_category();
// When any Category archive page is being displayed.

is_category('9');
// When the archive page for Category 9 is being displayed.

is_category('Stinky Cheeses');
// When the archive page for the Category with Name "Stinky Cheeses" is being displayed.

</reference></element>
<element pattern="get_the_category_list" autocomplete_append="($separator = '', $parents='', $post_id = false)"><reference>
Retrieve category list in either HTML list or custom format.

@param string $separator Optional, default is empty string. Separator for between the categories.
@param string $parents Optional. How to display the parents.
@param int $post_id Optional. Post ID to retrieve categories.
@return string
</reference></element>
<element pattern="wp_create_category" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_delete_category" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="wp_insert_category" autocomplete_append="();" autocomplete_backup_cursor="2"><reference></reference></element>
<element pattern="get_tag" autocomplete_append="($tag, $output = OBJECT, $filter = 'raw');"><reference>
* Retrieve post tag by tag ID or tag object.
 *
 * If you pass the $tag parameter an object, which is assumed to be the tag row
 * object retrieved the database. It will cache the tag data.
 *
 * If you pass $tag an integer of the tag ID, then that tag will
 * be retrieved from the database, if it isn't already cached, and pass it back.
 *
 * If you look at get_term(), then both types will be passed through several
 * filters and finally sanitized based on the $filter parameter value.
 *
 * @since 2.3.0
 *
 * @param int|object $tag
 * @param string $output Optional. Constant OBJECT, ARRAY_A, or ARRAY_N
 * @param string $filter Optional. Default is raw or no WordPress defined filter will applied.
 * @return object|array Return type based on $output value.
</reference></element>
<element pattern="get_tag_link" autocomplete_append="($tag_id)"><reference>
 * Retrieve the link to the tag.
 *
 * @since 2.3.0
 * @uses apply_filters() Calls 'tag_link' with tag link and tag ID as parameters.
 *
 * @param int $tag_id Tag (term) ID.
 * @return string
</reference></element>
<element pattern="get_tags" autocomplete_append="($before = null, $sep = ', ', $after = '')"><reference>
 * Retrieve the tags for a post.
 *
 * @since 2.3.0
 *
 * @param string $before Optional. Before list.
 * @param string $sep Optional. Separate items using this.
 * @param string $after Optional. After list.
 * @return string
</reference></element>
<element pattern="get_the_tag_list" autocomplete_append="($before = '', $sep = '', $after = '')"><reference>
 * Retrieve the tags for a post formatted as a string.
 *
 * @since 2.3.0
 * @uses apply_filters() Calls 'the_tags' filter on string list of tags.
 *
 * @param string $before Optional. Before tags.
 * @param string $sep Optional. Between tags.
 * @param string $after Optional. After tags.
 * @return string
</reference></element>
<element pattern="get_the_tags" autocomplete_append="($id = 0)"><reference>
 * Retrieve the tags for a post.
 *
 * @since 2.3.0
 * @uses apply_filters() Calls 'get_the_tags' filter on the list of post tags.
 *
 * @param int $id Post ID.
 * @return array
</reference></element>
<element pattern="get_taxonomies" autocomplete_append="();"><reference></reference></element>
<element pattern="get_term" autocomplete_append="();"><reference></reference></element>
<element pattern="get_the_term_list" autocomplete_append="($id = 0, $taxonomy, $before = '', $sep = '', $after = '')"><reference>
 * Retrieve a post's terms as a list with specified format.
 *
 * @since 2.5.0
 *
 * @param int $id Post ID.
 * @param string $taxonomy Taxonomy name.
 * @param string $before Optional. Before list.
 * @param string $sep Optional. Separate items using this.
 * @param string $after Optional. After list.
 * @return string
</reference></element>
<element pattern="get_term_by" autocomplete_append="();"><reference></reference></element>
<element pattern="get_the_terms" autocomplete_append="($id = 0, $taxonomy)"><reference>
 * Retrieve the terms of the taxonomy that are attached to the post.
 *
 * This function can only be used within the loop.
 *
 * @since 2.5.0
 *
 * @param int $id Post ID. Is not optional.
 * @param string $taxonomy Taxonomy name.
 * @return array|bool False on failure. Array of term objects on success.
</reference></element>
<element pattern="get_term_children" autocomplete_append="();"><reference></reference></element>
<element pattern="get_term_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_terms" autocomplete_append="();"><reference></reference></element>
<element pattern="the_terms" autocomplete_append="($id, $taxonomy, $before = '', $sep = ', ', $after = '')"><reference>
 * Display the terms in a list.
 *
 * @since 2.5.0
 *
 * @param int $id Term ID.
 * @param string $taxonomy Taxonomy name.
 * @param string $before Optional. Before list.
 * @param string $sep Optional. Separate items using this.
 * @param string $after Optional. After list.
 * @return null|bool False on WordPress error. Returns null when displaying.
</reference>
</element>
<element pattern="is_taxonomy" autocomplete_append="()"><reference><b>deprecated</b></reference></element>
<element pattern="is_taxonomy_hierarchical" autocomplete_append="( $taxonomy )"><reference>
checks if the taxonomy object is hierarchical. This is a boolean function uses a global, meaning it returns either TRUE or FALSE (A false return value might also mean that the taxonomy does not exist).

checks to make sure that the taxonomy is an object first. Then gets the object, and finally returns the hierarchical value in the object.

$taxonomy (string) (required) Name of taxonomy object  
</reference></element> 
<element pattern="is_term" autocomplete_append="()"><reference><b>deprecated</b></reference></element>
<element pattern="taxonomy_exists" autocomplete_append="()"><reference></reference></element>
<element pattern="term_exists" autocomplete_append="()"><reference></reference></element>
<element pattern="register_taxonomy" autocomplete_append="();"><reference></reference></element>
<element pattern="register_taxonomy_for_object_type" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_object_terms" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_set_object_terms" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_insert_term" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_update_term" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_delete_term" autocomplete_append="();"><reference></reference></element>
<element pattern="add_role" autocomplete_append="();"><reference></reference></element>
<element pattern="author_can" autocomplete_append="();"><reference></reference></element>
<element pattern="current_user_can" autocomplete_append="();"><reference></reference></element>
<element pattern="current_user_can_for_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="get_role" autocomplete_append="();"><reference></reference></element>
<element pattern="get_super_admins" autocomplete_append="();"><reference></reference></element>
<element pattern="is_super_admin" autocomplete_append="()"><reference></reference></element>
<element pattern="map_meta_cap" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_role" autocomplete_append="();"><reference></reference></element>
<element pattern="auth_redirect" autocomplete_append="();"><reference></reference></element>
<element pattern="count_users" autocomplete_append="();"><reference></reference></element>
<element pattern="count_user_posts" autocomplete_append="();"><reference></reference></element>
<element pattern="count_many_users_posts" autocomplete_append="();"><reference></reference></element>
<element pattern="email_exists" autocomplete_append="()"><reference></reference></element>
<element pattern="get_currentuserinfo" autocomplete_append="();"><reference></reference></element>
<element pattern="get_profile" autocomplete_append="();"><reference></reference></element>
<element pattern="get_userdata" autocomplete_append="();"><reference></reference></element>
<element pattern="get_userdatabylogin" autocomplete_append="();"><reference></reference></element>
<element pattern="get_usernumposts" autocomplete_append="();"><reference></reference></element>
<element pattern="get_users_of_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="set_current_user" autocomplete_append="();"><reference></reference></element>
<element pattern="user_pass_ok" autocomplete_append="();"><reference></reference></element>
<element pattern="username_exists" autocomplete_append="()"><reference></reference></element>
<element pattern="validate_username" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_current_user" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_set_current_user" autocomplete_append="();"><reference></reference></element>
<element pattern="add_user_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="delete_user_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="get_user_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="update_user_meta" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_create_user" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_delete_user" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_insert_user" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_update_user" autocomplete_append="();"><reference></reference></element>
<element pattern="is_user_logged_in" autocomplete_append="()"><reference></reference></element>
<element pattern="wp_signon" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_logout" autocomplete_append="();"><reference></reference></element>
<element pattern="bloginfo_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="comment_link" autocomplete_append="();"><reference></reference></element>
<element pattern="do_feed" autocomplete_append="();"><reference></reference></element>
<element pattern="do_feed_atom" autocomplete_append="();"><reference></reference></element>
<element pattern="do_feed_rdf" autocomplete_append="();"><reference></reference></element>
<element pattern="do_feed_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="do_feed_rss2" autocomplete_append="();"><reference></reference></element>
<element pattern="fetch_feed" autocomplete_append="();"><reference></reference></element>
<element pattern="fetch_rss" autocomplete_append="();"><reference><b>deprecated</b></reference></element>
<element pattern="get_author_feed_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_bloginfo_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="get_category_feed_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_comment_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_comment_author" autocomplete_append="($comment_ID = 0);"><reference>
 * Retrieve the author of the current comment.
 *
 * If the comment has an empty comment_author field, then 'Anonymous' person is
 * assumed.
 *
 * @since 1.5.0
 * @uses apply_filters() Calls 'get_comment_author' hook on the comment author
 *
 * @param int $comment_ID The ID of the comment for which to retrieve the author. Optional.
 * @return string The comment author
</reference></element>
<element pattern="get_comment_author_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_comments_feed_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_rss" autocomplete_append="();"><reference><b>deprecated</b></reference></element>
<element pattern="get_search_comments_feed_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_search_feed_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_the_category_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="get_the_title_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="permalink_single_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="post_comments_feed_link" autocomplete_append="();"><reference></reference></element>
<element pattern="rss_enclosure" autocomplete_append="();"><reference></reference></element>
<element pattern="the_title_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="the_category_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="the_content_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="the_excerpt_rss" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_rss" autocomplete_append="();"><reference><b>deprecated</b></reference></element>
<element pattern="add_ping" autocomplete_append="();"><reference></reference></element>
<element pattern="check_comment" autocomplete_append="($author, $email, $url, $comment, $user_ip, $user_agent, $comment_type);"><reference>
 * Checks whether a comment passes internal checks to be allowed to add.
 *
 * If comment moderation is set in the administration, then all comments,
 * regardless of their type and whitelist will be set to false. If the number of
 * links exceeds the amount in the administration, then the check fails. If any
 * of the parameter contents match the blacklist of words, then the check fails.
 *
 * If the number of links exceeds the amount in the administration, then the
 * check fails. If any of the parameter contents match the blacklist of words,
 * then the check fails.
 *
 * If the comment is a trackback and part of the blogroll, then the trackback is
 * automatically whitelisted. If the comment author was approved before, then
 * the comment is automatically whitelisted.
 *
 * If none of the checks fail, then the failback is to set the check to pass
 * (return true).
 *
 * @since 1.2.0
 * @uses $wpdb
 *
 * @param string $author Comment Author's name
 * @param string $email Comment Author's email
 * @param string $url Comment Author's URL
 * @param string $comment Comment contents
 * @param string $user_ip Comment Author's IP address
 * @param string $user_agent Comment Author's User Agent
 * @param string $comment_type Comment type, either user submitted comment,
 *		trackback, or pingback
 * @return bool Whether the checks passed (true) and the comments should be
 *		displayed or set to moderated
</reference></element>
<element pattern="discover_pingback_server_uri" autocomplete_append="();"><reference></reference></element>
<element pattern="do_all_pings" autocomplete_append="();"><reference></reference></element>
<element pattern="do_enclose" autocomplete_append="();"><reference></reference></element>
<element pattern="do_trackbacks" autocomplete_append="();"><reference></reference></element>
<element pattern="generic_ping" autocomplete_append="();"><reference></reference></element>
<element pattern="add_comment_meta" autocomplete_append="($comment_id, $meta_key, $meta_value, $unique = false);"><reference>
 * Add meta data field to a comment.
 *
 * @since 2.9.0
 * @uses add_metadata
 * @link http://codex.wordpress.org/Function_Reference/add_comment_meta
 *
 * @param int $comment_id Comment ID.
 * @param string $key Metadata name.
 * @param mixed $value Metadata value.
 * @param bool $unique Optional, default is false. Whether the same key should not be added.
 * @return bool False for failure. True for success.
</reference></element>
<element pattern="delete_comment_meta" autocomplete_append="($comment_id, $meta_key, $meta_value = '');"><reference>
 * Remove metadata matching criteria from a comment.
 *
 * You can match based on the key, or key and value. Removing based on key and
 * value, will keep from removing duplicate metadata with the same key. It also
 * allows removing all metadata matching key, if needed.
 *
 * @since 2.9.0
 * @uses delete_metadata
 * @link http://codex.wordpress.org/Function_Reference/delete_comment_meta
 *
 * @param int $comment_id comment ID
 * @param string $meta_key Metadata name.
 * @param mixed $meta_value Optional. Metadata value.
 * @return bool False for failure. True for success.
</reference></element>
<element pattern="get_comment_meta" autocomplete_append="($comment_id, $key, $single = false);"><reference>
 * Retrieve comment meta field for a comment.
 *
 * @since 2.9.0
 * @uses get_metadata
 * @link http://codex.wordpress.org/Function_Reference/get_comment_meta
 *
 * @param int $comment_id Comment ID.
 * @param string $key The meta key to retrieve.
 * @param bool $single Whether to return a single value.
 * @return mixed Will be an array if $single is false. Will be value of meta data field if $single
 *  is true.
</reference></element>
<element pattern="get_approved_comments" autocomplete_append="($post_id);"><reference>
 * Retrieve the approved comments for post $post_id.
 *
 * @since 2.0.0
 * @uses $wpdb
 *
 * @param int $post_id The ID of the post
 * @return array $comments The approved comments
</reference></element>
<element pattern="get_comment" autocomplete_append="($comment, $output = OBJECT)"><reference>
 * Retrieves comment data given a comment ID or comment object.
 *
 * If an object is passed then the comment data will be cached and then returned
 * after being passed through a filter. If the comment is empty, then the global
 * comment variable will be used, if it is set.
 *
 * If the comment is empty, then the global comment variable will be used, if it
 * is set.
 *
 * @since 2.0.0
 * @uses $wpdb
 *
 * @param object|string|int $comment Comment to retrieve.
 * @param string $output Optional. OBJECT or ARRAY_A or ARRAY_N constants.
 * @return object|array|null Depends on $output value.
</reference></element>
<element pattern="get_comments" autocomplete_append="($args = '');"><reference>
 * Retrieve a list of comments.
 *
 * The comment list can be for the blog as a whole or for an individual post.
 *
 * The list of comment arguments are 'status', 'orderby', 'comment_date_gmt',
 * 'order', 'number', 'offset', and 'post_id'.
 *
 * @since 2.7.0
 * @uses $wpdb
 *
 * @param mixed $args Optional. Array or string of options to override defaults.
 * @return array List of comments.
</reference></element>
<element pattern="get_enclosed" autocomplete_append="();"><reference></reference></element>
<element pattern="get_lastcommentmodified" autocomplete_append="($timezone = 'server');"><reference>
 * The date the last comment was modified.
 *
 * @since 1.5.0
 * @uses $wpdb
 * @global array $cache_lastcommentmodified
 *
 * @param string $timezone Which timezone to use in reference to 'gmt', 'blog',
 *		or 'server' locations.
 * @return string Last comment modified date.
</reference></element>
<element pattern="get_pung" autocomplete_append="();"><reference></reference></element>
<element pattern="get_to_ping" autocomplete_append="();"><reference></reference></element>
<element pattern="next_comments_link" autocomplete_append="();"><reference></reference></element>
<element pattern="paginate_comments_links" autocomplete_append="();"><reference></reference></element>
<element pattern="pingback" autocomplete_append="();"><reference></reference></element>
<element pattern="previous_comments_link" autocomplete_append="();"><reference></reference></element>
<element pattern="privacy_ping_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="sanitize_comment_cookies" autocomplete_append="();"><reference></reference></element>
<element pattern="is_trackback" autocomplete_append="()"><reference></reference></element>
<element pattern="trackback" autocomplete_append="();"><reference></reference></element>
<element pattern="trackback_url" autocomplete_append="($deprecated_echo = true);"><reference>
 * Displays the current post's trackback URL.
 *
 * @since 0.71
 * @uses get_trackback_url() Gets the trackback url for the current post
 *
 * @param bool $deprecated_echo Remove backwards compat in 2.5
 * @return void|string Should only be used to echo the trackback URL, use get_trackback_url() for the result instead.
</reference></element>
<element pattern="trackback_url_list" autocomplete_append="();"><reference></reference></element>
<element pattern="weblog_ping" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_allow_comment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_delete_comment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_filter_comment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_comment_statuses" autocomplete_append="();" autocomplete_backup_cursor="2"><reference>
 * Retrieve all of the WordPress supported comment statuses.
 *
 * Comments have a limited set of valid status values, this provides the comment
 * status values and descriptions.
 *
 * @package WordPress
 * @subpackage Post
 * @since 2.7.0
 *
 * @return array List of comment statuses.
</reference></element>
<element pattern="get_comment_count" autocomplete_append="($post_id = 0);"><reference>
 * The amount of comments in a post or total comments.
 *
 * A lot like {@link wp_count_comments()}, in that they both return comment
 * stats (albeit with different types). The {@link wp_count_comments()} actual
 * caches, but this function does not.
 *
 * @since 2.0.0
 * @uses $wpdb
 *
 * @param int $post_id Optional. Comment amount in post if > 0, else total comments blog wide.
 * @return array The amount of spam, approved, awaiting moderation, and total comments.
</reference></element>
<element pattern="wp_get_comment_status" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_current_commenter" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_insert_comment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_new_comment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_set_comment_status" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_throttle_comment_flood" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_update_comment" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_update_comment_count" autocomplete_append="();"><reference></reference></element>
<element pattern="has_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="add_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="apply_filters" autocomplete_append="();"><reference></reference></element>
<element pattern="current_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="merge_filters" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_all_filters" autocomplete_append="();"><reference></reference></element>
<element pattern="has_action" autocomplete_append="();"><reference></reference></element>
<element pattern="add_action" autocomplete_append="();"><reference></reference></element>
<element pattern="do_action" autocomplete_append="();"><reference></reference></element>
<element pattern="do_action_ref_array" autocomplete_append="();"><reference></reference></element>
<element pattern="did_action" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_action" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_all_actions" autocomplete_append="();"><reference></reference></element>
<element pattern="plugin_basename" autocomplete_append="();"><reference></reference></element>
<element pattern="register_activation_hook" autocomplete_append="();"><reference></reference></element>
<element pattern="register_deactivation_hook" autocomplete_append="();"><reference></reference></element>
<element pattern="register_setting" autocomplete_append="();"><reference></reference></element>
<element pattern="settings_fields" autocomplete_append="();"><reference></reference></element>
<element pattern="unregister_setting" autocomplete_append="();"><reference></reference></element>
<element pattern="add_shortcode" autocomplete_append="();"><reference></reference></element>
<element pattern="do_shortcode" autocomplete_append="();"><reference></reference></element>
<element pattern="do_shortcode_tag" autocomplete_append="();"><reference></reference></element>
<element pattern="get_shortcode_regex" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_shortcode" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_all_shortcodes" autocomplete_append="();"><reference></reference></element>
<element pattern="shortcode_atts" autocomplete_append="();"><reference></reference></element>
<element pattern="shortcode_parse_atts" autocomplete_append="();"><reference></reference></element>
<element pattern="strip_shortcodes" autocomplete_append="();"><reference></reference></element>
<element pattern="add_custom_background" autocomplete_append="();"><reference></reference></element>
<element pattern="add_custom_image_header" autocomplete_append="();"><reference></reference></element>
<element pattern="add_theme_support" autocomplete_append="();"><reference></reference></element>
<element pattern="current_theme_supports" autocomplete_append="();"><reference></reference></element>
<element pattern="dynamic_sidebar" autocomplete_append="($index)"><reference>
This function calls each of the active widget callbacks in order, which prints the markup for the sidebar. If you have more than one sidebar, you should give this function the name or number of the sidebar you want to print. This function returns true on success and false on failure.

The return value should be used to determine whether to display a static sidebar. This ensures that your theme will look good even when the Widgets plug-in is not active.

If your sidebars were registered by number, they should be retrieved by number. If they had names when you registered them, use their names to retrieve them.

index
    (integer/string) (optional) Name or ID of dynamic sidebar.

        Default: 1 

Returns: (boolean) 
    True, if widget sidebar was found and called. False if not found or not called.  
</reference></element>
<element pattern="get_404_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_archive_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_attachment_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_author_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_category_template|get_category_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_comments_popup_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_current_theme" autocomplete_append="();"><reference></reference></element>
<element pattern="get_date_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_header_image" autocomplete_append="();"><reference></reference></element>
<element pattern="get_header_textcolor" autocomplete_append="();"><reference></reference></element>
<element pattern="get_home_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_locale_stylesheet_uri" autocomplete_append="();"><reference></reference></element>
<element pattern="get_page_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_paged_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_query_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_search_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_single_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_stylesheet" autocomplete_append="();"><reference></reference></element>
<element pattern="get_stylesheet_directory" autocomplete_append="();"><reference></reference></element>
<element pattern="get_stylesheet_directory_uri" autocomplete_append="();"><reference></reference></element>
<element pattern="get_stylesheet_uri" autocomplete_append="();"><reference></reference></element>
<element pattern="get_tag_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_taxonomy_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_template" autocomplete_append="();"><reference></reference></element>
<element pattern="get_template_directory" autocomplete_append="();"><reference></reference></element>
<element pattern="get_template_directory_uri" autocomplete_append="();"><reference></reference></element>
<element pattern="get_template_part" autocomplete_append="();"><reference></reference></element>
<element pattern="get_theme" autocomplete_append="();"><reference></reference></element>
<element pattern="get_theme_data" autocomplete_append="();"><reference></reference></element>
<element pattern="get_theme_mod" autocomplete_append="();"><reference></reference></element>
<element pattern="get_theme_root" autocomplete_append="();"><reference></reference></element>
<element pattern="get_theme_root_uri" autocomplete_append="();"><reference></reference></element>
<element pattern="get_themes" autocomplete_append="();"><reference></reference></element>
<element pattern="header_image" autocomplete_append="();"><reference></reference></element>
<element pattern="header_textcolor" autocomplete_append="();"><reference></reference></element>
<element pattern="load_template" autocomplete_append="();"><reference></reference></element>
<element pattern="locale_stylesheet" autocomplete_append="();"><reference></reference></element>
<element pattern="locate_template" autocomplete_append="();"><reference></reference></element>
<element pattern="preview_theme" autocomplete_append="();"><reference></reference></element>
<element pattern="preview_theme_ob_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="preview_theme_ob_filter_callback" autocomplete_append="();"><reference></reference></element>
<element pattern="register_theme_directory" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_theme_mod" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_theme_mods" autocomplete_append="();"><reference></reference></element>
<element pattern="require_if_theme_supports" autocomplete_append="();"><reference></reference></element>
<element pattern="search_theme_directories" autocomplete_append="();"><reference></reference></element>
<element pattern="set_theme_mod" autocomplete_append="();"><reference></reference></element>
<element pattern="switch_theme" autocomplete_append="();"><reference></reference></element>
<element pattern="validate_current_theme" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_page_menu" autocomplete_append="();"><reference></reference></element>
<element pattern="add_magic_quotes" autocomplete_append="();"><reference></reference></element>
<element pattern="addslashes_gpc" autocomplete_append="();"><reference></reference></element>
<element pattern="antispambot" autocomplete_append="();"><reference></reference></element>
<element pattern="attribute_escape" autocomplete_append="();"><reference></reference></element>
<element pattern="backslashit" autocomplete_append="();"><reference></reference></element>
<element pattern="balanceTags" autocomplete_append="();"><reference></reference></element>
<element pattern="clean_pre" autocomplete_append="();"><reference></reference></element> 
<element pattern="clean_url" autocomplete_append="();"><reference></reference></element>
<element pattern="convert_chars" autocomplete_append="();"><reference></reference></element>
<element pattern="convert_smilies" autocomplete_append="();"><reference></reference></element>
<element pattern="ent2ncr" autocomplete_append="();"><reference></reference></element>
<element pattern="esc_attr" autocomplete_append="();"><reference></reference></element>
<element pattern="esc_html" autocomplete_append="();"><reference></reference></element>
<element pattern="force_balance_tags" autocomplete_append="();"><reference></reference></element>
<element pattern="format_to_edit" autocomplete_append="();"><reference></reference></element>
<element pattern="format_to_post" autocomplete_append="();"><reference></reference></element>
<element pattern="funky_javascript_fix" autocomplete_append="();"><reference></reference></element>
<element pattern="htmlentities2" autocomplete_append="();"><reference></reference></element>
<element pattern="is_email" autocomplete_append="()"><reference></reference></element>
<element pattern="js_escape" autocomplete_append="();"><reference></reference></element>
<element pattern="make_clickable" autocomplete_append="();"><reference></reference></element>
<element pattern="popuplinks" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_accents" autocomplete_append="();"><reference></reference></element>
<element pattern="sanitize_email" autocomplete_append="();"><reference></reference></element>
<element pattern="sanitize_file_name" autocomplete_append="();"><reference></reference></element>
<element pattern="sanitize_user" autocomplete_append="();"><reference></reference></element>
<element pattern="sanitize_title" autocomplete_append="();"><reference></reference></element>
<element pattern="sanitize_title_with_dashes" autocomplete_append="();"><reference></reference></element>
<element pattern="seems_utf8" autocomplete_append="();"><reference></reference></element>
<element pattern="stripslashes_deep" autocomplete_append="();"><reference></reference></element>
<element pattern="trailingslashit" autocomplete_append="();"><reference></reference></element>
<element pattern="untrailingslashit" autocomplete_append="();"><reference></reference></element>
<element pattern="utf8_uri_encode" autocomplete_append="();"><reference></reference></element>
<element pattern="wpautop" autocomplete_append="();"><reference></reference></element>
<element pattern="wptexturize" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_filter_kses" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_filter_post_kses" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_filter_nohtml_kses" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_iso_descrambler" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_array_lc" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_attr" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_bad_protocol" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_bad_protocol_once" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_bad_protocol_once2" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_check_attr_val" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_decode_entities" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_hair" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_hook" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_html_error" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_js_entities" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_no_null" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_normalize_entities" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_normalize_entities2" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_split" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_split2" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_stripslashes" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_kses_version" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_make_link_relative" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_rel_nofollow" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_richedit_pre" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_specialchars" autocomplete_append="();"><reference></reference></element>
<element pattern="zeroise" autocomplete_append="();"><reference></reference></element>
<element pattern="current_time" autocomplete_append="();"><reference></reference></element>
<element pattern="date_i18n" autocomplete_append="();"><reference></reference></element>
<element pattern="get_calendar" autocomplete_append="($initial = true, $echo = true)"><reference>
 * Display calendar with days that have posts as links.
 *
 * The calendar is cached, which will be retrieved, if it exists. If there are
 * no posts for the month, then it will not be displayed.
 *
 * @since 1.0.0
 *
 * @param bool $initial Optional, default is true. Use initial calendar names.
 * @param bool $echo Optional, default is true. Set to false for return.
</reference></element>
<element pattern="get_date_from_gmt" autocomplete_append="();"><reference></reference></element>
<element pattern="get_lastpostdate" autocomplete_append="();"><reference></reference></element>
<element pattern="get_lastpostmodified" autocomplete_append="();"><reference></reference></element>
<element pattern="get_day_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_gmt_from_date" autocomplete_append="();"><reference></reference></element>
<element pattern="get_month_link" autocomplete_append="();"><reference></reference></element>
<element pattern="get_post_time" autocomplete_append="($d = 'U', $gmt = false, $post = null, $translate = false);"><reference>
 * Retrieve the time at which the post was written.
 *
 * @since 2.0.0
 *
 * @param string $d Optional Either 'G', 'U', or php date format.
 * @param bool $gmt Optional, default is false. Whether to return the gmt time.
 * @param int|object $post Optional post ID or object. Default is global $post object.
 * @param bool $translate Whether to translate the time string
 * @return string
</reference></element>
<element pattern="get_the_time" autocomplete_append="($d = '', $post = null);"><reference>
 * Retrieve the time at which the post was written.
 *
 * @since 1.5.0
 *
 * @param string $d Optional Either 'G', 'U', or php date format defaults to the value specified in the time_format option.
 * @param int|object $post Optional post ID or object. Default is global $post object.
 * @return string
</reference></element>
<element pattern="get_weekstartend" autocomplete_append="();"><reference></reference></element>
<element pattern="get_year_link" autocomplete_append="();"><reference></reference></element>
<element pattern="human_time_diff" autocomplete_append="();"><reference></reference></element>
<element pattern="is_new_day" autocomplete_append="()"><reference>
checks if today is a new day. This is a boolean function, meaning it returns TRUE when new day or FALSE if not a new day. 
</reference></element>
<element pattern="iso8601_timezone_to_offset" autocomplete_append="();"><reference></reference></element>
<element pattern="iso8601_to_datetime" autocomplete_append="();"><reference></reference></element>
<element pattern="mysql2date" autocomplete_append="();"><reference></reference></element>
<element pattern="is_serialized" autocomplete_append="()"><reference></reference></element>
<element pattern="is_serialized_string" autocomplete_append="()"><reference></reference></element>
<element pattern="maybe_serialize" autocomplete_append="();"><reference></reference></element>
<element pattern="maybe_unserialize" autocomplete_append="();"><reference></reference></element>
<element pattern="add_option" autocomplete_append="();"><reference></reference></element>
<element pattern="delete_option" autocomplete_append="();"><reference></reference></element>
<element pattern="form_option" autocomplete_append="();"><reference></reference></element>
<element pattern="get_alloptions" autocomplete_append="();"><reference></reference></element>
<element pattern="get_site_option" autocomplete_append="();"><reference></reference></element>
<element pattern="get_user_option" autocomplete_append="();"><reference></reference></element>
<element pattern="get_option" autocomplete_append="();"><reference></reference></element>
<element pattern="update_option" autocomplete_append="();"><reference></reference></element>
<element pattern="update_user_option" autocomplete_append="();"><reference></reference></element>
<element pattern="xmlrpc_getpostcategory" autocomplete_append="();"><reference></reference></element>
<element pattern="xmlrpc_getposttitle" autocomplete_append="();"><reference></reference></element>
<element pattern="xmlrpc_removepostdata" autocomplete_append="();"><reference></reference></element>
<element pattern="user_pass_ok" autocomplete_append="();"><reference></reference></element>
<element pattern="__" autocomplete_append="();"><reference></reference></element>
<element pattern="_e" autocomplete_append="();"><reference></reference></element>
<element pattern="_ngettext" autocomplete_append="();"><reference></reference></element>
<element pattern="_x" autocomplete_append="();"><reference></reference></element>
<element pattern="esc_attr__" autocomplete_append="();"><reference></reference></element>
<element pattern="esc_attr_e" autocomplete_append="();"><reference></reference></element>
<element pattern="get_locale" autocomplete_append="();"><reference></reference></element>
<element pattern="load_default_textdomain" autocomplete_append="();"><reference></reference></element>
<element pattern="load_plugin_textdomain" autocomplete_append="();"><reference></reference></element>
<element pattern="load_textdomain" autocomplete_append="();"><reference></reference></element>
<element pattern="load_theme_textdomain" autocomplete_append="();"><reference></reference></element>
<element pattern="spawn_cron" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_clear_scheduled_hook" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_cron" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_schedule" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_schedules" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_next_scheduled" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_reschedule_event" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_schedule_event" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_schedule_single_event" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_unschedule_event" autocomplete_append="();"><reference></reference></element>
<element pattern="comments_open" autocomplete_append="($post_id=NULL)"><reference>
* Whether the current post is open for comments.
 *
 * @since 1.5.0
 * @uses $post
 *
 * @param int $post_id An optional post ID to check instead of the current post.
 * @return bool True if the comments are open
</reference></element>
<element pattern="has_tag" autocomplete_append="($tag = '', $_post = null)"><reference>
 * Check if the current post has any of given tags.
 *
 * The given tags are checked against the post's tags' term_ids, names and slugs.
 * Tags given as integers will only be checked against the post's tags' term_ids.
 * If no tags are given, determines if post has any tags.
 *
 * Prior to v2.7 of WordPress, tags given as integers would also be checked against the post's tags' names and slugs (in addition to term_ids)
 * Prior to v2.7, this function could only be used in the WordPress Loop.
 * As of 2.7, the function can be used anywhere if it is provided a post ID or post object.
 *
 * @since 2.6.0
 *
 * @uses is_object_in_term()
 *
 * @param string|int|array $tag Optional. The tag name/term_id/slug or array of them to check for.
 * @param int|post object Optional.  Post to check instead of the current post. @since 2.7.0
 * @return bool True if the current post has any of the the given tags (or any tag, if no tag specified).
</reference></element>
<element pattern="is_404" autocomplete_append="()"><reference>
checks if 404 error is being displayed (after an "HTTP 404: Not Found" error occurs). This is a boolean function, meaning it returns either TRUE or FALSE. 
</reference></element>
<element pattern="is_admin" autocomplete_append="()"><reference>
checks if the Dashboard or the administration panels is being displayed. this is a boolean function, meaning it returns either TRUE or FALSE. 
</reference></element>
<element pattern="is_archive" autocomplete_append="()"><reference>
checks if any type of Archive page is being displayed. An Archive is a Category, Tag, Author or a Date based pages. This is a boolean function, meaning it returns either TRUE or FALSE.  

$post_types = array('movies','books','projects');
is_archive($post_types);  
</reference></element>
<element pattern="is_author" autocomplete_append="()"><reference>
checks if an Author archive page is being displayed. This is a boolean function, meaning it returns either TRUE or FALSE.

$author (string) (optional) Author ID or Author Nickname  

is_author();
// When any Author page is being displayed.

is_author('4');
// When the archive page for Author number (ID) 4 is being displayed.

is_author('Vivian');
// When the archive page for the Author with Nickname "Vivian" is being displayed.

</reference></element>
<element pattern="is_comments_popup" autocomplete_append="()"><reference>
This Conditional Tag checks when in Comments Popup window. This is a boolean function, meaning it returns either TRUE or FALSE. 
</reference></element>
<element pattern="is_date" autocomplete_append="()"><reference>
Test to see if the page is a date based archive page.
</reference></element>
<element pattern="is_day" autocomplete_append="()"><reference>
Test to see if the page is a day based archive page.
</reference></element>
<element pattern="is_feed" autocomplete_append="()"><reference></reference></element>
<element pattern="is_front_page" autocomplete_append="()"><reference>
This Conditional Tag checks if the main page is a posts or a Page. This is a boolean function, meaning it returns either TRUE or FALSE. It returns TRUE when the main blog page is being displayed and the Settings->Reading->Front page displays is set to "Your latest posts", or when is set to "A static page" and the "Front Page" value is the current Page being displayed. 
</reference></element>
<element pattern="is_home" autocomplete_append="()"><reference>
This Conditional Tag checks if the main page is being displayed. This is a boolean function, meaning it returns either TRUE or FALSE.

Note: WordPress 2.1 handles this function differently than prior versions - See static Front Page. If you select a static Page as your frontpage (see is_front_page()), this tag will be applied to your "posts page". 
</reference></element>
<element pattern="is_month" autocomplete_append="()"><reference>
Test to see if the page is a month based archive page.
</reference></element>
<element pattern="is_page" autocomplete_append="()"><reference>
checks if a Pages are being displayed. This is a boolean function, meaning it returns either TRUE or FALSE. 

Parameter
$page (mixed) (optional) Page ID, Page Title or Page Slug 
Default: None 

is_page(42);
// When Page 42 (ID) is being displayed.

is_page('Contact');
// When the Page with a post_title of "Contact" is being displayed.

is_page('about-me');
// When the Page with a post_name (slug) of "about-me" is being displayed.
</reference></element>
<element pattern="is_page_template" autocomplete_append="()"><reference>
checks if a specific Page Template is being used in a Page. This is a boolean function, meaning it returns either TRUE or FALSE.

Is Page Template 'about' being used? Note that unlike with other conditionals, if you want to specify a particular Page Template, you need to use the filename, such as about.php or my_page_template.php.
&lt;?php 
if ( is_page_template('about.php') ) {
    // Returns true when 'about.php' is being used.
} else {
    // Returns false when 'about.php' is not being used.
}
?&gt;
</reference></element>
<element pattern="is_paged" autocomplete_append="()"><reference>
This Conditional Tag checks if page being displayed is "paged". This is a boolean function, meaning it returns either TRUE or FALSE.

Note: This refers to an archive or the main page being split up over several pages, this does not refer to a Post or Page whose content has been divided into pages using the <!--nextpage--> QuickTag. 
</reference></element>
<element pattern="is_preview" autocomplete_append="()"><reference></reference></element>
<element pattern="is_plugin_page" autocomplete_append="()"><reference>
Returns true when the current request is for a plugin page in the administration panel. For example, if the request is for "http://www.example.com/wp-admin/edit.php?page=some_plugin.php", this will return true.

As of version 2.6, this appears to key off of the "page" URL parameter and is based on the variable $plugin_page, set in wp-admin/admin.php. 
</reference></element>
<element pattern="is_search" autocomplete_append="()"><reference>
checks if search result page archive is being displayed. This is a boolean function, meaning it returns either TRUE or FALSE. 
</reference></element>
<element pattern="is_single" autocomplete_append="()"><reference>
checks if any single post is being displayed. This is a boolean function, meaning it returns either TRUE or FALSE.

$page (string) (optional) Post ID, Post Title or Post Slug

is_single();
// When any single Post page is being displayed.

is_single('17');
// When Post 17 (ID) is being displayed.

is_single('Irish Stew');
// When the Post with post_title of "Irish Stew" is being displayed.

is_single('beef-stew');
// When the Post with post_name (slug) of "beef-stew" is being displayed.
  
</reference></element>
<element pattern="is_singular" autocomplete_append="()"><reference>
checks if a singular page is being displayed. singular page is when any of the following return true: is_single(), is_page() or is_attachment(). This is a boolean function, meaning it returns either TRUE or FALSE.

$post_type (string/array) (optional) Post type or types to check in current query. 

is_singular('book'); //True when viewing a post of the Custom Post Types book. 
is_singular(array( 'newspaper', 'book' )); //True when viewing a post of the Custom Post Types newspaper or book.  
</reference></element>
<element pattern="is_sticky" autocomplete_append="()"><reference>
checks if "Stick this post to the front page" check box has been checked for the current post. This is a boolean function, meaning it returns either TRUE or FALSE. 

$post_ID (string) (optional) The post ID 

is_sticky();
// When any Sticky Post page is being displayed.

is_sticky('17');
// When Sticky Post 17 (ID) is being displayed.

</reference></element>
<element pattern="is_tag" autocomplete_append="()"><reference>
checks if a Tag archive page is being displayed. This is a boolean function, meaning it returns either TRUE or FALSE. 

Parameter
$slug (string) (optional) The Tag slug
Default: None 

is_tag('mild');
// When the archive page for tag with the slug of 'mild' is being displayed.
</reference></element>
<element pattern="is_tax" autocomplete_append="()"><reference>
checks if a Taxonomy archive page is being displayed. This is a boolean function, meaning it returns either TRUE or FALSE.

$taxonomy (string, array) (optional) Taxonomy slug or slugs 
$term (int, array, string) (optional) A single or array of, The term's ID, Name or Slug 

is_tax(); // When any Taxonomy archive page is being displayed.
is_tax('channel'); // When the archive page for taxonomy of 'channel' is being displayed.
is_tax('channel', 'BBC1'); // When the archive page for taxonomy of 'channel' is being displayed and the category is 'BBC1'.
 
</reference></element>
<element pattern="is_time" autocomplete_append="()"><reference>
Test to see if the page is a time based archive page.
</reference></element>
<element pattern="is_trackback" autocomplete_append="()"><reference></reference></element>
<element pattern="is_year" autocomplete_append="()"><reference>
Test to see if the page is a year based archive page.
</reference></element>
<element pattern="pings_open" autocomplete_append="($post_id = NULL)"><reference>
 * Whether the current post is open for pings.
 *
 * @since 1.5.0
 * @uses $post
 *
 * @param int $post_id An optional post ID to check instead of the current post.
 * @return bool True if pings are accepted
</reference></element>
<element pattern="add_query_arg" autocomplete_append="();"><reference></reference></element>
<element pattern="bool_from_yn" autocomplete_append="();"><reference></reference></element>
<element pattern="cache_javascript_headers" autocomplete_append="();"><reference></reference></element>
<element pattern="check_admin_referer" autocomplete_append="();"><reference></reference></element>
<element pattern="check_ajax_referer" autocomplete_append="();"><reference></reference></element>
<element pattern="do_robots" autocomplete_append="();"><reference></reference></element>
<element pattern="get_bloginfo" autocomplete_append="();"><reference></reference></element>
<element pattern="get_num_queries" autocomplete_append="();"><reference></reference></element>
<element pattern="is_blog_installed" autocomplete_append="()"><reference></reference></element>
<element pattern="is_main_site" autocomplete_append="()"><reference></reference></element>
<element pattern="is_ssl" autocomplete_append="()"><reference></reference></element>
<element pattern="make_url_footnote" autocomplete_append="();"><reference></reference></element>
<element pattern="nocache_headers" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_query_arg" autocomplete_append="();"><reference></reference></element>
<element pattern="status_header" autocomplete_append="();"><reference></reference></element>
<element pattern="wp" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_check_filetype" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_clearcookie" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_create_nonce" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_die" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_explain_nonce" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_footer" autocomplete_append="();"><reference>
* Fire the wp_footer action
 *
 * @since 1.5.1
 * @uses do_action() Calls 'wp_footer' hook.
</reference></element>
<element pattern="feed_links" autocomplete_append="(array('separator'	=> _x('&amp;raquo;', 'feed link'), 'feedtitle'	=> __('%1$s %2$s Feed'), 'comstitle'	=> __('%1$s %2$s Comments Feed')));"><reference>
* Display the links to the general feeds.
 *
 * @since 2.8.0
 *
 * @param array $args Optional arguments.
</reference></element>
<element pattern="wp_get_cookie_login" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_http_headers" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_original_referer" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_get_referer" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_hash" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_head" autocomplete_append="();"><reference>
* Fire the wp_head action
 *
 * @since 1.2.0
 * @uses do_action() Calls 'wp_head' hook.
</reference></element>
<element pattern="wp_mail" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_mkdir_p" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_new_user_notification" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_nonce_ays" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_nonce_field" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_nonce_url" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_notify_moderator" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_notify_postauthor" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_original_referer_field" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_parse_args" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_redirect" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_referer_field" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_remote_fopen" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_salt" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_set_auth_cookie" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_upload_bits" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_upload_dir" autocomplete_append="();"><reference></reference></element>
<element pattern="wp_verify_nonce" autocomplete_append="();"><reference></reference></element>
<element pattern="print_Lat" autocomplete_append="();"><reference></reference></element>
<element pattern="the_Lat" autocomplete_append="();"><reference></reference></element>
<element pattern="print_Lon" autocomplete_append="();"><reference></reference></element>
<element pattern="the_Lon" autocomplete_append="();"><reference></reference></element>
<element pattern="print_UrlPopNav" autocomplete_append="();"><reference></reference></element>
<element pattern="the_UrlPopNav" autocomplete_append="();"><reference></reference></element>
<element pattern="print_AcmeMap_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_AcmeMap_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_GeoURL_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_GeoURL_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_GeoCache_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_GeoCache_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_MapQuest_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_MapQuest_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_SideBit_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_SideBit_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_DegreeConfluence_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_DegreeConfluence_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_TopoZone_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_TopoZone_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_FindU_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_FindU_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="print_MapTech_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="the_MapTech_Url" autocomplete_append="();"><reference></reference></element>
<element pattern="admin_notice_feed" autocomplete_append="();"><reference></reference></element>
<element pattern="avoid_blog_page_permalink_collision" autocomplete_append="();"><reference></reference></element>
<element pattern="check_import_new_users" autocomplete_append="();"><reference></reference></element>
<element pattern="check_upload_size" autocomplete_append="();"><reference></reference></element>
<element pattern="choose_primary_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="confirm_delete_users" autocomplete_append="();"><reference></reference></element>
<element pattern="dashboard_quota" autocomplete_append="();"><reference></reference></element>
<element pattern="display_space_usage" autocomplete_append="();"><reference></reference></element>
<element pattern="format_code_lang" autocomplete_append="();"><reference></reference></element>
<element pattern="get_site_allowed_themes" autocomplete_append="();"><reference></reference></element>
<element pattern="get_space_allowed" autocomplete_append="();"><reference></reference></element>
<element pattern="get_upload_space_available" autocomplete_append="();"><reference></reference></element>
<element pattern="grant_super_admin" autocomplete_append="();"><reference></reference></element>
<element pattern="is_upload_space_available" autocomplete_append="()"><reference></reference></element>
<element pattern="ms_deprecated_blogs_file" autocomplete_append="();"><reference></reference></element>
<element pattern="mu_dropdown_languages" autocomplete_append="();"><reference></reference></element>
<element pattern="new_user_email_admin_notice" autocomplete_append="();"><reference></reference></element>
<element pattern="redirect_user_to_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="refresh_user_details" autocomplete_append="();"><reference></reference></element>
<element pattern="revoke_super_admin" autocomplete_append="();"><reference></reference></element>
<element pattern="secret_salt_warning" autocomplete_append="();"><reference></reference></element>
<element pattern="send_confirmation_on_profile_email" autocomplete_append="();"><reference></reference></element>
<element pattern="show_post_thumbnail_warning" autocomplete_append="();"><reference></reference></element>
<element pattern="site_admin_notice" autocomplete_append="();"><reference></reference></element>
<element pattern="sync_category_tag_slugs" autocomplete_append="();"><reference></reference></element>
<element pattern="update_option_new_admin_email" autocomplete_append="();"><reference></reference></element>
<element pattern="update_user_status" autocomplete_append="();"><reference></reference></element>
<element pattern="upload_size_limit_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="upload_space_setting" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_delete_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_delete_user" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_get_blog_allowedthemes" autocomplete_append="();"><reference></reference></element>
<element pattern="_admin_notice_multisite_activate_plugins_page" autocomplete_append="();"><reference></reference></element>
<element pattern="add_blog_option" autocomplete_append="();"><reference></reference></element>
<element pattern="delete_blog_option" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blogaddress_by_domain" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blogaddress_by_id" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blogaddress_by_name" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blog_details" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blog_option" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blog_status" autocomplete_append="();"><reference></reference></element>
<element pattern="get_id_from_blogname" autocomplete_append="();"><reference></reference></element>
<element pattern="get_last_updated" autocomplete_append="();"><reference></reference></element>
<element pattern="is_archived" autocomplete_append="()"><reference></reference></element>
<element pattern="refresh_blog_details" autocomplete_append="();"><reference></reference></element>
<element pattern="restore_current_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="switch_to_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="update_archived" autocomplete_append="();"><reference></reference></element>
<element pattern="update_blog_details" autocomplete_append="();"><reference></reference></element>
<element pattern="update_blog_option" autocomplete_append="();"><reference></reference></element>
<element pattern="update_blog_status" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_update_blogs_date" autocomplete_append="();"><reference></reference></element>
<element pattern="ms_cookie_constants" autocomplete_append="();"><reference></reference></element>
<element pattern="ms_file_constants" autocomplete_append="();"><reference></reference></element>
<element pattern="ms_subdomain_constants" autocomplete_append="();"><reference></reference></element>
<element pattern="ms_upload_constants" autocomplete_append="();"><reference></reference></element>
<element pattern="add_existing_user_to_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="add_new_user_to_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="add_user_to_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="check_upload_mimes" autocomplete_append="();"><reference></reference></element>
<element pattern="create_empty_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="domain_exists" autocomplete_append="()"><reference></reference></element>
<element pattern="filter_SSL" autocomplete_append="();"><reference></reference></element>
<element pattern="fix_import_form_size" autocomplete_append="();"><reference></reference></element>
<element pattern="fix_phpmailer_messageid" autocomplete_append="();"><reference></reference></element>
<element pattern="force_ssl_content" autocomplete_append="();"><reference></reference></element>
<element pattern="get_active_blog_for_user" autocomplete_append="();"><reference></reference></element>
<element pattern="get_admin_users_for_domain" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blogs_of_user" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blog_count" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blog_id_from_url" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blog_permalink" autocomplete_append="();"><reference></reference></element>
<element pattern="get_blog_post" autocomplete_append="();"><reference></reference></element>
<element pattern="get_current_site" autocomplete_append="();"><reference></reference></element>
<element pattern="get_dashboard_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="get_dirsize" autocomplete_append="();"><reference></reference></element>
<element pattern="get_most_recent_post_of_user" autocomplete_append="();"><reference></reference></element>
<element pattern="get_sitestats" autocomplete_append="();"><reference></reference></element>
<element pattern="get_user_count" autocomplete_append="();"><reference></reference></element>
<element pattern="get_user_id_from_string" autocomplete_append="();"><reference></reference></element>
<element pattern="global_terms" autocomplete_append="();"><reference></reference></element>
<element pattern="insert_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="install_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="install_blog_defaults" autocomplete_append="();"><reference></reference></element>
<element pattern="is_blog_user" autocomplete_append="()"><reference></reference></element>
<element pattern="is_email_address_unsafe" autocomplete_append="()"><reference></reference></element>
<element pattern="is_user_member_of_blog" autocomplete_append="()"><reference></reference></element>
<element pattern="is_user_option_local" autocomplete_append="()"><reference></reference></element>
<element pattern="is_user_spammy" autocomplete_append="()"><reference></reference></element>
<element pattern="maybe_add_existing_user_to_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="maybe_redirect_404" autocomplete_append="();"><reference></reference></element>
<element pattern="newblog_notify_siteadmin" autocomplete_append="();"><reference></reference></element>
<element pattern="newuser_notify_siteadmin" autocomplete_append="();"><reference></reference></element>
<element pattern="recurse_dirsize" autocomplete_append="();"><reference></reference></element>
<element pattern="redirect_mu_dashboard" autocomplete_append="();"><reference></reference></element>
<element pattern="redirect_this_site" autocomplete_append="();"><reference></reference></element>
<element pattern="remove_user_from_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="signup_nonce_check" autocomplete_append="();"><reference></reference></element>
<element pattern="signup_nonce_fields" autocomplete_append="();"><reference></reference></element>
<element pattern="update_blog_public" autocomplete_append="();"><reference></reference></element>
<element pattern="update_posts_count" autocomplete_append="();"><reference></reference></element>
<element pattern="upload_is_file_too_big" autocomplete_append="();"><reference></reference></element>
<element pattern="upload_is_user_over_quota" autocomplete_append="();"><reference></reference></element>
<element pattern="users_can_register_signup_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="welcome_user_msg_filter" autocomplete_append="();"><reference></reference></element>
<element pattern="wordpressmu_wp_mail_from" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_activate_signup" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_admin_redirect_add_updated_param" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_create_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_create_user" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_log_new_registrations" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_signup_blog" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_signup_blog_notification" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_signup_user" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_signup_user_notification" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_validate_blog_signup" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_validate_user_signup" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_welcome_notification" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_welcome_user_notification" autocomplete_append="();"><reference></reference></element>
<element pattern="get_current_site_name" autocomplete_append="();"><reference></reference></element>
<element pattern="is_subdomain_install" autocomplete_append="()"><reference></reference></element>
<element pattern="ms_not_installed" autocomplete_append="();"><reference></reference></element>
<element pattern="ms_site_check" autocomplete_append="();"><reference></reference></element>
<element pattern="wpmu_current_site" autocomplete_append="();"><reference></reference></element>
</group>