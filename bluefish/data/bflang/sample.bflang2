<?xml version="1.0"?>
<!-- a bflang2 file should start with a xml declaration -->

<!-- 
the root tag of the bflang2 file is <bflang name="NAME"> 
it should have attribute 'name', which is a human readable name of the 
language that is defined  
-->
<bflang name="Sample">
<!-- within the bflang tag is first a <header> and then a <definition> tag.
the header tag is parsed during bluefish startup.
the definition tag is parsed only on-demand. if a file of this type is opened -->
<header>
<!-- the <header> tag can have <mime> and <highlight> -->

<!-- <mime type="TYPE"> defines which mime-types are described by this language file. 
There can be multiple mime tags in the header section (for example C source and 
C header files have a different mimetype and can be described by the same
language file) -->
	<mime type="application/x-php"/>
<!-- <highlight name="NAME" style="STYLE"> defines which element-types that are defined in 
the file, and which styles should be applied for each of these types. So if an element 
in this file has attribute highlight="foo", this section should have <highlight name="foo"
style="somestyle"/>. Look at other language files and try to re-use styles !!!!!!!!!

For the end-user it is convenient if styles are re-used. All languages that define a comment
should use style 'comment' by default. 
-->
	<highlight name="comment" style="comment" />

<!-- <option> is currently unsupported --> 
	<option name="allfunctions" default="1" description="All php functions" />
</header>
<definition>
<!-- within <definition> the actual language description is found. A language definition always
starts with a <context> tag.
 -->
<context symbols="&gt;&lt;&amp;; &#9;&#10;&#13;">
<!-- <context symbols="LIST OF CHARACTERS" highlight="HIGHLIGHT-TYPE" id="IDENTIFIER"
a <context> tag should always define "symbols". Symbols are those characters that may start or end an element.

To detect function strlen in the following examples (language C): 
i=strlen(a);   
i+strlen(a);
i*strlen (a);
we need at least symbols =+*( 

In most languages all whitespace is a symbol ( =space, &#9;=tab, &#10;=newline, &#13;=carriange return).

In xml/sgml/html only '<>&;' are symbols, but withtin a tag also "' are symbols.  

The optional attribute highlight may specify a highlight type that is valid for the complete text region
that has this context. Useful for 'comment' or 'string' type of contexts where the complete context is 
highlighted 

The optional attribute 'id' is used to define an identifier which can be used to re-use this context.

To re-use a context, use <context id="IDENTIFIER" /> where IDENTIFIER refers to a previously defined 
context. The file is parsed top to bottom.

Within <context> there can be <element> <tag> and <group> tags.
-->
<element pattern="while" highlight="keyword"/>
<!--
<element> defines an element that is highlighted, or can be autocompleted, or an element that starts a new context

it always needs attribute 'pattern' which defines the pattern that will be looked for in this context

the pattern can be defined in 'regular expression' style, to do this add attribute is_regex="1". however, there is
only limited regular expression support. you may use 
- a range of characters such as [a-z0-9;']
- an inverted range such as [^0-9]
- operators such as ? (zero or one), + (one or more), and * (zero or more)
- subpatterns such as ab(fg)?

a pattern may be case insensitive, set case_insens="1"

to highlight the pattern use attribute highlight="TYPE", where TYPE should be defined within the <header> 
section of the language file

<element> may have attribute 'id' so this element may be referred to later. To re-use element 'foo' later in the file
use <element id="foo" />
-->
<element id="bracket{" pattern="{" starts_block="1" highlight="brackets" />
<element pattern="}" ends_block="1" blockstartelement="bracket{" highlight="brackets" />
<!--
an element may start or end a block. a block consists of two patterns (start and end) where the contents between
the start and the end may be hidden when the block is 'folded'.

to make a pattern a block start define starts_block="1" and use the 'id' attribute

to specify a pattern that ends a block use ends_block="1" and use blockstartelement="FOO" where FOO is the id of 
the start-of-block-element

-->
<element pattern="/*" highlight="c-style-comment">
	<context symbols="*/&#9;&#10;&#13;" highlight="c-style-comment">
		<element pattern="*/" highlight="c-style-comment" ends_context="1" />
	</context>
</element>
<!--
an element may also start a new context. whenever this pattern is found the engine switches to this context
and starts scanning only the patterns defined in this context. To do this define <context></context> 
between <element> and </element>. within this <context> there can be entirely different patterns.  

often there is an end of the context too. in order to do this have an element INSIDE the inner context that
has ends_context="NUM" where NUM specifies the number of contexts that are ended by this element. Because
context may be nested there may be several contexts inside each other.
-->
<element pattern="while" highlight="keyword" autocomplete="1" autocomplete_append="() {"/>
<!--
an pattern may also be autocompletable. to enable this use autocomplete="1"
often it is convenient if not only the pattern itself can be completed but some common
characters are appended. use autocomplete_append="STRING" to define any characters that
will be autocompleted

a regular expession pattern may be autocompletable as well. but to autocomplete the pattern
itself usually makes no sense because it matches various other patterns. use 
autocomplete_string="STRING" to autocomplete STRING in this context -->
<tag name="body" highlight="tag" attributes="style,class,id" />
<!--
because there are many languages that use sgml/xml/html style patterns there is <tag> for convenience. 

it should have attribute 'name' to specify the name of the tag

the attribute 'attributes' defines attributes that are valid for this tag

to highlight the tag use highlight="TYPE" where TYPE is the highlight type defined in the <header> section
to highlight attributes use attrib_highlight="TYPE" 

a <tag> may also start a new context just as <element> does
-->
<tag name="img" attributes="style,class,id,src,width,height" 
		autocomplete_append="&gt;" attrib_autocomplete_append="=&quot;&quot;" />
<!--
a <tag> automatically autocompletes. it also has a 'autocomplete_append' attribute, but
also an 'attrib_autocomplete_append' atribute.
-->
<group highlight="keyword" autocomplete="1">
	<element pattern="for"/>
	<element pattern="while"/>
</group>	
<!-- 
often there are many elements that need the same attribute such as highlight or autocomplete

to make this easier you can group these elements inside <group>.  

supported atributes are:
- highlight
- autocomplete
- autocomplete_append
- class
- case_insens
- is_regex

-->
<group  attribhighlight="attribute" highlight="tag" 
		autocomplete_append="&gt;" attrib_autocomplete_append="=&quot;&quot;"  >
	<tag name="p" attributes="style,id,width"/>
	<tag name="div" attributes="style,id" />
</group>	
<!--
also many <tag> entries can have the same attributes, so these can also be 
grouped inside <group>

supported attributes are:
- highlight
- attribhighlight
- autocomplete_append
- attrib_autocomplete_append
- class 
-->


<element pattern="[0-9.]+" is_regex="1" highlight="value"/>
<element pattern="TRUE" autocomplete="1" highlight="value"/>
<element pattern="FALSE" autocomplete="1" highlight="value"/>

<element pattern="[" starts_block="1" mayfold="1" highlight="brackets" />
<element pattern="]" ends_block="1" blockstartelement="[" highlight="brackets" />
<element pattern="(" starts_block="1" mayfold="1" highlight="brackets" />
<element pattern=")" ends_block="1" blockstartelement="(" highlight="brackets" />
<element pattern="&#34;" highlight="string">
	<context symbols="\&#34;" highlight="string">
		<element pattern="\&#34;" highlight="string" />
		<element pattern="&#34;" highlight="string" ends_context="1" />
	</context>
</element>
<element pattern="'" highlight="string">
	<context symbols="\'" highlight="string">
		<element pattern="\'" highlight="string" />
		<element pattern="'" highlight="string" ends_context="1" />
	</context>
</element>

<element pattern="$[a-z0-9._]+" is_regex="1" case_insens="1" highlight="variable"/>
<element pattern="(//|#)" is_regex="1" highlight="php-comment">
	<context symbols="?&gt;&#10;" highlight="php-comment">
		<element pattern="&#10;" ends_context="1" />
		<element pattern="?&gt;" ends_context="2" ends_block="1" blockstartelement="&lt;?php" highlight="php-tag" mayfold="1" />
	</context>
</element>
<element pattern="?&gt;" ends_block="1" blockstartelement="&lt;?php" highlight="php-tag" mayfold="1" ends_context="1" />
</context></element>

<element pattern="&lt;!--" highlight="html-comment" starts_block="1">
	<context symbols="-&gt; &#9;&#10;&#13;" highlight="html-comment">
		<element pattern="--&gt;" ends_block="1" blockstartelement="&lt;!--" highlight="html-comment" mayfold="1" ends_context="1" />
	</context>
</element>
<element pattern="&amp;[a-z0-9#]+;" is_regex="1" highlight="value" />
</context>
</definition>
</bflang>
