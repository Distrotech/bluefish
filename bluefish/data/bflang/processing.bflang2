<?xml version="1.0"?>
<!--
		Bluefish HTML Editor
		Processing.bflang2 falsetti at clansco.org $Revision: 6284 $
 
		Copyright (C) 2008-2011 Olivier Sessink

	    This program is free software: you can redistribute it and/or modify
		it under the terms of the GNU General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.

		This program is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.

		You should have received a copy of the GNU General Public License
		along with this program.  If not, see <http://www.gnu.org/licenses/>.		
-->

<!--
		References are copyright (C) 2004-2011 Ben Fry and Casey Reas.
		http://processing.org/reference/
		The Reference for the Language and Environment are under a Creative 
		Commons license (CC BY-NC-SA 2.0) which makes it possible to re-use 
		the content for non-commercial purposes if it is credited. 
		http://creativecommons.org/licenses/by-nc-sa/2.0/
-->


<bflang name="Processing" version="2.0" table="2355" contexts="6" matches="513">
<header>
	<mime type="application/processing"/>
	<option name="load_reference" default="1" description="load reference data"/>
	<option name="load_completion" default="1" description="load completion data"/>
	<highlight name="keyword1" style="special-keyword" />
	<highlight name="brackets" style="brackets" />
	<highlight name="method" style="special-tag3" />
	<highlight name="special" style="special-tag" />
	<highlight name="comment" style="comment" />
	<highlight name="string" style="string" />
	<highlight name="constant" style="value"  />
	<highlight name="value" style="value"  />
	<highlight name="variable" style="value"  />
	<highlight name="imports" style="preprocessor" />
</header>
<properties>
	<comment type="block" start="/*" end="*/" />
	<comment type="block" start="/**" end="*/" />
	<comment type="line" start="//" />
	<smartindent characters="{" />
	<smartoutdent characters="}" />
</properties>

<definition>
<context symbols=" .;(){}[]:\&#34;\\',&gt;&lt;*&amp;^%!+=-|/?#&#9;&#10;&#13;">

<element pattern="&#34;" highlight="string">
	<context symbols="\&#34;" highlight="string">
		<element pattern="\&#34;" highlight="string" />
		<element pattern="&#34;" highlight="string" ends_context="1" />
	</context>
</element>
<element pattern="'" highlight="string">
	<context symbols="\'" highlight="string">
		<element pattern="\\." is_regex="1" highlight="string" />
		<element pattern="'" highlight="string" ends_context="1" />
	</context>
</element>

<element id="e.lbrace" pattern="{" starts_block="1" mayfold="1" highlight="brackets" />
<element pattern="}" ends_block="1" blockstartelement="e.lbrace" highlight="brackets" />
<element id="e.lbracket" pattern="[" starts_block="1" mayfold="1" highlight="brackets" />
<element pattern="]" ends_block="1" blockstartelement="e.lbracket" highlight="brackets" />
<element id="e.lparen" pattern="(" starts_block="1" mayfold="1" highlight="brackets" />
<element pattern=")" ends_block="1" blockstartelement="e.lparen" highlight="brackets" />

<element id="e.linecomment" pattern="//" highlight="comment">
<!-- dos has \r\n -> we should never end a pattern between these two chars  -->
	<context symbols="&#10;&#13;" highlight="comment">
		<element pattern="(&#10;|&#13;|&#13;&#10;)" is_regex="1" highlight="comment" ends_context="1" />
	</context>
</element>


<element id="e.lcomment" pattern="/*" starts_block="1" highlight="comment">
	<context symbols="*/&#9;&#10;&#13;" highlight="comment">
		<element pattern="*/" ends_block="1" blockstartelement="e.lcomment" highlight="comment" mayfold="1" ends_context="1" />
	</context>
</element>

<element pattern="[0-9]+\.*[0-9]*" is_regex="1" highlight="value"/> 

<group autocomplete="1" highlight="keyword1">
            <element pattern="Array" />
            <element pattern="Boolean" />
            <element pattern="Byte" />
            <element pattern="Character" />
            <element pattern="Class" />
            <element pattern="Double" />
            <element pattern="Float" />
            <element pattern="Integer" />	
            <element pattern="HashMap" />
            <element pattern="PFont" />
            <element pattern="PGraphics" />
            <element pattern="PImage" />
            <element pattern="PShape" />
            <element pattern="PVector" />
            <element pattern="String" />
            <element pattern="StringBuffer" />
            <element pattern="Thread" />
            <element pattern="abstract" />
            <element pattern="boolean" />
            <element pattern="break" />
            <element pattern="byte" />
            <element pattern="case" />
            <element pattern="catch" />
            <element pattern="char" />
            <element pattern="class" />
            <element pattern="color" />
            <element pattern="continue" />
            <element pattern="default" />
            <element pattern="do" />
            <element pattern="double" />
            <element pattern="else" />
            <element pattern="extends" />
            <element pattern="false" />
            <element pattern="final" />
            <element pattern="finally" />
            <element pattern="float" />
            <element pattern="for" />
            <element pattern="if" />
            <element pattern="implements" />
            <element pattern="import" />
            <element pattern="instanceof" />
            <element pattern="int" />
            <element pattern="interface" />
            <element pattern="long" />
            <element pattern="native" />
            <element pattern="new" />
            <element pattern="null" />
            <element pattern="package" />
            <element pattern="private" />
            <element pattern="protected" />
            <element pattern="public" />
            <element pattern="return" />
            <element pattern="short" />
            <element pattern="static" />
            <element pattern="super" />
            <element pattern="switch" />
            <element pattern="synchronized" />
            <element pattern="this" />
            <element pattern="throw" />
            <element pattern="throws" />
            <element pattern="transient" />
            <element pattern="true" />
            <element pattern="try" />
            <element pattern="void" />
            <element pattern="volatile" />
            <element pattern="while" />
</group>


<group highlight="method" autocomplete="1" autocomplete_append="();" autocomplete_backup_cursor="2" >
 <element pattern="add"><reference></reference></element>
 <element pattern="angleBetween"><reference></reference></element>
 <element pattern="beginDraw"><reference></reference></element>
 <element pattern="cache"><reference></reference></element>
 <element pattern="charAt"><reference></reference></element>
 <element pattern="cross"><reference></reference></element>
 <element pattern="curve"><reference></reference></element>
 <element pattern="disableStyle"><reference></reference></element>
 <element pattern="div"><reference></reference></element>
 <element pattern="dot"><reference></reference></element>
 <element pattern="enableStyle"><reference></reference></element>
 <element pattern="endDraw"><reference></reference></element>
 <element pattern="equals"><reference></reference></element>
 <element pattern="flush"><reference></reference></element>
 <element pattern="getChild"><reference></reference></element>
 <element pattern="getChildCount"><reference></reference></element>
 <element pattern="getChildren"><reference></reference></element>
 <element pattern="getContent"><reference></reference></element>
 <element pattern="getFloatAttribute"><reference></reference></element>
 <element pattern="getHeight"><reference></reference></element>
 <element pattern="getIntAttribute"><reference></reference></element>
 <element pattern="getName"><reference></reference></element>
 <element pattern="getStringAttribute"><reference></reference></element>
 <element pattern="getWidth"><reference></reference></element>
 <element pattern="indexOf"><reference></reference></element>
 <element pattern="isVisible"><reference></reference></element>
 <element pattern="length"><reference></reference></element>
 <element pattern="list"><reference></reference></element>
 <element pattern="mask"><reference></reference></element>
 <element pattern="mult"><reference></reference></element>
 <element pattern="openStream"><reference></reference></element>
 <element pattern="resize"><reference></reference></element>
 <element pattern="sub"><reference></reference></element>
 <element pattern="substring"><reference></reference></element>
 <element pattern="toLowerCase"><reference></reference></element>
 <element pattern="toUpperCase"><reference></reference></element>

 <element pattern="abs"><reference><b>Description:</b>
Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive.

<b>Syntax:</b>
abs(value)

<b>Parameters:</b>
value
float or int

<b>Returns:</b>
float or int (depending on the input values)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="acos"><reference><b>Description:</b>
The inverse of <b>cos()</b>, returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range <b>0</b> to <b>PI (3.1415927)</b>.

<b>Syntax:</b>
acos(value)

<b>Parameters:</b>
value
float: the value whose arc cosine is to be returned

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="alpha"><reference><b>Description:</b>
Extracts the alpha value from a color.

<b>Syntax:</b>
alpha(color)

<b>Parameters:</b>
color
any value of the color datatype

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="ambientLight"><reference><b>Description:</b>
Adds an ambient light. Ambient light doesn't come from a specific direction, the rays have light have bounced around so much that objects are evenly lit from all sides. Ambient lights are almost always used in combination with other types of lights. Lights need to be included in the <b>draw()</b> to remain persistent in a looping program. Placing them in the <b>setup()</b> of a looping program will cause them to only have an effect the first time through the loop. The effect of the parameters is determined by the current color mode.

<b>Syntax:</b>
ambientLight(v1, v2, v3)
ambientLight(v1, v2, v3, x, y, z)

<b>Parameters:</b>
v1
int or float: red or hue value

v2
int or float: green or hue value

v3
int or float: blue or hue value

x
int or float: x-coordinate of the light

y
int or float: y-coordinate of the light

z
int or float: z-coordinate of the light

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="ambient"><reference><b>Description:</b>
Sets the ambient reflectance for shapes drawn to the screen. This is combined with the ambient light component of environment. The color components set through the parameters define the reflectance. For example in the default color mode, setting v1=255, v2=126, v3=0, would cause all the red light to reflect and half of the green light to reflect. Used in combination with <b>emissive()</b>, <b>specular()</b>, and <b>shininess()</b> in setting the materal properties of shapes.

<b>Syntax:</b>
ambient(gray)
ambient(color)
ambient(v1, v2, v3)

<b>Parameters:</b>
gray
int or float: number specifying value between white and black

color
color: any value of the color datatype

v1
int or float: red or hue value

v2
int or float: green or saturation value

v3
int or float: blue or brightness value

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="append"><reference><b>Description:</b>
Expands an array by one element and adds data to the new position. The datatype of the <b>element</b> parameter must be the same as the datatype of the array.

When using an array of objects, the data returned from the function must be cast to the object array's data type. For example: <i>SomeClass[] items = (SomeClass[]) append(originalArray, element)</i>.

<b>Syntax:</b>
append(array, element)

<b>Parameters:</b>
array
boolean[], byte[], char[], int[], float[], or String[], or an array of objects

element
new data for the array

<b>Returns:</b>
Array (the same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="applyMatrix"><reference><b>Description:</b>
Multiplies the current matrix by the one specified through the parameters. This is very slow because it will try to calculate the inverse of the transform, so avoid it whenever possible. The equivalent function in OpenGL is glMultMatrix().

<b>Syntax:</b>
applyMatrix(n00, n01, n02, n03            n04, n05, n06, n07            n08, n09, n10, n11            n12, n13, n14, n15)

<b>Parameters:</b>
n00-n15
float: numbers which define the 4x4 matrix to be multiplied

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="arc"><reference><b>Description:</b>
Draws an arc in the display window. Arcs are drawn along the outer edge of an ellipse defined by the <b>x</b>, <b>y</b>, <b>width</b> and <b>height</b> parameters. The origin or the arc's ellipse may be changed with the <b>ellipseMode()</b> function. The <b>start</b> and <b>stop</b> parameters specify the angles at which to draw the arc.

<b>Syntax:</b>
arc(x, y, width, height, start, stop)

<b>Parameters:</b>
x
int or float: x-coordinate of the arc's ellipse

y
int or float: y-coordinate of the arc's ellipse

width
int or float: width of the arc's ellipse

height
int or float: height of the arc's ellipse

start
int or float: angle to start the arc, specified in radians

stop
int or float: angle to stop the arc, specified in radians

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="arrayCopy"><reference><b>Description:</b>
Copies an array (or part of an array) to another array. The <b>src</b> array is copied to the <b>dst</b> array, beginning at the position specified by <b>srcPos</b> and into the position specified by <b>dstPos</b>. The number of elements to copy is determined by <b>length</b>. The simplified version with two arguments copies an entire array to another of the same size. It is equivalent to "arrayCopy(src, 0, dst, 0, src.length)". This function is far more efficient for copying array data than iterating through a <b>for</b> and copying each element.

<b>Syntax:</b>
arrayCopy(src, dest)
arrayCopy(src, dest, length)
arrayCopy(src, srcPos, dest, destPos, length)

<b>Parameters:</b>
src
an array of any data type: the source array

dest
an array of any data type (as long as it's the same as src): the destination array

srcPos
int: starting position in the source array

destPos
int: starting position in the destination array

length
int: number of array elements to be copied

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="asin"><reference><b>Description:</b>
The inverse of <b>sin()</b>, returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range <b>-PI/2</b> to <b>PI/2</b>.

<b>Syntax:</b>
asin(value)

<b>Parameters:</b>
value
float: the value whose arc sine is to be returned

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="atan2"><reference><b>Description:</b>
Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a <b>float</b> in the range from <b>PI</b> to <b>-PI</b>. The <b>atan2()</b> function is most often used for orienting geometry to the position of the cursor.  Note: The y-coordinate of the point is the first parameter and the x-coordinate is the second due the the structure of calculating the tangent.

<b>Syntax:</b>
atan2(y, x);

<b>Parameters:</b>
y
int or float: y-coordinate of the point

x
int or float: x-coordinate of the point

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="atan"><reference><b>Description:</b>
The inverse of <b>tan()</b>, returns the arc tangent of a value. This function expects the values in the range of -Infinity to Infinity (exclusive) and values are returned in the range <b>-PI/2</b> to <b>PI/2 </b>.

<b>Syntax:</b>
atan(value)

<b>Parameters:</b>
value
float: -Infinity to Infinity (exclusive)

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="background"><reference><b>Description:</b>
The <b>background()</b> function sets the color used for the background of the Processing window. The default background is light gray. In the <b>draw()</b> function, the background color is used to clear the display window at the beginning of each frame.

An image can also be used as the background for a sketch, however its width and height must be the same size as the sketch window. To resize an image 'b' to the size of the sketch window, use b.resize(width, height).

Images used as background will ignore the current tint() setting.

It is not possible to use transparency (alpha) in background colors with the main drawing surface, however they will work properly with <b>createGraphics</b>.

<b>Syntax:</b>
background(gray)
background(gray, alpha)
background(value1, value2, value3)
background(value1, value2, value3, alpha)
background(color)
background(color, alpha)
background(hex)
background(hex, alpha)

<b>Parameters:</b>
gray
int or float: specifies a value between white and black

alpha
int or float: opacity of the background

value1
int or float: red or hue value (depending on the current color mode)

value2
int or float: green or saturation value (depending on the current color mode)

value3
int or float: blue or brightness value (depending on the current color mode)

color
color: any value of the color datatype

hex
int: color value in hexadecimal notation (i.e. #FFCC00 or 0xFFFFCC00)

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="beginCamera"><reference><b>Description:</b>
The <b>beginCamera()</b> and <b>endCamera()</b> functions enable advanced customization of the camera space. The functions are useful if you want to more control over camera movement, however for most users, the <b>camera()</b> function will be sufficient.The camera functions will replace any transformations (such as <b>rotate()</b> or <b>translate()</b>) that occur before them in <b>draw()</b>, but they will not automatically replace the camera transform itself. For this reason, camera functions should be placed at the beginning of <b>draw()</b> (so that transformations happen afterwards), and the <b>camera()</b> function can be used after <b>beginCamera()</b> if you want to reset the camera before applying transformations.This function sets the matrix mode to the camera matrix so calls such as <b>translate()</b>, <b>rotate()</b>, applyMatrix() and resetMatrix() affect the camera. <b>beginCamera()</b> should always be used with a following <b>endCamera()</b> and pairs of <b>beginCamera()</b> and <b>endCamera()</b> cannot be nested.

<b>Syntax:</b>
beginCamera()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="beginRaw"><reference><b>Description:</b>
To create vectors from 3D data, use the <b>beginRaw()</b> and <b>endRaw()</b> commands. These commands will grab the shape data just before it is rendered to the screen. At this stage, your entire scene is nothing but a long list of individual lines and triangles. This means that a shape created with <b>sphere()</b> method will be made up of hundreds of triangles, rather than a single object. Or that a multi-segment line shape (such as a curve) will be rendered as individual segments.

When using <b>beginRaw()</b> and <b>endRaw()</b>, it's possible to write to either a 2D or 3D renderer. For instance, <b>beginRaw()</b> with the PDF library will write the geometry as flattened triangles and lines, even if recording from a 3D renderer such as <b>P3D</b> or <b>OPENGL</b>. 

If you want a background to show up in your files, use <b>rect(0, 0, width, height)</b> after setting the <b>fill()</b> to the background color. Otherwise the background will not be rendered to the file because the background is not shape.

Using <b>hint(ENABLE_DEPTH_SORT)</b> can improve the appearance of 3D geometry drawn to 2D file formats. See the <b>hint()</b> reference for more details.

See examples in the reference for the <b>PDF</b> and <b>DXF</b> libraries for more information.

<b>Syntax:</b>
beginRaw(renderer, filename)

<b>Parameters:</b>
renderer
For example, PDF or DXF

filename
String:  filename for output

<b>Usage:</b>
Application</reference></element>
 <element pattern="beginRecord"><reference><b>Description:</b>
Opens a new file and all subsequent drawing functions are echoed to this file as well as the display window. The <b>beginRecord()</b> function requires two parameters, the first is the renderer and the second is the file name. This function is always used with <b>endRecord()</b> to stop the recording process and close the file.

<b>Syntax:</b>
beginRecord(renderer, filename)

<b>Parameters:</b>
renderer
For example, PDF or DXF

filename
String:  filename for output

<b>Usage:</b>
Application</reference></element>
 <element pattern="beginShape"><reference><b>Description:</b>
Using the <b>beginShape()</b> and <b>endShape()</b> functions allow creating more complex forms. <b>beginShape()</b> begins recording vertices for a shape and <b>endShape()</b> stops recording. The value of the <b>MODE</b> parameter tells it which types of shapes to create from the provided vertices. With no mode specified, the shape can be any irregular polygon. The parameters available for beginShape() are POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the <b>beginShape()</b> function, a series of <b>vertex()</b> commands must follow. To stop drawing the shape, call <b>endShape()</b>. The <b>vertex()</b> function with two parameters specifies a position in 2D and the <b>vertex()</b> function with three parameters specifies a position in 3D. Each shape will be outlined with the current stroke color and filled with the fill color. 

Transformations such as <b>translate()</b>, <b>rotate()</b>, and <b>scale()</b> do not work within <b>beginShape()</b>. It is also not possible to use other shapes, such as <b>ellipse()</b> or <b>rect()</b> within <b>beginShape()</b>. 

The P2D, P3D, and OPENGL renderer settings allow stroke() and fill() settings to be altered per-vertex, however the default JAVA2D renderer does not. Settings such as strokeWeight(), strokeCap(), and strokeJoin() cannot be changed while inside a beginShape()/endShape() block with any renderer.

<b>Syntax:</b>
beginShape()
beginShape(MODE)

<b>Parameters:</b>
MODE
Either POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="bezierDetail"><reference><b>Description:</b>
Sets the resolution at which Beziers display. The default value is 20. This function is only useful when using the P3D or OPENGL renderer as the default (JAVA2D) renderer does not use this information.

<b>Syntax:</b>
bezierDetail(detail)

<b>Parameters:</b>
detail
int: resolution of the curves

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="bezierPoint"><reference><b>Description:</b>
Evaluates the Bezier at point t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a bezier curve at t.

<b>Syntax:</b>
bezierPoint(a, b, c, d, t)

<b>Parameters:</b>
a
int or float: coordinate of first point on the curve

b
int or float: coordinate of first control point

c
int or float: coordinate of second control point

d
int or float: coordinate of second point on the curve

t
float: value between 0 and 1

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="bezierTangent"><reference><b>Description:</b>
Calculates the tangent of a point on a Bezier curve. There is a good definition of "tangent" at Wikipedia: http://en.wikipedia.org/wiki/Tangent

<b>Syntax:</b>
bezierTangent(a, b, c, d, t)

<b>Parameters:</b>
a
int or float: coordinate of first point on the curve

b
int or float: coordinate of first control point

c
int or float: coordinate of second control point

d
int or float: coordinate of second point on the curve

t
float: value between 0 and 1

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="bezierVertex"><reference><b>Description:</b>
Specifies vertex coordinates for Bezier curves. Each call to <b>bezierVertex()</b> defines the position of two control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time <b>bezierVertex()</b> is used within a <b>beginShape()</b> call, it must be prefaced with a call to <b>vertex()</b> to set the first anchor point. This function must be used between <b>beginShape()</b> and <b>endShape()</b> and only when there is no MODE parameter specified to <b>beginShape()</b>. Using the 3D version of requires rendering with P3D or OPENGL (see the Environment reference for more information).

<b>Syntax:</b>
bezierVertex(cx1, cy1, cx2, cy2, x, y)
bezierVertex(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)

<b>Parameters:</b>
cx1
The x-coordinate of 1st control point, either a float or int

cy1
The y-coordinate of 1st control point, either a float or int

cz1
The z-coordinate of 1st control point, either a float or int

cx2
The x-coordinate of 2nd control point, either a float or int

cy2
The y-coordinate of 2nd control point, either a float or int

cz2
The z-coordinate of 2nd control point, either a float or int

x
The x-coordinate of anchor point, either a float or int

y
The y-coordinate of anchor point, either a float or int

z
The z-coordinate of anchor point, either a float or int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="bezier"><reference><b>Description:</b>
Draws a Bezier curve on the screen. These curves are defined by a series of anchor and control points. The first two parameters specify the first anchor point and the last two parameters specify the other anchor point. The middle parameters specify the control points which define the shape of the curve. Bezier curves were developed by French engineer Pierre Bezier. Using the 3D version of requires rendering with P3D or OPENGL (see the Environment reference for more information).

<b>Syntax:</b>
bezier(x1, y1, cx1, cy1, cx2, cy2, x2, y2);
bezier(x1, y1, z1, cx1, cy1, cz1, cx2, cy2, cz2, x2, y2, z2);

<b>Parameters:</b>
x1, y1, z1
int or float: coordinates for the first anchor point

cx1, cy1, cz1
int or float: coordinates for the first control point

cx2, cy2, cz2
int or float: coordinates for the second control point

x2, y2, z2
int or float: coordinates for the second anchor point

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="binary"><reference><b>Description:</b>
Converts a byte, char, int, or color to a String containing the equivalent binary notation. For example color(0, 102, 153, 255) will convert to the String "11111111000000000110011010011001". This function can help make your geeky debugging sessions much happier.

<b>Syntax:</b>
binary(value)
binary(value, digits)

<b>Parameters:</b>
value
byte, char, int, color: value to convert

digits
int: number of digits to return

<b>Returns:</b>
String

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="blendColor"><reference><b>Description:</b>
Blends two color values together based on the blending mode given as the <b>MODE</b> parameter. The possible modes are described in the reference for the <b>blend()</b> function.

<b>Syntax:</b>
blendColor(c1, c2, MODE)

<b>Parameters:</b>
c1
color: the first color to blend

c2
color: the second color to blend

MODE
Either BLEND, ADD, SUBTRACT, DARKEST, LIGHTEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, or BURN

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="blend"><reference><b>Description:</b>
Blends a region of pixels from one image into another (or in itself again) with full alpha channel support. There is a choice of the following modes to blend the source pixels (A) with the ones of pixels in the destination image (B):
BLEND - linear interpolation of colours: C = A*factor + B
ADD - additive blending with white clip: C = min(A*factor + B, 255)
SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)
DARKEST - only the darkest colour succeeds: C = min(A*factor, B)
LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)
DIFFERENCE - subtract colors from underlying image.
EXCLUSION - similar to DIFFERENCE, but less extreme.
MULTIPLY - Multiply the colors, result will always be darker.
SCREEN - Opposite multiply, uses inverse values of the colors.
OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,
and screens light values.
HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.
SOFT_LIGHT - Mix of DARKEST and LIGHTEST. 
Works like OVERLAY, but not as harsh.
DODGE - Lightens light tones and increases contrast, ignores darks.
Called "Color Dodge" in Illustrator and Photoshop.
BURN - Darker areas are applied, increasing contrast, ignores lights.
Called "Color Burn" in Illustrator and Photoshop.
All modes use the alpha information (highest byte) of source image pixels as the blending factor. If the source and destination regions are different sizes, the image will be automatically resized to match the destination size. If the <b>srcImg</b> parameter is not used, the display window is used as the source image.
As of release 0149, this function ignores <b>imageMode()</b>.

<b>Syntax:</b>
blend(x, y, width, height, dx, dy, dwidth, dheight, MODE)
blend(srcImg, x, y, width, height, dx, dy, dwidth, dheight, MODE)

<b>Parameters:</b>
x
int: X coordinate of the source's upper left corner

y
int: Y coordinate of the source's upper left corner

width
int: source image width

height
int: source image height

dx
int: X coordinate of the destinations's upper left corner

dy
int: Y coordinate of the destinations's upper left corner

dwidth
int: destination image width

dheight
int: destination image height

srcImg
PImage: a image variable referring to the source image

MODE
Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="blue"><reference><b>Description:</b>
Extracts the blue value from a color, scaled to match current <b>colorMode()</b>. This value is always returned as a  float so be careful not to assign it to an int value.The <b>blue()</b> function is easy to use and undestand, but is slower than another technique. To achieve the same results when working in <b>colorMode(RGB, 255)</b>, but with greater speed, use a bit mask to remove the other color components. For example, the following two lines of code are equivalent:float r1 = blue(myColor);float r2 = myColor &amp; 0xFF;

<b>Syntax:</b>
blue(color)

<b>Parameters:</b>
color
any value of the color datatype

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="box"><reference><b>Description:</b>
A box is an extruded rectangle. A box with equal dimension on all sides is a cube.

<b>Syntax:</b>
box(size);
box(width, height, depth);

<b>Parameters:</b>
size
int or float: dimension of the box in all dimensions, creates a cube

width
int or float: dimension of the box in the x-dimension

height
int or float: dimension of the box in the y-dimension

depth
int or float: dimension of the box in the z-dimension

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="brightness"><reference><b>Description:</b>
Extracts the brightness value from a color.

<b>Syntax:</b>
brightness(color)

<b>Parameters:</b>
color
any value of the color datatype

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="camera"><reference><b>Description:</b>
Sets the position of the camera through setting the eye position, the center of the scene, and which axis is facing upward. Moving the eye position and the direction it is pointing (the center of the scene) allows the images to be seen from different angles. The version without any parameters sets the camera to the default position, pointing to the center of the display window with the Y axis as up. The default values are camera(width/2.0, height/2.0, (height/2.0) / tan(PI*60.0 / 360.0), width/2.0, height/2.0, 0, 0, 1, 0). This function is similar to gluLookAt() in OpenGL, but it first clears the current camera settings.

<b>Syntax:</b>
camera()
camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ)

<b>Parameters:</b>
eyeX
float: x coordinate for the eye

eyeY
float: y coordinate for the eye

eyeZ
float: z coordinate for the eye

centerX
float: x coordinate for the center of the scene

centerY
float: y coordinate for the center of the scene

centerZ
float: z coordinate for the center of the scene

upX
float: usually 0.0, 1.0, or -1.0

upY
float: usually 0.0, 1.0, or -1.0

upZ
float: usually 0.0, 1.0, or -1.0

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="ceil"><reference><b>Description:</b>
Calculates the closest int value that is greater than or equal to the value of the parameter. For example, <b>ceil(9.03)</b> returns the value 10.

<b>Syntax:</b>
ceil(value)

<b>Parameters:</b>
value
float

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="colorMode"><reference><b>Description:</b>
Changes the way Processing interprets color data. By default, the parameters for <b>fill()</b>, <b>stroke()</b>, <b>background()</b>, and <b>color()</b> are defined by values between 0 and 255 using the RGB color model. The <b>colorMode()</b> function is used to change the numerical range used for specifying colors and to switch color systems. For example, calling <b>colorMode(RGB, 1.0)</b> will specify that values are specified between 0 and 1. The limits for defining colors are altered by setting the parameters range1, range2, range3, and range 4.

<b>Syntax:</b>
colorMode(mode);
colorMode(mode, range);
colorMode(mode, range1, range2, range3);
colorMode(mode, range1, range2, range3, range4);

<b>Parameters:</b>
mode
Either RGB or HSB, corresponding to Red/Green/Blue and Hue/Saturation/Brightness

range
int or float: range for all color elements

range1
int or float: range for the red or hue depending on the current color mode

range2
int or float: range for the green or saturation depending on the current color mode

range3
int or float: range for the blue or brightness depending on the current color mode

range4
int or float: range for the alpha

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="concat"><reference><b>Description:</b>
Concatenates two arrays. For example, concatenating the array { 1, 2, 3 } and the array { 4, 5, 6 } yields { 1, 2, 3, 4, 5, 6 }. Both parameters must be arrays of the same datatype.

When using an array of objects, the data returned from the function must be cast to the object array's data type. For example: <i>SomeClass[] items = (SomeClass[]) concat(array1, array2)</i>.

<b>Syntax:</b>
concat(array1, array2)

<b>Parameters:</b>
array1, array2
boolean[], byte[], char[], int[], float[], String[], or an array of objects

<b>Returns:</b>
Array (the same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="constrain"><reference><b>Description:</b>
Constrains a value to not exceed a maximum and minimum value.

<b>Syntax:</b>
constrain(value, min, max)

<b>Parameters:</b>
value
int or float: the value to constrain

min
int or float: minimum limit

max
int or float: maximum limit

<b>Returns:</b>
float or int (depending on the input values)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="copy"><reference><b>Description:</b>
Copies a region of pixels from the display window to another area of the display window and copies a region of pixels from an image used as the <b>srcImg</b> parameter into the display window. If the source and destination regions aren't the same size, it will automatically resize the source pixels to fit the specified target region. No alpha information is used in the process, however if the source image has an alpha channel set, it will be copied as well.

As of release 0149, this function ignores <b>imageMode()</b>.

<b>Syntax:</b>
copy(x, y, width, height, dx, dy, dwidth, dheight)
copy(srcImg, x, y, width, height, dx, dy, dwidth, dheight)

<b>Parameters:</b>
x
int: X coordinate of the source's upper left corner

y
int: Y coordinate of the source's upper left corner

width
int: source image width

height
int: source image height

dx
int: X coordinate of the destination's upper left corner

dy
int: Y coordinate of the destination's upper left corner

dwidth
int: destination image width

dheight
int: destination image height

srcImg
PImage: image variable referring to the source image

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="cos"><reference><b>Description:</b>
Calculates the cosine of an angle. This function expects the values of the <b>angle</b> parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range -1 to 1.

<b>Syntax:</b>
cos(angle)

<b>Parameters:</b>
angle
float: an angle in radians

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="createFont"><reference><b>Description:</b>
Dynamically converts a font to the format used by Processing from either a font name that's installed on the computer, or from a .ttf or .otf file inside the sketches "data" folder. This function is an advanced feature for precise control. On most occasions you should create fonts through selecting "Create Font..." from the Tools menu.

Use the <b>PFont.list()</b> method to first determine the names for the fonts recognized by the computer and are compatible with this function. Because of limitations in Java, not all fonts can be used and some might work with one operating system and not others. When sharing a sketch with other people or posting it on the web, you may need to include a .ttf or .otf version of your font in the data directory of the sketch because other people might not have the font installed on their computer. Only fonts that can legally be distributed should be included with a sketch. 

The <b>size</b> parameter states the font size you want to generate. The <b>smooth</b> parameter specifies if the font should be antialiased or not, and the <b>charset</b> parameter is an array of chars that specifies the characters to generate. 

This function creates a bitmapped version of a font in the same manner as the Create Font tool. It loads a font by name, and converts it to a series of images based on the size of the font. When possible, the text() function will use a native font rather than the bitmapped version created behind the scenes with createFont(). For instance, when using the default renderer setting (JAVA2D), the actual native version of the font will be employed by the sketch, improving drawing quality and performance. With the P2D, P3D, and OPENGL renderer settings, the bitmapped version will be used. While this can drastically improve speed and appearance, results are poor when exporting if the sketch does not include the .otf or .ttf file, and the requested font is not available on the machine running the sketch.

<b>Syntax:</b>
createFont(name, size)
createFont(name, size, smooth)
createFont(name, size, smooth, charset)

<b>Parameters:</b>
name
String: name of the font to load

size
float: point size of the font

charset
char[]: array containing characters to be generated

smooth
boolean: true for an antialiased font, false for aliased

<b>Returns:</b>
PFont

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="createGraphics"><reference><b>Description:</b>
Creates and returns a new <b>PGraphics</b> object of the types P2D, P3D, and JAVA2D. Use this class if you need to draw into an off-screen graphics buffer. It's not possible to use <b>createGraphics()</b> with OPENGL, because it doesn't allow offscreen use. The PDF renderer requires the filename parameter. The DXF renderer should not be used with createGraphics(), it's only built for use with beginRaw() and endRaw().

It's important to call any drawing commands between beginDraw() and endDraw() statements. This is also true for any commands that affect drawing, such as smooth() or colorMode().

Unlike the main drawing surface which is completely opaque, surfaces created with createGraphics() can have transparency. This makes it possible to draw into a graphics and maintain the alpha channel. By using save() to write a PNG or TGA file, the transparency of the graphics object will be honored. Note that transparency levels are binary: pixels are either complete opaque or transparent. For the time being (as of release 1.2.1), this means that text characters will be opaque blocks. This will be fixed in a future release (Issue 80).

<b>Syntax:</b>
createGraphics(width, height, renderer)
createGraphics(width, height, renderer, filename)

<b>Parameters:</b>
width
int: width in pixels

height
int: height in pixels

renderer
Either P2D, P3D, JAVA2D, PDF

filename
String: the name of the file

<b>Returns:</b>
PImage or null

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="createImage"><reference><b>Description:</b>
Creates a new PImage (the datatype for storing images). This provides a fresh buffer of pixels to play with. Set the size of the buffer with the <b>width</b> and <b>height</b> parameters. The <b>format</b> parameter defines how the pixels are stored. See the PImage reference for more information.

Be sure to include all three parameters, specifying only the width and height (but no format) will produce a strange error.

Advanced users please note that createImage() should be used instead of the syntax new PImage().

<b>Syntax:</b>
createImage(width, height, format)

<b>Parameters:</b>
width
int: width in pixels

height
int: height in pixels

format
Either RGB, ARGB, ALPHA (grayscale alpha channel)

<b>Returns:</b>
PImage or null

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="createInput"><reference><b>Description:</b>
This is a method for advanced programmers to open a Java InputStream. The method is useful if you want to use the facilities provided by PApplet to easily open files from the data folder or from a URL, but want an InputStream object so that you can use other Java methods to take more control of how the stream is read.

If the requested item doesn't exist, null is returned. 

In earlier releases, this method was called <b>openStream()</b>.

If not online, this will also check to see if the user is asking for a file whose name isn't properly capitalized. If capitalization is different an error will be printed to the console. This helps prevent issues that appear when a sketch is exported to the web, where case sensitivity matters, as opposed to running from inside the Processing Development Environment on Windows or Mac OS, where case sensitivity is preserved but ignored.

The filename passed in can be:
- A URL, for instance openStream("http://processing.org/");
- A file in the sketch's data folder
- The full path to a file to be opened locally (when running as an application)

If the file ends with <b>.gz</b>, the stream will automatically be gzip decompressed. If you don't want the automatic decompression, use the related function <b>createInputRaw()</b>.

<b>Syntax:</b>
createInput(filename)

<b>Parameters:</b>
filename
String: the name of the file to use as input

<b>Returns:</b>
InputStream or null

<b>Usage:</b>
Application &amp; Web</reference></element>
 <element pattern="createOutput"><reference><b>Description:</b>
Similar to <b>createInput()</b>, this creates a Java <b>OutputStream</b> for a given filename or path. The file will be created in the sketch folder, or in the same folder as an exported application.

If the path does not exist, intermediate folders will be created. If an exception occurs, it will be printed to the console, and <b>null</b> will be returned.

This method is a convenience over the Java approach that requires you to 1) create a FileOutputStream object, 2) determine the exact file location, and 3) handle exceptions. Exceptions are handled internally by the function, which is more appropriate for "sketch" projects.

If the output filename ends with <b>.gz</b>, the output will be automatically GZIP compressed as it is written.

<b>Syntax:</b>
createOutput(filename)

<b>Parameters:</b>
filename
String: name of the file to open

<b>Returns:</b>
OutputStream or null

<b>Usage:</b>
Application</reference></element>
 <element pattern="createReader"><reference><b>Description:</b>
Creates a <b>BufferedReader</b> object that can be used to read files line-by-line as individual <b>String</b> objects. This is the complement to the <b>createWriter()</b> function.

Starting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.

<b>Syntax:</b>
createReader(filename)

<b>Parameters:</b>
filename
String: name of the file to be opened

<b>Returns:</b>
BufferedReader or null

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="createWriter"><reference><b>Description:</b>
Creates a new file in the sketch folder, and a <b>PrintWriter</b> object to write to it. For the file to be made correctly, it should be flushed and must be closed with its <b>flush()</b> and <b>close()</b> methods (see above example). 

Starting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.

<b>Syntax:</b>
createWriter(filename)

<b>Parameters:</b>
filename
Name of the file to be created

<b>Returns:</b>
PrintWriter or null

<b>Usage:</b>
Application</reference></element>
 <element pattern="cursor"><reference><b>Description:</b>
Sets the cursor to a predefined symbol, an image, or turns it on if already hidden. If you are trying to set an image as the cursor, it is recommended to make the size 16x16 or 32x32 pixels. It is not possible to load an image as the cursor if you are exporting your program for the Web. The values for parameters <b>x</b> and <b>y</b> must be less than the dimensions of the image.

<b>Syntax:</b>
cursor()
cursor(MODE)
cursor(image, x, y)

<b>Parameters:</b>
MODE
either ARROW, CROSS, HAND, MOVE, TEXT, WAIT

image
PImage: any variable of type PImage

x
int: the horizonal active spot of the cursor

y
int: the vertical active spot of the cursor

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="curveDetail"><reference><b>Description:</b>
Sets the resolution at which curves display. The default value is 20. This function is only useful when using the P3D or OPENGL renderer as the default (JAVA2D) renderer does not use this information.

<b>Syntax:</b>
curveDetail(detail)

<b>Parameters:</b>
detail
int: resolution of the curves

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="curvePoint"><reference><b>Description:</b>
Evalutes the curve at point t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a curve at t.

<b>Syntax:</b>
curvePoint(a, b, c, d, t)

<b>Parameters:</b>
a
int or float: coordinate of first point on the curve

b
int or float: coordinate of second point on the curve

c
int or float: coordinate of third point on the curve

d
int or float: coordinate of fourth point on the curve

t
float: value between 0 and 1

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="curveTangent"><reference><b>Description:</b>
Calculates the tangent of a point on a curve. There is a good definition of "tangent" at Wikipedia: http://en.wikipedia.org/wiki/Tangent

<b>Syntax:</b>
curveTangent(a, b, c, d, t)

<b>Parameters:</b>
a
int or float: coordinate of first point on the curve

b
int or float: coordinate of first control point

c
int or float: coordinate of second control point

d
int or float: coordinate of second point on the curve

t
float: value between 0 and 1

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="curveTightness"><reference><b>Description:</b>
Modifies the quality of forms created with <b>curve()</b> and <b>curveVertex()</b>. The parameter <b>squishy</b> determines how the curve fits to the vertex points. The value 0.0 is the default value for <b>squishy</b> (this value defines the curves to be Catmull-Rom splines) and the value 1.0 connects all the points with straight lines. Values within the range -5.0 and 5.0 will deform the curves but will leave them recognizable and as values increase in magnitude, they will continue to deform.

<b>Syntax:</b>
curveTightness(squishy)

<b>Parameters:</b>
squishy
float or int: amount of deformation from the original vertices

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="curveVertex"><reference><b>Description:</b>
Specifies vertex coordinates for curves. This function may only be used between <b>beginShape()</b> and <b>endShape()</b> and only when there is no MODE parameter specified to <b>beginShape()</b>. The first and last points in a series of <b>curveVertex()</b> lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with <b>curveVertex()</b> will draw the curve between the second, third, and fourth points. The <b>curveVertex()</b> function is an implementation of Catmull-Rom splines. Using the 3D version of requires rendering with P3D or OPENGL (see the Environment reference for more information).

<b>Syntax:</b>
curveVertex(x, y) 
curveVertex(x, y, z)

<b>Parameters:</b>
x
The x-coordinate of the vertex, either a float or int

y
The y-coordinate of the vertex, either a float or int

z
The z-coordinate of the vertex, either a float or int

<b>Returns:</b>
None

<b>Usage:</b>
Application &amp; Web</reference></element>
 <element pattern="curve"><reference><b>Description:</b>
Draws a curved line on the screen. The first and second parameters specify the beginning control point and the last two parameters specify the ending control point. The middle parameters specify the start and stop of the curve. Longer curves can be created by putting a series of <b>curve()</b> functions together or using <b>curveVertex()</b>. An additional function called <b>curveTightness()</b> provides control for the visual quality of the curve. The <b>curve()</b> function is an implementation of Catmull-Rom splines. Using the 3D version of requires rendering with P3D or OPENGL (see the Environment reference for more information).

<b>Syntax:</b>
curve(x1, y1, x2, y2, x3, y3, x4, y4);
curve(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);

<b>Parameters:</b>
x1, y1, z1
int or float: coordinates for the beginning control point

x2, y2, z2
int or float: coordinates for the first point

x3, y3, z3
int or float: coordinates for the second point

x4, y4, z4
int or float: coordinates for the ending control point

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="day"><reference><b>Description:</b>
Processing communicates with the clock on your computer. The <b>day()</b> function returns the current day as a value from 1 - 31.

<b>Syntax:</b>
day()

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="degrees"><reference><b>Description:</b>
Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90&amp;deg; = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.

<b>Syntax:</b>
degrees(angle)

<b>Parameters:</b>
angle
int or float

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="delay"><reference><b>Description:</b>
Forces the program to stop running for a specified time. Delay times are specified in thousandths of a second, therefore the function call <b>delay(3000)</b> will stop the program for three seconds. Because the screen is updated only at the end of <b>draw()</b>, the program may appear to "freeze", because the screen will not update when the <b>delay()</b> method is used. This function has no affect inside <b>setup()</b>.

<b>Syntax:</b>
delay(milliseconds)

<b>Parameters:</b>
milliseconds
int: specified as milliseconds (there are 1000 milliseconds in 1 second)

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="directionalLight"><reference><b>Description:</b>
Adds a directional light. Directional light comes from one direction and is stronger when hitting a surface squarely and weaker if it hits at a a gentle angle. After hitting a surface, a directional lights scatters in all directions. Lights need to be included in the <b>draw()</b> to remain persistent in a looping program. Placing them in the <b>setup()</b> of a looping program will cause them to only have an effect the first time through the loop. The affect of the <b>v1</b>, <b>v2</b>, and <b>v3</b> parameters is determined by the current color mode. The <b>nx</b>, <b>ny</b>, and <b>nz</b> parameters specify the direction the light is facing. For example, setting <b>ny</b> to -1 will cause the geometry to be lit from below (the light is facing directly upward).

<b>Syntax:</b>
directionalLight(v1, v2, v3, nx, ny, nz)

<b>Parameters:</b>
v1
int or float: red or hue value

v2
int or float: green or hue value

v3
int or float: blue or hue value

nx
int or float: direction along the x axis

ny
int or float: direction along the y axis

nz
int or float: direction along the z axis

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="dist"><reference><b>Description:</b>
Calculates the distance between two points.

<b>Syntax:</b>
dist(x1, y1, x2, y2);
dist(x1, y1, z1, x2, y2, z2);

<b>Parameters:</b>
x1
int or float: x-coordinate of the first point

y1
int or float: y-coordinate of the first point

z1
int or float: z-coordinate of the first point

x2
int or float: x-coordinate of the second point

y2
int or float: y-coordinate of the second point

z2
int or float: z-coordinate of the second point

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="ellipseMode"><reference><b>Description:</b>
The origin of the ellipse is modified by the <b>ellipseMode()</b> function. The default configuration is <b>ellipseMode(CENTER)</b>, which specifies the location of the ellipse as the center of the shape. The RADIUS mode is the same, but the width and height parameters to <b>ellipse()</b> specify the radius of the ellipse, rather than the diameter. The CORNER mode draws the shape from the upper-left corner of its bounding box. The CORNERS mode uses the four parameters to <b>ellipse()</b> to set two opposing corners of the ellipse's bounding box. The parameter must be written in "ALL CAPS" because Processing is a case sensitive language.

<b>Syntax:</b>
ellipseMode(MODE)

<b>Parameters:</b>
MODE
Either CENTER, RADIUS, CORNER, or CORNERS.

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="ellipse"><reference><b>Description:</b>
Draws an ellipse (oval) in the display window. An ellipse with an equal <b>width</b> and <b>height</b> is a circle. The first two parameters set the location, the third sets the width, and the fourth sets the height. The origin may be changed with the <b>ellipseMode()</b> function.

<b>Syntax:</b>
ellipse(x, y, width, height)

<b>Parameters:</b>
x
int or float: x-coordinate of the ellipse

y
int or float: y-coordinate of the ellipse

width
int or float: width of the ellipse

height
int or float: height of the ellipse

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="emissive"><reference><b>Description:</b>
Sets the emissive color of the material used for drawing shapes drawn to the screen. Used in combination with <b>ambient()</b>, <b>specular()</b>, and <b>shininess()</b> in setting the materal properties of shapes.

<b>Syntax:</b>
emissive(gray)
emissive(color)
emissive(v1, v2, v3)

<b>Parameters:</b>
gray
int or float: number specifying value between white and black

color
color: any value of the color datatype

v1
int or float: red or hue value

v2
int or float: green or saturation value

v3
int or float: blue or brightness value

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="endCamera"><reference><b>Description:</b>
The <b>beginCamera()</b> and <b>endCamera()</b> functions enable advanced customization of the camera space. Please see the reference for <b>beginCamera()</b> for a description of how the functions are used.

<b>Syntax:</b>
endCamera()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="endRaw"><reference><b>Description:</b>
Complement to <b>beginRaw()</b>; they must always be used together. See the <b>beginRaw()</b> reference for details.

<b>Syntax:</b>
endRaw()

<b>Usage:</b>
Application</reference></element>
 <element pattern="endRecord"><reference><b>Description:</b>
Stops the recording process started by <b>beginRecord()</b> and closes the file.

<b>Syntax:</b>
endRecord()

<b>Usage:</b>
Application</reference></element>
 <element pattern="endShape"><reference><b>Description:</b>
The <b>endShape()</b> function is the companion to <b>beginShape()</b> and may only be called after <b>beginShape()</b>. When <b>endshape()</b> is called, all of image data defined since the previous call to <b>beginShape()</b> is written into the image buffer. The constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end).

<b>Syntax:</b>
endShape()
endShape(MODE)

<b>Parameters:</b>
MODE
Use CLOSE to close the shape

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="exit"><reference><b>Description:</b>
Quits/stops/exits the program. Programs without a <b>draw()</b> function exit automatically after the last line has run, but programs with <b>draw()</b> run continuously until the program is manually stopped or <b>exit()</b> is run. 

Rather than terminating immediately, <b>exit()</b> will cause the sketch to exit after <b>draw()</b> has completed (or after <b>setup()</b> completes if called during the <b>setup()</b> method).

For Java programmers, this is <i>not</i> the same as System.exit(). Further, System.exit() should not be used because closing out an application while draw() is running may cause a crash (particularly with OpenGL).

<b>Syntax:</b>
exit()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="exp"><reference><b>Description:</b>
Returns Euler's number <i>e</i> (2.71828...) raised to the power of the <b>value</b> parameter.

<b>Syntax:</b>
exp(value)

<b>Parameters:</b>
value
int or float: the exponent to raise e to

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="expand"><reference><b>Description:</b>
Increases the size of an array. By default, this function doubles the size of the array, but the optional <b>newSize</b> parameter provides precise control over the increase in size. 

When using an array of objects, the data returned from the function must be cast to the object array's data type. For example: <i>SomeClass[] items = (SomeClass[]) expand(originalArray)</i>.

<b>Syntax:</b>
expand(array)
expand(array, newSize)

<b>Parameters:</b>
array
boolean[], byte[], char[], int[], float[], String[], or an array of objects

newSize
positive int: new size for the array

<b>Returns:</b>
Array (the same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="fill"><reference><b>Description:</b>
Sets the color used to fill shapes. For example, if you run <b>fill(204, 102, 0)</b>, all subsequent shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color depending on the current <b>colorMode()</b> (the default color space is RGB, with each value in the range from 0 to 255). 

When using hexadecimal notation to specify a color, use "#" or "0x" before the values (e.g. #CCFFAA, 0xFFCCFFAA). The # syntax uses six digits to specify a color (the way colors are specified in HTML and CSS). When using the hexadecimal notation starting with "0x", the hexadecimal value must be specified with eight characters; the first two characters define the alpha component and the remainder the red, green, and blue components. 

The value for the parameter "gray" must be less than or equal to the current maximum value as specified by <b>colorMode()</b>. The default maximum value is 255.

To change the color of an image (or a texture), use tint().

<b>Syntax:</b>
fill(gray)
fill(gray, alpha)
fill(value1, value2, value3)
fill(value1, value2, value3, alpha)
fill(color)
fill(color, alpha)
fill(hex)
fill(hex, alpha)

<b>Parameters:</b>
gray
int or float: number specifying value between white and black

alpha
int or float: opacity of the fill

value1
int or float: red or hue value

value2
int or float: green or saturation value

value3
int or float: blue or brightness value

color
color: any value of the color datatype

hex
int: color value in hexadecimal notation (i.e. #FFCC00 or 0xFFFFCC00)

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="filter"><reference><b>Description:</b>
Filters the display window as defined by one of the following modes:THRESHOLD - converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The level must be between 0.0 (black) and 1.0(white). If no level is specified, 0.5 is used.GRAY - converts any colors in the image to grayscale equivalentsINVERT - sets each pixel to its inverse valuePOSTERIZE - limits each channel of the image to the number of colors specified as the level parameterBLUR - executes a Guassian blur with the level parameter specifying the extent of the blurring. If no level parameter is used, the blur is equivalent to Guassian blur of radius 1.OPAQUE - sets the alpha channel to entirely opaque.ERODE - reduces the light areas with the amount defined by the level parameter.DILATE - increases the light areas with the amount defined by the level parameter.

<b>Syntax:</b>
filter(MODE)
filter(MODE, level)

<b>Parameters:</b>
MODE
Either THRESHOLD, GRAY, INVERT, POSTERIZE, BLUR, OPAQUE, ERODE, or DILATE

level
int or float: defines the quality of the filter

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="floor"><reference><b>Description:</b>
Calculates the closest int value that is less than or equal to the value of the parameter.

<b>Syntax:</b>
floor(value)

<b>Parameters:</b>
value
float

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="frameRate"><reference><b>Description:</b>
Specifies the number of frames to be displayed every second. If the processor is not fast enough to maintain the specified rate, it will not be achieved. For example, the function call <b>frameRate(30)</b> will attempt to refresh 30 times a second. It is recommended to set the frame rate within <b>setup()</b>. The default rate is 60 frames per second.

<b>Syntax:</b>
frameRate(fps)

<b>Parameters:</b>
fps
int: number of frames per second

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="frustum"><reference><b>Description:</b>
Sets a perspective matrix defined through the parameters. Works like glFrustum, except it wipes out the current perspective matrix rather than muliplying itself with it.

<b>Syntax:</b>
frustum(left, right, bottom, top, near, far)

<b>Parameters:</b>
left
float: left coordinate of the clipping plane

right
float: right coordinate of the clipping plane

bottom
float: bottom coordinate of the clipping plane

top
float: top component of the clipping plane

near
float: near component of the clipping plane

far
float: far component of the clipping plane

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="get"><reference><b>Description:</b>
Reads the color of any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned. Get the value of one pixel by specifying an x,y coordinate. Get a section of the display window by specifying an additional <b>width</b> and <b>height</b> parameter. If the pixel requested is outside of the image window, black is returned. The numbers returned are scaled according to the current color ranges, but only RGB values are returned by this function. For example, even though you may have drawn a shape with <b>colorMode(HSB)</b>, the numbers returned will be in RGB.

Getting the color of a single pixel with <b>get(x, y)</b> is easy, but not as fast as grabbing the data directly from <b>pixels[]</b>. The equivalent statement to "get(x, y)" using <b>pixels[]</b> is "pixels[y*width+x]". Processing requires calling <b>loadPixels()</b> to load the display window data into the <b>pixels[]</b> array before getting the values.

As of release 0149, this function ignores <b>imageMode()</b>.

<b>Syntax:</b>
get()
get(x, y)
get(x, y, width, height)

<b>Parameters:</b>
x
int: x-coordinate of the pixel

y
int: y-coordinate of the pixel

width
int: width of pixel rectangle to get

height
int: height of pixel rectangle to get

<b>Returns:</b>
color or PImage

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="green"><reference><b>Description:</b>
Extracts the green value from a color, scaled to match current <b>colorMode()</b>. This value is always returned as a  float so be careful not to assign it to an int value.The <b>green()</b> function is easy to use and undestand, but is slower than another technique. To achieve the same results when working in <b>colorMode(RGB, 255)</b>, but with greater speed, use the &gt;&gt; (right shift) operator with a bit mask. For example, the following two lines of code are equivalent:float r1 = green(myColor);float r2 = myColor &gt;&gt; 8 &amp; 0xFF;

<b>Syntax:</b>
green(color)

<b>Parameters:</b>
color
any value of the color datatype

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="hex"><reference><b>Description:</b>
Converts a byte, char, int, or color to a String containing the equivalent hexadecimal notation. For example color(0, 102, 153, 255) will convert to the String "FF006699". This function can help make your geeky debugging sessions much happier.

<b>Syntax:</b>
hex(value)
hex(value, digits)

<b>Parameters:</b>
value
byte, char, int, color: value to convert

digits
int: number of digits to return

<b>Returns:</b>
String

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="hint"><reference><b>Description:</b>
Set various hints and hacks for the renderer. This is used to handle obscure rendering features that cannot be implemented in a consistent manner across renderers. Many options will often graduate to standard features instead of hints over time.

hint(ENABLE_OPENGL_4X_SMOOTH) - Enable 4x anti-aliasing for OpenGL. This can help force anti-aliasing if it has not been enabled by the user. On some graphics cards, this can also be set by the graphics driver's control panel, however not all cards make this available. This hint must be called immediately after the size() command because it resets the renderer, obliterating any settings and anything drawn (and like size(), re-running the code that came before it again). 

hint(DISABLE_OPENGL_2X_SMOOTH) - In Processing 1.0, Processing always enables 2x smoothing when the OpenGL renderer is used. This hint disables the default 2x smoothing and returns the smoothing behavior found in earlier releases, where smooth() and noSmooth() could be used to enable and disable smoothing, though the quality was inferior.

hint(ENABLE_NATIVE_FONTS) - Use the native version fonts when they are installed, rather than the bitmapped version from a .vlw file. This is useful with the default (or JAVA2D) renderer setting, as it will improve font rendering speed. This is not enabled by default, because it can be misleading while testing because the type will look great on your machine (because you have the font installed) but lousy on others' machines if the identical font is unavailable. This option can only be set per-sketch, and must be called before any use of textFont().

hint(DISABLE_DEPTH_TEST) - Disable the zbuffer, allowing you to draw on top of everything at will. When depth testing is disabled, items will be drawn to the screen sequentially, like a painting. This hint is most often used to draw in 3D, then draw in 2D on top of it (for instance, to draw GUI controls in 2D on top of a 3D interface). Starting in release 0149, this will also clear the depth buffer. Restore the default with hint(ENABLE_DEPTH_TEST), but note that with the depth buffer cleared, any 3D drawing that happens later in draw() will ignore existing shapes on the screen.

hint(ENABLE_DEPTH_SORT) - Enable primitive z-sorting of triangles and lines in P3D and OPENGL. This can slow performance considerably, and the algorithm is not yet perfect. Restore the default with hint(DISABLE_DEPTH_SORT).

hint(DISABLE_OPENGL_ERROR_REPORT) - Speeds up the OPENGL renderer setting by not checking for errors while running. Undo with hint(ENABLE_OPENGL_ERROR_REPORT).

As of release 0149, unhint() has been removed in favor of adding additional ENABLE/DISABLE constants to reset the default behavior. This prevents the double negatives, and also reinforces which hints can be enabled or disabled.

<b>Syntax:</b>
hint(item)

<b>Parameters:</b>
item
constant: name of the hint to be enabled or disabled

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="hour"><reference><b>Description:</b>
Processing communicates with the clock on your computer. The <b>hour()</b> function returns the current hour as a value from 0 - 23.

<b>Syntax:</b>
hour()

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="hue"><reference><b>Description:</b>
Extracts the hue value from a color.

<b>Syntax:</b>
hue(color)

<b>Parameters:</b>
color
any value of the color datatype

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="imageMode"><reference><b>Description:</b>
Modifies the location from which images draw. The default mode is <b>imageMode(CORNER)</b>, which specifies the location to be the upper left corner and uses the fourth and fifth parameters of <b>image()</b> to set the image's width and height. The syntax <b>imageMode(CORNERS)</b> uses the second and third parameters of <b>image()</b> to set the location of one corner of the image and uses the fourth and fifth parameters to set the opposite corner. Use <b>imageMode(CENTER)</b> to draw images centered at the given x and y position.

The parameter to <b>imageMode()</b> must be written in ALL CAPS because Processing is a case sensitive language.

<b>Syntax:</b>
imageMode(MODE)

<b>Parameters:</b>
MODE
Either CORNER, CORNERS, or CENTER

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="image"><reference><b>Description:</b>
Displays images to the screen. The images must be in the sketch's "data" directory to load correctly. Select "Add file..." from the "Sketch" menu to add the image. Processing currently works with GIF, JPEG, and Targa images. The color of an image may be modified with the <b>tint()</b> function and if a GIF has transparency, it will maintain its transparency. The <b>img</b> parameter specifies the image to display and the <b>x</b> and <b>y</b> parameters define the location of the image from its upper-left corner. The image is displayed at its original size unless the <b>width</b> and <b>height</b> parameters specify a different size. The <b>imageMode()</b> function changes the way the parameters work. A call to <b>imageMode(CORNERS)</b> will change the width and height parameters to define the x and y values of the opposite corner of the image.

Starting with release 0124, when using the default (JAVA2D) renderer, 
smooth() will also improve image quality of resized images.

<b>Syntax:</b>
image(img, x, y)
image(img, x, y, width, height)

<b>Parameters:</b>
img
PImage: the image to display

x
int or float: x-coordinate of the image

y
int or float: y-coordinate of the image

width
int or float: width to display the image

height
int or float: height to display the image

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="join"><reference><b>Description:</b>
Combines an array of Strings into one String, each separated by the character(s) used for the <b>separator</b> parameter. To join arrays of ints or floats, it's necessary to first convert them to strings using <b>nf()</b> or <b>nfs()</b>.

<b>Syntax:</b>
join(stringArray, separator)

<b>Parameters:</b>
stringArray
array of Strings

separator
char or String: char or String to be placed between each item

<b>Returns:</b>
String

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="keyReleased"><reference><b>Description:</b>
The <b>keyReleased()</b> function is called once every time a key is released. The key that was released will be stored in the <b>key</b> variable. See <b>key</b> and <b>keyReleased</b> for more information.

<b>Syntax:</b>
void keyReleased() { 
  statements
}

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="keyTyped"><reference><b>Description:</b>
The <b>keyTyped()</b> function is called once every time a key is pressed, but action keys such as Ctrl, Shift, and Alt are ignored. Because of how operating systems handle key repeats, holding down a key will cause multiple calls to <b>keyTyped()</b>, the rate is set by the operating system and how each computer is configured.

<b>Syntax:</b>
void keyTyped() { 
  statements
}

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="lerpColor"><reference><b>Description:</b>
Calculates a color or colors between two color at a specific increment. The <b>amt</b> parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc.

<b>Syntax:</b>
lerpColor(c1, c2, amt)

<b>Parameters:</b>
c1
color: interpolate from this color

c2
color: interpolate to this color

amt
float: between 0.0 and 1.0

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="lerp"><reference><b>Description:</b>
Calculates a number between two numbers at a specific increment. The <b>amt</b> parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines.

<b>Syntax:</b>
lerp(value1, value2, amt)

<b>Parameters:</b>
value1
float or int: first value

value2
float or int: second value

amt
float: between 0.0 and 1.0

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="lightFalloff"><reference><b>Description:</b>
Sets the falloff rates for point lights, spot lights, and ambient lights. The parameters are used to determine the falloff with the following equation:d = distance from light position to vertex positionfalloff = 1 / (CONSTANT + d * LINEAR + (d*d) * QUADRATIC)Like <b>fill()</b>, it affects only the elements which are created after it in the code. The default value if <b>LightFalloff(1.0, 0.0, 0.0)</b>. Thinking about an ambient light with a falloff can be tricky. It is used, for example, if you wanted a region of your scene to be lit ambiently one color and another region to be lit ambiently by another color, you would use an ambient light with location and falloff. You can think of it as a point light that doesn't care which direction a surface is facing.

<b>Syntax:</b>
lightFalloff(constant, linear, quadratic)

<b>Parameters:</b>
constant
int or float: constant value for determining falloff

linear
int or float: linear value for determining falloff

quadratic
int or float: quadratic value for determining falloff

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="lightSpecular"><reference><b>Description:</b>
Sets the specular color for lights. Like <b>fill()</b>, it affects only the elements which are created after it in the code. Specular refers to light which bounces off a surface in a perferred direction (rather than bouncing in all directions like a diffuse light) and is used for creating highlights. The specular quality of a light interacts with the specular material qualities set through the <b>specular()</b> and <b>shininess()</b> functions.

<b>Syntax:</b>
lightSpecular(v1, v2, v3)

<b>Parameters:</b>
v1
int or float: red or hue value

v2
int or float: green or hue value

v3
int or float: blue or hue value

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="lights"><reference><b>Description:</b>
Sets the default ambient light, directional light, falloff, and specular values. The defaults are are ambientLight(128, 128, 128) and directionalLight(128, 128, 128, 0, 0, -1), lightFalloff()(1, 0, 0), and lightSpecular(0, 0, 0). Lights need to be included in the draw() to remain persistent in a looping program. Placing them in the setup() of a looping program will cause them to only have an effect the first time through the loop.

<b>Syntax:</b>
lights()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="line"><reference><b>Description:</b>
Draws a line (a direct path between two points) to the screen. The version of <b>line()</b> with four parameters draws the line in 2D.  To color a line, use the <b>stroke()</b> function. A line cannot be filled, therefore the <b>fill()</b> method will not affect the color of a line. 2D lines are drawn with a width of one pixel by default, but this can be changed with the <b>strokeWeight()</b> function. The version with six parameters allows the line to be placed anywhere within XYZ space. Drawing this shape in 3D using the <b>z</b> parameter requires the P3D or OPENGL parameter in combination with size as shown in the above example.

<b>Syntax:</b>
line(x1, y1, x2, y2)
line(x1, y1, z1, x2, y2, z2)

<b>Parameters:</b>
x1
int or float: x-coordinate of the first point

y1
int or float: y-coordinate of the first point

z1
int or float: z-coordinate of the first point

x2
int or float: x-coordinate of the second point

y2
int or float: y-coordinate of the second point

z2
int or float: z-coordinate of the second point

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="link"><reference><b>Description:</b>
Links to a webpage either in the same window or in a new window. The complete URL must be specified.

<b>Syntax:</b>
link(url)
link(url, target)

<b>Parameters:</b>
url
String: complete url as a String in quotes

target
String: name of the window to load the URL as a string in quotes

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="loadBytes"><reference><b>Description:</b>
Reads the contents of a file or url and places it in a byte array. If a file is specified, it must be located in the sketch's "data" directory/folder.

The filename parameter can also be a URL to a file found online. For security reasons, a Processing sketch found online can only download files from the same server from which it came. Getting around this restriction requires a signed applet.

<b>Syntax:</b>
loadBytes(filename);

<b>Parameters:</b>
filename
String: name of a file in the data folder or a URL.

<b>Returns:</b>
byte[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="loadFont"><reference><b>Description:</b>
Loads a font into a variable of type <b>PFont</b>. To load correctly, fonts must be located in the data directory of the current sketch. To create a font to use with Processing, select "Create Font..." from the Tools menu. This will create a font in the format Processing requires and also adds it to the current sketch's data directory. 

Like loadImage() and other methods that load data, the loadFont() command should not be used inside draw(), because it will slow down the sketch considerably, as the font will be re-loaded from the disk (or network) on each frame.

For most renderers, Processing displays fonts using the .vlw font format, which uses images for each letter, rather than defining them through vector data. When hint(ENABLE_NATIVE_FONTS) is used with the JAVA2D renderer, the native version of a font will be used if it is installed on the user's machine. 

Using createFont() (instead of loadFont) enables vector data to be used with the JAVA2D (default) renderer setting. This can be helpful when many font sizes are needed, or when using any renderer based on JAVA2D, such as the PDF library.

<b>Syntax:</b>
loadFont(fontname)

<b>Parameters:</b>
fontname
string: name of the font to load

<b>Returns:</b>
PFont

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="loadImage"><reference><b>Description:</b>
Loads an image into a variable of type <b>PImage</b>. Four types of images ( <b>.gif</b>, <b>.jpg</b>, <b>.tga</b>, <b>.png</b>) images may be loaded. To load correctly, images must be located in the data directory of the current sketch. In most cases, load all images in <b>setup()</b> to preload them at the start of the program. Loading images inside <b>draw()</b> will reduce the speed of a program. 

The <b>filename</b> parameter can also be a URL to a file found online. For security reasons, a Processing sketch found online can only download files from the same server from which it came. Getting around this restriction requires a signed applet.

The <b>extension</b> parameter is used to determine the image type in cases where the image filename does not end with a proper extension. Specify the extension as the second parameter to <b>loadImage()</b>, as shown in the third example on this page.

If an image is not loaded successfully, the <b>null</b> value is returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check whether the value returned from <b>loadImage()</b> is null.

Depending on the type of error, a <b>PImage</b> object may still be returned, but the width and height of the image will be set to -1. This happens if bad image data is returned or cannot be decoded properly. Sometimes this happens with image URLs that produce a 403 error or that redirect to a password prompt, because <b>loadImage()</b> will attempt to interpret the HTML as image data.

<b>Syntax:</b>
loadImage(filename)
loadImage(filename, extension)

<b>Parameters:</b>
filename
String: name of file to load, can be .gif, .jpg, .tga, or a handful of other image types depending on your platform.

extension
String: the type of image to load, for example "png", "gif", "jpg"

<b>Returns:</b>
PImage or null

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="loadPixels"><reference><b>Description:</b>
Loads the pixel data for the display window into the <b>pixels[]</b> array. This function must always be called before reading from or writing to <b>pixels[]</b>.

Certain renderers may or may not seem to require <b>loadPixels()</b> or <b>updatePixels()</b>. However, the rule is that any time you want to manipulate the <b>pixels[]</b> array, you must first call <b>loadPixels()</b>, and after changes have been made, call <b>updatePixels()</b>. Even if the renderer may not seem to use this function in the current Processing release, this will always be subject to change.

<b>Syntax:</b>
loadPixels()

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="loadShape"><reference><b>Description:</b>
Loads vector shapes into a variable of type <b>PShape</b>. Currently, only SVG files may be loaded. To load correctly, the file must be located in the data directory of the current sketch. In most cases, <b>loadShape()</b> should be used inside <b>setup()</b> because loading shapes inside <b>draw()</b> will reduce the speed of a sketch. 

The <b>filename</b> parameter can also be a URL to a file found online. For security reasons, a Processing sketch found online can only download files from the same server from which it came. Getting around this restriction requires a signed applet.

If a shape is not loaded successfully, the <b>null</b> value is returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check whether the value returned from <b>loadShape()</b> is null.

<b>Syntax:</b>
loadShape(filename)

<b>Parameters:</b>
filename
String: name of file to load

<b>Returns:</b>
PShape or null

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="loadStrings"><reference><b>Description:</b>
Reads the contents of a file or url and creates a String array of its individual lines. If a file is specified, it must be located in the sketch's "data" directory/folder.

The filename parameter can also be a URL to a file found online. For security reasons, a Processing sketch found online can only download files from the same server from which it came. Getting around this restriction requires a signed applet.

If the file is not available or an error occurs, <b>null</b> will be returned and an error message will be printed to the console. The error message does not halt the program, however the null value may cause a NullPointerException if your code does not check whether the value returned is null.

Starting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.

<b>Syntax:</b>
loadStrings(filename)

<b>Parameters:</b>
filename
String: name of the file or url to load

<b>Returns:</b>
String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="log"><reference><b>Description:</b>
Calculates the natural logarithm (the base-<i>e</i> logarithm) of a number. This function expects the values greater than 0.0.

<b>Syntax:</b>
log(value)

<b>Parameters:</b>
value
int or float: number must be greater then 0.0

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="loop"><reference><b>Description:</b>
Causes Processing to continuously execute the code within <b>draw()</b>. If <b>noLoop()</b> is called, the code in <b>draw()</b> stops executing.

<b>Syntax:</b>
loop()
redraw()
draw()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="mag"><reference><b>Description:</b>
Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no "start" position, the magnitude of a vector can be thought of as the distance from coordinate (0,0) to its (x,y) value. Therefore, mag() is a shortcut for writing "dist(0, 0, x, y)".

<b>Syntax:</b>
mag(a, b)
mag(a, b, c)

<b>Parameters:</b>
a
float or int: first value

b
float or int: second value

c
float or int: third value

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="map"><reference><b>Description:</b>
Re-maps a number from one range to another. In the example above, 
the number '25' is converted from a value in the range 0..100 into
a value that ranges from the left edge (0) to the right edge (width) 
of the screen.

Numbers outside the range are not clamped to 0 and 1, because
out-of-range values are often intentional and useful.

<b>Syntax:</b>
map(value, low1, high1, low2, high2)

<b>Parameters:</b>
value
float: The incoming value to be converted

low1
float: Lower bound of the value's current range

high1
float: Upper bound of the value's current range

low2
float: Lower bound of the value's target range

high2
float: Upper bound of the value's target range

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="matchAll"><reference><b>Description:</b>
The matchAll() function is used to apply a regular expression to a piece of text, and return a list of matching groups (elements found inside parentheses) as a two-dimensional String array. No matches will return null. If no groups are specified in the regexp, but the sequence matches, a two dimensional array is still returned, but the second dimension is only of length one.

To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, a 2D array is returned. 
If there are groups (specified by sets of parentheses) in the regexp, then the contents of each will be returned in the array.  
Assuming, a loop with counter variable i, element [i][0] of a regexp match returns the entire matching string, and the match groups start at element [i][1] (the first group is [i][1], the second [i][2], and so on).

The syntax can be found in the reference for Java's Pattern class. For regular expression syntax, read the Java Tutorial on the topic. 


<b>Syntax:</b>
matchAll(str, regexp)

<b>Parameters:</b>
str
the String to search inside

regexp
the regexp to be used for matching

<b>Returns:</b>
String[][]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="match"><reference><b>Description:</b>
The match() function is used to apply a regular expression to a piece of text, and return matching groups (elements found inside parentheses) as a String array. No match will return null. If no groups are specified in the regexp, but the sequence matches, an array of length one (with the matched text as the first element of the array) will be returned.

To use the function, first check to see if the result is null. If the result is null, then the sequence did not match. If the sequence did match, an array is returned. 
If there are groups (specified by sets of parentheses) in the regexp, then the contents of each will be returned in the array.  
Element [0] of a regexp match returns the entire matching string, and the match groups start at element [1] (the first group is [1], the second [2], and so on).

The syntax can be found in the reference for Java's Pattern class. For regular expression syntax, read the Java Tutorial on the topic. 


<b>Syntax:</b>
match(str, regexp)

<b>Parameters:</b>
str
the String to be searched

regexp
the regexp to be used for matching

<b>Returns:</b>
String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="max"><reference><b>Description:</b>
Determines the largest value in a sequence of numbers.

<b>Syntax:</b>
max(value1, value2)
max(value1, value2, value 3)
max(array)

<b>Parameters:</b>
value1
int or float

value2
int or float

value3
int or float

array
int or float array

<b>Returns:</b>
int or float (depending on the inputs)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="millis"><reference><b>Description:</b>
Returns the number of milliseconds (thousandths of a second) since starting an applet. This information is often used for timing animation sequences.

<b>Syntax:</b>
millis()

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="min"><reference><b>Description:</b>
Determines the smallest value in a sequence of numbers.

<b>Syntax:</b>
min(value1, value2)
min(value1, value2, value 3)
min(array)

<b>Parameters:</b>
value1
int or float

value2
int or float

value3
int or float

array
int or float array

<b>Returns:</b>
int or float (depending on the inputs)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="minute"><reference><b>Description:</b>
Processing communicates with the clock on your computer. The <b>minute()</b> function returns the current minute as a value from 0 - 59.

<b>Syntax:</b>
minute()

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="modelX"><reference><b>Description:</b>
Returns the three-dimensional X, Y, Z position in model space. This returns the X value for a given coordinate based on the current set of transformations (scale, rotate, translate, etc.) The X value can be used to place an object in space relative to the location of the original point once the transformations are no longer in use. 

In the example, the modelX(), modelY(), and modelZ() methods record the location of a box in space after being placed using a series of translate and rotate commands. After popMatrix() is called, those transformations no longer apply, but the (x, y, z) coordinate returned by the model functions is used to place another box in the same location.

<b>Syntax:</b>
modelX(x, y, z)

<b>Parameters:</b>
x
int or float: 3D x coordinate to be mapped

y
int or float: 3D y coordinate to be mapped

z
int or float: 3D z coordinate to be mapped

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="modelY"><reference><b>Description:</b>
Returns the three-dimensional X, Y, Z position in model space. This returns the X value for a given coordinate based on the current set of transformations (scale, rotate, translate, etc.) The X value can be used to place an object in space relative to the location of the original point once the transformations are no longer in use. 

In the example, the modelX(), modelY(), and modelZ() methods record the location of a box in space after being placed using a series of translate and rotate commands. After popMatrix() is called, those transformations no longer apply, but the (x, y, z) coordinate returned by the model functions is used to place another box in the same location.

<b>Syntax:</b>
modelY(x, y, z)

<b>Parameters:</b>
x
int or float: 3D x coordinate to be mapped

y
int or float: 3D y coordinate to be mapped

z
int or float: 3D z coordinate to be mapped

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="modelZ"><reference><b>Description:</b>
Returns the three-dimensional X, Y, Z position in model space. This returns the X value for a given coordinate based on the current set of transformations (scale, rotate, translate, etc.) The X value can be used to place an object in space relative to the location of the original point once the transformations are no longer in use. 

In the example, the modelX(), modelY(), and modelZ() methods record the location of a box in space after being placed using a series of translate and rotate commands. After popMatrix() is called, those transformations no longer apply, but the (x, y, z) coordinate returned by the model functions is used to place another box in the same location.

<b>Syntax:</b>
modelZ(x, y, z)

<b>Parameters:</b>
x
int or float: 3D x coordinate to be mapped

y
int or float: 3D y coordinate to be mapped

z
int or float: 3D z coordinate to be mapped

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="month"><reference><b>Description:</b>
Processing communicates with the clock on your computer. The <b>month()</b> function returns the current month as a value from 1 - 12.

<b>Syntax:</b>
month()

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="mouseClicked"><reference><b>Description:</b>
The <b>mouseClicked()</b> function is called once after a mouse button has been pressed and then released.

<b>Syntax:</b>
mouseClicked()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="mouseDragged"><reference><b>Description:</b>
The <b>mouseDragged()</b> function is called once every time the mouse moves and a mouse button is pressed.

<b>Syntax:</b>
void mouseDragged() {
  statements
}

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="mouseMoved"><reference><b>Description:</b>
The <b>mouseMoved()</b> function is called every time the mouse moves and a mouse button is not pressed.

<b>Syntax:</b>
void mouseMoved() {
  statements
}

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="mouseReleased"><reference><b>Description:</b>
The <b>mouseReleased()</b> function is called every time a mouse button is released.

<b>Syntax:</b>
void mouseReleased() {
  statements
}

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="nf"><reference><b>Description:</b>
Utility function for formatting numbers into strings. There are two versions, one for formatting floats and one for formatting ints. The values for the <b>digits</b>, <b>left</b>, and <b>right</b> parameters should always be positive integers.As shown in the above example, <b>nf()</b> is used to add zeros to the left and/or right of a number. This is typically for aligning a list of numbers. To <i>remove</i> digits from a floating-point number, use the <b>int()</b>, <b>ceil()</b>, <b>floor()</b>, or <b>round()</b> functions.

<b>Syntax:</b>
nf(intValue, digits)
nf(floatValue, left, right)

<b>Parameters:</b>
intValue
int or int[]: the number(s) to format

digits
int: number of digits to pad with zeroes

floatValue
float or float[]: the number(s) to format

left
int: number of digits to the left of the decimal point

right
int: number of digits to the right of the decimal point

<b>Returns:</b>
String or String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="nfc"><reference><b>Description:</b>
Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are two versions, one for formatting ints and one for formatting an array of ints. The value for the <b>digits</b> parameter should always be a positive integer.

<b>Syntax:</b>
nfc(intValue)
nfc(floatValue, right)

<b>Parameters:</b>
intValue
int or int[]: the number(s) to format

floatValue
float or float[]: the number(s) to format

right
int: number of digits to the right of the decimal point

<b>Returns:</b>
String or String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="nfp"><reference><b>Description:</b>
Utility function for formatting numbers into strings. Similar to <b>nf()</b> but puts a "+" in front of positive numbers and a "-" in front of negative numbers. There are two versions, one for formatting floats and one for formatting ints. The values for the <b>digits</b>, <b>left</b>, and <b>right</b> parameters should always be positive integers.

<b>Syntax:</b>
nfp(intValue, digits)
nfp(floatValue, left, right)

<b>Parameters:</b>
intValue
int or int[]: the number(s) to format

digits
int: number of digits to pad with zeroes

floatValue
float or float[]: the number(s) to format

left
int: number of digits to the left of the decimal point

right
int: number of digits to the right of the decimal point

<b>Returns:</b>
String or String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="nfs"><reference><b>Description:</b>
Utility function for formatting numbers into strings. Similar to <b>nf()</b> but leaves a blank space in front of positive numbers so they align with negative numbers in spite of the minus symbol. There are two versions, one for formatting floats and one for formatting ints. The values for the <b>digits</b>, <b>left</b>, and <b>right</b> parameters should always be positive integers.

<b>Syntax:</b>
nfs(intValue, digits)
nfs(floatValue, left, right)

<b>Parameters:</b>
intValue
int or int[]: the number(s) to format

digits
int: number of digits to pad with zeroes

floatValue
float or float[]: the number(s) to format

left
int: number of digits to the left of the decimal point

right
int: number of digits to the right of the decimal point

<b>Returns:</b>
String or String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noCursor"><reference><b>Description:</b>
Hides the cursor from view. Will not work when running the program in a web browser.

<b>Syntax:</b>
noCursor()

<b>Returns:</b>
None

<b>Usage:</b>
Application</reference></element>
 <element pattern="noFill"><reference><b>Description:</b>
Disables filling geometry. If both <b>noStroke()</b> and <b>noFill()</b> are called, nothing will be drawn to the screen.

<b>Syntax:</b>
noFill()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noLights"><reference><b>Description:</b>
Disable all lighting. Lighting is turned off by default and enabled with the lights() method. This function can be used to disable lighting so that 2D geometry (which does not require lighting) can be drawn after a set of lighted 3D geometry.

<b>Syntax:</b>
noLights()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noLoop"><reference><b>Description:</b>
Stops Processing from continuously executing the code within <b>draw()</b>. If <b>loop()</b> is called, the code in <b>draw()</b> begin to run continuously again. If using <b>noLoop()</b> in <b>setup()</b>, it should be the last line inside the block.

When <b>noLoop()</b> is used, it's not possible to manipulate or access the screen inside event handling functions such as <b>mousePressed()</b> or <b>keyPressed()</b>. Instead, use those functions to call <b>redraw()</b> or <b>loop()</b>, which will run <b>draw()</b>, which can update the screen properly. This means that when noLoop() has been called, no drawing can happen, and functions like saveFrame() or loadPixels() may not be used.

Note that if the sketch is resized, <b>redraw()</b> will be called to update the sketch, even after <b>noLoop()</b> has been specified. Otherwise, the sketch would enter an odd state until <b>loop()</b> was called.

<b>Syntax:</b>
noLoop()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noSmooth"><reference><b>Description:</b>
Draws all geometry with jagged (aliased) edges.

<b>Syntax:</b>
noSmooth()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noStroke"><reference><b>Description:</b>
Disables drawing the stroke (outline). If both <b>noStroke()</b> and <b>noFill()</b> are called, nothing will be drawn to the screen.

<b>Syntax:</b>
noStroke()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noTint"><reference><b>Description:</b>
Removes the current fill value for displaying images and reverts to displaying images with their original hues.

<b>Syntax:</b>
noTint()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noiseDetail"><reference><b>Description:</b>
Adjusts the character and level of detail produced by the Perlin noise function. Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overal intensity of the noise, whereas higher octaves create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the 1st octave. This falloff amount can be changed by adding an additional function parameter. Eg. a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave. Any value between 0.0 and 1.0 is valid, however note that values greater than 0.5 might result in greater than 1.0 values returned by <b>noise()</b>.By changing these parameters, the signal created by the <b>noise()</b> function can be adapted to fit very specific needs and characteristics.

<b>Syntax:</b>
noiseDetail(octaves)
noiseDetail(octaves, falloff)

<b>Parameters:</b>
octaves
int: number of octaves to be used by the noise() function

falloff
float: falloff factor for each octave

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noiseSeed"><reference><b>Description:</b>
Sets the seed value for <b>noise()</b>. By default, <b>noise()</b> produces different results each time the program is run. Set the <b>value</b> parameter to a constant to return the same pseudo-random numbers each time the software is run.

<b>Syntax:</b>
noiseSeed(x)

<b>Parameters:</b>
value
int

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="noise"><reference><b>Description:</b>
Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more natural ordered, harmonic succession of numbers compared to the standard <b>random()</b> function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc. The main difference to the <b>random()</b> function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program). The resulting value will always be between 0.0 and 1.0. Processing can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The noise value can be animated by moving through the noise space as demonstrated in the example above. The 2nd and 3rd dimension can also be interpreted as time.The actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, perlin noise is computed over several octaves which are added together for the final result. Another way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using <b>noise()</b> within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use.

<b>Syntax:</b>
noise(x)
noise(x, y)
noise(x, y, z)

<b>Parameters:</b>
x
float: x coordinate in noise space

y
float: y coordinate in noise space

z
float: z coordinate in noise space

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="norm"><reference><b>Description:</b>
Normalizes a number from another range into a value between 0 and 1. 

Identical to map(value, low, high, 0, 1);

Numbers outside the range are not clamped to 0 and 1, because
out-of-range values are often intentional and useful.

<b>Syntax:</b>
norm(value, low, high)

<b>Parameters:</b>
value
float: The incoming value to be converted

low
float: Lower bound of the value's current range

high
float: Upper bound of the value's current range

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="normal"><reference><b>Description:</b>
Sets the current normal vector. This is for drawing three dimensional shapes and surfaces and specifies a vector perpendicular to the surface of the shape which determines how lighting affects it. Processing attempts to automatically assign normals to shapes, but since that's imperfect, this is a better option when you want more control. This function is identical to glNormal3f() in OpenGL.

<b>Syntax:</b>
normal(nx, ny, nz)

<b>Parameters:</b>
nx
float: x direction

ny
float: y direction

nz
float: z direction

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="open"><reference><b>Description:</b>
Attempts to open an application or file using your platform's launcher. The <b>file</b> parameter is a String specifying the file name and location. The location parameter must be a full path name, or the name of an executable in the system's PATH. In most cases, using a full path is the best option, rather than relying on the system PATH. Be sure to make the file executable before attempting to open it (chmod +x). 

The <b>args</b> parameter is a String or String array which is passed to the command line. If you have multiple parameters, e.g. an application and a document, or a command with multiple switches, use the version that takes a String array, and place each individual item in a separate element. 

If args is a String (not an array), then it can only be a single file or application with no parameters. It's not the same as executing that String using a shell. For instance, open("jikes -help") will not work properly.

This function behaves differently on each platform. On Windows, the parameters are sent to the Windows shell via "cmd /c". On Mac OS X, the "open" command is used (type "man open" in Terminal.app for documentation). On Linux, it first tries gnome-open, then kde-open, but if neither are available, it sends the command to the shell without any alterations. 

For users familiar with Java, this is not quite the same as Runtime.exec(), because the launcher command is prepended. Instead, the <b>exec(String[])</b> function is a shortcut for Runtime.getRuntime.exec(String[]).

<b>Syntax:</b>
open(file)
open(args)

<b>Parameters:</b>
file
String: name of the file

args
String[]: list of commands passed to the command line

<b>Returns:</b>
None or Process

<b>Usage:</b>
Application</reference></element>
 <element pattern="ortho"><reference><b>Description:</b>
Sets an orthographic projection and defines a parallel clipping volume. All objects with the same dimension appear the same size, regardless of whether they are near or far from the camera. The parameters to this function specify the clipping volume where left and right are the minimum and maximum x values, top and bottom are the minimum and maximum y values, and near and far are the minimum and maximum z values. If no parameters are given, the default is used: ortho(0, width, 0, height, -10, 10).

<b>Syntax:</b>
ortho()
ortho(left, right, bottom, top, near, far)

<b>Parameters:</b>
left
float: left plane of the clipping volume

right
float: right plane of the clipping volume

botton
float: bottom plane of the clipping volume

top
float: top plane of the clipping volume

near
float: maximum distance from the origin to the viewer

far
float: maximum distance from the origin away from the viewer

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="param"><reference><b>Description:</b>
Reads the value of a param. Values are always read as a String so if you want them to be an integer or other datatype they must be converted. The <b>param()</b> function will only work in a web browser. The function should be called inside <b>setup()</b>, otherwise the applet may not yet be initialized and connected to its parent web browser.

<b>Syntax:</b>
param(s)

<b>Parameters:</b>
s
String: name of the param to read

<b>Returns:</b>
String

<b>Usage:</b>
Web</reference></element>
 <element pattern="perspective"><reference><b>Description:</b>
Sets a perspective projection applying foreshortening, making distant objects appear smaller than closer ones. The parameters define a viewing volume with the shape of truncated pyramid. Objects near to the front of the volume appear their actual size, while farther objects appear smaller. This projection simulates the perspective of the world more accurately than orthographic projection. The version of perspective without parameters sets the default perspective and the version with four parameters allows the programmer to set the area precisely. The default values are: perspective(PI/3.0, width/height, cameraZ/10.0, cameraZ*10.0) where cameraZ is ((height/2.0) / tan(PI*60.0/360.0));

<b>Syntax:</b>
perspective()
perspective(fov, aspect, zNear, zFar)

<b>Parameters:</b>
fov
float: field-of-view angle (in radians) for vertical direction

aspect
float: ratio of width to height

zNear
float: z-position of nearest clipping plane

zFar
float: z-position of nearest farthest plane

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="pointLight"><reference><b>Description:</b>
Adds a point light. Lights need to be included in the <b>draw()</b> to remain persistent in a looping program. Placing them in the <b>setup()</b> of a looping program will cause them to only have an effect the first time through the loop. The affect of the <b>v1</b>, <b>v2</b>, and <b>v3</b> parameters is determined by the current color mode. The <b>x</b>, <b>y</b>, and <b>z</b> parameters set the position of the light.

<b>Syntax:</b>
pointLight(v1, v2, v3, x, y, z)

<b>Parameters:</b>
v1
int or float: red or hue value

v2
int or float: green or hue value

v3
int or float: blue or hue value

x
int or float: x coordinate of the light

y
int or float: y coordinate of the light

z
int or float: z coordinate of the light

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="point"><reference><b>Description:</b>
Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point, and the optional third value is the depth value. Drawing this shape in 3D using the <b>z</b> parameter requires the P3D or OPENGL parameter in combination with size as shown in the above example. 

Due to what appears to be a bug in Apple's Java implementation, the point() and set() methods are extremely slow in some circumstances when used with the default renderer. Using P2D or P3D will fix the problem. Grouping many calls to point() or set() together can also help. (Bug 1094)

<b>Syntax:</b>
point(x, y)
point(x, y, z)

<b>Parameters:</b>
x
int or float: x-coordinate of the point

y
int or float: y-coordinate of the point

z
int or float: z-coordinate of the point

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="popMatrix"><reference><b>Description:</b>
Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The <b>pushMatrix()</b> function saves the current coordinate system to the stack and <b>popMatrix()</b> restores the prior coordinate system. <b>pushMatrix()</b> and <b>popMatrix()</b> are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.

<b>Syntax:</b>
popMatrix()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="pow"><reference><b>Description:</b>
Facilitates exponential expressions. The <b>pow()</b> function is an efficient way of multiplying numbers by themselves (or their reciprocal) in large quantities. For example, <b>pow(3, 5)</b> is equivalent to the expression 3*3*3*3*3 and <b>pow(3, -5)</b> is equivalent to 1 / 3*3*3*3*3.

<b>Syntax:</b>
pow(num, exponent)

<b>Parameters:</b>
num
int or float: base of the exponential expression

exponent
int or float: power of which to raise the base

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="printCamera"><reference><b>Description:</b>
Prints the current camera matrix to the text window.

<b>Syntax:</b>
printCamera()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="printMatrix"><reference><b>Description:</b>
Prints the current matrix to the text window.

<b>Syntax:</b>
printMatrix()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="printProjection"><reference><b>Description:</b>
Prints the current projection matrix to the text window.

<b>Syntax:</b>
printProjection()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="print"><reference><b>Description:</b>
Writes to the console area of the Processing environment. This is often helpful for looking at the data a program is producing. The companion function <b>println()</b> works like <b>print()</b>, but creates a new line of text for each call to the function. Individual elements can be separated with quotes ("") and joined with the addition operator (+). 

Beginning with release 0125, to print the contents of an array, use println(). 
There's no sensible way to do a <b>print()</b> of an array, 
because there are too many possibilities for how to separate the data 
(spaces, commas, etc). 
If you want to print an array as a single line, use <b>join()</b>. 
With join(), you can choose any delimiter you like and <b>print()</b> the result. 

Using <b>print()</b> on an object will output <b>null</b>, a memory location 
that may look like "@10be08," or the result of the <b>toString()</b> method from the object that's being printed.
Advanced users who want more useful output when calling print() on their own classes can add a toString() method to the class that returns a String.

<b>Syntax:</b>
print(data)

<b>Parameters:</b>
data
boolean, byte, char, color, int, float, String, Object

<b>Usage:</b>
IDE</reference></element>
 <element pattern="println"><reference><b>Description:</b>
Writes to the text area of the Processing environment's console. This is often helpful for looking at the data a program is producing. Each call to this function creates a new line of output. Individual elements can be separated with quotes ("") and joined with the string concatenation operator (+). See <b>print()</b> for more about what to expect in the output.

Calling <b>println()</b> on an array (by itself) will write the contents of the array to the console. This is often helpful for looking at the data a program is producing. A new line is put between each element of the array. This function can only print one dimensional arrays. For arrays with higher dimensions, the result will be closer to that of <b>print()</b>.

<b>Syntax:</b>
println(data)

<b>Parameters:</b>
data
boolean, byte, char, color, int, float, String, Object, boolean[], byte[], char[], color[], int[], float[], String[], Object[]

<b>Returns:</b>
None

<b>Usage:</b>
IDE</reference></element>
 <element pattern="pushMatrix"><reference><b>Description:</b>
Pushes the current transformation matrix onto the matrix stack. Understanding <b>pushMatrix()</b> and <b>popMatrix()</b> requires understanding the concept of a matrix stack. The <b>pushMatrix()</b> function saves the current coordinate system to the stack and <b>popMatrix()</b> restores the prior coordinate system. <b>pushMatrix()</b> and <b>popMatrix()</b> are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.

<b>Syntax:</b>
pushMatrix()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="quad"><reference><b>Description:</b>
A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise around the defined shape.

<b>Syntax:</b>
quad(x1, y1, x2, y2, x3, y3, x4, y4)

<b>Parameters:</b>
x1
int or float: x-coordinate of the first corner

y1
int or float: y-coordinate of the first corner

x2
int or float: x-coordinate of the second corner

y2
int or float: y-coordinate of the second corner

x3
int or float: x-coordinate of the third corner

y3
int or float: y-coordinate of the third corner

x4
int or float: x-coordinate of the fourth corner

y4
int or float: y-coordinate of the fourth corner

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="radians"><reference><b>Description:</b>
Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90&amp;deg; = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.

<b>Syntax:</b>
radians(angle)

<b>Parameters:</b>
angle
int or float

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="randomSeed"><reference><b>Description:</b>
Sets the seed value for <b>random()</b>. By default, <b>random()</b> produces different results each time the program is run. Set the <b>value</b> parameter to a constant to return the same pseudo-random numbers each time the software is run.

<b>Syntax:</b>
randomSeed(value);

<b>Parameters:</b>
value
int

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="random"><reference><b>Description:</b>
Generates random numbers. Each time the <b>random()</b> function is called, it returns an unexpected value within the specified range. If one parameter is passed to the function it will return a <b>float</b> between zero and the value of the <b>high</b> parameter. The function call <b>random(5)</b> returns values between 0 and 5 (starting at zero, up to but not including 5). If two parameters are passed, it will return a <b>float</b> with a value between the the parameters. The function call <b>random(-5, 10.2)</b> returns values starting at -5 up to (but not including) 10.2. To convert a floating-point random number to an integer, use the <b>int()</b> function.

<b>Syntax:</b>
random(high);
random(low, high);

<b>Parameters:</b>
high
int or float

low
int or float

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="rectMode"><reference><b>Description:</b>
Modifies the location from which rectangles draw. The default mode is <b>rectMode(CORNER)</b>, which specifies the location to be the upper left corner of the shape and uses the third and fourth parameters of <b>rect()</b> to specify the width and height. The syntax <b>rectMode(CORNERS)</b> uses the first and second parameters of <b>rect()</b> to set the location of one corner and uses the third and fourth parameters to set the opposite corner. The syntax <b>rectMode(CENTER)</b> draws the image from its center point and uses the third and forth parameters of <b>rect()</b> to specify the image's width and height. The syntax <b>rectMode(RADIUS)</b> draws the image from its center point and uses the third and forth parameters of <b>rect()</b> to specify half of the image's width and height. The parameter must be written in ALL CAPS because Processing is a case sensitive language. Note: In version 125, the mode named CENTER_RADIUS was shortened to RADIUS.

<b>Syntax:</b>
rectMode(MODE)

<b>Parameters:</b>
MODE
Either CORNER, CORNERS, CENTER, or RADIUS

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="rect"><reference><b>Description:</b>
Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. The first two parameters set the location, the third sets the width, and the fourth sets the height. The origin is changed with the <b>rectMode()</b> function.

<b>Syntax:</b>
rect(x, y, width, height)

<b>Parameters:</b>
x
int or float: x-coordinate of the rectangle

y
int or float: y-coordinate of the rectangle

width
int or float: width of the rectangle

height
int or float: height of the rectangle

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="red"><reference><b>Description:</b>
Extracts the red value from a color, scaled to match current <b>colorMode()</b>. This value is always returned as a  float so be careful not to assign it to an int value.The red() function is easy to use and undestand, but is slower than another technique. To achieve the same results when working in <b>colorMode(RGB, 255)</b>, but with greater speed, use the &gt;&gt; (right shift) operator with a bit mask. For example, the following two lines of code are equivalent:float r1 = red(myColor);float r2 = myColor &gt;&gt; 16 &amp; 0xFF;

<b>Syntax:</b>
red(color)

<b>Parameters:</b>
color
any value of the color datatype

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="redraw"><reference><b>Description:</b>
Executes the code within <b>draw()</b> one time. This functions allows the program to update the display window only when necessary, for example when an event registered by <b>mousePressed()</b> or <b>keyPressed()</b> occurs. 

In structuring a program, it only makes sense to call redraw() within events such as <b>mousePressed()</b>. This is because <b>redraw()</b> does not run <b>draw()</b> immediately (it only sets a flag that indicates an update is needed). 

Calling <b>redraw()</b> within <b>draw()</b> has no effect because <b>draw()</b> is continuously called anyway.

<b>Syntax:</b>
redraw()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="requestImage"><reference><b>Description:</b>
This function load images on a separate thread so that your sketch does not freeze while images load during <b>setup()</b>. While the image is loading, its width and height will be 0. If an error occurs while loading the image, its width and height will be set to -1. You'll know when the image has loaded properly because its width and height will be greater than 0. Asynchronous image loading (particularly when downloading from a server) can dramatically improve performance.
The <b>extension</b> parameter is used to determine the image type in cases where the image filename does not end with a proper extension. Specify the extension as the second parameter to <b>requestImage()</b>.

<b>Syntax:</b>
requestImage(filename)
requestImage(filename, extension)

<b>Parameters:</b>
filename
String: name of file to load, can be .gif, .jpg, .tga, or a handful of other image types depending on your platform

extension
String: the type of image to load, for example "png", "gif", "jpg"

<b>Returns:</b>
PImage or null

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="resetMatrix"><reference><b>Description:</b>
Replaces the current matrix with the identity matrix. The equivalent function in OpenGL is glLoadIdentity().

<b>Syntax:</b>
resetMatrix()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="reverse"><reference><b>Description:</b>
Reverses the order of an array.

<b>Syntax:</b>
reverse(array)

<b>Parameters:</b>
array
booleans[], bytes[], chars[], ints[], floats[], or Strings[]

<b>Returns:</b>
Array (the same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="rotateX"><reference><b>Description:</b>
Rotates a shape around the x-axis the amount specified by the <b>angle</b> parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the <b>radians()</b> function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a counterclockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>rotateX(PI/2)</b> and then <b>rotateX(PI/2)</b> is the same as <b>rotateX(PI)</b>. If <b>rotateX()</b> is called within the <b>draw()</b>, the transformation is reset when the loop begins again. This function requires passing P3D or OPENGL into the size() parameter as shown in the example above.

<b>Syntax:</b>
rotateX(angle)

<b>Parameters:</b>
angle
float: angle of rotation specified in radians

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="rotateY"><reference><b>Description:</b>
Rotates a shape around the y-axis the amount specified by the <b>angle</b> parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the <b>radians()</b> function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a counterclockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>rotateY(PI/2)</b> and then <b>rotateY(PI/2)</b> is the same as <b>rotateY(PI)</b>. If <b>rotateY()</b> is called within the <b>draw()</b>, the transformation is reset when the loop begins again. This function requires passing P3D or OPENGL into the size() parameter as shown in the example above.

<b>Syntax:</b>
rotateY(angle)

<b>Parameters:</b>
angle
float: angle of rotation specified in radians

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="rotateZ"><reference><b>Description:</b>
Rotates a shape around the z-axis the amount specified by the <b>angle</b> parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the <b>radians()</b> function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a counterclockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>rotateZ(PI/2)</b> and then <b>rotateZ(PI/2)</b> is the same as <b>rotateZ(PI)</b>. If <b>rotateZ()</b> is called within the <b>draw()</b>, the transformation is reset when the loop begins again. This function requires passing P3D or OPENGL into the size() parameter as shown in the example above.

<b>Syntax:</b>
rotateZ(angle)

<b>Parameters:</b>
angle
float: angle of rotation specified in radians

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="rotate"><reference><b>Description:</b>
Rotates a shape the amount specified by the <b>angle</b> parameter. Angles should be specified in radians (values from 0 to TWO_PI) or converted to radians with the <b>radians()</b> function. 

Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>rotate(HALF_PI)</b> and then <b>rotate(HALF_PI)</b> is the same as <b>rotate(PI)</b>. All tranformations are reset when <b>draw()</b> begins again. 

Technically, <b>rotate()</b> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <b>pushMatrix()</b> and <b>popMatrix()</b>.

<b>Syntax:</b>
rotate(angle);

<b>Parameters:</b>
angle
float: angle of rotation specified in radians

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="round"><reference><b>Description:</b>
Calculates the integer closest to the <b>value</b> parameter. For example, <b>round(9.2)</b> returns the value 9.

<b>Syntax:</b>
round(value)

<b>Parameters:</b>
value
float

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="saturation"><reference><b>Description:</b>
Extracts the saturation value from a color.

<b>Syntax:</b>
saturation(color)

<b>Parameters:</b>
color
any value of the color datatype

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="saveBytes"><reference><b>Description:</b>
Opposite of <b>loadBytes()</b>, will write an entire array of bytes to a file. The data is saved in binary format. This file is saved to the sketch's folder, which is opened by selecting "Show sketch folder" from the "Sketch" menu.

It is not possible to use saveXxxxx() methods inside a web browser unless the sketch is signed. To save a file back to a server, see the save to web example.

<b>Syntax:</b>
saveBytes(filename, bytes)

<b>Parameters:</b>
filename
name of file to write to

bytes
array of bytes to be written

<b>Returns:</b>
None

<b>Usage:</b>
Application</reference></element>
 <element pattern="saveFrame"><reference><b>Description:</b>
Saves a numbered sequence of images, one image each time the function is run. To save an image that is identical to the display window, run the function at the end of <b>draw()</b> or within mouse and key events such as <b>mousePressed()</b> and <b>keyPressed()</b>. If <b>saveFrame()</b> is called without parameters, it will save the files as screen-0000.tif, screen-0001.tif, etc. It is possible to specify the name of the sequence with the <b>filename</b> parameter and make the choice of saving TIFF, TARGA, PNG, or JPEG files with the <b>ext</b> parameter. These image sequences can be loaded into programs such as Apple's QuickTime software and made into movies. These files are saved to the sketch's folder, which may be opened by selecting "Show sketch folder" from the "Sketch" menu. 

It is not possible to use saveXxxxx() methods inside a web browser unless the sketch is signed. To save a file back to a server, see the save to web example.

All images saved from the main drawing window will be opaque. To save images without a background, use <b>createGraphics()</b>.

<b>Syntax:</b>
saveFrame()
saveFrame("filename-####.ext")

<b>Parameters:</b>
filename
String: any sequence of letters and numbers

ext
either "tif", "tga", "jpg", "png"

<b>Returns:</b>
None

<b>Usage:</b>
Application</reference></element>
 <element pattern="saveStream"><reference><b>Description:</b>
Save the contents of a stream to a file in the sketch folder. This is basically <b>saveBytes(blah, loadBytes())</b>, but done more efficiently (and with less confusing syntax).
   
When using the <b>targetFile</b> parameter, it writes to a <b>File</b> object for greater control over the file location. (Note that unlike other api methods, this will not automatically compress or uncompress gzip files.)

<b>Syntax:</b>
saveStream(targetFilename, sourceLocation)
saveStream(targetFile, sourceLocation)

<b>Parameters:</b>
targetFilename
String: name of the file to write to

sourceLocation
String: location to save the file

targetFile
File: the file to write to

<b>Returns:</b>
None

<b>Usage:</b>
Application</reference></element>
 <element pattern="saveStrings"><reference><b>Description:</b>
Writes an array of strings to a file, one line per string. This file is saved to the sketch's folder, which is opened by selecting "Show sketch folder" from the "Sketch" menu.

It is not possible to use saveXxxxx() methods inside a web browser unless the sketch is signed. To save a file back to a server, see the save to web example.

Starting with Processing release 0134, all files loaded and saved by the Processing API use UTF-8 encoding. In previous releases, the default encoding for your platform was used, which causes problems when files are moved to other platforms.

<b>Syntax:</b>
saveStrings(filename, strings)

<b>Parameters:</b>
filename
filename for output

strings
string array to be written

<b>Usage:</b>
Application</reference></element>
 <element pattern="save"><reference><b>Description:</b>
Saves an image from the display window. Images are saved in TIFF, TARGA, JPEG, and PNG format depending on the extension within the <b>filename</b> parameter. For example, "image.tif" will have a TIFF image and "image.png" will save a PNG image. If no extension is included in the filename, the image will save in TIFF format and <b>.tif</b> will be added to the name. These files are saved to the sketch's folder, which may be opened by selecting "Show sketch folder" from the "Sketch" menu. It is not possible to use <b>save()</b> while running the program in a web browser.

All images saved from the main drawing window will be opaque. To save images without a background, use <b>createGraphics()</b>.

<b>Syntax:</b>
save(filename)

<b>Parameters:</b>
filename
String: any sequence of letters and numbers

<b>Returns:</b>
None

<b>Usage:</b>
Application</reference></element>
 <element pattern="scale"><reference><b>Description:</b>
Increases or decreases the size of a shape by expanding and contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call <b>scale(2.0)</b> increases the dimension of a shape by 200%. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling <b>scale(2.0)</b> and then <b>scale(1.5)</b> is the same as <b>scale(3.0)</b>. If <b>scale()</b> is called within <b>draw()</b>, the transformation is reset when the loop begins again. Using this fuction with the <b>z</b> parameter requires passing P3D or OPENGL into the size() parameter as shown in the example above. This function can be further controlled by <b>pushMatrix()</b> and <b>popMatrix()</b>.

<b>Syntax:</b>
scale(size);
scale(x, y);
scale(x, y, z);

<b>Parameters:</b>
size
float: percentage to scale the object

x
float: percentage to scale the object in the x-axis

y
float: percentage to scale the object in the y-axis

z
float: percentage to scale the object in the z-axis

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="screenX"><reference><b>Description:</b>
Takes a three-dimensional X, Y, Z position and returns the X value for where it will appear on a (two-dimensional) screen.

<b>Syntax:</b>
screenX(x, y, z)

<b>Parameters:</b>
x
int or float: 3D x coordinate to be mapped

y
int or float: 3D y coordinate to be mapped

z
int or float: 3D z coordinate to be mapped

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="screenY"><reference><b>Description:</b>
Takes a three-dimensional X, Y, Z position and returns the Y value for where it will appear on a (two-dimensional) screen.

<b>Syntax:</b>
screenY(x, y, z)

<b>Parameters:</b>
x
int or float: 3D x coordinate to be mapped

y
int or float: 3D y coordinate to be mapped

z
int or float: 3D z coordinate to be mapped

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="screenZ"><reference><b>Description:</b>
Takes a three-dimensional X, Y, Z position and returns the Z value for where it will appear on a (two-dimensional) screen.

<b>Syntax:</b>
screenZ(x, y, z)

<b>Parameters:</b>
x
int or float: 3D x coordinate to be mapped

y
int or float: 3D y coordinate to be mapped

z
int or float: 3D z coordinate to be mapped

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="second"><reference><b>Description:</b>
Processing communicates with the clock on your computer. The <b>second()</b> function returns the current second as a value from 0 - 59.

<b>Syntax:</b>
second

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="selectFolder"><reference><b>Description:</b>
Opens a platform-specific file chooser dialog to select a folder for input. This function returns the full path to the selected folder as a <b>String</b>, or <b>null</b> if no selection.

<b>Syntax:</b>
selectFolder()
selectFolder(prompt)

<b>Parameters:</b>
prompt
String: message you want the user to see in the file chooser

<b>Returns:</b>
String or null

<b>Usage:</b>
Application</reference></element>
 <element pattern="selectInput"><reference><b>Description:</b>
Opens a platform-specific file chooser dialog to select a file for input. This function returns the full path to the selected file as a <b>String</b>, or <b>null</b> if no selection.

<b>Syntax:</b>
selectInput()
selectInput(prompt)

<b>Parameters:</b>
prompt
String: message you want the user to see in the file chooser

<b>Returns:</b>
String or null

<b>Usage:</b>
Application</reference></element>
 <element pattern="selectOutput"><reference><b>Description:</b>
Open a platform-specific file save dialog to create of select a file for output. This function returns the full path to the selected file as a <b>String</b>, or <b>null</b> if no selection. If you select an existing file, that file will be replaced. Alternatively, you can navigate to a folder and create a new file to write to.

<b>Syntax:</b>
selectOutput()
selectOutput(prompt)

<b>Parameters:</b>
prompt
String: message you want the user to see in the file chooser

<b>Returns:</b>
String or null

<b>Usage:</b>
Application</reference></element>
 <element pattern="set"><reference><b>Description:</b>
Changes the color of any pixel or writes an image directly into the display window. The <b>x</b> and <b>y</b> parameters specify the pixel to change and the <b>color</b> parameter specifies the color value. The color parameter is affected by the current color mode (the default is RGB values from 0 to 255). When setting an image, the x and y parameters define the coordinates for the upper-left corner of the image.

Setting the color of a single pixel with <b>set(x, y)</b> is easy, but not as fast as putting the data directly into <b>pixels[]</b>. The equivalent statement to "set(x, y, #000000)" using <b>pixels[]</b> is "pixels[y*width+x] = #000000". You must call <b>loadPixels()</b> to load the display window data into the <b>pixels[]</b> array before setting the values and calling <b>updatePixels()</b> to update the window with any changes.

As of release 1.0, this function ignores <b>imageMode()</b>.

Due to what appears to be a bug in Apple's Java implementation, the point() and set() methods are extremely slow in some circumstances when used with the default renderer. Using P2D or P3D will fix the problem. Grouping many calls to point() or set() together can also help. (Bug 1094)

<b>Syntax:</b>
set(x, y, color)
set(x, y, image)

<b>Parameters:</b>
x
int: x-coordinate of the pixel

y
int: y-coordinate of the pixel

color
color: any value of the color datatype

image
PImage: any valid variable of type PImage

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="shapeMode"><reference><b>Description:</b>
Modifies the location from which shapes draw. The default mode is <b>shapeMode(CORNER)</b>, which specifies the location to be the upper left corner of the shape and uses the third and fourth parameters of <b>shape()</b> to specify the width and height. The syntax <b>shapeMode(CORNERS)</b> uses the first and second parameters of <b>shape()</b> to set the location of one corner and uses the third and fourth parameters to set the opposite corner. The syntax <b>shapeMode(CENTER)</b> draws the shape from its center point and uses the third and forth parameters of <b>shape()</b> to specify the width and height. The parameter must be written in "ALL CAPS" because Processing is a case sensitive language.

<b>Syntax:</b>
shapeMode(MODE)

<b>Parameters:</b>
MODE
Either CORNER, CORNERS, CENTER

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="shape"><reference><b>Description:</b>
Displays shapes to the screen. The shapes must be in the sketch's "data" directory to load correctly. Select "Add file..." from the "Sketch" menu to add the shape. Processing currently works with SVG shapes only. The <b>sh</b> parameter specifies the shape to display and the <b>x</b> and <b>y</b> parameters define the location of the shape from its upper-left corner. The shape is displayed at its original size unless the <b>width</b> and <b>height</b> parameters specify a different size. The <b>shapeMode()</b> function changes the way the parameters work. A call to <b>shapeMode(CORNERS)</b>, for example, will change the width and height parameters to define the x and y values of the opposite corner of the shape.

Note complex shapes may draw awkwardly with P2D, P3D, and OPENGL. Those renderers do not yet support shapes that have holes or complicated breaks.

<b>Syntax:</b>
shape(sh)
shape(sh, x, y)
shape(sh, x, y, width, height)

<b>Parameters:</b>
sh
PShape: the shape to display

x
int or float: x-coordinate of the shape

y
int or float: y-coordinate of the shape

width
int or float: width to display the shape

height
int or float: height to display the shape

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="shearX"><reference><b>Description:</b>
Shears a shape around the x-axis the amount specified by the <b>angle</b> parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the <b>radians()</b> function. Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>shearX(PI/2)</b> and then <b>shearX(PI/2)</b> is the same as <b>shearX(PI)</b>. If <b>shearX()</b> is called within the <b>draw()</b>, the transformation is reset when the loop begins again. This function works in P2D or JAVA2D mode as shown in the example above.

Technically, <b>shearX()</b> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <b>pushMatrix()</b> and <b>popMatrix()</b> functions.

<b>Syntax:</b>
shearX(angle);

<b>Parameters:</b>
angle
float: angle of shear specified in radians

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="shearY"><reference><b>Description:</b>
Shears a shape around the y-axis the amount specified by the <b>angle</b> parameter. Angles should be specified in radians (values from 0 to PI*2) or converted to radians with the <b>radians()</b> function. Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>shearY(PI/2)</b> and then <b>shearY(PI/2)</b> is the same as <b>shearY(PI)</b>. If <b>shearY()</b> is called within the <b>draw()</b>, the transformation is reset when the loop begins again. This function works in P2D or JAVA2D mode as shown in the example above.

Technically, <b>shearY()</b> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <b>pushMatrix()</b> and <b>popMatrix()</b> functions.

<b>Syntax:</b>
shearY(angle);

<b>Parameters:</b>
angle
float: angle of shear specified in radians

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="shininess"><reference><b>Description:</b>
Sets the amount of gloss in the surface of shapes. Used in combination with <b>ambient()</b>, <b>specular()</b>, and <b>emissive()</b> in setting the materal properties of shapes.

<b>Syntax:</b>
shininess(shine)

<b>Parameters:</b>
shine
float: degree of shininess

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="shorten"><reference><b>Description:</b>
Decreases an array by one element and returns the shortened array.

When using an array of objects, the data returned from the function must be cast to the object array's data type. For example: <i>SomeClass[] items = (SomeClass[]) shorten(originalArray)</i>.

<b>Syntax:</b>
shorten(array)

<b>Parameters:</b>
array
boolean[], byte[], char[], int[], float[], or String[], or an array of objects

<b>Returns:</b>
Array (the same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="sin"><reference><b>Description:</b>
Calculates the sine of an angle. This function expects the values of the <b>angle</b> parameter to be provided in radians (values from 0 to 6.28). Values are returned in the range -1 to 1.

<b>Syntax:</b>
sin(rad)

<b>Parameters:</b>
rad
float: an angle in radians

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="size"><reference><b>Description:</b>
Defines the dimension of the display window in units of pixels. The <b>size()</b> function <i>must</i> be the first line in <b>setup()</b>. If <b>size()</b> is not called, the default size of the window is 100x100 pixels. The system variables <b>width</b> and <b>height</b> are set by the parameters passed to the <b>size()</b> function. 
Do not use variables as the parameters to <b>size()</b> command, because it will cause problems when exporting your sketch. When variables are used, the dimensions of your sketch cannot be determined during export. Instead, employ numeric values in the <b>size()</b> statement, and then use the built-in <b>width</b> and <b>height</b> variables inside your program when you need the dimensions of the display window are needed. 
The MODE parameters selects which rendering engine to use. For example, if you will be drawing 3D shapes for the web use <b>P3D</b>, if you want to export a program with OpenGL graphics acceleration use <b>OPENGL</b>. A brief description of the four primary renderers follows:<b>JAVA2D</b> - The default renderer. This renderer supports two dimensional drawing and provides higher image quality in overall, but generally slower than P2D.<b>P2D</b> (Processing 2D) - Fast 2D renderer, best used with pixel data, but not as accurate as the JAVA2D default. <b>P3D</b> (Processing 3D) - Fast 3D renderer for the web. Sacrifices rendering quality for quick 3D drawing.<b>OPENGL</b> - High speed 3D graphics renderer that makes use of OpenGL-compatible graphics hardware is available. Keep in mind that OpenGL is not magic pixie dust that makes any sketch faster (though it's close), so other rendering options may produce better results depending on the nature of your code. Also note that with OpenGL, all graphics are smoothed: the smooth() and noSmooth() commands are ignored. <b>PDF</b> - The PDF renderer draws 2D graphics directly to an Acrobat PDF file. This produces excellent results when you need vector shapes for high resolution output or printing. You must first use Import Library &amp;rarr; PDF to make use of the library. More information can be found in the PDF library reference.
If you're manipulating pixels (using methods like get() or blend(), or manipulating the pixels[] array), P2D and P3D will usually be faster than the default (JAVA2D) setting, and often the OPENGL setting as well. Similarly, when handling lots of images, or doing video playback, P2D and P3D will tend to be faster.
The P2D, P3D, and OPENGL renderers do not support strokeCap() or strokeJoin(), which can lead to ugly results when using strokeWeight(). (Bug 955) 
For the most elegant and accurate results when drawing in 2D, particularly when using smooth(), use the JAVA2D renderer setting. It may be slower than the others, but is the most complete, which is why it's the default. Advanced users will want to switch to other renderers as they learn the tradeoffs. 
Rendering graphics requires tradeoffs between speed, accuracy, and general usefulness of the available features. None of the renderers are perfect, so we provide multiple options so that you can decide what tradeoffs make the most sense for your project. We'd prefer all of them to have perfect visual accuracy, high performance, and support a wide range of features, but that's simply not possible. 
The maximum width and height is limited by your operating system, and is usually the width and height of your actual screen. On some machines it may simply be the number of pixels on your current screen, meaning that a screen that's 800x600 could support size(1600, 300), since it's the same number of pixels. This varies widely so you'll have to try different rendering modes and sizes until you get what you're looking for. If you need something larger, use <b>createGraphics</b> to create a non-visible drawing surface.

Again, the size() method must be the first line of the code (or first item inside setup). Any code that appears before the size() command may run more than once, which can lead to confusing results.

<b>Syntax:</b>
size(width, height)
size(width, height, MODE)

<b>Parameters:</b>
width
int: width of the display window in units of pixels

height
int: height of the display window in units of pixels

MODE
Either P2D, P3D, JAVA2D, or OPENGL

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="smooth"><reference><b>Description:</b>
Draws all geometry with smooth (anti-aliased) edges. This will slow down the frame rate of the application, but will enhance the visual refinement. 

Note that smooth() will also improve image quality of resized images, and noSmooth() will disable image (and font) smoothing altogether.

Starting in Processing 1.0, smoothing is always enabled with the OPENGL renderer setting. The smooth() and noSmooth() methods are ignored. See the hint() reference for information on disabling smoothing with OpenGL.

In the current release, smoothing is imperfect with the P2D and P3D renderers. In some situations, drawing with smooth() will create small hairlines inside filled shapes or inaccuracies with shape depth can cause odd visual artifacts at the edges of shapes.

<b>Syntax:</b>
smooth()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="sort"><reference><b>Description:</b>
Sorts an array of numbers from smallest to largest and puts an array of words in alphabetical order. The original array is not modified, a re-ordered array is returned. The <b>count</b> parameter states the number of elements to sort. For example if there are 12 elements in an array and if count is the value 5, only the first five elements on the array will be sorted. As of release 0126, the alphabetical ordering is case insensitive.

<b>Syntax:</b>
sort(dataArray)
sort(dataArray, count)

<b>Parameters:</b>
dataArray
String[], int[], or float[]

count
int

<b>Returns:</b>
Array (same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="specular"><reference><b>Description:</b>
Sets the specular color of the materials used for shapes drawn to the screen, which sets the color of hightlights. Specular refers to light which bounces off a surface in a perferred direction (rather than bouncing in all directions like a diffuse light). Used in combination with <b>emissive()</b>, <b>ambient()</b>, and <b>shininess()</b> in setting the materal properties of shapes.

<b>Syntax:</b>
specular(gray)
specular(gray, alpha)
specular(color)
specular(v1, v2, v3)
specular(v1, v2, v3, alpha)

<b>Parameters:</b>
gray
int or float: number specifying value between white and black

alpha
int or float: opacity

color
color: any value of the color datatype

v1
int or float: red or hue value

v2
int or float: green or saturation value

v3
int or float: blue or brightness value

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="sphereDetail"><reference><b>Description:</b>
Controls the detail used to render a sphere by adjusting the number of vertices of the sphere mesh. The default resolution is 30, which creates a fairly detailed sphere definition with vertices every 360/30 = 12 degrees. If you're going to render a great number of spheres per frame, it is advised to reduce the level of detail using this function. The setting stays active until <b>sphereDetail()</b> is called again with a new parameter and so should <i>not</i> be called prior to every <b>sphere()</b> statement, unless you wish to render spheres with different settings, e.g. using less detail for smaller spheres or ones further away from the camera. To control the detail of the horizontal and vertical resolution independently, use the version of the functions with two parameters.

<b>Syntax:</b>
sphereDetail(res);
sphereDetail(ures, vres);

<b>Parameters:</b>
res
int: number of segments (minimum of 3) used per full circle revolution

ures
int: number of segments used longitudinally per full circle revolution

vres
int: number of segments used latitudinally from top to bottom

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="sphere"><reference><b>Description:</b>
A sphere is a hollow ball made from tessellated triangles.

<b>Syntax:</b>
sphere(radius)

<b>Parameters:</b>
radius
int or float: the radius of the sphere

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="splice"><reference><b>Description:</b>
Inserts a value or array of values into an existing array. The first two parameters must be of the same datatype. The <b>array</b> parameter defines the array which will be modified and the second parameter defines the data which will be inserted.

When using an array of objects, the data returned from the function must be cast to the object array's data type. For example: <i>SomeClass[] items = (SomeClass[]) splice(array1, array2, index)</i>.

<b>Syntax:</b>
splice(array, value, index)
splice(array, array2, index)

<b>Parameters:</b>
array
boolean[], byte[], char[], int[], float[], String[], or an array of objects

value
boolean, byte, char, int, float, String, or other Object: value to be spliced in

array2
boolean[], byte[], char[], int[], float[], String[], or an array of objects to be spliced in

index
int: position in the array from which to insert data

<b>Returns:</b>
Array (the same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="splitTokens"><reference><b>Description:</b>
The splitTokens() function splits a String at one or many character "tokens." The <b>tokens</b> parameter specifies the character or characters to be used as a boundary.

If no <b>tokens</b> character is specified, any whitespace character is used to split. Whitespace characters include tab (\t), line feed (\n), carriage return (\r), form feed (\f), and space. To convert a String to an array of integers or floats, use the datatype conversion functions <b>int()</b> and <b>float()</b> to convert the array of Strings.

<b>Syntax:</b>
splitTokens(str)
splitTokens(str, tokens)

<b>Parameters:</b>
str
the string to be split

tokens
list of individual characters that will be used as separators

<b>Returns:</b>
String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="split"><reference><b>Description:</b>
The split() function breaks a string into pieces using a character or string as the divider. The <b>delim</b> parameter specifies the character or characters that mark the boundaries between each piece. A String[] array is returned that contains each of the pieces.

If the result is a set of numbers, you can convert the String[] array to to a float[] or int[] array using the datatype conversion functions <b>int()</b> and <b>float()</b> (see example above).
 
The <b>splitTokens()</b> function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence.

<b>Syntax:</b>
split(str, delim)

<b>Parameters:</b>
str
the String to be split

delim
the character or String used to separate the data

<b>Returns:</b>
String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="spotLight"><reference><b>Description:</b>
Adds a spot light. Lights need to be included in the <b>draw()</b> to remain persistent in a looping program. Placing them in the <b>setup()</b> of a looping program will cause them to only have an effect the first time through the loop. The affect of the <b>v1</b>, <b>v2</b>, and <b>v3</b> parameters is determined by the current color mode. The <b>x</b>, <b>y</b>, and <b>z</b> parameters specify the position of the light and <b>nx</b>, <b>ny</b>, <b>nz</b> specify the direction or light. The <b>angle</b> parameter affects angle of the spotlight cone.

<b>Syntax:</b>
spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration)

<b>Parameters:</b>
v1
int or float: red or hue value

v2
int or float: green or hue value

v3
int or float: blue or hue value

x
int or float: x coordinate of the light

y
int or float: y coordinate of the light

z
int or float: z coordinate of the light

nx
int or float: direction along the x axis

ny
int or float: direction along the y axis

nz
int or float: direction along the z axis

angle
float: angle of the spotlight cone

concentration
float: exponent determining the center bias of the cone

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="sq"><reference><b>Description:</b>
Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1.

<b>Syntax:</b>
sq(value)

<b>Parameters:</b>
value
int or float

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="sqrt"><reference><b>Description:</b>
Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root <b>s</b> of number <b>a</b> is such that <b>s*s = a</b>. It is the opposite of squaring.

<b>Syntax:</b>
sqrt(value)

<b>Parameters:</b>
value
int or float: non-negative number

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="status"><reference><b>Description:</b>
Displays message in the browser's status area. This is the text area in the lower left corner of the browser. The <b>status()</b> function will only work when the Processing program is running in a web browser.

<b>Syntax:</b>
status(text)

<b>Parameters:</b>
text
String: any valid String

<b>Returns:</b>
None

<b>Usage:</b>
Web</reference></element>
 <element pattern="str"><reference><b>Description:</b>
Returns the string representation of primitive datatypes and arrays. For example the integer 3 will return the string "3", the float -12.6 will return the string "-12.6", and a boolean value true will return the string "true".

<b>Syntax:</b>
str(data)

<b>Parameters:</b>
data
boolean, byte, char, float, int, boolean[], byte[], char[], float[], int[]

<b>Returns:</b>
String or String[]

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="strokeCap"><reference><b>Description:</b>
Sets the style for rendering line endings. These ends are either squared, extended, or rounded and specified with the corresponding parameters SQUARE, PROJECT, and ROUND. The default cap is ROUND. 

This function is not available with the P2D, P3D, or OPENGL renderers (see bug report). More information about the renderers can be found in the <b>size()</b> reference.

<b>Syntax:</b>
strokeCap(MODE)

<b>Parameters:</b>
MODE
Either SQUARE, PROJECT, or ROUND

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="strokeJoin"><reference><b>Description:</b>
Sets the style of the joints which connect line segments. These joints are either mitered, beveled, or rounded and specified with the corresponding parameters MITER, BEVEL, and ROUND. The default joint is MITER. 

This function is not available with the P2D, P3D, or OPENGL renderers (see bug report). More information about the renderers can be found in the <b>size()</b> reference.

<b>Syntax:</b>
strokeJoin(MODE)

<b>Parameters:</b>
MODE
Either MITER, BEVEL, or ROUND

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="strokeWeight"><reference><b>Description:</b>
Sets the width of the stroke used for lines, points, and the border around shapes. All widths are set in units of pixels. 

With P2D, P3D, and OPENGL, series of connected lines (such as the stroke around a polygon, triangle, or ellipse) produce unattractive results when strokeWeight is set (Bug 955).

When used with P3D, strokeWeight does not interpolate the Z-coordinates of the lines, which means that when rotated, these flat lines will disappear (Bug 956). The OPENGL renderer setting does not share this problem because it always draws lines perpendicular to the screen.

When using OPENGL, the minimum and maximum values for strokeWeight() are controlled by the graphics card and the operating system's OpenGL implementation. For instance, the weight may not go higher than 10.

<b>Syntax:</b>
strokeWeight(width)

<b>Parameters:</b>
width
int or float: the weight (in pixels) of the stroke

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="stroke"><reference><b>Description:</b>
Sets the color used to draw lines and borders around shapes. This color is either specified in terms of the RGB or HSB color depending on the current <b>colorMode()</b> (the default color space is RGB, with each value in the range from 0 to 255). 

When using hexadecimal notation to specify a color, use "#" or "0x" before the values (e.g. #CCFFAA, 0xFFCCFFAA). The # syntax uses six digits to specify a color (the way colors are specified in HTML and CSS). When using the hexadecimal notation starting with "0x", the hexadecimal value must be specified with eight characters; the first two characters define the alpha component and the remainder the red, green, and blue components. 

The value for the parameter "gray" must be less than or equal to the current maximum value as specified by <b>colorMode()</b>. The default maximum value is 255.

<b>Syntax:</b>
stroke(gray)
stroke(gray, alpha)
stroke(value1, value2, value3)
stroke(value1, value2, value3, alpha)
stroke(color)
stroke(color, alpha)
stroke(hex)
stroke(hex, alpha)

<b>Parameters:</b>
gray
int or float: specifies a value between white and black

alpha
int or float: opacity of the stroke

value1
int or float: red or hue value (depending on the current color mode)

value2
int or float: green or saturation value (depending on the current color mode)

value3
int or float: blue or brightness value (depending on the current color mode)

color
color: any value of the color datatype

hex
int: color value in hexadecimal notation (i.e. #FFCC00 or 0xFFFFCC00)

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="subset"><reference><b>Description:</b>
Extracts an array of elements from an existing array. The <b>array</b> parameter defines the array from which the elements will be copied and the <b>offset</b> and <b>length</b> parameters determine which elements to extract. If no <b>length</b> is given, elements will be extracted from the <b>offset</b> to the end of the array. When specifying the <b>offset</b> remember the first array element is 0. This function does not change the source array.

When using an array of objects, the data returned from the function must be cast to the object array's data type. For example: <i>SomeClass[] items = (SomeClass[]) subset(originalArray, 0, 4)</i>.

<b>Syntax:</b>
subset(array, offset)
subset(array, offset, length)

<b>Parameters:</b>
array
boolean[], byte[], char[], int[], float[], String[], or an array of objects

offset
int: position to begin

length
int: number of values to extract

<b>Returns:</b>
Array (the same datatype as the input)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="switch"><reference><b>Description:</b>
Works like an <b>if else</b> structure, but <b>switch()</b> is more convenient when you need to select between three or more alternatives. Program controls jumps to the case with the same value as the expression. All remaining statements in the switch are executed unless redirected by a <b>break</b>. Only primitive datatypes which can convert to an integer (byte, char, and int) may be used as the <b>expression</b> parameter. The default is optional.

<b>Syntax:</b>
switch(expression)
{
  case label: 
     statements          
  case label:          // Optional
     statements        // "
  default:             // "
     statements        // "
}

<b>Parameters:</b>
expression
byte, char, or int

label
byte, char, or int

statements
one or more statements to be executed

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="tan"><reference><b>Description:</b>
Calculates the ratio of the sine and cosine of an angle. This function expects the values of the <b>angle</b> parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range <b>infinity</b> to <b>-infinity</b>.

<b>Syntax:</b>
tan(angle)

<b>Parameters:</b>
angle
float: an angle in radians

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textAlign"><reference><b>Description:</b>
Sets the current alignment for drawing text. The parameters LEFT, CENTER, and RIGHT set the display characteristics of the letters in relation to the values for the <b>x</b> and <b>y</b> parameters of the <b>text()</b> function.

In Processing 0125 and later, an optional second parameter can be used to vertically align the text. BASELINE is the default, and the vertical alignment will be reset to BASELINE if the second parameter is not used. The TOP and CENTER parameters are straightforward. The BOTTOM parameter offsets the line based on the current <b>textDescent()</b>. For multiple lines, the final line will be aligned to the bottom, with the previous lines appearing above it.

When using <b>text()</b> with width and height parameters, BASELINE is ignored, and treated as TOP. (Otherwise, text would by default draw outside the box, since BASELINE is the default setting. BASELINE is not a useful drawing mode for text drawn in a rectangle.)

The vertical alignment is based on the value of <b>textAscent()</b>, which many fonts do not specify correctly. It may be necessary to use a hack and offset by a few pixels by hand so that the offset looks correct. To do this as less of a hack, use some percentage of <b>textAscent()</b> or <b>textDescent()</b> so that the hack works even if you change the size of the font.

<b>Syntax:</b>
textAlign(ALIGN)
textAlign(ALIGN, YALIGN)

<b>Parameters:</b>
ALIGN
Horizontal alignment, either LEFT, CENTER, or RIGHT

YALIGN
Vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textAscent"><reference><b>Description:</b>
Returns ascent of the current font at its current size. This information is useful for determining the height of the font above the baseline. For example, adding the <b>textAscent()</b> and <b>textDescent()</b> values will give you the total height of the line.

<b>Syntax:</b>
textAscent()

<b>Returns:</b>
Float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textDescent"><reference><b>Description:</b>
Returns descent of the current font at its current size. This information is useful for determining the height of the font below the baseline. For example, adding the <b>textAscent()</b> and <b>textDescent()</b> values will give you the total height of the line.

<b>Syntax:</b>
textDescent()

<b>Returns:</b>
Float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textFont"><reference><b>Description:</b>
Sets the current font. The font must be loaded with <b>loadFont()</b> before it can be used. This font will be used in all subsequent calls to the <b>text()</b> function. If no <b>size</b> parameter is input, the font will appear at its original size (the size it was created at with the "Create Font..." tool) until it is changed with <b>textSize()</b>.  Because fonts are usually bitmaped, you should create fonts at the sizes that will be used most commonly. Using textFont() without the size parameter will result in the cleanest-looking text.  With the default (JAVA2D) and PDF renderers, it's also possible to enable the use of native fonts via the command hint(ENABLE_NATIVE_FONTS). This will produce vector text in JAVA2D sketches and PDF output in cases where the vector data is available: when the font is still installed, or the font is created via the createFont() function (rather than the Create Font tool).

<b>Syntax:</b>
textFont(font)
textFont(font, size)

<b>Parameters:</b>
font
PFont: any variable of the type PFont

size
int or float: the size of the letters in units of pixels

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textLeading"><reference><b>Description:</b>
Sets the spacing between lines of text in units of pixels. This setting will be used in all subsequent calls to the <b>text()</b> function.

<b>Syntax:</b>
textLeading(dist)

<b>Parameters:</b>
dist
int or float: the size in pixels for spacing between lines

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textMode"><reference><b>Description:</b>
Sets the way text draws to the screen. In the default configuration (the MODEL mode), it's possible to rotate, scale, and place letters in two and three dimensional space. 

Changing to SCREEN mode draws letters directly to the front of the window and greatly increases rendering quality and speed when used with the P2D and P3D renderers. textMode(SCREEN) with OPENGL and JAVA2D (the default) renderers will generally be slower, though pixel accurate with P2D and P3D. With textMode(SCREEN), the letters draw at the actual size of the font (in pixels) and therefore calls to <b>textSize()</b> will not affect the size of the letters. To create a font at the size you desire, use the "Create font..." option in the Tools menu, or use the createFont() function. When using textMode(SCREEN), any z-coordinate passed to a text() command will be ignored, because your computer screen is...flat!

The SHAPE mode draws text using the the glyph outlines of individual characters rather than as textures. This mode is only only supported with the PDF and OPENGL renderer settings. With the PDF renderer, you must call textMode(SHAPE) before any other drawing occurs. If the outlines are not available, then <b>textMode(SHAPE)</b> will be ignored and <b>textMode(MODEL)</b> will be used instead.

The textMode(SHAPE) option in OPENGL mode can be combined with beginRaw() to write vector-accurate text to 2D and 3D output files, for instance DXF or PDF. textMode(SHAPE) is not currently optimized for OPENGL, so if recording shape data, use textMode(MODEL) until you're ready to capture the geometry with beginRaw().

<b>Syntax:</b>
textMode(MODE)

<b>Parameters:</b>
MODE
either MODEL, SCREEN, or SHAPE

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textSize"><reference><b>Description:</b>
Sets the current font size. This size will be used in all subsequent calls to the <b>text()</b> function. Font size is measured in units of pixels.

<b>Syntax:</b>
textSize(size)

<b>Parameters:</b>
size
int or float: the size of the letters in units of pixels

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textWidth"><reference><b>Description:</b>
Calculates and returns the width of any character or text string.

<b>Syntax:</b>
textWidth(data)

<b>Parameters:</b>
data
char or String

<b>Returns:</b>
Float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="text"><reference><b>Description:</b>
Draws text to the screen. Displays the information specified in the <b>data</b> or <b>stringdata</b> parameters on the screen in the position specified by the <b>x</b> and <b>y</b> parameters and the optional <b>z</b> parameter. A font must be set with the <b>textFont()</b> function before <b>text()</b> may be called. Change the color of the text with the <b>fill()</b> function. The text displays in relation to the <b>textAlign()</b> function, which gives the option to draw to the left, right, and center of the coordinates. 

The <b>width</b> and <b>height</b> parameters define a rectangular area to display within and may only be used with string data. For text drawn inside a rectangle, the coordinates are interpreted based on the current <b>rectMode()</b> setting.

Use the <b>textMode()</b> function with the <b>SCREEN</b> parameter to display text in 2D at the surface of the window.

<b>Syntax:</b>
text(data, x, y)
text(data, x, y, z)
text(stringdata, x, y, width, height)
text(stringdata, x, y, width, height, z)

<b>Parameters:</b>
data
String, char, int, or float: the alphanumeric symbols to be displayed

x
int or float: x-coordinate of text

y
int or float: y-coordinate of text

z
int or float: z-coordinate of text

stringdata
String: letters to be displayed

width
int or float: width of text box

height
int or float: height of text box

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="textureMode"><reference><b>Description:</b>
Sets the coordinate space for texture mapping. There are two options, IMAGE, which refers to the actual coordinates of the image, and NORMALIZED, which refers to a normalized space of values ranging from 0 to 1. The default mode is IMAGE. In IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire size of a quad would require the points (0,0) (0,100) (100,200) (0,200). The same mapping in NORMAL_SPACE is (0,0) (0,1) (1,1) (0,1).

<b>Syntax:</b>
textureMode(MODE);

<b>Parameters:</b>
MODE
either IMAGE or NORMALIZED

<b>Returns:</b>
None

<b>Usage:</b>
Application &amp; Web</reference></element>
 <element pattern="texture"><reference><b>Description:</b>
Sets a texture to be applied to vertex points. The <b>texture()</b> function must be called between <b>beginShape()</b> and <b>endShape()</b> and before any calls to <b>vertex()</b>.

When textures are in use, the fill color is ignored. Instead, use tint() to specify the color of the texture as it is applied to the shape.

<b>Syntax:</b>
texture(img);

<b>Parameters:</b>
img
PImage: the texture to apply

<b>Returns:</b>
None

<b>Usage:</b>
Application &amp; Web</reference></element>
 <element pattern="tint"><reference><b>Description:</b>
Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by setting the alpha. 

To make an image transparent, but not change it's color, use white as the tint color and specify an alpha value. For instance, tint(255, 128) will make an image 50% transparent (unless <b>colorMode()</b> has been used).

When using hexadecimal notation to specify a color, use "#" or "0x" before the values (e.g. #CCFFAA, 0xFFCCFFAA). The # syntax uses six digits to specify a color (the way colors are specified in HTML and CSS). When using the hexadecimal notation starting with "0x", the hexadecimal value must be specified with eight characters; the first two characters define the alpha component and the remainder the red, green, and blue components. 

The value for the parameter "gray" must be less than or equal to the current maximum value as specified by <b>colorMode()</b>. The default maximum value is 255.

The tint() method is also used to control the coloring of textures in 3D.

<b>Syntax:</b>
tint(gray)
tint(gray, alpha)
tint(value1, value2, value3)
tint(value1, value2, value3, alpha)
tint(color)
tint(color, alpha)
tint(hex)
tint(hex, alpha)

<b>Parameters:</b>
gray
int or float: any valid number

alpha
int or float: opacity of the image

value1
int or float: red or hue value

value2
int or float: green or saturation value

value3
int or float: blue or brightness value

color
color: any value of the color datatype

hex
int: color value in hexadecimal notation (i.e. #FFCC00 or 0xFFFFCC00)

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="translate"><reference><b>Description:</b>
Specifies an amount to displace objects within the display window. The <b>x</b> parameter specifies left/right translation, the <b>y</b> parameter specifies up/down translation, and the <b>z</b> parameter specifies translations toward/away from the screen. Using this function with the <b>z</b> parameter requires using the P3D or OPENGL parameter in combination with size as shown in the above example. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>translate(50, 0)</b> and then <b>translate(20, 0)</b> is the same as <b>translate(70, 0)</b>. If <b>translate()</b> is called within <b>draw()</b>, the transformation is reset when the loop begins again. This function can be further controlled by the <b>pushMatrix()</b> and <b>popMatrix()</b>.

<b>Syntax:</b>
translate(x, y);
translate(x, y, z);

<b>Parameters:</b>
x
int or float: left/right translation

y
int or float: up/down translation

z
int or float: forward/back translation

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="triangle"><reference><b>Description:</b>
A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point.

<b>Syntax:</b>
triangle(x1, y1, x2, y2, x3, y3);

<b>Parameters:</b>
x1
int or float: x-coordinate of the first point

y1
int or float: y-coordinate of the first point

x2
int or float: x-coordinate of the second point

y2
int or float: y-coordinate of the second point

x3
int or float: x-coordinate of the third point

y3
int or float: y-coordinate of the third point

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="trim"><reference><b>Description:</b>
Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode "nbsp" character.

<b>Syntax:</b>
trim(str)
trim(array)

<b>Parameters:</b>
str
any String

array
a String array

<b>Returns:</b>
String

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="unbinary"><reference><b>Description:</b>
Converts a String representation of a binary number to its equivalent integer value. For example, unbinary("00001000") will return 8.

<b>Syntax:</b>
unbinary(str)

<b>Parameters:</b>
str
String

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="unhex"><reference><b>Description:</b>
Converts a String representation of a hexadecimal number to its equivalent integer value.

<b>Syntax:</b>
unhex(str)

<b>Parameters:</b>
str
String

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="updatePixels"><reference><b>Description:</b>
Updates the display window with the data in the <b>pixels[]</b> array. Use in conjunction with <b>loadPixels()</b>. If you're only reading pixels from the array, there's no need to call <b>updatePixels()</b> unless there are changes.

Certain renderers may or may not seem to require <b>loadPixels()</b> or <b>updatePixels()</b>. However, the rule is that any time you want to manipulate the <b>pixels[]</b> array, you must first call <b>loadPixels()</b>, and after changes have been made, call <b>updatePixels()</b>. Even if the renderer may not seem to use this function in the current Processing release, this will always be subject to change.

Currently, none of the renderers use the additional parameters to <b>updatePixels()</b>, however this may be implemented in the future.

<b>Syntax:</b>
updatePixels()
updatePixels(x, y, w, h)

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="vertex"><reference><b>Description:</b>
All shapes are constructed by connecting a series of vertices. <b>vertex()</b> is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons and is used exclusively within the <b>beginShape()</b> and <b>endShape()</b> function. Drawing a vertex in 3D using the <b>z</b> parameter requires the P3D or OPENGL parameter in combination with size as shown in the above example.This function is also used to map a texture onto the geometry. The <b>texture()</b> function declares the texture to apply to the geometry and the <b>u</b> and <b>v</b> coordinates set define the mapping of this texture to the form. By default, the coordinates used for <b>u</b> and <b>v</b> are specified in relation to the image's size in pixels, but this relation can be changed with <b>textureMode()</b>.

<b>Syntax:</b>
vertex(x, y); 
vertex(x, y, z); 
vertex(x, y, u, v); 
vertex(x, y, z, u, v);

<b>Parameters:</b>
x
int or float: x-coordinate of the vertex

y
int or float: y-coordinate of the vertex

z
int or float: z-coordinate of the vertex

u
int or float: horizontal coordinate for the texture mapping

v
int or float: vertical coordinate for the texture mapping

<b>Returns:</b>
None

<b>Usage:</b>
Application &amp; Web</reference></element>
 <element pattern="year"><reference><b>Description:</b>
Processing communicates with the clock on your computer. The <b>year()</b> function returns the current year as an integer (2003, 2004, 2005, etc).

<b>Syntax:</b>
year()

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
</group>	
<group highlight="method" autocomplete="1" autocomplete_append=";" autocomplete_backup_cursor="1" >

 <element pattern="boolean"><reference><b>Description:</b>
Converts a primitive datatype, string, or array to its boolean representation. The number 0 evaluates to false and all other numbers evaluate to true.

<b>Syntax:</b>
boolean(val)

<b>Parameters:</b>
val
String, String[]

<b>Returns:</b>
boolean

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="byte"><reference><b>Description:</b>
Converts a primitive datatype or array to its byte representation. A byte can only be a whole number between -128 and 127, therefore when a number outside this range is converted, its value wraps to the corresponding byte representation.

<b>Syntax:</b>
byte(val)

<b>Parameters:</b>
val
int, char, int[], char[]

<b>Returns:</b>
byte

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="char"><reference><b>Description:</b>
Converts a primitive datatype or array to a numeric character representation.

<b>Syntax:</b>
char(val)

<b>Parameters:</b>
val
int, byte, int[], byte[]

<b>Returns:</b>
char

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="color"><reference><b>Description:</b>
Creates colors for storing in variables of the <b>color</b> datatype. The parameters are interpreted as RGB or HSB values depending on the current <b>colorMode()</b>. The default mode is RGB values from 0 to 255 and therefore, the function call <b>color(255, 204, 0)</b> will return a bright yellow color. More about how colors are stored can be found in the reference for the color datatype.

<b>Syntax:</b>
color(gray)
color(gray, alpha)
color(value1, value2, value3)
color(value1, value2, value3, alpha)
color(hex)
color(hex, alpha)

<b>Parameters:</b>
gray
int or float: number specifying value between white and black

alpha
int or float: relative to current color range

value1
int or float: red or hue values relative to the current color range

value2
int or float: green or saturation values relative to the current color range

value3
int or float: blue or brightness values relative to the current color range

hex
int: color value in hexadecimal notation (i.e. #FFCC00 or 0xFFFFCC00)

<b>Returns:</b>
color

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="float"><reference><b>Description:</b>
Converts a primitive datatype, string, or array to its floating point representation.

<b>Syntax:</b>
float(value)

<b>Parameters:</b>
value
int, char, byte, boolean, String, int[], char[], byte[], boolean[], String[]

<b>Returns:</b>
float

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="int"><reference><b>Description:</b>
Converts a primitive datatype, string, or array to its integer representation.

<b>Syntax:</b>
int(value)

<b>Parameters:</b>
value
float, char, byte, String, float[], char[], byte[], String[]

<b>Returns:</b>
int

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="keyPressed"><reference><b>Description:</b>
The <b>keyPressed()</b> function is called once every time a key is pressed. The key that was pressed is stored in the <b>key</b> variable. 

For non-ASCII keys, use the <b>keyCode</b> variable. The keys included in the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and DELETE) do not require checking to see if they key is coded, and you should simply use the <b>key</b> variable instead of <b>keyCode</b> If you're making cross-platform projects, note that the ENTER key is commonly used on PCs and Unix and the RETURN key is used instead on Macintosh. Check for both ENTER and RETURN to make sure your program will work for all platforms.

Because of how operating systems handle key repeats, holding down a key may cause multiple calls to keyPressed() (and keyReleased() as well). The rate of repeat is set by the operating system and how each computer is configured.

<b>Syntax:</b>
void keyPressed() { 
  statements
}

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="mousePressed"><reference><b>Description:</b>
The <b>mousePressed()</b> function is called once after every time a mouse button is pressed. The <b>mouseButton</b> variable (see the related reference entry) can be used to determine which button has been pressed.

<b>Syntax:</b>
void mousePressed() { 
  statements
}

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="switch"><reference><b>Description:</b>
Works like an <b>if else</b> structure, but <b>switch()</b> is more convenient when you need to select between three or more alternatives. Program controls jumps to the case with the same value as the expression. All remaining statements in the switch are executed unless redirected by a <b>break</b>. Only primitive datatypes which can convert to an integer (byte, char, and int) may be used as the <b>expression</b> parameter. The default is optional.

<b>Syntax:</b>
switch(expression)
{
  case label: 
     statements          
  case label:          // Optional
     statements        // "
  default:             // "
     statements        // "
}

<b>Parameters:</b>
expression
byte, char, or int

label
byte, char, or int

statements
one or more statements to be executed

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="width"><reference></reference></element>
</group>
<group highlight="special" autocomplete="1" autocomplete_append="() " >
 <element pattern="setup"><reference><b>Description:</b>
Called once when the program is started. Used to define initial enviroment properties such as screen size, background color, loading images, etc. before the <b>draw()</b> begins executing. Variables declared within <b>setup()</b> are not accessible within other functions, including<b>draw()</b>. There can only be one <b>setup()</b> function for each program and it should not be called again after it's initial execution.

<b>Syntax:</b>
void setup() {
  statements
}

<b>Parameters:</b>
statements
any valid statements

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="draw"><reference><b>Description:</b>
Called directly after <b>setup()</b> and continuously executes the lines of code contained inside its block until the program is stopped or <b>noLoop()</b> is called. The <b>draw()</b> function is called automatically and should never be called explicitly. It should always be controlled with <b>noLoop()</b>, <b>redraw()</b> and <b>loop()</b>. After <b>noLoop()</b> stops the code in <b>draw()</b> from executing, <b>redraw()</b> causes the code inside <b>draw()</b> to execute once and <b>loop()</b> will causes the code inside <b>draw()</b> to execute continuously again. The number of times <b>draw()</b> executes in each second may be controlled with the <b>delay()</b> and <b>frameRate()</b> functions. There can only be one <b>draw()</b> function for each sketch and <b>draw()</b> must exist if you want the code to run continuously or to process events such as <b>mousePressed()</b>. Sometimes, you might have an empty call to <b>draw()</b> in your program as shown in the above example.

<b>Syntax:</b>
draw() {
  statements
}

<b>Parameters:</b>
statements
A sequence of statements

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="popStyle"><reference><b>Description:</b>
The <b>pushStyle()</b> function saves the current style settings and <b>popStyle()</b> restores the prior settings; these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with <b>pushStyle()</b>, it builds on the current style information. The <b>pushStyle()</b> and <b>popStyle()</b> functions can be embedded to provide more control (see the second example above for a demonstration.)

<b>Syntax:</b>
popStyle()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
 <element pattern="pushStyle"><reference><b>Description:</b>
The <b>pushStyle()</b> function saves the current style settings and <b>popStyle()</b> restores the prior settings. Note that these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with <b>pushStyle()</b>, it builds on the current style information. The <b>pushStyle()</b> and <b>popStyle()</b> functions can be embedded to provide more control (see the second example above for a demonstration.)

The style information controlled by the following functions are included in the style:
fill(), stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), shapeMode(), colorMode(), textAlign(), textFont(), textMode(), textSize(), textLeading(), emissive(), specular(), shininess(), ambient()

<b>Syntax:</b>
pushStyle()

<b>Returns:</b>
None

<b>Usage:</b>
Web &amp; Application</reference></element>
</group>	

<group autocomplete="1" highlight="constant">
            <element pattern="ADD" />
            <element pattern="ALIGN_CENTER" />
            <element pattern="ALIGN_LEFT" />
            <element pattern="ALIGN_RIGHT" />
            <element pattern="ALPHA" />
            <element pattern="ALPHA_MASK" />
            <element pattern="ALT" />
            <element pattern="AMBIENT" />
            <element pattern="ARGB" />
            <element pattern="ARROW" />
            <element pattern="BACKSPACE" />
            <element pattern="BEVEL" />
            <element pattern="BLEND" />
            <element pattern="BLUE_MASK" />
            <element pattern="BLUR" />
            <element pattern="BURN" />
            <element pattern="CENTER" />
            <element pattern="CHATTER" />
            <element pattern="CLOSE" />
            <element pattern="CMYK" />
            <element pattern="CODED" />
            <element pattern="COMPLAINT" />
            <element pattern="COMPONENT" />
            <element pattern="COMPOSITE" />
            <element pattern="CONCAVE_POLYGON" />
            <element pattern="CONTROL" />
            <element pattern="CONVEX_POLYGON" />
            <element pattern="CORNER" />
            <element pattern="CORNERS" />
            <element pattern="CROSS" />
            <element pattern="CUSTOM" />
            <element pattern="DARKEST" />
            <element pattern="DEGREES" />
            <element pattern="DEG_TO_RAD" />
            <element pattern="DELETE" />
            <element pattern="DIAMETER" />
            <element pattern="DIFFERENCE" />
            <element pattern="DIFFUSE" />
            <element pattern="DILATE" />
            <element pattern="DIRECTIONAL" />
            <element pattern="DISABLED" />
            <element pattern="DISABLE_ACCURATE_TEXTURES" />
            <element pattern="DISABLE_DEPTH_SORT" />
            <element pattern="DISABLE_NATIVE_FONTS" />
            <element pattern="DISABLE_OPENGL_2X_SMOOTH" />
            <element pattern="DISABLE_OPENGL_ERROR_REPORT" />
            <element pattern="DISABLE_TEXT_SMOOTH" />
            <element pattern="DODGE" />
            <element pattern="DOWN" />
            <element pattern="DXF" />
            <element pattern="ENABLE_ACCURATE_TEXTURES" />
            <element pattern="ENABLE_DEPTH_SORT" />
            <element pattern="ENABLE_NATIVE_FONTS" />
            <element pattern="ENABLE_OPENGL_4X_SMOOTH" />
            <element pattern="ENABLE_OPENGL_ERROR_REPORT" />
            <element pattern="ENTER" />
            <element pattern="EPSILON" />
            <element pattern="ERODE" />
            <element pattern="ESC" />
            <element pattern="EXCLUSION" />
            <element pattern="GIF" />
            <element pattern="GRAY" />
            <element pattern="GREEN_MASK" />
            <element pattern="GROUP" />
            <element pattern="HALF" />
            <element pattern="HALF_PI" />
            <element pattern="HAND" />
            <element pattern="HARD_LIGHT" />
            <element pattern="HINT_COUNT" />
            <element pattern="HSB" />
            <element pattern="IMAGE" />
            <element pattern="INVERT" />
            <element pattern="JAVA2D" />
            <element pattern="JPEG" />
            <element pattern="LEFT" />
            <element pattern="LIGHTEST" />
            <element pattern="LINES" />
            <element pattern="LINUX" />
            <element pattern="MACOSX" />
            <element pattern="MAX_FLOAT" />
            <element pattern="MAX_INT" />
            <element pattern="MITER" />
            <element pattern="MODEL" />
            <element pattern="MOVE" />
            <element pattern="MULTIPLY" />
            <element pattern="NORMAL" />
            <element pattern="NO_DEPTH_TEST" />
            <element pattern="NTSC" />
            <element pattern="ONE" />
            <element pattern="OPAQUE" />
            <element pattern="OPEN" />
            <element pattern="OPENGL" />
            <element pattern="ORTHOGRAPHIC" />
            <element pattern="OVERLAY" />
            <element pattern="P2D" />
            <element pattern="P3D" />
            <element pattern="PAL" />
            <element pattern="PERSPECTIVE" />
            <element pattern="PI" />
            <element pattern="PIXEL_CENTER" />
            <element pattern="POINT" />
            <element pattern="POINTS" />
            <element pattern="POSTERIZE" />
            <element pattern="PROBLEM" />
            <element pattern="PROJECT" />
            <element pattern="QUADS" />
            <element pattern="QUAD_STRIP" />
            <element pattern="QUARTER_PI" />
            <element pattern="RADIANS" />
            <element pattern="RADIUS" />
            <element pattern="RAD_TO_DEG" />
            <element pattern="RED_MASK" />
            <element pattern="REPLACE" />
            <element pattern="RETURN" />
            <element pattern="RGB" />
            <element pattern="RIGHT" />
            <element pattern="ROUND" />
            <element pattern="SCREEN" />
            <element pattern="SECAM" />
            <element pattern="SHIFT" />
            <element pattern="SOFT_LIGHT" />
            <element pattern="SPECULAR" />
            <element pattern="SQUARE" />
            <element pattern="SUBTRACT" />
            <element pattern="SVIDEO" />
            <element pattern="TAB" />
            <element pattern="TARGA" />
            <element pattern="TEXT" />
            <element pattern="TFF" />
            <element pattern="THIRD_PI" />
            <element pattern="THRESHOLD" />
            <element pattern="TIFF" />
            <element pattern="TOP" />
            <element pattern="TRIANGLES" />
            <element pattern="TRIANGLE_FAN" />
            <element pattern="TRIANGLE_STRIP" />
            <element pattern="TUNER" />
            <element pattern="TWO" />
            <element pattern="TWO_PI" />
            <element pattern="UP" />
            <element pattern="WAIT" />
            <element pattern="WHITESPACE" />
</group>	            
<group autocomplete="1" highlight="variable">
            <element pattern="focused" />
            <element pattern="frameCount" />
            <element pattern="frameRate" />
            <element pattern="height" />
            <element pattern="key" />
            <element pattern="keyCode" />
            <element pattern="keyPressed" />
            <element pattern="mouseButton" />
            <element pattern="mousePressed" />
            <element pattern="mouseX" />
            <element pattern="mouseY" />
            <element pattern="online" />
            <element pattern="pixels" />
            <element pattern="pmouseX" />
            <element pattern="pmouseY" />
            <element pattern="screen" />
            <element pattern="width" />
</group>	

</context>
</definition>
</bflang>
