<!--
Using Bluefish - a part of the Bluefish manual
Copyright (C) 2004  Olivier Sessink
Copyright (C) 2004-2006  The Bluefish Project Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-->

<chapter id="navigation-managing-documents">
<title>Navigation and Managing documents</title>

<sect1 id="navigation-one">
<title>Navigating through a document</title>
<para>The editing area is a standard GTK editing area. This means there are many keyboard shortcuts available to navigate through the text.</para>
<itemizedlist spacing="compact">
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo> will jump to the next word boundary</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo> will jump to the previous word boundary</para>
</listitem>
<listitem>
<para><keycap>End</keycap> will jump to the end of line</para>
</listitem>
<listitem>
<para><keycap>Home</keycap> will jump to the beginning of the line</para>
</listitem>
<listitem>
<para><keycap>Page-Up</keycap> will jump one page up</para>
</listitem>
<listitem>
<para><keycap>Page-Down</keycap> will jump one page down</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Home</keycap></keycombo> will jump to the top of the document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>End</keycap></keycombo> will jump to the end of the document</para>
</listitem>
</itemizedlist>
<para>These shortcuts are also available when selecting text. Some examples:</para>
<itemizedlist spacing="compact">
<listitem>
<para>To select the current line, press <keycap>Home</keycap>, hold <keycap>Shift</keycap> and press <keycap>End</keycap>.</para>
</listitem>
<listitem>
<para>To select the current word, press <keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo>, hold <keycap>Shift</keycap> and press <keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo>.</para>
</listitem>
</itemizedlist>
</sect1>

<sect1 id="navigation-multiple">
<title>Navigating through many documents</title>
<para>Navigating through a large list of documents can be difficult. But if you right-click the document notebook tabs, you get a list of all opened documents.</para>
<para>Navigation between documents can also be done using the <guimenu>Go</guimenu> menu, or its shortcuts.
<figure id="figure-go-menu">
<title id="figure-go-menu-title">Bluefish Go Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/go_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 go menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The shortcuts are the following:</para>
<itemizedlist spacing="compact">
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the previous document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the next document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the first document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the last document</para>
</listitem>
</itemizedlist>
<para>The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>L</keycap></keycombo></shortcut><guimenu>Go</guimenu><guimenuitem>Goto Line</guimenuitem></menuchoice> offers an interesting feature.</para>
<para>If there is some number in the document, you may select it, then click the <guilabel>From selection</guilabel> label in the Goto line dialog. Bluefish will fill in the <guilabel>Line number</guilabel> field with that number and go directly to it. The same feature is available from the <menuchoice><guimenu>Go</guimenu><guimenuitem>Goto Selection</guimenuitem></menuchoice>.
<figure id="figure-goto-line">
<title id="figure-goto-line-title">Using the Goto Line Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/goto_line.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the Goto Line dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>Check the <guilabel>Keep dialog</guilabel> box to keep the dialog open, when you plan to access several parts of the document by line numbers.</para>
</tip>
</sect1>

<sect1 id="projects">
<title>Projects</title>
<para>The projects are a sort of <emphasis>saved state</emphasis> of Bluefish. Thus, they are a very convenient way to work with files scattered all over your disks or to pick up only the files you are interested in within a huge tree. Projects features are accessible through the <guimenu>Project</guimenu> menu.
<figure id="figure-project-menu">
<title id="figure-project-menu-title">The Bluefish Project Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 project menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<procedure id="creating-new-project"><title>Creating a New Project</title>
<step>
<para>Click on the <menuchoice><guimenu>Project</guimenu><guimenuitem>New Project</guimenuitem></menuchoice></para>
<para>If some documents are already opened, check the appropriated box in the <guilabel>Create project</guilabel> dialog.
<figure id="figure-project-create-dialog">
<title id="figure-project-create-dialog-title">The Create Project Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_create_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the create project dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Fill in the fields in the <guilabel>Create New Project</guilabel> dialog
<figure id="figure-project-new-dialog">
<title id="figure-project-new-dialog-title">Creating a New Project</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_new_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the new project dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>With a <guilabel>Basedir</guilabel> the file browser in the side panel shows only the files within its hierarchy. With gnome-vfs support, the <guilabel>Basedir</guilabel> can be remote, as <filename>smb://user:pass@server/someshare/</filename> or <filename>sftp://someserver/somedir</filename>.</para>
<para>The <guilabel>Preview URL</guilabel> allows Bluefish to launch the browser to the appropriate URL, for example <filename>http://localhost/ Bluefish</filename>. This can be very convenient for testing server side scripting languages like PHP, JSP, etc.</para> 
<para>If the <guilabel>Template</guilabel> field is used, Bluefish will use the template file's contents for new files, which can be requested either via the <guilabel>New</guilabel> button on the main tool bar or <menuchoice><shortcut><keycap>Ctrl</keycap><keycap>N</keycap></shortcut><guimenu>File</guimenu><guimenuitem>New</guimenuitem></menuchoice>. Otherwise an empty document will be created.</para> 
</step>
<step>
<para>Once the project is created, you need to tell Bluefish where you want to save it. An <guilabel>Enter Bluefish project filename</guilabel> dialog will be displayed. Notice that you can save the project in a location different from the files to which the project points.
<figure id="figure-project-save-dialog">
<title id="figure-project-save-dialog-title">Entering Bluefish Project Filename</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_save_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the enter bluefish project dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
</procedure>
<para>To open a project, you have the choice between <menuchoice><guimenu>Project</guimenu><guimenuitem>Open Project...</guimenuitem></menuchoice> or <menuchoice><guimenu>Project</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice>. When you choose the former, a <guilabel>Selecting a Bluefish Project</guilabel> dialog is presented to you.
<figure id="figure-project-open-dialog">
<title id="figure-project-open-dialog-title">Selecting a Bluefish Project</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_open_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the select Bluefish project filename dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To save the project under its current name/location, use <menuchoice><guimenu>Project</guimenu><guimenuitem>Save</guimenuitem></menuchoice> or <menuchoice><guimenu>Project</guimenu><guimenuitem>Save &amp; close</guimenuitem></menuchoice>; to save it under a new name/location, use <menuchoice><guimenu>Project</guimenu><guimenuitem>Save as...</guimenuitem></menuchoice>. If any file in the project has changed, a dialog will allow you to save the file, discard the changes, or cancel. All files open when the project is saved are automatically opened the next time you open the project.
<figure id="figure-project-open">
<title id="figure-project-open-title">Opening a Bluefish Project</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_open.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a Bluefish project</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice that the side panel only shows the tree related to the project.</para>
<para>Also, the recently used files in that project are shown in the <menuchoice><guimenu>File</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice> menu item.</para>
<para>A project also saves some basic Bluefish settings, giving the project its own customized Bluefish setup. Currently, the word wrap preference and the state of various tool and menu bars are saved in a project file. The project file itself is simply a text file in the standard Bluefish format (same format as the config file). This format is <literal>key: value</literal>. Here is an example:
<programlisting>name: BluefishDoc
basedir: ~/bluefishcvs/bluefish-gtk2/doc/
webdir: http://micmacfr.homeunix.org/bluefish/doc
template: 
view_main_toolbar: 1
view_left_panel: 1
view_custom_menu: 1
view_html_toolbar: 1
word_wrap: 1
</programlisting></para>
</sect1>

<sect1 id="bookmarks">
<title>Bookmarks</title>
<para>In Bluefish you can add bookmarks to a line in the text, and you can later use the bookmark to quickly jump to this location, or even to open the document referred to by the bookmark at that line.</para>
<para>Bookmarks can be added to the current cursor location by using the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Add Bookmark</guimenuitem></menuchoice> menu item; or by right-clicking in the text, and selecting <guilabel>Add bookmark</guilabel>. You can delete a bookmark using the <guilabel>Delete bookmark</guilabel> item in the document contextual menu.</para>
<para>Each bookmark in a given document is marked by a blue background in the line number margin.
<figure id="figure-bookmark-marked">
<title id="figure-bookmark-marked-title">How Bookmarks are marked</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_marked.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how bookmarks are marked</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Bookmarks can be temporary or permanent. Permanent bookmarks are stored, and temporary bookmarks are gone after Bluefish is closed.	The default is set in the preferences under <guilabel>Editor</guilabel>.</para>
<para>Bookmarks can be found in the third tab of the side panel, sorted by document and line number.
<figure id="figure-bookmark-tab">
<title id="figure-bookmark-tab-title">Bookmarks in the Side Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing bookmarks in the side panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?pagebreaka4?>
<para>If you right click a bookmark in the bookmark tab of the side panel, you get a pop up menu with several options.
<figure id="figure-bookmark-cm">
<title id="figure-bookmark-cm-title">Contextual Menu on Bookmark in the Side Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_cm.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the contextual menu on bookmark in the side panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The <guilabel>Goto bookmark</guilabel> item allows you to go to the bookmark location in the document, opening it if needed.</para>
<para>The <guilabel>Edit</guilabel> item allows you to change a bookmark from temporary to permanent or the other way around, to name it, and to give it a short description.
<figure id="figure-bookmark-edit">
<title id="figure-bookmark-edit-title">Editing a Bookmark</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_edit.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the edition of a bookmark</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Note that after naming a bookmark, the default name - first characters of the bookmarked line - is displayed after the new name.
<figure id="figure-bookmark-name">
<title id="figure-bookmark-name-title">A named Bookmark</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_name.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing a named bookmark</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Via this contextual menu, you may also delete a bookmark, delete all bookmarks in the active document, or delete all bookmarks stored in the bookmark tab of the side panel. The latter ones are also available when you right click the name of a document in this tab.
<figure id="figure-bookmark-document-cm">
<title id="figure-bookmark-document-cm-title">The Contextual Menu on a Document in the Bookmark Tab</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_document_cm.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the contextual menu on a document in the bookmark tab</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<sect2 id="generate-bookmark">
<title>Generating several bookmarks at once</title>
<para>To add many bookmarks at once, use the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> dialog. Check the <guilabel>Bookmark result</guilabel> option, and all search results will be added to your bookmarks.</para>
<para>For example, the XML files for this manual have sections, each identified by a header like <literal>&lt;sect1 id="nameofthesection"&gt;</literal>. A way to automatically get a bookmark to every section is to search for the following posix regular expression pattern: <literal>&lt;sect[0-9]+ id="[^"]+"&gt;</literal> and bookmark all results.
<figure id="figure-bookmark-find-posix">
<title id="figure-bookmark-find-posix-title">Bookmarking with Posix Regular Expression</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find_posix.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to bookmark with Posix regular expression</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Here is the result:
<figure id="figure-bookmark-find-posix-result">
<title id="figure-bookmark-find-posix-result-title">Bookmarks with Posix Regular Expression</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find_posix_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the bookmarks with Posix regular expression</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>Here are two examples which bookmarks all functions in Objective-C and PHP files with POSIX or PERL regular expressions:
<figure id="figure-bookmark-find-cm">
<title id="figure-bookmark-find-title">Bookmarking Objective C Functions via the Find Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to bookmark Objective C functions via the Find menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
<figure id="figure-bookmark-find-perl">
<title id="figure-bookmark-find-perl-title">Bookmarking PHP Functions via the Find Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find_perl.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing another use of regular expressions in the find dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Check <xref linkend="find-replace-regex"/> for more information on finding and replacing with regular expression in Bluefish.</para>
</sect2>

</sect1>

<sect1 id="find-replace">
<title>Find and Replace</title>
<para>The <guimenu>Edit</guimenu> menu features several options for Find and Replace. The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> and <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>H</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Replace...</guimenuitem></menuchoice> menu items will simply start their corresponding dialogs described in <xref linkend="basic-find-replace"/>.</para>

<sect2 id="find-again">
<title>Find Again</title>
<para>The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find again</guimenuitem></menuchoice> menu item will repeat the last used search. It will continue the search after the position where the previous search was stopped. If the end of file is reached, it will signaled it if the search operates on a unique file, nevertheless you can continue the search from the top of file with <keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo> after dismissing the <guilabel>Search: no match found</guilabel> dialog. If the search operates on multiple files, it will continue with the next file.</para>
<para>Here you can see how the <guilabel>Find again</guilabel> process operates on two successive searches for the word "url" in an xml file:
<figure id="figure-find-again-first">
<title id="figure-find-again-first-title">Nth Occurrence with Find Again</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_again_first.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the nth occurrence of a search with Find again</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para><figure id="figure-find-again-second">
<title id="figure-find-again-second-title">Nth+1 Occurrence with Find Again</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_again_second.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the nth + 1 occurrence of a search with Find again</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>

<sect2 id="find-from-selection">
<title>Find from Selection</title>
<para>The <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find from selection</guimenuitem></menuchoice> menu item will search for the currently selected text. If you select for example the name of a function, in bluefish, or in any other program, and you choose find from selection Bluefish will start a new search for this selected string.</para>
<para>Here we have selected a function in a C file:
<figure id="figure-find-selection-select">
<title id="figure-find-selection-select-title">Selecting a String for subsequent Search</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_selection_select.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the selection of a string for subsequent search</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Clicking on <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find from selection</guimenuitem></menuchoice> gives the following result:
<figure id="figure-find-selection-search">
<title id="figure-find-selection-search-title">Finding a String from Selection</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_selection_search.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the result of a find from selection search</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Next occurrences of the string can be found with <keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo> as usual.</para>
</sect2>


<sect2 id="find-replace-regex">
<title>Find and Replace Using Regular Expressions</title>
<para>With find and replace you can do incredibly powerful searches. We have already seen some of them in <xref linkend="generate-bookmark"/>, which deserve some explanation here.</para>
<?pagebreakus?>
<example id="retrieve-sections"><title>Retrieving all sections in an xml book</title>
<para>The regular POSIX expression <literal>&lt;sect[0-9]+ id="[^"]+"&gt;</literal> can be split into:</para>
<itemizedlist>
<listitem>
<para><literal>&lt;sect</literal>: a string beginning by <literal>&lt;sect</literal></para>
</listitem>
<listitem>
<para><literal>[0-9]+ </literal>: followed by one or more (the <literal>+</literal> part) characters in the range of 0 to 9 (the <literal>[0-9]</literal> part), i.e. digits, followed by a space</para>
</listitem>
<listitem>
<para><literal>id="</literal>: followed by the string <literal>id</literal>, followed by an equal sign, followed by a double-quote</para>
</listitem>
<listitem>
<para><literal>[^"]+</literal>: followed by one or more (the <literal>+</literal> part) not double-quote characters (the <literal>[^"]</literal> part - <literal>^</literal> is a not )</para>
</listitem>
<listitem>
<para><literal>"&gt;</literal>: followed by a double-quote, and ending with a &gt; sign</para>
</listitem>
</itemizedlist>
<para>Therefore, it matches any string of type <literal>&lt;sectn id="nameofthesection"&gt;</literal>, where n is a positive integer.</para>
</example>
<example id="retrieve-functions-objc"><title>Retrieving all functions in an Objective C file</title>
<para>In a simplified example, an objective C function may have two forms:</para>
<orderedlist>
<listitem>
<para><literal>- (IBAction)nameofthefunction:(id)parameter</literal></para>
</listitem>
<listitem>
<para><literal>- (void) nameofthefunction</literal></para>
</listitem>
</orderedlist>
<para>We will try to make a pattern from those forms:</para>
<itemizedlist>
<listitem>
<para>Hyphens and parentheses have special meanings in regular expressions, hence we need to escape them, i.e. to put before each of them a backslash, so that they will be interpreted as normal characters.</para>
<para>Thus, <literal>- (</literal> is matched by: <literal>\- \(</literal></para>
</listitem>
<listitem>
<para><literal>IBAction</literal> or <literal>void</literal> are a non empty sequence of alphabetical characters. We have already seen something similar in the previous example.</para>
<para>They are matched by: <literal>[a-z]+</literal>, that is one or more characters in the range of a to z.</para>
</listitem>
<listitem>
<para>Another parenthesis matched by: <literal>\)</literal>.</para>
</listitem>
<listitem>
<para>A space or no space at all, it is matched by: <literal> *</literal>, that is a space followed by an asterisk, which means 0 or more times the preceding character.</para>
</listitem>
<listitem>
<para>A non empty sequence of characters, matched by <literal>[a-z]+</literal> as already seen.</para>
</listitem>
<listitem>
<para>A colon or no colon at all, which is matched by: <literal>[:]*</literal>.</para>
</listitem>
</itemizedlist>
<para>Thus the whole POSIX regular expression is: <literal>\- \([a-z]+\) *[a-z]+[:]*</literal>. In the example, we have grouped the parts with parentheses, you may prefer this simplified form, though it is not recommended.</para>
</example>
<example id="retrieve-functions-php"><title>Retrieving all functions in a PHP file</title>
<para>A php function has the form <literal>function nameofthefunction(listofparameters)</literal>, where the list of parameters can be empty. To match it with a PERL regular expression, you have to know that <literal>\s matches any white space</literal> and <literal>\w</literal> matches any alphanumerical character as well as white spaces.</para>
<para>Thus, the matching regular expression is: <literal>function\s+\w+</literal>.</para>
<para>Now, if you want to capture also the function's parameters, you have to add:</para>
<itemizedlist>
<listitem>
<para>An opening parenthesis: <literal>\(</literal>. Remember parentheses should be escaped with a backslash.</para>
</listitem>
<listitem>
<para>Zero or more characters, none of them being a closing parenthesis: <literal>[^\)]*</literal></para>
</listitem>
<listitem>
<para>A closing parenthesis: \)</para>
</listitem>
</itemizedlist>
<para>The PERL regular expression becomes: <literal>function\s+\w+\([^\)]*\)</literal>.</para>
</example>
<para>Here is a new example which transforms a table into a definition list inside an html file.</para>
<example id="transform-table-deflist"><title>Transforming a table into a definition list</title>
<para>Say you have the following table:
<figure id="figure-find-regex-before">
<title id="figure-find-regex-before-title">The table before Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_regex_before.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the table before transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>You want to transform it in the following definition list:
<figure id="figure-find-regex-after">
<title id="figure-find-regex-after-title">The table after Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_regex_after.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the table after transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>For the rendering, you will use the following css style sheet:
<programlisting><![CDATA[
.st2 {
    font-weight: 900;
    color: #e38922;
    margin-left: 30px;
}
dl {
    font-weight: 900;
    margin-left: 55px;
}
dt {
    margin-top: 6px;
}
.dd1 {
    font-style: normal;
    font-weight: 400;
}
]]></programlisting></para>
<para>The table's source code is the following:
<programlisting><![CDATA[<table border="1">
<tr>
<th>Software</th>
<th>Use</th>
<th>Requirements</th>
<th>Author</th>
<th>Date</th>
<th>Download</th>
</tr>
<tr>
<td>BackupSeek 1.8</td>
<td>To catalog your backup from all media. Prints labels too.</td>
<td>PPC</td>
<td>Ken Ng</td>
<td>17 November 1999</td>
<td>English version (452 Ko)</td>
</tr>
<tr>
<td>Biblioteca v. 1.0</td>
...
</tr>
</table>]]></programlisting></para>

<para>The definition list's source code will be the following:
<programlisting><![CDATA[<p class="st2">BackupSeek 1.8</p>
<dl>
<dt>Use:</dt><dd><span class="dd1">To catalog your backup from all media. \
Prints labels too.</span></dd>
<dt>System requirements:</dt><dd><span class="dd1">PPC</span></dd>
<dt>Author:</dt><dd><span class="dd1">Ken Ng</span></dd>
<dt>Date:</dt><dd><span class="dd1">17 November 1999</span></dd>
<dt>Download:</dt><dd><span class="dd1">English version (452 Ko)</span></dd>
</dl>
<p class="st2">Biblioteca v. 1.0</p>
...
</dl>]]></programlisting></para>
<para>Comparing both chunks of code, we see that the variable sequence of characters to capture is the one between one <literal>&lt;td&gt;</literal> tag and its closing <literal>&lt;/td&gt;</literal> tag. That sequence can be interpreted as one or more characters which are not a <literal>&lt;</literal>. We have already seen that. This is expressed as: <literal>[^&lt;]+</literal></para>
<para>To be able to retrieve it later, we need to embed it into parentheses. Thus, the string becomes: <literal>([^&lt;]+)</literal></para>
<para>Next, this sequence is embedded into <literal>&lt;td&gt;</literal> and <literal>&lt;/td&gt;</literal>, which is expressed simply concatenating the strings: <literal>&lt;td&gt;([^&lt;]+)&lt;/td&gt;</literal></para>
<para>We should also add the end of line character, which is expressed as: <literal>\n</literal>. The regular expression now describes a whole line: <literal>&lt;td&gt;([^&lt;]+)&lt;/td&gt;\n</literal></para>
<para>As we cannot use variables to retrieve the headers of the table, we will merely repeat that string five times, so that the regular expression matches exactly the six lines of importance to us.</para>
<para><note>
<para>Do not type it six times in the search field. Select the string, use the shortcuts <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> to copy it, move to the end of the string with the <keysym>right arrow</keysym>, and use <keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo> five times to paste it at the end of the string.</para>
</note></para>
<para>The regular expression becomes (backslashes are inserted at end of line just for the purpose of not to have too long lines):
<programlisting><![CDATA[<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n]]></programlisting></para>
<para>Those lines are at their turn embedded into <literal>&lt;tr&gt;</literal> and <literal>&lt;/tr&gt;</literal> tags each of them on their own line, which can be expressed as: <literal>&lt;tr&gt;\n</literal> for the first one, and <literal>&lt;/tr&gt;\n</literal> for the second one. We add those strings respectively at the beginning and at the end of our regular expression, which becomes:
<programlisting><![CDATA[<tr>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
</tr>\n]]></programlisting></para>
<para>Now that we have described the search pattern, we will build the replace pattern. Each expression embedded into parentheses in the search string can be retrieved with <literal>\x</literal>, where x is an integer starting at 0 for the first expression, 1 for the second, etc. All others parts in the final string are fixed strings which we will express as they are.</para>
<para>The first line becomes (note the \n at the end to match the end of line character): 
<programlisting><![CDATA[<p class="st2">\0</p>\n]]></programlisting></para>
<para>The second line (again, note the \n to match the end of line characters):
<programlisting><![CDATA[<dl>\n<dt>Use:</dt><dd><span class="dd1">\1</dd>\n]]></programlisting></para>
<para>And finally the whole replace pattern is:
<programlisting><![CDATA[<p class="st2">\0</p>\n \
<dl>\n<dt>Use:</dt><dd><span class="dd1">\1</dd>\n \
<dt>System requirements:</dt><dd><span class="dd1">\2</span></dd>\n \
<dt>Author:</dt><dd><span class="dd1">\3</span></dd>\n \
<dt>Date:</dt><dd><span class="dd1">\4</dd>\n \
<dt>Download:</dt><dd><span class="dd1">\5</span></dd>\n</dl>\n]]></programlisting></para>
<para>After entering both patterns, choose <guilabel>PERL type</guilabel> in the <guilabel>Regular expression</guilabel> drop down list, check the <guilabel>Patterns contain backslash escape sequences (\n, \t)</guilabel> and click OK.</para>
<para>After replacement occurred, you have to remove the table headers and the last <literal>&lt;/table&gt;</literal> tag and to insert the link to the style sheet.</para>
<para>Note that if some lines contain a <literal>&lt;</literal> sign, the table row will not be translated, but others will.</para>
</example>
<para>In the <guilabel>Find</guilabel> and <guilabel>Replace</guilabel> dialogs it is not possible to insert the keys <keycap>Enter</keycap> or <keycap>Tab</keycap>. A simple way to do it is to copy two lines in a row from the current document into the <guilabel>Find</guilabel> or <guilabel>Replace</guilabel> dialog, this way you retrieve the end of line character. The same applies for <keycap>Tab</keycap>. A more elaborated way to do it is to use escaped characters to represent these characters. A new line character, produced by pressing the <keycap>Enter</keycap> key, is represented as <literal>\n</literal>. Use <literal>\t</literal> for a tab. To get an actual backslash, just escape the backslash, <literal>\\</literal>. There are many other escape characters used in regular expressions.</para>
<note>
<para>To enable the escaped characters in your searches check the <guilabel>Patterns contain backslash sequences (\n, \t)</guilabel> option.</para>
</note>
<para>If you have any search and replace patterns you use often, you can also add them to the Custom Menu. Check <xref linkend="custom-menu"/> for more information.</para>
<para>For more information about regular expressions you might want to read man 1 perlre,  man 3 pcrepattern, man 3 regex or man 7 regex, or read any of the great Internet sites about regular expressions. As you become more familiar with regular expressions, you will realize that they make <application>Bluefish</application> a very powerful editor.</para>
</sect2>
</sect1>
</chapter>
