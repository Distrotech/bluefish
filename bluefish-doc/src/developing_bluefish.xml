<!--
this file belongs to bluefish, a web development environment
Copyright (C) 2002  Denny Reeh

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->
<chapter id="developing-bluefish">
<title>Development guidelines</title>
<?linebreakus?>
<para>Work hard but have fun!</para>

<sect1 id="developing-bluefish-formating-style">
<title>Indenting and formating style</title>
<para>Indenting can be done with the <command>indent</command> command line tool. Bluefish uses tabs - not spaces, and I'll explain why.</para>
<para>Some programmers prefer a lot of indenting, 8 characters, some prefer less, 3 characters. If Bluefish code was indented with spaces, these programmers had a problem, they would have to change the files to view it in their favourite layout. But because we use tabs, these programmers can simply set the tab width to a different value, and without changing the files it looks good for both programmers!</para>
<para>To indent properly with <command>indent</command>, issue this command:</para>
<screen>$ indent --line-length 100 --k-and-r-style --tab-size 4 \
-bbo --ignore-newlines bluefishcode.c</screen>
<para>Comment all public functions like it is done in <filename>bf_lib.c</filename> and <filename>gtk_easy.c</filename> (javadoc style, with some small differences), this can be used to create a function reference.</para>
</sect1>

<sect1 id="developing-bluefish-naming">
<title>Naming</title>
<para>For non-local functions, the name should preferably include a prefix that shows the part of bluefish it is used for. There are, furthermore, many often used abbreviations in the bluefish code, such as:</para>
<?linebreak?>
<variablelist>
<title>Abbreviations used in the Bluefish code</title>
<varlistentry><term>doc</term>
<listitem><para>A function for handling a specific document</para></listitem>
</varlistentry>
<varlistentry><term>bfwin</term>
<listitem><para>A function for handling a specific Bluefish window</para></listitem>
</varlistentry>
<varlistentry><term>cb</term>
<listitem><para>Callback, a function called after a button click or some other event</para></listitem>
</varlistentry>
<varlistentry><term>lcb</term>
<listitem><para>Local callback, a function called after an event, only used in this .c file</para></listitem>
</varlistentry>
</variablelist>
<para>Here are such function names that show where they are from, what they handle, and/or what they do</para>
<?linebreak?>
<variablelist>
<title>Examples of function names in Bluefish</title>
<varlistentry><term>bmark_set_for_doc</term>
<listitem><para>Bookmark code, sets bookmarks for a document</para></listitem>
</varlistentry>
<varlistentry><term>spell_check_cb</term>
<listitem><para>Spell check code, this is a callback function (for a button)</para></listitem>
</varlistentry>
<varlistentry><term>project_open_from_file</term>
<listitem><para>Project code, opens a new project from a given file name</para></listitem>
</varlistentry>
</variablelist>
</sect1>

<sect1 id="developing-bluefish-declaring-procedures">
<title>Declaring procedures</title>
<para>All local functions should be static!</para>
<para>Callback functions (called for events such as button clicks) should have prefix <emphasis>_cb</emphasis>, or <emphasis>_lcb</emphasis> for local callbacks.</para>
<para>For GTK callback functions, use the name of the signal in the name.</para>
</sect1>

<sect1 id="developing-bluefish-header-files">
<title>Header files</title>
<para>Only functions that are used from outside the file itself should be in the header file, in the order in which they are found in the .c file itself. Basically these are all non-static functions in the .c file.</para>
</sect1>

<sect1 id="developing-bluefish-new-files">
<title>New files</title>
<para>About new files</para>
</sect1>

<sect1 id="developing-bluefish-file-reference">
<title>File reference</title>
<para>References</para>
</sect1>

<sect1 id="developing-bluefish-patches">
<title>Patches</title>
<?linebreakus?>
<para>Before starting to code:</para>
<orderedlist spacing="compact">
<listitem><para>Update your CVS tree, or alternatively download the latest snapshot</para></listitem>
<listitem><para>Copy this original tree, so you can make a patch against this tree</para></listitem>
</orderedlist>
<?linebreakus?>
<para>Before creating the patch:</para>
<orderedlist spacing="compact">
<listitem><para>Run <userinput>make distclean &amp;&amp; ./configure &amp;&amp; make</userinput> and test if it runs successfully</para></listitem>
<listitem><para>If you have the possibility do this both with <filename>gcc-2.95</filename> and <filename>gcc-3.x</filename> as compiler</para></listitem>
</orderedlist>
<?linebreakus?>
<para>Now create the patch. Assuming that you have two directories, <filename>original-tree</filename> and <filename>my-tree</filename>:</para>
<orderedlist spacing="compact">
<listitem><para>Run <userinput>make distclean</userinput> in both trees</para></listitem>
<listitem><para>cd to the parent directory of both trees</para></listitem>
<listitem><para>Run <userinput>diff -Naur original-tree my-tree | bzip2 -9c > patchbla.diff.bz2</userinput></para></listitem>
</orderedlist>
</sect1>

<?linebreakus?>
<sect1 id="developing-bluefish-translations">
<title>Translations</title>
 
<sect2>
<title>Introduction</title>
<para>Bluefish has been translated into more than 15 different languages and this is only the beginning.</para>
<para>Translation process is not a difficult task but you will need some time because there are more than one thousand strings to be translated. The good news are you don't need to be a programmer to make Bluefish speak your language and the only tool you need is a text editor (<application>Vim</application>, <application>Emacs</application>, <application>bluefish</application>, etc.)</para> 
<para>Bluefish uses po (Portable Object) files. A po file is just a plain text file that you can edit with your favorite text editor.</para>
</sect2>

<sect2> 
<title>PO files basics</title>
<para>In a typical po file there are five major types of entries:</para>
<orderedlist>
<listitem>
<para>Those which begin with "#:" showing the places in the source code that contains the string being translated (there may be one or more) as: '<literal>#: ../src/about.c:123</literal>'</para>
</listitem>
<listitem>
<para>Those which begin with "#," containing some flags (not always present) as: '<literal>#, c-format</literal>'</para>
</listitem>
<listitem>
<para>Those which begin with "msgid" containing the English string being translated (it may be spanned in several lines) as: '<literal>msgid "Authentication is required for %s."</literal>'</para>
</listitem>
<listitem>
<para>Those which begin with "msgstr" containing the translated string as: '<literal>msgstr "Une autorisation est requise pour accéder à %s."</literal>'</para>
</listitem>
<listitem>
<para>Those which begin with "#~ " containing obsolete strings as: '<literal>#~ msgid "Save document as"</literal>'</para>
</listitem>
</orderedlist>
<variablelist>
<varlistentry>
<term><emphasis>Warning</emphasis></term>
<listitem>
<para>When an entry is tagged as fuzzy (i.e. when the line begins with "<literal>#, fuzzy</literal>"), that means it is probably incorrect.</para>
<para>You have to make sure the translation is correct and then delete either the "<literal>#, fuzzy</literal>" line if this is the only flag on the line, or the "<literal>, fuzzy</literal>" part of the line if there are some other flags on the same line, like in "<literal>#, fuzzy, c-format</literal>".</para>
<para>Remember that as long as a translation is marked "fuzzy", it will NOT actually be used!</para>
<para>As far as obsolete strings are concerned, it is up to you to decide if you want to remove them. On one hand they can be reused in a latter version of the po file, on the other hand they make the po file bigger.</para>
</listitem>
</varlistentry>
</variablelist>
<para>Hence, your task as a translator is to:</para>
<orderedlist spacing="compact">
<listitem><para>Translate all empty msgstr entries</para></listitem>
<listitem><para>Check all fuzzy entries, correct them if they are wrong and remove all fuzzy tags</para></listitem>
<listitem><para>Optionally, remove obsolete strings</para></listitem>
<listitem><para>Check that the po file ends with a blank line</para></listitem>
</orderedlist>
</sect2>

<sect2>
<title>Shortcut keys</title>
<para>Shortcut keys, known as hotkeys or even accelerator keys, are defined as follows (look at the underscore, please):</para>
<screen>
# src/toolbars.c:482
#: ../src/filebrowser.c:1453
msgid "/_Refresh"
msgstr "/_Actualizar"
</screen>	
<para>That it means that in the English locale the user have to press <keycombo><keycap>Alt</keycap><keycap>R</keycap></keycombo> to activate this particular GUI element. On the other hand if your locale is Spanish your shortcut key will be <keycombo><keycap>Alt</keycap><keycap>A</keycap></keycombo>.</para>
<variablelist><varlistentry>
<term><emphasis>Warning</emphasis></term>
<listitem>
<para>You have to keep in mind that two GUI elements must not have the same shortcut key at the same level.</para>
</listitem></varlistentry></variablelist>
</sect2>

<sect2>
<title>How to contribute</title>  
<para>It is really easy. Just drop me a line at <email>wecharri(at)arnet.com.ar</email> and I will send you your po file ready to be translated. When you have finished the translation work, just send it me back (use <application>gzip</application> or <application>bzip2</application> if possible, please). Then I will check it and if everything is right I will add it into <application>CVS</application>.</para>
<para>About ten days before a new release I will send a new fresh po copy to each translator to repeat this process.</para>
<para>All po files will be named as follows:</para>
<screen>date-foo.po.gz (date: day-month-year)</screen>
<para>Example:</para>
<screen>12-12-2004.es.po.gz (for Spanish po file)</screen>
<para>Please, remember:</para>
<itemizedlist>
<listitem><para>Do not rename it (I need it for tracking stuff)</para></listitem>
<listitem><para>Send it me back as soon as possible in zipped format too.</para></listitem>
<listitem><para>Do not mix it without any local copy you have.</para></listitem>
<listitem><para>Remember they are in UTF-8 format</para></listitem>
<listitem><para>Subject in my mail will be ***New Bluefish PO File !***</para></listitem>
 </itemizedlist>
 <para>And at last, do not start a new translation before contacting me or contact Olivier and do not post your po file at the list, please.</para>
<para>If you have some doubts, do not hesitate contact me at <email>wecharri(at)arnet.com.ar</email>.</para>
</sect2>
</sect1>

<sect1 id="developing-bluefish-tips">
<title>Some tips</title>
<para>Development tips</para>
</sect1>
<sect1 id="developing-bluefish-making-releases">
<title>Making releases</title>
<para>What is to do</para>
</sect1>

<sect1 id="developing-bluefish-useful-stuff">
<title>Useful stuff</title>
<para>Links and so</para>
</sect1>

</chapter>

