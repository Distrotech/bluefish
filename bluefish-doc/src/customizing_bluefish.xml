<!--
Using Bluefish - a part of the Bluefish manual
Copyright (C) 2004  Olivier Sessink
Copyright (C) 2004-2006  The Bluefish Project Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-->

<chapter id="bluefish-preferences">
<title>Customising Bluefish</title>
<para>We have already seen how to customize the <link linkend="quickbar">quick bar</link>, the <link linkend="custom-menu">Custom menu</link>, and the <link linkend="external-programs-filters">External menu</link>. Here are some other possibilities, most of them being made through the <guilabel>Edit preferences</guilabel> panel, accessible from the <guilabel>Preferences...</guilabel> icon in the main tool bar or from the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu item.</para>

<sect1 id="changing-shortcut-keys">
<title>Modifying shortcut keys</title>
<para>Many menu entries are accessible via key combination, also called a shortcut. For example, pressing the <keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo> keys saves the current file to disk. If available, shortcut key combinations are shown on the right of the menu entry.</para>
<para>To add or change a shortcut, move the mouse over the desired menu entry, and press the key combination you would like to use. Immediately this combination will show up on the right of the menu entry.</para>
<para>Here's a shortcut added to the <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL...</guimenuitem></menuchoice> menu item:
<figure id="figure-prefs-add-shortcut">
<title id="figure-prefs-add-shortcut-title">Adding a Shortcut to a Menu Item</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_add_shortcut.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add a shortcut to a menu item</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To remove a shortcut, press the backspace key when you move the mouse over a menu entry to remove the shortcut.</para>
<para>To save the shortcut key combinations for later Bluefish sessions, use <menuchoice><guimenu>Edit</guimenu><guimenuitem>Save Shortcut Keys</guimenuitem></menuchoice>. This will store the settings in the <filename>~/.bluefish/menudump_2</filename>.</para>
<note>
<para>If you want to restore the default combinations simply remove this file and restart Bluefish.</para>
</note>
<para> </para>
<warning>
<para>Be aware that if you give a menu entry the same shortcut as another one, the shortcut of the latter will be lost.</para>
</warning>
</sect1>

<sect1 id="show-hidden-files">
<title>Showing hidden files and folders</title>
<para>By default, invisible files and folders are not shown in the file browser tab of the side panel.</para>
<para>If you want to see them at a given level of the files system hierarchy, right click on the desired folder name in the file browser within the side panel and toggle <guilabel>Show hidden files</guilabel> in the contextual menu.</para>

<para>Here is how to view all visible files and folders in the whole system:
<figure id="figure-prefs-show-visible">
<title id="figure-prefs-show-visible-title">Turning Files and Folders Visibility ON</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_show_invisible.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to turn files and folders' visibility on the whole system</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>This feature is very convenient for Mac users when used with caution, since combined with the <guilabel>Delete</guilabel> contextual menu in the file browser, it allows you, for example, to get rid of files generated by cvs on conflicts within bluefish.</para>
</tip>
</sect1>

<sect1 id="show-backup-files">
<title>Showing backup files</title>
<para>By default, backup files are not shown in the file browser tab of the side panel.</para>
<para>You may turn on their visibility at a given level of the file system by right clicking on the desired folder name in the file browser within the side panel and toggle <guilabel>Show backup files</guilabel> in the contextual menu.</para>
</sect1>

<sect1 id="editor-appearance">
<title>Editor appearance</title>
<para>Most of the editor appearance depends on your GKT theme, which may be customized through the <filename>~/.gtkrc-2.0</filename> resource file.</para>
<para>Parts that you may want to customize through that resource file are among others:</para>
<itemizedlist spacing="compact">
<listitem><para>the background color of the editor</para></listitem>
<listitem><para>the colors of GUI elements</para></listitem>
<listitem><para>the position of arrows in a drop down list</para></listitem>
</itemizedlist>
<para>You will find examples of themes resource files while searching for a <filename>gtkrc</filename> file in a <filename>gtk-2.0</filename> folder within the various directories under <filename>$prefix/share/themes/</filename>, where $prefix is your installation prefix (it may be <filename>/usr</filename>, <filename>/usr/local</filename>, <filename>/sw</filename>, <filename>/opt</filename>, etc.).</para>
<warning>
<para>You should not customize those files, instead customize <filename>~/.gtkrc-2.0</filename>. If the file does not already exist in your home directory, just create it with:  <command>touch ~/.gtkrc-2.0</command></para>
</warning>
<para>Here is an example made on a Crux theme:<programlisting><![CDATA[style "bluefish"
{
 # For up and down arrows grouped together at right side
 GtkNotebook::has_secondary_forward_stepper = 1
 GtkNotebook::has_secondary_backward_stepper = 1
 
 # Editor background color 
 # (background of editor view)
 base[NORMAL]="#fcfff5"
 
 # GUI normal background color
 # (most of the GUI)
 bg[NORMAL]="#dbe9e9"
 
 # GUI highlighted background color
 #(GUI when mouse over elements)
 bg[PRELIGHT]="#c6e9e9"
 
 # GUI unactive background color
 #(GUI disabled elements)
 bg[INSENSITIVE]="#9fb2b2"

 # GUI active background color
 #(GUI enabled elements)
 bg[ACTIVE]="#c7d4d4"
}
class "GtkWidget" style "bluefish"
]]></programlisting></para>
<note>
<para>You may give any name to the style on the first line, provided that you use the same on the last line.</para>
<para>The customization applies to any Gtk application.</para>
</note>



<para>It will give this appearance to bluefish:

<figure id="figure-gui-appearance">
<title id="figure-gui-appearance-title">Bluefish with a customized Gtk Theme</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/gui_appearance.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of Bluefish with a customized Gtk theme</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>




<para>Other options for the Editor are available in the <guilabel>Editor</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel accessible via the <guilabel>Edit preferences...</guilabel> button in the main tool bar. In particular you may want to customize the font of the editor, the end of line wrapping, and the undo history size:




<figure id="figure-prefs-editor-tab">
<title id="figure-prefs-editor-tab-title">The Editor Tab in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_editor_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Editor tab in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect1>




<sect1 id="bookmark-path">
<title>Customizing the bookmarks path</title>

<para>When you add bookmarks to document, the name of the file it refers to is displayed from the base directory. You can choice another path from the <guilabel>Bookmarks filename display</guilabel> pop up menu in the <guilabel>Editor</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel:




<figure id="figure-prefs-bookmarks-path">
<title id="figure-prefs-bookmarks-path-title">The Bookmarks Path Pop up Menu in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_bookmarks_path.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bookmarks path pop up menu in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect1>


<sect1 id="html-tags-style">
<title>Customizing the html tags style</title>
<para>The <guilabel>HTML</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel provides you with some options to change the style of the html tags:
<figure id="figure-prefs-html-tab">
<title id="figure-prefs-html-tab-title">The HTML Tab in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_html_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML tab in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect1>

<sect1 id="changing-author-meta">
<title>Changing the author meta tag on the fly</title>

<para>One interesting feature in the <guilabel>HTML</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel is that you can let <application>bluefish</application> update the author meta tag on save.</para>


<para>Let's say you created an html file with an author meta tag while you were logged in as user <emphasis>foo</emphasis>. On save <application>bluefish</application> will fill up the contents attribute of the author meta tag with the full name associated with the <emphasis>foo</emphasis> user:








<figure id="figure-author-meta-name1">
<title id="figure-author-meta-name1-title">The Author Meta Tag filled in on Save</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/author_meta_name1.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the author meta tag filled in on save</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<para>You share this html file with another user <emphasis>bar</emphasis> or you change the owner of the file to <emphasis>bar</emphasis>. When you modify the html file while logged in as user <emphasis>bar</emphasis>, the author meta tag is updated to reflect the new author on save, providing that the user <emphasis>bar</emphasis> has write permission on the file:








<figure id="figure-author-meta-name2">
<title id="figure-author-meta-name2-title">Update of the Author Meta Tag on Save</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/author_meta_name2.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the author meta tag updated on save</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<warning>
<para>If you do not want that the author meta tag be changed while editing the file under another user's login, uncheck the box.</para>
</warning>
</sect1>


<sect1 id="customizing-files-handling">
<title>Customizing files handling and browsing</title>

<para>The <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel allows you to set some options related to the way files are handled and displayed in the file browser.

<figure id="figure-prefs-files-tab">
<title id="figure-prefs-files-tab-title">The Files Preference Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_files_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Files preferences panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>




<sect2 id="setting-encoding-meta">
<title>Setting the encoding meta tag on save</title>

<para>Apart from setting the default character encoding in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel, you may also instruct <application>bluefish</application> to set the encoding meta tag when you modify the document character set encoding.</para>

<para>Note that, if the encoding meta tag does not exist, it is inserted in the file, otherwise it is changed. Either modification occurs immediately.</para>
</sect2>


<sect2 id="setting-default-basedir">
<title>Setting the default base directory</title>

<para>You can set a default base directory in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>

<para>This directory will serve as the initial point for the file browser.</para>
</sect2>




<sect2 id="merged-views">
<title>Merging file browser views</title>

<para>By default, the file browser uses separate views for files and directories.</para>

<para>You can have a single view by unchecking the <guilabel>Use separate file and directory view</guilabel> option in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>
</sect2>




<sect2 id="backups">
<title>Backup files</title>

<para>By default, a backup file is created on save in the same directory as the original file based on the same filename with the exception that a <keycap>~</keycap> suffix is added. This backup file is deleted on closing the file.</para>

<para>You can change this behaviour in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>


<para>When the backup fails to be created, you can choose what to do:


<figure id="figure-prefs-askonbackup">
<title id="figure-prefs-askonbackup-title">Choosing an Action on Backup Failure</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_askonbackup.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the action on backup failure pop up menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>




<sect2 id="multiple-file-instances">
<title>Using multiple instances of a file</title>

<para>A nice feature of <application>bluefish</application> is it allows you to open multiple instances of a file. Combined with either launching two instances of bluefish or opening the same file in two windows, it eases the modification of a file in one window while browsing it in another one.</para>

<para>This feature can be disabled in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>

<warning>

<para>Be aware that the last closed instance of the file wins. Hence it is important that you remember which instance is the modified one. You can, for example, always open the file to be modified on the left side of your screen, the file to be browsed on the right side.</para>
</warning>
</sect2>

</sect1>


<sect1 id="prefs-user-interface">
<title>Customizing the user interface</title>
<para>The <guilabel>User interface</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel allows you to customize most part of the user interface:
<figure id="figure-prefs-ui-tab">
<title id="figure-prefs-files-ui-title">The User Interface Preference Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_ui_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the User Interface preferences panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect1>

<sect1 id="changing-filetypes">
<title>Modifying file types</title>
<para>In the <guilabel>Filetypes</guilabel>  tab of the <guilabel>Edit preferences</guilabel> panel you can define all file types that should be recognized by <application>bluefish</application>.</para>
<para>The file types consist of:</para>
<orderedlist>
<listitem>
<para>a label (this label is also used in the file filters, and in the highlighting patterns).</para>
</listitem>
<listitem>
<para>a list of extensions, separated by a colon (:).</para>
</listitem>
<listitem>
<para>the highlighting update characters. Upon a key press of one of these characters, the highlighting engine will refresh the highlighting around the cursor. If this field is empty, any character will force the highlighting engine to refresh. Special characters like the tab and the newline can be entered as \t and \n, the backslash itself is entered as \\.</para>
</listitem>
<listitem>
<para>the icon location for this file type.</para>
</listitem>
<listitem>
<para>whether this file type is editable by Bluefish (whether or not Bluefish should try to open it after a double click).</para>
</listitem>
<listitem>
<para>a regular expression that can be used to detect the file type if a file without extension is loaded.</para>
</listitem>
<listitem>
<para>the auto-tag-closing mode. A value of 0 means that Bluefish should not close XML/HTML tags, a value of 1 means it should close the tags XML style (&lt;br /&gt;), a value of 2 means HTML style.</para>
</listitem>
</orderedlist>
<para>You add, modify, delete, or move file types the same way it is described in <xref linkend="external-browsers"/>.</para>
<example id="adding-filetype"><title>Adding a file type</title>
<para>Let's say you use DocBook xsl stylesheets. Those files are recognized by <application>bluefish</application> as xml files, but they do not appear with the xml icon in the file browser as their extension (.xsl) is not listed in the <guilabel>Extensions</guilabel> field of the <guilabel>Filetypes</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>
<para>On the other hand, adding them to the xml file type would impede to group them into a stylesheet filter, where they belong from a semantical point of view. And you cannot add them to the provided stylesheet filetype made for css stylesheet, since the highlighting patterns are different.</para>
<para>To add an xsl stylesheet file type, execute the following steps:</para>
<orderedlist>
<?dbfo label-width="0.25in"?>
<listitem>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guilabel>Filetypes</guilabel> tab to display the <guilabel>Filetypes</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>Add</guibutton> button in the <guilabel>Filetypes</guilabel> part. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</listitem>
<listitem>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>Label</guimenu> field. Here enter <code>xsl stylesheet</code>.</para>
</listitem>
<listitem>
<para>Click in the <guilabel>Extensions</guilabel> zone and enter the extension: <code>.xsl</code>.</para>
</listitem>
<listitem>
<para>Click in the <guilabel>Update chars</guilabel> field of the <guilabel>xml</guilabel> filetype line to copy and paste this field into the corresponding field of the <guilabel>xsl stylesheet</guilabel> filetype line. Once the field is highlighted, use <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> to copy the field. Click again in the <guilabel>Update chars</guilabel> field of the <guilabel>xsl stylesheet</guilabel> filetype line and use <keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo> to paste the field.</para>
</listitem>
<listitem>
<para>For the icon field, you can either use the xml icon path used in the <guilabel>Icon</guilabel> field of the <guilabel>xml</guilabel> filetype line or better create a new icon based on the xml one by changing its colors with the Colormap Rotation filter of <application>gimp</application>, located under the <guimenu>Filters</guimenu><guisubmenu>Colors</guisubmenu><guisubmenu>Map...</guisubmenu> menu.</para>
<para>To do it, first copy the xml icon on your Desktop, apply the filter on it, and save it under <filename>bluefish_icon_xsl.png</filename> in a dedicated folder in your home directory, for example <filename>~/Pictures</filename> for Mac users.</para>
<para>Whichever icon you decided to use, click on the <guilabel>Icon</guilabel> field to enter its path.</para>
</listitem>
<listitem>
<para>Check the <guilabel>Editable</guilabel> box, if it is not already checked.</para>
</listitem>
<listitem>
<para>Copy and paste <guilabel>Content regex</guilabel> field of the <guilabel>xml</guilabel> filetype line into the corresponding field of the <guilabel>xsl stylesheet</guilabel> filetype line.</para>
</listitem>
<listitem>
<para>Set the <guilabel>Auto close tags mode</guilabel> to 1.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</listitem>
</orderedlist>
</example>
<note>
<para>If you want to enter more than one extension in the <guilabel>Extensions</guilabel> field, you should separate them with a colon.</para>
<para>When you define a new filetype, you should also provide new highlighting patterns.</para>
</note>
</sect1>

<sect1 id="modifying-filefilters">
<title>Modifying the files filters</title>
<para>The files filters allow you to group files types from the usage point of view. Once a file filter is created, you can view, hide, or open files based on a filter in the <guilabel>File browser</guilabel> contextual menu.</para>
<para>The file filters consist of:</para>
<orderedlist>
<listitem>
<para>a label.</para>
</listitem>
<listitem>
<para>whether or not the filter as defined in the <guilabel>Filetypes in filter</guilabel> hides the retrieved files or shows them.</para>
</listitem>
<listitem>
<para>a list of filetypes, as defined in the <guilabel>Filetypes</guilabel> part, separated by a colon.</para>
</listitem>
</orderedlist>
<para>You add, modify, delete, or move file types the same way it is described in <xref linkend="external-browsers"/>.</para>
<example id="adding-filefilters"><title>Adding a file filter</title>
<para>Following with our example in <xref linkend="changing-filetypes"/>, we can add a stylesheet filter to group css and xsl stylesheets together.</para>
<para>To add a stylesheet filter, execute the following steps:</para>
<orderedlist spacing="compact">
<listitem>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guilabel>Filetypes</guilabel> tab to display the <guilabel>Filetypes</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>Add</guibutton> button in the <guilabel>Filefilters</guilabel> part at the bottom. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</listitem>
<listitem>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>Label</guimenu> field. Here enter <code>All stylesheets</code>.</para>
</listitem>
<listitem>
<para>Check the <guilabel>Inverse filter</guilabel> box.</para>
</listitem>
<listitem>
<para>Click in the <guilabel>Filetypes in filter</guilabel> field  and enter the filetypes you want to group together, separated with a colon. Here it is <code>stylesheet:xsl stylesheet</code>.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</listitem>
</orderedlist>
</example>
<important>
<para>The file types used in the <guilabel>Filetypes in filter</guilabel> match those defined in the <guilabel>Filetypes</guilabel> part. Do not confuse them with the file extensions. For example the <guilabel>C programming</guilabel> file filter matches c and image filetypes, i.e. files whose extensions are .c, .h, etc...</para>
</important>
</sect1>



<sect1 id="changing-highlighting-patterns">
<title>Modifying the highlighting patterns</title>
<para>The highlight patterns are build from Perl compatible regular expressions. A pattern has options for coloring and styling the text it matches. Within a match other patterns can be used to color parts of that match. There are three types of patterns:
<orderedlist spacing="compact">
<listitem><para>Start pattern and end pattern: that is two distinct patterns, match from the start pattern to the end pattern</para></listitem>
<listitem><para>Only start pattern: that is a unique pattern that matches from start to end</para></listitem>
<listitem><para>Subpattern from parent: that is a subpattern from the parent pattern, specified by the range in the parent pattern.</para></listitem>
</orderedlist>
</para>
<para>One specific pattern can also be used within several other parent patterns. The parent-match option is a regular expression that defines all parents for a certain pattern. If empty it will default to ^top$, so basically it will be on the top level.</para>
<para>So how does it work? Lets take a look at a little example text, a piece of PHP code within some HTML code: <programlisting>&lt;p align="center"&gt;
&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting></para>
<para>The first thing the highlighting engine does is finding the pattern that has the lowest match. Using the default patterns for PHP, the pattern named <guilabel>HTML</guilabel>: 
<figure id="figure-highlighting-pattern1">
<title id="figure-highlighting-pattern1-title">The HTML Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern1.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has a match at position 0:
<programlisting>&lt;p align="center"&gt;</programlisting></para>




<para>So now the highlighting engine searches for the lowest match in all subpatterns of <guilabel>HTML</guilabel>, in the region matched by a type 2 pattern. Again, the lowest match will count. The pattern named <guilabel>&lt;html&gt; Tags</guilabel>:
<figure id="figure-highlighting-pattern2">
<title id="figure-highlighting-pattern2-title">The &lt;html&gt; Tags Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern2.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the &lt;html&gt; Tags pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has a match at position 1. This pattern is a type 3 pattern, so it matches a subpattern of the parent: <programlisting>p</programlisting></para>



<para>The match from subpattern <guilabel>&lt;html&gt; Tags</guilabel> ends at position 2 and it does not have any child patterns, so the highlighting engine continues at position 2 with all subpatterns from <guilabel>HTML</guilabel>. A type 2 pattern named <guilabel>HTML Attributes</guilabel>:
<figure id="figure-highlighting-pattern3">
<title id="figure-highlighting-pattern3-title">The HTML Attributes Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern3.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML Attributes pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has the lowest match: <programlisting>align="center"</programlisting></para>





<para>This pattern does have a child pattern, again a type 3 pattern called <guilabel>HTML Attribute Contents</guilabel>:
<figure id="figure-highlighting-pattern4">
<title id="figure-highlighting-pattern4-title">The HTML Attribute Contents Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern4.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML Attribute Contents pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>matching: <programlisting>"center"</programlisting></para>



<para>The pattern <guilabel>HTML Attribute Contents</guilabel> does not have any child patterns, and subpatterns of <guilabel>HTML Attributes</guilabel> do not have any more matches, and also <guilabel>HTML</guilabel> subpatterns do not have any more matches. So we are back on the main level, the remaining code to highlight is: <programlisting>&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting></para>



<para>Now a pattern named <guilabel>PHP Block</guilabel>:
<figure id="figure-highlighting-pattern5">
<title id="figure-highlighting-pattern5-title">The PHP Block Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern5.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the PHP Block pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has the lowest match. This is a type 1 pattern, so the highlight engine continues with all the remaining code, but it will not only search for the lowest match of the child patterns of <guilabel>PHP Block</guilabel>, but it will also ue it for the end pattern of <guilabel>PHP Block</guilabel>. The lowest match in this example is a pattern named <guilabel>Comment (C++/single line)</guilabel>:
<figure id="figure-highlighting-pattern6">
<title id="figure-highlighting-pattern6-title">The Comment (C++/single line) Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern6.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Comment (C++/single line) pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>As you can see the ?&gt; within the comment does not end the <literal>php</literal> pattern, because it lies within a subpattern of <guilabel>PHP Block</guilabel>: <programlisting>// this is a comment ?&gt;</programlisting></para>
<para>The pattern <guilabel>Comment (C++/single line)</guilabel> does not have any child patterns, so the remaining code for the <guilabel>PHP</guilabel> subpatterns is: <programlisting>?&gt;</programlisting></para>
<para>It is very obvious now, the lowest match will be the end pattern of the <guilabel>php</guilabel> pattern, so we're back on the main level, and we have matched all of the code!
<figure id="figure-syntax-highlighting-example">
<title id="figure-syntax-highlighting-example-title">Syntax Highlighting Example</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/syntax_highlighting_example.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a syntax highlighting example</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The config file for highlighting is a colon separated array with the following content:<programlisting>mode:
patternname:
case_sensitive(0-on/1-off):
start reg-ex:
end reg-ex:
start &amp; end pattern(1), only start(2), subpattern(3):
parent-match:
foreground-color:
background-color:
don't change weight(0), non-bold(1), bold(2):
don't change style(0), non-italic(1), italic(2):</programlisting></para>
<para>The same options are found in the syntax highlighting preferences.</para>
<para>As an exercise you may want to add the highlighting patterns for the xsl stylesheet file type created previously. They will be based on the xml patterns with just small changes.</para>
<note><para>If you check the force bold weight check box, you should also check that the font you use has a bold variant in the <guilabel>Editor</guilabel> tab of the <guilabel>Preferences</guilabel> panel.</para></note>
</sect1>

</sect1>

</chapter>
