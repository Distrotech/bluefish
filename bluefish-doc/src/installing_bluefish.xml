<!--
this file belongs to bluefish, a web development environment
Copyright (C) 2002  Denny Reeh

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->
<chapter id="installing-bluefish">
  <title>Installing Bluefish</title>

  <sect1 id="installing-bluefish-requirements">
    <title>Requirements</title>
    <para>Bluefish aims to be portable; that is, wherever GTK is ported. A
    comparatively small set of external libraries are necessary for it to
    work. Any recent GNU/Linux distribution or other *NIX with GTK2 installed
    should be sufficient. In addition to the list of requirements below, you
    may also want to look at <xref linkend="installing-bluefish-specific-issues" />. Note that
    these requirements fit the GTK2 version. If you only have GTK1, you want
    the last GTK1-version, v0.7.</para>
    <itemizedlist spacing="compact">
      <title>The main requirements:</title>
      <listitem>
        <para>gtk v2.0</para>
      </listitem>
      <listitem>
        <para>libpcre</para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <title>Optional requirements:</title>
      <listitem>
        <para>gnome_vfs <emphasis>- for remote file support</emphasis></para>
      </listitem>
      <listitem>
         <para>libaspell <emphasis>- spell checker</emphasis></para>
      </listitem>
      <listitem>
         <para>grep &amp; find <emphasis>- used by the <xref linkend="open-advanced" /></emphasis> dialog.</para>         
      </listitem>
    </itemizedlist>
  <?linebreakus?>
    <para>Compiling Bluefish requires a few additional packages. However, binary packages exist for many platforms, so it is likely you will not need to compile. Now, let us assume you want to compile, perhaps to get the latest and greatest from CVS. The requirements are as follows:</para>
    <itemizedlist>
      <listitem>
         <para>Development files (header files, etc) for the packages above. <emphasis>These are often distributed as separate packages. There is also a high probability you have these installed already.</emphasis></para>
      </listitem>
      <listitem>
        <para> gcc <emphasis>- Bluefish has been tested to compile on the 2.95 and 3.x
        branches.</emphasis></para>
      </listitem>
      <listitem>
         <para>gmake or BSD make</para>
      </listitem>
      <listitem>
         <para>autoconf (<emphasis>only if you are going to compile from CVS</emphasis>)</para>
      </listitem>
    </itemizedlist>
  </sect1>

<?linebreak?>

  <sect1 id="installing-bluefish-quick-start">
    <title>Quick Standard Installation</title>
    <para>There are two main methods for installing Bluefish: Compile from source or install a binary package. Binary installation is easiest, so we will cover that first. There are a few different approaches, caused by the differences between systems. We will start off by summarizing a few really quick and simple approaches before dealing with this problem more extensively.</para>
 <?linebreakus?>
    <itemizedlist spacing="compact">
      <listitem>
         <para>Debian (needs root rights): <command>apt-get update &amp;&amp; apt-get install bluefish</command></para>
      </listitem>
      <listitem>
         <para>Red Hat, Mandrake (and other Linux distributions that support rpm): Download the latest .rpm from the <ulink url="http://bluefish.openoffice.nl/">Bluefish website</ulink></para>
      </listitem>
      <listitem>
         <para>FreeBSD, NetBSD and OpenBSD distribute Bluefish through their packaging systems.</para>
      </listitem>
      <listitem>
         <para>To compile, or install on another platform, see <xref linkend="installing-bluefish-source"></xref>.</para>
      </listitem>
    </itemizedlist>
  </sect1>
<?linebreaka4?>
  <sect1 id="installing-bluefish-specific-issues">
    <title>System Specific Installation Issues</title>
    <para>Different systems have different approaches to solutions and packaging. You might find the information below interesting.</para>
    <itemizedlist spacing="compact">
      <title>Mandrake:</title>
      <listitem>
         <para>libpcre: Breaks pcre into 3 different pieces, make sure pcre-devel is installed if compiling from source. Try this command: <screen>$ rpm -ql pcre-devel</screen></para>
      </listitem>
     <listitem>
        <remark>... more nags with Mandrake?</remark>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <title>Debian:</title>
      <listitem>
        <para>Debian Woody (current Oldstable) has an old GTK 2.0.2 version, that contains several known bugs, but they are not serious.</para>
      </listitem>
      <listitem>
        <para>Debian Sarge (current Stable) has Bluefish 1.0 and GTK 2.6.4 version.</para>
      </listitem>
      <listitem>
        <para>Debian Sid (Unstable) will always have the latest stable Bluefish version.</para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <title>Cygwin:</title>
      <listitem>
        <para>You need to install the following packages:</para>
        <itemizedlist spacing="compact">
          <listitem>
            <para><emphasis>Base section:</emphasis> cygrunsrv (<emphasis>installs a necessary service to Windows</emphasis>)</para>
          </listitem>
          <listitem>
            <para><emphasis>Devel section:</emphasis> ORBit2-devel, atk-devel, autoconf2.5, automake1.x, binutils, bison, catgets, cvs, gcc, gettext, gettext-devel, glib2-devel, gtk2-x11-devel,libbonobo2-devel, libfreetype2-devel, libxml2-devel, make, pango-devel, pcre, pcre-devel, pkgconfig</para>
          </listitem>
          <listitem>
            <para><emphasis>Gnome section:</emphasis> gnome-vfs2, libgnome2</para>
          </listitem>
          <listitem>
            <para><emphasis>X11 section:</emphasis> xorg-x11-devel, xorg-x11-base, xorg-x11-bin, xorg-x11-bin-dlls, xorg-x11-fenc, xorg-x11-fnts, xorg-x11-fsrc, xorg-x11-100, xorg-x11-fcyr, xorg-x11-fscl</para>
          </listitem>
          <listitem>
            <para><emphasis>Optional:</emphasis> aspell-dev (<emphasis>Text</emphasis>, for spell-checker), aspell-<replaceable>LANG</replaceable> (<emphasis>Text</emphasis>, dictionary for your language), bzip2 (<emphasis>Utils</emphasis>, to decompress bzip2-compressed archives), desktop-file-utils (<emphasis>Utils</emphasis>, freedesktop.org menu support), gnome-mime-data (<emphasis>Utils</emphasis>, old GNOME &lt;= 2.4 MIME support), hicolor-icon-theme (<emphasis>X11</emphasis>), libgnomeui2 (<emphasis>Gnome</emphasis>), libxml2 (<emphasis>Devel</emphasis>, xmllint application), python (<emphasis>Interpreters</emphasis>, only for Bluefish 1.1 and above), shared-mime-info (<emphasis>Utils</emphasis>, freedesktop.org shared MIME-info database), tidy (<emphasis>Web</emphasis>, for tidy application), wget (<emphasis>Web</emphasis>, to download Bluefish archives)</para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>To run Bluefish, we need to start the <application>cygrunsrv</application> Service. First log in to a Cygwin-Shell and run <command>/usr/bin/cygserver-config</command>. Then open a Windows shell (<filename>cmd.exe</filename> or <filename>command.exe</filename>) and type <command>net start cygserver</command>. To automatically start the service with Windows, set <varname>Starttype</varname> for <application>cygrunsrv</application> to <emphasis>Automatic</emphasis> (see Start > Control Panel > Computer Administration > Services and Applications > Services : CYGWIN cygserver : Properties).</para>
      </listitem>
      <listitem>
        <para>To allow Bluefish to use the Cygserver facilities (to use the XSI IPC function calls like <function>msgget</function> successfully) we need to export the <envar>CYGWIN</envar> environment variable. Add the following line to your <filename>~/.bash_profile</filename>:</para>
        <programlisting>export CYGWIN=server</programlisting>
      </listitem>
    </itemizedlist>
  </sect1>

<?linebreak?>

  <sect1 id="installing-bluefish-source">
    <title>Installing a Bluefish Source Distribution</title>
    <para>By installing Bluefish from source, you may be able to get a newer version (from CVS) than those distributed as binaries. You may also need to compile from source if no binary is available for your system.</para>

    <sect2 id="installing-bluefish-quick-overview">
      <title>Quick Installation Overview</title>
      <para>This is the short installation description. Consult the other chapters if you are in doubt.</para>
<?linebreaka4?>
      <para>Bluefish is installed using the standard 'configure, make, make install' steps. Assuming you have downloaded a bluefish source package, for instance <filename>bluefish-ver.tar.gz</filename> (naturally, change the filename to what's appropriate), you complete the installation with the following steps:</para>
      <orderedlist spacing="compact">
        <listitem>
          <para><command>tar -zxvf bluefish-ver.tar.gz</command></para>
        </listitem>
        <listitem>
          <para><command>cd bluefish-ver</command></para>
        </listitem>
        <listitem>
          <para><command>./configure</command></para>
        </listitem>
        <listitem>
          <para><command>make</command></para>
        </listitem>
        <listitem>
          <para><command>su -c 'make install'</command></para>
        </listitem>
        <listitem>
           <para>Now, type <command>bluefish</command> to run. You may delete the <filename>bluefish-ver</filename> directory.</para>
        </listitem>
      </orderedlist>
<?linebreaka4?>
      <para>The <command>configure</command> script is used to automatically find the appropriate settings for your system. Because of differences between systems, this compile-time configuration is necessary, and configure solves this challenge easily -- with an added bonus of telling whether you have everything needed to compile.</para>
<?linebreaka4?>
      <para>The configure-script can be, um, configured. This is something you most likely will not need to do, but it is easy to do if necessary. For a complete list of configure options, see <xref linkend="installing-bluefish-configure" /></para>
    </sect2>

<?linebreaka4?>

    <sect2 id="installing-bluefish-devel-source">
      <title>Installing from Development Source Tree</title>
      <para>You can get the latest Bluefish version via CVS using the instructions in <xref linkend="getting-bluefish-cvs" />. Next, install it with the following steps:</para>
<?linebreaka4?>
      <orderedlist spacing="compact">
        <listitem>
          <para>Enter the directory containing the bluefish source files: <command>cd bluefish-gtk2</command></para>
        </listitem>
        <listitem>
          <para>Next, generate the configure script by running <command>autoconf</command></para>
        </listitem>
        <listitem>
          <para>Then, you run <command>configure</command> with whatever options you might want. </para>
          <para>This example will cause <command>make install</command> to install Bluefish with the specified directory as prefix (i.e. the binary is installed in <filename>/usr/local/bf-cvs/bin/bluefish</filename>). This is most likely not what you want -- just run configure without parameters instead.</para>
          <screen>$ ./configure --prefix=/usr/local/bf-cvs</screen>
          <para>If configure fails, it will probably give a hint telling you what is missing or wrong.</para>
        </listitem>
        <listitem>
          <para>Assuming it completed successfully, your next step is to compile Bluefish. To do this, run <command>make</command>.</para>
        </listitem>
        <listitem>
          <para>When <command>make</command> has completed, you can install Bluefish: (<command>su</command> to root first, unless you specified a user writable prefix to configure), then issue: <command># make install</command>.</para>
        </listitem>
      </orderedlist>
<?linebreaka4?>
      <para>To update the sources at a later time, you run the command <command>cvs -z3 -q update</command> from within the <filename>bluefish-gtk2</filename> directory.</para>
    </sect2>

<?linebreaka4?>

    <sect2 id="installing-bluefish-problems">
      <title>Problems Compiling?</title>
      <para>If compilation fails, first make sure you have the necessary utilities and libraries. See <xref linkend="installing-bluefish-requirements" />.</para>
      <para>Next, see if your system is mentioned in <xref linkend="installing-bluefish-specific-issues" />.</para>
<?linebreaka4?>
      <para>Below is a list of well known problems that have been mentioned on the bluefish-dev list:</para>
      <itemizedlist>
        <listitem>
          <para>make: *** No targets specified and no makefile found. Stop.</para>
          <para>This will happen if <emphasis>configure</emphasis> fails and you try to run <command>make</command>. It also happens if you're running <command>make</command> from the wrong directory.</para>
        </listitem>
        <listitem>
          <para>... more trouble to come ;-)</para>
        </listitem>
      </itemizedlist>
<?linebreaka4?>
      <para>If you're unable to find a solution (or if you think you have a solution others might want), feel free to contact us on the <emphasis>bluefish-dev</emphasis> list (See <xref linkend="bluefish-contact" />).</para>
   </sect2>
  </sect1>

  <sect1 id="installing-bluefish-configure">
    <title>Configure Options</title>
    <para>This section describes all the configure options available for bluefish.</para>
    <sect2 id="installing-bluefish-standard-flags">
      <title>Standard configuration flags</title>
      <variablelist>
        <title>General configure options:</title>
        <varlistentry>
          <term>
            <option>-h</option>,
            <option>--help</option>
          </term>
          <listitem>
            <para>display this help and exit</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--help=short</option>
          </term>
          <listitem>
            <para>display options specific to this package</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--help=recursive</option>
          </term>
          <listitem>
            <para>display the short help of all the included packages</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>-V</option>,
            <option>--version</option>
          </term>
          <listitem>
            <para>display version information and exit</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>-q</option>,
            <option>--quiet</option>,
            <option>--silent</option>
          </term>
          <listitem>
            <para>do not print "checking..." messages</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--cache-file=FILE</option>
          </term>
          <listitem>
            <para>cache test results in FILE [disabled by default]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>-C</option>,
            <option>--config-cache</option>
          </term>
          <listitem>
            <para>alias for <option>--cache-file=config.cache</option></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>-n</option>,
            <option>--no-create</option>
          </term>
          <listitem>
            <para>do not create output files</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--srcdir=DIR</option>
          </term>
          <listitem>
            <para>find the sources in DIR [configure dir or <filename>..</filename> by default]</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <title>Installation directories:</title>
        <tip id="tip_exec-prefix">
          <title>Tip</title>
          <para>By default, <command>make install</command> will install all the files in <filename>/usr/local/bin</filename>, <filename>/usr/local/lib</filename>, etc. You can specify an installation prefix other than <filename>/usr/local</filename> using <option>--prefix</option>, for instance <option>--prefix=<replaceable>$HOME</replaceable></option>.</para>
        </tip>
        <varlistentry>
          <term>
            <option>--prefix=PREFIX</option>
          </term>
          <listitem>
            <para>install architecture-independent files in PREFIX [<filename>/usr/local</filename> by default]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--exec-prefix=EPREFIX</option>
          </term>
          <listitem>
            <para>install architecture-dependent files in EPREFIX [<filename>PREFIX</filename> by default]</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <title>Fine tuning of the installation directories:</title>
        <tip id="tip_fine-tuning">
          <title>Tip</title>
          <para>For better control, use the options below. Defaults are shown within brackets.</para>
        </tip>
        <varlistentry>
          <term>
            <option>--bindir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>user executables [<filename>EPREFIX/bin</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--sbindir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>system admin executables [<filename>EPREFIX/sbin</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--libexecdir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>program executables [<filename>EPREFIX/libexec</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--datadir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>read-only architecture-independent data [<filename>PREFIX/share</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--sysconfdir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>read-only single-machine data [<filename>PREFIX/etc</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--sharedstatedir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>modifiable architecture-independent data [<filename>PREFIX/com</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--localstatedir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>modifiable single-machine data [<filename>PREFIX/var</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--libdir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>object code libraries [<filename>EPREFIX/lib</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--includedir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>C header files [<filename>PREFIX/include</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--oldincludedir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>C header files for non-gcc
            [<filename>/usr/include</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--infodir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>info documentation [<filename>PREFIX/info</filename>]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--mandir=<replaceable>DIR</replaceable></option>
          </term>
          <listitem>
            <para>man documentation [<filename>PREFIX/man</filename>]</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <title>Program names:</title>
        <varlistentry>
          <term>
            <option>--program-prefix=<replaceable>PREFIX</replaceable></option>
          </term>
          <listitem>
            <para>prepend PREFIX to installed program names</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--program-suffix=<replaceable>SUFFIX</replaceable></option>
          </term>
          <listitem>
            <para>append SUFFIX to installed program names</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--program-transform-name=<replaceable>PROGRAM</replaceable></option>
          </term>
          <listitem>
            <para>run sed PROGRAM on installed program names</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <title>System types:</title>
        <varlistentry>
          <term>
            <option>--build=<replaceable>BUILD</replaceable></option>
          </term>
          <listitem>
            <para>configure for building on BUILD [guessed]</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--host=<replaceable>HOST</replaceable></option>
          </term>
          <listitem>
            <para>cross-compile to build programs to run on HOST [BUILD]</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <variablelist>
        <title>Some influential environment variables:</title>
        <tip id="tip_environment-variables">
          <title>Tip</title>
          <para>Use these variables to override the choices made by <command>configure</command> or to help it to find libraries and programs with nonstandard names/locations.</para>
        </tip>
        <varlistentry>
          <term>
            <varname>CC=<replaceable>COMMAND</replaceable></varname>
          </term>
          <listitem>
            <para>C compiler command</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <varname>CFLAGS=<replaceable>FLAGS</replaceable></varname>
          </term>
          <listitem>
            <para>C compiler flags</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <varname>LDFLAGS=<replaceable>FLAGS</replaceable></varname>
          </term>
          <listitem>
            <para>linker flags, e.g. -L&lt;lib dir&gt; if you have libraries in a nonstandard directory &lt;lib dir&gt;</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <varname>CPPFLAGS=<replaceable>FLAGS</replaceable></varname>
          </term>
          <listitem>
            <para>C/C++ preprocessor flags, e.g. -I&lt;include dir&gt; if you have headers in a nonstandard directory &lt;include dir&gt;</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <varname>CPP=<replaceable>COMMAND</replaceable></varname>
          </term>
          <listitem>
            <para>C preprocessor</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="installing-bluefish-personal-flags">
      <title>Flags personal to bluefish</title>
      <variablelist>
        <title>Optional Features:</title>
        <tip id="tip_enable-disable">
          <title>Note</title>
            <para>It works as is: <option>--enable-<replaceable>feature</replaceable></option> enables the feature, <option>--disable-<replaceable>feature</replaceable></option> or <option>--enable-<replaceable>feature</replaceable>=no</option> disables the feature.</para>
            <para>By default, the <option>--enable-<replaceable>feature</replaceable></option> option is not enabled, you should pass it if you want to get it.</para>
            <para>The <option>--disable-<replaceable>feature</replaceable></option> option is not disabled, you should pass it if you want to disable it.</para>
        </tip>
        <varlistentry>
          <term>
            <option>--enable-auto-optimization</option>
          </term>
          <listitem>
            <para>Optimizes the build process for a given architecture if possible. It works only on a selected set of x86 platforms, which relies on the result of:</para>
            <orderedlist>
              <listitem>
                <para><command>uname -p</command> or <command>grep "model name" /proc/cpuinfo | cut -d: -f2</command> to detect the architecture</para>
              </listitem>
              <listitem>
                <para>the version of gcc to pass the arguments (tested gcc versions: 3.2.*, 3.0.*, 2.95.*)</para>
              </listitem>
            </orderedlist>
<?linebreakus?>
            <para>Machines: Intel(R) Pentium(R) 4CPU, Pentium III, AMD-K6 (tm) 3D, Pentium 75 - 200, Pentium II, AMD Athlon(TM) XP. Other machines are ignored.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--enable-gcc3-optimization=<replaceable>TYPE</replaceable></option>
          </term>
          <listitem>
            <para>Optimizes the build process for a given architecture if possible.</para>
            <para>Type can be: i386, i486, pentium, pentium-mmx, pentiumpro, pentium2, pentium3, pentium4, k6, k6-2, k6-3, athlon, athlon-tbird, athlon-4, athlon-xp, athlon-mp, winchip-c6, winchip2 or c3. Other machines are ignored.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--enable-gcc2-optimization=<replaceable>TYPE</replaceable></option>
          </term>
          <listitem>
            <para>optimizes the build process for a given architecture if possible.</para>
            <para>Type can be: i386, i486, pentium, pentiumpro or k6. Other machines are ignored</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--enable-debugging-output</option>
          </term>
          <listitem>
            <para>turns debugging output on (this option impacts performance)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--disable-splash-screen</option>
          </term>
          <listitem>
            <para>suppresses the display of the splash screen at launch time (Bluefish launches faster)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--enable-highlight-profiling</option>
          </term>
          <listitem>
            <para>outputs statistics on where the program spends most of its time when highlighting patterns.</para>
            <para>Usage: for debugging highlight patterns or trying to optimize the program.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--enable-development</option>
          </term>
          <listitem>
            <para>enables development checks (slows down the program)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--enable-gprof-profiling</option>
          </term>
          <listitem>
            <para>outputs statistics on where the program spends most of its time by generating extra code to write profile information suitable for the analysis. (slows down the program)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--enable-gcoc-coverage</option>
          </term>
          <listitem>
            <para>Purpose: to be able to collect statistics on how many times each branch is executed and how long it has lasted. Creates data files for the gcov code-coverage utility. (slows down the program)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--disable-nls</option>
          </term>
          <listitem>
            <para>disables the Native Language Support (might speed up the program)</para>
          </listitem>
        </varlistentry>
      </variablelist>
 <?linebreak?>
      <variablelist>
        <title>Optional Packages:</title>
        <tip id="tip_with-without">
          <title>Note</title>
            <para>This works as is: <option>--with-<replaceable>foo</replaceable>=<replaceable>bar</replaceable></option> enables the flag, <option>--without-<replaceable>foo</replaceable></option> disables it. When not enabled, the default is used.</para>
        </tip>
        <varlistentry>
          <term>
            <option>--with-gnome1-menu=<replaceable>PATH</replaceable></option>
          </term>
          <listitem>
            <para>Customized path for the gnome1 menu. Disabled by default.</para>
            <para>Usage: <option>--with-gnome1-menu=<replaceable>PATH</replaceable></option> or <option>--without-gnome1-menu</option></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--with-freedesktop_org-menu=<replaceable>PATH</replaceable></option>
          </term>
          <listitem>
            <para>Customized path for the freedesktop.org (gnome and kde) menu. Defaults to autodetection.</para>
            <para>Usage: <option>--with-freedesktop_org-menu=<replaceable>PATH</replaceable></option> or <option>--without-freedesktop_org-menu</option></para>
            <para>Autodetection tries:</para>
            <para>
              <itemizedlist>
                <listitem>
                  <para><filename>/usr/share/applications</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/applications</filename></para>
                </listitem>
                <listitem>
                  <para><filename>/usr/X11R6/share/gnome/applications</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/gnome/applications</filename></para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--with-freedesktop_org-mime=<replaceable>PATH</replaceable></option>
          </term>
          <listitem>
            <para>Customized path for the freedesktop.org (gnome and kde) mime. Defaults to autodetection.</para>
            <para>Usage: <option>--with-freedesktop_org-mime=<replaceable>PATH</replaceable></option> or <option>--without-freedesktop_org-mime</option></para>
            <para>Autodetection tries:</para>
            <para>
              <itemizedlist>
                <listitem>
                  <para><filename>/usr/share/mime</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/mime</filename></para>
                </listitem>
                <listitem>
                  <para><filename>/usr/X11R6/share/gnome/mime</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/gnome/mime</filename></para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--with-gnome2_4-mime=<replaceable>PATH</replaceable></option>
          </term>
          <listitem>
            <para>Customized path for the GNOME &lt;= 2.4 mime support. Defaults to autodetection.</para>
            <para>Usage: <option>--with-gnome2_4-mime=<replaceable>PATH</replaceable></option> or <option>--without-gnome2_4-mime</option></para>
            <para>Autodetection tries:</para>
            <para>
              <itemizedlist>
                <listitem>
                  <para><filename>/usr/share/mime-info</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/mime-info</filename></para>
                </listitem>
                <listitem>
                  <para><filename>/usr/X11R6/share/gnome/mime-info</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/gnome/mime-info</filename></para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--with-gnome2_4-appreg=<replaceable>PATH</replaceable></option>
          </term>
          <listitem>
            <para>Customized path for the GNOME &lt;= 2.4 application registry. Defaults to autodetection.</para>
            <para>Usage: <option>--with-gnome2_4-appreg=<replaceable>PATH</replaceable></option> or <option>--without-gnome2_4-appreg</option></para>
            <para>Autodetection tries:</para>
            <para>
              <itemizedlist>
                <listitem>
                  <para><filename>/usr/share/application-registry</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/application-registry</filename></para>
                </listitem> 
                <listitem>
                  <para><filename>/usr/X11R6/share/gnome/application-registry</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/gnome/application-registry</filename></para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--with-icon-path=<replaceable>PATH</replaceable></option>
          </term>
          <listitem>
            <para>Customized path for the icon. Defaults to auto detection.</para>
            <para>Usage: <option>--with-icon-path=<replaceable>PATH</replaceable></option> or <option>--without-icon-path</option></para>
            <para>Autodetection tries:</para>
            <para>
              <itemizedlist>
                <listitem>
                  <para><filename>/usr/share/pixmaps</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/pixmaps</filename></para>
                </listitem>
                <listitem>
                  <para><filename>/usr/X11R6/share/gnome/pixmaps</filename></para>
                </listitem>
                <listitem>
                  <para><filename><replaceable>PREFIX</replaceable>/share/gnome/pixmaps</filename></para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--with-libiconv-prefix=<replaceable>PATH</replaceable></option>
          </term>
          <listitem>
            <para>Customized path for libiconv top level installation.</para>
            <para>Usage: <option>--with-libiconv-prefix=<replaceable>PATH</replaceable></option></para>
            <para>Effect: searches for libiconv in <filename><replaceable>PATH</replaceable>/include</filename> and <filename><replaceable>PATH</replaceable>/lib</filename></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <option>--with-included-gettext</option>
          </term>
          <listitem>
            <para>use the GNU gettext library included in the package</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>

<?linebreaka4?>

  <sect1 id="installing-bluefish-binary">
    <title>Installing a Binary Distribution</title>
    <para>Different packages -- different installation. We will cover only a few
    approaches here<footnote>
        <para>If you want to contribute a description on how to install
        Bluefish on your system, just drop us a note. :-)</para>
      </footnote>, since the installation is very system-specific ;-). Let us
    have a look at some different systems:</para>
    <para>For Debian users this is very simple. To download, install, and
    configure bluefish in <quote>One Swift Move</quote>, run: <screen>$ su - &amp;&amp; apt-get update &amp;&amp; apt-get install bluefish</screen>
    You can check if the version available through apt is the latest -- see
    the Bluefish homepage, and compare the version there with what
    <command>apt-cache show bluefish</command> tells you. If there is a
    newer version on the Bluefish site, download it and install the package
    like this: <command>dpkg -i bluefish-ver.deb</command></para>
    <para>For rpm based distributions, first check if your distribution has a
    recent Bluefish version. If it does not, download the rpm for your
    distribution from any of the Bluefish mirrors. Installing a
    downloaded rpm is as simple as pointing and clicking in your favorite GUI
    package manager, or issuing the following command from the command line (as root):
    <screen># rpm -Uvh bluefish-ver.rpm</screen></para>
    <para>If you're using FreeBSD, NetBSD or OpenBSD, we probably do not need
    to tell <emphasis>you</emphasis> how to use your favorite package system ;-)</para>
    <para>For Mac users, just install it via Fink.</para>
  </sect1>

<sect1 id="installing-bluefish-post-setup">
<title>Post-installation Setup</title>
<para>The first time you run Bluefish it will create a directory <filename>~/.bluefish</filename> where all Bluefish's configuration options are stored. This includes all preferences, customized menus, highlighting-patterns, file history, etc.</para>
<para>Bluefish will work right out of the box, but you can and should take advantage of the many customizations available. Change the font in the main text view if you do not like it, remove unused tool bars, add shortcuts to the customizable menu, and edit the list of browsers and external programs.</para>
<para>If you are upgrading from a previous version, perhaps CVS, you should note that the syntax highlighting may have changed. To make sure you have the latest highlighting patterns, follow the following procedure:</para>
 <procedure><title>Getting the new defaults after upgrading - First method</title>
<step>
<para>Exit Bluefish</para>
</step>
<step>
<para>Delete the <filename>highlighting</filename> file in your <filename>~/.bluefish</filename> directory.</para>
<para>Next time Bluefish is started, the new defaults will be loaded.</para>
</step>
</procedure>
<para>Note that this will also annihilate all your changes to the highlighting. Here's a more gentle approach:</para>
 <procedure><title>Getting the new defaults after upgrading - Second method</title>
<step>
<para>Exit Bluefish</para>
</step>
<step>
<para>Move your current highlighting file to highlighting.old</para>
</step>
<step>
<para>Start Bluefish to get the new patterns</para>
</step>
<step>
<para>Exit Bluefish</para>
</step>
<step>
<para>Run <command>diff -c highlighting.old highlighting</command> to find the differences.</para>
</step>
</procedure>
  <para>If your settings become corrupted, unusable, or you simply want to revert to the defaults, you may safely delete the <filename>~/.bluefish</filename> directory.</para>
  </sect1>
</chapter>