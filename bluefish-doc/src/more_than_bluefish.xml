<!--
Using Bluefish - a part of the Bluefish manual
Copyright (C) 2004  Olivier Sessink
Copyright (C) 2004-2006  The Bluefish Project Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-->

<chapter id="more-than-text-editor">
<title>More than a Text Editor</title>

<sect1 id="indenting">
<title>Indenting</title>
<para>To indent large sections of text, simply highlight the section and 
choose <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>.</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Shift Right</guimenuitem></menuchoice>. To remove an indentation, choose <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>,</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Shift Left</guimenuitem></menuchoice>.  There are corresponding buttons in the tool bar for these menu options (see later in this text).</para>
<para>By default, Bluefish will use tabs for indenting, but can be configured to use spaces if you have <guilabel>Use spaces to indent, not tabs</guilabel> selected in the Editor preferences panel. The number of spaces used is the same as the <guilabel>Tab width</guilabel> option in the same preferences panel.</para>
<para>Here's an extract of Dante's work indented with the <guilabel>Shift Right</guilabel> button in the main tool bar:
<figure id="figure-indenting_right">
<title id="figure-indenting_right-title">Indenting Part of a Text</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/indenting_right.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a text indented with the shift right button</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect1>

<sect1 id="auto-tag-closing">
<title>Auto tag closing</title>
<para>By default, Bluefish will automatically produce closing tags for HTML and XML documents. For example, if you type <literal>&lt;p&gt;</literal> within an HTML document, bluefish will produce <literal>&lt;/p&gt;</literal>. So, as soon as you finish typing a non-empty HTML tag, meaning the tag is supposed to have a closing tag, Bluefish will help you out and close the tag automatically. This feature can be turned off by unchecking the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>T</keycap></keycombo></shortcut><guimenu>Document</guimenu><guimenuitem>Auto Close HTML Tags</guimenuitem></menuchoice> menu option.</para>
<para>Bluefish has two modes for tag closing, an XML mode and an HTML mode. In XML mode, Bluefish will add a closing tag to any tag that is not closed itself with /&gt;. In HTML mode, Bluefish excludes all known tags that do not need a closing tag, such as &lt;br&gt; and &lt;img&gt;.</para>
<para>Bluefish will choose the mode based on the file type of the document. In the filetype preferences panel, the default mode for each file type can be set. See <xref linkend="changing-filetypes"/> for more info.</para>
</sect1>
<?pagebreaka4?>
<sect1 id="spell-checker">
<title>Spell checker</title>
<figure id="figure-spell-checker">
<title id="figure-spell-checker-title">Bluefish Spell Checker</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/spell_checker.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 spell checker</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
<para>Bluefish uses <ulink url="http://aspell.sourceforge.net/">aspell</ulink> for spell checking. If the aspell libraries are not installed on your system, then the spell checking feature will not be available. At the aspell web site you can also download dictionaries for many different languages.</para>
<para>To launch the spell checker, select <menuchoice><guimenu>Document</guimenu><guimenuitem>Check Spelling...</guimenuitem></menuchoice> or click on the <guilabel>ABC</guilabel> button on the main tool bar. The spell checker will launch in a separate window, which you can keep open as you edit files.</para>
<para>You have the option to check a whole document or just a selection, to use a personal or a session dictionary, and to choose the language depending on the installed dictionaries.</para>
<para> Click on <guilabel>Spell Check</guilabel> to start spell checking the current document.</para>
<para>You may want to set a default dictionary by first choosing the language in the <guilabel>Language</guilabel> pop up menu, then clicking on <guilabel>Set default</guilabel>.</para>
<para>Key words for different languages can be ignored using filters. Currently, the only filter is for HTML. If you want to help write more filters, join the <link linkend="bluefish-contact">mailing list</link>.</para>
</sect1>

<sect1 id="function-reference">
<title>Function reference</title>
<para>The function reference browser contains reference information for   different programming and markup languages. Currently, Bluefish comes with a PHP reference, a CSS 2.0 reference, an HTML reference, and a Python reference. The functions are grouped, depending on the language, by type, module, object, etc.</para>
<para>The function reference browser will display an info window on the bottom by checking the <guilabel>Show info window</guilabel> check box. In this window, information about the currently selected item is shown. The type of information shown can be configured in the right-click context menu (see Info Type later in this text).</para>
<para>In the reference browser's contextual menu, you can simply insert the text for the selected item by choosing <guilabel>Insert</guilabel>. Or, you can get a little help using <guilabel>Dialog</guilabel>, which launches a dialog window containing fields for the currently selected item's attributes or parameters. For a summary of an item's usage, choose <guilabel>Info</guilabel>. The contextual menu is also accessible on a group of functions and at the top level of a reference.
<figure id="figure-browser-reference-right-click">
<title id="figure-browser-reference-right-click-title">The Reference Browser Contextual Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_right_click.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the reference browser contextual menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The <guilabel>Options</guilabel> menu accessible via the contextual menu offers three actions:
<figure id="figure-browser-reference-options">
<title id="figure-browser-reference-options-title">The Reference Browser Options Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_options.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the reference browser options menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<itemizedlist>
<listitem>
<para><guilabel>Rescan reference files</guilabel> in case you have customized one of them, so that the new items be available.</para>
</listitem>
<listitem>
<para><guilabel>Left doubleclick action</guilabel>, which can be:</para>
<itemizedlist>
<listitem>
<para><guilabel>Insert</guilabel> to insert the function in the document for latter parametrizing if needed</para>
</listitem>
<listitem>
<para><guilabel>Dialog</guilabel> to insert the function in the document while filling in the parameters in a dialog window:
<figure id="figure-browser-reference-dialog">
<title id="figure-browser-reference-dialog-title">A Function Reference Dialog Window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a function reference dialog window</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
<listitem>
<para><guilabel>Info</guilabel> to display a window with all available info about the function:
<figure id="figure-browser-reference-info-window">
<title id="figure-browser-reference-info-window-title">Info available for a Function</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_info_window.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of all info available for a function</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist> 
</listitem>
<listitem>
<para><guilabel>Info Type</guilabel>: this is where you can customize what appears in the info window. It can be:</para>
<itemizedlist>
<listitem>
<para>the function <guilabel>Description</guilabel> (this is the default)</para>
</listitem>
<listitem>
<para>the <guilabel>Attributes/Parameters</guilabel> of the function</para>
</listitem>
<listitem>
<para>some <guilabel>Notes</guilabel> about the function</para>
</listitem>
</itemizedlist> 
</listitem>
</itemizedlist>
</sect1>

<sect1 id="HTML">
<title>HTML</title>
<para>HTML is obviously the most supported language in Bluefish. There is a special HTML tool bar with many dialogs, and two menus to work with tags:</para>
<itemizedlist>
<listitem>
<para>the <guilabel>Tags</guilabel> menu:
<figure id="figure-html-tags-menu">
<title id="figure-html-tags-menu-title">The HTML Tags Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_tags_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML tags menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
<listitem>
<para>the <guilabel>Dialogs</guilabel> menu:
<figure id="figure-html-dialogs-menu">
<title id="figure-html-dialogs-menu-title">The HTML Dialogs Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_dialogs_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML dialogs menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>
<para>The preferences have several settings on HTML style under <guilabel>HTML</guilabel>.</para> 
<para>The HTML tool bar has two types of buttons. You can recognise each type by the tool tip if you move the mouse over the button:</para>
<itemizedlist>
<listitem>
<para>First there are buttons that will open a dialog for some HTML tag. These buttons have a tool tip that ends with three dots.
<figure id="figure-html-tooltip-dots">
<title id="figure-html-tooltip-dot-title">An HTML Button with a three-dotted Tool Tip</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_tooltip_dots.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of an HTML three-dotted tool tip</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
<listitem>
<para>Second, there are buttons that will directly insert text, these buttons do not have the dots in the tool tip.

<figure id="figure-html-tooltip-simple">
<title id="figure-html-tooltip-simple-title">A simple HTML Tool Tip Button</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_tooltip_simple.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a simple HTML tool tip</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>  

<para>If you want to add an HTML tag around some block of text, select the block of text, use the HTML tool bar or the Tags or Dialogs menu to insert the tag. The opening tag will be inserted before the selected block, the closing tag after the selected block.</para>
<para>An existing tag can be edited by right-clicking the tag, and select <guilabel>Edit tag</guilabel> in the context menu. You can also place the cursor in the tag and use <menuchoice><shortcut><keycap>F3</keycap></shortcut><guimenu>Dialogs</guimenu><guimenuitem>Edit tag under cursor...</guimenuitem></menuchoice>. Not all tags, however, have a dialog, so this is not always possible. Colors in the style #RRGGBB can also be edited from the right-click context menu.</para>
<para>In the reference browser on the left panel there is an HTML reference available. All possible attributes and valid values can be found in this reference. See <xref linkend="function-reference"/> for more info.</para> 

<sect2 id="find-replace-special">
<title>Special find and replace features</title>
<para>There are several special search and replace actions in the menu <menuchoice><guimenu>Edit</guimenu><guisubmenu>Replace special</guisubmenu></menuchoice>. These can be used to convert special characters (like &lt; and &amp;), or ISO characters to their HTML entities, as well as to change the letters case.
<figure id="figure-replace-special-menu">
<title id="figure-replace-special-menu-title">The Replace Special Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/replace_special_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Replace special menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>In all cases, when you want to replace some part of the text, you should first select the part to replace, then use the appropriated menu item.</para>
</sect2>

<sect2 id="thumbnails">
<title>Thumbnail generation</title>
<para>Bluefish can automatically generate thumbnails for images. A thumbnail is a small image, with a link to the larger image. Bluefish will create the small image based on your settings, and insert a &lt;img&gt; tag in the file, and a &lt;a&gt; tag linking the original. The thumbnails are created in the same directory as the original sources.</para>
<para>The formats used for thumbnails may be png or jpg format. By default, the format used for thumbnails is png. You can change it in the <guilabel>Images</guilabel> panel of Preferences. For jpg images, the thumbnail extension is jpeg.</para>
<para>There are actually two thumbnail dialogs in Bluefish:</para>
<itemizedlist>
<listitem>
<para>an Insert thumbnail dialog,accessible from the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Alt</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>Dialogs</guimenu><guisubmenu>General</guisubmenu><guimenuitem>Insert Thumbnail...</guimenuitem></menuchoice> or from the <guilabel>Standard bar</guilabel> of the HTML toolbar.
<figure id="figure-thumbnail-simple-icon">
<title id="figure-thumbnail-simple-icon-title">The Insert Thumbnail Icon</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_simple_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the insert thumbnail icon</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
<listitem>
<para>a Multi thumbnail dialog, only accessible from the <guilabel>Standard bar</guilabel> of the HTML toolbar.
<figure id="figure-thumbnail-multi-icon">
<title id="figure-thumbnail-multi-icon-title">The Multi Thumbnail Icon</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_multi_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the multi thumbnail icon</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>
<para>The Insert thumbnail dialog is very straightforward. You select the image file, provide some &lt;img&gt; tag attributes, choose the scaling, and press OK. The scaling factor is chosen by moving the slider directly under the image. The resulting image is previewed in the preview frame. Bluefish will create the thumbnail with extension _thumbnail.png or _thumbnail.jpeg (depending of the settings for images in the preferences).
<figure id="figure-thumbnail-simple-dialog">
<title id="figure-thumbnail-simple-dialog-title">The Insert Thumbnail Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_simple_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the insert thumbnail dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>If the source image is not accessible, change <guilabel>webimage</guilabel> to <guilabel>image</guilabel> in the <guilabel>Select File</guilabel> window loaded after clicking on <guilabel>browse</guilabel> for choosing an image. This way you can choose whichever format you want for the original sources. Another way to do it is to change the definition of webimage (see <xref linkend="changing-filetypes"/>).</para>
<para>If that does not solve the problem, it is likely that the type of images you want to load is not defined yet in preferences. In this case, change the definition of image as explained in <xref linkend="changing-filetypes"/>.</para>
<para>As last resource, if you don't want to change the generic file types, you may choose <guilabel>All files</guilabel> in the pop up menu at the bottom of the <guilabel>Select File</guilabel> window.</para>
</tip>
<para>The code generated for a png image and a png thumbnail looks like this:
<programlisting><![CDATA[<a href="/Users/michga/Desktop/343-4351_IMG_2.png">
<img src="/Users/michga/Desktop/343-4351_IMG_2_thumbnail.png" 
width="89" height="134" border="0" name="Gamboling" 
alt="Gamboling in the meadow" align="middle"></a>]]></programlisting></para>
<para>and for a jpg image and jpg thumbnail:
<programlisting><![CDATA[<a href="/Users/michga/Desktop/343-4351_IMG_2.JPG">
<img src="/Users/michga/Desktop/343-4351_IMG_2_thumbnail.jpeg" 
width="89" height="134" border="0" name="Gamboling" 
alt="Gamboling in the meadow" align="middle"></a>]]></programlisting></para>
<note>
<para>You can perfectly mix jpg images with png thumbnails or the other way around.</para>
<para>If the html file exists beforehand, the paths to image and thumbnail are inserted relative to the location of the html file. On the contrary, if the html file does not exist beforehand, the full paths to the image and thumbnail are inserted in the code.</para>
</note>
<para>In the multi thumbnail dialog, you first choose the scaling method, then you set the corresponding width and/or height parameters. Finally, you may want to adjust the HTML code to be inserted for each image.</para>
<para>Scaling can be based on a fixed ratio, a fixed width, a fixed height, or a fixed width and fixed height (this last option does not keep the original aspect ratio!).</para>
<para>In the HTML code for each image, you can use several placeholders, such as:</para>
<itemizedlist spacing="compact">
  <listitem>
    <para>%r for the original filename</para>
  </listitem>
  <listitem>
    <para>%t for the thumbnail filename</para>
  </listitem>
  <listitem>
    <para>%w for the original width</para>
  </listitem>
  <listitem>
    <para>%h for the original height</para>
  </listitem>
  <listitem>
    <para>%x for the thumbnail width</para>
  </listitem>
  <listitem>
    <para>%y for the thumbnail height</para>
  </listitem>
  <listitem>
    <para>%b for the original file size (in bytes)</para>
  </listitem>
</itemizedlist>
<para>The default string is: <programlisting>&lt;a href="%r"&gt;&lt;img src="%t" width="%x" height="%y" border="0"&gt;&lt;/a&gt;</programlisting></para>
<para>After you have set up the scaling method and parameters, as well as the HTML code, you can select multiple images. Bluefish will create the thumbnails and insert the code.</para>
<para>Here is an example of two thumbnails created with a non nul border width and middle-aligned, with a fixed height and width, disregarding the aspect ratio.</para>
<para>The <guilabel>Multi thumbnail</guilabel> window is the following:
<figure id="figure-thumbnail_multi_dialog">
<title id="figure-thumbnail-multi-dialog-title">The Multi Thumbnail Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_multi_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the multi thumbnail dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>And the generated code is:
<programlisting><![CDATA[<a href="/Users/michga/Desktop/tot/343-4351_IMG_2.png">
<img src="tot/343-4351_IMG_2_thumbnail.png" width="50" 
height="50" border="5" align="middle"></a>
<a href="/Users/michga/Desktop/tot/343-4352_IMG_2.png">
<img src="tot/343-4352_IMG_2_thumbnail.png" width="50"
height="50" border="5" align="middle"></a>
]]></programlisting></para>
<note>
<para>Full pathnames are always used to reference original image sources. The paths to thumbnails are relative to the html file path if the html file already exists, while they are inserted as full paths when the html file does not exist.</para>
</note>
<para>Below is a full procedure to quickly generate thumbnails from a directory of image files. This example is purposedly made with deprecated tags, so that you have an idea of what can be made with the variables. Feel free to adjust it when using CSS style sheets.</para>
<procedure id="photo-album">
<title>Generating a photos album with multi thumbnails</title>
<step>
<para>Put the image files in a folder of their own</para>
</step>
<step>
<para>Open a new file in bluefish, click on the <guilabel>Multi thumbnail...</guilabel> icon in the <guilabel>Standard bar</guilabel> tab of the html tool bar.</para>
</step>
<step>
<para>Enter the scaling percentage in the <guilabel>Scaling (%)</guilabel> field</para>
</step>
<step>
<para>Change the html code as follows: <programlisting>&lt;tr&gt;&lt;td&gt;&lt;a href="%r"&gt;
&lt;img src="%t" 
width="%x" height="%y" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Original: %w x %h&lt;/td&gt;&lt;/tr&gt;</programlisting> and click <guilabel>OK</guilabel>.</para>
</step>
<step>
<para>Choose the folder containing the images from the <guilabel>Select files for thumbnail creation</guilabel> window, click <keycombo><keycap>Ctrl</keycap><keycap>A</keycap></keycombo> to select all files, then click <guilabel>OK</guilabel>. The code generated by Bluefish will look like the following: <programlisting>&lt;tr&gt;&lt;td&gt;&lt;a href="/Users/michga/Desktop/photos/343-4344_IMG.JPG"&gt;
&lt;img src="/Users/michga/Desktop/photos/343-4344_IMG_thumbnail.png" 
width="80" height="53" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Original: 1600 x 1065&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href="/Users/michga/Desktop/photos/343-4347_IMG.JPG"&gt;
&lt;img src="/Users/michga/Desktop/photos/343-4347_IMG_thumbnail.png" 
width="80" height="53" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Original: 1600 x 1065&lt;/td&gt;&lt;/tr&gt;</programlisting></para>
</step>
<step>
<para>Use <keycombo><keycap>Ctrl</keycap><keycap>A</keycap></keycombo> to select the file's contents and click on the <guilabel>Table</guilabel> icon located in the <guilabel>Tables</guilabel> tab of the HTML tool bar to embed the code into table tags. 
<figure id="figure-table-icon">
<title id="figure-table-icon-title">The Table Icon in the HTML Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/table_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the table icon in the html tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Save the file wherever you want.</para>
</step>
</procedure>
<para>If you want to add the file name and the file size in bytes, use this code: 
<programlisting>&lt;tr&gt;&lt;td&gt;&lt;a href="%r"&gt;
&lt;img src="%t" width="%x" height="%y" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;%r:  %w x %h (%b bytes)&lt;/td&gt;&lt;/tr&gt;</programlisting></para>
</sect2>

</sect1>

<sect1 id="quickbar">
<title>Customizing the Quick bar</title>
<para>The <guilabel>Quick bar</guilabel> is a user defined tool bar. All HTML tool bar buttons can be added to the Quick bar by simply right-clicking the button and selecting <guilabel>Add to quickbar</guilabel>.
<figure id="figure-quickbar-add">
<title id="figure-quickbar-add-title">Adding an Element to the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add an element to the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>And automagically you will see the element in the Quick bar:
<figure id="figure-quickbar-add-result">
<title id="figure-quickbar-add-result-title">The added Element in the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the added element in the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Note that you cannot add a pop up menu. Thus, if the item you want to add is inside a pop up menu (as is the code tag located in the <guilabel>Context formatting</guilabel> pop up menu of the <guilabel>Fonts</guilabel> tool bar), you have to first click on the pop up menu to display its contents, then to right click on the desired element to insert it in the <guilabel>Quick bar</guilabel>.
<figure id="figure-quickbar-add-popup">
<title id="figure-quickbar-add-popup-title">Adding a Pop Up Menu Element to the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add_popup.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add a pop up element to the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>If you want to remove items from the <guilabel>Quick bar</guilabel>, right-click them and select <guilabel>Remove from Quick bar</guilabel>.
<figure id="figure-quickbar-remove">
<title id="figure-quickbar-remove-title">Removing an Element from the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_remove.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to remove an element from the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>You can also change the location of an element in the Quick bar. To do so, right-click the element and select <guilabel>Shift left</guilabel> or <guilabel>Shift Right</guilabel> as desired. The element will be moved to the left or to the right of its neighborough. Notice that this is not a drag and drop action; you may have to repeat the process if you want to move the element farther.
<figure id="figure-quickbar-move">
<title id="figure-quickbar-move-title">Moving an Element within the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_move.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to move an element within the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect1>

<sect1 id="custom-menu">
<title>Custom menu</title>
<para>To customize items in the <guilabel>Custom menu</guilabel> tool bar, you will use the <guilabel>Custom menu</guilabel> element:
<figure id="figure-custom-menu-access">
<title id="figure-custom-menu-access-title">Accessing the Custom Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_access.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the default custom menu's access</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> leads to the <guilabel>Custom Menu Editor</guilabel>. The <guilabel>Load new</guilabel> item allows you to load a new menu in case you have directly changed the <filename>custom_menu</filename> file located in the <filename>.bluefish</filename> directory within your HOME directory, while <guilabel>Reset</guilabel> item allows you to return to the default custom menu under the same circumstances.</para>
<para>The <filename>custom_menu</filename> file is created upon install Bluefish and corresponds to some default entries, the ones you can see in the <guilabel>Custom menu</guilabel> tool bar. These will give you an idea what can be done with the custom menu.</para>
<para>The custom menu operates <emphasis>only</emphasis> on elements of the <guilabel>Custom menu</guilabel> tool bar, and allows you to:</para>
<itemizedlist>
<listitem>
<para>add "often used" items to an existing menu</para>
</listitem>
<listitem>
<para>search and replace patterns to the <guilabel>Replace</guilabel> menu</para>
</listitem>
<listitem>
<para>create new menus</para>
</listitem></itemizedlist>
<para>The <guilabel>Custom Menu Editor</guilabel> is the place where you make all changes to the custom menu. The location for entries in the custom menu is defined by their menu path in the <guilabel>Custom Menu Editor</guilabel>:
<figure id="figure-custom-menu-editor">
<title id="figure-custom-menu-editor-title">The Custom Menu Editor</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_editor.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom menu editor</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>It has four parts:</para>
<itemizedlist>
<listitem>
<para>The top one with all action buttons:</para>
<itemizedlist>
<listitem>
<para><guilabel>Add</guilabel> which adds new menu entries, once all necessary fields have been filled in</para>
</listitem>
<listitem>
<para><guilabel>Apply</guilabel> which applies changes to an existing menu entry, once it has been edited</para>
</listitem>
<listitem>
<para><guilabel>Delete</guilabel> which deletes the menu entry currently selected in the <guilabel>Menu path</guilabel> list</para>
</listitem>
<listitem>
<para><guilabel>Close</guilabel> which discards changes</para>
</listitem>
<listitem>
<para><guilabel>Save</guilabel> which saves the changes and exit the editor</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>The <guilabel>Menu Path</guilabel> field below the buttons, to enter either an existing or a new menu path</para>
</listitem>
<listitem>
<para>The <guilabel>Menu path</guilabel> list on the left side, which lists existing menu paths. A menu path looks like <emphasis>/Main menu/submenu/item</emphasis> or <emphasis>/Main menu/item</emphasis>. Here's an extract of the default custom menu paths:
<figure id="figure-custom-menu-default-path">
<title id="figure-custom-menu-default-path-title">Extract of the default Custom Menu Path</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_default_path.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing an extract of the default custom menu path</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
</para>
</listitem>
<listitem>
<para>A custom part on the right side, whose contents changes depending of the type of menu. There are two types of items in the <guilabel>Custom Menu Editor</guilabel>:</para>
<itemizedlist>
<listitem>
<para>the Custom dialog, which will insert a string, optionally based on values asked in a dialog</para>
</listitem>
<listitem>
<para>the Custom Find and Replace, which will run a replace, also optionally based on values asked in a dialog. Here's how the <guilabel>Custom Replace</guilabel> dialog looks like:
<figure id="figure-custom-menu-replace-dialog">
<title id="figure-custom-menu-replace-dialog-title">The Custom Replace Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_replace_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom replace dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<sect2 id="custom-menu-dialog">
<title>Adding a custom menu dialog</title>
<para>The most simple custom dialog item has a menupath, for example <emphasis>/MySite/author</emphasis>, and a Formatstring before, for example <emphasis>written by Olivier</emphasis>. If you add this item, you can add this string by selecting the menu item.</para>
<procedure id="custom-menu-dialog-add">
<title>Adding a custom menu based on custom dialog</title>
<step>
<para>Choose <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> in the custom menu tool bar.</para>
</step>
<step>
<para>Enter <userinput>/MySite/author</userinput> in the <guilabel>Menu Path</guilabel> field of the <guilabel>Custom Menu editor</guilabel>.</para>
</step>
<step>
<para>Enter <userinput>written by Olivier</userinput> in the <guilabel>Formatstring Before</guilabel> field located on the right.</para>
</step>
<step>
<para>Click on the <guilabel>Add</guilabel> button at the top.</para>
<para>Notice that upon adding the new entry, it is listed at the bottom of the <guilabel>Menu path</guilabel> list:
<figure id="figure-custom-menu-add-basic">
<title id="figure-custom-menu-add-basic-title">A new Custom Entry in the Menu Path List</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_add_basic.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a new custom entry in the Menu path list</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Click on the <guilabel>Save</guilabel> button. This will add the menu to the Custom menu tool bar:
<figure id="figure-custom-menu-basic-result">
<title id="figure-custom-menu-basic-result-title">A new Menu in the Custom Menu Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_basic_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a new menu in the custom menu tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
</procedure>
<para>Note that the new menu is placed at the right end of the custom menu tool bar. When closing Bluefish and relaunching it, it will be placed in alphabetical order, except that the <guilabel>Replace</guilabel> menu will always be at the far right side.</para>
<para>In another example, you have a string you often need to set before and after some block of text, for example &lt;div class=&quot;MyClass&quot;&gt;YourBlockOfText&lt;/div&gt;. To do it:</para>
<orderedlist>
<listitem>
<para>Open the <guilabel>Custom Menu Editor</guilabel></para>
</listitem>
<listitem>
<para>Enter <userinput>/MySite/div with class</userinput> in the <guilabel>Menu Path</guilabel> field</para>
</listitem>
<listitem>
<para>Enter &lt;div class=&quot;MyClass&quot;&gt; in the <guilabel>Formatstring Before</guilabel> field</para>
</listitem>
<listitem>
<para>Enter &lt;/div&gt; in the <guilabel>Formatstring After</guilabel> field</para>
</listitem>
<listitem>
<para>Click on <guilabel>Add</guilabel>, then on Save. The item will appear in the menu.</para>
</listitem>
</orderedlist>
<para>If you select some text:
<figure id="figure-custom-menu-div-before">
<title id="figure-custom-menu-div-before-title">A Block of selected Text before Activating the Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_before.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a block of selected text before activating the menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>And activate this menu item, the first bit of text is now added before the selection, and the second bit after the selection:
<figure id="figure-custom-menu-div-after">
<title id="figure-custom-menu-div-after-title">A Block of Text after Activating the Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_after.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a block of text after activating the menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Suppose you want to improve this last example. You have both MyClass1 and MyClass2 and want to be able to choose the desired class when activating the menu. Here's how to do it:</para>
<orderedlist>
<listitem>
<para>Open the <guilabel>Custom Menu Editor</guilabel></para>
</listitem>
<listitem>
<para>Browse the <guilabel>Menu path</guilabel> list to retrieve the /MySite/class with div entry and click on it to make appear its components in the <guilabel>Menu Path</guilabel> and <guilabel>Custom Dialog</guilabel> fields</para>
</listitem>
<listitem>
<para>Click on the top arrow of the <guilabel>Number of Variables</guilabel> pop up menu to get 1 in the field. As you see a <guilabel>Variables</guilabel> entry appears where you can enter the name for variable %0. As name we enter <emphasis>MyClass number</emphasis></para>
</listitem>
<listitem>
<para>Now change the <guilabel>FormatString Before</guilabel> field to take this new variable into account, as following:  &lt;div class=&quot;MyClass%0&quot;&gt;</para>
</listitem>
<listitem>
<para>Click on <guilabel>Apply</guilabel> so that your changes will be taken in account, and click on Save to update the menu.</para>
</listitem>
</orderedlist> 
<para>If you now activate this menu after having selected a block of text, you will be presented with a new dialog asking you for the value of <emphasis>MyClass number</emphasis>:
<figure id="figure-custom-menu-div-dialog">
<title id="figure-custom-menu-div-dialog-title">The new DIV with Class Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the new div with class dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>After entering the desired value, the same process as before will occur, using the value you provided. Here we have entered 1 as value:
<figure id="figure-custom-menu-div-dialog-result">
<title id="figure-custom-menu-div-dialog-resul-ttitle">The Block of Text after Entering the Value</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_dialog_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the block of text after entering the value</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>You can use the <keycap>Return</keycap> and <keycap>Tab</keycap> keys to format the output.</para>
<para>Any variable can be used any times you want in the dialog.</para>
</tip>
</sect2>

<sect2 id="custom-menu-replace">
<title>Adding a custom replace dialog</title>
<para>Find and replace items are no different. The dialog has some more options, each of these options corresponds to the regular <guilabel>Replace</guilabel> dialog. Again you can use variables like %0, %1 etc. to make a certain menu item more flexible.</para>
<para>Say you want to add title tags to a selection in a HTML page so that the user agent could render it either as a tool tip or as spoken words. To ease the discussion we will work on the following snippet of code: <programlisting><![CDATA[<ul>
<li><a href="progsys01.html">Process scheduling</a> - 26/10/2002</li>
<li><a href="progsys02.html">Fork and Wait</a> - 02/11/2002</li>
</ul>]]></programlisting></para>
<para>We will transform it into the following one: <programlisting><![CDATA[<ul>
<li><a href="progsys01.html" title="blah Process scheduling">Process scheduling</a> \
- 26/10/2002</li>
<li><a href="progsys02.html" title="blah Fork and Wait">Fork and Wait</a> \
- 02/11/2002</li>
</ul>]]></programlisting> where blah is any text you want.</para>
<para>The initial rendering:
<figure id="figure-custom-menu-page-before">
<title id="figure-custom-menu-page-before-title">The HTML Page before the Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_page_before.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML page before the transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>will be transformed as is:
<figure id="figure-custom-menu-page-after">
<title id="figure-custom-menu-page-after-title">The HTML Page after the Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_page_after.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML page after the transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To do this, we need to express the &lt;a href="yoururl"&gt;yourstring&lt;/a&gt; part of the initial snippet of code as a Perl regular expression (see <xref linkend="find-replace-regex"/> for full details):</para>
<itemizedlist>
<listitem>
<para>a href=" will be expressed as is and embedded into parentheses to retrieve it as \0 variable.</para>
</listitem>
<listitem>
<para>yoururl will be expressed as ([^"]+) to match one or more non double quote characters and retrieve it as \1 variable.</para>
</listitem>
<listitem>
<para>The second double quote will be expressed as is and embedded into parentheses to retrieve it as \2 variable.</para>
</listitem>
<listitem>
<para>The second &gt; sign will be expressed as is and embedded into parentheses to retrieve it as \3 variable.</para>
</listitem>
<listitem>
<para>yourstring will be expressed as ([^>]+) to match one or more non &gt; characters and retrieve it as \4 variable.</para>
</listitem>
<listitem>
<para>&lt;/a&gt; will be expressed as is and embedded into parentheses to retrieve it as \5 variable.</para>
</listitem>
</itemizedlist>
<para>Thus, the search string will be: (&lt;a href=")([^"]+)(")(&gt;)([^&gt;]+)(&lt;/a&gt;)</para>
<para>The replace string should be of the form: &lt;a href="yoururl" title="yourvariablestring yourstring"&gt;yourstring&lt;/a&gt;</para>
<para>Expressed as a regular Perl replacement expression, it will be as simple as: \0\1\2 title=\2%0 \4\2\3\4\5 where %0 will match yourvariablestring, that is the value entered in the <guilabel>Title</guilabel> field of the <guilabel>Replace </guilabel> dialog at activating time.</para>
<procedure id="custom-menu-replace-dialog-add">
<title>Adding a custom menu based on replace dialog</title>
<step>
<para>Choose <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> in the custom menu tool bar.</para>
</step>
<step>
<para>Browse the Menu path list to retrieve the <guilabel>/Replace/Convert in Selection/&lt;td&gt; to &lt;th&gt;</guilabel> and click on it to make appear its components in the Menu Path and Custom Replace fields.</para>
</step>
<step>
<para>Change the Menu Path to <guilabel>/Replace/Anchor/Add Title</guilabel>.</para>
</step>
<step>
<para>Click on the top arrow of the Number of Variables pop up menu to get 1 in the field. Enter Title in the <guilabel>%0 Variables field</guilabel>.</para>
</step>
<step>
<para>Change the <guilabel>Matching</guilabel> pop up menu to <guilabel>perl regular expressions</guilabel>.</para>
</step>
<step>
<para>Change the <guilabel>Search Pattern</guilabel> field like this: <programlisting><![CDATA[(<a href=")([^"]+)(")(>)([^>]+)(</a>)]]></programlisting></para>
</step>
<step>
<para>Change the <guilabel>Replace String</guilabel> field like this: <programlisting><![CDATA[\0\1\2 title=\2%0 \4\2\3\4\5]]></programlisting></para>
</step>
<step>
<para>Click on the <guilabel>Add</guilabel> button.</para>
<para>The <guilabel>Custom replace</guilabel> dialog should have the following appearance:
<figure id="figure-custom-menu-replace-dialog-new">
<title id="figure-custom-menu-replace-dialog-new-title">The Custom Menu Replace Dialog filled in</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_replace_dialog_new.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom menu replace dialog filled in</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Click on the <guilabel>Save</guilabel> button.</para>
</step>
</procedure>
<para>To use the new menu item, select the lines to be changed in the HTML file and activate <guilabel>Replace/Anchor/Add Title</guilabel> in the custom menu bar. Fill in the dialog as follows: 
<figure id="figure-custom-menu-add-title">
<title id="figure-custom-menu-add-title-title">The Add Title Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_add_title.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Add Title dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Click OK to proceed.</para>
</sect2>

</sect1>

<sect1 id="external-programs-filters">
<title>External programs, filters</title>
<para>The <guimenu>External</guimenu> menu provides a quick access to external default or user-added programs and  text filters. It is divided into three parts by default (see <xref linkend="bluefish-preferences"/> for layout change):</para>
<itemizedlist spacing="compact">
<listitem><para>The <guimenu>Outputbox</guimenu> submenu for text filters. Its name is derived from the output box shown at the bottom of the document window, where you can see the output of the process,  when activating it.</para></listitem>
<listitem><para>The <guimenu>Commands</guimenu> submenu for external programs.</para></listitem>
<listitem><para>All other items are browsers. They are launched as subprocesses, hence you need to detach them to avoid freezing bluefish until the external program quits.</para></listitem>
</itemizedlist>
<note>
<para>Typically all programs and filters apply to the current document. Nevertheless it is possible to invoke a program without applying it to the current document. On the contrary, it is not possible to apply text filters to anything but the current document.</para>
</note>
<para><figure id="figure-external-menu">
<title id="figure-external-menu-title">Bluefish External Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/external_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 external menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Customization of the <guimenu>External</guimenu> menu is performed in different parts of the <guilabel>Edit Preferences</guilabel> dialog:</para>
<itemizedlist spacing="compact">
<listitem>
<para>Items in the <guimenu>Outputbox</guimenu> submenu in the <guilabel>Output parsers</guilabel> tab.</para>
</listitem>
<listitem>
<para>Items in the <guimenu>Commands</guimenu> submenu in the <guilabel>Utilities and filters</guilabel> part at the bottom of the <guilabel>External programs</guilabel> tab.</para>
</listitem>
<listitem>
<para>Top level items in the <guilabel>Browsers</guilabel> part at the top of the <guilabel>External programs</guilabel> tab.</para>
</listitem>
</itemizedlist>

<sect2 id="external-browsers">
<title>Customizing browsers</title>
<para>The <guilabel>Browsers</guilabel> panel in Preferences shows the items in the same order as in the <guimenu>External</guimenu> menu:
<figure id="figure-preferences-browsers-panel">
<title id="figure-preferences-browsers-panel-title">The Browsers Panel in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/preferences_browsers_panel.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 Browsers panel in the Edit Preferences dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<note>
<para>The first line in the panel will be the browser selected when clicking on the <guilabel>View in browser</guilabel> button in the main tool bar.</para>
</note>
<?pagebreakus?>
<para>If you want to change the order of the browsers, apply the following steps:</para>
<procedure id="external-browsers-order">
<title>Changing the order of browsers items</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Browsers</guilabel> panel.</para>
</step>
<step>
<para>Click near the left border of the browser's line you want to move. The whole browser's line will be highlighted:
<figure id="figure-order-browsers-select">
<title id="figure-order-browsers-select-title">Selecting the Browser's Line to be Moved</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/order_browsers_select.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to select the browser's line to be moved</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>While maintaining the click, drag the selected line over another line, until you reach the place you want, so that the selected line covers entirely the latter one. The cursor will change its appearance and the dragged line will be shown as a framed line:
<figure id="figure-order-browsers-drag">
<title id="figure-order-browsers-drag-title">Dragging the Browser's Line</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/order_browsers_drag.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the line's dragging</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<note>
<para>To drag a line to the end of the list, drag it until a thin line appears below the last item:
<figure id="figure-order-browsers-drag-bottom">
<title id="figure-order-browsers-drag-bottom-title">Dragging the Browser's Line to the Bottom</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/order_browsers_drag_bottom.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to drag the line to the bottom of the list</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</note>
<tip>
<para>If you change your mind, drag the line over its original place and release the mouse button. There will be no change.</para>
</tip>
</step>
<step>
<para>Release the mouse button to drop the line at the desired place.</para>
</step>
<step>
<para>Click on the <guibutton>Apply</guibutton> button to save the change if you plan to make further changes in the panel, otherwise click on the <guibutton>OK</guibutton> button to save the change and close the <guilabel>Edit preferences</guilabel> panel.</para></step>
</procedure>
<para>If you want to customize one of the browsers supplied by default, use the following procedure:</para>
<procedure id="external-browsers-customize">
<title>Customizing an existent browser</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Browsers</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>Command</guilabel> region of the browser's line you want to change. The line will be hightlighted.</para>
</step>
<step>
<para>Double-click on the same location to allow editing. The line will be framed.</para>
</step>
<step>
<para>Make the desired change</para>
</step>
<step>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</step>
</procedure>
<para>To add a new browser, proceed as follows:</para>
<procedure id="external-browsers-add">
<title>Adding a new browser</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Browsers</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guibutton>Add</guibutton> button. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</step>
<step>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>External</guimenu> menu.</para>
</step>
<step>
<para>Double-click in the <guilabel>Command</guilabel> zone and enter the command followed by the &amp; sign to detach it from the main bluefish process, for example:</para>
<para><userinput>amaya %s &amp;</userinput></para>
</step>
<step>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</step>
</procedure>
<para>To delete a browser, just click on the <guibutton>Delete</guibutton> button.</para>
<para>Though nothing impedes you to put any command (not necessary a browser) in the panel for quick access, you may want to avoid to put it at the top range, since it will be somewhat strange to click on <guilabel>View in browser</guilabel> to launch <command>abs</command> for example.</para>
</sect2>

<sect2 id="external-commands">
<title>Customizing Commands menu</title>
<para>To add items to the <menuchoice><guimenu>External</guimenu><guisubmenu>Commands</guisubmenu></menuchoice> submenu, you use the <guilabel>External programs</guilabel> tab of the <guilabel>Edit Preferences</guilabel> panel:
<figure id="figure-preferences-utilities-panel">
<title id="figure-preferences-utilities-panel-title">Utilities and Filters Panel in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/preferences_utilities_panel.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 Utilities and Filters panel in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>You add, modify, delete, move commands or text filters the same way as described in <xref linkend="external-browsers"/>.</para>
<para>Bluefish will apply the supplied command on the current document, while representing the document as it is before the command is applied by <literal>%s</literal> and the document after the command has been applied by <literal>%f</literal>. Usage of the <literal>%i</literal> parameter is not implemented yet. You should embed those parameters into simple quotes to prevent special characters to be interpreted by the shell.</para>
<para>Usage of the parameters depends on the command:</para>
<itemizedlist>
<listitem>
<para>If the command does not operate on the file, as <command>xterm</command>, you just supply it as you would in an xterm, detaching it to avoid bluefish freezing with:</para>
<para><userinput>xterm &amp;</userinput></para>
</listitem>
<listitem>
<para>If the command does operate on the file, but not on the file's contents, as <command>chmod</command>, you supply it as you would in an xterm, using <literal>%s</literal> as a reference to the current document: </para>
<para><userinput>chmod +x '%s'</userinput></para>
</listitem>
<listitem>
<para>If the command operates on the standard input device by default, as <command>tidy</command>, you will have to redirect the document's contents, i.e. <literal>%s</literal>, with <command>cat</command> for example, to the standard output device, pipe the result so that it will be used as standard input device for the command, then redirect the result of the command to the document, i.e. <literal>%f</literal>, as in:</para>
<para><userinput>cat '%s' | tidy 'someoptions' &gt; '%f'</userinput></para>
</listitem>
<listitem>
<para>If the command operates on file's contents, as <command>sed</command>, you should use input, i.e. <literal>%s</literal> and output, i.e. <literal>%f</literal> redirection to feed the command with the right parameters, as in:</para>
<para><userinput>sed -e 'somesedcommand' &lt; '%s' &gt; '%f'</userinput></para>
</listitem>
</itemizedlist>
<para>As those parameters are used internally to create temporary files, you cannot use them to modify the name of the final document for example. But you can redirect the standard output to a named file, if you do not want to override the current document, as in:</para>
<para><userinput>sed -e 'somesedcommand' &lt; '%s' 1 &gt; 'namedfile'</userinput></para>
<para>Here is an example to get rid of hard-coded <literal>/usr</literal> in a source file:</para>
<procedure id="utilities-add">
<title>Adding a Commands menu item</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Utilities and filters</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guibutton>Add</guibutton> button. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</step>
<step>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>External</guimenu> menu.</para>
</step>
<step>
<para>Double-click in the <guilabel>Command</guilabel> zone and enter:</para>
<para><userinput>sed -e 's|\/usr|${PREFIX}|g' &lt; '%s' &gt; '%f'</userinput>.</para>
<note>
<para>We need to escape the slash in <literal>/usr</literal> with a backslash to avoid interpretation by the shell.</para>
</note>
</step>
<step>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</step>
</procedure>
</sect2>

<sect2 id="external-outputbox">
<title>Customizing Ouputbox menu</title>
<para>Items within the <menuchoice><guimenu>External</guimenu><guisubmenu>Outputbox</guisubmenu></menuchoice> submenu allow for programs to give feedback by opening an output box at the bottom of Bluefish's main window.</para>
<para>Here is an example showing the output box after using the <menuchoice><guimenu>External</guimenu><guisubmenu>Outputbox</guisubmenu><guimenuitem>tidy HTML validator</guimenuitem></menuchoice> item on an html file with an on purpose error:
<figure id="figure-external-outputbox-example">
<title id="figure-external-outputbox-example-title">The tidy Output Box</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/external_outputbox_example.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the tidy output box</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The contents of the resulting output box are based upon scanning the output of the supplied command, as it appears in an xterm, with a given regular expression and  filling in the various fields of the output box with the desired parts of that regular expression. The <guilabel>Output parsers</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel provides you with a model to do that:
<figure id="figure-external-outputbox-preferences">
<title id="figure-external-outputbox-preferences-title">The Output Parsers Tab in Preferences Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/external_outputbox_preferences.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the output parsers tab in preferences panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>The <guilabel>Outputbox</guilabel> panel comprises 7 fields:</para>
<itemizedlist>
<listitem>
<para>The <guilabel>Name</guilabel> field, a character string which will appear as the item in the <guimenu>Outputbox</guimenu> menu.</para>
</listitem>
<listitem>
<para>The <guilabel>Pattern</guilabel> field, a Perl regular expression which describes the command output, so that some of its parts could be used in the following fields.</para>
<para>Let's use an example: say you have a ruby script named foo.rb with the following line in it: <programlisting>put Hello Word</programlisting></para>
<para>When executing <command>ruby -d foo.rb</command> in an xterm, the output is: 
<programlisting><![CDATA[Exception `NoMethodError' at foo.rb:1 - undefined method `put' for main:Object
foo.rb:1: undefined method `put' for main:Object (NoMethodError)]]></programlisting></para>
<para>The second line can be parsed with the following Perl regular expression:
<programlisting><![CDATA[([a-zA-Z0-9/_.-]+):([0-9]+):(.*)]]></programlisting>
The first part embedded into parentheses will match the script name, i.e. foo.rb; the second part will match the line, i.e. 1: the third part will match the remaining. See <xref linkend="find-replace-regex"/> for some explanation on using regular expressions within bluefish.</para>
</listitem>
<listitem>
<para>The <guilabel>File #</guilabel> field, a part number matching the filename in the Perl regular expression given in the <guilabel>Pattern</guilabel> field. Note that the first part is numbered 1, the second 2, etc. If you do not want that the part be shown, put -1 in it.</para>
</listitem>
<listitem>
<para>The <guilabel>Line #</guilabel>, a part number matching the line number in the regular expression, here it will be 2, as same rules apply as in the <guilabel>Filename #</guilabel> field.</para>
</listitem>
<listitem>
<para>The <guilabel>Output #</guilabel> field, a part number matching the desired part in the regular expression, typically the remaining of the line, here it will be the third and last part. Again, same rules apply as in the <guilabel>Filename #</guilabel> field.</para>
</listitem>
<listitem>
<para>The <guilabel>Command</guilabel> field, the command to execute on the current document, internally named %s. Here it will be: <userinput>ruby -d '%s'</userinput>. Notice that you should embed the reference to the current document, if any, within parentheses to avoid interpretation at run time.</para>
</listitem>
<listitem>
<para>The <guilabel>Show all output</guilabel> check box, which can be checked to show all output not matching the Perl regular expression. Here it is not needed, since the regular expression matches all output.</para>
</listitem>
</itemizedlist>
<para>You add, modify, delete, move output boxes the same way as described in <xref linkend="external-browsers"/>.</para>
<procedure id="outputbox-add">
<title>Adding an Outputbox menu item</title>
<step>
<para>Execute the desired command in an xterm with some error either in the command or in the file which it is applied on, in order to know how the errors are outputting.</para>
</step>
<step>
<para>Build a Perl regular expression based on the output, so that the filename, the line number and the error message be retrieved.</para>
</step>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>Output parsers</guilabel> tab to display the <guilabel>Outputbox</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guibutton>Add</guibutton> button. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</step>
<step>
<para>Click "Add" to add a new item.</para>
</step>
<step>
<para>Double-click on the <guilabel>Name</guilabel> field to give the command a name.</para>
</step>
<step>
<para>Double-click on the <guilabel>Pattern</guilabel> field and fill it in with the Perl regular expression you have built previously.</para>
</step>
<step>
<para>Double-click on the <guilabel>File #</guilabel> field and give the number for the subpattern matching the filename (-1 for none).</para>
</step>
<step>
<para>Double-click on the <guilabel>Line #</guilabel> field and give the number for the subpattern matching the line number (-1 for none).</para>
</step>
<step>
<para>Double-click on the <guilabel>Output #</guilabel> field and give the number for the subpattern matching the actual error message (-1 for none).</para>
</step>
<step>
<para>Double-click on the <guilabel>Command</guilabel> field and enter the command to execute in the form <command>command options '%s'</command>, %s being the current filename.</para>
</step>
<step>
<para>Toggle the "Show all output" check box to show output NOT matching the regular expression, if needed.</para>
</step>
</procedure>
<note>
<para>Of course, it is also possible to add these items by editing the file named <filename>~/.bluefish/rcfile_v2</filename> found in the user's home directory. The fields are delimited by colons and correspond to those found in the GUI.</para>
</note>
</sect2>
</sect1>
</chapter>
