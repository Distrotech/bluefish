<!--
Using Bluefish - a part of the Bluefish manual
Copyright (C) 2004  Olivier Sessink
Copyright (C) 2004-2006  The Bluefish Project Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-->

<chapter id="using-bluefish">
<title>Using Bluefish</title>
<para>In this chapter, most of the functionalities of Bluefish are described. What you can do, how you do it, and how you can customize the default behavior.</para>

<sect1 id="starting-bluefish">
<title>Starting Bluefish</title>
<para>In GNOME, Bluefish can be started from the Applications/Programming menu. From a terminal, simply launch bluefish using the command <application>bluefish</application>.</para>

<sect2 id="commandline-options">
<title>Command line options</title>
<para>There are several useful command line options:</para>
<variablelist><varlistentry><term>-s</term>
<listitem><para>skip root check</para></listitem>
</varlistentry>
<varlistentry><term>-v</term>
<listitem><para>display the current version</para></listitem>
</varlistentry>
<varlistentry><term>-n</term>
<listitem><para>open a new window</para></listitem>
</varlistentry>
<varlistentry><term>-p filename</term>
<listitem><para>open a project</para></listitem>
</varlistentry>
<varlistentry><term>-h</term>
<listitem><para>display this help screen</para></listitem>
</varlistentry></variablelist>
<para>Many programs like browsers, email clients and file managers can be configured to open files in Bluefish. For example, <command>bluefish '%s'</command> will open a file in the current window, <command>bluefish -n '%s'</command> will open a file in a new window, and <command>bluefish -p '%s'</command> will open a project file.</para>
</sect2>
</sect1>

<sect1 id="user-interface">
<title>The user interface</title>
<para>The biggest part of the user interface is the editor area. Because Bluefish has a so-called <quote>Multiple Document Interface</quote>, there are actually many editor areas in Bluefish, accessible via the tabs. By default the tabs are on the bottom.
<figure id="figure-editor-array">
<title id="figure-editor-array-title">Bluefish Editor Array</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/editor_array.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 editor array</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice that the current document's tab may be raised by the Gtk theme, and if the document has been modified, its name on the tab is coloured in red. The changes are also noted with red on the open document list, accessible by right-clicking on the tab.</para>
<para><figure id="figure-opendocument-list">
<title id="figure-opendocument-list-title">List of open Documents</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/opendocument_list.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the open documents list</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak?>
<?linebreaka4?>
<para>The top of the Bluefish interface consists of a menu, a main tool bar, an HTML tool bar, and a Custom menu.
<figure id="figure-main-menu">
<title id="figure-main-menu-title">Bluefish Main Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/main_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 main menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak?>
<?linebreaka4?>
<para>The main tool bar gives you quick access to the basic functionalities of a text editor.
<figure id="figure-main-toolbar">
<title id="figure-main-toolbar-title">Bluefish Main Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/main_toolbar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 main tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak?>
<?linebreaka4?>
<para>The HTML tool bar provides access to the most commonly used HTML functionalities.
<figure id="figure-html-toolbar">
<title id="figure-html-toolbar-title">Bluefish HTML Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_toolbar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 HTML tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak?>
<?linebreaka4?>
<para>The custom tool bar provides access to languages and replacement functions. It is fully customizable through the preferences panel. 
<figure id="figure-custom-toolbar">
<title id="figure-custom-toolbar-title">Bluefish Custom Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_toolbar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 custom tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak?>
<?linebreaka4?>
<para>To the left of the editor area is the side panel. If you would prefer that the side bar be on the right side, simply change the setting in the <guilabel>User Interface</guilabel> tab found in the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu option. The side panel consists of a file browser, a function reference browser, and a bookmark browser, accessible by clicking on the corresponding sidebar notebook tab.</para>
<para><figure id="figure-notebook-tab">
<title id="figure-notebook-tab-title">Bluefish Sidebar Notebook Tab</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/notebook_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish sidebar notebook tab</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>You may also customize the location of the sidebar notebook tab via <guilabel>User Interface</guilabel> tab found in the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu option.</para>
<?pagebreak?>
<para>The file browser provides quick access to files and directories.
<figure id="figure-file-browser">
<title id="figure-file-browser-title">Bluefish File Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_browser.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 file browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The function reference browser references CSS2, HTML, PHP, and Python functions with their syntax. Some of them provide dialogs to help you inserting them. 
<figure id="figure-function-reference-browser">
<title id="figure-function-reference-browser-title">Bluefish Function Reference Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/function_reference_browser.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 function reference browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?pagebreak?>
<para>The bookmark browser provides access to previously marked positions in a file.
<figure id="figure-bookmark-browser">
<title id="figure-bookmark-browser-title">Bluefish Bookmark Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_browser.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 bookmark browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak8?>
<para>On the bottom of the Bluefish window is the status bar. Shown here are messages, the current line &amp; column number, the insert (INS) or overwrite (OVR) mode for the cursor, and the file type &amp; character encoding.
<figure id="figure-status-bar">
<title id="figure-status-bar-title">Bluefish Status Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/status_bar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 status bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak8?>
<para>The visibility of these items can be toggled via the <guimenu>View</guimenu> menu.
<figure id="figure-view-menu">
<title id="figure-view-menu-title">Bluefish View Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/view_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 view menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
If you want to disable any of these items by default, you can set these options in the preferences under <guilabel>User interface</guilabel>.</para>
<?pagebreaka4?>
<para>The <guimenu>Help</guimenu> menu contains the typical About box. As usual, you will find in it developers', maintainers', and translators' details. Plus the configure flags used to compile Bluefish on your system and the packages detected automatically.
<figure id="figure-about-window">
<title id="figure-about-window-title">Bluefish About Window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/about_window.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 about window</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?pagebreakus?>
<para>The other menus are described in the following sections:</para>
<itemizedlist>
<listitem>
<para>the <guimenu>Tags</guimenu> and <guimenu>Dialogs</guimenu> menu in <xref linkend="HTML"/></para>
</listitem>
<listitem>
<para>the <guimenu>Go</guimenu> menu in <xref linkend="navigation-multiple"/></para>
</listitem>
<listitem>
<para>the <guimenu>Project</guimenu> menu in <xref linkend="projects"/></para>
</listitem>
<listitem>
<para>the <guimenu>External</guimenu> menu in <xref linkend="external-programs-filters"/></para>
</listitem>
</itemizedlist>
</sect1>

<sect1 id="working-with-files">
<title>Working with files and folders</title>
<para>Most of the file operations are accessible from the <guimenu>File</guimenu> menu. Using this menu, a new file can be created, existing files opened, and opened files saved or renamed.</para>
<para>You may also insert a file into another one, and revert a modified file to its previously saved state.	
<figure id="figure-file-menu">
<title id="figure-file-menu-title">Bluefish File Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish File Menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<note><para>In case you compiled bluefish from source, the <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL...</guimenuitem></menuchoice> menu item is shown only if you installed gnome-vfs2 beforehand.</para>
<para>For Mac OS X users installing via Fink, choose bluefish-gnomevfs2 or bluefish-gnome2 variant.</para> 
</note>
<para>You may also add directories, delete files, and refresh the file browser in the side panel using its contextual menu.
<figure id="file-browser-cm">
<title id="file-browser-cm-title">The File Browser Contextual Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_browser_cm.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the file browser contextual menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>You may also open a file using drag and drop from the desktop or from Nautilus to any part of the Bluefish window but the editor part when you are under Gnome2 environment.</para>
<note><para>If you drag and drop the file to the editor window, the full path of the file is inserted.</para></note>

<sect2 id="creating-files">
<title>Creating files</title>
<para>Apart from using <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>New</guimenuitem></menuchoice> or the <guilabel>New</guilabel> icon to create a new file, you may also use <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>New Window</guimenuitem></menuchoice>.</para>
<para>Those methods create an untitled file of type <literal>text</literal> (except when you are working on a project with defined template file, see <xref linkend="creating-new-project"/>
 for more info) with default permissions and the default character encoding defined in the <guilabel>Files</guilabel> tab in the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu option. You will further have to <link linkend="saving-files">save</link> it under the desired name.
<figure id="untitled-document">
<title id="untitled-document-title">Untitled Document Window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/untitled_document.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>Screen shot of an untitled document window</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<important><para>Note that the document window is titled <quote>Untitled n - Bluefish versionnumber</quote>, which indicates precisely that the file is not saved on the disk. The same applies to the document's tab which shows <quote>Untitled n</quote>. Moreover, if you move the cursor onto the document's tab, you will not see any size or modification date.</para></important>
<tip><para>When creating new files, you may want to create them in a new window. In this case, use <menuchoice><guimenu>File</guimenu><guimenuitem>New Window</guimenuitem></menuchoice> to first open the new window and then create the desired files as usual.</para></tip>
<?pagebreaka4?>
<?linebreaka45?>
<para>To spare yourself the bother of saving, right click on the desired directory in the directory list of the file browser in the side panel and select <guilabel>New File</guilabel>. You will be presented with a <guilabel>File name</guilabel> dialog, where you will enter the desired name:
<figure id="file-name-dialog">
<title id="file-name-dialog-title">The File Name Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_name_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the File name dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip><para>You may type a path relative to the clicked directory, provided that the target directory be under the clicked directory and that it exists.</para></tip>
</sect2>
<?linebreaka45?>
<sect2 id="managing-directories">
<title>Managing directories</title>
<para>To create a new directory, right click on the desired parent directory in the directory list of the file browser in the side panel and select <guilabel>New Directory</guilabel>. You may also right click on any file in the files part of the file browser.</para>
<para>Then enter the desired name in the <guilabel>Directory name</guilabel> dialog. Bluefish will create the named directory with the default permissions under the currently selected directory.
<figure id="directory-name-dialog">
<title id="directory-name-dialog-title">The Directory Name Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/directory_name_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the Directory name dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Note that you cannot delete directories within Bluefish, but you can refresh the view with the <guilabel>Refresh</guilabel> contextual menu item of the directory part of the file browser if you delete them externally. This is especially useful when you add files and directories or delete files.</para>
<para>If you right click a directory in the file browser within the side panel, you can make this directory the base directory for the file browser using the <guimenuitem>Set as basedir</guimenuitem> option. Then you can access it directly from the pop up menu in the upper part of the file browser.</para>
<para>By default the file browser follows the document focus. If you change to a different document, the file browser will show the contents of the directory where this document is located. This behaviour can be changed by unchecking <guilabel>Follow focus</guilabel> on the bottom of the file browser.</para>
</sect2>
<?pagebreaka4?>
<sect2 id="opening-files">
<title>Opening files</title>
<para>Through the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>O</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Open...</guimenuitem></menuchoice> menu item or the <guilabel>Open...</guilabel> icon in the main tool bar, one or more files can be opened. If you want to open them in a new window, use <menuchoice><guimenu>File</guimenu><guimenuitem>New Window</guimenuitem></menuchoice> to first open the new window and then open the desired files as usual.
<?linebreakus8?>
<figure id="figure-open-file">
<title id="figure-open-file-title">Bluefish Open File Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/open_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Open File Dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<note>
<para>The most recently opened directories appear in the upper part of the side panel, while the lower part contains user-defined locations. To add a new directory to the list, click on <guilabel>Add</guilabel>. You can also filter the file list by file type using the pop menu located on the right side. The list of file types in the filter menu is provided through the <guilabel>Filetypes</guilabel> tab found in Bluefish's <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu option.</para>
</note>
<para>Recently opened files can be opened by selecting them from the list within <menuchoice><guimenu>File</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice>. The number of files in this menu can be set in the preferences under <guilabel>Files</guilabel>.</para>
<para>The contextual menus of both parts of the file browser in the side panel can also be used to open files. The file part supports opening a given file by right clicking it, and filtering files via the <guilabel>Filter</guilabel> submenu of its contextual menu. The directory part supports filtering files via the <guilabel>Filter</guilabel> submenu of its contextual menu, and advanced opening explained in the <xref linkend="open-advanced"/>.
<figure id="figure-file-browser-filtering">
<title id="figure-file-browser-filtering-title">Filtering Files with the Bluefish File Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_browser_filtering.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to filter files with the Bluefish file browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The available filters may be modified in Preferences. For more information, see <xref linkend="modifying-filefilters"/>.</para>
<para>An interesting feature of Bluefish is the ability to open files by selecting the text of a currently opened file in another application. For example, if a filename is shown in say a terminal application, you can select the filename, and use <menuchoice><guimenu>File</guimenu><guimenuitem>Open from Selection</guimenuitem></menuchoice> to open that file. The file, if it exists, will be opened in another tab within Bluefish.</para>
<important><para>The selected text should match the full path of an existing file.</para></important>
<para>Files can also be opened via the command line by feeding filenames to Bluefish as arguments. For example:</para>
<screen><prompt>$</prompt>bluefish ~/foo1.txt ~/foo2.txt</screen>
<para>This can even be done while Bluefish is running and the resulting files will then show up in their own tabs.</para>
<tip>
<para>If you have installed gnome-vfs or gnome-vfs2 before installing Bluefish, you will be able to open files on remote desktop via the <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL...</guimenuitem></menuchoice> menu item. See more on this in the <xref linkend="remote-files"/>.</para>
<para>Finally, if the gnome2 environment is installed on your system, you may open files by drag and drop from the desktop or the Nautilus file manager onto any part of the Bluefish interface, but the document's editor.</para></tip>
<para>Be aware that if the file is huge it may take a very long time to get the rendering if syntax highlighting is enabled in the <guilabel>Editor</guilabel> option of Preferences, in particular if the PCRE UTF-8 support is enabled. The GTK editing widget used in Bluefish, furthermore, is not very good at handling files with very long lines, and that could also slow down Bluefish considerably.</para>
<para>Information about currently opened files can be seen if you move the mouse over the document tab (by default on the bottom of the screen). A so called tool tip will be shown with information about the full path, size, permissions, file type and encoding of the file.
<figure id="figure-open-file-info">
<title id="figure-open-file-info-title">Info on open File</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/open_file_info.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing Info on open file</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<note><para>Note that the document's tab is hightlighted in red, because the document has been modified since the last save. Info in the tool tip match the state of the file as it was saved on disk.</para></note>
</sect2>

<sect2 id="saving-files">
<title>Saving files</title>
<para>To save a document, you can use the <guimenu>File</guimenu> menu, the <guilabel>Save</guilabel> icon in the tool bar, or press the shortcut key combination <keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo>.</para>
<para>If the file does not exist already on the disk, you will be presented with the following dialog window:
<figure id="figure-saving-untitled-file">
<title id="figure-saving-untitled-file-title">Saving an untitled File</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/saving_untitled_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to save an untitled file</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>If the file already exists on the disk, no dialog window pops up. It is assumed that the file name does not change.</para>
<para>When a document has been modified, the filename is shown in red in the document tabs; morever if you right click on the tabs, the full path is shown in red in the list that will pop up.
<figure id="figure-modified-file-tooltip">
<title id="figure-modified-file-tooltip-title">A modified Document in the Documents' List</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/modified_file_tooltip.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing a modified document in the documents' list</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>By default a backup is made during save. The original file is copied to the same filename with a tilde <keycap>~</keycap> appended. This suffix and the backup behaviour can be changed in the preferences under <guilabel>Files</guilabel>.</para>
<para>Before saving the file, Bluefish will check if the original file was changed on disk, using the last modified time and the file size. On some file systems the last modified time is sometimes not very precise (most notably on samba mounts). This makes Bluefish think the file is modified when it is not. This check can be changed in the preferences under <guilabel>Files</guilabel>.</para>
<para>You can also save a document under a different name, using the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>S</keycap></keycombo></shortcut><guimenuitem>Save As...</guimenuitem></menuchoice> menu entry, or the <guilabel>Save As...</guilabel> icon in the main tool bar. The original file will still exist.
<figure id="figure-saving-as-file">
<title id="figure-saving-as-file-title">Saving a File under a new Name</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/saving_as_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to save a file under a new name</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To save all modified files, you can use the <menuchoice><guimenu>File</guimenu><guimenuitem>Save All</guimenuitem></menuchoice> menu entry. This will save all documents that have been modified and present you with a save dialog if some files are new files.</para>
</sect2>

<sect2 id="renaming">
<title>Renaming files</title>
<para>It is also possible to move or rename a document, using the <menuchoice><shortcut><keycap>F2</keycap></shortcut><guimenu>File</guimenu><guimenuitem>Rename...</guimenuitem></menuchoice> menu item, or right-clicking the file name in the side panel and choosing the <guimenuitem>Rename</guimenuitem> item.
<figure id="figure-moving-file">
<title id="figure-moving-file-title">Moving a File to another Location</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/moving_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to move a file to another location</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>

<?pagebreakus?>
<sect2 id="deleting-files">
<title>Deleting files</title>
<para>To delete a file, right click on it in the file browser within the side panel. You will be asked either to confirm the deletion or to cancel the process, if you have the right permissions for it.</para>
<warning>
<para>Be cautious with this feature, there is no easy way to recover the deleted file.</para>
<para>Mac OS X users: this command is not equivalent to putting the file in the trash, but to using the <command>rm</command> command, so that, apart using a specialized commercial tool, you cannot recover the file.</para>
</warning>
<para>Combining this feature with the <guilabel>Show hidden files</guilabel> feature accessible via the contextual menu of the Filebrowser side panel allows you to delete hidden files more easily than via the <command>rm</command> tool on some systems.</para>
<para>Combining it with the <guilabel>Rename</guilabel> feature accessible via the contextual menu of the Filebrowser side panel allows you to delete an original file once you have edited a new file based on the former one, and to give the new file the same name as the original one.</para>
<tip>
<para>The first safe usage I can find for this feature is, for example, to remove the backup <filename>.#filename.version</filename> files created by CVS during conflicts after resolving them, particularly on Mac OS X where those files are tricky to access.</para>
<para>A second usage would be, for example, to save a po file again under its original name after updating it via a shell script under a new name, and editing it manually.</para>
</tip>
</sect2>

<sect2 id="closing">
<title>Closing files</title>
<para>When you want to close a file quickly, click on the <guilabel>close</guilabel> icon in the document tab. You may also use the <guilabel>Close</guilabel> icon in the main tool bar, or the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>W</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Close</guimenuitem></menuchoice> menu item.		
<figure id="figure-document-tab-icon">
<title id="figure-document-tab-icon-title">Closing a File with the Document Tab Icon</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/closing_file_with_tab_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the close icon in the document tab</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>If the file is unchanged, it is merely closed. If the file has been modified, you will be presented with a save dialog.
<figure id="figure-closing-a-file">
<title id="figure-closing-a-file-title">Closing a modified File</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/closing_a_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to close a modified file</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>Use it to save and close a file in one step.</para>
</tip>
<para>When dealing with multiple files, you may want to use the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>W</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Close All</guimenuitem></menuchoice> menu item.</para>
<para>For each modified file, you will be presented with a save dialog, where you can choose to save the changes, close the file (i.e. discarding any change), or cancel the operation.
<figure id="figure-closing-all-files">
<title id="figure-closing-all-files-title">Closing all Files</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/closing_all_files.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to close all files</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>Say you have a number of open files, and only a few of them have been changed. To quickly close the unchanged files, and remain with the modified ones, use it answering cancel for the latter ones.</para>
</tip>
<para>Note that the <menuchoice><guimenu>File</guimenu><guimenuitem>Close Window</guimenuitem></menuchoice> menu item offers the same behaviour.</para>
</sect2>

<sect2 id="inserting">
<title>Inserting files</title>
<para>You can insert any file into the current document with the <menuchoice><guimenu>File</guimenu><guimenuitem>Insert...</guimenuitem></menuchoice> menu item.
<figure id="figure-inserting-file">
<title id="figure-inserting-file-title">Inserting a File</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/inserting_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to insert a file</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
 <para>The file will be inserted at the cursor location.</para>
<warning><para>Always save the file before inserting another one, this will prevent any potential loss of data.</para></warning>
<para>For more in-depth information about dealing with files, see <xref linkend="more-files"/>.</para>
</sect2>

<sect2 id="editing">
<title>Editing</title>

<sect3 id="undo-redo">
<title>Undo and Redo</title>
<para>The undo and redo functionalities are available from the <guimenu>Edit</guimenu> menu,  the main tool bar, and the keyboard shortcuts.</para>
<itemizedlist>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></shortcut><guimenuitem>Undo</guimenuitem></menuchoice></para>
</listitem>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></shortcut><guimenuitem>Redo</guimenuitem></menuchoice>
</para>
</listitem>
</itemizedlist>
<para>The functions <guimenuitem>Undo All</guimenuitem> and <guimenuitem>Redo All</guimenuitem> in the <guimenu>Edit</guimenu> menu will undo or redo all of the stored changes. The maximum number of changes can be configured in the preferences; by default Bluefish will remember the last 100 changes per document. It is possible to clear the changes after the document is saved by unchecking the <guilabel>Clear undo history on save</guilabel> check box in the <guilabel>Editor</guilabel> tab of Preferences.</para>
<important><para>Always perform a save on file before making important modifications. This will prevent any loss of data during undoing.</para></important>
</sect3>

<sect3 id="cut-copy-paste">
<title>Cut, Copy, and Paste</title>
<para>The functions <guimenuitem>Cut</guimenuitem>, <guimenuitem>Copy</guimenuitem>, and <guimenuitem>Paste</guimenuitem> are available from the <guimenu>Edit</guimenu> menu, the main tool bar, and the keyboard shortcuts.</para>
<itemizedlist spacing="compact">
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>X</keycap></keycombo></shortcut><guimenuitem>Cut</guimenuitem></menuchoice></para>
</listitem>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></shortcut><guimenuitem>Copy</guimenuitem></menuchoice></para>
</listitem>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo></shortcut><guimenuitem>Paste</guimenuitem></menuchoice></para>
</listitem>
</itemizedlist>
<para>On X Windows Systems, you can also paste the current selected text using the middle mouse button. First select some text (in Bluefish or in any other X application), then press the middle mouse button where you want to paste the selected text.</para>
<para>Cut or copy and then paste can also be done by selecting some text and dragging it to the destination. If the text is dragged to another document (or another application), it is copied. If the text is dragged within one document it is moved. Dragging highlighted text from one application to another may or may not work. However, most GNOME and GTK programs support this feature.</para>
</sect3>

<sect3 id="input-methods">
<title>Input methods</title>
<para>Bluefish handles a number of input methods, available from the contextual menu within a given document.
<figure id="figure-input-methods-cm">
<title id="figure-input-methods-cm-title">The Input Methods Contextual Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/input_methods_cm.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the input methods contextual menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<itemizedlist spacing="compact">
<listitem>
<para>The default mode switches all input methods off.</para>
</listitem>
<listitem>
<para>The Amharic mode is used for the most popular Ethiopian language.</para>
</listitem>
<listitem>
<para>The Cedilla mode is used for languages such as French, which uses the cedilla.</para>
</listitem>
<listitem>
<para>The Cyrillic mode is used to enter Russian with Roman letters. The transliteration occurs immediately.</para>
</listitem>
<listitem>
<para>The Inukitut mode works the same as Cyrillic mode.</para>
</listitem>
<listitem>
<para>The IPA mode is used for International phonetic alphabet.</para>
</listitem>
<listitem>
<para>Other modes are used for Erythrean, Ethiopian, Thai and Vietnamese languages.</para>
</listitem>
</itemizedlist>
<para>The X Input method relies on a client-server input system, and an input server.</para>
<para>For Japanese, Chinese, and Korean documents, you may have to install and launch the correct input system, such as canna, and the appropriate input server, such as kinput2.</para>
<para>Here is how to write a Japanese document on a non-Japanese system.</para>
<procedure id="japanese-writing"><title>Writing in Japanese with Bluefish on a non-Japanese system</title>
<step>
<para>Launch the canna server if it is not running already</para>
</step>
<step>
<para>Set the encoding to Japanese, for example: <userinput>export LANG=ja_JP.UTF-8</userinput></para>
</step>
<step>
<para>Set the Xinput method with <userinput>export XMODIFIERS="@im=kinput2"</userinput></para>
</step>
<step>
<para>Launch kinput2 as a background process with <userinput>kinput2 &amp;</userinput></para>
</step>
<step>
<para>Launch bluefish as a background process with <userinput>bluefish &amp;</userinput></para>
</step>
<step>
<para>To activate the Xinput method within bluefish, use <keycombo><keycap>Shift</keycap><keycap>Space</keycap></keycombo>. A small window with a Japanese glyph will appear at one of the corner of the Bluefish window. Once the desired glyph has been composed, press <keycap>Space</keycap>, and hit <keycap>enter</keycap> to validate it.</para>
</step>
</procedure>
<para>Here, you can see the small Xinput method window, at the bottom left corner of the window and the first Japanese word not already validated in the Bluefish window launched on a French system.	
<figure id="figure-japanese-with-bluefish">
<title id="figure-japanese-with-bluefish-title">Writing in Japanese with Bluefish</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/japanese_with_bluefish.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to write in Japanese with Bluefish</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>For an in-depth discussion on that subject, see <ulink url="http://www.jw-stumpel.nl/stestu.html#T6">Inputting from the keyboard</ulink>.</para>
</sect3>

</sect2>

<sect2 id="basic-find-replace">
<title>Basic Find and Replace</title>
<para>Bluefish offers a wide range of find and replace methods in the <guimenu>Edit</guimenu> menu, also available through the contextual menu within a document. Here we will explore the most basic ones. For advanced find and replace methods, see <xref linkend="find-replace"/>.</para>

<sect3 id="basic-find">
<title>Searching for a word within a whole document</title>
<para>Choose the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find...</guimenuitem></menuchoice> menu item. A <guilabel>Find</guilabel> dialog will be displayed. Enter the word to search for in the <guilabel>Search for:</guilabel> field. Then click <guibutton>OK</guibutton>.
<figure id="figure-find-word-whole">
<title id="figure-find-word-whole-title">Finding a Word in a Document, from Start to End</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_word_whole.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to search a string within a document, from start to end.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>If the word does not exist in the document, a small window pops up.
<figure id="figure-search-not-found">
<title id="figure-search-not-found-title">Unsuccessful Search Window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/search_not_found.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the unsuccessful search window.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>If the search is successful, the document window scrolls up to the first occurrence of the string in the document and highlights it.</para>

<para>Below is an example of a search applied to a shell script.

<figure id="figure-search-found">
<title id="figure-search-found-title">Highlighted Search Result in the Document Window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/search_found.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the search result highlighted in the document window.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To find a subsequent occurrence of the string, use the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find again</guimenuitem></menuchoice> menu item. If no further occurrence is found, a dialog will be displayed notifying you that no match was found.</para>
</sect3>



<sect3 id="basic-find-selection">
<title>Setting limits to the search scope</title>

<para>You may want to search for a string from the cursor location till the end of the document. Here is an example to search all <literal>name ==</literal> occurrences within a python script from a given location.</para>
<procedure id="search-selection"><title>Searching from selection</title>
<step>
<para>Put the cursor where you want to start the search from in the document window

<figure id="figure-find-limited-cursor">
<title id="figure-find-limited-cursor-title">Setting the Cursor Location</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_limited_cursor.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to set the cursor location for a limited search.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Open the <guilabel>Find...</guilabel> dialog</para>
</step>
<step>
<para>Enter your search string in the <guilabel>Search for:</guilabel> field</para>
</step>
<step>
<para>Choose <guilabel>Current position till end</guilabel> from the <guilabel>Starts at:</guilabel> pop up menu
<figure id="figure-find-limited-dialog">
<title id="figure-find-limited-dialog-title">Choosing a limited Search Method</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_limited_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to search from the cursor's location.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Click OK.</para>
</step>
</procedure>
<para>Here is the result:
<figure id="figure-find-limited-result">
<title id="figure-find-limited-result-title">Limited Search Result</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_limited_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the result of a limited search.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice that the search does not take into account the occurrence of the same string at line 50, since it is outside the search scope.</para>

<para>You can also limit the search scope to a selection range. In that case, highlight the selection before the search, and choose <guilabel>Beginning of selection till end of selection</guilabel> from the <guilabel>Starts at:</guilabel> pop up menu in the <guilabel>Find</guilabel> dialog.</para>
</sect3>

<sect3 id="find-matching-case">
<title>Case sensitive search</title>
<para>By default, the search process is case insensitive. If you want to make it case sensitive, just check the <guilabel>Match case</guilabel> box in the <guilabel>Find dialog</guilabel>.
<figure id="figure-find-match-case">
<title id="figure-find-match-case-title">Making the Search Case Sensitive</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_match_case.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to make the search case sensitive</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Here is the result applied to a ruby script:
<figure id="figure-find-match-result-case">
<title id="figure-find-match-case-result-title">Case Sensitive Search Result</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_match_case_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing a case sensitive search</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice again that the result does not catch the XML string at line 45, since the search string was xml and case sensitive search was requested.</para>
</sect3>

<sect3 id="find-overlap">
<title>Overlapping searches</title>
<para>It may occur that the document contains some kind of palindrome you want to search for. The "normal" find process does not retrieve all occurrences of that kind of string.</para>
<para>In this case, you have to check the <guilabel>Overlap searches</guilabel> box in the <guilabel>Find</guilabel> dialog to retrieve all occurences of the string.
<figure id="figure-find-basic-overlap">
<title id="figure-find-basic-overlap-title">Finding overlapping Strings</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_basic_overlap.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to find overlapping strings</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Applied to a shell script, the second search (with <keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo>, then <keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo>) will give the following result:
<figure id="figure-find-basic-overlap-result">
<title id="figure-find-basic-overlap-result-title">An overlapping String retrieved with the Find Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_basic_overlap_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing an overlapping string retrieved by the Find process</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>

<sect3 id="find-old-search">
<title>Retrieving previous search strings</title>
<para>Notice that the pop up menu to the right of the <guilabel>Search for</guilabel> field in the <guilabel>Find</guilabel> dialog allows you to retrieve previous search strings. They are listed in reverse order by search history, providing quicker access to the most recent searches.
<figure id="figure-find-recent">
<title id="figure-find-recent-title">Retrieving recent Searches</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_recent.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the search for pop up menu to retrieve recent search string</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>

<sect3 id="more-on-find">
<title>More on find</title>
<para>For an explanation of the <guilabel>Bookmark results</guilabel> box of the <guilabel>Find</guilabel> dialog, see <xref linkend="generate-bookmark"/>.</para>
<para>You will find details on <guilabel>Find Again</guilabel> and <guilabel>Find from Selection</guilabel> in <xref linkend="find-replace"/>.</para>
<para>For a quick way of switching from HTML entities to other types of encoding and changing letter cases, see <xref linkend="find-replace-special"/>.</para>
</sect3>

<sect3 id="basic-replace">
<title>Replacing features</title>
<para>The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>H</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Replace...</guimenuitem></menuchoice> menu item works the same way and has all the features, the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find...</guimenuitem></menuchoice> menu item offers.</para>
<para>The <guilabel>Replace</guilabel> dialog is also accessible through the contextual menu within a document.</para>
<para>For the features common to the <guilabel>Find</guilabel> dialog, see <xref linkend="basic-find"/>.</para>
<para>Here we will explain the features unique to the <guilabel>Replace</guilabel> dialog.
<figure id="figure-replace-dialog">
<title id="figure-replace-dialog-title">The Replace Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/replace_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the replace dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>

<sect3 id="replace-old-search">
<title>Retrieving previous replace strings</title>
<para>As for the <guilabel>Search for</guilabel> field's pop up menu, the <guilabel>Replace with</guilabel> field's pop up menu allows you to retrieve previous strings used for replace, the most recent ones being at the top of the list.</para>
</sect3>



<sect3 id="replace-type">
<title>Changing letter case when replacing</title>
<para>If you want to change letter case when replacing, use the <guilabel>Replace type</guilabel> pop up menu.</para>
<para>The default choice is <guilabel>Normal</guilabel>, that is the case is not changed.</para>
<para>With the <guilabel>Uppercase</guilabel> replace type, the search string will be replaced with its uppercase translation.</para>
<para>Likewise, with the <guilabel>Lowercase</guilabel> replace type, the search string will be replaced with its lowercase translation.
<figure id="figure-replace-type-dialog">
<title id="figure-replace-type-dialog-title">Changing letter Case when Replacing</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/replace_type_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to change letter case when replacing</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice that in this case, the <guilabel>Replace with</guilabel> field is deactivated, thus not taken into account even if you have entered some string in it.</para>
</sect3>

<sect3 id="replace-prompt">
<title>Choosing strings to replace</title>
<para>It may occur that you do not want to replace all search strings retrieved by the search process, but only some of them. In this case, check the <guilabel>Prompt before replace</guilabel> box. A <guilabel>Confirm replace</guilabel> dialog will appear for each retrieved string where you can choose to <guilabel>Skip</guilabel> this string, i.e. leave it as it is, <guilabel>Replace</guilabel> it, <guilabel>Replace all</guilabel> strings within the search scope, or <guilabel>Close</guilabel> the dialog, i.e. cancel the process.
<figure id="figure-replace-confirm-dialog">
<title id="figure-replace-confirm-dialog-title">The Replace Confirm Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/replace_confirm_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the replace confirm dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>If you want to replace only the first occurrence of a search string, check the <guilabel>Replace once</guilabel> box instead.</para>
</sect3>

<sect3 id="more-on-replace">
<title>More on replace</title>
<para>For further explanation on replace features within Bluefish, see <xref linkend="find-replace"/>.</para>
</sect3>

</sect2>

<sect2 id="file-types">
<title>File types</title>
<para>Different file types can change the behaviour of Bluefish. File types are recognized by their extension, or by the beginning of the file's contents. The current document type is shown in the far right of the status bar. If the type of a file is not properly detected, you can change the type using the <menuchoice><guimenu>Document</guimenu><guisubmenu>Document Type</guisubmenu></menuchoice> menu. See <xref linkend="bluefish-preferences"/> to change these extensions.</para>

<sect3 id="syntax-highlighting">
<title>Syntax highlighting</title>
<para>Syntax highlighting is the coloring of words that have special meaning for a language. The patterns can vary: for example, "&lt;title&gt;"  means "start of title" in HTML, "function" means "start of function" in PHP.</para>
<para>While editing, Bluefish will only update the highlighting patterns in the block of text around the cursor. The number of lines (the size) of this block can be adjusted in the preferences under <guilabel>Editor</guilabel>. The syntax highlighting for the total document can be refreshed using the <menuchoice><shortcut><keycap>F5</keycap></shortcut><guimenu>Document</guimenu><guimenuitem>Update Highlighting</guimenuitem></menuchoice> menu. It can be disabled in the preferences under <guilabel>Editor</guilabel>. For more information about adding or modifying syntax highlighting for existent or new languages, see <link linkend="changing-highlighting-patterns">here</link>.</para>
</sect3>

</sect2>

<sect2 id="more-files">
<title>More on files</title>

<sect3 id="remote-files">
<title>Remote files</title>

<para>Assuming a working Internet connection, files can also be opened from the web using <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL</guimenuitem></menuchoice>. This feature depends on your gnome_vfs setup. If it is installed and working, http://, sftp://, smb:// and possibly more types of remote services should be supported by Bluefish. Depending on your gnome_vfs version, some of these protocols are not yet fully stable, which can crash Bluefish!

<figure id="figure-open-url">
<title id="figure-open-url-title">Opening an URL from the Web</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/open_url.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to open an URL from the web</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>Here you can see the style sheet of an Apache web site, nicely highlighted after its opening via the Bluefish <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL</guimenuitem></menuchoice> menu.
<figure id="figure-open-url-result">
<title id="figure-open-url-result-title">A Style Sheet opened via the Open URL Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/open_url_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a style sheet opened via the Open URL menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>



<sect3 id="character-encoding">
<title>Character encoding</title>
<para>There are many different standards for character encoding of text files. Most well known is the ASCII standard, which describes only 127 characters, and is supported by every text editor in the world. The most common standard nowadays is UTF-8, which describes thousands of characters, and is backwards compatible with ASCII.</para>
<para>Internally, Bluefish will always work with UTF-8. When opening a file, Bluefish has to detect the correct encoding for the file. For HTML files, the encoding should be present in a &lt;meta name=&quot;encoding&quot;&gt; tag. Bluefish will always use this tag if it is available in the file. If this tag has an encoding that is not present in the Bluefish config file, this encoding is automatically added to the Bluefish config file.</para>
<para>The locale also defines a default encoding. If you are using a locale (a local setting, defining language, time format, currency format, number formatting etc.), Bluefish will try to load the file using the encoding defined in the locale.</para>
<para>Bluefish itself also has a setting for a default encoding. This is the next encoding Bluefish will try. This is also the encoding Bluefish will use for files created by Bluefish (UTF-8 by default).</para>
<para>If these steps fail, Bluefish will simply try every encoding defined in the Bluefish 
config file.</para>
<para>Filenames on disk can also contain non ASCII characters. All GNOME and GTK programs (including Bluefish) assume that filenames are in UTF-8 encoding. If you have filenames in the encoding of your locale on your disk, you have to set <userinput>G_BROKEN_FILENAMES=1</userinput> in the environment to make GNOME and GTK programs detect this encoding.</para>
<para>For information about writing documents in 16-bits encoded languages, such as Japanese, see <xref linkend="input-methods"/>.</para>
</sect3>

<sect3 id="open-advanced">
<title>Open advanced</title>
<para>You can open multiple files at once with the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>O</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Open Advanced...</guimenuitem></menuchoice> menu item from a directory based on their extension or their contents. The same functionality is available from the file browser in the side panel by right-clicking a directory. This feature is available only when the find and grep utilities are installed on your system.</para>
<para>To open all files by extension, enter the extension in the dialog, and leave the search pattern empty. Check the <guilabel>recursive</guilabel> option if you want to include all subdirectories in the search. To open files by content, leave the extension at *, and enter a search pattern in the dialog. You can use regular expression patterns if you check the <guilabel>Is regex</guilabel> option.</para>
<para>You may also combine both methods. Here we open recursively all Chinese XML files in a given tree, whose contents contain the word packaging.

<figure id="figure-open-advanced">
<title id="figure-open-advanced-title">Using the Open Advanced Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/open_advanced.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the usage of the Open Advanced dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>

</sect2>

</sect1>


<sect1 id="navigation-managing-documents">
<title>Navigation and Managing documents</title>

<sect2 id="navigation-one">
<title>Navigating through a document</title>
<para>The editing area is a standard GTK editing area. This means there are many keyboard shortcuts available to navigate through the text.</para>
<itemizedlist spacing="compact">
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo> will jump to the next word boundary</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo> will jump to the previous word boundary</para>
</listitem>
<listitem>
<para><keycap>End</keycap> will jump to the end of line</para>
</listitem>
<listitem>
<para><keycap>Home</keycap> will jump to the beginning of the line</para>
</listitem>
<listitem>
<para><keycap>Page-Up</keycap> will jump one page up</para>
</listitem>
<listitem>
<para><keycap>Page-Down</keycap> will jump one page down</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Home</keycap></keycombo> will jump to the top of the document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>End</keycap></keycombo> will jump to the end of the document</para>
</listitem>
</itemizedlist>
<para>These shortcuts are also available when selecting text. Some examples:</para>
<itemizedlist spacing="compact">
<listitem>
<para>To select the current line, press <keycap>Home</keycap>, hold <keycap>Shift</keycap> and press <keycap>End</keycap>.</para>
</listitem>
<listitem>
<para>To select the current word, press <keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo>, hold <keycap>Shift</keycap> and press <keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo>.</para>
</listitem>
</itemizedlist>
</sect2>

<sect2 id="navigation-multiple">
<title>Navigating through many documents</title>
<para>Navigating through a large list of documents can be difficult. But if you right-click the document notebook tabs, you get a list of all opened documents.</para>
<para>Navigation between documents can also be done using the <guimenu>Go</guimenu> menu, or its shortcuts.
<figure id="figure-go-menu">
<title id="figure-go-menu-title">Bluefish Go Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/go_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 go menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The shortcuts are the following:</para>
<itemizedlist spacing="compact">
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the previous document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the next document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the first document</para>
</listitem>
<listitem>
<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the last document</para>
</listitem>
</itemizedlist>
<para>The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>L</keycap></keycombo></shortcut><guimenu>Go</guimenu><guimenuitem>Goto Line</guimenuitem></menuchoice> offers an interesting feature.</para>
<para>If there is some number in the document, you may select it, then click the <guilabel>From selection</guilabel> label in the Goto line dialog. Bluefish will fill in the <guilabel>Line number</guilabel> field with that number and go directly to it. The same feature is available from the <menuchoice><guimenu>Go</guimenu><guimenuitem>Goto Selection</guimenuitem></menuchoice>.
<figure id="figure-goto-line">
<title id="figure-goto-line-title">Using the Goto Line Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/goto_line.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the Goto Line dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>Check the <guilabel>Keep dialog</guilabel> box to keep the dialog open, when you plan to access several parts of the document by line numbers.</para>
</tip>
</sect2>

<sect2 id="projects">
<title>Projects</title>
<para>The projects are a sort of <emphasis>saved state</emphasis> of Bluefish. Thus, they are a very convenient way to work with files scattered all over your disks or to pick up only the files you are interested in within a huge tree. Projects features are accessible through the <guimenu>Project</guimenu> menu.
<figure id="figure-project-menu">
<title id="figure-project-menu-title">The Bluefish Project Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 project menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<procedure id="creating-new-project"><title>Creating a New Project</title>
<step>
<para>Click on the <menuchoice><guimenu>Project</guimenu><guimenuitem>New Project</guimenuitem></menuchoice></para>
<para>If some documents are already opened, check the appropriated box in the <guilabel>Create project</guilabel> dialog.
<figure id="figure-project-create-dialog">
<title id="figure-project-create-dialog-title">The Create Project Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_create_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the create project dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Fill in the fields in the <guilabel>Create New Project</guilabel> dialog
<figure id="figure-project-new-dialog">
<title id="figure-project-new-dialog-title">Creating a New Project</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_new_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the new project dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>With a <guilabel>Basedir</guilabel> the file browser in the side panel shows only the files within its hierarchy. With gnome-vfs support, the <guilabel>Basedir</guilabel> can be remote, as <filename>smb://user:pass@server/someshare/</filename> or <filename>sftp://someserver/somedir</filename>.</para>
<para>The <guilabel>Preview URL</guilabel> allows Bluefish to launch the browser to the appropriate URL, for example <filename>http://localhost/ Bluefish</filename>. This can be very convenient for testing server side scripting languages like PHP, JSP, etc.</para> 
<para>If the <guilabel>Template</guilabel> field is used, Bluefish will use the template file's contents for new files, which can be requested either via the <guilabel>New</guilabel> button on the main tool bar or <menuchoice><shortcut><keycap>Ctrl</keycap><keycap>N</keycap></shortcut><guimenu>File</guimenu><guimenuitem>New</guimenuitem></menuchoice>. Otherwise an empty document will be created.</para> 
</step>
<step>
<para>Once the project is created, you need to tell Bluefish where you want to save it. An <guilabel>Enter Bluefish project filename</guilabel> dialog will be displayed. Notice that you can save the project in a location different from the files to which the project points.
<figure id="figure-project-save-dialog">
<title id="figure-project-save-dialog-title">Entering Bluefish Project Filename</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_save_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the enter bluefish project dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
</procedure>
<para>To open a project, you have the choice between <menuchoice><guimenu>Project</guimenu><guimenuitem>Open Project...</guimenuitem></menuchoice> or <menuchoice><guimenu>Project</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice>. When you choose the former, a <guilabel>Selecting a Bluefish Project</guilabel> dialog is presented to you.
<figure id="figure-project-open-dialog">
<title id="figure-project-open-dialog-title">Selecting a Bluefish Project</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_open_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the select Bluefish project filename dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>To save the project under its current name/location, use <menuchoice><guimenu>Project</guimenu><guimenuitem>Save</guimenuitem></menuchoice> or <menuchoice><guimenu>Project</guimenu><guimenuitem>Save &amp; close</guimenuitem></menuchoice>; to save it under a new name/location, use <menuchoice><guimenu>Project</guimenu><guimenuitem>Save as...</guimenuitem></menuchoice>. If any file in the project has changed, a dialog will allow you to save the file, discard the changes, or cancel. All files open when the project is saved are automatically opened the next time you open the project.
<figure id="figure-project-open">
<title id="figure-project-open-title">Opening a Bluefish Project</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/project_open.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a Bluefish project</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice that the side panel only shows the tree related to the project.</para>
<para>Also, the recently used files in that project are shown in the <menuchoice><guimenu>File</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice> menu item.</para>
<para>A project also saves some basic Bluefish settings, giving the project its own customized Bluefish setup. Currently, the word wrap preference and the state of various tool and menu bars are saved in a project file. The project file itself is simply a text file in the standard Bluefish format (same format as the config file). This format is <literal>key: value</literal>. Here is an example:
<programlisting>name: BluefishDoc
basedir: ~/bluefishcvs/bluefish-gtk2/doc/
webdir: http://micmacfr.homeunix.org/bluefish/doc
template: 
view_main_toolbar: 1
view_left_panel: 1
view_custom_menu: 1
view_html_toolbar: 1
word_wrap: 1
</programlisting></para>
</sect2>

<sect2 id="bookmarks">
<title>Bookmarks</title>
<para>In Bluefish you can add bookmarks to a line in the text, and you can later use the bookmark to quickly jump to this location, or even to open the document referred to by the bookmark at that line.</para>
<para>Bookmarks can be added to the current cursor location by using the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Add Bookmark</guimenuitem></menuchoice> menu item; or by right-clicking in the text, and selecting <guilabel>Add bookmark</guilabel>. You can delete a bookmark using the <guilabel>Delete bookmark</guilabel> item in the document contextual menu.</para>
<para>Each bookmark in a given document is marked by a blue background in the line number margin.
<figure id="figure-bookmark-marked">
<title id="figure-bookmark-marked-title">How Bookmarks are marked</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_marked.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how bookmarks are marked</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Bookmarks can be temporary or permanent. Permanent bookmarks are stored, and temporary bookmarks are gone after Bluefish is closed.	The default is set in the preferences under <guilabel>Editor</guilabel>.</para>
<para>Bookmarks can be found in the third tab of the side panel, sorted by document and line number.
<figure id="figure-bookmark-tab">
<title id="figure-bookmark-tab-title">Bookmarks in the Side Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing bookmarks in the side panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>If you right click a bookmark in the bookmark tab of the side panel, you get a pop up menu with several options.
<figure id="figure-bookmark-cm">
<title id="figure-bookmark-cm-title">Contextual Menu on Bookmark in the Side Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_cm.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the contextual menu on bookmark in the side panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>The <guilabel>Goto bookmark</guilabel> item allows you to go to the bookmark location in the document, opening it if needed.</para>



<para>The <guilabel>Edit</guilabel> item allows you to change a bookmark from temporary to permanent or the other way around, to name it, and to give it a short description.



<figure id="figure-bookmark-edit">
<title id="figure-bookmark-edit-title">Editing a Bookmark</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_edit.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the edition of a bookmark</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>



<para>Note that after naming a bookmark, the default name - first characters of the bookmarked line - is displayed after the new name.


<figure id="figure-bookmark-name">
<title id="figure-bookmark-name-title">A named Bookmark</title>


<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_name.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing a named bookmark</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>



<para>Via this contextual menu, you may also delete a bookmark, delete all bookmarks in the active document, or delete all bookmarks stored in the bookmark tab of the side panel. The latter ones are also available when you right click the name of a document in this tab.


<figure id="figure-bookmark-document-cm">
<title id="figure-bookmark-document-cm-title">The Contextual Menu on a Document in the Bookmark Tab</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_document_cm.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the contextual menu on a document in the bookmark tab</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>



<sect3 id="generate-bookmark">
<title>Generating several bookmarks at once</title>


<para>To add many bookmarks at once, use the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> dialog. Check the <guilabel>Bookmark result</guilabel> option, and all search results will be added to your bookmarks.</para>

<para>For example, the XML files for this manual have sections, each identified by a header like <literal>&lt;sect1 id="nameofthesection"&gt;</literal>. A way to automatically get a bookmark to every section is to search for the following posix regular expression pattern: <literal>&lt;sect[0-9]+ id="[^"]+"&gt;</literal> and bookmark all results.

<figure id="figure-bookmark-find-posix">
<title id="figure-bookmark-find-posix-title">Bookmarking with Posix Regular Expression</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find_posix.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to bookmark with Posix regular expression</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Here is the result:
<figure id="figure-bookmark-find-posix-result">
<title id="figure-bookmark-find-posix-result-title">Bookmarks with Posix Regular Expression</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find_posix_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the bookmarks with Posix regular expression</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>Here are two examples which bookmarks all functions in Objective-C and PHP files with POSIX or PERL regular expressions:
<figure id="figure-bookmark-find-cm">
<title id="figure-bookmark-find-title">Bookmarking Objective C Functions via the Find Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to bookmark Objective C functions via the Find menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
<figure id="figure-bookmark-find-perl">
<title id="figure-bookmark-find-perl-title">Bookmarking PHP Functions via the Find Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_find_perl.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing another use of regular expressions in the find dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Check <xref linkend="find-replace-regex"/> for more information on finding and replacing with regular expression in Bluefish.</para>
</sect3>

</sect2>

<sect2 id="find-replace">
<title>Find and Replace</title>
<para>The <guimenu>Edit</guimenu> menu features several options for Find and Replace. The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> and <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>H</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Replace...</guimenuitem></menuchoice> menu items will simply start their corresponding dialogs described in <xref linkend="basic-find-replace"/>.</para>

<sect3 id="find-again">
<title>Find Again</title>
<para>The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find again</guimenuitem></menuchoice> menu item will repeat the last used search. It will continue the search after the position where the previous search was stopped. If the end of file is reached, it will signaled it if the search operates on a unique file, nevertheless you can continue the search from the top of file with <keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo> after dismissing the <guilabel>Search: no match found</guilabel> dialog. If the search operates on multiple files, it will continue with the next file.</para>
<para>Here you can see how the <guilabel>Find again</guilabel> process operates on two successive searches for the word "url" in an xml file:
<figure id="figure-find-again-first">
<title id="figure-find-again-first-title">Nth Occurrence with Find Again</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_again_first.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the nth occurrence of a search with Find again</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para><figure id="figure-find-again-second">
<title id="figure-find-again-second-title">Nth+1 Occurrence with Find Again</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_again_second.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the nth + 1 occurrence of a search with Find again</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>

<sect3 id="find-from-selection">
<title>Find from Selection</title>
<para>The <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find from selection</guimenuitem></menuchoice> menu item will search for the currently selected text. If you select for example the name of a function, in bluefish, or in any other program, and you choose find from selection Bluefish will start a new search for this selected string.</para>
<para>Here we have selected a function in a C file:
<figure id="figure-find-selection-select">
<title id="figure-find-selection-select-title">Selecting a String for subsequent Search</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_selection_select.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the selection of a string for subsequent search</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Clicking on <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find from selection</guimenuitem></menuchoice> gives the following result:
<figure id="figure-find-selection-search">
<title id="figure-find-selection-search-title">Finding a String from Selection</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_selection_search.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the result of a find from selection search</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Next occurrences of the string can be found with <keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo> as usual.</para>
</sect3>


<sect3 id="find-replace-regex">
<title>Find and Replace Using Regular Expressions</title>
<para>With find and replace you can do incredibly powerful searches. We have already seen some of them in <xref linkend="generate-bookmark"/>, which deserve some explanation here.</para>

<example id="retrieve-sections"><title>Retrieving all sections in an xml book</title>
<para>The regular POSIX expression <literal>&lt;sect[0-9]+ id="[^"]+"&gt;</literal> can be split into:</para>
<itemizedlist>
<listitem>
<para><literal>&lt;sect</literal>: a string beginning by <literal>&lt;sect</literal></para>
</listitem>
<listitem>
<para><literal>[0-9]+ </literal>: followed by one or more (the <literal>+</literal> part) characters in the range of 0 to 9 (the <literal>[0-9]</literal> part), i.e. digits, followed by a space</para>
</listitem>
<listitem>
<para><literal>id="</literal>: followed by the string <literal>id</literal>, followed by an equal sign, followed by a double-quote</para>
</listitem>
<listitem>
<para><literal>[^"]+</literal>: followed by one or more (the <literal>+</literal> part) not double-quote characters (the <literal>[^"]</literal> part - <literal>^</literal> is a not )</para>
</listitem>
<listitem>
<para><literal>"&gt;</literal>: followed by a double-quote, and ending with a &gt; sign</para>
</listitem>
</itemizedlist>
<para>Therefore, it matches any string of type <literal>&lt;sectn id="nameofthesection"&gt;</literal>, where n is a positive integer.</para>
</example>





<example id="retrieve-functions-objc"><title>Retrieving all functions in an Objective C file</title>
<para>In a simplified example, an objective C function may have two forms:</para>
<orderedlist>
<listitem>
<para><literal>- (IBAction)nameofthefunction:(id)parameter</literal></para>
</listitem>
<listitem>
<para><literal>- (void) nameofthefunction</literal></para>
</listitem>
</orderedlist>
<para>We will try to make a pattern from those forms:</para>
<itemizedlist>
<listitem>
<para>Hyphens and parentheses have special meanings in regular expressions, hence we need to escape them, i.e. to put before each of them a backslash, so that they will be interpreted as normal characters.</para>
<para>Thus, <literal>- (</literal> is matched by: <literal>\- \(</literal></para>
</listitem>
<listitem>
<para><literal>IBAction</literal> or <literal>void</literal> are a non empty sequence of alphabetical characters. We have already seen something similar in the previous example.</para>
<para>They are matched by: <literal>[a-z]+</literal>, that is one or more characters in the range of a to z.</para>
</listitem>
<listitem>
<para>Another parenthesis matched by: <literal>\)</literal>.</para>
</listitem>
<listitem>
<para>A space or no space at all, it is matched by: <literal> *</literal>, that is a space followed by an asterisk, which means 0 or more times the preceding character.</para>
</listitem>
<listitem>
<para>A non empty sequence of characters, matched by <literal>[a-z]+</literal> as already seen.</para>
</listitem>
<listitem>
<para>A colon or no colon at all, which is matched by: <literal>[:]*</literal>.</para>
</listitem>
</itemizedlist>
<para>Thus the whole POSIX regular expression is: <literal>\- \([a-z]+\) *[a-z]+[:]*</literal>. In the example, we have grouped the parts with parentheses, you may prefer this simplified form, though it is not recommended.</para>
</example>





<example id="retrieve-functions-php"><title>Retrieving all functions in a PHP file</title>
<para>A php function has the form <literal>function nameofthefunction(listofparameters)</literal>, where the list of parameters can be empty. To match it with a PERL regular expression, you have to know that <literal>\s matches any white space</literal> and <literal>\w</literal> matches any alphanumerical character as well as white spaces.</para>
<para>Thus, the matching regular expression is: <literal>function\s+\w+</literal>.</para>
<para>Now, if you want to capture also the function's parameters, you have to add:</para>
<itemizedlist>
<listitem>
<para>An opening parenthesis: <literal>\(</literal>. Remember parentheses should be escaped with a backslash.</para>
</listitem>
<listitem>
<para>Zero or more characters, none of them being a closing parenthesis: <literal>[^\)]*</literal></para>
</listitem>
<listitem>
<para>A closing parenthesis: \)</para>
</listitem>
</itemizedlist>
<para>The PERL regular expression becomes: <literal>function\s+\w+\([^\)]*\)</literal>.</para>
</example>

<para>Here is a new example which transforms a table into a definition list inside an html file.</para>

<example id="transform-table-deflist"><title>Transforming a table into a definition list</title>
<para>Say you have the following table:
<figure id="figure-find-regex-before">
<title id="figure-find-regex-before-title">The table before Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_regex_before.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the table before transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<para>You want to transform it in the following definition list:
<figure id="figure-find-regex-after">
<title id="figure-find-regex-after-title">The table after Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_regex_after.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the table after transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<para>For the rendering, you will use the following css style sheet:
<programlisting><![CDATA[
.st2 {
    font-weight: 900;
    color: #e38922;
    margin-left: 30px;
}
dl {
    font-weight: 900;
    margin-left: 55px;
}
dt {
    margin-top: 6px;
}
.dd1 {
    font-style: normal;
    font-weight: 400;
}
]]></programlisting></para>

<para>The table's source code is the following:
<programlisting><![CDATA[<table border="1">
<tr>
<th>Software</th>
<th>Use</th>
<th>Requirements</th>
<th>Author</th>
<th>Date</th>
<th>Download</th>
</tr>
<tr>
<td>BackupSeek 1.8</td>
<td>To catalog your backup from all media. Prints labels too.</td>
<td>PPC</td>
<td>Ken Ng</td>
<td>17 November 1999</td>
<td>English version (452 Ko)</td>
</tr>
<tr>
<td>Biblioteca v. 1.0</td>
...
</tr>
</table>]]></programlisting></para>

<para>The definition list's source code will be the following:
<programlisting><![CDATA[<p class="st2">BackupSeek 1.8</p>
<dl>
<dt>Use:</dt><dd><span class="dd1">To catalog your backup from all media. \
Prints labels too.</span></dd>
<dt>System requirements:</dt><dd><span class="dd1">PPC</span></dd>
<dt>Author:</dt><dd><span class="dd1">Ken Ng</span></dd>
<dt>Date:</dt><dd><span class="dd1">17 November 1999</span></dd>
<dt>Download:</dt><dd><span class="dd1">English version (452 Ko)</span></dd>
</dl>
<p class="st2">Biblioteca v. 1.0</p>
...
</dl>]]></programlisting></para>

<para>Comparing both chunks of code, we see that the variable sequence of characters to capture is the one between one <literal>&lt;td&gt;</literal> tag and its closing <literal>&lt;/td&gt;</literal> tag. That sequence can be interpreted as one or more characters which are not a <literal>&lt;</literal>. We have already seen that. This is expressed as: <literal>[^&lt;]+</literal></para>
<para>To be able to retrieve it later, we need to embed it into parentheses. Thus, the string becomes: <literal>([^&lt;]+)</literal></para>
<para>Next, this sequence is embedded into <literal>&lt;td&gt;</literal> and <literal>&lt;/td&gt;</literal>, which is expressed simply concatenating the strings: <literal>&lt;td&gt;([^&lt;]+)&lt;/td&gt;</literal></para>
<para>We should also add the end of line character, which is expressed as: <literal>\n</literal>. The regular expression now describes a whole line: <literal>&lt;td&gt;([^&lt;]+)&lt;/td&gt;\n</literal></para>
<para>As we cannot use variables to retrieve the headers of the table, we will merely repeat that string five times, so that the regular expression matches exactly the six lines of importance to us.</para>
<para><note>
<para>Do not type it six times in the search field. Select the string, use the shortcuts <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> to copy it, move to the end of the string with the <keysym>right arrow</keysym>, and use <keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo> five times to paste it at the end of the string.</para>
</note></para>


<para>The regular expression becomes (backslashes are inserted at end of line just for the purpose of not to have too long lines):
<programlisting><![CDATA[<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n]]></programlisting></para>

<para>Those lines are at their turn embedded into <literal>&lt;tr&gt;</literal> and <literal>&lt;/tr&gt;</literal> tags each of them on their own line, which can be expressed as: <literal>&lt;tr&gt;\n</literal> for the first one, and <literal>&lt;/tr&gt;\n</literal> for the second one. We add those strings respectively at the beginning and at the end of our regular expression, which becomes:
<programlisting><![CDATA[<tr>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
<td>([^<]+)</td>\n \
</tr>\n]]></programlisting></para>
<para>Now that we have described the search pattern, we will build the replace pattern. Each expression embedded into parentheses in the search string can be retrieved with <literal>\x</literal>, where x is an integer starting at 0 for the first expression, 1 for the second, etc. All others parts in the final string are fixed strings which we will express as they are.</para>
<para>The first line becomes (note the \n at the end to match the end of line character): 
<programlisting><![CDATA[<p class="st2">\0</p>\n]]></programlisting></para>
<para>The second line (again, note the \n to match the end of line characters):
<programlisting><![CDATA[<dl>\n<dt>Use:</dt><dd><span class="dd1">\1</dd>\n]]></programlisting></para>
<para>And finally the whole replace pattern is:
<programlisting><![CDATA[<p class="st2">\0</p>\n \
<dl>\n<dt>Use:</dt><dd><span class="dd1">\1</dd>\n \
<dt>System requirements:</dt><dd><span class="dd1">\2</span></dd>\n \
<dt>Author:</dt><dd><span class="dd1">\3</span></dd>\n \
<dt>Date:</dt><dd><span class="dd1">\4</dd>\n \
<dt>Download:</dt><dd><span class="dd1">\5</span></dd>\n</dl>\n]]></programlisting></para>
<para>After entering both patterns, choose <guilabel>PERL type</guilabel> in the <guilabel>Regular expression</guilabel> drop down list, check the <guilabel>Patterns contain backslash escape sequences (\n, \t)</guilabel> and click OK.</para>
<para>After replacement occurred, you have to remove the table headers and the last <literal>&lt;/table&gt;</literal> tag and to insert the link to the style sheet.</para>
<para>Note that if some lines contain a <literal>&lt;</literal> sign, the table row will not be translated, but others will.</para>
</example>
<para>In the <guilabel>Find</guilabel> and <guilabel>Replace</guilabel> dialogs it is not possible to insert the keys <keycap>Enter</keycap> or <keycap>Tab</keycap>. A simple way to do it is to copy two lines in a row from the current document into the <guilabel>Find</guilabel> or <guilabel>Replace</guilabel> dialog, this way you retrieve the end of line character. The same applies for <keycap>Tab</keycap>. A more elaborated way to do it is to use escaped characters to represent these characters. A new line character, produced by pressing the <keycap>Enter</keycap> key, is represented as <literal>\n</literal>. Use <literal>\t</literal> for a tab. To get an actual backslash, just escape the backslash, <literal>\\</literal>. There are many other escape characters used in regular expressions.</para>
<note>
<para>To enable the escaped characters in your searches check the <guilabel>Patterns contain backslash sequences (\n, \t)</guilabel> option.</para>
</note>
<para>If you have any search and replace patterns you use often, you can also add them to the Custom Menu. Check <xref linkend="custom-menu"/> for more information.</para>
<para>For more information about regular expressions you might want to read man 1 perlre,  man 3 pcrepattern, man 3 regex or man 7 regex, or read any of the great Internet sites about regular expressions. As you become more familiar with regular expressions, you will realize that they make <application>Bluefish</application> a very powerful editor.</para>
</sect3>

</sect2>

</sect1>

<sect1 id="more-than-text-editor">
<title>More than a Text Editor</title>

<sect2 id="indenting">
<title>Indenting</title>
<para>To indent large sections of text, simply highlight the section and 
choose <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>.</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Shift Right</guimenuitem></menuchoice>. To remove an indentation, choose <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>,</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Shift Left</guimenuitem></menuchoice>.  There are corresponding buttons in the tool bar for these menu options (see later in this text).</para>
<para>By default, Bluefish will use tabs for indenting, but can be configured to use spaces if you have <guilabel>Use spaces to indent, not tabs</guilabel> selected in the Editor preferences panel. The number of spaces used is the same as the <guilabel>Tab width</guilabel> option in the same preferences panel.</para>

<para>Here's an extract of Dante's work indented with the <guilabel>Shift Right</guilabel> button in the main tool bar:







<figure id="figure-indenting_right">
<title id="figure-indenting_right-title">Indenting Part of a Text</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/indenting_right.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a text indented with the shift right button</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>








<sect2 id="auto-tag-closing">
<title>Auto tag closing</title>
<para>By default, Bluefish will automatically produce closing tags for HTML and XML documents. For example, if you type <literal>&lt;p&gt;</literal> within an HTML document, bluefish will produce <literal>&lt;/p&gt;</literal>. So, as soon as you finish typing a non-empty HTML tag, meaning the tag is supposed to have a closing tag, Bluefish will help you out and close the tag automatically. This feature can be turned off by unchecking the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>T</keycap></keycombo></shortcut><guimenu>Document</guimenu><guimenuitem>Auto Close HTML Tags</guimenuitem></menuchoice> menu option.</para>
<para>Bluefish has two modes for tag closing, an XML mode and an HTML mode. In XML mode, Bluefish will add a closing tag to any tag that is not closed itself with /&gt;. In HTML mode, Bluefish excludes all known tags that do not need a closing tag, such as &lt;br&gt; and &lt;img&gt;.</para>
<para>Bluefish will choose the mode based on the file type of the document. In the filetype preferences panel, the default mode for each file type can be set. See <xref linkend="changing-filetypes"/> for more info.</para>
</sect2>



<sect2 id="spell-checker">
<title>Spell checker</title>
<figure id="figure-spell-checker">
<title id="figure-spell-checker-title">Bluefish Spell Checker</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/spell_checker.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 spell checker</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
<para>Bluefish uses <ulink url="http://aspell.sourceforge.net/">aspell</ulink> for spell checking. If the aspell libraries are not installed on your system, then the spell checking feature will not be available. At the aspell web site you can also download dictionaries for many different languages.</para>
<para>To launch the spell checker, select <menuchoice><guimenu>Document</guimenu><guimenuitem>Check Spelling...</guimenuitem></menuchoice> or click on the <guilabel>ABC</guilabel> button on the main tool bar. The spell checker will launch in a separate window, which you can keep open as you edit files.</para>
<para>You have the option to check a whole document or just a selection, to use a personal or a session dictionary, and to choose the language depending on the installed dictionaries.</para>
<para> Click on <guilabel>Spell Check</guilabel> to start spell checking the current document.</para>
<para>You may want to set a default dictionary by first choosing the language in the <guilabel>Language</guilabel> pop up menu, then clicking on <guilabel>Set default</guilabel>.</para>
<para>Key words for different languages can be ignored using filters. Currently, the only filter is for HTML. If you want to help write more filters, join the <link linkend="bluefish-contact">mailing list</link>.</para>
</sect2>

<sect2 id="function-reference">
<title>Function reference</title>
<para>The function reference browser contains reference information for   different programming and markup languages. Currently, Bluefish comes with a PHP reference, a CSS 2.0 reference, an HTML reference, and a Python reference. The functions are grouped, depending on the language, by type, module, object, etc.</para>
<para>The function reference browser will display an info window on the bottom by checking the <guilabel>Show info window</guilabel> check box. In this window, information about the currently selected item is shown. The type of information shown can be configured in the right-click context menu (see Info Type later in this text).</para>
<para>In the reference browser's contextual menu, you can simply insert the text for the selected item by choosing <guilabel>Insert</guilabel>. Or, you can get a little help using <guilabel>Dialog</guilabel>, which launches a dialog window containing fields for the currently selected item's attributes or parameters. For a summary of an item's usage, choose <guilabel>Info</guilabel>. The contextual menu is also accessible on a group of functions and at the top level of a reference.
<figure id="figure-browser-reference-right-click">
<title id="figure-browser-reference-right-click-title">The Reference Browser Contextual Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_right_click.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the reference browser contextual menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>




<para>The <guilabel>Options</guilabel> menu accessible via the contextual menu offers three actions:


<figure id="figure-browser-reference-options">
<title id="figure-browser-reference-options-title">The Reference Browser Options Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_options.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the reference browser options menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<itemizedlist>
<listitem>
<para><guilabel>Rescan reference files</guilabel> in case you have customized one of them, so that the new items be available.</para>
</listitem>
<listitem>
<para><guilabel>Left doubleclick action</guilabel>, which can be:</para>
<itemizedlist>
<listitem>
<para><guilabel>Insert</guilabel> to insert the function in the document for latter parametrizing if needed</para>
</listitem>
<listitem>
<para><guilabel>Dialog</guilabel> to insert the function in the document while filling in the parameters in a dialog window:

<figure id="figure-browser-reference-dialog">
<title id="figure-browser-reference-dialog-title">A Function Reference Dialog Window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a function reference dialog window</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

</listitem>
<listitem>
<para><guilabel>Info</guilabel> to display a window with all available info about the function:
<figure id="figure-browser-reference-info-window">
<title id="figure-browser-reference-info-window-title">Info available for a Function</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_info_window.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of all info available for a function</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist> 
</listitem>
<listitem>
<para><guilabel>Info Type</guilabel>: this is where you can customize what appears in the info window. It can be:</para>
<itemizedlist>
<listitem>
<para>the function <guilabel>Description</guilabel> (this is the default)</para>
</listitem>
<listitem>
<para>the <guilabel>Attributes/Parameters</guilabel> of the function</para>
</listitem>
<listitem>
<para>some <guilabel>Notes</guilabel> about the function</para>
</listitem>
</itemizedlist> 
</listitem>
</itemizedlist>
</sect2>




<sect2 id="HTML">
<title>HTML</title>
<para>HTML is obviously the most supported language in Bluefish. There is a special HTML tool bar with many dialogs, and two menus to work with tags:</para>
<itemizedlist>
<listitem>
<para>the <guilabel>Tags</guilabel> menu:
<figure id="figure-html-tags-menu">
<title id="figure-html-tags-menu-title">The HTML Tags Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_tags_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML tags menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
<listitem>
<para>the <guilabel>Dialogs</guilabel> menu:

<figure id="figure-html-dialogs-menu">
<title id="figure-html-dialogs-menu-title">The HTML Dialogs Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_dialogs_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML dialogs menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>



<para>The preferences have several settings on HTML style under <guilabel>HTML</guilabel>.</para> 

<para>The HTML tool bar has two types of buttons. You can recognise each type by the tool tip if you move the mouse over the button:</para>
<itemizedlist>
<listitem>
<para>First there are buttons that will open a dialog for some HTML tag. These buttons have a tool tip that ends with three dots.

<figure id="figure-html-tooltip-dots">
<title id="figure-html-tooltip-dot-title">An HTML Button with a three-dotted Tool Tip</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_tooltip_dots.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of an HTML three-dotted tool tip</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
<listitem>
<para>Second, there are buttons that will directly insert text, these buttons do not have the dots in the tool tip.

<figure id="figure-html-tooltip-simple">
<title id="figure-html-tooltip-simple-title">A simple HTML Tool Tip Button</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_tooltip_simple.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a simple HTML tool tip</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>  

<para>If you want to add an HTML tag around some block of text, select the block of text, use the HTML tool bar or the Tags or Dialogs menu to insert the tag. The opening tag will be inserted before the selected block, the closing tag after the selected block.</para>
<para>An existing tag can be edited by right-clicking the tag, and select <guilabel>Edit tag</guilabel> in the context menu. You can also place the cursor in the tag and use <menuchoice><shortcut><keycap>F3</keycap></shortcut><guimenu>Dialogs</guimenu><guimenuitem>Edit tag under cursor...</guimenuitem></menuchoice>. Not all tags, however, have a dialog, so this is not always possible. Colors in the style #RRGGBB can also be edited from the right-click context menu.</para>
<para>In the reference browser on the left panel there is an HTML reference available. All possible attributes and valid values can be found in this reference. See <xref linkend="function-reference"/> for more info.</para> 


<sect3 id="find-replace-special">
<title>Special find and replace features</title>

<para>There are several special search and replace actions in the menu <menuchoice><guimenu>Edit</guimenu><guisubmenu>Replace special</guisubmenu></menuchoice>. These can be used to convert special characters (like &lt; and &amp;), or ISO characters to their HTML entities, as well as to change the letters case.

<figure id="figure-replace-special-menu">
<title id="figure-replace-special-menu-title">The Replace Special Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/replace_special_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Replace special menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>In all cases, when you want to replace some part of the text, you should first select the part to replace, then use the appropriated menu item.</para>
</sect3>






<sect3 id="thumbnails">
<title>Thumbnail generation</title>

<para>Bluefish can automatically generate thumbnails for images. A thumbnail is a small image, with a link to the larger image. Bluefish will create the small image based on your settings, and insert a &lt;img&gt; tag in the file, and a &lt;a&gt; tag linking the original. The thumbnails are created in the same directory as the original sources.</para>

<para>The formats used for thumbnails may be png or jpg format. By default, the format used for thumbnails is png. You can change it in the <guilabel>Images</guilabel> panel of Preferences. For jpg images, the thumbnail extension is jpeg.</para>

<para>There are actually two thumbnail dialogs in Bluefish:</para>
<itemizedlist>
<listitem>
<para>an Insert thumbnail dialog,accessible from the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Alt</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>Dialogs</guimenu><guisubmenu>General</guisubmenu><guimenuitem>Insert Thumbnail...</guimenuitem></menuchoice> or from the <guilabel>Standard bar</guilabel> of the HTML toolbar.

<figure id="figure-thumbnail-simple-icon">
<title id="figure-thumbnail-simple-icon-title">The Insert Thumbnail Icon</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_simple_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the insert thumbnail icon</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
<listitem>
<para>a Multi thumbnail dialog, only accessible from the <guilabel>Standard bar</guilabel> of the HTML toolbar.

<figure id="figure-thumbnail-multi-icon">
<title id="figure-thumbnail-multi-icon-title">The Multi Thumbnail Icon</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_multi_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the multi thumbnail icon</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>

<para>The Insert thumbnail dialog is very straightforward. You select the image file, provide some &lt;img&gt; tag attributes, choose the scaling, and press OK. The scaling factor is chosen by moving the slider directly under the image. The resulting image is previewed in the preview frame. Bluefish will create the thumbnail with extension _thumbnail.png or _thumbnail.jpeg (depending of the settings for images in the preferences).
<figure id="figure-thumbnail-simple-dialog">
<title id="figure-thumbnail-simple-dialog-title">The Insert Thumbnail Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_simple_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the insert thumbnail dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>If the source image is not accessible, change <guilabel>webimage</guilabel> to <guilabel>image</guilabel> in the <guilabel>Select File</guilabel> window loaded after clicking on <guilabel>browse</guilabel> for choosing an image. This way you can choose whichever format you want for the original sources. Another way to do it is to change the definition of webimage (see <xref linkend="changing-filetypes"/>).</para>
<para>If that does not solve the problem, it is likely that the type of images you want to load is not defined yet in preferences. In this case, change the definition of image as explained in <xref linkend="changing-filetypes"/>.</para>
<para>As last resource, if you don't want to change the generic file types, you may choose <guilabel>All files</guilabel> in the pop up menu at the bottom of the <guilabel>Select File</guilabel> window.</para>
</tip>
<para>The code generated for a png image and a png thumbnail looks like this:
<programlisting><![CDATA[<a href="/Users/michga/Desktop/343-4351_IMG_2.png">
<img src="/Users/michga/Desktop/343-4351_IMG_2_thumbnail.png" 
width="89" height="134" border="0" name="Gamboling" 
alt="Gamboling in the meadow" align="middle"></a>]]></programlisting></para>
<para>and for a jpg image and jpg thumbnail:
<programlisting><![CDATA[<a href="/Users/michga/Desktop/343-4351_IMG_2.JPG">
<img src="/Users/michga/Desktop/343-4351_IMG_2_thumbnail.jpeg" 
width="89" height="134" border="0" name="Gamboling" 
alt="Gamboling in the meadow" align="middle"></a>]]></programlisting></para>
<note>
<para>You can perfectly mix jpg images with png thumbnails or the other way around.</para>
<para>If the html file exists beforehand, the paths to image and thumbnail are inserted relative to the location of the html file. On the contrary, if the html file does not exist beforehand, the full paths to the image and thumbnail are inserted in the code.</para>
</note>

<para>In the multi thumbnail dialog, you first choose the scaling method, then you set the corresponding width and/or height parameters. Finally, you may want to adjust the HTML code to be inserted for each image.</para>
<para>Scaling can be based on a fixed ratio, a fixed width, a fixed height, or a fixed width and fixed height (this last option does not keep the original aspect ratio!).</para>
<para>In the HTML code for each image, you can use several placeholders, such as:</para>
<itemizedlist spacing="compact">
  <listitem>
    <para>%r for the original filename</para>
  </listitem>
  <listitem>
    <para>%t for the thumbnail filename</para>
  </listitem>
  <listitem>
    <para>%w for the original width</para>
  </listitem>
  <listitem>
    <para>%h for the original height</para>
  </listitem>
  <listitem>
    <para>%x for the thumbnail width</para>
  </listitem>
  <listitem>
    <para>%y for the thumbnail height</para>
  </listitem>
  <listitem>
    <para>%b for the original file size (in bytes)</para>
  </listitem>
</itemizedlist>
<para>The default string is: <programlisting>&lt;a href="%r"&gt;&lt;img src="%t" width="%x" height="%y" border="0"&gt;&lt;/a&gt;</programlisting></para>
<para>After you have set up the scaling method and parameters, as well as the HTML code, you can select multiple images. Bluefish will create the thumbnails and insert the code.</para>
<para>Here is an example of two thumbnails created with a non nul border width and middle-aligned, with a fixed height and width, disregarding the aspect ratio.</para>
<para>The <guilabel>Multi thumbnail</guilabel> window is the following:
<figure id="figure-thumbnail_multi_dialog">
<title id="figure-thumbnail-multi-dialog-title">The Multi Thumbnail Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_multi_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the multi thumbnail dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>And the generated code is:
<programlisting><![CDATA[<a href="/Users/michga/Desktop/tot/343-4351_IMG_2.png">
<img src="tot/343-4351_IMG_2_thumbnail.png" width="50" 
height="50" border="5" align="middle"></a>
<a href="/Users/michga/Desktop/tot/343-4352_IMG_2.png">
<img src="tot/343-4352_IMG_2_thumbnail.png" width="50"
height="50" border="5" align="middle"></a>
]]></programlisting></para>
<note>
<para>Full pathnames are always used to reference original image sources. The paths to thumbnails are relative to the html file path if the html file already exists, while they are inserted as full paths when the html file does not exist.</para>
</note>



<para>Below is a full procedure to quickly generate thumbnails from a directory of image files. This example is purposedly made with deprecated tags, so that you have an idea of what can be made with the variables. Feel free to adjust it when using CSS style sheets.</para>
<procedure id="photo-album">
<title>Generating a photos album with multi thumbnails</title>
<step>
<para>Put the image files in a folder of their own</para>
</step>
<step>
<para>Open a new file in bluefish, click on the <guilabel>Multi thumbnail...</guilabel> icon in the <guilabel>Standard bar</guilabel> tab of the html tool bar.</para>
</step>
<step>
<para>Enter the scaling percentage in the <guilabel>Scaling (%)</guilabel> field</para>
</step>
<step>
<para>Change the html code as follows: <programlisting>&lt;tr&gt;&lt;td&gt;&lt;a href="%r"&gt;
&lt;img src="%t" 
width="%x" height="%y" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Original: %w x %h&lt;/td&gt;&lt;/tr&gt;</programlisting> and click <guilabel>OK</guilabel>.</para>
</step>
<step>
<para>Choose the folder containing the images from the <guilabel>Select files for thumbnail creation</guilabel> window, click <keycombo><keycap>Ctrl</keycap><keycap>A</keycap></keycombo> to select all files, then click <guilabel>OK</guilabel>. The code generated by Bluefish will look like the following: <programlisting>&lt;tr&gt;&lt;td&gt;&lt;a href="/Users/michga/Desktop/photos/343-4344_IMG.JPG"&gt;
&lt;img src="/Users/michga/Desktop/photos/343-4344_IMG_thumbnail.png" 
width="80" height="53" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Original: 1600 x 1065&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href="/Users/michga/Desktop/photos/343-4347_IMG.JPG"&gt;
&lt;img src="/Users/michga/Desktop/photos/343-4347_IMG_thumbnail.png" 
width="80" height="53" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Original: 1600 x 1065&lt;/td&gt;&lt;/tr&gt;</programlisting></para>
</step>
<step>
<para>Use <keycombo><keycap>Ctrl</keycap><keycap>A</keycap></keycombo> to select the file's contents and click on the <guilabel>Table</guilabel> icon located in the <guilabel>Tables</guilabel> tab of the HTML tool bar to embed the code into table tags. 
<figure id="figure-table-icon">
<title id="figure-table-icon-title">The Table Icon in the HTML Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/table_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the table icon in the html tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Save the file wherever you want.</para>
</step>
</procedure>
<para>If you want to add the file name and the file size in bytes, use this code: 
<programlisting>&lt;tr&gt;&lt;td&gt;&lt;a href="%r"&gt;
&lt;img src="%t" width="%x" height="%y" border="0"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;%r:  %w x %h (%b bytes)&lt;/td&gt;&lt;/tr&gt;</programlisting></para>
</sect3>

</sect2>



<sect2 id="quickbar">
<title>Customizing the Quick bar</title>
<para>The <guilabel>Quick bar</guilabel> is a user defined tool bar. All HTML tool bar buttons can be added to the Quick bar by simply right-clicking the button and selecting <guilabel>Add to quickbar</guilabel>.
<figure id="figure-quickbar-add">
<title id="figure-quickbar-add-title">Adding an Element to the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add an element to the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>And automagically you will see the element in the Quick bar:
<figure id="figure-quickbar-add-result">
<title id="figure-quickbar-add-result-title">The added Element in the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the added element in the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<para>Note that you cannot add a pop up menu. Thus, if the item you want to add is inside a pop up menu (as is the code tag located in the <guilabel>Context formatting</guilabel> pop up menu of the <guilabel>Fonts</guilabel> tool bar), you have to first click on the pop up menu to display its contents, then to right click on the desired element to insert it in the <guilabel>Quick bar</guilabel>.
<figure id="figure-quickbar-add-popup">
<title id="figure-quickbar-add-popup-title">Adding a Pop Up Menu Element to the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add_popup.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add a pop up element to the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<para>If you want to remove items from the <guilabel>Quick bar</guilabel>, right-click them and select <guilabel>Remove from Quick bar</guilabel>.
<figure id="figure-quickbar-remove">
<title id="figure-quickbar-remove-title">Removing an Element from the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_remove.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to remove an element from the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<para>You can also change the location of an element in the Quick bar. To do so, right-click the element and select <guilabel>Shift left</guilabel> or <guilabel>Shift Right</guilabel> as desired. The element will be moved to the left or to the right of its neighborough. Notice that this is not a drag and drop action; you may have to repeat the process if you want to move the element farther.




<figure id="figure-quickbar-move">
<title id="figure-quickbar-move-title">Moving an Element within the Quick Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_move.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to move an element within the Quick bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>







<sect2 id="custom-menu">
<title>Custom menu</title>

<para>To customize items in the <guilabel>Custom menu</guilabel> tool bar, you will use the <guilabel>Custom menu</guilabel> element:




<figure id="figure-custom-menu-access">
<title id="figure-custom-menu-access-title">Accessing the Custom Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_access.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the default custom menu's access</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>The <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> leads to the <guilabel>Custom Menu Editor</guilabel>. The <guilabel>Load new</guilabel> item allows you to load a new menu in case you have directly changed the <filename>custom_menu</filename> file located in the <filename>.bluefish</filename> directory within your HOME directory, while <guilabel>Reset</guilabel> item allows you to return to the default custom menu under the same circumstances.</para>

<para>The <filename>custom_menu</filename> file is created upon install Bluefish and corresponds to some default entries, the ones you can see in the <guilabel>Custom menu</guilabel> tool bar. These will give you an idea what can be done with the custom menu.</para>

<para>The custom menu operates <emphasis>only</emphasis> on elements of the <guilabel>Custom menu</guilabel> tool bar, and allows you to:</para>
<itemizedlist>
<listitem>
<para>add "often used" items to an existing menu</para>
</listitem>
<listitem>
<para>search and replace patterns to the <guilabel>Replace</guilabel> menu</para>
</listitem>
<listitem>
<para>create new menus</para>
</listitem></itemizedlist>

<para>The <guilabel>Custom Menu Editor</guilabel> is the place where you make all changes to the custom menu. The location for entries in the custom menu is defined by their menu path in the <guilabel>Custom Menu Editor</guilabel>:
<figure id="figure-custom-menu-editor">
<title id="figure-custom-menu-editor-title">The Custom Menu Editor</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_editor.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom menu editor</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>







<para>It has four parts:</para>
<itemizedlist>
<listitem>
<para>The top one with all action buttons:</para>
<itemizedlist>
<listitem>
<para><guilabel>Add</guilabel> which adds new menu entries, once all necessary fields have been filled in</para>
</listitem>
<listitem>
<para><guilabel>Apply</guilabel> which applies changes to an existing menu entry, once it has been edited</para>
</listitem>
<listitem>
<para><guilabel>Delete</guilabel> which deletes the menu entry currently selected in the <guilabel>Menu path</guilabel> list</para>
</listitem>
<listitem>
<para><guilabel>Close</guilabel> which discards changes</para>
</listitem>
<listitem>
<para><guilabel>Save</guilabel> which saves the changes and exit the editor</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>The <guilabel>Menu Path</guilabel> field below the buttons, to enter either an existing or a new menu path</para>
</listitem>
<listitem>
<para>The <guilabel>Menu path</guilabel> list on the left side, which lists existing menu paths. A menu path looks like <emphasis>/Main menu/submenu/item</emphasis> or <emphasis>/Main menu/item</emphasis>. Here's an extract of the default custom menu paths:










<figure id="figure-custom-menu-default-path">
<title id="figure-custom-menu-default-path-title">Extract of the default Custom Menu Path</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_default_path.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing an extract of the default custom menu path</phrase>
</textobject>
</mediaobject></screenshot>
</figure>










</para>
</listitem>
<listitem>
<para>A custom part on the right side, whose contents changes depending of the type of menu. There are two types of items in the <guilabel>Custom Menu Editor</guilabel>:</para>
<itemizedlist>
<listitem>
<para>the Custom dialog, which will insert a string, optionally based on values asked in a dialog</para>
</listitem>
<listitem>
<para>the Custom Find and Replace, which will run a replace, also optionally based on values asked in a dialog. Here's how the <guilabel>Custom Replace</guilabel> dialog looks like:
<figure id="figure-custom-menu-replace-dialog">
<title id="figure-custom-menu-replace-dialog-title">The Custom Replace Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_replace_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom replace dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>







<sect3 id="custom-menu-dialog">
<title>Adding a custom menu dialog</title>
<para>The most simple custom dialog item has a menupath, for example <emphasis>/MySite/author</emphasis>, and a Formatstring before, for example <emphasis>written by Olivier</emphasis>. If you add this item, you can add this string by selecting the menu item.</para>


<procedure id="custom-menu-dialog-add">
<title>Adding a custom menu based on custom dialog</title>
<step>
<para>Choose <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> in the custom menu tool bar.</para>
</step>
<step>
<para>Enter <userinput>/MySite/author</userinput> in the <guilabel>Menu Path</guilabel> field of the <guilabel>Custom Menu editor</guilabel>.</para>
</step>
<step>
<para>Enter <userinput>written by Olivier</userinput> in the <guilabel>Formatstring Before</guilabel> field located on the right.</para>
</step>
<step>
<para>Click on the <guilabel>Add</guilabel> button at the top.</para>
<para>Notice that upon adding the new entry, it is listed at the bottom of the <guilabel>Menu path</guilabel> list:
<figure id="figure-custom-menu-add-basic">
<title id="figure-custom-menu-add-basic-title">A new Custom Entry in the Menu Path List</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_add_basic.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a new custom entry in the Menu path list</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Click on the <guilabel>Save</guilabel> button. This will add the menu to the Custom menu tool bar:
<figure id="figure-custom-menu-basic-result">
<title id="figure-custom-menu-basic-result-title">A new Menu in the Custom Menu Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_basic_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a new menu in the custom menu tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
</procedure>
<para>Note that the new menu is placed at the right end of the custom menu tool bar. When closing Bluefish and relaunching it, it will be placed in alphabetical order, except that the <guilabel>Replace</guilabel> menu will always be at the far right side.</para>
<para>In another example, you have a string you often need to set before and after some block of text, for example &lt;div class=&quot;MyClass&quot;&gt;YourBlockOfText&lt;/div&gt;. To do it:</para>
<orderedlist>
<listitem>
<para>Open the <guilabel>Custom Menu Editor</guilabel></para>
</listitem>
<listitem>
<para>Enter <userinput>/MySite/div with class</userinput> in the <guilabel>Menu Path</guilabel> field</para>
</listitem>
<listitem>
<para>Enter &lt;div class=&quot;MyClass&quot;&gt; in the <guilabel>Formatstring Before</guilabel> field</para>
</listitem>
<listitem>
<para>Enter &lt;/div&gt; in the <guilabel>Formatstring After</guilabel> field</para>
</listitem>
<listitem>
<para>Click on <guilabel>Add</guilabel>, then on Save. The item will appear in the menu.</para>
</listitem>
</orderedlist>
<para>If you select some text:
<figure id="figure-custom-menu-div-before">
<title id="figure-custom-menu-div-before-title">A Block of selected Text before Activating the Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_before.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a block of selected text before activating the menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>And activate this menu item, the first bit of text is now added before the selection, and the second bit after the selection:
<figure id="figure-custom-menu-div-after">
<title id="figure-custom-menu-div-after-title">A Block of Text after Activating the Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_after.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a block of text after activating the menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Suppose you want to improve this last example. You have both MyClass1 and MyClass2 and want to be able to choose the desired class when activating the menu. Here's how to do it:</para>

<orderedlist>
<listitem>
<para>Open the <guilabel>Custom Menu Editor</guilabel></para>
</listitem>
<listitem>
<para>Browse the <guilabel>Menu path</guilabel> list to retrieve the /MySite/class with div entry and click on it to make appear its components in the <guilabel>Menu Path</guilabel> and <guilabel>Custom Dialog</guilabel> fields</para>
</listitem>
<listitem>
<para>Click on the top arrow of the <guilabel>Number of Variables</guilabel> pop up menu to get 1 in the field. As you see a <guilabel>Variables</guilabel> entry appears where you can enter the name for variable %0. As name we enter <emphasis>MyClass number</emphasis></para>
</listitem>
<listitem>
<para>Now change the <guilabel>FormatString Before</guilabel> field to take this new variable into account, as following:  &lt;div class=&quot;MyClass%0&quot;&gt;</para>
</listitem>
<listitem>
<para>Click on <guilabel>Apply</guilabel> so that your changes will be taken in account, and click on Save to update the menu.</para>
</listitem>
</orderedlist> 

<para>If you now activate this menu after having selected a block of text, you will be presented with a new dialog asking you for the value of <emphasis>MyClass number</emphasis>:

<figure id="figure-custom-menu-div-dialog">
<title id="figure-custom-menu-div-dialog-title">The new DIV with Class Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the new div with class dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>After entering the desired value, the same process as before will occur, using the value you provided. Here we have entered 1 as value:

<figure id="figure-custom-menu-div-dialog-result">
<title id="figure-custom-menu-div-dialog-resul-ttitle">The Block of Text after Entering the Value</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_dialog_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the block of text after entering the value</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<tip>
<para>You can use the <keycap>Return</keycap> and <keycap>Tab</keycap> keys to format the output.</para>
<para>Any variable can be used any times you want in the dialog.</para>
</tip>
</sect3>



<sect3 id="custom-menu-replace">
<title>Adding a custom replace dialog</title>
<para>Find and replace items are no different. The dialog has some more options, each of these options corresponds to the regular <guilabel>Replace</guilabel> dialog. Again you can use variables like %0, %1 etc. to make a certain menu item more flexible.</para>

<para>Say you want to add title tags to a selection in a HTML page so that the user agent could render it either as a tool tip or as spoken words. To ease the discussion we will work on the following snippet of code: <programlisting><![CDATA[<ul>
<li><a href="progsys01.html">Process scheduling</a> - 26/10/2002</li>
<li><a href="progsys02.html">Fork and Wait</a> - 02/11/2002</li>
</ul>]]></programlisting></para>
<para>We will transform it into the following one: <programlisting><![CDATA[<ul>
<li><a href="progsys01.html" title="blah Process scheduling">Process scheduling</a> \
- 26/10/2002</li>
<li><a href="progsys02.html" title="blah Fork and Wait">Fork and Wait</a> \
- 02/11/2002</li>
</ul>]]></programlisting> where blah is any text you want.</para>

<para>The initial rendering:

<figure id="figure-custom-menu-page-before">
<title id="figure-custom-menu-page-before-title">The HTML Page before the Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_page_before.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML page before the transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>will be transformed as is:

<figure id="figure-custom-menu-page-after">
<title id="figure-custom-menu-page-after-title">The HTML Page after the Transformation</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_page_after.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML page after the transformation</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>To do this, we need to express the &lt;a href="yoururl"&gt;yourstring&lt;/a&gt; part of the initial snippet of code as a Perl regular expression (see <xref linkend="find-replace-regex"/> for full details):</para>
<itemizedlist>
<listitem>
<para>a href=" will be expressed as is and embedded into parentheses to retrieve it as \0 variable.</para>
</listitem>
<listitem>
<para>yoururl will be expressed as ([^"]+) to match one or more non double quote characters and retrieve it as \1 variable.</para>
</listitem>
<listitem>
<para>The second double quote will be expressed as is and embedded into parentheses to retrieve it as \2 variable.</para>
</listitem>
<listitem>
<para>The second &gt; sign will be expressed as is and embedded into parentheses to retrieve it as \3 variable.</para>
</listitem>
<listitem>
<para>yourstring will be expressed as ([^>]+) to match one or more non &gt; characters and retrieve it as \4 variable.</para>
</listitem>
<listitem>
<para>&lt;/a&gt; will be expressed as is and embedded into parentheses to retrieve it as \5 variable.</para>
</listitem>
</itemizedlist>

<para>Thus, the search string will be: (&lt;a href=")([^"]+)(")(&gt;)([^&gt;]+)(&lt;/a&gt;)</para>

<para>The replace string should be of the form: &lt;a href="yoururl" title="yourvariablestring yourstring"&gt;yourstring&lt;/a&gt;</para>

<para>Expressed as a regular Perl replacement expression, it will be as simple as: \0\1\2 title=\2%0 \4\2\3\4\5 where %0 will match yourvariablestring, that is the value entered in the <guilabel>Title</guilabel> field of the <guilabel>Replace </guilabel> dialog at activating time.</para>


<procedure id="custom-menu-replace-dialog-add">
<title>Adding a custom menu based on replace dialog</title>
<step>
<para>Choose <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> in the custom menu tool bar.</para>
</step>
<step>
<para>Browse the Menu path list to retrieve the <guilabel>/Replace/Convert in Selection/&lt;td&gt; to &lt;th&gt;</guilabel> and click on it to make appear its components in the Menu Path and Custom Replace fields.</para>
</step>
<step>
<para>Change the Menu Path to <guilabel>/Replace/Anchor/Add Title</guilabel>.</para>
</step>
<step>
<para>Click on the top arrow of the Number of Variables pop up menu to get 1 in the field. Enter Title in the <guilabel>%0 Variables field</guilabel>.</para>
</step>
<step>
<para>Change the <guilabel>Matching</guilabel> pop up menu to <guilabel>perl regular expressions</guilabel>.</para>
</step>
<step>
<para>Change the <guilabel>Search Pattern</guilabel> field like this: <programlisting><![CDATA[(<a href=")([^"]+)(")(>)([^>]+)(</a>)]]></programlisting></para>
</step>
<step>
<para>Change the <guilabel>Replace String</guilabel> field like this: <programlisting><![CDATA[\0\1\2 title=\2%0 \4\2\3\4\5]]></programlisting></para>
</step>
<step>
<para>Click on the <guilabel>Add</guilabel> button.</para>
<para>The <guilabel>Custom replace</guilabel> dialog should have the following appearance:

<figure id="figure-custom-menu-replace-dialog-new">
<title id="figure-custom-menu-replace-dialog-new-title">The Custom Menu Replace Dialog filled in</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_replace_dialog_new.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom menu replace dialog filled in</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Click on the <guilabel>Save</guilabel> button.</para>
</step>
</procedure>
<para>To use the new menu item, select the lines to be changed in the HTML file and activate <guilabel>Replace/Anchor/Add Title</guilabel> in the custom menu bar. Fill in the dialog as follows: 

<figure id="figure-custom-menu-add-title">
<title id="figure-custom-menu-add-title-title">The Add Title Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_add_title.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Add Title dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Click OK to proceed.</para>
</sect3>

</sect2>

<sect2 id="external-programs-filters">
<title>External programs, filters</title>
<para>The <guimenu>External</guimenu> menu provides a quick access to external default or user-added programs and  text filters. It is divided into three parts by default (see <xref linkend="bluefish-preferences"/> for layout change):</para>
<itemizedlist spacing="compact">
<listitem><para>The <guimenu>Outputbox</guimenu> submenu for text filters. Its name is derived from the output box shown at the bottom of the document window, where you can see the output of the process,  when activating it.</para></listitem>
<listitem><para>The <guimenu>Commands</guimenu> submenu for external programs.</para></listitem>
<listitem><para>All other items are browsers. They are launched as subprocesses, hence you need to detach them to avoid freezing bluefish until the external program quits.</para></listitem>
</itemizedlist>
<note>
<para>Typically all programs and filters apply to the current document. Nevertheless it is possible to invoke a program without applying it to the current document. On the contrary, it is not possible to apply text filters to anything but the current document.</para>
</note>
<para><figure id="figure-external-menu">
<title id="figure-external-menu-title">Bluefish External Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/external_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 external menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Customization of the <guimenu>External</guimenu> menu is performed in different parts of the <guilabel>Edit Preferences</guilabel> dialog:</para>
<itemizedlist spacing="compact">
<listitem>
<para>Items in the <guimenu>Outputbox</guimenu> submenu in the <guilabel>Output parsers</guilabel> tab.</para>
</listitem>
<listitem>
<para>Items in the <guimenu>Commands</guimenu> submenu in the <guilabel>Utilities and filters</guilabel> part at the bottom of the <guilabel>External programs</guilabel> tab.</para>
</listitem>
<listitem>
<para>Top level items in the <guilabel>Browsers</guilabel> part at the top of the <guilabel>External programs</guilabel> tab.</para>
</listitem>
</itemizedlist>

<sect3 id="external-browsers">
<title>Customizing browsers</title>
<para>The <guilabel>Browsers</guilabel> panel in Preferences shows the items in the same order as in the <guimenu>External</guimenu> menu:
<figure id="figure-preferences-browsers-panel">
<title id="figure-preferences-browsers-panel-title">The Browsers Panel in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/preferences_browsers_panel.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 Browsers panel in the Edit Preferences dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<note>
<para>The first line in the panel will be the browser selected when clicking on the <guilabel>View in browser</guilabel> button in the main tool bar.</para>
</note>
<para>If you want to change the order of the browsers, apply the following steps:</para>
<procedure id="external-browsers-order">
<title>Changing the order of browsers items</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Browsers</guilabel> panel.</para>
</step>
<step>
<para>Click near the left border of the browser's line you want to move. The whole browser's line will be highlighted:
<figure id="figure-order-browsers-select">
<title id="figure-order-browsers-select-title">Selecting the Browser's Line to be Moved</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/order_browsers_select.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to select the browser's line to be moved</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>While maintaining the click, drag the selected line over another line, until you reach the place you want, so that the selected line covers entirely the latter one. The cursor will change its appearance and the dragged line will be shown as a framed line:
<figure id="figure-order-browsers-drag">
<title id="figure-order-browsers-drag-title">Dragging the Browser's Line</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/order_browsers_drag.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the line's dragging</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<note>
<para>To drag a line to the end of the list, drag it until a thin line appears below the last item:
<figure id="figure-order-browsers-drag-bottom">
<title id="figure-order-browsers-drag-bottom-title">Dragging the Browser's Line to the Bottom</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/order_browsers_drag_bottom.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to drag the line to the bottom of the list</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</note>
<tip>
<para>If you change your mind, drag the line over its original place and release the mouse button. There will be no change.</para>
</tip>
</step>
<step>
<para>Release the mouse button to drop the line at the desired place.</para>
</step>
<step>
<para>Click on the <guibutton>Apply</guibutton> button to save the change if you plan to make further changes in the panel, otherwise click on the <guibutton>OK</guibutton> button to save the change and close the <guilabel>Edit preferences</guilabel> panel.</para></step>
</procedure>


<para>If you want to customize one of the browsers supplied by default, use the following procedure:</para>
<procedure id="external-browsers-customize">
<title>Customizing an existent browser</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Browsers</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>Command</guilabel> region of the browser's line you want to change. The line will be hightlighted.</para>
</step>
<step>
<para>Double-click on the same location to allow editing. The line will be framed.</para>
</step>
<step>
<para>Make the desired change</para>
</step>
<step>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</step>
</procedure>


<para>To add a new browser, proceed as follows:</para>
<procedure id="external-browsers-add">
<title>Adding a new browser</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Browsers</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guibutton>Add</guibutton> button. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</step>
<step>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>External</guimenu> menu.</para>
</step>
<step>
<para>Double-click in the <guilabel>Command</guilabel> zone and enter the command followed by the &amp; sign to detach it from the main bluefish process, for example:</para>
<para><userinput>amaya %s &amp;</userinput></para>
</step>
<step>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</step>
</procedure>


<para>To delete a browser, just click on the <guibutton>Delete</guibutton> button.</para>
<para>Though nothing impedes you to put any command (not necessary a browser) in the panel for quick access, you may want to avoid to put it at the top range, since it will be somewhat strange to click on <guilabel>View in browser</guilabel> to launch <command>abs</command> for example.</para>

</sect3>


<sect3 id="external-commands">
<title>Customizing Commands menu</title>
<para>To add items to the <menuchoice><guimenu>External</guimenu><guisubmenu>Commands</guisubmenu></menuchoice> submenu, you use the <guilabel>External programs</guilabel> tab of the <guilabel>Edit Preferences</guilabel> panel:
<figure id="figure-preferences-utilities-panel">
<title id="figure-preferences-utilities-panel-title">Utilities and Filters Panel in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/preferences_utilities_panel.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 Utilities and Filters panel in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>You add, modify, delete, move commands or text filters the same way as described in <xref linkend="external-browsers"/>.</para>
<para>Bluefish will apply the supplied command on the current document, while representing the document as it is before the command is applied by <literal>%s</literal> and the document after the command has been applied by <literal>%f</literal>. Usage of the <literal>%i</literal> parameter is not implemented yet. You should embed those parameters into simple quotes to prevent special characters to be interpreted by the shell.</para>
<para>Usage of the parameters depends on the command:</para>
<itemizedlist>
<listitem>
<para>If the command does not operate on the file, as <command>xterm</command>, you just supply it as you would in an xterm, detaching it to avoid bluefish freezing with:</para>
<para><userinput>xterm &amp;</userinput></para>
</listitem>
<listitem>
<para>If the command does operate on the file, but not on the file's contents, as <command>chmod</command>, you supply it as you would in an xterm, using <literal>%s</literal> as a reference to the current document: </para>
<para><userinput>chmod +x '%s'</userinput></para>
</listitem>
<listitem>
<para>If the command operates on the standard input device by default, as <command>tidy</command>, you will have to redirect the document's contents, i.e. <literal>%s</literal>, with <command>cat</command> for example, to the standard output device, pipe the result so that it will be used as standard input device for the command, then redirect the result of the command to the document, i.e. <literal>%f</literal>, as in:</para>
<para><userinput>cat '%s' | tidy 'someoptions' &gt; '%f'</userinput></para>
</listitem>
<listitem>
<para>If the command operates on file's contents, as <command>sed</command>, you should use input, i.e. <literal>%s</literal> and output, i.e. <literal>%f</literal> redirection to feed the command with the right parameters, as in:</para>
<para><userinput>sed -e 'somesedcommand' &lt; '%s' &gt; '%f'</userinput></para>
</listitem>
</itemizedlist>
<para>As those parameters are used internally to create temporary files, you cannot use them to modify the name of the final document for example. But you can redirect the standard output to a named file, if you do not want to override the current document, as in:</para>
<para><userinput>sed -e 'somesedcommand' &lt; '%s' 1 &gt; 'namedfile'</userinput></para>
<para>Here is an example to get rid of hard-coded <literal>/usr</literal> in a source file:</para>
<procedure id="utilities-add">
<title>Adding a Commands menu item</title>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>External programs</guilabel> tab to display the <guilabel>Utilities and filters</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guibutton>Add</guibutton> button. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</step>
<step>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>External</guimenu> menu.</para>
</step>
<step>
<para>Double-click in the <guilabel>Command</guilabel> zone and enter:</para>
<para><userinput>sed -e 's|\/usr|${PREFIX}|g' &lt; '%s' &gt; '%f'</userinput>.</para>
<note>
<para>We need to escape the slash in <literal>/usr</literal> with a backslash to avoid interpretation by the shell.</para>
</note>
</step>
<step>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</step>
</procedure>
</sect3>

<sect3 id="external-outputbox">
<title>Customizing Ouputbox menu</title>
<para>Items within the <menuchoice><guimenu>External</guimenu><guisubmenu>Outputbox</guisubmenu></menuchoice> submenu allow for programs to give feedback by opening an output box at the bottom of Bluefish's main window.</para>
<para>Here is an example showing the output box after using the <menuchoice><guimenu>External</guimenu><guisubmenu>Outputbox</guisubmenu><guimenuitem>tidy HTML validator</guimenuitem></menuchoice> item on an html file with an on purpose error:
<figure id="figure-external-outputbox-example">
<title id="figure-external-outputbox-example-title">The tidy Output Box</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/external_outputbox_example.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the tidy output box</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The contents of the resulting output box are based upon scanning the output of the supplied command, as it appears in an xterm, with a given regular expression and  filling in the various fields of the output box with the desired parts of that regular expression. The <guilabel>Output parsers</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel provides you with a model to do that:
<figure id="figure-external-outputbox-preferences">
<title id="figure-external-outputbox-preferences-title">The Output Parsers Tab in Preferences Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/external_outputbox_preferences.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the output parsers tab in preferences panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>

<para>The <guilabel>Outputbox</guilabel> panel comprises 7 fields:</para>
<itemizedlist>
<listitem>
<para>The <guilabel>Name</guilabel> field, a character string which will appear as the item in the <guimenu>Outputbox</guimenu> menu.</para>
</listitem>
<listitem>
<para>The <guilabel>Pattern</guilabel> field, a Perl regular expression which describes the command output, so that some of its parts could be used in the following fields.</para>
<para>Let's use an example: say you have a ruby script named foo.rb with the following line in it: <programlisting>put Hello Word</programlisting></para>
<para>When executing <command>ruby -d foo.rb</command> in an xterm, the output is: 
<programlisting><![CDATA[Exception `NoMethodError' at foo.rb:1 - undefined method `put' for main:Object
foo.rb:1: undefined method `put' for main:Object (NoMethodError)]]></programlisting></para>
<para>The second line can be parsed with the following Perl regular expression:
<programlisting><![CDATA[([a-zA-Z0-9/_.-]+):([0-9]+):(.*)]]></programlisting>
The first part embedded into parentheses will match the script name, i.e. foo.rb; the second part will match the line, i.e. 1: the third part will match the remaining. See <xref linkend="find-replace-regex"/> for some explanation on using regular expressions within bluefish.</para>
</listitem>
<listitem>
<para>The <guilabel>File #</guilabel> field, a part number matching the filename in the Perl regular expression given in the <guilabel>Pattern</guilabel> field. Note that the first part is numbered 1, the second 2, etc. If you do not want that the part be shown, put -1 in it.</para>
</listitem>
<listitem>
<para>The <guilabel>Line #</guilabel>, a part number matching the line number in the regular expression, here it will be 2, as same rules apply as in the <guilabel>Filename #</guilabel> field.</para>
</listitem>
<listitem>
<para>The <guilabel>Output #</guilabel> field, a part number matching the desired part in the regular expression, typically the remaining of the line, here it will be the third and last part. Again, same rules apply as in the <guilabel>Filename #</guilabel> field.</para>
</listitem>
<listitem>
<para>The <guilabel>Command</guilabel> field, the command to execute on the current document, internally named %s. Here it will be: <userinput>ruby -d '%s'</userinput>. Notice that you should embed the reference to the current document, if any, within parentheses to avoid interpretation at run time.</para>
</listitem>
<listitem>
<para>The <guilabel>Show all output</guilabel> check box, which can be checked to show all output not matching the Perl regular expression. Here it is not needed, since the regular expression matches all output.</para>
</listitem>
</itemizedlist>
<para>You add, modify, delete, move output boxes the same way as described in <xref linkend="external-browsers"/>.</para>
<procedure id="outputbox-add">
<title>Adding an Outputbox menu item</title>
<step>
<para>Execute the desired command in an xterm with some error either in the command or in the file which it is applied on, in order to know how the errors are outputting.</para>
</step>
<step>
<para>Build a Perl regular expression based on the output, so that the filename, the line number and the error message be retrieved.</para>
</step>
<step>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guilabel>Output parsers</guilabel> tab to display the <guilabel>Outputbox</guilabel> panel.</para>
</step>
<step>
<para>Click on the <guibutton>Add</guibutton> button. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</step>
<step>
<para>Click "Add" to add a new item.</para>
</step>
<step>
<para>Double-click on the <guilabel>Name</guilabel> field to give the command a name.</para>
</step>
<step>
<para>Double-click on the <guilabel>Pattern</guilabel> field and fill it in with the Perl regular expression you have built previously.</para>
</step>
<step>
<para>Double-click on the <guilabel>File #</guilabel> field and give the number for the subpattern matching the filename (-1 for none).</para>
</step>
<step>
<para>Double-click on the <guilabel>Line #</guilabel> field and give the number for the subpattern matching the line number (-1 for none).</para>
</step>
<step>
<para>Double-click on the <guilabel>Output #</guilabel> field and give the number for the subpattern matching the actual error message (-1 for none).</para>
</step>
<step>
<para>Double-click on the <guilabel>Command</guilabel> field and enter the command to execute in the form <command>command options '%s'</command>, %s being the current filename.</para>
</step>
<step>
<para>Toggle the "Show all output" check box to show output NOT matching the regular expression, if needed.</para>
</step>
</procedure>
<note>
<para>Of course, it is also possible to add these items by editing the file named <filename>~/.bluefish/rcfile_v2</filename> found in the user's home directory. The fields are delimited by colons and correspond to those found in the GUI.</para>
</note>
</sect3>

</sect2>

</sect1>

<sect1 id="bluefish-preferences">
<title>Customising Bluefish</title>
<para>We have already seen how to customize the <link linkend="quickbar">quick bar</link>, the <link linkend="custom-menu">Custom menu</link>, and the <link linkend="external-programs-filters">External menu</link>. Here are some other possibilities, most of them being made through the <guilabel>Edit preferences</guilabel> panel, accessible from the <guilabel>Preferences...</guilabel> icon in the main tool bar or from the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu item.</para>

<sect2 id="changing-shortcut-keys">
<title>Modifying shortcut keys</title>
<para>Many menu entries are accessible via key combination, also called a shortcut. For example, pressing the <keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo> keys saves the current file to disk. If available, shortcut key combinations are shown on the right of the menu entry.</para>
<para>To add or change a shortcut, move the mouse over the desired menu entry, and press the key combination you would like to use. Immediately this combination will show up on the right of the menu entry.</para>
<para>Here's a shortcut added to the <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL...</guimenuitem></menuchoice> menu item:
<figure id="figure-prefs-add-shortcut">
<title id="figure-prefs-add-shortcut-title">Adding a Shortcut to a Menu Item</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_add_shortcut.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add a shortcut to a menu item</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To remove a shortcut, press the backspace key when you move the mouse over a menu entry to remove the shortcut.</para>
<para>To save the shortcut key combinations for later Bluefish sessions, use <menuchoice><guimenu>Edit</guimenu><guimenuitem>Save Shortcut Keys</guimenuitem></menuchoice>. This will store the settings in the <filename>~/.bluefish/menudump_2</filename>.</para>
<note>
<para>If you want to restore the default combinations simply remove this file and restart Bluefish.</para>
</note>
<para> </para>
<warning>
<para>Be aware that if you give a menu entry the same shortcut as another one, the shortcut of the latter will be lost.</para>
</warning>
</sect2>

<sect2 id="show-hidden-files">
<title>Showing hidden files and folders</title>
<para>By default, invisible files and folders are not shown in the file browser tab of the side panel.</para>
<para>If you want to see them at a given level of the files system hierarchy, right click on the desired folder name in the file browser within the side panel and toggle <guilabel>Show hidden files</guilabel> in the contextual menu.</para>

<para>Here is how to view all visible files and folders in the whole system:
<figure id="figure-prefs-show-visible">
<title id="figure-prefs-show-visible-title">Turning Files and Folders Visibility ON</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_show_invisible.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to turn files and folders' visibility on the whole system</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<tip>
<para>This feature is very convenient for Mac users when used with caution, since combined with the <guilabel>Delete</guilabel> contextual menu in the file browser, it allows you, for example, to get rid of files generated by cvs on conflicts within bluefish.</para>
</tip>
</sect2>

<sect2 id="show-backup-files">
<title>Showing backup files</title>
<para>By default, backup files are not shown in the file browser tab of the side panel.</para>
<para>You may turn on their visibility at a given level of the file system by right clicking on the desired folder name in the file browser within the side panel and toggle <guilabel>Show backup files</guilabel> in the contextual menu.</para>
</sect2>

<sect2 id="editor-appearance">
<title>Editor appearance</title>
<para>Most of the editor appearance depends on your GKT theme, which may be customized through the <filename>~/.gtkrc-2.0</filename> resource file.</para>
<para>Parts that you may want to customize through that resource file are among others:</para>
<itemizedlist spacing="compact">
<listitem><para>the background color of the editor</para></listitem>
<listitem><para>the colors of GUI elements</para></listitem>
<listitem><para>the position of arrows in a drop down list</para></listitem>
</itemizedlist>
<para>You will find examples of themes resource files while searching for a <filename>gtkrc</filename> file in a <filename>gtk-2.0</filename> folder within the various directories under <filename>$prefix/share/themes/</filename>, where $prefix is your installation prefix (it may be <filename>/usr</filename>, <filename>/usr/local</filename>, <filename>/sw</filename>, <filename>/opt</filename>, etc.).</para>
<warning>
<para>You should not customize those files, instead customize <filename>~/.gtkrc-2.0</filename>. If the file does not already exist in your home directory, just create it with:  <command>touch ~/.gtkrc-2.0</command></para>
</warning>
<para>Here is an example made on a Crux theme:<programlisting><![CDATA[style "bluefish"
{
 # For up and down arrows grouped together at right side
 GtkNotebook::has_secondary_forward_stepper = 1
 GtkNotebook::has_secondary_backward_stepper = 1
 
 # Editor background color 
 # (background of editor view)
 base[NORMAL]="#fcfff5"
 
 # GUI normal background color
 # (most of the GUI)
 bg[NORMAL]="#dbe9e9"
 
 # GUI highlighted background color
 #(GUI when mouse over elements)
 bg[PRELIGHT]="#c6e9e9"
 
 # GUI unactive background color
 #(GUI disabled elements)
 bg[INSENSITIVE]="#9fb2b2"

 # GUI active background color
 #(GUI enabled elements)
 bg[ACTIVE]="#c7d4d4"
}
class "GtkWidget" style "bluefish"
]]></programlisting></para>
<note>
<para>You may give any name to the style on the first line, provided that you use the same on the last line.</para>
<para>The customization applies to any Gtk application.</para>
</note>



<para>It will give this appearance to bluefish:

<figure id="figure-gui-appearance">
<title id="figure-gui-appearance-title">Bluefish with a customized Gtk Theme</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/gui_appearance.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of Bluefish with a customized Gtk theme</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>




<para>Other options for the Editor are available in the <guilabel>Editor</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel accessible via the <guilabel>Edit preferences...</guilabel> button in the main tool bar. In particular you may want to customize the font of the editor, the end of line wrapping, and the undo history size:




<figure id="figure-prefs-editor-tab">
<title id="figure-prefs-editor-tab-title">The Editor Tab in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_editor_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Editor tab in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>




<sect2 id="bookmark-path">
<title>Customizing the bookmarks path</title>

<para>When you add bookmarks to document, the name of the file it refers to is displayed from the base directory. You can choice another path from the <guilabel>Bookmarks filename display</guilabel> pop up menu in the <guilabel>Editor</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel:




<figure id="figure-prefs-bookmarks-path">
<title id="figure-prefs-bookmarks-path-title">The Bookmarks Path Pop up Menu in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_bookmarks_path.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bookmarks path pop up menu in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>


<sect2 id="html-tags-style">
<title>Customizing the html tags style</title>
<para>The <guilabel>HTML</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel provides you with some options to change the style of the html tags:
<figure id="figure-prefs-html-tab">
<title id="figure-prefs-html-tab-title">The HTML Tab in Preferences</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_html_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML tab in Preferences</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>

<sect2 id="changing-author-meta">
<title>Changing the author meta tag on the fly</title>

<para>One interesting feature in the <guilabel>HTML</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel is that you can let <application>bluefish</application> update the author meta tag on save.</para>


<para>Let's say you created an html file with an author meta tag while you were logged in as user <emphasis>foo</emphasis>. On save <application>bluefish</application> will fill up the contents attribute of the author meta tag with the full name associated with the <emphasis>foo</emphasis> user:








<figure id="figure-author-meta-name1">
<title id="figure-author-meta-name1-title">The Author Meta Tag filled in on Save</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/author_meta_name1.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the author meta tag filled in on save</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<para>You share this html file with another user <emphasis>bar</emphasis> or you change the owner of the file to <emphasis>bar</emphasis>. When you modify the html file while logged in as user <emphasis>bar</emphasis>, the author meta tag is updated to reflect the new author on save, providing that the user <emphasis>bar</emphasis> has write permission on the file:








<figure id="figure-author-meta-name2">
<title id="figure-author-meta-name2-title">Update of the Author Meta Tag on Save</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/author_meta_name2.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the author meta tag updated on save</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>


<warning>
<para>If you do not want that the author meta tag be changed while editing the file under another user's login, uncheck the box.</para>
</warning>
</sect2>


<sect2 id="customizing-files-handling">
<title>Customizing files handling and browsing</title>

<para>The <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel allows you to set some options related to the way files are handled and displayed in the file browser.

<figure id="figure-prefs-files-tab">
<title id="figure-prefs-files-tab-title">The Files Preference Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_files_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Files preferences panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>




<sect3 id="setting-encoding-meta">
<title>Setting the encoding meta tag on save</title>

<para>Apart from setting the default character encoding in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel, you may also instruct <application>bluefish</application> to set the encoding meta tag when you modify the document character set encoding.</para>

<para>Note that, if the encoding meta tag does not exist, it is inserted in the file, otherwise it is changed. Either modification occurs immediately.</para>
</sect3>


<sect3 id="setting-default-basedir">
<title>Setting the default base directory</title>

<para>You can set a default base directory in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>

<para>This directory will serve as the initial point for the file browser.</para>
</sect3>




<sect3 id="merged-views">
<title>Merging file browser views</title>

<para>By default, the file browser uses separate views for files and directories.</para>

<para>You can have a single view by unchecking the <guilabel>Use separate file and directory view</guilabel> option in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>
</sect3>




<sect3 id="backups">
<title>Backup files</title>

<para>By default, a backup file is created on save in the same directory as the original file based on the same filename with the exception that a <keycap>~</keycap> suffix is added. This backup file is deleted on closing the file.</para>

<para>You can change this behaviour in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>


<para>When the backup fails to be created, you can choose what to do:


<figure id="figure-prefs-askonbackup">
<title id="figure-prefs-askonbackup-title">Choosing an Action on Backup Failure</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_askonbackup.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the action on backup failure pop up menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>




<sect3 id="multiple-file-instances">
<title>Using multiple instances of a file</title>

<para>A nice feature of <application>bluefish</application> is it allows you to open multiple instances of a file. Combined with either launching two instances of bluefish or opening the same file in two windows, it eases the modification of a file in one window while browsing it in another one.</para>

<para>This feature can be disabled in the <guilabel>Files</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>

<warning>

<para>Be aware that the last closed instance of the file wins. Hence it is important that you remember which instance is the modified one. You can, for example, always open the file to be modified on the left side of your screen, the file to be browsed on the right side.</para>
</warning>
</sect3>

</sect2>


<sect2 id="prefs-user-interface">
<title>Customizing the user interface</title>
<para>The <guilabel>User interface</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel allows you to customize most part of the user interface:
<figure id="figure-prefs-ui-tab">
<title id="figure-prefs-files-ui-title">The User Interface Preference Panel</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/prefs_ui_tab.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the User Interface preferences panel</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>

<sect2 id="changing-filetypes">
<title>Modifying file types</title>
<para>In the <guilabel>Filetypes</guilabel>  tab of the <guilabel>Edit preferences</guilabel> panel you can define all file types that should be recognized by <application>bluefish</application>.</para>
<para>The file types consist of:</para>
<orderedlist>
<listitem>
<para>a label (this label is also used in the file filters, and in the highlighting patterns).</para>
</listitem>
<listitem>
<para>a list of extensions, separated by a colon (:).</para>
</listitem>
<listitem>
<para>the highlighting update characters. Upon a key press of one of these characters, the highlighting engine will refresh the highlighting around the cursor. If this field is empty, any character will force the highlighting engine to refresh. Special characters like the tab and the newline can be entered as \t and \n, the backslash itself is entered as \\.</para>
</listitem>
<listitem>
<para>the icon location for this file type.</para>
</listitem>
<listitem>
<para>whether this file type is editable by Bluefish (whether or not Bluefish should try to open it after a double click).</para>
</listitem>
<listitem>
<para>a regular expression that can be used to detect the file type if a file without extension is loaded.</para>
</listitem>
<listitem>
<para>the auto-tag-closing mode. A value of 0 means that Bluefish should not close XML/HTML tags, a value of 1 means it should close the tags XML style (&lt;br /&gt;), a value of 2 means HTML style.</para>
</listitem>
</orderedlist>
<para>You add, modify, delete, or move file types the same way it is described in <xref linkend="external-browsers"/>.</para>
<example id="adding-filetype"><title>Adding a file type</title>
<para>Let's say you use DocBook xsl stylesheets. Those files are recognized by <application>bluefish</application> as xml files, but they do not appear with the xml icon in the file browser as their extension (.xsl) is not listed in the <guilabel>Extensions</guilabel> field of the <guilabel>Filetypes</guilabel> tab of the <guilabel>Edit preferences</guilabel> panel.</para>
<para>On the other hand, adding them to the xml file type would impede to group them into a stylesheet filter, where they belong from a semantical point of view. And you cannot add them to the provided stylesheet filetype made for css stylesheet, since the highlighting patterns are different.</para>
<para>To add an xsl stylesheet file type, execute the following steps:</para>
<orderedlist>
<?dbfo label-width="0.25in"?>
<listitem>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guilabel>Filetypes</guilabel> tab to display the <guilabel>Filetypes</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>Add</guibutton> button in the <guilabel>Filetypes</guilabel> part. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</listitem>
<listitem>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>Label</guimenu> field. Here enter <code>xsl stylesheet</code>.</para>
</listitem>
<listitem>
<para>Click in the <guilabel>Extensions</guilabel> zone and enter the extension: <code>.xsl</code>.</para>
</listitem>
<listitem>
<para>Click in the <guilabel>Update chars</guilabel> field of the <guilabel>xml</guilabel> filetype line to copy and paste this field into the corresponding field of the <guilabel>xsl stylesheet</guilabel> filetype line. Once the field is highlighted, use <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> to copy the field. Click again in the <guilabel>Update chars</guilabel> field of the <guilabel>xsl stylesheet</guilabel> filetype line and use <keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo> to paste the field.</para>
</listitem>
<listitem>
<para>For the icon field, you can either use the xml icon path used in the <guilabel>Icon</guilabel> field of the <guilabel>xml</guilabel> filetype line or better create a new icon based on the xml one by changing its colors with the Colormap Rotation filter of <application>gimp</application>, located under the <guimenu>Filters</guimenu><guisubmenu>Colors</guisubmenu><guisubmenu>Map...</guisubmenu> menu.</para>
<para>To do it, first copy the xml icon on your Desktop, apply the filter on it, and save it under <filename>bluefish_icon_xsl.png</filename> in a dedicated folder in your home directory, for example <filename>~/Pictures</filename> for Mac users.</para>
<para>Whichever icon you decided to use, click on the <guilabel>Icon</guilabel> field to enter its path.</para>
</listitem>
<listitem>
<para>Check the <guilabel>Editable</guilabel> box, if it is not already checked.</para>
</listitem>
<listitem>
<para>Copy and paste <guilabel>Content regex</guilabel> field of the <guilabel>xml</guilabel> filetype line into the corresponding field of the <guilabel>xsl stylesheet</guilabel> filetype line.</para>
</listitem>
<listitem>
<para>Set the <guilabel>Auto close tags mode</guilabel> to 1.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</listitem>
</orderedlist>
</example>
<note>
<para>If you want to enter more than one extension in the <guilabel>Extensions</guilabel> field, you should separate them with a colon.</para>
<para>When you define a new filetype, you should also provide new highlighting patterns.</para>
</note>
</sect2>

<sect2 id="modifying-filefilters">
<title>Modifying the files filters</title>
<para>The files filters allow you to group files types from the usage point of view. Once a file filter is created, you can view, hide, or open files based on a filter in the <guilabel>File browser</guilabel> contextual menu.</para>
<para>The file filters consist of:</para>
<orderedlist>
<listitem>
<para>a label.</para>
</listitem>
<listitem>
<para>whether or not the filter as defined in the <guilabel>Filetypes in filter</guilabel> hides the retrieved files or shows them.</para>
</listitem>
<listitem>
<para>a list of filetypes, as defined in the <guilabel>Filetypes</guilabel> part, separated by a colon.</para>
</listitem>
</orderedlist>
<para>You add, modify, delete, or move file types the same way it is described in <xref linkend="external-browsers"/>.</para>
<example id="adding-filefilters"><title>Adding a file filter</title>
<para>Following with our example in <xref linkend="changing-filetypes"/>, we can add a stylesheet filter to group css and xsl stylesheets together.</para>
<para>To add a stylesheet filter, execute the following steps:</para>
<orderedlist spacing="compact">
<listitem>
<para>Click on the <guilabel>Preferences...</guilabel> icon in the main tool bar to access the <guilabel>Edit preferences</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guilabel>Filetypes</guilabel> tab to display the <guilabel>Filetypes</guilabel> panel.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>Add</guibutton> button in the <guilabel>Filefilters</guilabel> part at the bottom. A new line will be shown, with an <guilabel>Untitled</guilabel> label.</para>
</listitem>
<listitem>
<para>Double-click on the label to allow editing, and enter the string you want to appear in the <guimenu>Label</guimenu> field. Here enter <code>All stylesheets</code>.</para>
</listitem>
<listitem>
<para>Check the <guilabel>Inverse filter</guilabel> box.</para>
</listitem>
<listitem>
<para>Click in the <guilabel>Filetypes in filter</guilabel> field  and enter the filetypes you want to group together, separated with a colon. Here it is <code>stylesheet:xsl stylesheet</code>.</para>
</listitem>
<listitem>
<para>Click on the <guibutton>OK</guibutton> button to save and close the panel.</para>
</listitem>
</orderedlist>
</example>
<important>
<para>The file types used in the <guilabel>Filetypes in filter</guilabel> match those defined in the <guilabel>Filetypes</guilabel> part. Do not confuse them with the file extensions. For example the <guilabel>C programming</guilabel> file filter matches c and image filetypes, i.e. files whose extensions are .c, .h, etc...</para>
</important>
</sect2>



<sect2 id="changing-highlighting-patterns">
<title>Modifying the highlighting patterns</title>
<para>The highlight patterns are build from Perl compatible regular expressions. A pattern has options for coloring and styling the text it matches. Within a match other patterns can be used to color parts of that match. There are three types of patterns:
<orderedlist spacing="compact">
<listitem><para>Start pattern and end pattern: that is two distinct patterns, match from the start pattern to the end pattern</para></listitem>
<listitem><para>Only start pattern: that is a unique pattern that matches from start to end</para></listitem>
<listitem><para>Subpattern from parent: that is a subpattern from the parent pattern, specified by the range in the parent pattern.</para></listitem>
</orderedlist>
</para>
<para>One specific pattern can also be used within several other parent patterns. The parent-match option is a regular expression that defines all parents for a certain pattern. If empty it will default to ^top$, so basically it will be on the top level.</para>
<para>So how does it work? Lets take a look at a little example text, a piece of PHP code within some HTML code: <programlisting>&lt;p align="center"&gt;
&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting></para>
<para>The first thing the highlighting engine does is finding the pattern that has the lowest match. Using the default patterns for PHP, the pattern named <guilabel>HTML</guilabel>: 
<figure id="figure-highlighting-pattern1">
<title id="figure-highlighting-pattern1-title">The HTML Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern1.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has a match at position 0:
<programlisting>&lt;p align="center"&gt;</programlisting></para>




<para>So now the highlighting engine searches for the lowest match in all subpatterns of <guilabel>HTML</guilabel>, in the region matched by a type 2 pattern. Again, the lowest match will count. The pattern named <guilabel>&lt;html&gt; Tags</guilabel>:
<figure id="figure-highlighting-pattern2">
<title id="figure-highlighting-pattern2-title">The &lt;html&gt; Tags Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern2.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the &lt;html&gt; Tags pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has a match at position 1. This pattern is a type 3 pattern, so it matches a subpattern of the parent: <programlisting>p</programlisting></para>



<para>The match from subpattern <guilabel>&lt;html&gt; Tags</guilabel> ends at position 2 and it does not have any child patterns, so the highlighting engine continues at position 2 with all subpatterns from <guilabel>HTML</guilabel>. A type 2 pattern named <guilabel>HTML Attributes</guilabel>:
<figure id="figure-highlighting-pattern3">
<title id="figure-highlighting-pattern3-title">The HTML Attributes Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern3.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML Attributes pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has the lowest match: <programlisting>align="center"</programlisting></para>





<para>This pattern does have a child pattern, again a type 3 pattern called <guilabel>HTML Attribute Contents</guilabel>:
<figure id="figure-highlighting-pattern4">
<title id="figure-highlighting-pattern4-title">The HTML Attribute Contents Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern4.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML Attribute Contents pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>matching: <programlisting>"center"</programlisting></para>



<para>The pattern <guilabel>HTML Attribute Contents</guilabel> does not have any child patterns, and subpatterns of <guilabel>HTML Attributes</guilabel> do not have any more matches, and also <guilabel>HTML</guilabel> subpatterns do not have any more matches. So we are back on the main level, the remaining code to highlight is: <programlisting>&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting></para>



<para>Now a pattern named <guilabel>PHP Block</guilabel>:
<figure id="figure-highlighting-pattern5">
<title id="figure-highlighting-pattern5-title">The PHP Block Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern5.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the PHP Block pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>has the lowest match. This is a type 1 pattern, so the highlight engine continues with all the remaining code, but it will not only search for the lowest match of the child patterns of <guilabel>PHP Block</guilabel>, but it will also ue it for the end pattern of <guilabel>PHP Block</guilabel>. The lowest match in this example is a pattern named <guilabel>Comment (C++/single line)</guilabel>:
<figure id="figure-highlighting-pattern6">
<title id="figure-highlighting-pattern6-title">The Comment (C++/single line) Pattern</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/highlighting_pattern6.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Comment (C++/single line) pattern</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>As you can see the ?&gt; within the comment does not end the <literal>php</literal> pattern, because it lies within a subpattern of <guilabel>PHP Block</guilabel>: <programlisting>// this is a comment ?&gt;</programlisting></para>
<para>The pattern <guilabel>Comment (C++/single line)</guilabel> does not have any child patterns, so the remaining code for the <guilabel>PHP</guilabel> subpatterns is: <programlisting>?&gt;</programlisting></para>
<para>It is very obvious now, the lowest match will be the end pattern of the <guilabel>php</guilabel> pattern, so we're back on the main level, and we have matched all of the code!
<figure id="figure-syntax-highlighting-example">
<title id="figure-syntax-highlighting-example-title">Syntax Highlighting Example</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/syntax_highlighting_example.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a syntax highlighting example</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The config file for highlighting is a colon separated array with the following content:<programlisting>mode:
patternname:
case_sensitive(0-on/1-off):
start reg-ex:
end reg-ex:
start &amp; end pattern(1), only start(2), subpattern(3):
parent-match:
foreground-color:
background-color:
don't change weight(0), non-bold(1), bold(2):
don't change style(0), non-italic(1), italic(2):</programlisting></para>
<para>The same options are found in the syntax highlighting preferences.</para>
<para>As an exercise you may want to add the highlighting patterns for the xsl stylesheet file type created previously. They will be based on the xml patterns with just small changes.</para>
<note><para>If you check the force bold weight check box, you should also check that the font you use has a bold variant in the <guilabel>Editor</guilabel> tab of the <guilabel>Preferences</guilabel> panel.</para></note>
</sect2>

</sect1>

</chapter>
