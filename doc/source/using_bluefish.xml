<!--
Using Bluefish - a part of the Bluefish manual
(C) 2004 Olivier Sessink

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->
<chapter id="using-bluefish">

<title>Using Bluefish</title>
<para>
In this chapter, most of the functionalities of Bluefish are described. What you can do, how you do it, and how you can customize the default behaviour.
</para>
<sect1 id="starting-bluefish">
<title>Starting Bluefish</title>
<para>In GNOME, Bluefish can be started from the Applications/Programming menu. From a 
terminal, simply launch bluefish using the command <emphasis>bluefish</emphasis>.</para>
<sect2 id="commandline-options">
<title>Command line options</title>
<para>
There are several useful command line options.
<itemizedlist>
	  <listitem><para>-s           skip root check</para></listitem>
	  <listitem><para>-v           current version</para></listitem>
	  <listitem><para>-n           open new window</para></listitem>
	  <listitem><para>-p filename  open project</para></listitem>
	  <listitem><para>-h           this help screen</para></listitem>
	  <listitem><para>--display</para></listitem>
</itemizedlist>
Many programs like browsers, email clients and file managers can be configured to 
open files in Bluefish. For example, <emphasis>bluefish '%s'</emphasis> will open
a file in the current window, <emphasis>bluefish -n '%s'</emphasis> will open a
file in a new window, and <emphasis>bluefish -p '%s'</emphasis> will open
a project file.
</para>
</sect2>
</sect1>
<sect1 id="user-interface">
<title>The user interface</title>
	<para>The biggest part of the user interface is the editor area. Because Bluefish has a so-called "Multiple Document Interface", there are actually many editor areas
	in Bluefish, accessible via the tabs. By default the tabs are on the bottom.
			<figure id="editor_array">
				<title id="bf-figure-editor-array">Bluefish Editor Array</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/editor_array.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 editor array
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>The top of the Bluefish interface consists of a menu, a main tool bar, an 
	HTML tool bar, and a Custom menu.
			<figure id="main_menu">
				<title id="bf-figure-main-menu">Bluefish Main Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/main_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 main menu
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The main tool bar gives you quick access to the basic functionalities of a text editor.
			<figure id="main_toolbar">
				<title id="bf-figure-main-toolbar">Bluefish Main Tool Bar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/main_toolbar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 main tool bar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The HTML tool bar provides access to the most commonly used HTML functionalities.
			<figure id="html_toolbar">
				<title id="bf-figure-html-toolbar">Bluefish HTML Tool Bar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/html_toolbar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 HTML tool bar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The custom tool bar provides access to languages and replacement functions. It is fully customizable through the preferences panel. 
			<figure id="custom_toolbar">
				<title id="bf-figure-custom-toolbar">Bluefish Custom Tool Bar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/custom_toolbar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 custom tool bar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>
	On the side, by default the left side, there is the side panel. The side panel 
	consists of a file browser, a function reference browser and a bookmark browser.
	</para>
	<para>This is where you may get quick access to files, switching directories in the upper part.
			<figure id="file_browser">
				<title id="bf-figure-file-browser">Bluefish File Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/file_browser.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 file browser
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The function reference browser references CSS2, HTML, PHP, and Python functions with their syntax.
			<figure id="function_reference_browser">
				<title id="bf-figure-function-reference-browser">Bluefish Function Reference Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/function_reference_browser.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 function reference browser
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			</para>
			<para>The bookmark browser allows you to access directly a marked position in a file.
			<figure id="bookmark_browser">
				<title id="bf-figure-bookmark-browser">Bluefish Bookmark Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/bookmark_browser.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 bookmark browser
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>
	On the bottom of Bluefish is the status bar. Here messages are shown, the current line
	and column number are shown, the insert (INS) or overwrite (OVR) mode for the cursor,
	and the file type and character encoding.
			<figure id="status_bar">
				<title id="bf-figure-status-bar">Bluefish Status Bar</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/status_bar.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>
								A screen shot of the Bluefish 0.14 status bar
							</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>
	The visibility of these items can be toggled via the <guimenu>View</guimenu> menu.
		<figure id="figure-view-menu">
				<title id="figure-view-menu-title">Bluefish View Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/view_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.14 view menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	If you want to disable any of these items by default, you can set these options in
	the preferences under <emphasis>User interface</emphasis>.
	</para>

</sect1>
<sect1 id="working-with-files">
<title>Working with files</title>
	<para>
	Most of the file operations are accessible from the <guimenu>File</guimenu> menu. 
	Through it, a new file can be created, existing files opened, and opened files saved or renamed.</para>
	<para>It is also possible to insert a file into another one, and to revert a modified file to its previously saved state.
	
				<figure id="figure-file-menu">
				<title id="figure-file-menu-title">Bluefish File Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/file_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish File Menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>

	</para>
	<sect2 id="creating-files">
	<title>Creating files</title>
	<para>
		Apart from using 
		<menuchoice>
			<shortcut>
				<keycombo>
					<keycap>Ctrl</keycap>
					<keycap>N</keycap>
				</keycombo>
			</shortcut>
			<guimenu>File</guimenu>
			<guimenuitem>New</guimenuitem>
		</menuchoice> or the <guilabel>New</guilabel> icon to create a new file, you may also use <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>New Window</guimenuitem></menuchoice>.
	</para>
	<para>Both methods create an untitled file of type text with the default character encoding defined in preferences.</para>
	</sect2>
<sect2 id="opening-files">
<title>Opening files</title>
	<para>
	Through <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>O</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Open...</guimenuitem></menuchoice> one or more files can be opened. As for creating files, you may want to open the files in a new window. In this case, use <menuchoice><guimenu>File</guimenu><guimenuitem>New Window</guimenuitem></menuchoice> to first open the new window and then open the desired files as usual.
				<figure id="figure-open-file">
				<title id="figure-open-file-title">Bluefish Open File Dialog</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_file.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Open File Dialog</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<variablelist>
		<varlistentry>
          <term><emphasis>Note</emphasis></term>
          <listitem>
          <para>
The latest opened directories appear in the upper part of the left side panel, while you have the possibility to add the most often accessed directories to the lower part. You may also filter the files to be opened with the pop menu located on the right side, whose contents mirror the file types defined in preferences.
	</para>
	</listitem>
	</varlistentry>
	</variablelist>
	<para>
	Recently opened files can be opened by selecting them from the list within <menuchoice><guimenu>File</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice>. The number of files in this menu can be set in the preferences under <emphasis>Files</emphasis>.
	</para>
	<para>
	The file browser in the side panel can also be used to open files. It supports filtering files, by right clicking the contextual menu in the file browser.
				<figure id="figure-file-browser-filtering">
				<title id="figure-file-browser-filtering-title">Filtering Files with the Bluefish File Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/file_browser_filtering.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to filter files with the Bluefish file browser</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
<para>The available filters may be modified in Preferences. For more information, see <xref linkend="modifying-filefilters" />.
</para>
<para>If you right click a directory, you can make this directory the base directory for the file browser using the <guimenuitem>Set as basedir</guimenuitem> option. Then you can access it directly from the pop up menu in the upper part of the file browser.</para>	<para> By default the file browser follows the document focus. If you change to
	a different document, the file browser will show the contents of the directory
	where this document is located. This behaviour can be changed on the bottom of the 
	file browser.</para>
	<para>
	Information about currently opened files can be seen if you move the mouse over
	the document tab (by default on the bottom of the screen). A so called tool tip will
	be shown with information about the full path, size, permissions, file type and 
	encoding of the file.
					<figure id="figure-open-file-info">
				<title id="figure-open-file-info-title">Info on open file with the Bluefish File Browser</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_file_info.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing Info on open file with the Bluefish file browser</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>

	</para>
	<para>
	An interesting feature of Bluefish is the 
	ability to open files by selecting the text of a currently opened file. 
	For example, if a filename is shown in say a terminal application, 
	you can select the filename, and use <menuchoice><guimenu>File</guimenu><guimenuitem>Open from Selection</guimenuitem></menuchoice> to open that file. 
	The file, if it exists, will be opened in another tab within Bluefish. 
	</para>
	<para>
	Finally, files can be opened via the command line by feeding filenames to 
	Bluefish as arguments. This can even be done while Bluefish is running and 
	the resulting file will then show up in its own tab.
	</para>
	<para>Files can also be opened by clicking on the <guilabel>Open...</guilabel> icon in the main tool bar.</para>
	<variablelist>
	<varlistentry>
          <term><emphasis>Note</emphasis></term>
          <listitem>
            <para>If you have installed gnome-vfs or gnome-vfs2 before installing Bluefish, you will be able to open files on remote desktop.</para>
            </listitem>
     </varlistentry>
     </variablelist>

	<para>Be aware that if the file is huge it may take a very long time 
	to get the rendering if syntax highlighting is enabled. The GTK editing 
	widget used in Bluefish, furthermore, is not very good at handling files 
	with very long lines, and that could also slow down Bluefish considerably.
	</para>
</sect2>
<sect2 id="saving-files">
<title>Saving files</title>
	<para>
	If a document is modified, the filename is shown in red in the document tabs, and also 
	if you right click on the tabs, the full path is shown in red in the list that will pop 
	up.
		<figure id="figure-modified-file-tooltip">
				<title id="figure-modified-file-tooltip-title">Tool Tip for Modified File</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/modified_file_tooltip.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing the tool tip for modified file</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>

	</para>
	<para>
	To save a document, you can use the <guimenu>File</guimenu> menu, the <guilabel>Save</guilabel> icon in the tool bar, or press the shortcut key combination <shortcut><keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo></shortcut>. By default a backup is made during save. The original file
	is copied to the same filename with a tilde <keycap>~</keycap> appended. This suffix and the backup behaviour can
	be changed in the preferences under <emphasis>Files</emphasis>.
	</para>
	<para>
	Before saving the file, Bluefish will check if the original file was changed on disk, using the 
	last modified time and the file size. On some filesystems the last modified time
	is sometimes not very precise (most notably on samba mounts). This makes Bluefish think the file
	is modified when it is not. This check can be changed in the preferences 
	under <emphasis>Files</emphasis>.
	</para>
	<para>
	You can also save a document under a different name, using the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>S</keycap></keycombo></shortcut><guimenuitem>Save As...</guimenuitem></menuchoice> menu entry, or the <guilabel>Save As...</guilabel> icon in the main tool bar. The original file will still exist.
		<figure id="figure-renaming-file">
				<title id="figure-renaming-file-title">Saving a File under a new Name</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/renaming_file.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to save a file under a new name</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>
	To save all modified files, you can use the <menuchoice><guimenu>File</guimenu><guimenuitem>Save All</guimenuitem></menuchoice> menu entry. This will save all documents that have been modified and bring you a save dialog if some files are new files.
	</para>
</sect2>
<sect2 id="renaming">
<title>Renaming files</title>
<para>
It is also possible to move or rename a document, using the 
<menuchoice><shortcut><keycap>F2</keycap></shortcut><guimenu>File</guimenu><guimenuitem>Rename...</guimenuitem></menuchoice> menu item, or right-clicking the file name in the side panel and choosing the <guimenuitem>Rename</guimenuitem> item.
		<figure id="figure-moving-file">
				<title id="figure-moving-file-title">Moving a file to another location</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/moving_file.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to move a file to another location</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
</sect2>
<sect2 id="closing">
<title>Closing files</title>
<para>When you want to close a file quickly, click on the <guilabel>close</guilabel> icon in the document tab. You may also use the <guilabel>Close</guilabel> icon in the main tool bar, or the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>W</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Close</guimenuitem></menuchoice> menu item.		
		<figure id="figure-document-tab-icon">
				<title id="figure-document-tab-icon-title">Closing a file with the document tab icon</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/closing_file_with_tab_icon.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the close icon in the document tab</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
<para>If the file is unchanged, it is merely closed. If the file has been modified, you will be presented with a save dialog.
		<figure id="figure-closing-a-file">
				<title id="figure-closing-a-file-title">Closing a modified file</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/closing_a_file.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to close a modified file</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
	<variablelist>
	<varlistentry>
          <term><emphasis>Tip</emphasis></term>
          <listitem>
            <para>Use it to save and close a file in one step.</para>
            </listitem>
     </varlistentry>
     </variablelist>
<para>When dealing with multiple files, you may want to use the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>W</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Close All</guimenuitem></menuchoice> menu item.</para>
<para>For each modified file, you will be presented with a save dialog, where you can choose to save the changes, close the file (i.e. discarding any change), or cancel the operation.
		<figure id="figure-closing-all-files">
				<title id="figure-closing-all-files-title">Closing all files</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/closing_all_files.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to close all files</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
	<variablelist>
	<varlistentry>
          <term><emphasis>Tip</emphasis></term>
          <listitem>
            <para>Say you have a number of open files, and only a few of them have been changed. To quickly close the unchanged files, and remain with the modified ones, use it answering cancel for the latter ones.</para>
            </listitem>
     </varlistentry>
     </variablelist>
<para>Note that the <menuchoice><guimenu>File</guimenu><guimenuitem>Close Window</guimenuitem></menuchoice> menu item offers the same behaviour.</para>
</sect2>
<sect2 id="inserting">
<title>Inserting files</title>
<para>You can insert any file into the current document with the <menuchoice><guimenu>File</guimenu><guimenuitem>Insert...</guimenuitem></menuchoice> menu item. The file will be inserted at the cursor location.</para>
<para>For more in-depth information about dealing with files, see <xref linkend="more-files" />.
</para></sect2>
<sect2 id="editing">
<title>Editing</title>
<sect3 id="undo-redo">
<title>Undo and Redo</title>
<para>
The undo and redo functionalities are available from the <guimenu>Edit</guimenu> menu,  the main tool bar, and the keyboard shortcuts. 
</para>
<itemizedlist>
	  <listitem><para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></shortcut><guimenuitem>Undo</guimenuitem></menuchoice></para></listitem>
	  <listitem><para><menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></shortcut><guimenuitem>Redo</guimenuitem></menuchoice></para></listitem>
</itemizedlist>
<para>
The functions <guimenuitem>Undo All</guimenuitem> and <guimenuitem>Redo All</guimenuitem> in the <guimenu>Edit</guimenu> menu will undo or redo all 
of the stored changes. The maximum number of changes can be configured in
the preferences, by default Bluefish will remember the last 100 changes per 
document. It is possible to clear the changes after the document is saved, 
an option in the preferences which is disabled by default.
</para>
</sect3>
<sect3 id="cut-copy-paste">
<title>Cut, Copy, and Paste</title>
<para>
The functions <guimenuitem>Cut</guimenuitem>, <guimenuitem>Copy</guimenuitem>, and <guimenuitem>Paste</guimenuitem> are available from the <guimenu>Edit</guimenu> menu, the main tool bar, and the keyboard shortcuts.
</para>
<itemizedlist>
	  <listitem><para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>X</keycap></keycombo></shortcut><guimenuitem>Cut</guimenuitem></menuchoice></para></listitem>
	  <listitem><para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></shortcut><guimenuitem>Copy</guimenuitem></menuchoice></para></listitem>
	  <listitem><para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo></shortcut><guimenuitem>Paste</guimenuitem></menuchoice></para></listitem>
</itemizedlist>
<para>
On X Windows Systems, you can also paste the current selected text using the 
middle mouse button. First select some text (in Bluefish or in any other X 
application), then press the middle mouse button where you want to paste the
selected text.
</para>
<para>
Cut or copy and then paste can also be done by selecting some text and 
dragging it to the destination. If the text is dragged to another 
document (or another application), it is copied. If the text is 
dragged within one document it is moved. Dragging to other applications 
is not possible to every application, but most Gnome and GTK programs
are supported.
</para>
</sect3>

<sect3 id="input-methods">
<title>Input methods</title>
<para>Bluefish is able to deal with a number of input methods, available from the contextual menu within a given document.
	<figure id="figure-input-methods-cm">
				<title id="figure-input-methods-cm-title">The Input Methods Contextual menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/input_methods_cm.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing the input methods contextual menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
<itemizedlist>
<listitem>
<para>The default mode switches all input methods off.</para>
</listitem>
<listitem>
<para>The Amharic mode is used for the most popular Ethiopian language.</para>
</listitem>
<listitem>
<para>The Cedilla mode is used for languages such as French, which uses the cedilla.</para>
</listitem>
<listitem>
<para>The Cyrillic mode is used to enter Russian with Roman letters. The transliteration occurs immediately.</para>
</listitem>
<listitem>
<para>The Inukitut mode works the same as Cyrillic mode.</para>
</listitem>
<listitem>
<para>The IPA mode is used for International phonetic alphabet.</para>
</listitem>
<listitem>
<para>Other modes are used for Erythrean, Ethiopian, Thai and Vietnamense languages.</para>
</listitem>
</itemizedlist>
<para>The X Input method relies on a client-server input system, and an input server.</para>
<para>For Japanese, Chinese, and Corean documents, you may have to install and launch the right input system, such as canna, and the right input server, such as kinput2.</para>
<para>Here is how to write a Japanese document on a non-Japanese system.</para>
<procedure><title>Writing in Japanese with Bluefish on a non-Japanese system</title>
	<step>
	<para>Launch the canna server if it is not running already</para>
</step>
<step>
<para>Set the encoding to Japanese, for example: <userinput>export LANG=ja_JP.UTF-8</userinput></para>
</step>
<step>
<para>Set the Xinput method with <userinput>export XMODIFIERS="@im=kinput2"</userinput></para>
</step>
<step>
<para>Launch kinput2 as a background process with <userinput>kinput2 &amp;</userinput></para>
</step>
<step>
<para>Launch bluefish as a background process with <userinput>bluefish &amp;</userinput></para>
</step>
<step>
<para>To activate the Xinput method within bluefish, use <keycombo><keycap>Shift</keycap><keycap>Space</keycap></keycombo>. A small window with a Japanese glyph will appear at one of the corner of the Bluefish window. Once the desired glyph has been composed, press <keycap>Space</keycap>, and hit <keycap>enter</keycap> to validate it.</para>
</step>
</procedure>
	<para>Here, you can see the small Xinput method window, at the bottom left corner of the window and the first Japanese word not already validated in the Bluefish window launched on a French system.	
	<figure id="figure-japanese-with-bluefish">
				<title id="figure-japanese-with-bluefish-title">Writing in Japanese with Bluefish</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/japanese_with_bluefish.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to write in Japanese with Bluefish</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>For an in-depth discussion on that subject, see <ulink url="http://www.jw-stumpel.nl/stestu.html#T6">Inputting from the keyboard</ulink>.</para>
</sect3>
</sect2>

<sect2 id="basic-find-replace">
<title>Basic Find and Replace</title>
<para>Bluefish offers a wide range of find and replace methods in the <guimenu>Edit</guimenu> menu. Here we will explore the most basic ones. For advanced find and replace methods, see <xref linkend="find-replace" />.
</para>
<sect3 id="basic-find">
<title>Searching for a word within a whole document</title>
<para>Let's start with the most basic example: searching a word in a document, from the beginning of the document till the end of the document.</para>
<para>Choose the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find...</guimenuitem></menuchoice> menu item. A <guilabel>Find</guilabel> dialog will show up. Enter the word to search for in the <guilabel>Search for:</guilabel> field. Then click <guibutton>OK</guibutton>.</para>
<para>
	<figure id="figure-find-word-whole">
	<title id="figure-find-word-whole-title">Finding a word in a document, from start to end</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/find_word_whole.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how to search a string within a document, from start to end.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
<para>If the word does not exist in the document, a small window pops up.</para>
<para>
	<figure id="figure-search-not-found">
	<title id="figure-search-not-found-title">Unsuccessful search window</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/search_not_found.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the unsuccessful search window.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
<para>If the search is successful, the document window scrolls up to the first occurrence of the string in the document and highlights it. Here's the search was applied to a shell script.</para>
<para>
	<figure id="figure-search-found">
	<title id="figure-search-found-title">Highlighted search result in the document window</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/search_found.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the search result highlighted in the document window.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
<para>To retrieve next occurrences of the string, if any, you will use the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find again</guimenuitem></menuchoice> menu item repeatedly. Again, when no further occurrence is found, you will be warned with the above mentioned search not found dialog.</para>
</sect3>
<sect3 id="basic-find-selection">
<title>Setting limits to the search scope</title>
<para>You may want to search for a string from the cursor location till the end of the document. Here's an example to search all 'name == ' occurrences within a python script from a given location.</para>
<procedure><title>Searching from selection</title>
	<step>
	<para>Put the cursor where you want to start the search from in the document window</para>
 <para>
	<figure id="figure-find-limited-cursor">
	<title id="figure-find-limited-cursor-title">Setting the cursor location</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/find_limited_cursor.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how to set the cursor location for a limited search.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
</step>
	<step>
	<para>Open the <guilabel>Find...</guilabel> dialog</para>
</step>
	<step>
	<para>Enter your search string in the <guilabel>Search for:</guilabel> field</para>
</step>
	<step>
	<para>Choose <guilabel>Current position till end</guilabel> from the <guilabel>Starts at:</guilabel> pop up menu</para>
 <para>
	<figure id="figure-find-limited-dialog">
	<title id="figure-find-limited-dialog-title">Choosing a limited search method</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/find_limited_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how to search from the cursor's location.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
</step>
	<step>
	<para>Click OK.</para>
</step>
</procedure>
<para>Here's the result.</para>
 <para>
	<figure id="figure-find-limited-result">
	<title id="figure-find-limited-result-title">Limited search result</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/find_limited_result.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the result of a limited search.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
<para>Notice that the search does not take into account the occurrence of the same string at line 50, since it is outside the search scope.</para>
<para>You can also limit the search scope to a selection range. In that case, highlight the selection before the search, and choose <guilabel>Beginning of selection till end of selection</guilabel> from the <guilabel>Starts at:</guilabel> pop up menu in the <guilabel>Find</guilabel> dialog.</para>
</sect3>
<sect3 id="find-matching-case">
<title>Case sensitive search</title>
<para>By default, the search process is case insensitive. If you want to make it case sensitive, just check the <guilabel>Match case</guilabel> box in the <guilabel>Find dialog</guilabel>.</para>
<para>
	<figure id="figure-find-match-case">
	<title id="figure-find-match-case-title">Making the search case sensitive</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/find_match_case.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how to make the search case sensitive</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
<para>Here's the result applied to a ruby script.</para>
<para>
	<figure id="figure-find-match-result-case">
	<title id="figure-find-match-case-result-title">Case sensitive search result</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/find_match_case_result.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing a case sensitive search</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
<para>Notice again that the result does not catch the XML string at line 45, since the search string was xml and case sensitive search was requested.</para>
</sect3>
<sect3 id="find-old-search">
<title>Retrieving previous search strings</title>
<para>Notice that the pop up menu at the right side of the <guilabel>Search for</guilabel> field in the <guilabel>Find</guilabel> dialog allows you to retrieve older search strings. They are listed by reverse order of searches, so that you access quickly the most recent ones.</para>
<para>
	<figure id="figure-find-recent">
	<title id="figure-find-recent-title">Retrieving recent searches</title>
		<screenshot>
			<mediaobject>
				<imageobject>
				<imagedata fileref="figures/find_recent.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the search for pop up menu to retrieve recent search string</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
	</figure>
</para>
</sect3>
<para>For an explanation of the <guilabel>Bookmark results</guilabel> box of the <guilabel>Find</guilabel> dialog, see <link linkend="generate-bookmark">here</link>.
</para></sect2>

<sect2 id="file-types">
<title>File types</title>
<para>
The file type of a file changes the behaviour of Bluefish. File types are recognised 
by their extension, or by the beginning of the content of the file. The current
document type is shown in the far right of the status bar. How these extensions
can be changed is
described in <xref linkend="bluefish-preferences" />.
</para>
<para>
If the type of a file is not properly detected, you can change the type using the 
<menuchoice><guimenu>Document</guimenu><guisubmenu>Document Type</guisubmenu></menuchoice> menu.

</para>
<sect3 id="syntax-highlighting">
<title>Syntax highlighting</title>
	<para>Syntax highlighting is the coloring of words that have a special
	meaning in the language you are writing. Obviously the patterns are
	different for every language. The "&lt;title&gt;" word for
	example means "start of title" in HTML, the "function"
	word means "start of function" in PHP.</para>
	<para>
	During the editing, Bluefish will only update the highlighting patterns in the
	block of text around the cursor. The number of lines (the size) of this block can be
	adjusted in the preferences under <emphasis>Editor</emphasis>.
	</para>
	<para>The syntax highlighting for the total document can be refreshed
	using the <menuchoice><shortcut><keycap>F5</keycap></shortcut><guimenu>Document</guimenu><guimenuitem>Update Highlighting</guimenuitem></menuchoice> menu. 
	The syntax highlighting can be disabled in the preferences under 
	<emphasis>Editor</emphasis>.	
	</para>
	<para>For more information about adding or modifying syntax highlighting for existent or new languages, see <xref linkend="changing-highlighting-patterns" />.
</para>
</sect3>
</sect2>
<sect2 id="more-files">
<title>More on files</title>
<sect3 id="remote-files">
<title>Remote files</title>
	<para>
		Assuming a working Internet connection, files can also be opened from the web using 
	<menuchoice><guimenu>File</guimenu><guimenuitem>Open URL</guimenuitem></menuchoice>. This feature depends on your gnome_vfs setup. If it is installed and working, http://, sftp://, smb:// and possibly more types of remote services should be supported by Bluefish. Depending on your gnome_vfs 
	version, some of these protocols are not fully stable yet, which can crash Bluefish!
	</para>
	<figure id="figure-open-url">
				<title id="figure-open-url-title">Opening an URL from the web</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_url.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to open an URL from the web</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>

		<para>Here you can see the style sheet of an Apache web site, nicely highlighted after its opening via the Bluefish <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL</guimenuitem></menuchoice> menu.</para>
	<figure id="figure-open-url-result">
				<title id="figure-open-url-result-title">A style sheet opened via the Open URL menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_url_result.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of a style sheet opened via the Open URL menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>

</sect3>
<sect3 id="character-encoding">
<title>Character encoding</title>
<para>
There are many different standards for character encoding of text files. Most well known is the ASCII
standard, which describes only 127 characters, and is supported by every text editor in the world. 
The most common standard nowadays is UTF-8, which 
describes thousands of characters, and is backwards compatible with ASCII. 
</para>
<para>Internally, Bluefish will always work with UTF-8. When opening
a file, Bluefish has to detect the correct encoding for the file. For HTML files the encoding should
be present in a &lt;meta name=&quot;encoding&quot;&gt; tag. Bluefish will always use this tag if it is 
available in the file. If this tag has an encoding that is not present in the Bluefish config file, 
this encoding is automatically added to the Bluefish config file.
</para>

<para>
The locale also defines a default encoding. If you are using a locale (a local setting, defining 
language, time format, currency format, number formatting etc.), Bluefish will try to load the 
file using the encoding defined in the locale.
</para>

<para>
Bluefish itself also has a setting for a default encoding. This is the next encoding 
Bluefish will try. This is also the encoding Bluefish will use for files created by Bluefish 
(UTF-8 by default).
</para>
<para>
If these steps fail, Bluefish will simply try every encoding defined in the Bluefish 
config file. 
</para>
<para>
Filenames on disk can also contain non ASCII characters. All Gnome and GTK programs 
(including Bluefish) assume that filenames are in UTF-8 encoding. If you have filenames
in the encoding of your locale on your disk, you have to set <userinput>G_BROKEN_FILENAMES=1</userinput> in the 
environment to make Gnome and GTK programs detect this encoding.
</para>
<para>For information about writing documents in 16-bits encoded languages, such as Japanese, see <xref linkend="input-methods" />.
</para>

</sect3>
<sect3 id="open-advanced">
<title>Open advanced</title>
	<para>
		In the <emphasis>Open Advanced</emphasis> dialog, accessible from the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>O</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Open Advanced...</guimenuitem></menuchoice> menu item, multiple files 
	can be opened from a directory based on their extension or their contents. The
	same functionality is available from the file browser in the side panel. If you right
	click a directory, you can also there select <guimenuitem>Open advanced...</guimenuitem>.
	</para>
	<para>
	To open all files by extension, enter the extension in the dialog, and leave the search 
	pattern empty. Check the <guilabel>recursive</guilabel> option if you want to include
	all subdirectories in the search.
	</para>
	<para>
	To open files by content, leave the extension at *, and enter a search pattern in the dialog. You can 
	use regular expression patterns if you check the <guilabel>Is regex</guilabel> option.
	</para>
	<para>
	The open advanced functionality runs the find and grep utilities to get a list of filenames. If these 
	utilities are not available on your system the functionality is not available.
	</para>
	<para>You may also combine both methods. Here we open recursively all Chinese XML files in a given tree, whose contents contain the word packaging.
		<figure id="figure-open-advanced">
				<title id="figure-open-advanced-title">Using the Open Advanced dialog</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_advanced.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing the usage of the Open Advanced dialog</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="navigation-managing-documents">
<title>Navigation and Managing documents</title>
<sect2 id="navigation-one">
<title>Navigating through a document</title>

	<para>The editing area is a standard GTK editing area. This means there are 
	many keyboard shortcuts available to navigate through the text.</para>
	<itemizedlist>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo> will jump to the next word boundary</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo> will jump to the previous word boundary</para>
		</listitem>
		<listitem>
			<para><keycap>End</keycap> will jump to the end of line</para>
		</listitem>
		<listitem>
			<para><keycap>Home</keycap> will jump to the beginning of the line</para>
		</listitem>
		<listitem>
			<para><keycap>Page-Up</keycap> will jump one page up</para>
		</listitem>
		<listitem>
			<para><keycap>Page-Down</keycap> will jump one page down</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Home</keycap></keycombo> will jump to the top of the document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>End</keycap></keycombo> will jump to the end of the document</para>
		</listitem>
	</itemizedlist>
	<para>
	These shortcuts are also available when selecting text. Some examples:</para>
	<itemizedlist>
	<listitem>
	<para>To select 
	the current line, press <keycap>Home</keycap>, hold <keycap>Shift</keycap> and press <keycap>End</keycap>.</para>
	</listitem>
	<listitem>
	<para>To select the current word, 
	press <keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo>, hold <keycap>Shift</keycap> and press <keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo>.</para>
	</listitem>
	</itemizedlist>
</sect2>
<sect2 id="navigation-multiple">
<title>Navigating through many documents</title>
	<para>
	Navigating through a large list of documents can be difficult. But if you right-click 
	the document notebook tabs, you get a list of all opened documents.
	</para>
	<para>
	Navigation between documents can also be done using the <guimenu>Go</guimenu> menu, or its shortcuts.
	<figure id="figure-go-menu">
				<title id="figure-go-menu-title">Bluefish Go Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/go_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.14 go menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>The shortcuts are the following:</para>
	<itemizedlist>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the previous document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the next document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the first document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the last document</para>
		</listitem>
	</itemizedlist>
	<para>The <menuchoice><shortcut><keycap>Ctrl</keycap><keycap>L</keycap></shortcut><guimenu>Go</guimenu><guimenuitem>Goto Line</guimenuitem></menuchoice> offers an interesting feature.</para>
	<para>If there is some number in the document, you may select it, then click the <guilabel>From selection</guilabel> label in the Goto line dialog. Bluefish will fill in the <guilabel>Line number</guilabel> field with that number and go directly to it.
	<figure id="figure-goto-line">
				<title id="figure-goto-line-title">Using the Goto Line dialog</title>
				<screenshot>
					<mediaobject>12
						<imageobject>
							<imagedata fileref="figures/goto_line.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing the Goto Line dialog</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
	
	<para>The same feature is available from the <menuchoice><guimenu>Go</guimenu><guimenuitem>Goto Selection</guimenuitem></menuchoice>.</para>
	<variablelist>10
	<varlistentry>
          <term><emphasis>Tip</emphasis></term>
          <listitem>
            <para>You may want to check the <guilabel>Keep dialog</guilabel> box to keep the dialog open, when you plan to access several parts of the document by line numbers.</para>
            </listitem>
     </varlistentry>
     </variablelist>
</sect2>
<sect2 id="projects">
<title>Projects</title>
<para>
<figure id="figure-project-menu">
	<title id="figure-project-menu-title">Bluefish Project Menu</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_menu.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the Bluefish 0.14 project menu</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>
The projects are a sort of <emphasis>saved state</emphasis> of Bluefish. Thus, they are a very convenient way to work with files scattered all over your disks or to pick up only the files you are interested in within a huge tree.</para>
<procedure><title>Creating a New Project</title>
	<step>
	<para>Click on the <menuchoice><guimenu>Project</guimenu><guimenuitem>New Project</guimenuitem></menuchoice></para>
	</step>
	<step>
	<para>Fill in the fields in the <guilabel>Create New Project</guilabel> dialog</para>
<para><figure id="figure-project-new-dialog">
	<title id="figure-project-new-dialog-title">Creating a New Project</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_new_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the new project dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
  <para>A basedir can be set, so the file browser in the
  left panel will only show the files in the basedir and its subdirectories.
  If Bluefish is installed with gnome-vfs support the basedir might be remote,
  for example sftp://someserver/somedir or
  smb://user:password@server/someshare/.</para>
 <para>If the webdir is entered
  in the project settings, Bluefish will launch the browser to the appropriate
  URL. If your basedir for example is /var/www/ and your webdir
  http://localhost/ Bluefish will use this information to launch the browser
  to the correct URL. This can be very convenient for testing server side
  scripting languages like PHP, JSP or other.</para> 
  <para>The template field
  can point to a template file. If the <guilabel>New</guilabel> button is clicked in the main tool bar, the
  contents of this file will be automatically loaded into the edit
  window.</para> 
 </step>
 <step>
 <para>Once the project is created, you need to tell Bluefish where you want to save it. An <guilabel>Enter Bluefish project filename</guilabel> dialog will be presented to you. Notice that you can save the project in a location different from the files the project points to.</para>
 <para><figure id="figure-project-save-dialog">
	<title id="figure-project-save-dialog-title">Entering Bluefish Project Filename</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_save_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the enter bluefish project dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
</step>
</procedure>
<para>To open a project, you have the choice between <menuchoice><guimenu>Project</guimenu><guimenuitem>Open Project...</guimenuitem></menuchoice> or <menuchoice><guimenu>Project</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice>. When you choose the former, a <guilabel>Selecting a Bluefish Project</guilabel> dialog is presented to you.</para>
 <para><figure id="figure-project-open-dialog">
	<title id="figure-project-open-dialog-title">Selecting a Bluefish Project</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_open_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the select Bluefish project filename dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Likewise, you can save the project with <menuchoice><guimenu>Project</guimenu><guimenuitem>Save</guimenuitem></menuchoice>, <menuchoice><guimenu>Project</guimenu><guimenuitem>Save as...</guimenuitem></menuchoice> to save it under a new name, or <menuchoice><guimenu>Project</guimenu><guimenuitem>Save &amp; close</guimenuitem></menuchoice> to save and close it.</para>
<para>If any file in the project has been modified, you will be presented with a dialog allowing you to save the modified file, to discard the changes, or to cancel the whole process.</para>
<para>All files open when the project is saved, are automatically opened the next time you open the project.</para>
 <para><figure id="figure-project-open">
	<title id="figure-project-open-title">Opening a Bluefish Project</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_open.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of a Bluefish project</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Notice that the side panel only shows the tree related to the project.</para>
  <para>Also the recently used files in that project are shown in the
  <menuchoice><guimenu>File</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice> menu item.</para>
  <para>The projects will be expanded to have more Bluefish
  settings, so a project can be a bit of customized Bluefish setup. Currently
  the state of various tool bars and menu bars is saved in a project
  file.</para> 
  <para>The project file itself is simply a text file in the
  standard Bluefish format (same format as the config file). This format is
  'key: value'. Here is an example:</para>
  <programlisting>
	name: BluefishDoc
	basedir: ~/bluefishcvs/bluefish-gtk2/doc/
	webdir: http://micmacfr.homeunix.org/bluefish/doc
	template: 
	view_main_toolbar: 1
	view_left_panel: 1
	view_custom_menu: 1
	view_html_toolbar: 1
	word_wrap: 1
</programlisting>
</sect2>

<sect2 id="bookmarks">
<title>Bookmarks</title>
	<para>In Bluefish you can add bookmarks to a line in the text, and you can later use 
	the bookmark to quickly jump to this location, or even to open the document referred to by the bookmark at that line.
	</para>
	<para>
	Bookmarks can be added to the current cursor location by using the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Add Bookmark</guimenuitem></menuchoice> menu item; or by right-clicking in the text, and selecting <guilabel>Add bookmark</guilabel>.
	</para>
	<para>You can delete a bookmark using the <guilabel>Delete bookmark</guilabel> item in the document contextual menu.</para>
	<para>Each bookmark in a given document is marked by a blue background on the line number.</para>
 <para><figure id="figure-bookmark-marked">
	<title id="figure-bookmark-marked-title">How bookmarks are marked</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_marked.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how bookmarks are marked</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
	<para>
	Bookmarks can be temporary or permanent. Permanent bookmarks are stored, and temporary
	bookmarks are gone after Bluefish is closed.	The default is set in the preferences
	under <emphasis>Editor</emphasis>.
	</para>
	<para>
	Bookmarks can be found in the third tab of the side panel, sorted by document and line number.<para>
 <para><figure id="figure-bookmark-tab">
	<title id="figure-bookmark-tab-title">Bookmarks in the side panel</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_tab.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing bookmarks in the side panel</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
	</para> If you 
	right click a bookmark in the bookmark tab of the side panel, you get a pop up menu with several options.</para>
<para>
<figure id="figure-bookmark-cm">
	<title id="figure-bookmark-cm-title">Contextual menu on bookmark in the side panel</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_cm.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the contextual menu on bookmark in the side panel</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>The <guilabel>Goto bookmark</guilabel> item allows you to go to the bookmark location in the document, opening it if needed.</para>
<para>The <guilabel>Edit</guilabel> item allows you to change a bookmark from temporary to permanent or the other way around, to name it, and to give it a short description.
	</para>
<para>
<figure id="figure-bookmark-edit">
	<title id="figure-bookmark-edit-title">Editing a bookmark</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_edit.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the edition of a bookmark</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Note that after naming a bookmark, the default name - first characters of the bookmarked line - is displayed after the new name.</para>
<para>
<figure id="figure-bookmark-name">
	<title id="figure-bookmark-name-title">A named bookmark</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_name.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing a named bookmark</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>You may also delete a bookmark via this contextual menu, delete all bookmarks in the active document, or delete all bookmarks stored in the bookmark tab of the side panel. The latter ones are also available when you right click the name of a document in this tab.</para>
<para>
<figure id="figure-bookmark-document-cm">
	<title id="figure-bookmark-document-cm-title">The contextual menu on a document in the bookmark tab</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_document_cm.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the contextual menu on a document in the bookmark tab</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
	<para id="generate-bookmark">
	A way to add many bookmarks at the same time is using the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> dialog. Check the 
	<guilabel>Bookmark result</guilabel> option, and all search results will be added to your bookmarks. 
	For example this manual has sections, and each section is identified by a header 
	like '&lt;sect1 id="bluefish-ch-4-sect-6"&gt;'. A way to automatically get a 
	bookmark to every section is to search for the following regular expression 
	pattern: '&lt;sect[0-9]+ id="[^"]+"&gt;' and bookmark all results. 
	</para>
	<para>Here is an example to bookmark all functions in an Objective-C file with this method:</para>
<para>
<figure id="figure-bookmark-find-cm">
	<title id="figure-bookmark-find-title">Bookmarking via the Find menu</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_find.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how to bookmark via the Find menu</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
</sect2>
<sect2 id="find-replace">
<title>Find and Replace</title>
	<para>
	The <guimenu>Edit</guimenu> menu features several options for Find and Replace. The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> and <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>H</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Replace...</guimenuitem></menuchoice> menu items will simply start the dialogs described elsewhere in this manual.</para>
	<para>
	The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find again</guimenuitem></menuchoice> menu item will repeat the last used search. It will 
	continue the search after the position where the previous search was stopped. If the 
	end of file is reached, it will restart at the beginning or continue with the next file, 
	depending on the search options used.
	</para>
	<para>SCREENSHOT BY ????</para>
	<para>
	The <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find from selection</guimenuitem></menuchoice> menu item will search for the currently selected text. If you select
	for example the name of a function, in bluefish, or in any other program, and you choose
	find from selection Bluefish will start a new search for this selected string.
	</para>
<sect3 id="search-replace-regex">
<title>Find or replace with regular expressions</title>
  <para> With the find and replace you can do incredible
  things. We'll start with a simple example. In some HTML table we have
  several table data tags where we actually want table header tags. Table data
  is &lt;td&gt;&lt;/td&gt; and we want &lt;th&gt;&lt;/th&gt;. </para> 
  <para>SCREENSHOT BY ????</para>
  <para>
  We can do two normal replaces: one where we replace &lt;td&gt; with
  &lt;th&gt; and then another where we replace &lt;/td&gt; with &lt;/th&gt;
  </para> 
  <para>we can also do one replace using regular expressions: find
  (&lt;|&lt;/)?td&gt; and replace with \0th&gt;</para>
  <para> For more information about
  regular expressions you might want to read man 7 regex, or read any of the
  great Internet sites about regular expressions. The \0 in the replace string
  refers to the first subpattern match in the search pattern, the \1 to the
  second etc.</para>
  <para> if you understand the above example, you will
  realize that you can do much more.</para>
  <para>Suppose you also want to match a table
  data tag that does have some attributes like &lt;td class="myclass"&gt;, and
  you want to keep the option while converting to table header. The following
  pattern will do this: find (&lt;|&lt;/)td([^&gt;]*)&gt; and replace with
  \0th\1&gt; </para> 
<para> if you have any search and replace patterns you
  use often, you can also add them to the Custom Menu. Check the Custom Menu
  section of this manual for more information. </para>
  
  <para>
  In the <emphasis>find</emphasis> and the <emphasis>replace</emphasis> dialog it is not possible to insert keys 
  Enter or Tab. You can, however, insert escape characters, if you enable the 
  'Patterns contain backslash sequences' option. If you use this option, you can
  add a newline to your pattern as \n, a tab as a \t, and a backslash becomes a 
  \\.
  </para>
  
  <para>
  Another useful option in the <emphasis>find</emphasis> dialog is the <emphasis>bookmark results
  </emphasis> option. For example in a PHP document, you could search for the
  word 'function', and add a bookmark to every function. This results, however,
  in a list of bookmarks that are all named 'function'. Not so useful. But also
  now we can make use of a regular expression. The expression 
  'function[ \t\n]+[&amp;a-zA-Z0-9_]+' will result in all functions and their name.
  Much more useful!
  </para>
  <para>SCREENSHOT BY ????</para>

</sect3>
</sect2>
</sect1>
<sect1 id="more-then-text-editor">
<title>More than a Text Editor</title>
<sect2 id="indenting">
<title>Indenting</title>
	<para>
	The shift-right and shift-left items in the menu, or the buttons in the tool bar, will indent or unindent the currently selected text. It will normally use
	tabs for indenting, or spaces if you have 
	'indent with spaces' selected in the preferences. The number of spaces used is the same 
	as the 'tabsize' option in the preferences.
	</para>
	<para>SCREENSHOT BY ????</para>
</sect2>
<sect2 id="auto-tag-closing">
<title>Auto tag closing</title>
	<para>
	By default, Bluefish will automatically produce closing tags for HTML and XML 
	documents. For example, if you type <literal>&lt;p&gt;</literal>
	within an HTML document, bluefish will produce 
	<literal>&lt;/p&gt;</literal>. So, as soon as you finish typing a 
	non-empty HTML tag, meaning the tag is supposed to have a closing tag, Bluefish 
	will help you out and close the tag automatically. For empty tags, like 
	<literal>&lt;br&gt;</literal>, Bluefish correctly does nothing. 
	This feature can be turned off by unchecking the menu option 
	<emphasis>Document &gt; Auto Close HTML Tags</emphasis>.
	</para>
	<para>
	Bluefish has two modes for tag closing, an XML mode and an HTML mode. In XML mode, 
	Bluefish will add a closing tag to any tag that is not closed itself with /&gt;. In 
	HTML mode, Bluefish excludes all known tags that do not need a closing tag, such 
	as &lt;br&gt; and &lt;img&gt;.
	</para>
	<para>
	Bluefish will choose the mode based on the file type of the document. In the filetype 
	preferences the default mode for each file type can be set.
	</para>
</sect2>
<sect2 id="spell-checker">
<title>Spell checker</title>
<figure id="figure-spell-checker">
				<title id="figure-spell-checker-title">Bluefish Spell Checker</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/spell_checker.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.14 spell checker</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	<para>
	Bluefish uses <ulink url="http://aspell.sourceforge.net/">aspell</ulink> for spell 
	checking. If the aspell libraries are not installed on your system, then the spell 
	checking feature will not be available. To launch the spell checker, select 
	<emphasis>Document &gt; Check Spelling...</emphasis>
	</para>
	<para>
	The spell checker will launch in a separate window, which you can keep open as you 
	edit files. You have the option to check a whole document or just a selection. Click 
	on <emphasis>Spell Check</emphasis> to start spell checking the current document. As 
	you run across misspelled words you want included in the dictionary, click on the 
	<emphasis>Add</emphasis> button in the spell checker window. This will add words to 
	a personal dictionary.	
	</para>
	<para>
	Key words for different languages can be ignored using filters. Currently, the only
	filter is for HTML. If you want to help write more filters, join the 
	<link linkend="bluefish-contact">mailing list</link>.
	</para>
</sect2>
<sect2 id="function-reference">
<title>Function reference</title>
<para>
The function reference browser is a place where reference information about a 
certain language can be found. Currently Bluefish comes with a PHP reference, a 
CSS 2.0 reference, an HTML reference and a Python reference. The functions are 
grouped depending on the language, by type, module, object, etc.
</para>
<para>
The function reference browser can show an info window on the bottom. Check the 'Show 
info window' check box. In this window some information about the currently selected 
item can be shown. What exactly is shown can be chosen in the right-click context menu.
</para>
<para>SCREENSHOT BY ????</para>
<para>Every item in the function reference can simply insert text, show an info window, 
or show a dialog that can be used to insert text. In the right-click context menu each of
these functions is accessible. One of these functions can be bound to a 
left-double-click action. This is also configurable from the context menu.
</para>
</sect2>
<sect2 id="HTML">
<title>HTML</title>
	  <para> HTML is obviously the most supported language in Bluefish. There is a
	  special HTML tool bar with many dialogs, and several menu sections to work
	  with tags. You can also right-click a tag and bring up the dialog from
	  there. The preferences have several settings on HTML style 
	  under <emphasis>HTML</emphasis>.</para> 
	  <para>
	  The HTML tool bar has two types of buttons. You can recognise each type by the 
	  tool tip if you move the mouse over the button. First there are buttons that will
	  open a dialog for some HTML tag. These buttons have a tool tip that ends with three 
	  dots. For example the anchor &lt;a&gt; dialog has the tool tip 'Anchor...'. Second, there 
	  are buttons that will directly insert text, these buttons do not have the dots in
	  the tool tip.
	  </para>
	  <para>SCREENSHOT OF HTML TOOLBAR AND TWO DIFFERENT TOOLTIPS</para>
	  <para>
	  If you want to add the HTML tag around some block of text, you can select the 
	  block of text, and then use the HTML tool bar or the Tags or Dialogs menu to 
	  insert some tags. The tag open code will be inserted before the selected block, 
	  the tag close will be inserted after the selected block.
	  </para>
	  <para>
	  An existing tag can be edited by right-clicking the tag, and select 'Edit tag' in 
	  the context menu. You can also place the cursor in the tag and use 
	  '/Dialogs/Edit tag under cursor', or the shortcut F3.  Not 
	  all tags, however, have a dialog, so this is not always possible. Colors in the 
	  style #RRGGBB can also be edited from the right-click context menu.
	  </para>
	  <para>In the reference browser on the left panel there is an
	  HTML reference available. All possible attributes and valid values can be
	  found in this reference.
	  </para> 
	  <para>There are several special search and
	  replace actions in the menu Edit-Replace special. These can be used to
	  convert special characters (like &lt; and &amp;), or ISO characters to their
	  HTML entities.</para>
	  <sect3 id="thumbnails">
<title>Thumbnail generation</title>
</sect3>
<para>
Bluefish can automatically generate thumbnails for images. A thumbnail is a small 
image, with a 
link to the larger image. Bluefish will create the small image based on your 
settings, and insert a
&lt;img&gt; tag in the file, and a &lt;a&gt; tag linking the original.
</para>
<para>There are actually two thumbnail dialogs in Bluefish, a single thumbnail 
dialog, and a multi thumbnail dialog.</para>
<para>The single thumbnail dialog is very straightforward. You select the 
image, choose the scaling, and some attributes, and press OK. Bluefish will create 
the thumbnail with 
extension _thumbnail.png (can be changed in the preferences).</para>
<para>SCREENSHOT BY ????</para>
<para>In the multi thumbnail dialog, you first setup some constraint, and 
the HTML code to be inserted for each image.</para>
<para>Scaling can be based on a fixed ratio, based on a fixed width, based 
on a fixed height, or based on a fixed width and fixed height (this last 
option does not keep the original aspect ratio!).</para>
<para>In the HTML code for each image, you can use several placeholders, such as
%r for the original filename, %t for the thumbnail filename, %w for the original 
width, %h for the original height, %x for the thumbnail width, %y for the thumbnail 
height, and finally %b for the original file size (in bytes). The default string is
&lt;a href=&quot;%r&quot;&gt;&lt;img src=&quot;%t&quot; width=&quot;%x&quot; height=&quot;%y&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
</para>
<para>
After you have set up the scaling and the HTML code, you can select multiple images, and 
Bluefish will create the thumbnails and insert the code.
</para>
</sect2>
<sect2 id="quickbar">
<title>Customising the quick bar</title>
	<para>The quick bar is a user defined tool bar. All HTML tool bar buttons can
	be added to the quick bar by simply right-clicking them and selecting
	"Add to quick bar". If you want to remove items from the Quick bar,
	right-click them and select "Remove from Quick bar"</para>
	<para>SCREENSHOT BY ????</para>
</sect2>
<sect2 id="custom-menu">
<title>Custom menu</title>
	<para>The custom menu allows you to add "often used" strings or
	search and replace patterns to a menu. Upon install Bluefish will create
	some default entries. These will give you an idea what can be done with
	the custom menu.</para>
	
	<para>
	The location for entries in the custom menu is defined by their menu path. A menu path
	looks like /Main menu/submenu/item or /Main menu/item. 
	</para>
	<para>There are two types of items in the custom menu. First is the Custom dialog, which will 
	insert a string, optionally based on values asked in a dialog. Second is 
	the Custom Find and Replace, which will run a replace, also optionally based
	on values asked in a dialog.</para>
	<para>
	The most simple custom dialog item has a menupath, for example /MySite/author, and a Formatstring 
	before, for example 'written by Olivier'. If you add this item, you can add this string
	by selecting the menu item.
	</para>
	<para>SCREENSHOT BY ????</para>
	<para>
	In another example, you have a string you often need to set before 
	and after some block of text. For example 
	&lt;div class=&quot;MyClass&quot;&gt;&lt;/div&gt;. Now you choose menupath /MySite/div with class
	and you choose &lt;div class=&quot;MyClass&quot;&gt; as formatstring before, and you 
	choose &lt;/div&gt; as formatstring after. Click add, and the item is in the menu. 
	If you now select some text, and activate this menu item, you will see that the
	first bit of text is added before the selection, and the second bit is added after
	the selection.
	</para>
	<para>
	Suppose you want to improve this last example. You have both MyClass1 and MyClass2. 
	Now use 'Number of variables' 1 in the custom menu editor. As you see a new entry 
	appears where you can enter the name for variable %0. As name we enter 'MyClass number', 
	and now we change the formatstring before to &lt;div class=&quot;MyClass%0&quot;&gt;.
	If you now activate this menu, it will ask you for a value for 'MyClass number', and then
	insert the strings, using the value you provided.
	</para>
	<para>SCREENSHOT BY ????</para>
	<para>
	Find and replace items are no different. The dialog has some more options, each of these
	options correspond to the regular replace dialog. Again you can use variables like %0, %1 etc. 
	to make a certain menu item more flexible.
	</para>
	<para>SCREENSHOT BY ????</para>

</sect2>
<sect2 id="external-programs-filters">
<title>External programs, filters</title>
		<para>You can integrate external commands such as browsers, or text filters. 
		If you want to use for
		example a sed command as a filter, you can add it like this to the
		external commands and filters (in the preferences dialog): sed -e
		'some sed command' &gt; '%f' &lt; '%s'
		<figure id="figure-external-menu">
				<title id="figure-external-menu-title">Bluefish External Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/external_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 0.14 external menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
		</para>
		<para>To add items to the external
  menu:</para><para><orderedlist><listitem><para>Edit &gt;
  Preferences</para></listitem><listitem><para>Choose the "External Programs"
  tab.</para></listitem><listitem><para>Click "Add" to add a new
  item</para></listitem><listitem><para>Double-click on the name field to give
  the command a name (this name will become an option in the "External"
  menu).</para></listitem><listitem><para>Double-click on the command field to
  type the command to be
  executed.</para></listitem></orderedlist></para><para>I WILL ADD AN EXAMPLE
  HERE LATER</para><para>Items within External &gt; Outputbox allow for
  programs to give feedback by opening an output box within Bluefish's main
  window. To create an Outputbox menu item: <orderedlist><listitem><para>Edit
  &gt; Preferences</para></listitem><listitem><para>Choose the "Output
  parsers" tab.</para></listitem><listitem><para>Click "Add" to add a new
  item</para></listitem><listitem><para>Double-click on the name field to give
  the command a name (this name will become an option in the "External"
  menu).</para></listitem><listitem><para>Double-click on the pattern field
  and give a regular expression pattern with subpatterns, such as line
  ([0-9]+) column [0-9]+ - (.*).</para></listitem><listitem><para>Double-click
  on the "File #" field and give the number for the subpattern matching the
  filename (-1 for none)</para></listitem><listitem><para>Double-click on the
  "Line #" field and give the number for the subpattern matching the line
  number</para></listitem><listitem><para>Double-click on the "Output #" field
  and give the number for the subpattern matching the actual error
  message</para></listitem><listitem><para>Double-click on the "Command" field
  and the command to execute, %s is the current
  filename</para></listitem><listitem><para>Toggle the "Show all output"
  check box to show output NOT matching the regular
  expression.</para></listitem></orderedlist></para><remark>Note: Of course,
  it is also possible to add these items by editing the file named "rcfile_v2"
  found in the user's home directory (~/.bluefish/rcfile_v2). The fields are
  delimited by colons and correspond to those found in the
  GUI.</remark>
		
</sect2>
</sect1>
<sect1 id="bluefish-preferences">
<title>Customising Bluefish</title>
<sect2 id="changing-shortcut-keys">
<title>Modifying shortcut keys</title>
		<para>Many menu entries are accessible via key combination; also called a
		shortcut. For example, pressing the Ctrl+S keys saves the current file to
		disk. If available, shortcut key combinations are shown on the right of
		the menu entry.</para>
		<para>What many people do not know is that they can be changed. Move the
		mouse over a menu entry, and press the key combination you would like to
		use. Immediately this combination will show up on the right of the menu
		entry. An entry can also be removed, press the backspace key when you move
		the mouse over a menu entry to remove the shortcut.</para>
		<para>To save the shortcut key combinations for later Bluefish sessions
		you can store them. In the Edit menu choose Save shortcut keys. This
		will store the settings in file ~/.bluefish/menudump_2. If you want to
		restore the default combinations simply remove this file and restart
		Bluefish.</para>
</sect2>
<sect2 id="editor-preferences">
<title>Editor preferences</title>
	<para>The font of the editor can be set in the preferences under <emphasis>Editor</emphasis>. </para>
	<para>
	A frequently asked question is how to change the background color of the editor in Bluefish.
	Bluefish uses the default editor background color as set in your GTK theme. If you want to 
	override the color of the theme, edit ~/.gtkrc-2.0 and add this section:
<programlisting>
style "EditorStyle" {
        base[NORMAL]="#eeeeee"
}
class "GtkTextView" style "EditorStyle"
</programlisting>
	Obviously, #eeeeee should be your preferred background color.
	</para>
	</sect2>
<sect2 id="changing-filetypes">
<title>Modifying file types</title>
			<para>
			Here you can define all file types that should be recognised by Bluefish. 
			The defaults for these file types are retrieved from a file called file types.default 
			in ${prefix}/share/bluefish/.
			</para>
			<para>
			The file types consist first of a name (this name is also used in the file filters, and in 
			the highlighting patterns). Second is a list of extensions, separated by a colon (:). Third 
			are the highlighting update characters. Upon a key press of one of these characters, 
			the highlighting 
			engine will refresh the highlighting around the cursor. If this field is empty, any character 
			will force the highlighting engine to refresh. Special characters like the tab and the newline 
			can be entered as \t and \n, the backslash itself is entered as \\. Fifth is the icon location
			for this file type. Sixth is whether this file type is editable by Bluefish (whether or 
			not Bluefish
			should try to open it after a double click). Seventh is a regular expression that can be used to
			detect the file type if a file without extension is loaded. Eight is the auto-tag-closing 
			mode. A 
			value of 0 means that Bluefish should not close XML/HTML tags, a value of 1 means it 
			should close 
			the tags XML style (&lt;br /&gt;), a value of 2 means HTML style.
			</para>
</sect2>
<sect2 id="modifying-filefilters">
<title>Modifying the files filters</title>
<para>TO BE WRITTEN</para>
</sect2>
<sect2 id="changing-highlighting-patterns">
<title>Modifying the highlighting patterns</title>

			<para>The highlight patterns are build from Perl compatible regular
			expressions. A pattern has options for coloring and style of the text it
			matches. Within a match other patterns can be used to color parts of
			that match. There are three types of patterns:
			<itemizedlist>
			<listitem>1 Two patterns, match from the start to the end pattern</listitem>
			<listitem>2 One pattern that matches from start to end</listitem>
			<listitem>3	Match a subpattern from the parent pattern</listitem>
			</itemizedlist>
			</para>
			<para>One specific pattern can also be used within several other parent
			patterns. The parent-match option is a regular expression that defines
			all parents for a certain pattern. If empty it will default to ^top$, so
			basically it will be on the top level.</para>
			<para>So how does it work? Lets take a look at a little example text, a
			piece of PHP code within some HTML code:</para>
			<programlisting>&lt;p align="center"&gt;
&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting>
			<para>The first thing the highlighting engine does is finding the
			pattern that has the lowest match. Using the default patterns for PHP,
			the pattern named <literal>html</literal> has a match at position 0:</para>
			<programlisting>&lt;p align="center"&gt;</programlisting>
			<para>So now the highlighting engine searches for the lowest match in
			all subpatterns of <literal>html</literal>, in the region matched by the
			type 2 <literal>html</literal> pattern. Again, the lowest match will
			count. The pattern named <literal>html-tag</literal> has a match at
			position 1. This pattern is a type 3 pattern, so it matches a subpattern
			of the parent:</para>
			<programlisting>p</programlisting>
			<para>the match from subpattern <literal>html-tag</literal> ends at
			position 2 and it does not have any child patterns, so the highlighting
			engine continues at position 2 with all subpatterns from
			<literal>html</literal>. A type 2 pattern named <literal>html-attrib</literal>
			has the lowest match:</para>
			<programlisting>align="center"</programlisting>
			<para>This pattern does have a child pattern, again a type 3 pattern
			called <literal>html-attrib-sub2</literal> matching:</para>
			<programlisting>"center"</programlisting>
			<para>The pattern <literal>html-attrib-sub2</literal> does not have any
			child patterns, and subpatterns of <literal>html-attrib</literal> do not
			have any more matches, and also <literal>html</literal> subpatterns do
			not have any more matches. So we are back on the main level, the
			remaining code to highlight is:</para>
			<programlisting>&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting>
			<para>Now a pattern named <literal>php</literal> has the lowest match.
			This is a type 0 pattern, so the highlight engine continues with all the
			remaining code, but it will not only search for the lowest match of the
			child patterns of <literal>php</literal>, but it will also use for the
			end pattern of <literal>php</literal>. The lowest match in this example
			is a pattern named <literal>php-comment-C++</literal> As you can see the
			?&gt; within the comment does not end the <literal>php</literal>
			pattern, because it lies within a subpattern of <literal>php</literal>:</para>
			<programlisting>// this is a comment ?&gt;</programlisting>
			<para>The pattern <literal>php-comment-C++</literal> does not have any
			child patterns, so the remaining code for the <literal>php</literal>
			subpatterns is:</para>
			<programlisting>?&gt;</programlisting>
			<para>It is very obvious now, the lowest match will be the end pattern
			of the <literal>php</literal> pattern, so we're back on the main
			level, and we have matched all of the code!</para>
			<figure id="syntax_highlighting_example">
				<title id="figure-desc">Syntax highlighting example</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/syntax_highlighting_example.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of a syntax highlighting example</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
		
			<para>The config file for highlighting is a colon separated array with
			the following content:</para>
			<programlisting>mode:
patternname:
case_sensitive(0-on/1-off):
start reg-ex:
end reg-ex:
start &amp; end pattern(1), only start(2), subpattern(3):
parent-match:
foreground-color:
background-color:
don't change weight(0), non-bold(1), bold(2):
don't change style(0), non-italic(1), italic(2): </programlisting>
<para>The same options are found in the syntax highlighting preferences.</para>
<para>SCREENSHOT BY ????</para>
</sect2>
</sect1>

</chapter>
