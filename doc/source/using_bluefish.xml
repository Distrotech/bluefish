<!--
Using Bluefish - a part of the Bluefish manual
(C) 2004 Olivier Sessink

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
-->
<chapter id="using-bluefish">
<title>Using Bluefish</title>
<?linebreaka4?>
<para>In this chapter, most of the functionalities of Bluefish are described. What you can do, how you do it, and how you can customize the default behavior.</para>
<?linebreaka4?>
<sect1 id="starting-bluefish">
<title>Starting Bluefish</title>
<para>In GNOME, Bluefish can be started from the Applications/Programming menu. From a terminal, simply launch bluefish using the command <application>bluefish</application>.</para>

<sect2 id="commandline-options">
<title>Command line options</title>
<para>There are several useful command line options:</para>
<variablelist><varlistentry><term>-s</term>
<listitem><para>skip root check</para></listitem>
</varlistentry>
<varlistentry><term>-v</term>
<listitem><para>display the current version</para></listitem>
</varlistentry>
<varlistentry><term>-n</term>
<listitem><para>open a new window</para></listitem>
</varlistentry>
<varlistentry><term>-p filename</term>
<listitem><para>open a project</para></listitem>
</varlistentry>
<varlistentry><term>-h</term>
<listitem><para>display this help screen</para></listitem>
</varlistentry></variablelist>
<para>Many programs like browsers, email clients and file managers can be configured to open files in Bluefish. For example, <command>bluefish '%s'</command> will open a file in the current window, <command>bluefish -n '%s'</command> will open a file in a new window, and <command>bluefish -p '%s'</command> will open a project file.</para>
</sect2>

</sect1>
<?linebreaka4?>
<sect1 id="user-interface">
<title>The user interface</title>
<para>The biggest part of the user interface is the editor area. Because Bluefish has a so-called "Multiple Document Interface", there are actually many editor areas in Bluefish, accessible via the tabs. By default the tabs are on the bottom.
<?linebreaka4?>
<figure id="editor_array">
<title id="bf-figure-editor-array">Bluefish Editor Array</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/editor_array.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 editor array</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?pagebreaka4?>
<para>The top of the Bluefish interface consists of a menu, a main tool bar, an HTML tool bar, and a Custom menu.
<?linebreaka4?>
<figure id="main_menu">
<title id="bf-figure-main-menu">Bluefish Main Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/main_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 main menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The main tool bar gives you quick access to the basic functionalities of a text editor.
<?linebreaka4?>
<figure id="main_toolbar">
<title id="bf-figure-main-toolbar">Bluefish Main Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/main_toolbar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 main tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The HTML tool bar provides access to the most commonly used HTML functionalities.
<?linebreaka4?>
<figure id="html_toolbar">
<title id="bf-figure-html-toolbar">Bluefish HTML Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/html_toolbar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 HTML tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The custom tool bar provides access to languages and replacement functions. It is fully customizable through the preferences panel. 
<?linebreaka4?>
<figure id="custom_toolbar">
<title id="bf-figure-custom-toolbar">Bluefish Custom Tool Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/custom_toolbar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 custom tool bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To the left of the editor area is the side panel. If you would prefer that the side bar be on the right side, simply change the setting in the <guilabel>User Interface</guilabel> tab found in the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu option. The side panel consists of a file browser, a function reference browser, and a bookmark browser.</para>
<para>The file browser provides quick access to files and directories.
<?linebreaka4?>
<figure id="file_browser">
<title id="bf-figure-file-browser">Bluefish File Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_browser.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 file browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?pagebreaka4?>
<para>The function reference browser references CSS2, HTML, PHP, and Python functions with their syntax. Some of them provide dialogs to help you inserting them , 
<?linebreakus?>
<figure id="function_reference_browser">
<title id="bf-figure-function-reference-browser">Bluefish Function Reference Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/function_reference_browser.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 function reference browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreakus?>
<para>The bookmark browser provides access to previously marked positions in a file.
<?linebreakus?>
<figure id="bookmark_browser">
<title id="bf-figure-bookmark-browser">Bluefish Bookmark Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/bookmark_browser.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 bookmark browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?pagebreakus?>
<para>On the bottom of the Bluefish window is the status bar. Shown here are messages, the current line &amp; column number, the insert (INS) or overwrite (OVR) mode for the cursor, and the file type &amp; character encoding.
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<figure id="status_bar">
<title id="bf-figure-status-bar">Bluefish Status Bar</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/status_bar.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 status bar</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<?linebreakus?>
<para>The visibility of these items can be toggled via the <guimenu>View</guimenu> menu.
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<figure id="figure-view-menu">
<title id="figure-view-menu-title">Bluefish View Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/view_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 view menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
<?linebreaka4?>
If you want to disable any of these items by default, you can set these options in the preferences under <guilabel>User interface</guilabel>.</para>
<?pagebreak?>
<para>The <guimenu>Help</guimenu> menu contains the typical About box. As usual, you will find in it developers', maintainers', and translators' details. Plus the configure flags used to compile Bluefish on your system.
<?linebreaka4?>
<?linebreaka4?>
<figure id="figure-about-window">
<title id="figure-about-window-title">Bluefish About Window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/about_window.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish 1.0 about window</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreaka4?>
<?linebreaka4?>
<para>The other menus are described in the following sections:</para>
<?linebreaka4?>
<itemizedlist>
<listitem>
<para>the <guimenu>Tags</guimenu> and <guimenu>Dialogs</guimenu> menu in <xref linkend="HTML"/></para>
</listitem>
<listitem>
<para>the <guimenu>Go</guimenu> menu in <xref linkend="navigation-multiple"/></para>
</listitem>
<listitem>
<para>the <guimenu>Project</guimenu> menu in <xref linkend="projects"/></para>
</listitem>
<listitem>
<para>the <guimenu>External</guimenu> menu in <xref linkend="external-programs-filters"/></para>
</listitem>
</itemizedlist>
</sect1>

<sect1 id="working-with-files">
<title>Working with files</title>
<?linebreak?>
<?linebreaka4?>
<para>Most of the file operations are accessible from the <guimenu>File</guimenu> menu. Using this menu, a new file can be created, existing files opened, and opened files saved or renamed.</para>
<?linebreak?>
<?linebreaka4?>
<para>It is also possible to insert a file into another one, and to revert a modified file to its previously saved state.	
<?linebreak?>
<figure id="figure-file-menu">
<title id="figure-file-menu-title">Bluefish File Menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Bluefish File Menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreaka4?>
<sect2 id="creating-files">
<title>Creating files</title>
<?linebreak?>
<para>Apart from using <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>New</guimenuitem></menuchoice> or the <guilabel>New</guilabel> icon to create a new file, you may also use <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>New Window</guimenuitem></menuchoice>.</para>
<?linebreak?>
<para>Both methods create an untitled file of type <literal>text</literal> with the default character encoding defined in the <guilabel>Files</guilabel> tab in the <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu option.</para>
</sect2>
	
<sect2 id="opening-files">
<title>Opening files</title>
<?linebreak?>
<?linebreak?>
<para>Through <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>O</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Open...</guimenuitem></menuchoice>, one or more files can be opened. When creating new files, you may want to open the files in a new window. In this case, use <menuchoice><guimenu>File</guimenu><guimenuitem>New Window</guimenuitem></menuchoice> to first open the new window and then open the desired files as usual.
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreaka4?>
<?linebreaka4?>
<figure id="figure-open-file">
<title id="figure-open-file-title">Bluefish Open File Dialog</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/open_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Open File Dialog</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreaka4?>
<?linebreaka4?>
<variablelist>
<varlistentry>
<term><emphasis>Note</emphasis></term>
<listitem>
<para>The most recently opened directories appear in the upper part of the left side panel, while the lower part contains user-defined locations. To add a new directory to the list, click on <guilabel>Add</guilabel>. You can also filter the file list by file type using the pop menu located on the right side. The list of file types in the filter menu is provided through the <guilabel>Filetypes</guilabel> tab found in Bluefish's <menuchoice><guimenu>Edit</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> menu option.</para>
</listitem>
</varlistentry>
</variablelist>
<?linebreaka4?>
<?linebreaka4?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<?linebreak?>
<para>Recently opened files can be opened by selecting them from the list within <menuchoice><guimenu>File</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice>. The number of files in this menu can be set in the preferences under <guilabel>Files</guilabel>.</para>
<?pagebreak?>
<para>The file browser in the side panel can also be used to open files. It supports filtering files, by right clicking the contextual menu in the file browser.
<?linebreak?>
<figure id="figure-file-browser-filtering">
<title id="figure-file-browser-filtering-title">Filtering Files with the Bluefish File Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/file_browser_filtering.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to filter files with the Bluefish file browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>The available filters may be modified in Preferences. For more information, see <xref linkend="modifying-filefilters" />.</para>
<para>If you right click a directory, you can make this directory the base directory for the file browser using the <guimenuitem>Set as basedir</guimenuitem> option. Then you can access it directly from the pop up menu in the upper part of the file browser.</para>
<para> By default the file browser follows the document focus. If you change to a different document, the file browser will show the contents of the directory where this document is located. This behaviour can be changed on the bottom of the file browser.</para>
<para>Information about currently opened files can be seen if you move the mouse over the document tab (by default on the bottom of the screen). A so called tool tip will be shown with information about the full path, size, permissions, file type and encoding of the file.
<?linebreak?>
<figure id="figure-open-file-info">
<title id="figure-open-file-info-title">Info on open file with the Bluefish File Browser</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/open_file_info.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing Info on open file with the Bluefish file browser</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>An interesting feature of Bluefish is the ability to open files by selecting the text of a currently opened file. For example, if a filename is shown in say a terminal application, you can select the filename, and use <menuchoice><guimenu>File</guimenu><guimenuitem>Open from Selection</guimenuitem></menuchoice> to open that file. The file, if it exists, will be opened in another tab within Bluefish.</para>
<para>Finally, files can be opened via the command line by feeding filenames to Bluefish as arguments. This can even be done while Bluefish is running and the resulting file will then show up in its own tab.</para>
<?linebreaka4?>
<para>Files can also be opened by clicking on the <guilabel>Open...</guilabel> icon in the main tool bar.</para>
<variablelist>
<varlistentry>
<term><emphasis>Note</emphasis></term>
<listitem>
<para>If you have installed gnome-vfs or gnome-vfs2 before installing Bluefish, you will be able to open files on remote desktop.</para>
</listitem>
</varlistentry>
</variablelist>
<?linebreaka4?>
<para>Be aware that if the file is huge it may take a very long time to get the rendering if syntax highlighting is enabled. The GTK editing widget used in Bluefish, furthermore, is not very good at handling files with very long lines, and that could also slow down Bluefish considerably.</para>
</sect2>
<?linebreaka4?>
<sect2 id="saving-files">
<title>Saving files</title>
<para>If a document is modified, the filename is shown in red in the document tabs, and also if you right click on the tabs, the full path is shown in red in the list that will pop up.
<?linebreaka4?>
<figure id="figure-modified-file-tooltip">
<title id="figure-modified-file-tooltip-title">Tool Tip for Modified File</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/modified_file_tooltip.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the tool tip for modified file</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreaka4?>
<para>To save a document, you can use the <guimenu>File</guimenu> menu, the <guilabel>Save</guilabel> icon in the tool bar, or press the shortcut key combination <keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo>. By default a backup is made during save. The original file is copied to the same filename with a tilde <keycap>~</keycap> appended. This suffix and the backup behaviour can be changed in the preferences under <guilabel>Files</guilabel>.</para>
<para>Before saving the file, Bluefish will check if the original file was changed on disk, using the last modified time and the file size. On some filesystems the last modified time is sometimes not very precise (most notably on samba mounts). This makes Bluefish think the file is modified when it is not. This check can be changed in the preferences under <guilabel>Files</guilabel>.</para>
<?linebreaka4?>
<para>You can also save a document under a different name, using the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>S</keycap></keycombo></shortcut><guimenuitem>Save As...</guimenuitem></menuchoice> menu entry, or the <guilabel>Save As...</guilabel> icon in the main tool bar. The original file will still exist.
<?linebreaka4?>
<figure id="figure-renaming-file">
<title id="figure-renaming-file-title">Saving a File under a new Name</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/renaming_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to save a file under a new name</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To save all modified files, you can use the <menuchoice><guimenu>File</guimenu><guimenuitem>Save All</guimenuitem></menuchoice> menu entry. This will save all documents that have been modified and present you with a save dialog if some files are new files.</para>
</sect2>

<sect2 id="renaming">
<title>Renaming files</title>
<?linebreak?>
<para>It is also possible to move or rename a document, using the <menuchoice><shortcut><keycap>F2</keycap></shortcut><guimenu>File</guimenu><guimenuitem>Rename...</guimenuitem></menuchoice> menu item, or right-clicking the file name in the side panel and choosing the <guimenuitem>Rename</guimenuitem> item.
<?linebreak?>
<?linebreaka4?>
<?linebreaka4?>
<figure id="figure-moving-file">
<title id="figure-moving-file-title">Moving a file to another location</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/moving_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to move a file to another location</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect2>
<?linebreaka4?>
<?linebreak?>
<sect2 id="closing">
<title>Closing files</title>
<?linebreak?>
<para>When you want to close a file quickly, click on the <guilabel>close</guilabel> icon in the document tab. You may also use the <guilabel>Close</guilabel> icon in the main tool bar, or the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>W</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Close</guimenuitem></menuchoice> menu item.		
<?linebreak?>
<?linebreaka4?>
<?linebreaka4?>
<figure id="figure-document-tab-icon">
<title id="figure-document-tab-icon-title">Closing a file with the document tab icon</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/closing_file_with_tab_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the close icon in the document tab</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?pagebreaka4?>
<para>If the file is unchanged, it is merely closed. If the file has been modified, you will be presented with a save dialog.
<figure id="figure-closing-a-file">
<title id="figure-closing-a-file-title">Closing a modified file</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/closing_a_file.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to close a modified file</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<variablelist>
<varlistentry>
 <term><emphasis>Tip</emphasis></term>
 <listitem>
<para>Use it to save and close a file in one step.</para>
</listitem>
</varlistentry>
</variablelist>
<para>When dealing with multiple files, you may want to use the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>W</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Close All</guimenuitem></menuchoice> menu item.</para>
<para>For each modified file, you will be presented with a save dialog, where you can choose to save the changes, close the file (i.e. discarding any change), or cancel the operation.
<figure id="figure-closing-all-files">
<title id="figure-closing-all-files-title">Closing all files</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/closing_all_files.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to close all files</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<variablelist>
<varlistentry>
 <term><emphasis>Tip</emphasis></term>
 <listitem>
<para>Say you have a number of open files, and only a few of them have been changed. To quickly close the unchanged files, and remain with the modified ones, use it answering cancel for the latter ones.</para>
</listitem>
</varlistentry>
</variablelist>
<para>Note that the <menuchoice><guimenu>File</guimenu><guimenuitem>Close Window</guimenuitem></menuchoice> menu item offers the same behaviour.</para>
</sect2>

<sect2 id="inserting">
<title>Inserting files</title>
<para>You can insert any file into the current document with the <menuchoice><guimenu>File</guimenu><guimenuitem>Insert...</guimenuitem></menuchoice> menu item. The file will be inserted at the cursor location.</para>
<para>For more in-depth information about dealing with files, see <xref linkend="more-files" />.</para>
</sect2>

<sect2 id="editing">
<title>Editing</title>

<sect3 id="undo-redo">
<title>Undo and Redo</title>
<para>The undo and redo functionalities are available from the <guimenu>Edit</guimenu> menu,  the main tool bar, and the keyboard shortcuts. </para>
<itemizedlist>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></shortcut><guimenuitem>Undo</guimenuitem></menuchoice></para>
</listitem>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></shortcut><guimenuitem>Redo</guimenuitem></menuchoice>
</para>
</listitem>
</itemizedlist>
<para>The functions <guimenuitem>Undo All</guimenuitem> and <guimenuitem>Redo All</guimenuitem> in the <guimenu>Edit</guimenu> menu will undo or redo all of the stored changes. The maximum number of changes can be configured in the preferences, by default Bluefish will remember the last 100 changes per document. It is possible to clear the changes after the document is saved, an option in the preferences which is disabled by default.</para>
</sect3>

<sect3 id="cut-copy-paste">
<title>Cut, Copy, and Paste</title>
<para>The functions <guimenuitem>Cut</guimenuitem>, <guimenuitem>Copy</guimenuitem>, and <guimenuitem>Paste</guimenuitem> are available from the <guimenu>Edit</guimenu> menu, the main tool bar, and the keyboard shortcuts.</para>
<itemizedlist spacing="compact">
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>X</keycap></keycombo></shortcut><guimenuitem>Cut</guimenuitem></menuchoice></para>
</listitem>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></shortcut><guimenuitem>Copy</guimenuitem></menuchoice></para>
</listitem>
<listitem>
<para><menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo></shortcut><guimenuitem>Paste</guimenuitem></menuchoice></para>
</listitem>
</itemizedlist>
<para>On X Windows Systems, you can also paste the current selected text using the middle mouse button. First select some text (in Bluefish or in any other X application), then press the middle mouse button where you want to paste the selected text.</para>
<para>Cut or copy and then paste can also be done by selecting some text and dragging it to the destination. If the text is dragged to another document (or another application), it is copied. If the text is dragged within one document it is moved. Dragging highlighted text from one application to another may or may not work. However, most GNOME and GTK programs support this feature.</para>
</sect3>

<sect3 id="input-methods">
<title>Input methods</title>
<para>Bluefish handles a number of input methods, available from the contextual menu within a given document.
<?linebreaka4?>
<figure id="figure-input-methods-cm">
<title id="figure-input-methods-cm-title">The Input Methods Contextual menu</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/input_methods_cm.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the input methods contextual menu</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<itemizedlist spacing="compact">
<listitem>
<para>The default mode switches all input methods off.</para>
</listitem>
<listitem>
<para>The Amharic mode is used for the most popular Ethiopian language.</para>
</listitem>
<listitem>
<para>The Cedilla mode is used for languages such as French, which uses the cedilla.</para>
</listitem>
<listitem>
<para>The Cyrillic mode is used to enter Russian with Roman letters. The transliteration occurs immediately.</para>
</listitem>
<listitem>
<para>The Inukitut mode works the same as Cyrillic mode.</para>
</listitem>
<listitem>
<para>The IPA mode is used for International phonetic alphabet.</para>
</listitem>
<listitem>
<para>Other modes are used for Erythrean, Ethiopian, Thai and Vietnamese languages.</para>
</listitem>
</itemizedlist>
<para>The X Input method relies on a client-server input system, and an input server.</para>
<para>For Japanese, Chinese, and Korean documents, you may have to install and launch the correct input system, such as canna, and the appropriate input server, such as kinput2.</para>
<para>Here is how to write a Japanese document on a non-Japanese system.</para>
<procedure id="japanese-writing"><title>Writing in Japanese with Bluefish on a non-Japanese system</title>
<step>
<para>Launch the canna server if it is not running already</para>
</step>
<step>
<para>Set the encoding to Japanese, for example: <userinput>export LANG=ja_JP.UTF-8</userinput></para>
</step>
<step>
<para>Set the Xinput method with <userinput>export XMODIFIERS="@im=kinput2"</userinput></para>
</step>
<step>
<para>Launch kinput2 as a background process with <userinput>kinput2 &amp;</userinput></para>
</step>
<step>
<para>Launch bluefish as a background process with <userinput>bluefish &amp;</userinput></para>
</step>
<step>
<para>To activate the Xinput method within bluefish, use <keycombo><keycap>Shift</keycap><keycap>Space</keycap></keycombo>. A small window with a Japanese glyph will appear at one of the corner of the Bluefish window. Once the desired glyph has been composed, press <keycap>Space</keycap>, and hit <keycap>enter</keycap> to validate it.</para>
</step>
</procedure>
<para>Here, you can see the small Xinput method window, at the bottom left corner of the window and the first Japanese word not already validated in the Bluefish window launched on a French system.	
<?linebreaka4?>
<figure id="figure-japanese-with-bluefish">
<title id="figure-japanese-with-bluefish-title">Writing in Japanese with Bluefish</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/japanese_with_bluefish.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to write in Japanese with Bluefish</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>For an in-depth discussion on that subject, see <ulink url="http://www.jw-stumpel.nl/stestu.html#T6">Inputting from the keyboard</ulink>.</para>
</sect3>

</sect2>
<?linebreaka4?>

<sect2 id="basic-find-replace">
<title>Basic Find and Replace</title>
<para>Bluefish offers a wide range of find and replace methods in the <guimenu>Edit</guimenu> menu. Here we will explore the most basic ones. For advanced find and replace methods, see <xref linkend="find-replace" />.</para>
<sect3 id="basic-find">
<title>Searching for a word within a whole document</title>
<?linebreaka4?>
<para>Choose the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find...</guimenuitem></menuchoice> menu item. A <guilabel>Find</guilabel> dialog will be displayed. Enter the word to search for in the <guilabel>Search for:</guilabel> field. Then click <guibutton>OK</guibutton>.
<?linebreaka4?>
<?linebreaka4?>
<figure id="figure-find-word-whole">
<title id="figure-find-word-whole-title">Finding a word in a document, from start to end</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_word_whole.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to search a string within a document, from start to end.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreaka4?>
<para>If the word does not exist in the document, a small window pops up.
<?linebreaka4?>
<?linebreaka4?>
<figure id="figure-search-not-found">
<title id="figure-search-not-found-title">Unsuccessful search window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/search_not_found.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the unsuccessful search window.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<?linebreaka4?>
<?linebreaka4?>
<para>If the search is successful, the document window scrolls up to the first occurrence of the string in the document and highlights it.</para>
<?pagebreaka4?>
<para>Below is an example of a search applied to a shell script.
<?linebreaka4?>
<figure id="figure-search-found">
<title id="figure-search-found-title">Highlighted search result in the document window</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/search_found.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the search result highlighted in the document window.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>To retrieve next occurrences of the string, if any, you will use the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find again</guimenuitem></menuchoice> menu item repeatedly. Again, when no further occurrence is found, a dialog will be displayed notifying you that no match was found.</para>
</sect3>
<?linebreaka4?>
<sect3 id="basic-find-selection">
<title>Setting limits to the search scope</title>
<?linebreaka4?>
<para>You may want to search for a string from the cursor location till the end of the document. Here's an example to search all <literal>name ==</literal> occurrences within a python script from a given location.</para>
<procedure id="search-selection"><title>Searching from selection</title>
<step>
<para>Put the cursor where you want to start the search from in the document window
<?linebreaka4?>
<figure id="figure-find-limited-cursor">
<title id="figure-find-limited-cursor-title">Setting the cursor location</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_limited_cursor.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to set the cursor location for a limited search.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Open the <guilabel>Find...</guilabel> dialog</para>
</step>
<step>
<para>Enter your search string in the <guilabel>Search for:</guilabel> field</para>
</step>
<step>
<para>Choose <guilabel>Current position till end</guilabel> from the <guilabel>Starts at:</guilabel> pop up menu
<figure id="figure-find-limited-dialog">
<title id="figure-find-limited-dialog-title">Choosing a limited search method</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_limited_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to search from the cursor's location.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</step>
<step>
<para>Click OK.</para>
</step>
</procedure>
<para>Here's the result:
<figure id="figure-find-limited-result">
<title id="figure-find-limited-result-title">Limited search result</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_limited_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the result of a limited search.</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice that the search does not take into account the occurrence of the same string at line 50, since it is outside the search scope.</para>
<para>You can also limit the search scope to a selection range. In that case, highlight the selection before the search, and choose <guilabel>Beginning of selection till end of selection</guilabel> from the <guilabel>Starts at:</guilabel> pop up menu in the <guilabel>Find</guilabel> dialog.</para>
</sect3>
<?linebreakus?>
<sect3 id="find-matching-case">
<title>Case sensitive search</title>
<para>By default, the search process is case insensitive. If you want to make it case sensitive, just check the <guilabel>Match case</guilabel> box in the <guilabel>Find dialog</guilabel>.
<figure id="figure-find-match-case">
<title id="figure-find-match-case-title">Making the search case sensitive</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_match_case.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to make the search case sensitive</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Here's the result applied to a ruby script:
<figure id="figure-find-match-result-case">
<title id="figure-find-match-case-result-title">Case sensitive search result</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_match_case_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing a case sensitive search</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
<para>Notice again that the result does not catch the XML string at line 45, since the search string was xml and case sensitive search was requested.</para>
</sect3>
<?linebreaka4?>
<sect3 id="find-old-search">
<title>Retrieving previous search strings</title>
<para>Notice that the pop up menu to the right of the <guilabel>Search for</guilabel> field in the <guilabel>Find</guilabel> dialog allows you to retrieve previous search strings. They are listed in reverse order by search history, providing quicker access to the most recent searches.
<figure id="figure-find-recent">
<title id="figure-find-recent-title">Retrieving recent searches</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/find_recent.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the search for pop up menu to retrieve recent search string</phrase>
</textobject>
</mediaobject></screenshot>
</figure></para>
</sect3>

<sect3 id="more-on-find">
<title>More on find</title>
<para>For an explanation of the <guilabel>Bookmark results</guilabel> box of the <guilabel>Find</guilabel> dialog, see <link linkend="generate-bookmark">here</link>.</para>
</sect3>

</sect2>

<sect2 id="file-types">
<title>File types</title>
<para>
Different file types can change the behaviour of Bluefish. File types are recognized 
by their extension, or by the beginning of the file's contents. The current
document type is shown in the far right of the status bar. How these extensions
can be changed is
described in <xref linkend="bluefish-preferences" />.
</para>
<para>
If the type of a file is not properly detected, you can change the type using the 
<menuchoice><guimenu>Document</guimenu><guisubmenu>Document Type</guisubmenu></menuchoice> menu.
</para>

<sect3 id="syntax-highlighting">
<title>Syntax highlighting</title>
	<para>Syntax highlighting is the coloring of words that have special
	meaning within a given programming (or markup) language. Obviously, the patterns can vary
	among different languages. The "&lt;title&gt;" word for
	example means "start of title" in HTML, the "function"
	word means "start of function" in PHP.</para>
	<para>
	While editing, Bluefish will only update the highlighting patterns in the
	block of text around the cursor. The number of lines (the size) of this block can be
	adjusted in the preferences under <guilabel>Editor</guilabel>.
	</para>
	<para>The syntax highlighting for the total document can be refreshed
	using the <menuchoice><shortcut><keycap>F5</keycap></shortcut><guimenu>Document</guimenu><guimenuitem>Update Highlighting</guimenuitem></menuchoice> menu. 
	The syntax highlighting can be disabled in the preferences under 
	<guilabel>Editor</guilabel>.	
	</para>
	<para>For more information about adding or modifying syntax highlighting for existent or new languages, see <xref linkend="changing-highlighting-patterns" />.
</para>
</sect3>

</sect2>

<sect2 id="more-files">
<title>More on files</title>

<sect3 id="remote-files">
<title>Remote files</title>
	<para>
		Assuming a working Internet connection, files can also be opened from the web using 
	<menuchoice><guimenu>File</guimenu><guimenuitem>Open URL</guimenuitem></menuchoice>. This feature depends on your gnome_vfs setup. If it is installed and working, http://, sftp://, smb:// and possibly more types of remote services should be supported by Bluefish. Depending on your gnome_vfs 
	version, some of these protocols are not yet fully stable, which can crash Bluefish!
	</para>
	<figure id="figure-open-url">
				<title id="figure-open-url-title">Opening an URL from the web</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_url.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing how to open an URL from the web</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
		<para>Here you can see the style sheet of an Apache web site, nicely highlighted after its opening via the Bluefish <menuchoice><guimenu>File</guimenu><guimenuitem>Open URL</guimenuitem></menuchoice> menu.</para>
	<figure id="figure-open-url-result">
				<title id="figure-open-url-result-title">A style sheet opened via the Open URL menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_url_result.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of a style sheet opened via the Open URL menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</sect3>

<sect3 id="character-encoding">
<title>Character encoding</title>
<para>
There are many different standards for character encoding of text files. Most well known is the ASCII
standard, which describes only 127 characters, and is supported by every text editor in the world. 
The most common standard nowadays is UTF-8, which 
describes thousands of characters, and is backwards compatible with ASCII. 
</para>
<para>Internally, Bluefish will always work with UTF-8. When opening
a file, Bluefish has to detect the correct encoding for the file. For HTML files, the encoding should
be present in a &lt;meta name=&quot;encoding&quot;&gt; tag. Bluefish will always use this tag if it is 
available in the file. If this tag has an encoding that is not present in the Bluefish config file, 
this encoding is automatically added to the Bluefish config file.
</para>
<para>
The locale also defines a default encoding. If you are using a locale (a local setting, defining 
language, time format, currency format, number formatting etc.), Bluefish will try to load the 
file using the encoding defined in the locale.
</para>
<para>
Bluefish itself also has a setting for a default encoding. This is the next encoding 
Bluefish will try. This is also the encoding Bluefish will use for files created by Bluefish 
(UTF-8 by default).
</para>
<para>
If these steps fail, Bluefish will simply try every encoding defined in the Bluefish 
config file. 
</para>
<para>
Filenames on disk can also contain non ASCII characters. All GNOME and GTK programs 
(including Bluefish) assume that filenames are in UTF-8 encoding. If you have filenames
in the encoding of your locale on your disk, you have to set <userinput>G_BROKEN_FILENAMES=1</userinput> in the 
environment to make GNOME and GTK programs detect this encoding.
</para>
<para>For information about writing documents in 16-bits encoded languages, such as Japanese, see <xref linkend="input-methods" />.
</para>
</sect3>

<sect3 id="open-advanced">
<title>Open advanced</title>
	<para>
		In the <guilabel>Open Advanced</guilabel> dialog, accessible from the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>O</keycap></keycombo></shortcut><guimenu>File</guimenu><guimenuitem>Open Advanced...</guimenuitem></menuchoice> menu item, multiple files 
	can be opened from a directory based on their extension or their contents. The
	same functionality is available from the file browser in the side panel. If you right
	click a directory, you can also there select <guimenuitem>Open advanced...</guimenuitem>.
	</para>
	<para>
	To open all files by extension, enter the extension in the dialog, and leave the search 
	pattern empty. Check the <guilabel>recursive</guilabel> option if you want to include
	all subdirectories in the search.
	</para>
	<para>
	To open files by content, leave the extension at *, and enter a search pattern in the dialog. You can 
	use regular expression patterns if you check the <guilabel>Is regex</guilabel> option.
	</para>
	<para>
	The open advanced functionality runs the find and grep utilities to get a list of filenames. If these 
	utilities are not available on your system the functionality is not available.
	</para>
	<para>You may also combine both methods. Here we open recursively all Chinese XML files in a given tree, whose contents contain the word packaging.
		<figure id="figure-open-advanced">
				<title id="figure-open-advanced-title">Using the Open Advanced dialog</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/open_advanced.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing the usage of the Open Advanced dialog</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
</sect3>

</sect2>

</sect1>

<sect1 id="navigation-managing-documents">
<title>Navigation and Managing documents</title>

<sect2 id="navigation-one">
<title>Navigating through a document</title>
	<para>The editing area is a standard GTK editing area. This means there are 
	many keyboard shortcuts available to navigate through the text.</para>
	<itemizedlist>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo> will jump to the next word boundary</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo> will jump to the previous word boundary</para>
		</listitem>
		<listitem>
			<para><keycap>End</keycap> will jump to the end of line</para>
		</listitem>
		<listitem>
			<para><keycap>Home</keycap> will jump to the beginning of the line</para>
		</listitem>
		<listitem>
			<para><keycap>Page-Up</keycap> will jump one page up</para>
		</listitem>
		<listitem>
			<para><keycap>Page-Down</keycap> will jump one page down</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Home</keycap></keycombo> will jump to the top of the document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>End</keycap></keycombo> will jump to the end of the document</para>
		</listitem>
	</itemizedlist>
	<para>
	These shortcuts are also available when selecting text. Some examples:</para>
	<itemizedlist>
	<listitem>
	<para>To select 
	the current line, press <keycap>Home</keycap>, hold <keycap>Shift</keycap> and press <keycap>End</keycap>.</para>
	</listitem>
	<listitem>
	<para>To select the current word, 
	press <keycombo><keycap>Ctrl</keycap><keycap>Left-Arrow</keycap></keycombo>, hold <keycap>Shift</keycap> and press <keycombo><keycap>Ctrl</keycap><keycap>Right-Arrow</keycap></keycombo>.</para>
	</listitem>
	</itemizedlist>
</sect2>

<sect2 id="navigation-multiple">
<title>Navigating through many documents</title>
	<para>
	Navigating through a large list of documents can be difficult. But if you right-click 
	the document notebook tabs, you get a list of all opened documents.
	</para>
	<para>
	Navigation between documents can also be done using the <guimenu>Go</guimenu> menu, or its shortcuts.
	<figure id="figure-go-menu">
				<title id="figure-go-menu-title">Bluefish Go Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/go_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 1.0 go menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	</para>
	<para>The shortcuts are the following:</para>
	<itemizedlist>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the previous document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the next document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Up</keycap></keycombo> will change to the first document</para>
		</listitem>
		<listitem>
			<para><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Page-Down</keycap></keycombo> will change to the last document</para>
		</listitem>
	</itemizedlist>
	<para>The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>L</keycap></keycombo></shortcut><guimenu>Go</guimenu><guimenuitem>Goto Line</guimenuitem></menuchoice> offers an interesting feature.</para>
	<para>If there is some number in the document, you may select it, then click the <guilabel>From selection</guilabel> label in the Goto line dialog. Bluefish will fill in the <guilabel>Line number</guilabel> field with that number and go directly to it.
	<figure id="figure-goto-line">
				<title id="figure-goto-line-title">Using the Goto Line dialog</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/goto_line.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot showing the Goto Line dialog</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
</para>
	<para>The same feature is available from the <menuchoice><guimenu>Go</guimenu><guimenuitem>Goto Selection</guimenuitem></menuchoice>.</para>
	<variablelist>
	<varlistentry>
          <term><emphasis>Tip</emphasis></term>
          <listitem>
            <para>You may want to check the <guilabel>Keep dialog</guilabel> box to keep the dialog open, when you plan to access several parts of the document by line numbers.</para>
            </listitem>
     </varlistentry>
     </variablelist>
</sect2>

<sect2 id="projects">
<title>Projects</title>
<para>
<figure id="figure-project-menu">
	<title id="figure-project-menu-title">Bluefish Project Menu</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_menu.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the Bluefish 1.0 project menu</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>
The projects are a sort of <emphasis>saved state</emphasis> of Bluefish. Thus, they are a very convenient way to work with files scattered all over your disks or to pick up only the files you are interested in within a huge tree.</para>
<procedure id="creating-new-project"><title>Creating a New Project</title>
	<step>
	<para>Click on the <menuchoice><guimenu>Project</guimenu><guimenuitem>New Project</guimenuitem></menuchoice></para>
	</step>
	<step>
	<para>Fill in the fields in the <guilabel>Create New Project</guilabel> dialog</para>
<para><figure id="figure-project-new-dialog">
	<title id="figure-project-new-dialog-title">Creating a New Project</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_new_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the new project dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
  <para>Using a base directory, or basedir, the file browser in the
  side panel shows only the files within the basedir and its subdirectories.
  If Bluefish is installed with gnome-vfs support the basedir can be remote,
  for example sftp://someserver/somedir or
  smb://user:password@server/someshare/.</para>
 <para>If the webdir is entered
  in the project settings, Bluefish will launch the browser to the appropriate
  URL. If your basedir for example is /var/www/ and your webdir
  http://localhost/ Bluefish will use this information to launch the browser
  to the correct URL. This can be very convenient for testing server side
  scripting languages like PHP, JSP, etc.</para> 
  <para>The template field
  allows a project to have to a user-defined template file. Normally, Bluefish displays an empty editing view for a new file request. 
  However, if a template is defined, Bluefish will use the template file's contents for new files. New files can be requested via the <guilabel>New</guilabel> button on the main tool bar or 
  <menuchoice><shortcut><keycap>Ctrl</keycap><keycap>N</keycap></shortcut><guimenu>File</guimenu><guimenuitem>New</guimenuitem></menuchoice>.</para> 
 </step>
 <step>
 <para>Once the project is created, you need to tell Bluefish where you want to save it. An <guilabel>Enter Bluefish project filename</guilabel> dialog will be displayed. Notice that you can save the project in a location different from the files to which the project points.</para>
 <para><figure id="figure-project-save-dialog">
	<title id="figure-project-save-dialog-title">Entering Bluefish Project Filename</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_save_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the enter bluefish project dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
</step>
</procedure>
<para>To open a project, you have the choice between <menuchoice><guimenu>Project</guimenu><guimenuitem>Open Project...</guimenuitem></menuchoice> or <menuchoice><guimenu>Project</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice>. When you choose the former, a <guilabel>Selecting a Bluefish Project</guilabel> dialog is presented to you.</para>
 <para><figure id="figure-project-open-dialog">
	<title id="figure-project-open-dialog-title">Selecting a Bluefish Project</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_open_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of the select Bluefish project filename dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Likewise, you can save the project with <menuchoice><guimenu>Project</guimenu><guimenuitem>Save</guimenuitem></menuchoice> to save the project file with its current name and location, <menuchoice><guimenu>Project</guimenu><guimenuitem>Save as...</guimenuitem></menuchoice> to save it under a new name/location, or <menuchoice><guimenu>Project</guimenu><guimenuitem>Save &amp; close</guimenuitem></menuchoice> to save and close it.</para>
<para>If any file in the project has been modified, you will be presented with a dialog allowing you to save the modified file, discard the changes, or cancel the whole process.</para>
<para>All files open when the project is saved are automatically opened the next time you open the project.</para>
 <para><figure id="figure-project-open">
	<title id="figure-project-open-title">Opening a Bluefish Project</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/project_open.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot of a Bluefish project</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Notice that the side panel only shows the tree related to the project.</para>
  <para>Also, the recently used files in that project are shown in the
  <menuchoice><guimenu>File</guimenu><guimenuitem>Open recent</guimenuitem></menuchoice> menu item.</para>
  <para>A project also saves some basic Bluefish settings, giving the project its own customized Bluefish setup. Currently,
  the word wrap preference and the state of various tool and menu bars are saved in a project
  file.</para> 
  <para>The project file itself is simply a text file in the
  standard Bluefish format (same format as the config file). This format is
  <literal>key: value</literal>. Here is an example:</para>
  <programlisting>
	name: BluefishDoc
	basedir: ~/bluefishcvs/bluefish-gtk2/doc/
	webdir: http://micmacfr.homeunix.org/bluefish/doc
	template: 
	view_main_toolbar: 1
	view_left_panel: 1
	view_custom_menu: 1
	view_html_toolbar: 1
	word_wrap: 1
</programlisting>
</sect2>

<sect2 id="bookmarks">
<title>Bookmarks</title>
<para>In Bluefish you can add bookmarks to a line in the text, and you can later use the bookmark to quickly jump to this location, or even to open the document referred to by the bookmark at that line.</para>
<para>Bookmarks can be added to the current cursor location by using the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Add Bookmark</guimenuitem></menuchoice> menu item; or by right-clicking in the text, and selecting <guilabel>Add bookmark</guilabel>.</para>
<para>You can delete a bookmark using the <guilabel>Delete bookmark</guilabel> item in the document contextual menu.</para>
<para>Each bookmark in a given document is marked by a blue background in the line number margin.</para>
 <para><figure id="figure-bookmark-marked">
	<title id="figure-bookmark-marked-title">How bookmarks are marked</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_marked.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how bookmarks are marked</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Bookmarks can be temporary or permanent. Permanent bookmarks are stored, and temporary bookmarks are gone after Bluefish is closed.	The default is set in the preferences under <guilabel>Editor</guilabel>.</para>
<para>Bookmarks can be found in the third tab of the side panel, sorted by document and line number.</para>
<para><figure id="figure-bookmark-tab">
	<title id="figure-bookmark-tab-title">Bookmarks in the side panel</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_tab.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing bookmarks in the side panel</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>If you right click a bookmark in the bookmark tab of the side panel, you get a pop up menu with several options.</para>
<para><figure id="figure-bookmark-cm">
	<title id="figure-bookmark-cm-title">Contextual menu on bookmark in the side panel</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_cm.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the contextual menu on bookmark in the side panel</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>The <guilabel>Goto bookmark</guilabel> item allows you to go to the bookmark location in the document, opening it if needed.</para>
<para>The <guilabel>Edit</guilabel> item allows you to change a bookmark from temporary to permanent or the other way around, to name it, and to give it a short description.</para>
<para>
<figure id="figure-bookmark-edit">
	<title id="figure-bookmark-edit-title">Editing a bookmark</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_edit.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the edition of a bookmark</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Note that after naming a bookmark, the default name - first characters of the bookmarked line - is displayed after the new name.</para>
<para>
<figure id="figure-bookmark-name">
	<title id="figure-bookmark-name-title">A named bookmark</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_name.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing a named bookmark</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para>Via this contextual menu, you may also delete a bookmark, delete all bookmarks in the active document, or delete all bookmarks stored in the bookmark tab of the side panel. The latter ones are also available when you right click the name of a document in this tab.</para>
<para>
<figure id="figure-bookmark-document-cm">
	<title id="figure-bookmark-document-cm-title">The contextual menu on a document in the bookmark tab</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_document_cm.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the contextual menu on a document in the bookmark tab</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
<para id="generate-bookmark">To add many bookmarks at once, use the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> dialog. Check the <guilabel>Bookmark result</guilabel> option, and all search results will be added to your bookmarks. For example, the XML for this manual has sections, each identified by a header like <literal>&lt;sect1 id="bluefish-ch-4-sect-6"&gt;</literal>. A way to automatically get a bookmark to every section is to search for the following regular expression pattern: <literal>&lt;sect[0-9]+ id="[^"]+"&gt;</literal> and bookmark all results.</para>
<para>Here is an example which bookmarks all functions in an Objective-C file:</para>
<para>
<figure id="figure-bookmark-find-cm">
	<title id="figure-bookmark-find-title">Bookmarking via the Find menu</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/bookmark_find.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing how to bookmark via the Find menu</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
</figure>
</para>
</sect2>

<sect2 id="find-replace">
<title>Find and Replace</title>
	<para>
	The <guimenu>Edit</guimenu> menu features several options for Find and Replace. The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find</guimenuitem></menuchoice> and <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>H</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Replace...</guimenuitem></menuchoice> menu items will simply start their corresponding dialogs described in <xref linkend="basic-find-replace" />.</para>
	<para>
	The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Find again</guimenuitem></menuchoice> menu item will repeat the last used search. It will 
	continue the search after the position where the previous search was stopped. If the 
	end of file is reached, it will restart at the beginning or continue with the next file, 
	depending on the search options used.
	</para>
	<para>SCREENSHOT BY ????</para>
	<para>
	The <menuchoice><guimenu>Edit</guimenu><guimenuitem>Find from selection</guimenuitem></menuchoice> menu item will search for the currently selected text. If you select
	for example the name of a function, in bluefish, or in any other program, and you choose
	find from selection Bluefish will start a new search for this selected string.
	</para>

<sect3 id="find-replace-regex">
<title>Find and Replace Using Regular Expressions</title>
  <para>With find and replace you can do incredibly powerful searches.
  We will start with a simple example. In some HTML tables, we have
  several table data tags where we actually want table header tags. Table data
  is &lt;td&gt;&lt;/td&gt; and we want &lt;th&gt;&lt;/th&gt;. In our example, the 
  final results of the 2004 Tour de France will be the data for the table, and the 
  first row of the table contains the label for each column. We want to change just  
  the first row, so select that text with your cursor (as seen below).
  </para> 
  <para>
  <figure id="figure-find-replace-regex-before">
	<title id="figure-find-replace-example-before-title">Find and Replace Example Before Replace</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/find_replace_regex_before.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing &lt;td&gt; tags before replacement with &lt;th&gt; tags</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
  </figure>
  </para>
  <para>
  We <emphasis>could</emphasis> replace all &lt;td&gt; tags with &lt;th&gt; and then replace all &lt;/td&gt; tags with &lt;/th&gt;. But, this uses two separate searches.
  </para> 
  <para>However, we could perform the same task using just one search by taking advantage of regular expressions: find
  (&lt;|&lt;/)td&gt; and replace with \0th&gt;</para>
  <para>
  <figure id="figure-find-replace-regex-dialog">
	<title id="figure-find-replace-regex-dialog-title">Find and Replace Dialog</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/find_replace_regex_dialog.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing the Find &amp; Replace dialog using regular expressions</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
  </figure>
  </para>
  <para>Breaking down the find expression, we first have a subpattern defined within the parenthesis. The vertical line 
  character, &verbar;, is treated as a logical or. So, the (&lt;&verbar;&lt;/) means to match either "&lt;" or "&lt;/". For each match that 
  is found, this choice is stored and is accessible in the replace field by the reference "\0". The "\0" refers to 
  the first subpattern match. If we had two parentheses, "\1" would refer to a second subpattern. 
  </para>
  <para>
  Notice in the replace dialog we have chosen <guilabel>Beginning of selection till end of selection</guilabel>. The results are 
  shown below.
  </para>
  <para>
  <figure id="figure-find-replace-regex-after">
	<title id="figure-find-replace-regex-after-title">Find and Replace Example After Replace</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/find_replace_regex_after.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing highlighted tags after replacement</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
  </figure>
  </para>
  <para>For more information about
  regular expressions you might want to read man 7 regex, or read any of the
  great Internet sites about regular expressions. As you become more familiar with regular expressions, you will
  realize that they make Bluefish a very powerful editor.
  </para>
  <para>Suppose you also want to match a table
  data tag that does have some attributes like &lt;td class="myclass"&gt;, and
  you want to keep the option while converting to table header. The following
  pattern will do this: find (&lt;|&lt;/)td([^&gt;]*)&gt; and replace with
  \0th\1&gt; </para> 
<para>If you have any search and replace patterns you
  use often, you can also add them to the Custom Menu. Check <xref linkend="custom-menu" /> 
  for more information. </para>
  <para>
  In the <guilabel>find</guilabel> and the <guilabel>replace</guilabel> dialog it is not possible to insert the keys <keycap>Enter</keycap> or <keycap>Tab</keycap>. We use escaped characters to represent these characters. A new line character, produced by pressing the <keycap>Enter</keycap> key, is represented as <literal>\n</literal>. Use <literal>\t</literal> for a tab. To get an actual backslash, just escape the backslash, <literal>\\</literal>. There are many other escape characters used in regular expressions
  <note><para>To enable the escaped characters in your searches check the
  <guilabel>Patterns contain backslash sequences (\n, \t)</guilabel> option.</para>
  </note>
  </para>
  </sect3>
  <sect3 id="find-bookmark-results">
<title>Bookmarking Search Results from the Find Dialog</title>
  <para>
  Another useful option in the <guilabel>Find</guilabel> dialog is the <guilabel>Bookmark results</guilabel> option. For example, in a PHP document you could search for the word <emphasis>function</emphasis>, and add a bookmark to every function. This results in a list of bookmarks that are all named 'function'.
  </para>
  <para>
    <figure id="figure-find-bookmark-results-good">
	<title id="figure-find-bookmark-results-good-title">Find and Bookmark Results</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/find_bookmark_results_good.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing bookmarked results from the find dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
  </figure>
  </para>
  <para>
  However, we can once again make use of regular expressions. The expression 'function\s+\w+' will result in all functions and their name. Much more useful!
  </para>
  <para>
  <figure id="figure-find-dialog-bookmark-results">
	<title id="figure-find-dialog-bookmark-results-title">Find and Bookmark Results Dialog</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/find_dialog_bookmark_results.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing another use of regular expressions in the find dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
  </figure>
  </para>
    <para>
  <figure id="figure-find-bookmark-results-better">
	<title id="figure-find-bookmark-results-better-title">Find Better Results to Bookmark</title>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata fileref="figures/find_bookmark_results_better.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>A screen shot showing more useful bookmarked results from the find dialog</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
  </figure>
  </para>
  <para>Check <xref linkend="bookmarks" /> for more information on bookmarking in Bluefish.
  </para>
</sect3>

</sect2>

</sect1>

<sect1 id="more-then-text-editor">
<title>More than a Text Editor</title>

<sect2 id="indenting">
<title>Indenting</title>
<para>The <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>+</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Shift Right</guimenuitem></menuchoice> and <guimenuitem>Shift Right</guimenuitem> and <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>,</keycap></keycombo></shortcut><guimenu>Edit</guimenu><guimenuitem>Shift Right</guimenuitem></menuchoice>
<guimenuitem>Shift Left</guimenuitem> menu items, or the corresponding buttons in the tool bar, will indent or unindent the currently selected text. It will normally use tabs for indenting, or spaces if you have <guilabel>Use spaces to indent, not tabs</guilabel> selected in the Editor preferences panel. The number of spaces used is the same as the <guilabel>Tab width</guilabel> option in the same preferences panel.</para>
<para>Here's an extract of Dante's work indented with the <guilabel>Shift Right</guilabel> button in the main tool bar:
<figure id="figure-indenting_right">
<title id="figure-indenting_right-title">Indenting part of a text</title>
<screenshot><mediaobject>
<imageobject>
<imagedata fileref="figures/indenting_right.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a text indented with the shift right button</phrase>
</textobject>
</mediaobject></screenshot>
</figure>
</para>
</sect2>

<sect2 id="auto-tag-closing">
<title>Auto tag closing</title>
<para>By default, Bluefish will automatically produce closing tags for HTML and XML documents. For example, if you type <literal>&lt;p&gt;</literal> within an HTML document, bluefish will produce <literal>&lt;/p&gt;</literal>. So, as soon as you finish typing a non-empty HTML tag, meaning the tag is supposed to have a closing tag, Bluefish will help you out and close the tag automatically. This feature can be turned off by unchecking the <menuchoice><shortcut><keycombo><keycap>Ctrl</keycap><keycap>T</keycap></keycombo></shortcut><guimenu>Document</guimenu><guimenuitem>Auto Close HTML Tags</guimenuitem></menuchoice> menu option.</para>
<para>Bluefish has two modes for tag closing, an XML mode and an HTML mode. In XML mode, Bluefish will add a closing tag to any tag that is not closed itself with /&gt;. In HTML mode, Bluefish excludes all known tags that do not need a closing tag, such as &lt;br&gt; and &lt;img&gt;.</para>
<para>Bluefish will choose the mode based on the file type of the document. In the filetype preferences panel, the default mode for each file type can be set. See <xref linkend="changing-filetypes"/> for more info.</para>
</sect2>

<sect2 id="spell-checker">
<title>Spell checker</title>
<figure id="figure-spell-checker">
				<title id="figure-spell-checker-title">Bluefish Spell Checker</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/spell_checker.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 1.0 spell checker</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
	<para>Bluefish uses <ulink url="http://aspell.sourceforge.net/">aspell</ulink> for spell checking. If the aspell libraries are not installed on your system, then the spell checking feature will not be available. At the aspell web site you can also download dictionaries for many different languages.</para>
<para>To launch the spell checker, select <menuchoice><guimenu>Document</guimenu><guimenuitem>Check Spelling...</guimenuitem></menuchoice>. The spell checker will launch in a separate window, which you can keep open as you edit files.</para>
<para>You have the option to check a whole document or just a selection, to use a personal or a session dictionary, and to choose the language depending on the installed dictionaries.</para>
<para> Click on <guilabel>Spell Check</guilabel> to start spell checking the current document. As you run across misspelled words you want included in the dictionary, click on the <guilabel>Add</guilabel> button in the spell checker window. This will add words to a personal dictionary.</para>
<para>You may want to set a default dictionary by first choosing the language in the <guilabel>Language</guilabel> popup menu, then clicking on <guilabel>Set default</guilabel>.</para>
<para>Key words for different languages can be ignored using filters. Currently, the only filter is for HTML. If you want to help write more filters, join the <link linkend="bluefish-contact">mailing list</link>.</para>
</sect2>

<sect2 id="function-reference">
<title>Function reference</title>
<para>
The function reference browser is a place where reference information about a 
certain language can be found. Currently Bluefish comes with a PHP reference, a 
CSS 2.0 reference, an HTML reference and a Python reference. The functions are 
grouped depending on the language, by type, module, object, etc.
</para>
<para>
The function reference browser can show an info window on the bottom. Check the <guilabel>Show info window</guilabel> check box. In this window some information about the currently selected item can be shown. What exactly is shown can be chosen in the right-click context menu.
</para>
<para>Every item in the function reference can simply insert text, show an info window, or show a dialog that can be used to insert text. In the right-click context menu each of these functions is accessible.</para>
<para>The contextual menu is also accessible on a group of functions and at the top level of a reference.
<figure id="figure-browser-reference-right-click">
<title id="figure-browser-reference-right-click-title">The reference browser contextual menu</title>
<screenshot>
<mediaobject>
<imageobject>
	<imagedata fileref="figures/browser_reference_right_click.png" format="PNG"/>
</imageobject>
<textobject>
	<phrase>A screen shot of the reference browser contextual menu</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure></para>
<para>The <guilabel>Options</guilabel> menu accessible via the contextual menu offers tree actions:
<figure id="figure-browser-reference-options">
<title id="figure-browser-reference-options-title">The reference browser options menu</title>
<screenshot>
<mediaobject>
<imageobject>
	<imagedata fileref="figures/browser_reference_options.png" format="PNG"/>
</imageobject>
<textobject>
	<phrase>A screen shot of the reference browser options menu</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure></para>
<itemizedlist>
<listitem>
<para><guilabel>Rescan reference files</guilabel> in case you have customized one of them, so that the new items be available.</para>
</listitem>
<listitem>
<para><guilabel>Left doubleclick action</guilabel>, which can be:</para>
<itemizedlist>
<listitem>
<para><guilabel>Insert</guilabel> to insert the function in the document for latter parametrizing if needed</para>
</listitem>
<listitem>
<para><guilabel>Dialog</guilabel> to insert the function in the document while filling in the parameters in a dialog window
<figure id="figure-browser-reference-dialog">
<title id="figure-browser-reference-dialog-title">A function reference dialog window</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a function reference dialog window</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure></para>
</listitem>
<listitem>
<para><guilabel>Info</guilabel> to display a window with all available info about the function:
<figure id="figure-browser-reference-info-window">
<title id="figure-browser-reference-info-window-title">Info available for a function</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/browser_reference_info_window.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of all info available for a function</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure></para>
</listitem>
</itemizedlist> 
</listitem>
<listitem>
<para><guilabel>Info Type</guilabel>; this is where you can customize what appears in the info window. It can be:</para>
<itemizedlist>
<listitem>
<para>the function <guilabel>Description</guilabel> (this is the default)</para>
</listitem>
<listitem>
<para>the <guilabel>Attributes/Parameters</guilabel> of the function</para>
</listitem>
<listitem>
<para>some <guilabel>Notes</guilabel> about the function</para>
</listitem>
</itemizedlist> 
</listitem>
</itemizedlist>
</sect2>

<sect2 id="HTML">
<title>HTML</title>
<para>HTML is obviously the most supported language in Bluefish. There is a special HTML tool bar with many dialogs, and two menus to work with tags:</para>
<itemizedlist>
<listitem>
<para>the <guilabel>Tags</guilabel> menu:
<figure id="figure-html-tags-menu">
<title id="figure-html-tags-menu-title">The HTML Tags menu</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/html_tags_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML tags menu</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
<listitem>
<para>the <guilabel>Dialogs</guilabel> menu:
<figure id="figure-html-dialogs-menu">
<title id="figure-html-dialogs-menu-title">The HTML Dialogs menu</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/html_dialogs_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the HTML dialogs menu</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
</itemizedlist>
<para>The preferences have several settings on HTML style under <guilabel>HTML</guilabel>.</para> 
<para>The HTML tool bar has two types of buttons. You can recognise each type by the tool tip if you move the mouse over the button:</para>
<itemizedlist>
<listitem>
<para>First there are buttons that will open a dialog for some HTML tag. These buttons have a tool tip that ends with three dots. For example the anchor &lt;a&gt; dialog has the tool tip <guilabel>Anchor...</guilabel>
<figure id="figure-html-tooltip-dots">
<title id="figure-html-tooltip-dot-title">An HTML button with a three-dotted tool tip</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/html_tooltip_dots.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of an HTML three-dotted tool tip</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
<listitem>
<para>Second, there are buttons that will directly insert text, these buttons do not have the dots in the tool tip.
<figure id="figure-html-tooltip-simple">
<title id="figure-html-tooltip-simple-title">A simple HTML tool tip button</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/html_tooltip_simple.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a simple HTML tool tip</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
</itemizedlist>  
<para>If you want to add the HTML tag around some block of text, you can select the block of text, and then use the HTML tool bar or the Tags or Dialogs menu to insert some tags. The tag open code will be inserted before the selected block, the tag close will be inserted after the selected block.</para>
<para>An existing tag can be edited by right-clicking the tag, and select <guilabel>Edit tag</guilabel> in the context menu. You can also place the cursor in the tag and use <menuchoice><shortcut><keycap>F3</keycap></shortcut><guimenu>Dialogs</guimenu><guimenuitem>Edit tag under cursor...</guimenuitem></menuchoice>. Not all tags, however, have a dialog, so this is not always possible. Colors in the style #RRGGBB can also be edited from the right-click context menu.</para>
<para>In the reference browser on the left panel there is an HTML reference available. All possible attributes and valid values can be found in this reference. See <xref linkend="function-reference"/> for more info.</para> 
<para>There are several special search and replace actions in the menu <menuchoice><guimenu>Edit</guimenu><guisubmenu>Replace special</guisubmenu></menuchoice>. These can be used to convert special characters (like &lt; and &amp;), or ISO characters to their HTML entities, as well as to change the letters case.
<figure id="figure-replace-special-menu">
<title id="figure-replace-special-menu-title">The Replace special menu</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/replace_special_menu.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the Replace special menu</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>In all cases, when you want to replace some part of the text, you should first select the part to replace, then use the appropiated menu item.</para>

<sect3 id="thumbnails">
<title>Thumbnail generation</title>
<para>Bluefish can automatically generate thumbnails for images. A thumbnail is a small image, with a link to the larger image. Bluefish will create the small image based on your settings, and insert a &lt;img&gt; tag in the file, and a &lt;a&gt; tag linking the original. The thumbnails are created in the same directory as the original sources.</para>
<para>The formats used for thumbnails may be png or jpg format. By default, the format used for thumbnails is png. You can change it in the <guilabel>Images</guilabel> panel of Preferences. For jpg images, the thumbnail extension is jpeg.</para>
<para>There are actually two thumbnail dialogs in Bluefish:</para>
<itemizedlist>
<listitem>
<para>an Insert thumbnail dialog,accessible from the <menuchoice><shortcut><keycombo><keycap>Shift</keycap><keycap>Alt</keycap><keycap>N</keycap></keycombo></shortcut><guimenu>Dialogs</guimenu><guisubmenu>General</guisubmenu><guimenuitem>Insert Thumbnail...</guimenuitem></menuchoice> or from the <guilabel>Standard bar</guilabel> of the HTML toolbar.
<figure id="figure-thumbnail-simple-icon">
<title id="figure-thumbnail-simple-icon-title">The Insert thumbnail icon</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_simple_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the insert thumbnail icon</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
<listitem>
<para>a Multi thumbnail dialog, only accessible from the <guilabel>Standard bar</guilabel> of the HTML toolbar.<figure id="figure-thumbnail-multi-icon">
<title id="figure-thumbnail-multi-icon-title">The Multi thumbnail icon</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_multi_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the multi thumbnail icon</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
</itemizedlist>
<para>The Insert thumbnail dialog is very straightforward. You select the image, choose the scaling (moving the cursor under the image, the result appears immediately in the preview frame), and some attributes, and press OK. Bluefish will create the thumbnail with extension _thumbnail.png or _thumbnail.jpeg (depending of the settings for images in the preferences).
<figure id="figure-thumbnail-simple-dialog">
<title id="figure-thumbnail-simple-dialog-title">The Insert thumbnail dialog</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_simple_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the insert thumbnail dialog</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<variablelist>
<varlistentry>
<term><emphasis>Tip</emphasis></term>
<listitem>
<para>If the source image is not accessible, change <guilabel>webimage</guilabel> to <guilabel>image</guilabel> in the <guilabel>Select File</guilabel> window loaded after clicking on <guilabel>browse</guilabel> for choosing an image. This way you can choose whichever format you want for the original sources. Another way to do it is to change the definition of webimage (see <xref linkend="changing-filetypes"/>).</para>
<para>If that does not solve the problem, it is likely that the type of images you want to load is not defined yet in preferences. In this case, change the definition of image as explained in <xref linkend="changing-filetypes"/>.</para>
<para>As last resource, if you don't want to change the generic file types, you may choose <guilabel>All files</guilabel> in the pop up menu at the bottom of the <guilabel>Select File</guilabel> window.</para>
</listitem>
</varlistentry>
</variablelist>
<para>The code generated for a png image and a png thumbnail looks like this:
<programlisting><![CDATA[
<a href="/Users/michga/Desktop/343-4351_IMG_2.png">
<img src="/Users/michga/Desktop/343-4351_IMG_2_thumbnail.png" 
width="89" height="134" border="0" name="Gamboling" 
alt="Gamboling in the meadow" align="middle"></a>
]]></programlisting></para>
<para>and for a jpg image and jpg thumbnail:
<programlisting><![CDATA[
<a href="/Users/michga/Desktop/343-4351_IMG_2.JPG">
<img src="/Users/michga/Desktop/343-4351_IMG_2_thumbnail.jpeg" 
width="89" height="134" border="0" name="Gamboling" 
alt="Gamboling in the meadow" align="middle"></a>
]]></programlisting></para>
<variablelist>
<varlistentry>
<term><emphasis>Note</emphasis></term>
<listitem>
<para>You can perfectly mix jpg images with png thumbnails or the other way around.</para>
<para>If the html file exists beforehand, the paths to image and thumbnail are inserted relative to the location of the html file. On the contrary, if the html file does not exist beforehand, the full path to image and thumbnail is inserted in the code.</para>
</listitem>
</varlistentry>
</variablelist>
<para>In the multi thumbnail dialog, you first choose the scaling method, then you set the corresponding width and/or height parameters, finally you may want to adjust the HTML code to be inserted for each image.</para>
<para>Scaling can be based on a fixed ratio, based on a fixed width, based 
on a fixed height, or based on a fixed width and fixed height (this last 
option does not keep the original aspect ratio!).</para>
<para>In the HTML code for each image, you can use several placeholders, such as:</para>
<itemizedlist spacing="compact">
<listitem>
<para>%r for the original filename</para>
</listitem>
<listitem>
<para>%t for the thumbnail filename</para>
</listitem>
<listitem>
<para>%w for the original width</para>
</listitem>
<listitem>
<para>%h for the original height</para>
</listitem>
<listitem>
<para>%x for the thumbnail width</para>
</listitem>
<listitem>
<para>%y for the thumbnail height</para>
</listitem>
<listitem>
<para>%b for the original file size (in bytes)</para>
</listitem>
</itemizedlist>
<para>The default string is:
<programlisting><![CDATA[
<a href="%r"><img src="%t" width="%x" height="%y" border="0"></a>
]]></programlisting></para>
<para>After you have set up the scaling method and parameters, as well as the HTML code, you can select multiple images, and Bluefish will create the thumbnails and insert the code.</para>
<para>Here is an example of two thumbnails created with a non nul border width and middle-aligned, with a fixed height and width, disregarding the aspect ration.</para>
<para>The <guilabel>Multi thumbnail</guilabel> window is the following:
<figure id="figure-thumbnail_multi_dialog">
<title id="figure-thumbnail-multi-dialog-title">The Multi thumbnail dialog</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/thumbnail_multi_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the multi thumbnail dialog</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>And the generated code is:
<programlisting><![CDATA[
<a href="/Users/michga/Desktop/tot/343-4351_IMG_2.png">
<img src="tot/343-4351_IMG_2_thumbnail.png" width="50" 
height="50" border="5" align="middle"></a>
<a href="/Users/michga/Desktop/tot/343-4352_IMG_2.png">
<img src="tot/343-4352_IMG_2_thumbnail.png" width="50"
height="50" border="5" align="middle"></a>
]]></programlisting></para>
<variablelist>
<varlistentry>
<term><emphasis>Note</emphasis></term>
<listitem>
<para>The path to original sources are always full paths. The paths to thumbnails are relative to the html file path if the html file exists beforehand, while they are inserted as full paths when the html file does not exist beforehand.</para>
</listitem>
</varlistentry>
</variablelist>
<para>Here's a full procedure to generate quickly a photos album with thumbnails. This example is purposedly made with deprecated tags, so that you have an idea of what can be made with the variables. Feel free to adjust it when using CSS style sheets.</para>
<procedure id="photo-album"><title>Generating a photos album with multi thumbnails</title>
<step>
<para>Put the photos in a folder on its own</para>
</step>
<step>
<para>Open a new file in bluefish, click on the <guilabel>Multi thumbnail...</guilabel> icon in the <guilabel>Standard bar</guilabel> tab of the html tool bar.</para>
</step>
<step>
<para>Enter the scaling percentage in the <guilabel>Scaling (%)</guilabel> field</para>
</step>
<step>
<para>Change the html code as follows:
<programlisting><![CDATA[
<tr><td><a href="%r">
<img src="%t" 
width="%x" height="%y" border="0"></a>
</td>
</tr>
<tr><td>Original: %w x %h</td></tr>
]]></programlisting>
and click <guilabel>OK</guilabel>.</para>
</step>
<step>
<para>Choose the photos folder in the <guilabel>Select files for thumbnail creation</guilabel> window, click <keycombo><keycap>Ctrl</keycap><keycap>A</keycap></keycombo> to select all files, then click <guilabel>OK</guilabel>. The code generated by bluefish will look like this:</para>
<programlisting><![CDATA[
<tr><td><a href="/Users/michga/Desktop/photos/343-4344_IMG.JPG">
<img src="/Users/michga/Desktop/photos/343-4344_IMG_thumbnail.png" 
width="80" height="53" border="0"></a>
</td>
</tr>
<tr><td>Original: 1600 x 1065</td></tr>
<tr><td><a href="/Users/michga/Desktop/photos/343-4347_IMG.JPG">
<img src="/Users/michga/Desktop/photos/343-4347_IMG_thumbnail.png" 
width="80" height="53" border="0"></a>
</td>
</tr>
<tr><td>Original: 1600 x 1065</td></tr>
]]></programlisting>
</step>
<step>
<para>Use <keycombo><keycap>Ctrl</keycap><keycap>A</keycap></keycombo> to select the file's contents and click on the <guilabel>Tab</guilabel> icon located in the <guilabel>Tables</guilabel> tab of the html tool bar to embed the code into table tags.
<figure id="figure-table-icon">
<title id="figure-table-icon-title">The Table icon in the html tool bar</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/table_icon.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the table icon in the html tool bar</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</step>
<step>
<para>Save the file where you want.</para>
</step>
</procedure>
<para>If you want to add the file names and the file size in bytes, use this code:
<programlisting><![CDATA[
<tr><td><a href="%r">
<img src="%t" 
width="%x" height="%y" border="0"></a>
</td>
</tr>
<tr><td>%r:  %w x %h (%b bytes)</td></tr>
]]></programlisting>
</para>
</sect3>

</sect2>

<sect2 id="quickbar">
<title>Customising the Quick bar</title>
<para>The <guilabel>Quick bar</guilabel> is a user defined tool bar. All HTML tool bar buttons can be added to the Quick bar by simply right-clicking them and selecting <guilabel>Add to quickbar</guilabel>.
<figure id="figure-quickbar-add">
<title id="figure-quickbar-add-title">Adding an element to the Quick bar</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add an element to the Quick bar</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>And automagically you will see the element in the Quick bar:
<figure id="figure-quickbar-add-result">
<title id="figure-quickbar-add-result-title">The added element in the Quick bar</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing the added element in the Quick bar</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>Note that you cannot add a pop up menu. Thus, if the item you want to add is inside a pop up menu (as is the code tag located in the <guilabel>Context formatting</guilabel> pop up menu of the <guilabel>Fonts</guilabel> tool bar), you have to first click on the pop up menu to display its contents, then to right click on the desired element to insert it in the <guilabel>Quick bar</guilabel>.
<figure id="figure-quickbar-add-popup">
<title id="figure-quickbar-add-popup-title">Adding a pop up menu element to the Quick bar</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_add_popup.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to add a pop up element to the Quick bar</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>If you want to remove items from the <guilabel>Quick bar</guilabel>, right-click them and select <guilabel>Remove from Quick bar</guilabel>.
<figure id="figure-quickbar-remove">
<title id="figure-quickbar-remove-title">Removing an element from the Quick bar</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_remove.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to remove an element from the Quick bar</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>You can also change the location of an element in the Quick bar. To do so, right-click the element and select <guilabel>Shift left</guilabel> or <guilabel>Shift Right</guilabel> as desired. The element will be moved to the left or to the right of its neighborough. Notice that this is not a drag and drop action; you may have to repeat the process if you want to move the element farther.
<figure id="figure-quickbar-move">
<title id="figure-quickbar-move-title">Moving an element within the Quick bar</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/quickbar_move.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing how to move an element within the Quick bar</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</sect2>

<sect2 id="custom-menu">
<title>Custom menu</title>
<para>To customize items in the <guilabel>Custom menu</guilabel> tool bar, you will use the <guilabel>Custom menu</guilabel> element:
<figure id="figure-custom-menu-access">
<title id="figure-custom-menu-access-title">Accessing the custom menu</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_access.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the default custom menu's access</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>The <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> leads to the <guilabel>Custom Menu Editor</guilabel>. The <guilabel>Load new</guilabel> item allows you to load a new menu in case you have directly changed the <filename>custom_menu</filename> file located in the <filename>.bluefish</filename> directory within your HOME directory, while <guilabel>Reset</guilabel> item allows you to return to the default custom menu under the same circumstances.</para>
<para>The <filename>custom_menu</filename> file is created upon install Bluefish and corresponds to some default entries, the ones you can see in the <guilabel>Custom menu</guilabel> tool bar. These will give you an idea what can be done with the custom menu.</para>
<para>The custom menu operates <emphasis>only</emphasis> on elements of the <guilabel>Custom menu</guilabel> tool bar, and allows you to:</para>
<itemizedlist>
<listitem>
<para>add "often used" items to an existing menu</para>
</listitem>
<listitem>
<para>search and replace patterns to the <guilabel>Replace</guilabel> menu</para>
</listitem>
<listitem>
<para>create new menus</para>
</listitem></itemizedlist>
<para>The <guilabel>Custom Menu Editor</guilabel> is the place where you make all changes to the custom menu. The location for entries in the custom menu is defined by their menu path in the <guilabel>Custom Menu Editor</guilabel>:
<figure id="figure-custom-menu-editor">
<title id="figure-custom-menu-editor-title">The Custom Menu Editor</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_editor.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom menu editor</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>It has four parts:</para>
<itemizedlist>
<listitem>
<para>The top one with all action buttons:</para>
<itemizedlist>
<listitem>
<para><guilabel>Add</guilabel> which adds new menu entries, once all necessary fields have been filled in</para>
</listitem>
<listitem>
<para><guilabel>Apply</guilabel> which applies changes to an existing menu entry, once it has been edited</para>
</listitem>
<listitem>
<para><guilabel>Delete</guilabel> which deletes the menu entry currently selected in the <guilabel>Menu path</guilabel> list</para>
</listitem>
<listitem>
<para><guilabel>Close</guilabel> which discards changes</para>
</listitem>
<listitem>
<para><guilabel>Save</guilabel> which saves the changes and exit the editor</para>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<para>The <guilabel>Menu Path</guilabel> field below the buttons, to enter either an existing or a new menu path</para>
</listitem>
<listitem>
<para>The <guilabel>Menu path</guilabel> list on the left side, which lists existing menu paths. A menu path looks like <emphasis>/Main menu/submenu/item</emphasis> or <emphasis>/Main menu/item</emphasis>. Here's an extract of the default custom menu paths:
<figure id="figure-custom-menu-default-path">
<title id="figure-custom-menu-default-path-title">Extract of the default custom menu path</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_default_path.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot showing an extract of the default custom menu path</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
<listitem>
<para>A custom part on the right side, whose contents changes depending of the type of menu. There are two types of items in the <guilabel>Custom Menu Editor</guilabel>:</para>
<itemizedlist>
<listitem>
<para>the Custom dialog, which will insert a string, optionally based on values asked in a dialog</para>
</listitem>
<listitem>
<para>the Custom Find and Replace, which will run a replace, also optionally based on values asked in a dialog. Here's how the <guilabel>Custom Replace</guilabel> dialog looks like:
<figure id="figure-custom-menu-replace-dialog">
<title id="figure-custom-menu-replace-dialog-title">The Custom Replace Dialog</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_replace_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the custom replace dialog</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<para>The most simple custom dialog item has a menupath, for example <emphasis>/MySite/author</emphasis>, and a Formatstring before, for example <emphasis>written by Olivier</emphasis>. If you add this item, you can add this string by selecting the menu item.</para>
<procedure id="custom-menu-dialog">
<title>Adding a custom menu based on custom dialog</title>
<step>
<para>Choose <menuchoice><guimenu>Custom menu</guimenu><guimenuitem>Edit custom menu...</guimenuitem></menuchoice> in the custom menu tool bar.</para>
</step>
<step>
<para>Enter <userinput>/MySite/author</userinput> in the <guilabel>Menu Path</guilabel> field of the <guilabel>Custom Menu editor</guilabel>.</para>
</step>
<step>
<para>Enter <userinput>written by Olivier</userinput> in the <guilabel>Formatstring Before</guilabel> field located on the right.</para>
</step>
<step>
<para>Click on the <guilabel>Add</guilabel> button at the top.</para>
<para>Notice that upon adding the new entry, it is listed at the bottom of the <guilabel>Menu path</guilabel> list:
<figure id="figure-custom-menu-add-basic">
<title id="figure-custom-menu-add-basic-title">A new custom entry in the Menu path list</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_add_basic.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a new custom entry in the Menu path list</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</step>
<step>
<para>Click on the <guilabel>Save</guilabel> button. This will add the menu to the Custom menu tool bar:
<figure id="figure-custom-menu-basic-result">
<title id="figure-custom-menu-basic-result-title">A new menu in the custom menu tool bar</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_basic_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a new menu in the custom menu tool bar</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
</step>
</procedure>
<para>Note that the new menu is placed at the right end of the custom menu tool bar. When closing Bluefish and relaunching it, it will be placed in alphabetical order, except that the <guilabel>Replace</guilabel> menu will always be at the far right side.</para>
<para>In another example, you have a string you often need to set before and after some block of text, for example &lt;div class=&quot;MyClass&quot;&gt;YourBlockOfText&lt;/div&gt;. To do it:</para>
<orderedlist>
<listitem>
<para>Open the <guilabel>Custom Menu Editor</guilabel></para>
</listitem>
<listitem>
<para>Enter <userinput>/MySite/div with class</userinput> in the <guilabel>Menu Path</guilabel> field</para>
</listitem>
<listitem>
<para>Enter &lt;div class=&quot;MyClass&quot;&gt; in the <guilabel>Formatstring Before</guilabel> field</para>
</listitem>
<listitem>
<para>Enter &lt;/div&gt; in the <guilabel>Formatstring After</guilabel> field</para>
</listitem>
<listitem>
<para>Click on <guilabel>Add</guilabel>, then on Save. The item will appear in the menu.</para>
</listitem>
</orderedlist>
<para>If you now select some text:
<figure id="figure-custom-menu-div-before">
<title id="figure-custom-menu-div-before-title">A block of selected text before activating the menu</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_before.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a block of selected text before activating the menu</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>And activate this menu item, you will see that the first bit of text is added before the selection, and the second bit is added after the selection:
<figure id="figure-custom-menu-div-after">
<title id="figure-custom-menu-div-after-title">A block of text after activating the menu</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_after.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of a block of text after activating the menu</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>Suppose you want to improve this last example. You have both MyClass1 and MyClass2 and want to be able to choose the desired class when activating the menu. Here's how to do it:</para>
<orderedlist>
<listitem>
<para>Open the <guilabel>Custom Menu Editor</guilabel></para>
</listitem>
<listitem>
<para>Browse the <guilabel>Menu path</guilabel> list to retrieve the /MySite/class with div entry and click on it to make appear its components in the <guilabel>Menu Path</guilabel> and <guilabel>Custom Dialog</guilabel> fields</para>
</listitem>
<listitem>
<para>Click on the top arrow of the <guilabel>Number of Variables</guilabel> popup menu to get 1 in the field. As you see a <guilabel>Variables</guilabel> entry appears where you can enter the name for variable %0. As name we enter <emphasis>MyClass number</emphasis></para>
</listitem>
<listitem>
<para>Now change the <guilabel>FormatString Before</guilabel> field to take this new variable into account, as following:  &lt;div class=&quot;MyClass%0&quot;&gt;</para>
</listitem>
<listitem>
<para>Click on <guilabel>Apply</guilabel> so that your changes will be taken in account, and click on Save to update the menu.</para>
</listitem>
</orderedlist> 
<para>If you now activate this menu after having selected a block of text, you will be presented with a new dialog asking you for the value of <emphasis>MyClass number</emphasis>:
<figure id="figure-custom-menu-div-dialog">
<title id="figure-custom-menu-div-dialog-title">The new div with class dialog</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_dialog.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the new div with class dialog</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<para>After entering the desired value, the same process as before will occur, using the value you provided. Here we have entered 1 as value:
<figure id="figure-custom-menu-div-dialog-result">
<title id="figure-custom-menu-div-dialog-resul-ttitle">The block of text after entering the value</title>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="figures/custom_menu_div_dialog_result.png" format="PNG"/>
</imageobject>
<textobject>
<phrase>A screen shot of the block of text after entering the value</phrase>
</textobject>
</mediaobject>
</screenshot>
</figure>
</para>
<variablelist>
<varlistentry>
<term><emphasis>Tip</emphasis></term>
<listitem>
<para>you can use the <keycap>Return</keycap> and <keycap>Tab</keycap> keys to format the output.</para>
<para>Any variable can be used any times you want in the dialog.</para>
</listitem>
</varlistentry>
</variablelist>
	<para>
	Find and replace items are no different. The dialog has some more options, each of these
	options correspond to the regular replace dialog. Again you can use variables like %0, %1 etc. 
	to make a certain menu item more flexible.
	</para>
	<para>SCREENSHOT BY ????</para>
</sect2>

<sect2 id="external-programs-filters">
<title>External programs, filters</title>
		<para>You can integrate external commands such as browsers, or text filters. 
		If you want to use for
		example a sed command as a filter, you can add it like this to the
		external commands and filters (in the preferences dialog): sed -e
		'some sed command' &gt; '%f' &lt; '%s'
		<figure id="figure-external-menu">
				<title id="figure-external-menu-title">Bluefish External Menu</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/external_menu.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of the Bluefish 1.0 external menu</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
		</para>
		<para>To add items to the external
  menu:</para><para><orderedlist><listitem><para>Edit &gt;
  Preferences</para></listitem><listitem><para>Choose the "External Programs"
  tab.</para></listitem><listitem><para>Click "Add" to add a new
  item</para></listitem><listitem><para>Double-click on the name field to give
  the command a name (this name will become an option in the "External"
  menu).</para></listitem><listitem><para>Double-click on the command field to
  type the command to be
  executed.</para></listitem></orderedlist></para><para>I WILL ADD AN EXAMPLE
  HERE LATER</para><para>Items within External &gt; Outputbox allow for
  programs to give feedback by opening an output box within Bluefish's main
  window. To create an Outputbox menu item: <orderedlist><listitem><para>Edit
  &gt; Preferences</para></listitem><listitem><para>Choose the "Output
  parsers" tab.</para></listitem><listitem><para>Click "Add" to add a new
  item</para></listitem><listitem><para>Double-click on the name field to give
  the command a name (this name will become an option in the "External"
  menu).</para></listitem><listitem><para>Double-click on the pattern field
  and give a regular expression pattern with subpatterns, such as line
  ([0-9]+) column [0-9]+ - (.*).</para></listitem><listitem><para>Double-click
  on the "File #" field and give the number for the subpattern matching the
  filename (-1 for none)</para></listitem><listitem><para>Double-click on the
  "Line #" field and give the number for the subpattern matching the line
  number</para></listitem><listitem><para>Double-click on the "Output #" field
  and give the number for the subpattern matching the actual error
  message</para></listitem><listitem><para>Double-click on the "Command" field
  and the command to execute, %s is the current
  filename</para></listitem><listitem><para>Toggle the "Show all output"
  check box to show output NOT matching the regular
  expression.</para></listitem></orderedlist></para><remark>Note: Of course,
  it is also possible to add these items by editing the file named "rcfile_v2"
  found in the user's home directory (~/.bluefish/rcfile_v2). The fields are
  delimited by colons and correspond to those found in the
  GUI.</remark>
</sect2>

</sect1>

<sect1 id="bluefish-preferences">
<title>Customising Bluefish</title>
<para>Most of customization can be made through the <guilabel>Edit preferences</guilabel> panel, which is divided into several tabs.</para>
<sect2 id="changing-shortcut-keys">
<title>Modifying shortcut keys</title>
		<para>Many menu entries are accessible via key combination; also called a
		shortcut. For example, pressing the <keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo> keys saves the current file to
		disk. If available, shortcut key combinations are shown on the right of
		the menu entry.</para>
		<para>What many people do not know is that they can be changed. Move the
		mouse over a menu entry, and press the key combination you would like to
		use. Immediately this combination will show up on the right of the menu
		entry. An entry can also be removed, press the backspace key when you move
		the mouse over a menu entry to remove the shortcut.</para>
		<para>To save the shortcut key combinations for later Bluefish sessions, use <menuchoice><guimenu>Edit</guimenu><guimenuitem>Save Shortcut Keys</guimenuitem></menuchoice>. This will store the settings in the <filename>~/.bluefish/menudump_2</filename>. If you want to restore the default combinations simply remove this file and restart Bluefish.</para>
</sect2>

<sect2 id="editor-preferences">
<title>Editor preferences</title>
	<para>The font of the editor can be set in the preferences under <guilabel>Editor</guilabel>. </para>
	<para>
	A frequently asked question is how to change the background color of the editor in Bluefish.
	Bluefish uses the default editor background color as set in your GTK theme. If you want to 
	override the color of the theme, edit ~/.gtkrc-2.0 and add this section:
<programlisting>
style "EditorStyle" {
        base[NORMAL]="#eeeeee"
}
class "GtkTextView" style "EditorStyle"
</programlisting>
	Obviously, #eeeeee should be your preferred background color.
	</para>
	</sect2>

<sect2 id="changing-filetypes">
<title>Modifying file types</title>
			<para>
			Here you can define all file types that should be recognised by Bluefish. 
			The defaults for these file types are retrieved from a file called file types.default 
			in ${prefix}/share/bluefish/.
			</para>
			<para>
			The file types consist first of a name (this name is also used in the file filters, and in 
			the highlighting patterns). Second is a list of extensions, separated by a colon (:). Third 
			are the highlighting update characters. Upon a key press of one of these characters, 
			the highlighting 
			engine will refresh the highlighting around the cursor. If this field is empty, any character 
			will force the highlighting engine to refresh. Special characters like the tab and the newline 
			can be entered as \t and \n, the backslash itself is entered as \\. Fifth is the icon location
			for this file type. Sixth is whether this file type is editable by Bluefish (whether or 
			not Bluefish
			should try to open it after a double click). Seventh is a regular expression that can be used to
			detect the file type if a file without extension is loaded. Eight is the auto-tag-closing 
			mode. A 
			value of 0 means that Bluefish should not close XML/HTML tags, a value of 1 means it 
			should close 
			the tags XML style (&lt;br /&gt;), a value of 2 means HTML style.
			</para>
</sect2>

<sect2 id="modifying-filefilters">
<title>Modifying the files filters</title>
<para>TO BE WRITTEN</para>
</sect2>

<sect2 id="changing-highlighting-patterns">
<title>Modifying the highlighting patterns</title>
		<para>The highlight patterns are build from Perl compatible regular
			expressions. A pattern has options for coloring and style of the text it
			matches. Within a match other patterns can be used to color parts of
			that match. There are three types of patterns:
			<itemizedlist>
			<listitem><para>1 Two patterns, match from the start to the end pattern</para></listitem>
			<listitem><para>2 One pattern that matches from start to end</para></listitem>
			<listitem><para>3	Match a subpattern from the parent pattern</para></listitem>
			</itemizedlist>
			</para>
			<para>One specific pattern can also be used within several other parent
			patterns. The parent-match option is a regular expression that defines
			all parents for a certain pattern. If empty it will default to ^top$, so
			basically it will be on the top level.</para>
			<para>So how does it work? Lets take a look at a little example text, a
			piece of PHP code within some HTML code:</para>
			<programlisting>&lt;p align="center"&gt;
&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting>
			<para>The first thing the highlighting engine does is finding the
			pattern that has the lowest match. Using the default patterns for PHP,
			the pattern named <literal>html</literal> has a match at position 0:</para>
			<programlisting>&lt;p align="center"&gt;</programlisting>
			<para>So now the highlighting engine searches for the lowest match in
			all subpatterns of <literal>html</literal>, in the region matched by the
			type 2 <literal>html</literal> pattern. Again, the lowest match will
			count. The pattern named <literal>html-tag</literal> has a match at
			position 1. This pattern is a type 3 pattern, so it matches a subpattern
			of the parent:</para>
			<programlisting>p</programlisting>
			<para>the match from subpattern <literal>html-tag</literal> ends at
			position 2 and it does not have any child patterns, so the highlighting
			engine continues at position 2 with all subpatterns from
			<literal>html</literal>. A type 2 pattern named <literal>html-attrib</literal>
			has the lowest match:</para>
			<programlisting>align="center"</programlisting>
			<para>This pattern does have a child pattern, again a type 3 pattern
			called <literal>html-attrib-sub2</literal> matching:</para>
			<programlisting>"center"</programlisting>
			<para>The pattern <literal>html-attrib-sub2</literal> does not have any
			child patterns, and subpatterns of <literal>html-attrib</literal> do not
			have any more matches, and also <literal>html</literal> subpatterns do
			not have any more matches. So we are back on the main level, the
			remaining code to highlight is:</para>
			<programlisting>&lt;?php
// this is a comment ?&gt;
?&gt;</programlisting>
			<para>Now a pattern named <literal>php</literal> has the lowest match.
			This is a type 0 pattern, so the highlight engine continues with all the
			remaining code, but it will not only search for the lowest match of the
			child patterns of <literal>php</literal>, but it will also use for the
			end pattern of <literal>php</literal>. The lowest match in this example
			is a pattern named <literal>php-comment-C++</literal> As you can see the
			?&gt; within the comment does not end the <literal>php</literal>
			pattern, because it lies within a subpattern of <literal>php</literal>:</para>
			<programlisting>// this is a comment ?&gt;</programlisting>
			<para>The pattern <literal>php-comment-C++</literal> does not have any
			child patterns, so the remaining code for the <literal>php</literal>
			subpatterns is:</para>
			<programlisting>?&gt;</programlisting>
			<para>It is very obvious now, the lowest match will be the end pattern
			of the <literal>php</literal> pattern, so we're back on the main
			level, and we have matched all of the code!</para>
			<figure id="syntax_highlighting_example">
				<title id="figure-desc">Syntax highlighting example</title>
				<screenshot>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/syntax_highlighting_example.png" format="PNG"/>
						</imageobject>
						<textobject>
							<phrase>A screen shot of a syntax highlighting example</phrase>
						</textobject>
					</mediaobject>
				</screenshot>
			</figure>
			<para>The config file for highlighting is a colon separated array with
			the following content:</para>
			<programlisting>mode:
patternname:
case_sensitive(0-on/1-off):
start reg-ex:
end reg-ex:
start &amp; end pattern(1), only start(2), subpattern(3):
parent-match:
foreground-color:
background-color:
don't change weight(0), non-bold(1), bold(2):
don't change style(0), non-italic(1), italic(2): </programlisting>
<para>The same options are found in the syntax highlighting preferences.</para>
<para>SCREENSHOT BY ????</para>
</sect2>

</sect1>

</chapter>
