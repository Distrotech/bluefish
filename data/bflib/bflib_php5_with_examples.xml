<ref name="PHP5 with examples" description="PHP functions CVS ver 5" version="2">
<def deftype="property" id="IMAP_16" kind="parameter" name="mailbox" type="string" required="1" />
<def deftype="property" id="ClibPDF_3" kind="parameter" name="lly" type="float" required="1" />
<def deftype="property" id="PDF_6" kind="parameter" name="upperrighty" type="float" required="1" />
<def deftype="property" id="GMP_5" kind="parameter" name="d" type="resource" required="1" />
<def deftype="property" id="Informix_1" kind="parameter" name="result_id" type="int" required="1" />
<def deftype="property" id="Sockets_11" kind="parameter" name="write" type="array" required="1" />
<def deftype="property" id="PDF_3" kind="parameter" name="lowerleftx" type="float" required="1" />
<def deftype="property" id="Apache_6" kind="parameter" name="value" type="string" required="1" />
<def deftype="property" id="Ncurses_47" kind="parameter" name="smincol" type="int" required="1" />
<def deftype="property" id="Image_89" kind="parameter" name="fontfile" type="string" required="1" />
<def deftype="property" id="MCAL_20" kind="parameter" name="begin_day" type="int" required="1" />
<def deftype="property" id="APD_9" kind="parameter" name="function_name" type="string" required="1" />
<def deftype="property" id="Informix_13" kind="parameter" name="cursor_type" type="int"  />
<def deftype="property" id="SESAM_1" kind="parameter" name="result_id" type="string" required="1" />
<def deftype="property" id="SNMP_6" kind="parameter" name="object_id" type="string" required="1" />
<def deftype="property" id="APD_3" kind="parameter" name="delimiter" type="string"  />
<def deftype="property" id="COM_24" kind="parameter" name="left" type="mixed" required="1" />
<def deftype="property" id="Ncurses_48" kind="parameter" name="smaxrow" type="int" required="1" />
<def deftype="property" id="Multibyte String_24" kind="parameter" name="needle" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_15" kind="parameter" name="connection_id" type="resource"  />
<def deftype="property" id="Direct IO_8" kind="parameter" name="options" type="array" required="1" />
<def deftype="property" id="Object Aggregation_5" kind="parameter" name="class_name" type="string"  />
<def deftype="property" id="LDAP_12" kind="parameter" name="filter" type="string" required="1" />
<def deftype="property" id="SESAM_6" kind="parameter" name="whence" type="int" required="1" />
<def deftype="property" id="MCVE_36" kind="parameter" name="code" type="int" required="1" />
<def deftype="property" id="Variables handling_5" kind="parameter" name="expression" type="mixed" required="1" />
<def deftype="property" id="ClibPDF_34" kind="parameter" name="x_scale" type="float" required="1" />
<def deftype="property" id="ODBC_12" kind="parameter" name="result_array" type="array" required="1" />
<def deftype="property" id="bcompiler_2" kind="parameter" name="filehandle" type="resource" required="1" />
<def deftype="property" id="ODBC_23" kind="parameter" name="format" type="string"  />
<def deftype="property" id="DOM_20" kind="parameter" name="version" type="string" required="1">
      <description>  The version number of the to test. In  level 2, this can be either or   .  </description>
</def>
<def deftype="property" id="Ncurses_21" kind="parameter" name="milliseconds" type="int" required="1" />
<def deftype="property" id="Direct IO_9" kind="parameter" name="len" type="int"  />
<def deftype="property" id="OCI8_12" kind="parameter" name="output" type="array" required="1" />
<def deftype="property" id="Filesystem_25" kind="parameter" name="dir" type="string" required="1" />
<def deftype="property" id="LDAP_15" kind="parameter" name="sizelimit" type="int"  />
<def deftype="property" id="OpenSSL_31" kind="parameter" name="extracerts" type="string"  />
<def deftype="property" id="IMAP_9" kind="parameter" name="sequence" type="string" required="1" />
<def deftype="property" id="ClibPDF_10" kind="parameter" name="open" type="int" required="1" />
<def deftype="property" id="DB++_3" kind="parameter" name="server" type="string"  />
<def deftype="property" id="IIS Functions_11" kind="parameter" name="directory_flags" type="int" required="1" />
<def deftype="property" id="DB++_9" kind="parameter" name="tname" type="string" required="1" />
<def deftype="property" id="SQLite_13" kind="parameter" name="first_row_only" type="bool"  />
<def deftype="property" id="MS SQL Server_16" kind="parameter" name="conn_id" type="resource" required="1" />
<def deftype="property" id="ODBC_3" kind="parameter" name="owner" type="string" required="1" />
<def deftype="property" id="LDAP_5" kind="parameter" name="attribute" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_23" kind="parameter" name="db" type="string" required="1" />
<def deftype="property" id="OCI8_8" kind="parameter" name="maxlength" type="int"  />
<def deftype="property" id="Ncurses_24" kind="parameter" name="mevent" type="array" required="1" />
<def deftype="property" id="Image_23" kind="parameter" name="alpha" type="int" required="1" />
<def deftype="property" id="Math_14" kind="parameter" name="arg2" type="number" required="1" />
<def deftype="property" id="Verisign Payflow Pro_3" kind="parameter" name="proxy_port" type="int"  />
<def deftype="property" id="Image_44" kind="parameter" name="width" type="int" required="1" />
<def deftype="property" id="Filesystem_15" kind="parameter" name="pattern" type="string" required="1" />
<def deftype="property" id="SWF_27" kind="parameter" name="ymax" type="float" required="1" />
<def deftype="property" id="PDF_22" kind="parameter" name="a" type="float" required="1" />
<def deftype="property" id="IMAP_2" kind="parameter" name="mbox" type="string" required="1" />
<def deftype="property" id="xdiff_6" kind="parameter" name="patch" type="string" required="1" />
<def deftype="property" id="MySQL_4" kind="parameter" name="field_index" type="int" required="1" />
<def deftype="property" id="Pspell_1" kind="parameter" name="spelling" type="string"  />
<def deftype="property" id="Ming (flash)_11" kind="parameter" name="blue" type="int"  />
<def deftype="property" id="MaxDB_19" kind="parameter" name="var1" type="mixed" required="1" />
<def deftype="property" id="MCVE_11" kind="parameter" name="expdate" type="string" required="1" />
<def deftype="property" id="MS SQL Server_1" kind="parameter" name="stmt" type="resource" required="1" />
<def deftype="property" id="OCI8_3" kind="parameter" name="start" type="int"  />
<def deftype="property" id="MCVE_17" kind="parameter" name="ptrannum" type="int" required="1" />
<def deftype="property" id="MCVE_25" kind="parameter" name="conn" type="int" required="1" />
<def deftype="property" id="Hyperwave_11" kind="parameter" name="hw_document" type="int" required="1" />
<def deftype="property" id="SQLite_2" kind="parameter" name="decode_binary" type="bool"  />
<def deftype="property" id="FTP_12" kind="parameter" name="local_file" type="string" required="1">
      <description>  The local file path (will be overwritten if the file already exists).  </description>
</def>
<def deftype="property" id="Firebird/InterBase_6" kind="parameter" name="link_identifier" type="resource"  />
<def deftype="property" id="XML-RPC_9" kind="parameter" name="function" type="string" required="1" />
<def deftype="property" id="COM_5" kind="parameter" name="value" type="mixed"  />
<def deftype="property" id="MySQL_2" kind="parameter" name="client_flags" type="int"  />
<def deftype="property" id="MCVE_30" kind="parameter" name="zip" type="string" required="1" />
<def deftype="property" id="Filesystem_16" kind="parameter" name="string" type="string" required="1" />
<def deftype="property" id="OCI8_25" kind="parameter" name="column" type="mixed" required="1" />
<def deftype="property" id="FTP_9" kind="parameter" name="remote_file" type="string" required="1">
      <description>  The remote file path.  </description>
</def>
<def deftype="property" id="PHP Options/Info_8" kind="parameter" name="extension" type="string"  />
<def deftype="property" id="IRC Gateway_22" kind="parameter" name="mask" type="string" required="1" />
<def deftype="property" id="SESAM_3" kind="parameter" name="schema" type="string" required="1" />
<def deftype="property" id="Ncurses_1" kind="parameter" name="ch" type="int" required="1" />
<def deftype="property" id="GMP_7" kind="parameter" name="number" type="mixed" required="1" />
<def deftype="property" id="FrontBase_24" kind="parameter" name="i" type="int" required="1" />
<def deftype="property" id="DOM_4" kind="parameter" name="qualifiedName" type="string" required="1">
      <description>  The tag name and prefix of the attribute, as .  </description>
</def>
<def deftype="property" id="Math_9" kind="parameter" name="number" type="float" required="1" />
<def deftype="property" id="Image_40" kind="parameter" name="x_size" type="int" required="1" />
<def deftype="property" id="Sockets_14" kind="parameter" name="tv_usec" type="int"  />
<def deftype="property" id="Image_31" kind="parameter" name="src_x" type="int" required="1" />
<def deftype="property" id="MCVE_19" kind="parameter" name="row" type="int" required="1" />
<def deftype="property" id="Network_8" kind="parameter" name="protocol" type="string" required="1" />
<def deftype="property" id="Ming (flash)_19" kind="parameter" name="compression" type="int"  />
<def deftype="property" id="Arrays_1" kind="parameter" name="..." type="mixed"  />
<def deftype="property" id="openal_3" kind="parameter" name="property" type="int" required="1">
      <description>  Specific property, one of:   ,   ,     .  </description>
</def>
<def deftype="property" id="Image_11" kind="parameter" name="w" type="int" required="1" />
<def deftype="property" id="Arrays_21" kind="parameter" name="callback" type="callback" required="1" />
<def deftype="property" id="FrontBase_4" kind="parameter" name="clob_handle" type="string" required="1" />
<def deftype="property" id="BC math_2" kind="parameter" name="right_operand" type="string" required="1" />
<def deftype="property" id="OpenSSL_35" kind="parameter" name="padding" type="int"  />
<def deftype="property" id="Direct IO_6" kind="parameter" name="pos" type="int" required="1" />
<def deftype="property" id="ClibPDF_24" kind="parameter" name="page_number" type="int" required="1" />
<def deftype="property" id="WDDX_1" kind="parameter" name="packet_id" type="int" required="1" />
<def deftype="property" id="CCVS_4" kind="parameter" name="argval" type="string" required="1" />
<def deftype="property" id="MS SQL Server_15" kind="parameter" name="field" type="mixed" required="1" />
<def deftype="property" id="ODBC_10" kind="parameter" name="parameters_array" type="array"  />
<def deftype="property" id=".NET_3" kind="parameter" name="codepage" type="int"  />
<def deftype="property" id="PDF_20" kind="parameter" name="dochandle" type="int" required="1" />
<def deftype="property" id="Ming (flash)_21" kind="parameter" name="rate" type="int" required="1" />
<def deftype="property" id="spl_2" kind="parameter" name="index" type="mixed" required="1" />
<def deftype="property" id="ClibPDF_18" kind="parameter" name="x1" type="float" required="1" />
<def deftype="property" id="Classkit_2" kind="parameter" name="methodname" type="string" required="1">
      <description>  The name of the method to add  </description>
</def>
<def deftype="property" id="ODBC_11" kind="parameter" name="rownumber" type="int"  />
<def deftype="property" id="MCVE_26" kind="parameter" name="batch" type="string" required="1" />
<def deftype="property" id="BC math_5" kind="parameter" name="x" type="string" required="1" />
<def deftype="property" id="Ncurses_26" kind="parameter" name="charattr" type="int" required="1" />
<def deftype="property" id="LDAP_13" kind="parameter" name="attributes" type="array"  />
<def deftype="property" id="SWF_24" kind="parameter" name="xmin" type="float" required="1" />
<def deftype="property" id="Classes/Objects_5" kind="parameter" name="autoload" type="bool"  />
<def deftype="property" id="DB++_2" kind="parameter" name="tuple" type="array" required="1" />
<def deftype="property" id="IIS Functions_6" kind="parameter" name="server_instance" type="int" required="1" />
<def deftype="property" id="Image_52" kind="parameter" name="points" type="array" required="1" />
<def deftype="property" id="FTP_10" kind="parameter" name="resumepos" type="int"  />
<def deftype="property" id="ClibPDF_20" kind="parameter" name="x2" type="float" required="1" />
<def deftype="property" id="PostgreSQL_2" kind="parameter" name="connect_type" type="int"  />
<def deftype="property" id="IMAP_4" kind="parameter" name="msg_number" type="int" required="1" />
<def deftype="property" id="COM_18" kind="parameter" name="case_insensitive" type="bool"  />
<def deftype="property" id="Ming (flash)_31" kind="parameter" name="fill" type="swfgradient" required="1" />
<def deftype="property" id="Program Execution_10" kind="parameter" name="env" type="array"  />
<def deftype="property" id="Ming (flash)_17" kind="parameter" name="ratio" type="float" required="1" />
<def deftype="property" id="OCI8_9" kind="parameter" name="db" type="string"  />
<def deftype="property" id="FrontBase_2" kind="parameter" name="blob_handle" type="string" required="1" />
<def deftype="property" id="Semaphore_17" kind="parameter" name="variable_key" type="int" required="1" />
<def deftype="property" id="Apache_2" kind="parameter" name="walk_to_top" type="bool"  />
<def deftype="property" id="WDDX_4" kind="parameter" name="comment" type="string"  />
<def deftype="property" id="MCVE_16" kind="parameter" name="stationid" type="string" required="1" />
<def deftype="property" id="FTP_4" kind="parameter" name="host" type="string" required="1">
      <description>  The FTP server address. This parameter shouldn't have any trailing  slashes and shouldn't be prefixed with .  </description>
</def>
<def deftype="property" id="PostgreSQL_5" kind="parameter" name="null_as" type="string"  />
<def deftype="property" id="LDAP_14" kind="parameter" name="attrsonly" type="int"  />
<def deftype="property" id="Firebird/InterBase_46" kind="parameter" name="event_name2" type="string"  />
<def deftype="property" id="Semaphore_5" kind="parameter" name="msgtype" type="int" required="1" />
<def deftype="property" id="Math_8" kind="parameter" name="number" type="int" required="1" />
<def deftype="property" id="Arrays_41" kind="parameter" name="sort_flags" type="int"  />
<def deftype="property" id="Hyperwave_1" kind="parameter" name="object_array" type="array" required="1" />
<def deftype="property" id="Ncurses_20" kind="parameter" name="keycode" type="int" required="1" />
<def deftype="property" id="Direct IO_5" kind="parameter" name="n" type="int"  />
<def deftype="property" id="CURL_7" kind="parameter" name="option" type="int" required="1" />
<def deftype="property" id="MS SQL Server_2" kind="parameter" name="param_name" type="string" required="1" />
<def deftype="property" id="Arrays_13" kind="parameter" name="num" type="int" required="1" />
<def deftype="property" id="COM_11" kind="parameter" name="property" type="string" required="1" />
<def deftype="property" id="Arrays_9" kind="parameter" name="array2" type="array" required="1" />
<def deftype="property" id="Arrays_38" kind="parameter" name="data_compare_func" type="callback" required="1" />
<def deftype="property" id="Ncurses_17" kind="parameter" name="pair" type="int" required="1" />
<def deftype="property" id="LDAP_28" kind="parameter" name="newval" type="mixed" required="1" />
<def deftype="property" id="OvrimosSQL_1" kind="parameter" name="connection_id" type="int" required="1" />
<def deftype="property" id="MaxDB_8" kind="parameter" name="processid" type="int" required="1" />
<def deftype="property" id="PHP Options/Info_10" kind="parameter" name="mode" type="string"  />
<def deftype="property" id="xdiff_4" kind="parameter" name="minimal" type="bool"  />
<def deftype="property" id="FrontBase_21" kind="parameter" name="old_password" type="string" required="1" />
<def deftype="property" id="DOM XML_14" kind="parameter" name="str" type="string" required="1" />
<def deftype="property" id="MaxDB_12" kind="parameter" name="server" type="array"  />
<def deftype="property" id="OvrimosSQL_3" kind="parameter" name="how" type="int"  />
<def deftype="property" id="IMAP_1" kind="parameter" name="imap_stream" type="resource" required="1" />
<def deftype="property" id="OCI8_20" kind="parameter" name="tdo" type="string" required="1" />
<def deftype="property" id="Hyperwave_17" kind="parameter" name="rootid" type="int" required="1" />
<def deftype="property" id="PCRE_5" kind="parameter" name="subject" type="mixed" required="1" />
<def deftype="property" id="MaxDB_13" kind="parameter" name="groups" type="array"  />
<def deftype="property" id="Arrays_17" kind="parameter" name="key" type="mixed" required="1" />
<def deftype="property" id="Aspell_2" kind="parameter" name="word" type="string" required="1" />
<def deftype="property" id="Ncurses_43" kind="parameter" name="pad" type="resource" required="1" />
<def deftype="property" id="PDF_26" kind="parameter" name="e" type="float" required="1" />
<def deftype="property" id="SOAP_2" kind="parameter" name="options" type="array"  />
<def deftype="property" id="Date/Time_5" kind="parameter" name="zenith" type="float"  />
<def deftype="property" id="Misc._8" kind="parameter" name="error_message" type="string" >
      <description>  If the parameter is used, it will  contain the error message generated by the syntax check.   is passed by   .  </description>
</def>
<def deftype="property" id="Ncurses_22" kind="parameter" name="window" type="resource" required="1" />
<def deftype="property" id="MCAL_15" kind="parameter" name="sec" type="int"  />
<def deftype="property" id="MCVE_10" kind="parameter" name="account" type="string" required="1" />
<def deftype="property" id="XSLT_10" kind="parameter" name="handlers" type="array" required="1" />
<def deftype="property" id="BC math_4" kind="parameter" name="modulus" type="string" required="1" />
<def deftype="property" id="Math_18" kind="parameter" name="seed" type="int"  />
<def deftype="property" id="IMAP_3" kind="parameter" name="options" type="string"  />
<def deftype="property" id="DB++_22" kind="parameter" name="sid" type="int" required="1" />
<def deftype="property" id="IRC Gateway_5" kind="parameter" name="params" type="string" required="1" />
<def deftype="property" id="CURL_1" kind="parameter" name="ch" type="resource" required="1" />
<def deftype="property" id="Image_71" kind="parameter" name="tightness" type="int" required="1" />
<def deftype="property" id="FrontBase_16" kind="parameter" name="table_name" type="string" required="1" />
<def deftype="property" id="openal_6" kind="parameter" name="context" type="resource" required="1" />
<def deftype="property" id="mysqli_5" kind="parameter" name="stmt" type="mysqli_stmt" required="1" />
<def deftype="property" id="DBM_1" kind="parameter" name="dbm_identifier" type="resource" required="1" />
<def deftype="property" id="Printer_19" kind="parameter" name="printer_handle" type="resource" required="1" />
<def deftype="property" id="Cyrus IMAP_1" kind="parameter" name="connection" type="resource" required="1" />
<def deftype="property" id="Math_17" kind="parameter" name="max" type="int" required="1" />
<def deftype="property" id="Image_38" kind="parameter" name="dst_w" type="int" required="1" />
<def deftype="property" id="Image_59" kind="parameter" name="font_file" type="string" required="1" />
<def deftype="property" id="Calendar_1" kind="parameter" name="calendar" type="int" required="1" />
<def deftype="property" id="ssh2_1" kind="parameter" name="session" type="resource" required="1" />
<def deftype="property" id="SQLite_3" kind="parameter" name="index_or_name" type="mixed" required="1" />
<def deftype="property" id="COM_10" kind="parameter" name="com_object" type="resource" required="1" />
<def deftype="property" id="DOM_23" kind="parameter" name="node" type="DOMNode" required="1">
      <description>  The compared node.  </description>
</def>
<def deftype="property" id="ClibPDF_72" kind="parameter" name="green_value" type="float" required="1" />
<def deftype="property" id="DB++_1" kind="parameter" name="relation" type="resource" required="1" />
<def deftype="property" id="Filesystem_5" kind="parameter" name="file" type="string" required="1" />
<def deftype="property" id="FrontBase_9" kind="parameter" name="database_options" type="string"  />
<def deftype="property" id="Errors and Logging_5" kind="parameter" name="level" type="int"  />
<def deftype="property" id="Image_50" kind="parameter" name="y2" type="int" required="1" />
<def deftype="property" id="Arrays_42" kind="parameter" name="varname" type="mixed" required="1" />
<def deftype="property" id="MaxDB_14" kind="parameter" name="cert" type="string" required="1" />
<def deftype="property" id="PDF_8" kind="parameter" name="icon" type="string" required="1" />
<def deftype="property" id="APD_4" kind="parameter" name="output" type="string" required="1" />
<def deftype="property" id="PDF_27" kind="parameter" name="f" type="float" required="1" />
<def deftype="property" id="Strings_20" kind="parameter" name="raw_output" type="bool"  />
<def deftype="property" id="PDF_37" kind="parameter" name="imagetype" type="string" required="1" />
<def deftype="property" id="MS SQL Server_9" kind="parameter" name="statement" type="resource" required="1" />
<def deftype="property" id="Semaphore_13" kind="parameter" name="perm" type="int"  />
<def deftype="property" id="Date/Time_11" kind="parameter" name="month" type="int"  />
<def deftype="property" id="GMP_1" kind="parameter" name="a" type="resource" required="1" />
<def deftype="property" id="Printer_16" kind="parameter" name="ul_y" type="int" required="1" />
<def deftype="property" id="Ming (flash)_9" kind="parameter" name="red" type="int"  />
<def deftype="property" id="COM_6" kind="parameter" name="type" type="int"  />
<def deftype="property" id="openal_8" kind="parameter" name="setting" type="mixed" required="1">
      <description>  Value to set, either float, or an array of floats as appropriate.  </description>
</def>
<def deftype="property" id="Ming (flash)_32" kind="parameter" name="object" type="resource" required="1" />
<def deftype="property" id="Ncurses_56" kind="parameter" name="flag" type="bool" required="1" />
<def deftype="property" id="Image_90" kind="parameter" name="foreground" type="int"  />
<def deftype="property" id="Ncurses_5" kind="parameter" name="attributes" type="int" required="1" />
<def deftype="property" id="MS SQL Server_8" kind="parameter" name="field_offset" type="int" required="1" />
<def deftype="property" id="DOM_27" kind="parameter" name="oldnode" type="DOMNode" required="1">
      <description>  The removed child.  </description>
</def>
<def deftype="property" id="OpenSSL_20" kind="parameter" name="priv_key_id" type="mixed" required="1" />
<def deftype="property" id="DB++_17" kind="parameter" name="overwrite" type="bool"  />
<def deftype="property" id="Ming (flash)_12" kind="parameter" name="dx" type="int" required="1" />
<def deftype="property" id="Sockets_1" kind="parameter" name="socket" type="resource" required="1" />
<def deftype="property" id="Math_13" kind="parameter" name="arg1" type="number" required="1" />
<def deftype="property" id="ClibPDF_35" kind="parameter" name="y_scale" type="float" required="1" />
<def deftype="property" id="MaxDB_9" kind="parameter" name="resultmode" type="int"  />
<def deftype="property" id="dba_3" kind="parameter" name="handler" type="string" required="1">
      <description>  The name of the which  shall be used for accessing . It is passed  all optional parameters given to and  can act on behalf of them.  </description>
</def>
<def deftype="property" id="Firebird/InterBase_32" kind="parameter" name="result_identifier" type="resource" required="1" />
<def deftype="property" id="MCVE_7" kind="parameter" name="new_password" type="string" required="1" />
<def deftype="property" id="ClibPDF_14" kind="parameter" name="y_coor" type="float" required="1" />
<def deftype="property" id="FTP_7" kind="parameter" name="command" type="string" required="1">
      <description>  The command to execute.  </description>
</def>
<def deftype="property" id="spl_4" kind="parameter" name="class" type="object" required="1" />
<def deftype="property" id="DOM_29" kind="parameter" name="attr" type="DOMAttr" required="1">
      <description>  The attribute node.  </description>
</def>
<def deftype="property" id="mnoGoSearch_2" kind="parameter" name="var" type="int" required="1" />
<def deftype="property" id="ClibPDF_23" kind="parameter" name="y3" type="float" required="1" />
<def deftype="property" id="Object Aggregation_2" kind="parameter" name="exclude" type="bool"  />
<def deftype="property" id="BC math_7" kind="parameter" name="scale" type="int" required="1" />
<def deftype="property" id="MCAL_13" kind="parameter" name="description" type="string" required="1" />
<def deftype="property" id="BC math_6" kind="parameter" name="y" type="string" required="1" />
<def deftype="property" id="ClibPDF_52" kind="parameter" name="encoding" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_16" kind="parameter" name="link_or_trans_identifier" type="resource"  />
<def deftype="property" id="ClibPDF_19" kind="parameter" name="y1" type="float" required="1" />
<def deftype="property" id="ssh2_3" kind="parameter" name="privkeyfile" type="string" required="1" />
<def deftype="property" id="Calendar_9" kind="parameter" name="julianday" type="int" required="1" />
<def deftype="property" id="PDO_1" kind="parameter" name="driver_options" type="array"  />
<def deftype="property" id="Network_1" kind="parameter" name="mxhosts" type="array" required="1" />
<def deftype="property" id="Printer_7" kind="parameter" name="rec_x" type="int" required="1" />
<def deftype="property" id="Lotus Notes_5" kind="parameter" name="type" type="string"  />
<def deftype="property" id="OCI8_24" kind="parameter" name="col" type="mixed" required="1" />
<def deftype="property" id="MCAL_16" kind="parameter" name="interval" type="int" required="1" />
<def deftype="property" id="MaxDB_15" kind="parameter" name="ca" type="string" required="1" />
<def deftype="property" id="Ming (flash)_34" kind="parameter" name="font" type="string" required="1" />
<def deftype="property" id="DOM XML_5" kind="parameter" name="id" type="string" required="1" />
<def deftype="property" id="PDF_5" kind="parameter" name="upperrightx" type="float" required="1" />
<def deftype="property" id="ODBC_4" kind="parameter" name="qualifier" type="string"  />
<def deftype="property" id="Sockets_13" kind="parameter" name="tv_sec" type="int" required="1" />
<def deftype="property" id="Multibyte String_3" kind="parameter" name="option" type="string"  />
<def deftype="property" id="SQLite_1" kind="parameter" name="dbhandle" type="resource" required="1" />
<def deftype="property" id="Filesystem_7" kind="parameter" name="allowable_tags" type="string"  />
<def deftype="property" id="DOM_3" kind="parameter" name="namespaceURI" type="string" required="1">
      <description>  The URI of the namespace.  </description>
</def>
<def deftype="property" id="Printer_17" kind="parameter" name="lr_x" type="int" required="1" />
<def deftype="property" id="Arrays_28" kind="parameter" name="array" type="array" required="1" />
<def deftype="property" id="Calendar_11" kind="parameter" name="juliandaycount" type="int" required="1" />
<def deftype="property" id="Program Execution_3" kind="parameter" name="return_var" type="int"  />
<def deftype="property" id="OpenSSL_16" kind="parameter" name="certificate" type="mixed" required="1" />
<def deftype="property" id="IMAP_5" kind="parameter" name="stream_id" type="resource" required="1" />
<def deftype="property" id="GMP_11" kind="parameter" name="base" type="resource" required="1" />
<def deftype="property" id="Image_60" kind="parameter" name="extrainfo" type="array"  />
<def deftype="property" id="mnoGoSearch_8" kind="parameter" name="res" type="resource" required="1" />
<def deftype="property" id="MCVE_1" kind="parameter" name="conn" type="resource" required="1" />
<def deftype="property" id="PCRE_3" kind="parameter" name="pattern" type="mixed" required="1" />
<def deftype="property" id="FrontBase_10" kind="parameter" name="row_number" type="int" required="1" />
<def deftype="property" id="MCAL_19" kind="parameter" name="begin_month" type="int" required="1" />
<def deftype="property" id="MCVE_33" kind="parameter" name="tf" type="int" required="1" />
<def deftype="property" id="OpenSSL_3" kind="parameter" name="notext" type="bool"  />
<def deftype="property" id="ICAP_3" kind="parameter" name="calendar" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_14" kind="parameter" name="file_handle" type="resource" required="1" />
<def deftype="property" id="Multibyte String_11" kind="parameter" name="replacement" type="string" required="1" />
<def deftype="property" id="CURL_8" kind="parameter" name="version" type="int"  />
<def deftype="property" id="APD_8" kind="parameter" name="port" type="int" required="1" />
<def deftype="property" id="Ncurses_46" kind="parameter" name="sminrow" type="int" required="1" />
<def deftype="property" id="COM_29" kind="parameter" name="flags" type="int"  />
<def deftype="property" id="IMAP_21" kind="parameter" name="to" type="string" required="1" />
<def deftype="property" id="Strings_35" kind="parameter" name="input" type="string" required="1" />
<def deftype="property" id="Ming (flash)_13" kind="parameter" name="dy" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_9" kind="parameter" name="verbose" type="bool"  />
<def deftype="property" id="Mail_1" kind="parameter" name="addr" type="string" required="1" />
<def deftype="property" id="Ncurses_51" kind="parameter" name="format" type="int" required="1" />
<def deftype="property" id="FrontBase_18" kind="parameter" name="row" type="int"  />
<def deftype="property" id="ODBC_9" kind="parameter" name="query_string" type="string" required="1" />
<def deftype="property" id="MCAL_22" kind="parameter" name="end_month" type="int" required="1" />
<def deftype="property" id="LDAP_19" kind="parameter" name="entry" type="resource" required="1" />
<def deftype="property" id="ODBC_20" kind="parameter" name="data_type" type="int"  />
<def deftype="property" id="ClibPDF_56" kind="parameter" name="keywords" type="string" required="1" />
<def deftype="property" id="MCAL_23" kind="parameter" name="end_day" type="int" required="1" />
<def deftype="property" id="Bzip2_2" kind="parameter" name="source" type="string" required="1">
      <description>  The string to compress.  </description>
</def>
<def deftype="property" id="Variables handling_4" kind="parameter" name="..." type=""  />
<def deftype="property" id="MCAL_14" kind="parameter" name="min" type="int"  />
<def deftype="property" id="Arrays_51" kind="parameter" name="cmp_function" type="callback" required="1" />
<def deftype="property" id="Image_2" kind="parameter" name="image" type="resource" required="1" />
<def deftype="property" id="OCI8_21" kind="parameter" name="schema" type="string"  />
<def deftype="property" id="Firebird/InterBase_11" kind="parameter" name="link_identifier" type="resource" required="1" />
<def deftype="property" id="dBase_4" kind="parameter" name="record_number" type="int" required="1">
      <description>  An integer which spans from 1 to the number of records in the database  (as returned by ).  </description>
</def>
<def deftype="property" id="Memcache_1" kind="parameter" name="value" type="int"  />
<def deftype="property" id="PDF_1" kind="parameter" name="pdfdoc" type="resource" required="1" />
<def deftype="property" id="MaxDB_1" kind="parameter" name="mode" type="bool" required="1" />
<def deftype="property" id="DOM_17" kind="parameter" name="localName" type="string" required="1">
      <description>  The local name.  </description>
</def>
<def deftype="property" id="Math_2" kind="parameter" name="y" type="float" required="1" />
<def deftype="property" id="Image_20" kind="parameter" name="red" type="int" required="1" />
<def deftype="property" id="DOM XML_6" kind="parameter" name="newnode" type="domelement" required="1" />
<def deftype="property" id="Math_1" kind="parameter" name="arg" type="float" required="1" />
<def deftype="property" id="DB++_12" kind="parameter" name="result" type="array" required="1" />
<def deftype="property" id="Cyrus IMAP_4" kind="parameter" name="user" type="string"  />
<def deftype="property" id="Arrays_43" kind="parameter" name="mode" type="int"  />
<def deftype="property" id="Image_32" kind="parameter" name="src_y" type="int" required="1" />
<def deftype="property" id="Lotus Notes_1" kind="parameter" name="server" type="string" required="1" />
<def deftype="property" id="Oracle_1" kind="parameter" name="cursor" type="resource" required="1" />
<def deftype="property" id="Hyperwave_4" kind="parameter" name="attributes" type="array" required="1" />
<def deftype="property" id="Image_33" kind="parameter" name="src_w" type="int" required="1" />
<def deftype="property" id="Zlib_1" kind="parameter" name="zp" type="resource" required="1">
      <description>  The gz-file pointer. It must be valid, and must point to a file  successfully opened by .  </description>
</def>
<def deftype="property" id="ClibPDF_47" kind="parameter" name="url" type="string" required="1" />
<def deftype="property" id="Informix_3" kind="parameter" name="userid" type="string"  />
<def deftype="property" id="ClibPDF_65" kind="parameter" name="value" type="float" required="1" />
<def deftype="property" id="Arrays_8" kind="parameter" name="array1" type="array" required="1" />
<def deftype="property" id="APD_13" kind="parameter" name="new_name" type="string" required="1" />
<def deftype="property" id="Filesystem_24" kind="parameter" name="dirname" type="string" required="1" />
<def deftype="property" id="Network_5" kind="parameter" name="errstr" type="string"  />
<def deftype="property" id="Ncurses_50" kind="parameter" name="intarg" type="int" required="1" />
<def deftype="property" id="PCNTL_4" kind="parameter" name="process_identifier" type="int"  />
<def deftype="property" id="Printer_9" kind="parameter" name="rec_x1" type="int" required="1" />
<def deftype="property" id="Image_72" kind="parameter" name="fontindex" type="int" required="1" />
<def deftype="property" id="FrontBase_8" kind="parameter" name="database_name" type="string" required="1" />
<def deftype="property" id="Directories_2" kind="parameter" name="dir_handle" type="resource" required="1" />
<def deftype="property" id="MCVE_24" kind="parameter" name="enddate" type="string" required="1" />
<def deftype="property" id="ClibPDF_40" kind="parameter" name="orientation" type="int" required="1" />
<def deftype="property" id="Informix_4" kind="parameter" name="bid" type="int" required="1" />
<def deftype="property" id="MCVE_14" kind="parameter" name="comments" type="string" required="1" />
<def deftype="property" id="Arrays_20" kind="parameter" name="strict" type="bool"  />
<def deftype="property" id="OpenSSL_2" kind="parameter" name="out" type="string" required="1" />
<def deftype="property" id="MaxDB_6" kind="parameter" name="resulttype" type="int"  />
<def deftype="property" id="IRC Gateway_20" kind="parameter" name="messages" type="array" required="1" />
<def deftype="property" id="LDAP_2" kind="parameter" name="entry" type="array" required="1" />
<def deftype="property" id="mysqli_1" kind="parameter" name="link" type="mysqli" required="1" />
<def deftype="property" id="ClibPDF_15" kind="parameter" name="radius" type="float" required="1" />
<def deftype="property" id="mnoGoSearch_1" kind="parameter" name="agent" type="resource" required="1" />
<def deftype="property" id="mailparse_5" kind="parameter" name="rfc2045buf" type="resource" required="1" />
<def deftype="property" id="Semaphore_3" kind="parameter" name="queue" type="resource" required="1" />
<def deftype="property" id="Bzip2_7" kind="parameter" name="data" type="string" required="1">
      <description>  The written data.  </description>
</def>
<def deftype="property" id="Hyperwave_2" kind="parameter" name="link" type="int" required="1" />
<def deftype="property" id="GMP_17" kind="parameter" name="start" type="int" required="1" />
<def deftype="property" id="Recode_1" kind="parameter" name="request" type="string" required="1" />
<def deftype="property" id="SQLite_10" kind="parameter" name="error_messagefilenamemodeerror_message" type="string"  />
<def deftype="property" id="MaxDB_10" kind="parameter" name="escapestr" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_4" kind="parameter" name="middle_name" type="string"  />
<def deftype="property" id="Ncurses_44" kind="parameter" name="pminrow" type="int" required="1" />
<def deftype="property" id="HTTP_8" kind="parameter" name="secure" type="bool"  />
<def deftype="property" id="CURL_6" kind="parameter" name="timeout" type="float"  />
<def deftype="property" id="Sockets_8" kind="parameter" name="optname" type="int" required="1" />
<def deftype="property" id="Filesystem_6" kind="parameter" name="enclosure" type="string"  />
<def deftype="property" id="ClibPDF_67" kind="parameter" name="white" type="float" required="1" />
<def deftype="property" id="Multibyte String_19" kind="parameter" name="result" type="array"  />
<def deftype="property" id="Calendar_10" kind="parameter" name="mode" type="int" required="1" />
<def deftype="property" id="xdiff_8" kind="parameter" name="error" type="string"  />
<def deftype="property" id="DOM XML_1" kind="parameter" name="uri" type="string" required="1" />
<def deftype="property" id="Image_48" kind="parameter" name="y1" type="int" required="1" />
<def deftype="property" id="Ncurses_10" kind="parameter" name="tr_corner" type="int" required="1" />
<def deftype="property" id="ClibPDF_70" kind="parameter" name="value" type="int" required="1" />
<def deftype="property" id="IMAP_10" kind="parameter" name="flag" type="string" required="1" />
<def deftype="property" id="SQLite_11" kind="parameter" name="rownum" type="int" required="1" />
<def deftype="property" id="MaxDB_11" kind="parameter" name="dbname" type="string" required="1" />
<def deftype="property" id="Image_16" kind="parameter" name="font" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_24" kind="parameter" name="action" type="int" required="1" />
<def deftype="property" id="MaxDB_20" kind="parameter" name="param_nr" type="int" required="1" />
<def deftype="property" id="PDO_3" kind="parameter" name="attribute" type="long" required="1">
      <description>  One of the constants. The constants that  apply to database connections are as follows:     </description>
</def>
<def deftype="property" id="FTP_1" kind="parameter" name="ftp_stream" type="resource" required="1">
      <description>  The link identifier of the FTP connection.  </description>
</def>
<def deftype="property" id="Image_97" kind="parameter" name="d_height" type="int" required="1" />
<def deftype="property" id="dBase_2" kind="parameter" name="record" type="array" required="1">
      <description>  An indexed array of data. The number of items must be equal to the number of  fields in the database, otherwise  will fail.    If you're using return value for this  parameter, remember to reset the key named .  </description>
</def>
<def deftype="property" id="Crack_2" kind="parameter" name="password" type="string" required="1" />
<def deftype="property" id="Cybercash_2" kind="parameter" name="wmk" type="string" required="1" />
<def deftype="property" id="DOM_13" kind="parameter" name="count" type="int" required="1">
      <description>  The number of characters to delete. If the sum of   and exceeds  the length, then all characters to the end of the data are deleted.  </description>
</def>
<def deftype="property" id="XSL_4" kind="parameter" name="doc" type="DOMDocument" required="1">
      <description>  The transformed document.  </description>
</def>
<def deftype="property" id="Date/Time_10" kind="parameter" name="second" type="int"  />
<def deftype="property" id="Image_53" kind="parameter" name="num_points" type="int" required="1" />
<def deftype="property" id="Strings_46" kind="parameter" name="args" type="array" required="1" />
<def deftype="property" id="ClibPDF_33" kind="parameter" name="height" type="float" required="1" />
<def deftype="property" id="Firebird/InterBase_3" kind="parameter" name="first_name" type="string"  />
<def deftype="property" id="FDF_25" kind="parameter" name="trigger" type="int" required="1" />
<def deftype="property" id="Multibyte String_10" kind="parameter" name="regs" type="array"  />
<def deftype="property" id="DB++_11" kind="parameter" name="key" type="string" required="1" />
<def deftype="property" id="Ncurses_41" kind="parameter" name="cols" type="int" required="1" />
<def deftype="property" id="Cyrus IMAP_12" kind="parameter" name="query" type="string" required="1" />
<def deftype="property" id="Printer_15" kind="parameter" name="ul_x" type="int" required="1" />
<def deftype="property" id="Image_39" kind="parameter" name="dst_h" type="int" required="1" />
<def deftype="property" id="DOM_10" kind="parameter" name="value" type="string" >
      <description>  The value of the element. By default, an empty element will be created.  You can also set the value later with .  </description>
</def>
<def deftype="property" id="SQLite_5" kind="parameter" name="finalize_func" type="callback" required="1" />
<def deftype="property" id="Ming (flash)_4" kind="parameter" name="version" type="int" required="1" />
<def deftype="property" id="Hyperwave_8" kind="parameter" name="destination_id" type="int" required="1" />
<def deftype="property" id="Strings_12" kind="parameter" name="hebrew_text" type="string" required="1" />
<def deftype="property" id="Image_13" kind="parameter" name="s" type="int" required="1" />
<def deftype="property" id="ClibPDF_68" kind="parameter" name="black" type="float" required="1" />
<def deftype="property" id="Sockets_3" kind="parameter" name="domain" type="int" required="1" />
<def deftype="property" id="SQLite_4" kind="parameter" name="step_func" type="callback" required="1" />
<def deftype="property" id="Image_22" kind="parameter" name="blue" type="int" required="1" />
<def deftype="property" id="Ncurses_7" kind="parameter" name="top" type="int" required="1" />
<def deftype="property" id="SWF_21" kind="parameter" name="twist" type="float" required="1" />
<def deftype="property" id="PHP Options/Info_4" kind="parameter" name="varname" type="string" required="1" />
<def deftype="property" id="vpopmail_9" kind="parameter" name="alias" type="string" required="1" />
<def deftype="property" id="Image_49" kind="parameter" name="x2" type="int" required="1" />
<def deftype="property" id="ClibPDF_13" kind="parameter" name="x_coor" type="float" required="1" />
<def deftype="property" id="Image_10" kind="parameter" name="cy" type="int" required="1" />
<def deftype="property" id="LDAP_1" kind="parameter" name="dn" type="string" required="1" />
<def deftype="property" id="MCAL_21" kind="parameter" name="end_year" type="int" required="1" />
<def deftype="property" id="DOM XML_4" kind="parameter" name="encoding" type="string"  />
<def deftype="property" id="mcrypt_3" kind="parameter" name="iv" type="string" required="1" />
<def deftype="property" id="Arrays_6" kind="parameter" name="keys" type="array" required="1" />
<def deftype="property" id="PCNTL_3" kind="parameter" name="pid" type="int"  />
<def deftype="property" id="Math_3" kind="parameter" name="x" type="float" required="1" />
<def deftype="property" id="Image_51" kind="parameter" name="style" type="int" required="1" />
<def deftype="property" id="MaxDB_4" kind="parameter" name="socket" type="string"  />
<def deftype="property" id="Ming (flash)_15" kind="parameter" name="degrees" type="float" required="1" />
<def deftype="property" id="Arrays_5" kind="parameter" name="preserve_keys" type="bool"  />
<def deftype="property" id="Informix_6" kind="parameter" name="errorcode" type="int"  />
<def deftype="property" id="Verisign Payflow Pro_2" kind="parameter" name="proxy_address" type="string"  />
<def deftype="property" id="tidy_2" kind="parameter" name="object" type="tidy" required="1" />
<def deftype="property" id="OCI8_5" kind="parameter" name="lob_type" type="int"  />
<def deftype="property" id="Sessions_5" kind="parameter" name="name" type="mixed" required="1" />
<def deftype="property" id="mcrypt_1" kind="parameter" name="cipher" type="int" required="1" />
<def deftype="property" id="FDF_20" kind="parameter" name="item" type="int" required="1" />
<def deftype="property" id="Network_2" kind="parameter" name="weight" type="array"  />
<def deftype="property" id="ODBC_2" kind="parameter" name="qualifier" type="string" required="1" />
<def deftype="property" id="DOM_15" kind="parameter" name="expression" type="string" required="1">
      <description>  The XPath expression to execute.  </description>
</def>
<def deftype="property" id="MCAL_28" kind="parameter" name="seconds" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_45" kind="parameter" name="event_name1" type="string" required="1" />
<def deftype="property" id="IMAP_14" kind="parameter" name="msgno" type="int" required="1" />
<def deftype="property" id="FrontBase_1" kind="parameter" name="OnOff" type="bool"  />
<def deftype="property" id="Hyperwave API_1" kind="parameter" name="parameter" type="array" required="1" />
<def deftype="property" id="Strings_11" kind="parameter" name="quote_style" type="int"  />
<def deftype="property" id="IIS Functions_9" kind="parameter" name="service_id" type="string" required="1" />
<def deftype="property" id="Arrays_36" kind="parameter" name="length" type="int"  />
<def deftype="property" id="Hyperwave API_4" kind="parameter" name="mimetype" type="string" required="1" />
<def deftype="property" id="Oracle_5" kind="parameter" name="sql_statement" type="string" required="1" />
<def deftype="property" id="LDAP_7" kind="parameter" name="result_entry_identifier" type="resource" required="1" />
<def deftype="property" id="Exif_5" kind="parameter" name="width" type="int" >
      <description>  The return width of the returned thumbnail.  </description>
</def>
<def deftype="property" id="mhash_1" kind="parameter" name="hash" type="int" required="1" />
<def deftype="property" id="IIS Functions_1" kind="parameter" name="comment" type="string" required="1" />
<def deftype="property" id="DOM_16" kind="parameter" name="contextnode" type="DOMNode" >
      <description>  The optional can be specified for  doing relative XPath queries. By default, the queries are relative to  the root element.  </description>
</def>
<def deftype="property" id="FTP_13" kind="parameter" name="username" type="string" required="1">
      <description>  The username ( ).  </description>
</def>
<def deftype="property" id="Sockets_7" kind="parameter" name="level" type="int" required="1" />
<def deftype="property" id="XSLT_1" kind="parameter" name="xh" type="resource" required="1" />
<def deftype="property" id="FTP_6" kind="parameter" name="timeout" type="int" >
      <description>  This parameter specifies the timeout for all subsequent network operations.  If omitted, the default value is 90 seconds. The timeout can be changed and  queried at any time with and   .  </description>
</def>
<def deftype="property" id="Image_61" kind="parameter" name="col" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_33" kind="parameter" name="field_number" type="int" required="1" />
<def deftype="property" id="Ncurses_23" kind="parameter" name="character" type="int" required="1" />
<def deftype="property" id="ClibPDF_38" kind="parameter" name="filename" type="string"  />
<def deftype="property" id="OCI8_14" kind="parameter" name="maxrows" type="int"  />
<def deftype="property" id="Image_21" kind="parameter" name="green" type="int" required="1" />
<def deftype="property" id="Image_36" kind="parameter" name="dst_image" type="resource" required="1" />
<def deftype="property" id="PDF_41" kind="parameter" name="intparam" type="int" required="1" />
<def deftype="property" id="Arrays_7" kind="parameter" name="values" type="array" required="1" />
<def deftype="property" id="Classes/Objects_9" kind="parameter" name="object" type="object" required="1" />
<def deftype="property" id="Firebird/InterBase_44" kind="parameter" name="event_handler" type="callback" required="1" />
<def deftype="property" id="Sybase_4" kind="parameter" name="handler" type="callback" required="1" />
<def deftype="property" id="Firebird/InterBase_2" kind="parameter" name="user_name" type="string" required="1" />
<def deftype="property" id="IRC Gateway_4" kind="parameter" name="reason" type="string" required="1" />
<def deftype="property" id="Ming (flash)_38" kind="parameter" name="right" type="int" required="1" />
<def deftype="property" id="Ncurses_31" kind="parameter" name="newmask" type="int" required="1" />
<def deftype="property" id="MS SQL Server_14" kind="parameter" name="severity" type="int" required="1" />
<def deftype="property" id="COM_1" kind="parameter" name="module_name" type="string" required="1" />
<def deftype="property" id="Hyperwave_16" kind="parameter" name="max_hits" type="int" required="1" />
<def deftype="property" id="Msession_2" kind="parameter" name="val" type="string" required="1" />
<def deftype="property" id="Filesystem_19" kind="parameter" name="length" type="int" required="1" />
<def deftype="property" id="Ncurses_13" kind="parameter" name="panel" type="resource" required="1" />
<def deftype="property" id="IRC Gateway_11" kind="parameter" name="recipient" type="string" required="1" />
<def deftype="property" id="XML_9" kind="parameter" name="base" type="string" required="1" />
<def deftype="property" id="Rar_2" kind="parameter" name="rar_file" type="resource" required="1" />
<def deftype="property" id="SQLite_7" kind="parameter" name="error_code" type="int" required="1" />
<def deftype="property" id="Image_12" kind="parameter" name="h" type="int" required="1" />
<def deftype="property" id="MaxDB_5" kind="parameter" name="debug" type="string" required="1" />
<def deftype="property" id="Image_14" kind="parameter" name="e" type="int" required="1" />
<def deftype="property" id="Date/Time_13" kind="parameter" name="is_dst" type="int"  />
<def deftype="property" id="FTP_5" kind="parameter" name="port" type="int" >
      <description>  This parameter specifies an alternate port to connect to. If it is  omitted or set to zero, then the default FTP port, 21, will be used.  </description>
</def>
<def deftype="property" id="ODBC_13" kind="parameter" name="row_number" type="int"  />
<def deftype="property" id="Image_35" kind="parameter" name="pct" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_30" kind="parameter" name="fetch_flag" type="int"  />
<def deftype="property" id="spl_5" kind="parameter" name="iterator" type="IteratorAggregate" required="1" />
<def deftype="property" id="FDF_21" kind="parameter" name="field_name" type="string" required="1" />
<def deftype="property" id="DOM_19" kind="parameter" name="feature" type="string" required="1">
      <description>  The feature to test.  </description>
</def>
<def deftype="property" id="MCVE_12" kind="parameter" name="amount" type="float" required="1" />
<def deftype="property" id="ICAP_4" kind="parameter" name="uid" type="int" required="1" />
<def deftype="property" id="ClibPDF_48" kind="parameter" name="space" type="float" required="1" />
<def deftype="property" id="ClibPDF_7" kind="parameter" name="content" type="string" required="1" />
<def deftype="property" id="SWF_5" kind="parameter" name="depth" type="int" required="1" />
<def deftype="property" id="Multibyte String_21" kind="parameter" name="limit" type="int"  />
<def deftype="property" id="Zip_2" kind="parameter" name="zip_entry" type="resource" required="1">
      <description>  A directory entry previously opened .  </description>
</def>
<def deftype="property" id="ClibPDF_42" kind="parameter" name="image" type="int" required="1" />
<def deftype="property" id="IMAP_22" kind="parameter" name="additional_headers" type="string"  />
<def deftype="property" id="OpenSSL_15" kind="parameter" name="passphrase" type="string"  />
<def deftype="property" id="Verisign Payflow Pro_4" kind="parameter" name="proxy_logon" type="string"  />
<def deftype="property" id="openal_1" kind="parameter" name="buffer" type="resource" required="1" />
<def deftype="property" id="xdiff_2" kind="parameter" name="file2" type="string" required="1" />
<def deftype="property" id="Hyperwave_10" kind="parameter" name="anchorID" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_20" kind="parameter" name="buffers" type="int"  />
<def deftype="property" id="Strings_6" kind="parameter" name="from" type="string" required="1" />
<def deftype="property" id="SWF_1" kind="parameter" name="framenumber" type="int" required="1" />
<def deftype="property" id="Ncurses_4" kind="parameter" name="bg" type="int" required="1" />
<def deftype="property" id="PDF_30" kind="parameter" name="modifier" type="float" required="1" />
<def deftype="property" id="Ncurses_2" kind="parameter" name="n" type="int" required="1" />
<def deftype="property" id="Direct IO_4" kind="parameter" name="flags" type="int" required="1" />
<def deftype="property" id="Zip_1" kind="parameter" name="zip" type="resource" required="1">
      <description>  A ZIP file previously opened with .  </description>
</def>
<def deftype="property" id="ClibPDF_1" kind="parameter" name="pdf_document" type="int" required="1" />
<def deftype="property" id="SWF_25" kind="parameter" name="xmax" type="float" required="1" />
<def deftype="property" id="IRC Gateway_10" kind="parameter" name="key" type="string"  />
<def deftype="property" id="YP/NIS_3" kind="parameter" name="callback" type="string" required="1" />
<def deftype="property" id="MCVE_9" kind="parameter" name="trackdata" type="string" required="1" />
<def deftype="property" id="Date/Time_2" kind="parameter" name="format" type="int"  />
<def deftype="property" id="DOM_2" kind="parameter" name="deep" type="bool" >
      <description>  Indicates whether to copy all descendant nodes. This parameter is  defaulted to .  </description>
</def>
<def deftype="property" id="Ncurses_30" kind="parameter" name="toscreen" type="bool" required="1" />
<def deftype="property" id="PDF_25" kind="parameter" name="d" type="float" required="1" />
<def deftype="property" id="Image_28" kind="parameter" name="src_im" type="resource" required="1" />
<def deftype="property" id="Verisign Payflow Pro_5" kind="parameter" name="proxy_password" type="string"  />
<def deftype="property" id="ssh2_10" kind="parameter" name="sftp" type="resource" required="1" />
<def deftype="property" id="Errors and Logging_8" kind="parameter" name="errno" type="int" required="1" />
<def deftype="property" id="PDF_7" kind="parameter" name="page" type="int" required="1" />
<def deftype="property" id="GMP_8" kind="parameter" name="base" type="int"  />
<def deftype="property" id="FDF_10" kind="parameter" name="face" type="int" required="1" />
<def deftype="property" id="Hyperwave API_3" kind="parameter" name="language" type="string" required="1" />
<def deftype="property" id="Sockets_10" kind="parameter" name="read" type="array" required="1" />
<def deftype="property" id="Calendar_2" kind="parameter" name="month" type="int" required="1" />
<def deftype="property" id="Classes/Objects_7" kind="parameter" name="obj" type="mixed" required="1" />
<def deftype="property" id="Msession_4" kind="parameter" name="param" type="int" required="1" />
<def deftype="property" id="ClibPDF_43" kind="parameter" name="pdfdoc" type="int" required="1" />
<def deftype="property" id="Direct IO_3" kind="parameter" name="args" type="mixed"  />
<def deftype="property" id="COM_30" kind="parameter" name="timestamp" type="int" required="1" />
<def deftype="property" id="APD_5" kind="parameter" name="dump_directory" type="string"  />
<def deftype="property" id="ClibPDF_2" kind="parameter" name="llx" type="float" required="1" />
<def deftype="property" id="xdiff_3" kind="parameter" name="context" type="int"  />
<def deftype="property" id="SWF_26" kind="parameter" name="ymin" type="float" required="1" />
<def deftype="property" id="FrontBase_5" kind="parameter" name="hostname" type="string"  />
<def deftype="property" id="Date/Time_6" kind="parameter" name="gmt_offset" type="float"  />
<def deftype="property" id="XML_10" kind="parameter" name="system_id" type="string" required="1" />
<def deftype="property" id="OCI8_6" kind="parameter" name="ph_name" type="string" required="1" />
<def deftype="property" id="DB++_14" kind="parameter" name="user" type="string" required="1" />
<def deftype="property" id="PDO_10" kind="parameter" name="fetch_style" type="int" >
      <description>  Controls how the next row will be returned to the caller. This value  must be one of the constants,  defaulting to .     : returns an array indexed by column  name as returned in your result set     (default): returns an array indexed by  both column name and column number as returned in your result set     : returns and assigns the  values of the columns in your result set to the PHP variables to which  they were bound with the  method     : combines   and ,  creating the object variable names as they are accessed     : returns an anonymous object with  property names that correspond to the column names returned in your  result set     : returns an array indexed by column  number as returned in your result set, starting at column 0    </description>
</def>
<def deftype="property" id="Image_73" kind="parameter" name="font_index" type="int" required="1" />
<def deftype="property" id="SWF_6" kind="parameter" name="g" type="float" required="1" />
<def deftype="property" id="Sockets_12" kind="parameter" name="except" type="array" required="1" />
<def deftype="property" id="Image_96" kind="parameter" name="wbmpname" type="string" required="1" />
<def deftype="property" id="XSLT_2" kind="parameter" name="processor" type="resource" required="1" />
<def deftype="property" id="Hyperwave_20" kind="parameter" name="object_record" type="string" required="1" />
<def deftype="property" id="ClibPDF_21" kind="parameter" name="y2" type="float" required="1" />
<def deftype="property" id="Sybase_1" kind="parameter" name="appname" type="string"  />
<def deftype="property" id="fam_1" kind="parameter" name="fam" type="resource" required="1" />
<def deftype="property" id="FrontBase_13" kind="parameter" name="field_offset" type="int"  />
<def deftype="property" id="YP/NIS_1" kind="parameter" name="domain" type="string" required="1" />
<def deftype="property" id="Classkit_4" kind="parameter" name="code" type="string" required="1">
      <description>  The code to be evaluated when  is called  </description>
</def>
<def deftype="property" id="IMAP_11" kind="parameter" name="flag" type="int"  />
<def deftype="property" id="Firebird/InterBase_1" kind="parameter" name="service_handle" type="resource" required="1" />
<def deftype="property" id="Firebird/InterBase_19" kind="parameter" name="charset" type="string"  />
<def deftype="property" id="ODBC_7" kind="parameter" name="dsn" type="string" required="1" />
<def deftype="property" id="MCVE_23" kind="parameter" name="startdate" type="string" required="1" />
<def deftype="property" id="Filesystem_4" kind="parameter" name="dest" type="string" required="1" />
<def deftype="property" id="xdiff_1" kind="parameter" name="file1" type="string" required="1" />
<def deftype="property" id="Arrays_39" kind="parameter" name="funcname" type="callback" required="1" />
<def deftype="property" id="Image_45" kind="parameter" name="height" type="int" required="1" />
<def deftype="property" id=".NET_1" kind="parameter" name="assembly_name" type="string" required="1" />
<def deftype="property" id="gettext_2" kind="parameter" name="category" type="int" required="1" />
<def deftype="property" id="Calendar_6" kind="parameter" name="day" type="int" required="1" />
<def deftype="property" id="Streams_7" kind="parameter" name="params" type="mixed"  />
<def deftype="property" id="Exif_6" kind="parameter" name="height" type="int" >
      <description>  The returned height of the returned thumbnail.  </description>
</def>
<def deftype="property" id="OCI8_16" kind="parameter" name="onoff" type="int" required="1" />
<def deftype="property" id="Date/Time_9" kind="parameter" name="minute" type="int"  />
<def deftype="property" id="id3_1" kind="parameter" name="frameId" type="string" required="1" />
<def deftype="property" id="COM_26" kind="parameter" name="variant" type="variant" required="1" />
<def deftype="property" id="Image_70" kind="parameter" name="space" type="int"  />
<def deftype="property" id="DB++_23" kind="parameter" name="script" type="string" required="1" />
<def deftype="property" id="Filesystem_20" kind="parameter" name="link" type="string" required="1" />
<def deftype="property" id="LDAP_11" kind="parameter" name="base_dn" type="string" required="1" />
<def deftype="property" id="XML-RPC_4" kind="parameter" name="output_options" type="array"  />
<def deftype="property" id="Ncurses_15" kind="parameter" name="g" type="int" required="1" />
<def deftype="property" id="MaxDB_2" kind="parameter" name="passwd" type="string"  />
<def deftype="property" id="IMAP_41" kind="parameter" name="options" type="int" required="1" />
<def deftype="property" id="ClibPDF_46" kind="parameter" name="xur" type="float" required="1" />
<def deftype="property" id="Firebird/InterBase_25" kind="parameter" name="argument" type="int"  />
<def deftype="property" id="ICAP_11" kind="parameter" name="old_name" type="string" required="1" />
<def deftype="property" id="Image_47" kind="parameter" name="x1" type="int" required="1" />
<def deftype="property" id="MS SQL Server_5" kind="parameter" name="servername" type="string"  />
<def deftype="property" id="Multibyte String_13" kind="parameter" name="pattern" type="string"  />
<def deftype="property" id="mailparse_1" kind="parameter" name="fp" type="resource" required="1" />
<def deftype="property" id="PostgreSQL_8" kind="parameter" name="oid" type="int" required="1" />
<def deftype="property" id="Date/Time_1" kind="parameter" name="format" type="string" required="1" />
<def deftype="property" id="XML_11" kind="parameter" name="public_id" type="string" required="1" />
<def deftype="property" id="Calendar_7" kind="parameter" name="year" type="int"  />
<def deftype="property" id="Firebird/InterBase_13" kind="parameter" name="len" type="int" required="1" />
<def deftype="property" id="Hyperwave_5" kind="parameter" name="connection" type="int" required="1" />
<def deftype="property" id="Arrays_10" kind="parameter" name="..." type="array"  />
<def deftype="property" id="Multibyte String_23" kind="parameter" name="haystack" type="string" required="1" />
<def deftype="property" id="PCNTL_8" kind="parameter" name="pid" type="int" required="1" />
<def deftype="property" id="OCI8_13" kind="parameter" name="skip" type="int"  />
<def deftype="property" id="Image_41" kind="parameter" name="y_size" type="int" required="1" />
<def deftype="property" id="Oracle_4" kind="parameter" name="cursor_or_connection" type="resource"  />
<def deftype="property" id="Calendar_3" kind="parameter" name="year" type="int" required="1" />
<def deftype="property" id="ClibPDF_30" kind="parameter" name="file_name" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_26" kind="parameter" name="connection" type="resource"  />
<def deftype="property" id="Printer_8" kind="parameter" name="rec_y" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_22" kind="parameter" name="role" type="string"  />
<def deftype="property" id="gettext_4" kind="parameter" name="msgid2" type="string" required="1" />
<def deftype="property" id="Lotus Notes_6" kind="parameter" name="note_id" type="string" required="1" />
<def deftype="property" id="Apache_3" kind="parameter" name="filename" type="string" required="1" />
<def deftype="property" id="GMP_10" kind="parameter" name="p" type="resource" required="1" />
<def deftype="property" id="DOM XML_18" kind="parameter" name="xpath_context" type="XPathContext" required="1" />
<def deftype="property" id="mcrypt_8" kind="parameter" name="algorithm" type="string" required="1" />
<def deftype="property" id="MCVE_18" kind="parameter" name="column" type="string" required="1" />
<def deftype="property" id="IRC Gateway_3" kind="parameter" name="nick" type="string" required="1" />
<def deftype="property" id="OpenSSL_4" kind="parameter" name="outfilename" type="string" required="1" />
<def deftype="property" id="Date/Time_3" kind="parameter" name="latitude" type="float"  />
<def deftype="property" id="shmop_1" kind="parameter" name="shmid" type="int" required="1" />
<def deftype="property" id="MCVE_6" kind="parameter" name="identifier" type="int" required="1" />
<def deftype="property" id="IMAP_31" kind="parameter" name="address" type="string" required="1" />
<def deftype="property" id="Hyperwave API_8" kind="parameter" name="hostname" type="string" required="1" />
<def deftype="property" id="Printer_28" kind="parameter" name="option" type="string" required="1" />
<def deftype="property" id="Filesystem_8" kind="parameter" name="use_include_path" type="int"  />
<def deftype="property" id="Arrays_2" kind="parameter" name="input" type="array" required="1" />
<def deftype="property" id="Image_19" kind="parameter" name="c" type="string" required="1" />
<def deftype="property" id="FTP_8" kind="parameter" name="handle" type="resource" required="1">
      <description>  An open file pointer in which we store the data.  </description>
</def>
<def deftype="property" id="Ncurses_11" kind="parameter" name="bl_corner" type="int" required="1" />
<def deftype="property" id="Program Execution_4" kind="parameter" name="process" type="resource" required="1" />
<def deftype="property" id="Ncurses_9" kind="parameter" name="tl_corner" type="int" required="1" />
<def deftype="property" id="muscat_1" kind="parameter" name="muscat_handle" type="resource" required="1" />
<def deftype="property" id="APD_1" kind="parameter" name="debug_level" type="int" required="1" />
<def deftype="property" id="Ming (flash)_18" kind="parameter" name="instance" type="resource" required="1" />
<def deftype="property" id="DB++_6" kind="parameter" name="errno" type="int"  />
<def deftype="property" id="Arrays_46" kind="parameter" name="prefix" type="string"  />
<def deftype="property" id="mSQL_1" kind="parameter" name="query_identifier" type="resource" required="1" />
<def deftype="property" id="Program Execution_1" kind="parameter" name="arg" type="string" required="1" />
<def deftype="property" id="Image_99" kind="parameter" name="threshold" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_29" kind="parameter" name="result" type="resource" required="1" />
<def deftype="property" id="Classes/Objects_1" kind="parameter" name="method_name" type="string" required="1" />
<def deftype="property" id="SWF_39" kind="parameter" name="z" type="float" required="1" />
<def deftype="property" id="dBase_1" kind="parameter" name="dbase_identifier" type="int" required="1">
      <description>  The database link identifier, returned by  or .  </description>
</def>
<def deftype="property" id="Streams_5" kind="parameter" name="filtername" type="string" required="1" />
<def deftype="property" id="OCI8_7" kind="parameter" name="variable" type="mixed" required="1" />
<def deftype="property" id="Firebird/InterBase_12" kind="parameter" name="blob_id" type="string" required="1" />
<def deftype="property" id="Sockets_2" kind="parameter" name="socket" type="resource"  />
<def deftype="property" id="Direct IO_7" kind="parameter" name="whence" type="int"  />
<def deftype="property" id="Directories_3" kind="parameter" name="path" type="string" required="1" />
<def deftype="property" id="Bzip2_6" kind="parameter" name="mode" type="string" required="1">
      <description>  Similar to the function ('r' for read,  'w' for write, etc.).  </description>
</def>
<def deftype="property" id="PDF_4" kind="parameter" name="lowerlefty" type="float" required="1" />
<def deftype="property" id="Hyperwave API_5" kind="parameter" name="buffer" type="string" required="1" />
<def deftype="property" id="Bzip2_1" kind="parameter" name="bz" type="resource" required="1">
      <description>  The file pointer. It must be valid and must point to a file  successfully opened by .  </description>
</def>
<def deftype="property" id="LDAP_9" kind="parameter" name="link" type="resource" required="1" />
<def deftype="property" id="MCVE_27" kind="parameter" name="location" type="string" required="1" />
<def deftype="property" id="COM_25" kind="parameter" name="right" type="mixed" required="1" />
<def deftype="property" id="OpenSSL_46" kind="parameter" name="x509" type="mixed" required="1" />
<def deftype="property" id="PDF_58" kind="parameter" name="gray" type="float" required="1" />
<def deftype="property" id="GMP_2" kind="parameter" name="b" type="resource" required="1" />
<def deftype="property" id="FTP_15" kind="parameter" name="recursive" type="bool" >
      <description>  If set to , the issued command will be .  </description>
</def>
<def deftype="property" id="Image_30" kind="parameter" name="dst_y" type="int" required="1" />
<def deftype="property" id="mcrypt_6" kind="parameter" name="module" type="string" required="1" />
<def deftype="property" id="OpenSSL_36" kind="parameter" name="crypted" type="string" required="1" />
<def deftype="property" id="LDAP_17" kind="parameter" name="deref" type="int"  />
<def deftype="property" id="Ncurses_12" kind="parameter" name="br_corner" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_10" kind="parameter" name="blob_handle" type="resource" required="1" />
<def deftype="property" id="Image_98" kind="parameter" name="d_width" type="int" required="1" />
<def deftype="property" id="OpenSSL_27" kind="parameter" name="headers" type="array" required="1" />
<def deftype="property" id="SNMP_7" kind="parameter" name="retries" type="int"  />
<def deftype="property" id="Filesystem_21" kind="parameter" name="pathname" type="string" required="1" />
<def deftype="property" id="OpenSSL_33" kind="parameter" name="cainfo" type="array"  />
<def deftype="property" id="vpopmail_7" kind="parameter" name="apop" type="bool"  />
<def deftype="property" id="Arrays_25" kind="parameter" name="arg" type="mixed"  />
<def deftype="property" id="IIS Functions_8" kind="parameter" name="script_extension" type="string" required="1" />
<def deftype="property" id="Arrays_34" kind="parameter" name="haystack" type="array" required="1" />
<def deftype="property" id="Streams_1" kind="parameter" name="stream_or_context" type="resource" required="1" />
<def deftype="property" id="DOM_11" kind="parameter" name="target" type="string" required="1">
      <description>  The target of the processing instruction.  </description>
</def>
<def deftype="property" id="PDF_15" kind="parameter" name="beta" type="float" required="1" />
<def deftype="property" id="OpenSSL_43" kind="parameter" name="x509cert" type="mixed" required="1" />
<def deftype="property" id="Filesystem_10" kind="parameter" name="offset" type="int"  />
<def deftype="property" id="Ming (flash)_8" kind="parameter" name="shape" type="resource" required="1" />
<def deftype="property" id="Ncurses_16" kind="parameter" name="b" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_31" kind="parameter" name="result_id" type="resource" required="1" />
<def deftype="property" id="CCVS_5" kind="parameter" name="type" type="string" required="1" />
<def deftype="property" id="PostgreSQL_3" kind="parameter" name="assoc_array" type="array" required="1" />
<def deftype="property" id="MaxDB_18" kind="parameter" name="types" type="string" required="1" />
<def deftype="property" id="Sockets_5" kind="parameter" name="backlog" type="int"  />
<def deftype="property" id="ClibPDF_32" kind="parameter" name="width" type="float" required="1" />
<def deftype="property" id="Ncurses_3" kind="parameter" name="fg" type="int" required="1" />
<def deftype="property" id="fam_2" kind="parameter" name="fam_monitor" type="resource" required="1" />
<def deftype="property" id="XML-RPC_6" kind="parameter" name="server" type="resource" required="1" />
<def deftype="property" id="mcrypt_5" kind="parameter" name="td" type="resource" required="1" />
<def deftype="property" id="Arrays_33" kind="parameter" name="needle" type="mixed" required="1" />
<def deftype="property" id="PDF_23" kind="parameter" name="b" type="float" required="1" />
<def deftype="property" id="OCI8_2" kind="parameter" name="lob_from" type="OCI-Lob" required="1" />
<def deftype="property" id="SOAP_4" kind="parameter" name="output_headers" type="array"  />
<def deftype="property" id="Ncurses_49" kind="parameter" name="smaxcol" type="int" required="1" />
<def deftype="property" id="COM_4" kind="parameter" name="class_name" type="string" required="1" />
<def deftype="property" id="Math_15" kind="parameter" name="..." type="number"  />
<def deftype="property" id="XML-RPC_2" kind="parameter" name="method" type="string" required="1" />
<def deftype="property" id="IMAP_35" kind="parameter" name="criteria" type="string" required="1" />
<def deftype="property" id="Arrays_29" kind="parameter" name="var" type="mixed" required="1" />
<def deftype="property" id="Streams_6" kind="parameter" name="read_write" type="int"  />
<def deftype="property" id="IMAP_20" kind="parameter" name="defaulthost" type="string"  />
<def deftype="property" id="Arrays_40" kind="parameter" name="userdata" type="mixed"  />
<def deftype="property" id="mailparse_4" kind="parameter" name="callbackfunc" type="callback"  />
<def deftype="property" id="Arrays_4" kind="parameter" name="size" type="int" required="1" />
<def deftype="property" id="Hyperwave API_2" kind="parameter" name="name" type="string"  />
<def deftype="property" id="mcrypt_2" kind="parameter" name="iv" type="string"  />
<def deftype="property" id="tidy_1" kind="parameter" name="config" type="mixed"  />
<def deftype="property" id="MCAL_18" kind="parameter" name="begin_year" type="int"  />
<def deftype="property" id="GMP_9" kind="parameter" name="gmpnumber" type="resource" required="1" />
<def deftype="property" id="MaxDB_17" kind="parameter" name="cipher" type="string" required="1" />
<def deftype="property" id="Image_69" kind="parameter" name="source" type="resource" required="1" />
<def deftype="property" id="FDF_28" kind="parameter" name="str1" type="string" required="1" />
<def deftype="property" id="Pspell_3" kind="parameter" name="conf" type="int" required="1" />
<def deftype="property" id="Network_6" kind="parameter" name="ip_address" type="string" required="1" />
<def deftype="property" id="Sockets_4" kind="parameter" name="protocol" type="int" required="1" />
<def deftype="property" id="CCVS_2" kind="parameter" name="invoice" type="string" required="1" />
<def deftype="property" id="ClibPDF_22" kind="parameter" name="x3" type="float" required="1" />
<def deftype="property" id="PHP Options/Info_3" kind="parameter" name="library" type="string" required="1" />
<def deftype="property" id="CCVS_7" kind="parameter" name="name" type="string" required="1" />
<def deftype="property" id="Multibyte String_6" kind="parameter" name="convmap" type="array" required="1" />
<def deftype="property" id="Pspell_2" kind="parameter" name="jargon" type="string"  />
<def deftype="property" id="dbx_1" kind="parameter" name="link_identifier" type="object" required="1" />
<def deftype="property" id="Streams_22" kind="parameter" name="address" type="string"  />
<def deftype="property" id="Classes/Objects_2" kind="parameter" name="obj" type="object" required="1" />
<def deftype="property" id="W32api_1" kind="parameter" name="typename" type="string" required="1" />
<def deftype="property" id="DB++_4" kind="parameter" name="dbpath" type="string"  />
<def deftype="property" id="OpenSSL_21" kind="parameter" name="infilename" type="string" required="1" />
<def deftype="property" id="ODBC_1" kind="parameter" name="connection_id" type="resource" required="1" />
<def deftype="property" id="OpenSSL_39" kind="parameter" name="signature" type="string" required="1" />
<def deftype="property" id="OpenSSL_1" kind="parameter" name="csr" type="resource" required="1" />
<def deftype="property" id="Multibyte String_17" kind="parameter" name="contents" type="string" required="1" />
<def deftype="property" id="Multibyte String_14" kind="parameter" name="position" type="int" required="1" />
<def deftype="property" id="PostgreSQL_7" kind="parameter" name="large_object" type="resource" required="1" />
<def deftype="property" id="ClibPDF_55" kind="parameter" name="scale" type="float" required="1" />
<def deftype="property" id="Hyperwave_6" kind="parameter" name="objectID" type="int" required="1" />
<def deftype="property" id="Ncurses_40" kind="parameter" name="rows" type="int" required="1" />
<def deftype="property" id="Ncurses_55" kind="parameter" name="fd" type="int" required="1" />
<def deftype="property" id="Ming (flash)_37" kind="parameter" name="left" type="int" required="1" />
<def deftype="property" id="BC math_1" kind="parameter" name="left_operand" type="string" required="1" />
<def deftype="property" id="Arrays_35" kind="parameter" name="offset" type="int" required="1" />
<def deftype="property" id="XML_1" kind="parameter" name="parser" type="resource" required="1">
      <description>  A reference to the XML parser to get byte index from.  </description>
</def>
<def deftype="property" id="Ming (flash)_14" kind="parameter" name="ddegrees" type="float" required="1" />
<def deftype="property" id="MCVE_3" kind="parameter" name="usersetup" type="int" required="1" />
<def deftype="property" id="Cybercash_3" kind="parameter" name="sk" type="string" required="1" />
<def deftype="property" id="MCAL_11" kind="parameter" name="category" type="string" required="1" />
<def deftype="property" id="Readline_1" kind="parameter" name="prompt" type="string" required="1" />
<def deftype="property" id="MCVE_2" kind="parameter" name="admin_password" type="string" required="1" />
<def deftype="property" id="ClibPDF_71" kind="parameter" name="red_value" type="float" required="1" />
<def deftype="property" id="BC math_3" kind="parameter" name="scale" type="int"  />
<def deftype="property" id="Ncurses_27" kind="parameter" name="enable" type="bool" required="1" />
<def deftype="property" id="Printer_18" kind="parameter" name="lr_y" type="int" required="1" />
<def deftype="property" id="FTP_11" kind="parameter" name="startpos" type="int"  />
<def deftype="property" id="HTTP_6" kind="parameter" name="path" type="string"  />
<def deftype="property" id="PostgreSQL_9" kind="parameter" name="data" type="array" required="1" />
<def deftype="property" id="Misc._3" kind="parameter" name="status" type="int" required="1" />
<def deftype="property" id="Ingres II_1" kind="parameter" name="link" type="resource"  />
<def deftype="property" id="openal_5" kind="parameter" name="device" type="resource" required="1" />
<def deftype="property" id="SQLite_6" kind="parameter" name="num_args" type="int"  />
<def deftype="property" id="LDAP_16" kind="parameter" name="timelimit" type="int"  />
<def deftype="property" id="OCI8_23" kind="parameter" name="ndx" type="int" required="1" />
<def deftype="property" id="HTTP_7" kind="parameter" name="domain" type="string"  />
<def deftype="property" id="DOM XML_13" kind="parameter" name="error" type="array"  />
<def deftype="property" id="IRC Gateway_1" kind="parameter" name="channel" type="string" required="1" />
<def deftype="property" id="DB++_16" kind="parameter" name="domlist" type="mixed" required="1" />
<def deftype="property" id="ODBC_24" kind="parameter" name="id" type="resource" required="1" />
<def deftype="property" id="DOM_25" kind="parameter" name="prefix" type="string" required="1">
      <description>  The prefix of the namespace.  </description>
</def>
<def deftype="property" id="MCVE_29" kind="parameter" name="street" type="string" required="1" />
<def deftype="property" id="Cyrus IMAP_8" kind="parameter" name="password" type="string"  />
<def deftype="property" id="Object Aggregation_3" kind="parameter" name="regexp" type="string" required="1" />
<def deftype="property" id="OpenSSL_34" kind="parameter" name="decrypted" type="string" required="1" />
<def deftype="property" id="Strings_26" kind="parameter" name="category" type="mixed" required="1" />
<def deftype="property" id="MCVE_4" kind="parameter" name="usersetup" type="resource" required="1" />
<def deftype="property" id="Ncurses_57" kind="parameter" name="attrs" type="int" required="1" />
<def deftype="property" id="IMAP_28" kind="parameter" name="msglist" type="string" required="1" />
<def deftype="property" id="SQLite_9" kind="parameter" name="ctor_params" type="array"  />
<def deftype="property" id="IMAP_8" kind="parameter" name="stream" type="resource" required="1" />
<def deftype="property" id="ClibPDF_4" kind="parameter" name="urx" type="float" required="1" />
<def deftype="property" id="Misc._6" kind="parameter" name="return" type="bool"  />
<def deftype="property" id="SOAP_1" kind="parameter" name="arguments" type="array"  />
<def deftype="property" id="SNMP_5" kind="parameter" name="community" type="string" required="1" />
<def deftype="property" id="mSQL_2" kind="parameter" name="query_identifier" type="int" required="1" />
<def deftype="property" id="Semaphore_7" kind="parameter" name="message" type="mixed" required="1" />
<def deftype="property" id="YP/NIS_2" kind="parameter" name="map" type="string" required="1" />
<def deftype="property" id="Ming (flash)_1" kind="parameter" name="a" type="int"  />
<def deftype="property" id="ICAP_5" kind="parameter" name="event_id" type="int" required="1" />
<def deftype="property" id="ClibPDF_73" kind="parameter" name="blue_value" type="float" required="1" />
<def deftype="property" id="ODBC_21" kind="parameter" name="table" type="string" required="1" />
<def deftype="property" id="Arrays_31" kind="parameter" name="function" type="callback" required="1" />
<def deftype="property" id="Image_15" kind="parameter" name="color" type="int" required="1" />
<def deftype="property" id="Classes/Objects_3" kind="parameter" name="parameter" type="mixed"  />
<def deftype="property" id="ClibPDF_31" kind="parameter" name="angle" type="float" required="1" />
<def deftype="property" id="Ming (flash)_7" kind="parameter" name="action" type="resource" required="1" />
<def deftype="property" id="DOM XML_10" kind="parameter" name="DomDocument" type="domdocument" required="1" />
<def deftype="property" id="Image_86" kind="parameter" name="s" type="string" required="1" />
<def deftype="property" id="gettext_3" kind="parameter" name="msgid1" type="string" required="1" />
<def deftype="property" id="MCAL_1" kind="parameter" name="mcal_stream" type="int" required="1" />
<def deftype="property" id="mcrypt_7" kind="parameter" name="lib_dir" type="string"  />
<def deftype="property" id="ICAP_10" kind="parameter" name="options" type="string" required="1" />
<def deftype="property" id="ClibPDF_69" kind="parameter" name="gray_value" type="float" required="1" />
<def deftype="property" id="MySQL_3" kind="parameter" name="unescaped_string" type="string" required="1" />
<def deftype="property" id="Multibyte String_7" kind="parameter" name="encoding_list" type="mixed"  />
<def deftype="property" id="SNMP_4" kind="parameter" name="method" type="int" required="1" />
<def deftype="property" id="SOAP_3" kind="parameter" name="input_headers" type="array"  />
<def deftype="property" id="FDF_1" kind="parameter" name="fdfdoc" type="resource" required="1" />
<def deftype="property" id="POSIX_1" kind="parameter" name="gid" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_47" kind="parameter" name="..." type="string"  />
<def deftype="property" id="DOM_1" kind="parameter" name="newnode" type="DOMNode" required="1">
      <description>  The appended child.  </description>
</def>
<def deftype="property" id="Ncurses_53" kind="parameter" name="label" type="string" required="1" />
<def deftype="property" id="Ncurses_6" kind="parameter" name="attrchar" type="int" required="1" />
<def deftype="property" id="SWF_9" kind="parameter" name="fontid" type="int" required="1" />
<def deftype="property" id="Filesystem_9" kind="parameter" name="use_include_path" type="bool"  />
<def deftype="property" id="OpenSSL_7" kind="parameter" name="configargs" type="array"  />
<def deftype="property" id="Directories_5" kind="parameter" name="context" type="resource"  />
<def deftype="property" id="Errors and Logging_1" kind="parameter" name="message" type="string" required="1" />
<def deftype="property" id="Sockets_9" kind="parameter" name="buf" type="string" required="1" />
<def deftype="property" id="Cybercash_1" kind="parameter" name="inbuff" type="string" required="1" />
<def deftype="property" id="Multibyte String_1" kind="parameter" name="to_encoding" type="string" required="1" />
<def deftype="property" id="IMAP_34" kind="parameter" name="personal" type="string" required="1" />
<def deftype="property" id="mailparse_2" kind="parameter" name="rfc2045" type="resource" required="1" />
<def deftype="property" id="Directories_1" kind="parameter" name="directory" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_21" kind="parameter" name="dialect" type="int"  />
<def deftype="property" id="FrontBase_3" kind="parameter" name="database" type="string"  />
<def deftype="property" id="MCVE_20" kind="parameter" name="column" type="int" required="1" />
<def deftype="property" id="FrontBase_12" kind="parameter" name="result_type" type="int"  />
<def deftype="property" id="Arrays_14" kind="parameter" name="value" type="mixed" required="1" />
<def deftype="property" id="mysqli_3" kind="parameter" name="result" type="mysqli_result" required="1" />
<def deftype="property" id="OpenSSL_17" kind="parameter" name="sealed_data" type="string" required="1" />
<def deftype="property" id="PDF_14" kind="parameter" name="alpha" type="float" required="1" />
<def deftype="property" id="IIS Functions_7" kind="parameter" name="virtual_path" type="string" required="1" />
<def deftype="property" id="Ncurses_45" kind="parameter" name="pmincol" type="int" required="1" />
<def deftype="property" id="Ncurses_8" kind="parameter" name="bottom" type="int" required="1" />
<def deftype="property" id="Firebird/InterBase_17" kind="parameter" name="database" type="string" required="1" />
<def deftype="property" id="MaxDB_7" kind="parameter" name="fieldnr" type="int" required="1" />
<def deftype="property" id="Image_17" kind="parameter" name="x" type="int" required="1" />
<def deftype="property" id="APD_2" kind="parameter" name="warning" type="string" required="1" />
<def deftype="property" id="DOM_6" kind="parameter" name="qualifiedName" type="string" >
      <description>  The qualified name of the document element to create.  </description>
</def>
<def deftype="property" id="OCI8_15" kind="parameter" name="field" type="int" required="1" />
<def deftype="property" id="Strings_33" kind="parameter" name="replace" type="mixed" required="1" />
<def deftype="property" id="Classkit_1" kind="parameter" name="classname" type="string" required="1" />
<def deftype="property" id="Semaphore_16" kind="parameter" name="shm_identifier" type="int" required="1" />
<def deftype="property" id="Image_37" kind="parameter" name="src_image" type="resource" required="1" />
<def deftype="property" id="MCAL_2" kind="parameter" name="stream" type="int" required="1" />
<def deftype="property" id="ClibPDF_51" kind="parameter" name="size" type="float" required="1" />
<def deftype="property" id="Image_29" kind="parameter" name="dst_x" type="int" required="1" />
<def deftype="property" id="ClibPDF_6" kind="parameter" name="title" type="string" required="1" />
<def deftype="property" id="COM_31" kind="parameter" name="variant" type="mixed" required="1" />
<def deftype="property" id="FrontBase_17" kind="parameter" name="batch_size" type="int"  />
<def deftype="property" id="SWF_14" kind="parameter" name="bitmapid" type="int" required="1" />
<def deftype="property" id="GMP_4" kind="parameter" name="n" type="resource" required="1" />
<def deftype="property" id="Ncurses_14" kind="parameter" name="r" type="int" required="1" />
<def deftype="property" id="Filesystem_11" kind="parameter" name="maxlen" type="int"  />
<def deftype="property" id="IMAP_17" kind="parameter" name="ref" type="string" required="1" />
<def deftype="property" id="Calendar_15" kind="parameter" name="timestamp" type="int"  />
<def deftype="property" id="COM_27" kind="parameter" name="type" type="int" required="1" />
<def deftype="property" id="ICAP_2" kind="parameter" name="stream_id" type="int" required="1" />
<def deftype="property" id="ClibPDF_36" kind="parameter" name="gsave" type="int" required="1" />
<def deftype="property" id="ClibPDF_12" kind="parameter" name="text" type="string" required="1" />
<def deftype="property" id="OCI8_1" kind="parameter" name="from" type="OCI-Collection" required="1" />
<def deftype="property" id="FTP_16" kind="parameter" name="oldname" type="string" required="1">
      <description>  The old file/directory name.  </description>
</def>
<def deftype="property" id="ClibPDF_58" kind="parameter" name="transition" type="int" required="1" />
<def deftype="property" id="Direct IO_1" kind="parameter" name="fd" type="resource" required="1" />
<def deftype="property" id="CCVS_1" kind="parameter" name="session" type="string" required="1" />
<def deftype="property" id="MaxDB_16" kind="parameter" name="capath" type="string" required="1" />
<def deftype="property" id="Strings_34" kind="parameter" name="count" type="int"  />
<def deftype="property" id="Classkit_3" kind="parameter" name="args" type="string" required="1">
      <description>  Comma-delimited list of arguments for the newly-created method  </description>
</def>
<def deftype="property" id="DOM XML_3" kind="parameter" name="format" type="bool"  />
<def deftype="property" id="MaxDB_3" kind="parameter" name="dbname" type="string"  />
<def deftype="property" id="GMP_3" kind="parameter" name="round" type="int"  />
<def deftype="property" id="MCVE_22" kind="parameter" name="key" type="int" required="1" />
<def deftype="property" id="MCVE_5" kind="parameter" name="argtype" type="int" required="1" />
<def deftype="property" id="ClibPDF_5" kind="parameter" name="ury" type="float" required="1" />
<def deftype="property" id="Cyrus IMAP_10" kind="parameter" name="host" type="string"  />
<def deftype="property" id="PDF_13" kind="parameter" name="r" type="float" required="1" />
<def deftype="property" id="IMAP_15" kind="parameter" name="quota_root" type="string" required="1" />
<def deftype="property" id="Semaphore_11" kind="parameter" name="sem_identifier" type="resource" required="1" />
<def deftype="property" id="Informix_5" kind="parameter" name="param" type="string" required="1" />
<def deftype="property" id="Date/Time_4" kind="parameter" name="longitude" type="float"  />
<def deftype="property" id="Variables handling_3" kind="parameter" name="var" type="mixed"  />
<def deftype="property" id="iconv_7" kind="parameter" name="charset" type="string" required="1" />
<def deftype="property" id="PostgreSQL_1" kind="parameter" name="connection_string" type="string" required="1" />
<def deftype="property" id="Image_34" kind="parameter" name="src_h" type="int" required="1" />
<def deftype="property" id="Printer_1" kind="parameter" name="color" type="string" required="1" />
<def deftype="property" id="PDF_40" kind="parameter" name="stringparam" type="string" required="1" />
<def deftype="property" id="CURL_4" kind="parameter" name="mh" type="resource" required="1" />
<def deftype="property" id="Hyperwave_3" kind="parameter" name="objid" type="int" required="1" />
<def deftype="property" id="Printer_10" kind="parameter" name="rec_y1" type="int" required="1" />
<def deftype="property" id="Hyperwave_7" kind="parameter" name="object_id_array" type="array" required="1" />
<def deftype="property" id="Aspell_1" kind="parameter" name="dictionary_link" type="int" required="1" />
<def deftype="property" id="Date/Time_8" kind="parameter" name="hour" type="int"  />
<def deftype="property" id="ssh2_2" kind="parameter" name="pubkeyfile" type="string" required="1" />
<def deftype="property" id="MCVE_15" kind="parameter" name="clerkid" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_27" kind="parameter" name="query" type="resource" required="1" />
<def deftype="property" id="Strings_13" kind="parameter" name="max_chars_per_line" type="int"  />
<def deftype="property" id="Program Execution_6" kind="parameter" name="cmd" type="string" required="1" />
<def deftype="property" id="PDO_2" kind="parameter" name="statement" type="string" required="1">
      <description>  The SQL statement to prepare and execute.  </description>
</def>
<def deftype="property" id="Classkit_9" kind="parameter" name="newname" type="string" required="1">
      <description>  The new name to give to the renamed method  </description>
</def>
<def deftype="property" id="FrontBase_19" kind="parameter" name="field" type="mixed"  />
<def deftype="property" id="Firebird/InterBase_5" kind="parameter" name="last_name" type="string"  />
<def deftype="property" id="HTTP_5" kind="parameter" name="expire" type="int"  />
<def deftype="property" id="DOM_24" kind="parameter" name="index" type="int" required="1">
      <description>  Index of the node into the collection.  </description>
</def>
<def deftype="property" id="Strings_19" kind="parameter" name="charlist" type="string"  />
<def deftype="property" id="Image_9" kind="parameter" name="cx" type="int" required="1" />
<def deftype="property" id="FDF_11" kind="parameter" name="fieldname" type="string" required="1" />
<def deftype="property" id="Image_18" kind="parameter" name="y" type="int" required="1" />
<def deftype="property" id="Ming (flash)_10" kind="parameter" name="green" type="int"  />
<def deftype="property" id="XML-RPC_1" kind="parameter" name="xml" type="string" required="1" />
<def deftype="property" id="Strings_32" kind="parameter" name="search" type="mixed" required="1" />
<def deftype="property" id="Network_13" kind="parameter" name="priority" type="int" required="1" />
<def deftype="property" id="Image_4" kind="parameter" name="imagetype" type="int" required="1" />
<def deftype="property" id="Date/Time_12" kind="parameter" name="day" type="int"  />
<def deftype="property" id="Parsekit_1" kind="parameter" name="errors" type="array" >
      <description>  A 2D hash of errors (including fatal errors) encountered during compilation.  Returned by reference.  </description>
</def>
<def deftype="property" id="DBM_2" kind="parameter" name="flags" type="string" required="1" />
<def deftype="property" id="MCVE_31" kind="parameter" name="cv" type="string" required="1" />
<def deftype="property" id="PDF_24" kind="parameter" name="c" type="float" required="1" />
<def deftype="property" id="Image_27" kind="parameter" name="dst_im" type="resource" required="1" />
<def deftype="property" id="Image_64" kind="parameter" name="chunk_size" type="int"  />
<def deftype="property" id="Apache_1" kind="parameter" name="variable" type="string" required="1" />
<def deftype="property" id="DOM_30" kind="parameter" name="options" type="int" >
      <description>   . Available  since PHP 5.1.0 and Libxml 2.6.7.  </description>
</def>
<def deftype="property" id="Arrays_11" kind="parameter" name="key_compare_func" type="callback" required="1" />
<def deftype="property" id="mysqli_2" kind="parameter" name="sockethostusernamepasswddbnameportsocket" type="string"  />
<def deftype="property" id="OCI8_10" kind="parameter" name="column_name" type="string" required="1" />
<def deftype="property" id="PDF_28" kind="parameter" name="fontname" type="string" required="1" />
<def deftype="property" id="Firebird/InterBase_18" kind="parameter" name="username" type="string"  />
<def deftype="property" id="FDF_7" kind="parameter" name="fdf_document" type="resource" required="1" />
<def deftype="property" id="Math_11" kind="parameter" name="val" type="float" required="1" />
<def deftype="property" id="FDF_29" kind="parameter" name="str2" type="string" required="1" />
<def deftype="property" id="Math_16" kind="parameter" name="numbers" type="array" required="1" />
<def deftype="property" id="XML_12" kind="parameter" name="notation_name" type="string" required="1" />
<def deftype="property" id="ClibPDF_62" kind="parameter" name="subject" type="string" required="1" />
<def deftype="property" id="Image_76" kind="parameter" name="slant" type="float" required="1" />
<def deftype="property" id="ret_tidyNode" kind="return" type="tidyNode" />
<def deftype="property" id="ret_bolean" kind="return" type="bolean" />
<def deftype="property" id="ret_int" kind="return" type="int" />
<def deftype="property" id="ret_XsltStylesheet" kind="return" type="XsltStylesheet" />
<def deftype="property" id="ret_DOMNodeList" kind="return" type="DOMNodeList" />
<def deftype="property" id="ret_number" kind="return" type="number" />
<def deftype="property" id="ret_boolean" kind="return" type="boolean" />
<def deftype="property" id="ret_tidy_node" kind="return" type="tidy_node" />
<def deftype="property" id="ret_DOMDocument" kind="return" type="DOMDocument" />
<def deftype="property" id="ret_array" kind="return" type="array" />
<def deftype="property" id="ret_SimpleXMLElement" kind="return" type="SimpleXMLElement" />
<def deftype="property" id="ret_stream" kind="return" type="stream" />
<def deftype="property" id="ret_HW_API_Reason" kind="return" type="HW_API_Reason" />
<def deftype="property" id="ret_XPathContext" kind="return" type="XPathContext" />
<def deftype="property" id="ret_OCI-Lob" kind="return" type="OCI-Lob" />
<def deftype="property" id="ret_bool" kind="return" type="bool" />
<def deftype="property" id="ret_DOMNode" kind="return" type="DOMNode" />
<def deftype="property" id="ret_float" kind="return" type="float" />
<def deftype="property" id="ret_domdocument" kind="return" type="domdocument" />
<def deftype="property" id="ret_string" kind="return" type="string" />
<def deftype="property" id="ret_domattribute" kind="return" type="domattribute" />
<def deftype="property" id="ret_void" kind="return" type="void" />
<def deftype="property" id="ret_object" kind="return" type="object" />
<def deftype="property" id="ret_variant" kind="return" type="variant" />
<def deftype="property" id="ret_domtext" kind="return" type="domtext" />
<def deftype="property" id="ret_DOMAttr" kind="return" type="DOMAttr" />
<def deftype="property" id="ret_DOMText" kind="return" type="DOMText" />
<def deftype="property" id="ret_mysqli" kind="return" type="mysqli" />
<def deftype="property" id="ret_hw_api_object" kind="return" type="hw_api_object" />
<def deftype="property" id="ret_resource" kind="return" type="resource" />
<def deftype="property" id="ret_domelement" kind="return" type="domelement" />
<def deftype="property" id="ret_DOMElement" kind="return" type="DOMElement" />
<def deftype="property" id="ret_SWFFill" kind="return" type="SWFFill" />
<def deftype="property" id="ret_DirectoryIterator" kind="return" type="DirectoryIterator" />
<def deftype="property" id="ret_OCI-Collection" kind="return" type="OCI-Collection" />
<def deftype="property" id="ret_mixed" kind="return" type="mixed" />
<def deftype="property" id="ret_HW_API_Content" kind="return" type="HW_API_Content" />

<group name=".NET">
  <description><![CDATA[.NET Functions]]></description>
  <element kind="function" name="dotnet_load">
    <properties>
      <property kind="return" type="int" />	
      <property kind="parameter" name="assembly_name" type="string" required="1" />
      <property kind="parameter" name="datatype_name" type="string"  />
      <property kind="parameter" name="codepage" type="int"  />
    </properties>
    
  </element>
</group>
<group name="APD">
  <description><![CDATA[Advanced PHP debugger]]></description>
  <element kind="function" name="apd_breakpoint">
    <description><![CDATA[  This can be used to stop the running of your script, and await responses  on the connected socket.  To step the program, just send enter (a blank  line), or enter a php command to be executed.  A typical session using  tcplisten would look like this.  ]]></description>
    <properties>
      <property kind="return" type="void" />	
      <property kind="parameter" name="debug_level" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="apd_callstack">
    <description><![CDATA[  Returns the current call stack as an array  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(apd_callstack());
?>]]></description>
      </property>
      <property kind="return" type="array" />	
    </properties>
    
  </element>
  <element kind="function" name="apd_clunk">
    <description><![CDATA[  Behaves like perl's Carp::cluck. Throw a warning and a callstack.  The default line delimiter is " < BR / > \n".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_clunk("Some Warning","<P>");
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="warning" type="string" required="1" />
      <property kind="parameter" name="delimiter" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="apd_continue">
    <description><![CDATA[  Usually sent via the socket to restart the interpreter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_continue(0);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="APD_1" />
    </properties>
    
  </element>
  <element kind="function" name="apd_croak">
    <description><![CDATA[  Behaves like perl's Carp::croak. Throw an error, a callstack and then  exit.  The default line delimiter is " < BR / > \n".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_croak("Some Warning","<P>");
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="APD_2" />
      <property ref="APD_3" />
    </properties>
    
  </element>
  <element kind="function" name="apd_dump_function_table">
    <description><![CDATA[  Outputs the current function table.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_dump_function_table();
?>]]></description>
      </property>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="apd_dump_persistent_resources">
    <description><![CDATA[  Return all persistent resources as an array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(apd_dump_persistent_resources());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="apd_dump_regular_resources">
    <description><![CDATA[  Return all current regular resources as an array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(apd_dump_regular_resources());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="apd_echo">
    <description><![CDATA[  Usually sent via the socket to request information about the running  script.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_echo($i);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="output" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="apd_get_active_symbols">
    <description><![CDATA[  Returns the names of all the variables defined in the active scope, (not  their values)  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_echo(apd_get_active_symbols());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="apd_set_pprof_trace">
    <description><![CDATA[  Starts debugging to {dump_directory}/pprof_{process_id}, if  dump_directory is not set, then the apd.dumpdir setting from the   file is used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_set_pprof_trace();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="dump_directory" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="apd_set_session">
    <description><![CDATA[  This can be used to increase or decrease debugging in a different area of  your application,.debug_level is an integer which is formed by adding  together the following values:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_set_session(9);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="APD_1" />
    </properties>
    
  </element>
  <element kind="function" name="apd_set_session_trace">
    <description><![CDATA[  Starts debugging to {dump_directory}/apd_dump_{process_id}, if  dump_directory is not set, then the apd.dumpdir setting from the   file is used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apd_set_session_trace(99);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="APD_1" />
      <property ref="APD_5" />
    </properties>
    
  </element>
  <element kind="function" name="apd_set_socket_session_trace">
    <description><![CDATA[  Connects to the tcp server (eg. tcplisten) specified IP or Unix Domain  socket (like a file), and sends debugging data to the socket. You can  use any port, but higher numbers are better as most of the lower numbers  may be used by other system services.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  apd_set_socket_session_trace("127.0.0.1",APD_AF_INET,7112,0);
?>]]></description>
      </property>
      <property kind="return" type="bool" />	
      <property kind="parameter" name="ip_address_or_unix_socket_file" type="string" required="1" />
      <property kind="parameter" name="socket_type" type="int" required="1" />
      <property kind="parameter" name="port" type="int" required="1" />
      <property ref="APD_1" />
    </properties>
    
  </element>
  <element kind="function" name="override_function">
    <description><![CDATA[  Syntax similar to create_function(). Overrides built-in functions  (replaces them in the symbol table).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
override_function('test', '$a,$b', 'echo "DOING TEST"; return $a * $b;');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="function_name" type="string" required="1" />
      <property kind="parameter" name="function_args" type="string" required="1" />
      <property kind="parameter" name="function_code" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="rename_function">
    <description><![CDATA[  Renames orig_name to new_name in the global function_table.  Useful  for temporarily overriding builtin functions.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
rename_function('mysql_connect', 'debug_mysql_connect' );
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="original_name" type="string" required="1" />
      <property kind="parameter" name="new_name" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="Apache">
  <description><![CDATA[Apache-specific Functions]]></description>
  <element kind="function" name="apache_child_terminate">
    <description><![CDATA[   apache_child_terminate will register the  Apache process executing the current PHP request for termination  once execution of PHP code it is completed. It may be used to  terminate a process after a script with high memory consumption has  been run as memory will usually only be freed internally but not  given back to the operating system.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="apache_get_modules">
    <description><![CDATA[  This function returns an array with the loaded Apache modules.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(apache_get_modules());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="apache_get_version">
    <description><![CDATA[   apache_get_version returns the version of Apache as  string, or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$version = apache_get_version();
echo "$version\n";
?>]]></description>
      </property>
      <property kind="return" type="string" />	
    </properties>
    
  </element>
  <element kind="function" name="apache_getenv">
    <description><![CDATA[   apache_getenv returns the value of the Apache  environment variable specified by variable , or   on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$ret = apache_getenv("SERVER_ADDR");
echo $ret;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="variable" type="string" required="1" />
      <property kind="parameter" name="walk_to_top" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="apache_lookup_uri">
    <description><![CDATA[  This performs a partial request for a URI.  It goes just far  enough to obtain all the important information about the given  resource and returns this information in a class.  The properties  of the returned class are:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$info = apache_lookup_uri('index.php?var=value');
print_r($info);

if (file_exists($info->filename)) {
    echo 'file exists!';
}
?>]]></description>
      </property>
      <property kind="return" type="object" />	
      <property kind="parameter" name="filename" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="apache_note">
    <description><![CDATA[   apache_note is an Apache-specific function  which gets and sets values in a request's   table. If called with one argument, it  returns the current value of note   . If called with two arguments, it  sets the value of note to   and returns the previous value of  note .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="note_name" type="string" required="1" />
      <property kind="parameter" name="note_value" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="apache_request_headers">
    <description><![CDATA[   apache_request_headers returns an associative  array of all the HTTP headers in the current request.  This is only  supported when PHP runs as an  module.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$headers = apache_request_headers();

foreach ($headers as $header => $value) {
    echo "$header: $value <br />\n";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="apache_reset_timeout">
    <description><![CDATA[   apache_reset_timeout resets the Apache write timer,  which defaults to 300 seconds. With and periodic   apache_reset_timeout calls, Apache can theoretically  run forever.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="apache_response_headers">
    <description><![CDATA[  Returns an array of all Apache response headers.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(apache_response_headers());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="apache_setenv">
    <description><![CDATA[   apache_setenv sets the value of the Apache  environment variable specified by   variable .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
apache_setenv("EXAMPLE_VAR", "Example Value");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_1" />
      <property kind="parameter" name="value" type="string" required="1" />
      <property ref="Apache_2" />
    </properties>
    
  </element>
  <element kind="function" name="ascii2ebcdic">
    <description><![CDATA[   ascii2ebcdic is an Apache-specific function which  is available only on EBCDIC based operating systems (OS/390, BS2000).  It translates the ASCII encoded string ascii_str  to its equivalent EBCDIC representation (binary safe), and returns  the result.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="ascii_str" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ebcdic2ascii">
    <description><![CDATA[   ebcdic2ascii is an Apache-specific function which  is available only on EBCDIC based operating systems (OS/390, BS2000).  It translates the EBCDIC encoded string ebcdic_str  to its equivalent ASCII representation (binary safe), and returns  the result.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="ebcdic_str" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="getallheaders">
    <description><![CDATA[   getallheaders is an alias for   apache_request_headers .  It will return an  associative array of all the HTTP headers in the current request.  Please read the apache_request_headers  documentation for more information on how this function works.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="virtual">
    <description><![CDATA[   virtual is an Apache-specific function which  is equivalent to < !--#include virtual...-- > in mod_include.  It performs an Apache sub-request.  It is useful for including  CGI scripts or .shtml files, or anything else that you would  parse through Apache.  Note that for a CGI script, the script  must generate valid CGI headers.  At the minimum that means it  must generate a Content-type header.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
</group>
<group name="Arrays">
  <description><![CDATA[Array Functions]]></description>
  <element kind="function" name="array">
    <description><![CDATA[  Returns an array of the parameters.  The parameters can be given  an index with the operator.  Read the section  on the for more  information on what an array is.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fruits = array (
    "fruits"  => array("a" => "orange", "b" => "banana", "c" => "apple"),
    "numbers" => array(1, 2, 3, 4, 5, 6),
    "holes"   => array("first", 5 => "second", "third")
);
?>

      

<?php
$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);
print_r($array);
?>

      

<?php
$firstquarter = array(1 => 'January', 'February', 'March');
print_r($firstquarter);
?>

      

<?php

$foo = array('bar' => 'baz');
echo "Hello {$foo['bar']}!"; // Hello baz!

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="..." type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="array_change_key_case">
    <description><![CDATA[   array_change_key_case changes the  keys in the input array to  be all lowercase or uppercase. The change depends  on the last optional case  parameter. You can pass two constants there,   and   . The default is   . The function will leave  number indices as is.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input_array = array("FirSt" => 1, "SecOnd" => 4);
print_r(array_change_key_case($input_array, CASE_UPPER));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="input" type="array" required="1" />
      <property kind="parameter" name="case" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="array_chunk">
    <description><![CDATA[   array_chunk splits the array into  several arrays with size values  in them. You may also have an array with less values  at the end. You get the arrays as members of a  multidimensional array indexed with numbers starting  from zero.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input_array = array('a', 'b', 'c', 'd', 'e');
print_r(array_chunk($input_array, 2));
print_r(array_chunk($input_array, 2, true));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_2" />
      <property kind="parameter" name="size" type="int" required="1" />
      <property kind="parameter" name="preserve_keys" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="array_combine">
    <description><![CDATA[  Returns an by using the values from the   keys array as keys and the values from the   values array as the corresponding values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = array('green', 'red', 'yellow');
$b = array('avocado', 'apple', 'banana');
$c = array_combine($a, $b);

print_r($c);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="keys" type="array" required="1" />
      <property kind="parameter" name="values" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_count_values">
    <description><![CDATA[   array_count_values returns an array using  the values of the input array as keys and  their frequency in input as values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array(1, "hello", 1, "world", "hello");
print_r(array_count_values($array));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_2" />
    </properties>
    
  </element>
  <element kind="function" name="array_diff">
    <description><![CDATA[   array_diff returns an array  containing all the values of array1  that are not present in any of the other arguments.  Note that keys are preserved.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "red", "blue", "red");
$array2 = array("b" => "green", "yellow", "red");
$result = array_diff($array1, $array2);

print_r($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="array1" type="array" required="1" />
      <property kind="parameter" name="array2" type="array" required="1" />
      <property kind="parameter" name="..." type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="array_diff_assoc">
    <description><![CDATA[   array_diff_assoc returns an  containing all the values from array1  that are not present in any of the other arguments.  Note that the keys are used in the comparison unlike   array_diff .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "green", "yellow", "red");
$result = array_diff_assoc($array1, $array2);
print_r($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_diff_key">
    <description><![CDATA[   array_diff_key returns an array  containing all the values of array1  that have keys that are not present in any of the other arguments.  Note that the associativity is preserved. This function is like   array_diff except the comparison is done on the  keys instead of the values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);

var_dump(array_diff_key($array1, $array2));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_diff_uassoc">
    <description><![CDATA[   array_diff_uassoc returns an  containing all the values from array1  that are not present in any of the other arguments.  Note that the keys are used in the comparison unlike   array_diff . This comparison is done by a user supplied callback function.  It must return an integer less than, equal  to, or greater than zero if the first argument is considered to  be respectively less than, equal to, or greater than the  second. This is unlike array_diff_assoc where an  internal function for comparing the indices is used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function key_compare_func($a, $b) 
{
    if ($a === $b) {
        return 0;
    }
    return ($a > $b)? 1:-1;
}

$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "green", "yellow", "red");
$result = array_diff_uassoc($array1, $array2, "key_compare_func");
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property kind="parameter" name="key_compare_func" type="callback" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_diff_ukey">
    <description><![CDATA[   array_diff_ukey returns an array  containing all the values of array1  that have keys that are not present in any of the other arguments.  Note that the associativity is preserved. This function is like   array_diff except the comparison is done on the  keys instead of the values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function key_compare_func($key1, $key2)
{
    if ($key1 == $key2)
        return 0;
    else if ($key1 > $key2)
        return 1;
    else
        return -1;
}

$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);

var_dump(array_diff_ukey($array1, $array2, 'key_compare_func'));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_11" />
    </properties>
    
  </element>
  <element kind="function" name="array_fill">
    <description><![CDATA[   array_fill fills an array with   num entries of the value of the   value parameter, keys starting at the   start_index parameter.  Note that  num must be a number greater than zero, or PHP will throw  a warning.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = array_fill(5, 6, 'banana');
print_r($a);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="start_index" type="int" required="1" />
      <property kind="parameter" name="num" type="int" required="1" />
      <property kind="parameter" name="value" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_filter">
    <description><![CDATA[   array_filter iterates over each value in  the input array passing them to the   callback function.  If the  callback function returns true, the current  value from input is returned into the  result array.  Array keys are preserved.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function odd($var) 
{
    return($var % 2 == 1);
}

function even($var) 
{
    return($var % 2 == 0);
}

$array1 = array("a"=>1, "b"=>2, "c"=>3, "d"=>4, "e"=>5);
$array2 = array(6, 7, 8, 9, 10, 11, 12);

echo "Odd :\n";
print_r(array_filter($array1, "odd"));
echo "Even:\n";
print_r(array_filter($array2, "even"));
?>

      

<?php

$entry = array(
             0 => 'foo',
             1 => false,
             2 => -1,
             3 => null,
             4 => ''
          );

print_r(array_filter($entry));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_2" />
      <property kind="parameter" name="callback" type="callback"  />
    </properties>
    
  </element>
  <element kind="function" name="array_flip">
    <description><![CDATA[   array_flip returns an in flip  order, i.e. keys from trans become values and values  from trans become keys.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$trans = array_flip($trans);
$original = strtr($str, $trans);
?>

      

<?php
$trans = array("a" => 1, "b" => 1, "c" => 2);
$trans = array_flip($trans);
print_r($trans);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="trans" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_intersect">
    <description><![CDATA[   array_intersect returns an array  containing all the values of array1  that are present in all the arguments.  Note that keys are preserved.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "red", "blue");
$array2 = array("b" => "green", "yellow", "red");
$result = array_intersect($array1, $array2);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_intersect_assoc">
    <description><![CDATA[    $result_array will look like:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "green", "yellow", "red");
$result_array = array_intersect_assoc($array1, $array2);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_intersect_key">
    <description><![CDATA[   array_intersect_key returns an array  containing all the values of array1  which have matching keys that are present in all the arguments.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);

var_dump(array_intersect_key($array1, $array2));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_intersect_uassoc">
    <description><![CDATA[   array_intersect_uassoc returns an array  containing all the values of array1  that are present in all the arguments. Note that the keys are used in  the comparison unlike in array_intersect .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");

print_r(array_intersect_uassoc($array1, $array2, "strcasecmp"));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_11" />
    </properties>
    
  </element>
  <element kind="function" name="array_intersect_ukey">
    <description><![CDATA[   array_intersect_ukey returns an array  containing all the values of array1  which have matching keys that are present in all the arguments.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function key_compare_func($key1, $key2)
{
    if ($key1 == $key2)
        return 0;
    else if ($key1 > $key2)
        return 1;
    else
        return -1;
}

$array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
$array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);

var_dump(array_intersect_ukey($array1, $array2, 'key_compare_func'));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_11" />
    </properties>
    
  </element>
  <element kind="function" name="array_key_exists">
    <description><![CDATA[   array_key_exists returns if the  given key is set in the array.   key can be any value possible  for an array index. array_key_exists also works  on objects.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$search_array = array('first' => 1, 'second' => 4);
if (array_key_exists('first', $search_array)) {
    echo "The 'first' element is in the array";
}
?>

      

<?php
$search_array = array('first' => null, 'second' => 4);

// returns false
isset($search_array['first']);

// returns true
array_key_exists('first', $search_array);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="key" type="mixed" required="1" />
      <property kind="parameter" name="search" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_keys">
    <description><![CDATA[   array_keys returns the keys, numeric and  string, from the input array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array(0 => 100, "color" => "red");
print_r(array_keys($array));

$array = array("blue", "red", "green", "blue", "blue");
print_r(array_keys($array, "blue"));

$array = array("color" => array("blue", "red", "green"),
               "size"  => array("small", "medium", "large"));
print_r(array_keys($array));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_2" />
      <property kind="parameter" name="search_value" type="mixed"  />
      <property kind="parameter" name="strict" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="array_map">
    <description><![CDATA[   array_map returns an array containing all  the elements of arr1 after applying the   callback function to each one.  The number of parameters that the callback  function accepts  should match the number of arrays  passed to the array_map  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function cube($n) 
{
    return($n * $n * $n);
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cube", $a);
print_r($b);
?>

      

<?php
function show_Spanish($n, $m) 
{
    return("The number $n is called $m in Spanish");
}

function map_Spanish($n, $m) 
{
    return(array($n => $m));
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("show_Spanish", $a, $b);
print_r($c);

$d = array_map("map_Spanish", $a , $b);
print_r($d);
?>

      

<?php
$a = array(1, 2, 3, 4, 5);
$b = array("one", "two", "three", "four", "five");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = array_map(null, $a, $b, $c);
print_r($d);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="callback" type="callback" required="1" />
      <property kind="parameter" name="arr1" type="array" required="1" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_merge">
    <description><![CDATA[   array_merge merges the elements of one or  more arrays together so that the values of one are appended to  the end of the previous one.  It returns the resulting array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("color" => "red", 2, 4);
$array2 = array("a", "b", "color" => "green", "shape" => "trapezoid", 4);
$result = array_merge($array1, $array2);
print_r($result);
?>

      

<?php
$array1 = array();
$array2 = array(1 => "data");
$result = array_merge($array1, $array2);
?>

      

<?php
$array1 = array();
$array2 = array(1 => "data");
$result = $array1 + $array2;
?>

      

<?php
$beginning = 'foo';
$end = array(1 => 'bar');
$result = array_merge((array)$beginning, (array)$end);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property kind="parameter" name="array2" type="array"  />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_merge_recursive">
    <description><![CDATA[   array_merge_recursive merges the elements of  two or more arrays together so that the values of one are appended  to the end of the previous one.  It returns the resulting array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$ar1 = array("color" => array("favorite" => "red"), 5);
$ar2 = array(10, "color" => array("favorite" => "green", "blue"));
$result = array_merge_recursive($ar1, $ar2);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_multisort">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$ar1 = array("10", 100, 100, "a");
$ar2 = array(1, 3, "2", 1);
array_multisort($ar1, $ar2);

var_dump($ar1);
var_dump($ar2);
?>

      

<?php
$ar = array(array("10", 100, 100, "a"), array(1, 3, "2", 1));
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                $ar[1], SORT_NUMERIC, SORT_DESC);
?>

      

<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);
?>

      

<?php
// Obtain a list of columns
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// Sort the data with volume descending, edition ascending
// Add $data as the last parameter, to sort by the common key
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>

      

<?php
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="ar1" type="array" required="1" />
      <property kind="parameter" name="arg" type="mixed"  />
      <property ref="Arrays_1" />
      <property ref="Arrays_10" />
    </properties>
    
  </element>
  <element kind="function" name="array_pad">
    <description><![CDATA[   array_pad returns a copy of the   input padded to size specified by   pad_size with value   pad_value . If   pad_size is positive then the array is  padded on the right, if it's negative then on the left. If the  absolute value of pad_size is less than or  equal to the length of the input then no  padding takes place.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input = array(12, 10, 9);

$result = array_pad($input, 5, 0);
// result is array(12, 10, 9, 0, 0)

$result = array_pad($input, -7, -1);
// result is array(-1, -1, -1, -1, 12, 10, 9)

$result = array_pad($input, 2, "noop");
// not padded
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_2" />
      <property kind="parameter" name="pad_size" type="int" required="1" />
      <property kind="parameter" name="pad_value" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_pop">
    <description><![CDATA[   array_pop pops and returns the last value of  the array , shortening the   array by one element.  If array is empty (or is not an array),   will be returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$stack = array("orange", "banana", "apple", "raspberry");
$fruit = array_pop($stack);
print_r($stack);
?>]]></description>
      </property>
      <property kind="return" type="mixed" />	
      <property kind="parameter" name="array" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_push">
    <description><![CDATA[   array_push treats   array as a stack, and pushes the passed  variables onto the end of array . The  length of array increases by the number of  variables pushed. Has the same effect as:    repeated for each var .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$stack = array("orange", "banana");
array_push($stack, "apple", "raspberry");
print_r($stack);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Arrays_28" />
      <property kind="parameter" name="var" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="array_rand">
    <description><![CDATA[   array_rand is rather useful when you want to  pick one or more random entries out of an array. It takes an   input array and an optional argument   num_req which specifies how many entries you  want to pick - if not specified, it defaults to 1.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
srand((float) microtime() * 10000000);
$input = array("Neo", "Morpheus", "Trinity", "Cypher", "Tank");
$rand_keys = array_rand($input, 2);
echo $input[$rand_keys[0]] . "\n";
echo $input[$rand_keys[1]] . "\n";
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_2" />
      <property kind="parameter" name="num_req" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="array_reduce">
    <description><![CDATA[   array_reduce applies iteratively the   function function to the elements of the  array input , so as to reduce the array to  a single value. If the optional initial is  available, it will be used at the beginning of the process, or as  a final result in case the array is empty.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function rsum($v, $w) 
{
    $v += $w;
    return $v;
}

function rmul($v, $w) 
{
    $v *= $w;
    return $v;
}

$a = array(1, 2, 3, 4, 5);
$x = array();
$b = array_reduce($a, "rsum");
$c = array_reduce($a, "rmul", 10);
$d = array_reduce($x, "rsum", 1);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_2" />
      <property kind="parameter" name="function" type="callback" required="1" />
      <property kind="parameter" name="initial" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="array_reverse">
    <description><![CDATA[   array_reverse takes input   array and returns a new array with the  order of the elements reversed, preserving the keys if   preserve_keys is .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input  = array("php", 4.0, array("green", "red"));
$result = array_reverse($input);
$result_keyed = array_reverse($input, true);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_28" />
      <property ref="Arrays_5" />
    </properties>
    
  </element>
  <element kind="function" name="array_search">
    <description><![CDATA[  Searches haystack for   needle and returns the key if it is found in  the array, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');

$key = array_search('green', $array); // $key = 2;
$key = array_search('red', $array);   // $key = 1;
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="needle" type="mixed" required="1" />
      <property kind="parameter" name="haystack" type="array" required="1" />
      <property ref="Arrays_20" />
    </properties>
    
  </element>
  <element kind="function" name="array_shift">
    <description><![CDATA[   array_shift shifts the first value of the   array off and returns it, shortening the   array by one element and moving everything  down. All numerical array keys will be modified to start counting from zero  while literal keys won't be touched. If array is empty  (or is not an array), will be returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$stack = array("orange", "banana", "apple", "raspberry");
$fruit = array_shift($stack);
print_r($stack);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="array_slice">
    <description><![CDATA[   array_slice returns the sequence of elements  from the array array as specified by the   offset and length  parameters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // returns "c", "d", and "e"
$output = array_slice($input, -2, 1);  // returns "d"
$output = array_slice($input, 0, 3);   // returns "a", "b", and "c"

// note the differences in the array keys
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_28" />
      <property kind="parameter" name="offset" type="int" required="1" />
      <property kind="parameter" name="length" type="int"  />
      <property ref="Arrays_5" />
    </properties>
    
  </element>
  <element kind="function" name="array_splice">
    <description><![CDATA[   array_splice removes the elements designated  by offset and   length from the   input array, and replaces them with the  elements of the replacement array, if  supplied. It returns an array containing the extracted elements.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input = array("red", "green", "blue", "yellow");
array_splice($input, 2);
// $input is now array("red", "green")

$input = array("red", "green", "blue", "yellow");
array_splice($input, 1, -1);
// $input is now array("red", "yellow")

$input = array("red", "green", "blue", "yellow");
array_splice($input, 1, count($input), "orange");
// $input is now array("red", "orange")

$input = array("red", "green", "blue", "yellow");
array_splice($input, -1, 1, array("black", "maroon"));
// $input is now array("red", "green",
//          "blue", "black", "maroon")

$input = array("red", "green", "blue", "yellow");
array_splice($input, 3, 0, "purple");
// $input is now array("red", "green",
//          "blue", "purple", "yellow");
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_2" />
      <property ref="Arrays_35" />
      <property ref="Arrays_36" />
      <property kind="parameter" name="replacement" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="array_sum">
    <description><![CDATA[   array_sum returns the sum of values  in an array as an integer or float.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = array(2, 4, 6, 8);
echo "sum(a) = " . array_sum($a) . "\n";

$b = array("a" => 1.2, "b" => 2.3, "c" => 3.4);
echo "sum(b) = " . array_sum($b) . "\n";
?>]]></description>
      </property>
      <property kind="return" type="number" />	
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="array_udiff">
    <description><![CDATA[   array_udiff returns an array  containing all the values of array1  that are not present in any of the other arguments.  Note that keys are preserved. For the comparison of the data   data_compare_func is used.  It must return an integer less than, equal  to, or greater than zero if the first argument is considered to  be respectively less than, equal to, or greater than the  second. This is unlike array_diff which uses an  internal function for comparing the data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class cr {
    private $priv_member;
    function cr($val) 
    {
        $this->priv_member = $val;
    }
    
    function comp_func_cr($a, $b) 
    {
        if ($a->priv_member === $b->priv_member) return 0;
        return ($a->priv_member > $b->priv_member)? 1:-1;
    }
}
$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

$result = array_udiff($a, $b, array("cr", "comp_func_cr"));
print_r($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property kind="parameter" name="data_compare_func" type="callback" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="array_udiff_assoc">
    <description><![CDATA[   array_udiff_assoc returns an  containing all the values from array1  that are not present in any of the other arguments.  Note that the keys are used in the comparison unlike   array_diff and array_udiff .  The comparison of arrays' data is performed by using an user-supplied  callback. In this aspect the behaviour is opposite to the behaviour of   array_diff_assoc which uses internal function for  comparison.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class cr {
    private $priv_member;
    function cr($val) 
    {
        $this->priv_member = $val;
    }
    
    function comp_func_cr($a, $b) 
    {
        if ($a->priv_member === $b->priv_member) return 0;
        return ($a->priv_member > $b->priv_member)? 1:-1;
    }
}

$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

$result = array_udiff_assoc($a, $b, array("cr", "comp_func_cr"));
print_r($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_38" />
    </properties>
    
  </element>
  <element kind="function" name="array_udiff_uassoc">
    <description><![CDATA[   array_udiff_uassoc returns an  containing all the values from array1  that are not present in any of the other arguments.  Note that the keys are used in the comparison unlike   array_diff and array_udiff .  The comparison of arrays' data is performed by using an user-supplied  callback : data_compare_func . In this aspect  the behaviour is opposite to the behaviour of   array_diff_assoc which uses internal function for  comparison. The comparison of keys (indices) is done also by the  callback function key_compare_func . This  behaviour is unlike what array_udiff_assoc does, since  the latter compares the indices by using an internal function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class cr {
    private $priv_member;
    function cr($val) 
    {
        $this->priv_member = $val;
    }

    function comp_func_cr($a, $b) 
    {
        if ($a->priv_member === $b->priv_member) return 0;
        return ($a->priv_member > $b->priv_member)? 1:-1;
    }
    
    function comp_func_key($a, $b) 
    {
        if ($a === $b) return 0;
        return ($a > $b)? 1:-1;
    }
}
$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

$result = array_udiff_uassoc($a, $b, array("cr", "comp_func_cr"), array("cr", "comp_func_key"));
print_r($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_38" />
      <property ref="Arrays_11" />
    </properties>
    
  </element>
  <element kind="function" name="array_uintersect">
    <description><![CDATA[   array_uintersect returns an array  containing all the values of array1  that are present in all the arguments.  The data is compared by using a callback function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");

print_r(array_uintersect($array1, $array2, "strcasecmp"));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_38" />
    </properties>
    
  </element>
  <element kind="function" name="array_uintersect_assoc">
    <description><![CDATA[   array_uintersect_assoc returns an array  containing all the values of array1  that are present in all the arguments. Note that the keys are used in  the comparison unlike in array_uintersect .  The data is compared by using a callback function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");

print_r(array_uintersect_assoc($array1, $array2, "strcasecmp"));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_38" />
    </properties>
    
  </element>
  <element kind="function" name="array_uintersect_uassoc">
    <description><![CDATA[   array_uintersect_uassoc returns an array  containing all the values of array1  that are present in all the arguments. Note that the keys are used in  the comparison unlike in array_uintersect .  Both the data and the indexes are compared by using a callback functions.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
$array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");

print_r(array_uintersect_uassoc($array1, $array2, "strcasecmp", "strcasecmp"));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_8" />
      <property ref="Arrays_9" />
      <property ref="Arrays_10" />
      <property ref="Arrays_38" />
      <property ref="Arrays_11" />
    </properties>
    
  </element>
  <element kind="function" name="array_unique">
    <description><![CDATA[   array_unique takes input   array and returns a new array  without duplicate values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input = array("a" => "green", "red", "b" => "green", "blue", "red");
$result = array_unique($input);
print_r($result);
?>

      

<?php
$input = array(4, "4", "3", 4, 3, "3");
$result = array_unique($input);
var_dump($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="array_unshift">
    <description><![CDATA[   array_unshift prepends passed elements to  the front of the array . Note that the list  of elements is prepended as a whole, so that the prepended  elements stay in the same order.  All numerical array keys will be  modified to start counting from zero while literal keys won't be touched.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$queue = array("orange", "banana");
array_unshift($queue, "apple", "raspberry");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Arrays_28" />
      <property ref="Arrays_29" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="array_values">
    <description><![CDATA[   array_values returns all the values from the   input array and indexes numerically the  array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array("size" => "XL", "color" => "gold");
print_r(array_values($array));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_2" />
    </properties>
    
  </element>
  <element kind="function" name="array_walk">
    <description><![CDATA[  If funcname needs to be working with the  actual values of the array, specify the first parameter of   funcname as a   . Then,  any changes made to those elements will be made in the  original array itself.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");

function test_alter(&$item1, $key, $prefix) 
{
    $item1 = "$prefix: $item1";
}

function test_print($item2, $key) 
{
    echo "$key. $item2<br />\n";
}

echo "Before ...:\n";
array_walk($fruits, 'test_print');

array_walk($fruits, 'test_alter', 'fruit');
echo "... and after:\n";

array_walk($fruits, 'test_print');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property kind="parameter" name="funcname" type="callback" required="1" />
      <property kind="parameter" name="userdata" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="array_walk_recursive">
    <description><![CDATA[  If funcname needs to be working with the  actual values of the array, specify the first parameter of   funcname as a   . Then,  any changes made to those elements will be made in the  original array itself.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sweet = array('a' => 'apple', 'b' => 'banana');
$fruits = array('sweet' => $sweet, 'sour' => 'lemon');

function test_print($item, $key) 
{
    echo "$key holds $item\n";
}

array_walk_recursive($fruits, 'test_print');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_2" />
      <property ref="Arrays_39" />
      <property ref="Arrays_40" />
    </properties>
    
  </element>
  <element kind="function" name="arsort">
    <description><![CDATA[  This function sorts an array such that array indices maintain  their correlation with the array elements they are associated  with.  This is used mainly when sorting associative arrays where  the actual element order is significant.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
arsort($fruits);
reset($fruits);
while (list($key, $val) = each($fruits)) {
    echo "$key = $val\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property kind="parameter" name="sort_flags" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="asort">
    <description><![CDATA[  This function sorts an array such that array indices maintain  their correlation with the array elements they are associated  with.  This is used mainly when sorting associative arrays where  the actual element order is significant.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
asort($fruits);
reset($fruits);
while (list($key, $val) = each($fruits)) {
    echo "$key = $val\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property ref="Arrays_41" />
    </properties>
    
  </element>
  <element kind="function" name="compact">
    <description><![CDATA[   compact takes a variable number of  parameters. Each parameter can be either a string containing the  name of the variable, or an array of variable names.  The array  can contain other arrays of variable names inside it;   compact handles it recursively.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$city  = "San Francisco";
$state = "CA";
$event = "SIGGRAPH";

$location_vars = array("city", "state");

$result = compact("event", "nothing_here", $location_vars);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="varname" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="count">
    <description><![CDATA[  Returns the number of elements in var ,  which is typically an , since anything other than objects  will have one element.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a[0] = 1;
$a[1] = 3;
$a[2] = 5;
$result = count($a);
// $result == 3

$b[0]  = 7;
$b[5]  = 9;
$b[10] = 11;
$result = count($b);
// $result == 3;

$result = count(null);
// $result == 0;

$result = count(false);
// $result == 1;

$obj = new StdClass;
$obj->foo = 'A property';
$obj->bar = 'Another property';
$result = count($obj);
// $result == 2;
?>

      

<?php
$food = array('fruits' => array('orange', 'banana', 'apple'),
              'veggie' => array('carrot', 'collard', 'pea'));

// recursive count
echo count($food, COUNT_RECURSIVE);  // output 8

// normal count
echo count($food);                  // output 2

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Arrays_29" />
      <property kind="parameter" name="mode" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="current">
    <description><![CDATA[  Every array has an internal pointer to its "current" element,  which is initialized to the first element inserted into the  array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$transport = array('foot', 'bike', 'car', 'plane');
$mode = current($transport); // $mode = 'foot';
$mode = next($transport);    // $mode = 'bike';
$mode = current($transport); // $mode = 'bike';
$mode = prev($transport);    // $mode = 'foot';
$mode = end($transport);     // $mode = 'plane';
$mode = current($transport); // $mode = 'plane';
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="each">
    <description><![CDATA[  Returns the current key and value pair from the array   array and advances the array cursor. This  pair is returned in a four-element array, with the keys   , ,   , and   . Elements and   contain the key name of the array  element, and and   contain the data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$foo = array("bob", "fred", "jussi", "jouni", "egon", "marliese");
$bar = each($foo);
print_r($bar);
?>

      

<?php
$fruit = array('a' => 'apple', 'b' => 'banana', 'c' => 'cranberry');

reset($fruit);
while (list($key, $val) = each($fruit)) {
    echo "$key => $val\n";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="end">
    <description><![CDATA[   end advances array 's  internal pointer to the last element, and returns its value.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fruits = array('apple', 'banana', 'cranberry');
echo end($fruits); // cranberry
      
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="extract">
    <description><![CDATA[  This function is used to import variables from an array into the  current symbol table.  It takes an associative array   var_array and treats keys as variable  names and values as variable values.  For each key/value pair it  will create a variable in the current symbol table, subject to   extract_type and   prefix parameters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* Suppose that $var_array is an array returned from
   wddx_deserialize */

$size = "large";
$var_array = array("color" => "blue",
                   "size"  => "medium",
                   "shape" => "sphere");
extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="var_array" type="array" required="1" />
      <property kind="parameter" name="extract_type" type="int"  />
      <property kind="parameter" name="prefix" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="in_array">
    <description><![CDATA[  Searches haystack for   needle and returns  if it is found in the array, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

      

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

      

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_33" />
      <property ref="Arrays_34" />
      <property ref="Arrays_20" />
    </properties>
    
  </element>
  <element kind="function" name="key">
    <description><![CDATA[   key returns the index element of the  current array position.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array(
    'fruit1' => 'apple',
    'fruit2' => 'orange',
    'fruit3' => 'grape',
    'fruit4' => 'apple',
    'fruit5' => 'apple');

// this cycle echoes all associative array
// key where value equals "apple"
while ($fruit_name = current($array)) {
    if ($fruit_name == 'apple') {
        echo key($array).'<br />';
    }
    next($array);
}
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="krsort">
    <description><![CDATA[  Sorts an array by key in reverse order, maintaining key to data  correlations. This is useful mainly for associative arrays.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fruits = array("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
krsort($fruits);
reset($fruits);
while (list($key, $val) = each($fruits)) {
    echo "$key = $val\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property ref="Arrays_41" />
    </properties>
    
  </element>
  <element kind="function" name="ksort">
    <description><![CDATA[  Sorts an array by key, maintaining key to data correlations. This  is useful mainly for associative arrays.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fruits = array("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
ksort($fruits);
reset($fruits);
while (list($key, $val) = each($fruits)) {
    echo "$key = $val\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property ref="Arrays_41" />
    </properties>
    
  </element>
  <element kind="function" name="list">
    <description><![CDATA[  Like array , this is not really a function,  but a language construct. list is used to  assign a list of variables in one operation.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$info = array('coffee', 'brown', 'caffeine');

// Listing all the variables
list($drink, $color, $power) = $info;
echo "$drink is $color and $power makes it special.\n";

// Listing some of them
list($drink, , $power) = $info;
echo "$drink has $power.\n";

// Or let's skip to only the third one
list( , , $power) = $info;
echo "I need $power!\n";

?>

      

<table>
 <tr>
  <th>Employee name</th>
  <th>Salary</th>
 </tr>

<?php

$result = mysql_query("SELECT id, name, salary FROM employees", $conn);
while (list($id, $name, $salary) = mysql_fetch_row($result)) {
    echo " <tr>\n" .
          "  <td><a href=\"info.php?id=$id\">$name</a></td>\n" .
          "  <td>$salary</td>\n" .
          " </tr>\n";
}

?>

</table>

      

<?php

$info = array('coffee', 'brown', 'caffeine');

list($a[0], $a[1], $a[2]) = $info;

var_dump($a);

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Arrays_42" />
      <property kind="parameter" name="..." type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="natcasesort">
    <description><![CDATA[  This function implements a sort algorithm that orders  alphanumeric strings in the way a human being would while maintaining  key/value associations.  This is described as a "natural ordering".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = $array2 = array('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png');

sort($array1);
echo "Standard sorting\n";
print_r($array1);

natcasesort($array2);
echo "\nNatural order sorting (case-insensitive)\n";
print_r($array2);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="natsort">
    <description><![CDATA[  This function implements a sort algorithm that orders  alphanumeric strings in the way a human being would while maintaining  key/value associations. This is described as a "natural ordering".  An  example of the difference between this algorithm and the regular computer  string sorting algorithms (used in sort ) can be seen  below:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array1 = $array2 = array("img12.png", "img10.png", "img2.png", "img1.png");

sort($array1);
echo "Standard sorting\n";
print_r($array1);

natsort($array2);
echo "\nNatural order sorting\n";
print_r($array2);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="next">
    <description><![CDATA[  Returns the array value in the next place that's pointed to by the  internal array pointer, or if there are no more elements.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$transport = array('foot', 'bike', 'car', 'plane');
$mode = current($transport); // $mode = 'foot';
$mode = next($transport);    // $mode = 'bike';
$mode = next($transport);    // $mode = 'car';
$mode = prev($transport);    // $mode = 'bike';
$mode = end($transport);     // $mode = 'plane';
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="prev">
    <description><![CDATA[  Returns the array value in the previous place that's pointed to by  the internal array pointer, or if there are no more  elements.    If the array contains empty elements then this function will  return for these elements as well.  To properly traverse an array which may contain empty elements  see the each function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$transport = array('foot', 'bike', 'car', 'plane');
$mode = current($transport); // $mode = 'foot';
$mode = next($transport);    // $mode = 'bike';
$mode = next($transport);    // $mode = 'car';
$mode = prev($transport);    // $mode = 'bike';
$mode = end($transport);     // $mode = 'plane';
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="range">
    <description><![CDATA[   range returns an array of elements from   low to high ,  inclusive.  If low > high, the sequence will be from high to low.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
foreach (range(0, 12) as $number) {
    echo $number;
}

// The step parameter was introduced in 5.0.0
// array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
foreach (range(0, 100, 10) as $number) {
    echo $number;
}

// Use of character sequences introduced in 4.1.0
// array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i');
foreach (range('a', 'i') as $letter) {
    echo $letter;
}
// array('c', 'b', 'a');
foreach (range('c', 'a') as $letter) {
    echo $letter;
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="low" type="number" required="1" />
      <property kind="parameter" name="high" type="number" required="1" />
      <property kind="parameter" name="step" type="number"  />
    </properties>
    
  </element>
  <element kind="function" name="reset">
    <description><![CDATA[   reset rewinds array 's  internal pointer to the first element and returns the value of the first  array element, or if the array is empty.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$array = array('step one', 'step two', 'step three', 'step four');
  
// by default, the pointer is on the first element  
echo current($array) . "<br />\n"; // "step one"

// skip two steps    
next($array);                                 
next($array);
echo current($array) . "<br />\n"; // "step three"
  
// reset pointer, start again on step one
reset($array);
echo current($array) . "<br />\n"; // "step one"
  
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="rsort">
    <description><![CDATA[  This function sorts an array in reverse order (highest to lowest).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fruits = array("lemon", "orange", "banana", "apple");
rsort($fruits);
reset($fruits);
while (list($key, $val) = each($fruits)) {
    echo "$key = $val\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property ref="Arrays_41" />
    </properties>
    
  </element>
  <element kind="function" name="shuffle">
    <description><![CDATA[  This function shuffles (randomizes the order of the elements in)  an array.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$numbers = range(1, 20);
srand((float)microtime() * 1000000);
shuffle($numbers);
while (list(, $number) = each($numbers)) {
    echo "$number ";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
    </properties>
    
  </element>
  <element kind="function" name="sort">
    <description><![CDATA[  This function sorts an array.  Elements will be arranged from  lowest to highest when this function has completed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fruits = array("lemon", "orange", "banana", "apple");
sort($fruits);
reset($fruits);
while (list($key, $val) = each($fruits)) {
    echo "fruits[" . $key . "] = " . $val . "\n";
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property ref="Arrays_41" />
    </properties>
    
  </element>
  <element kind="function" name="uasort">
    <description><![CDATA[  This function sorts an array such that array indices maintain  their correlation with the array elements they are associated  with.  This is used mainly when sorting associative arrays where  the actual element order is significant.  The comparison function  is user-defined.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property kind="parameter" name="cmp_function" type="callback" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="uksort">
    <description><![CDATA[   uksort will sort the keys of an array using a  user-supplied comparison function.  If the array you wish to sort  needs to be sorted by some non-trivial criteria, you should use  this function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function cmp($a, $b) 
{
    if ($a == $b) {
        return 0;
    }
    return ($a > $b) ? -1 : 1;
}

$a = array(4 => "four", 3 => "three", 20 => "twenty", 10 => "ten");

uksort($a, "cmp");

while (list($key, $value) = each($a)) {
    echo "$key: $value\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property ref="Arrays_51" />
    </properties>
    
  </element>
  <element kind="function" name="usort">
    <description><![CDATA[  This function will sort an array by its values using a  user-supplied comparison function.  If the array you wish to sort  needs to be sorted by some non-trivial criteria, you should use  this function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function cmp($a, $b) 
{
    if ($a == $b) {
        return 0;
    }
    return ($a < $b) ? -1 : 1;
}

$a = array(3, 2, 5, 6, 1);

usort($a, "cmp");

while (list($key, $value) = each($a)) {
    echo "$key: $value\n";
}
?>

      

<?php
function cmp($a, $b) 
{
    return strcmp($a["fruit"], $b["fruit"]);
}

$fruits[0]["fruit"] = "lemons";
$fruits[1]["fruit"] = "apples";
$fruits[2]["fruit"] = "grapes";

usort($fruits, "cmp");

while (list($key, $value) = each($fruits)) {
    echo "\$fruits[$key]: " . $value["fruit"] . "\n";
}
?>

      

<?php
class TestObj {
    var $name;

    function TestObj($name) 
    {
        $this->name = $name;
    }

    /* This is the static comparing function: */
    function cmp_obj($a, $b) 
    {
        $al = strtolower($a->name);
        $bl = strtolower($b->name);
        if ($al == $bl) {
            return 0;
        }
        return ($al > $bl) ? +1 : -1;
    }
}

$a[] = new TestObj("c");
$a[] = new TestObj("b");
$a[] = new TestObj("d");

usort($a, array("TestObj", "cmp_obj"));

foreach ($a as $item) {
    echo $item->name . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_28" />
      <property ref="Arrays_51" />
    </properties>
    
  </element>
</group>
<group name="Aspell">
  <description><![CDATA[Aspell functions [deprecated]]]></description>
  <element kind="function" name="aspell_check">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$aspell_link = aspell_new("english");

if (aspell_check($aspell_link, "testt")) {
    echo "This is a valid spelling";
} else {
    echo "Sorry, wrong spelling";
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="dictionary_link" type="int" required="1" />
      <property kind="parameter" name="word" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="aspell_check_raw">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$aspell_link = aspell_new("english");

if (aspell_check_raw($aspell_link, "test")) {
    echo "This is a valid spelling";
} else {
    echo "Sorry, wrong spelling";
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Aspell_1" />
      <property ref="Aspell_2" />
    </properties>
    
  </element>
  <element kind="function" name="aspell_new">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$aspell_link = aspell_new("english");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="master" type="string" required="1" />
      <property kind="parameter" name="personal" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="aspell_suggest">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$aspell_link = aspell_new("english");

if (!aspell_check($aspell_link, "test")) {
    $suggestions = aspell_suggest($aspell_link, "test");

    foreach ($suggestions as $suggestion) {
        echo "Possible spelling: $suggestion<br />\n"; 
    }
}

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Aspell_1" />
      <property ref="Aspell_2" />
    </properties>
    
  </element>
</group>
<group name="BC math">
  <description><![CDATA[BCMath Arbitrary Precision Mathematics Functions]]></description>
  <element kind="function" name="bcadd">
    <description><![CDATA[  Adds the left_operand to the   right_operand and returns the sum in a  string.  The optional scale parameter is  used to set the number of digits after the decimal place in the  result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$a = 1.234;
$b = 5;

echo bcadd($a, $b);     // 6
echo bcadd($a, $b, 4);  // 6.2340

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="left_operand" type="string" required="1" />
      <property kind="parameter" name="right_operand" type="string" required="1" />
      <property kind="parameter" name="scale" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="bccomp">
    <description><![CDATA[  Compares the left_operand to the   right_operand and returns the result as an  integer.  The optional scale parameter is  used to set the number of digits after the decimal place which  will be used in the comparison.  The return value is 0 if the two  operands are equal.  If the left_operand  is larger than the right_operand the  return value is +1 and if the left_operand  is less than the right_operand the return  value is -1.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo bccomp('1', '2') . "\n";   // -1
echo bccomp('1.00001', '1', 3); // 0
echo bccomp('1.00001', '1', 5); // 1

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="BC math_1" />
      <property ref="BC math_2" />
      <property ref="BC math_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcdiv">
    <description><![CDATA[  Divides the left_operand by the   right_operand and returns the result.  The  optional scale sets the number of digits  after the decimal place in the result, which defaults to 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo bcdiv(105, 6.55957, 3);  // 16.007

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="BC math_1" />
      <property ref="BC math_2" />
      <property ref="BC math_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcmod">
    <description><![CDATA[  Get the modulus of the left_operand using   modulus .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo bcmod(4, 2); // 0
echo bcmod(2, 4); // 2
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="BC math_1" />
      <property kind="parameter" name="modulus" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bcmul">
    <description><![CDATA[  Multiply the left_operand by the   right_operand and returns the result.  The  optional scale sets the number of digits  after the decimal place in the result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo bcmul(1.34747474747, 35, 3); // 47.162
echo bcmul(2, 4); // 8
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="BC math_1" />
      <property ref="BC math_2" />
      <property ref="BC math_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcpow">
    <description><![CDATA[  Raise x to the power   y .  The optional   scale can be used to set the number of  digits after the decimal place in the result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo bcpow(4.2, 3, 2); // 74.08

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="x" type="string" required="1" />
      <property kind="parameter" name="y" type="string" required="1" />
      <property ref="BC math_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcpowmod">
    <description><![CDATA[  Use the fast-exponentiation method to raise x   to the power y with respect to the modulus   modulus .  The optional   scale can be used to set the number of  digits after the decimal place in the result.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="BC math_5" />
      <property ref="BC math_6" />
      <property ref="BC math_4" />
      <property ref="BC math_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcscale">
    <description><![CDATA[  This function sets the default scale parameter for all subsequent  bc math functions that do not explicitly specify a scale  parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// default scale : 3
bcscale(3);
echo bcdiv(105, 6.55957); // 16.007

// this is the same without bcscale()
echo bcdiv(105, 6.55957, 3); // 16.007

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="scale" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bcsqrt">
    <description><![CDATA[  Return the square root of the operand .  The optional scale parameter sets the  number of digits after the decimal place in the result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo bcsqrt(2, 3); // 1.414

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="operand" type="string" required="1" />
      <property ref="BC math_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcsub">
    <description><![CDATA[  Subtracts the right_operand from the   left_operand and returns the result in a  string.  The optional scale parameter is  used to set the number of digits after the decimal place in the  result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$a = 1.234;
$b = 5;
 
echo bcsub($a, $b);     // -3
echo bcsub($a, $b, 4);  // -3.7660

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="BC math_1" />
      <property ref="BC math_2" />
      <property ref="BC math_3" />
    </properties>
    
  </element>
</group>
<group name="Bzip2">
  <description><![CDATA[Bzip2 Compression Functions]]></description>
  <element kind="function" name="bzclose">
    <description><![CDATA[  Closes the given bzip2 file pointer.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="bz" type="resource" required="1" >
      <description>  The file pointer. It must be valid and must point to a file  successfully opened by .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="bzcompress">
    <description><![CDATA[   bzcompress compresses the given string and returns  it as bzip2 encoded data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "sample data";
$bzstr = bzcompress($str, 9);
echo $bzstr;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="source" type="string" required="1" >
      <description>  The string to compress.  </description>
      </property>
      <property kind="parameter" name="blocksize" type="int"  >
      <description>  Specifies the blocksize used during compression and should be a number  from 1 to 9 with 9 giving the best compression, but using more  resources to do so. defaults to 4.  </description>
      </property>
      <property kind="parameter" name="workfactor" type="int"  >
      <description>  Controls how the compression phase behaves when presented with worst  case, highly repetitive, input data.  The value can be between 0 and  250 with 0 being a special case and 30 being the default value.    Regardless of the , the generated  output is the same.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="bzdecompress">
    <description><![CDATA[   bzdecompress decompresses the given string containing  bzip2 encoded data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$start_str = "This is not an honest face?";
$bzstr = bzcompress($start_str);

echo "Compressed String: ";
echo $bzstr;
echo "\n<br />\n";

$str = bzdecompress($bzstr);
echo "Decompressed String: ";
echo $str;
echo "\n<br />\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_2" />
      <property kind="parameter" name="small" type="int"  >
      <description>  If , an alternative decompression algorithm will be used which  uses less memory (the maximum memory requirement drops to around 2300K)  but works at roughly half the speed.    See the for more  information about this feature.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="bzerrno">
    <description><![CDATA[  Returns the error number of any bzip2 error returned by the given file  pointer.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Bzip2_1" />
    </properties>
    
  </element>
  <element kind="function" name="bzerror">
    <description><![CDATA[  Returns the error number and error string of any bzip2 error returned by  the given file pointer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$error = bzerror($bz);

echo $error["errno"];
echo $error["errstr"];
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Bzip2_1" />
    </properties>
    
  </element>
  <element kind="function" name="bzerrstr">
    <description><![CDATA[  Gets the error string of any bzip2 error returned by the given file  pointer.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_1" />
    </properties>
    
  </element>
  <element kind="function" name="bzflush">
    <description><![CDATA[  Forces a write of all buffered bzip2 data for the file pointer   bz .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Bzip2_1" />
    </properties>
    
  </element>
  <element kind="function" name="bzopen">
    <description><![CDATA[   bzopen opens a bzip2 (.bz2) file for reading or  writing.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = "/tmp/foo.bz2";
$bz = bzopen($file, "r") or die("Couldn't open $file for reading");

bzclose($bz);

?>]]></description>
      </property>
      <property kind="return" type="resource" />	
      <property ref="Apache_3" />
      <property kind="parameter" name="mode" type="string" required="1" >
      <description>  Similar to the function ('r' for read,  'w' for write, etc.).  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="bzread">
    <description><![CDATA[   bzread reads from the given bzip2 file pointer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = "/tmp/foo.bz2";
$bz = bzopen($file, "r") or die("Couldn't open $file");

$decompressed_file = '';
while (!feof($bz)) {
  $decompressed_file .= bzread($bz, 4096);
}
bzclose($bz);

echo "The contents of $file are: <br />\n";
echo $decompressed_file;

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_1" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="bzwrite">
    <description><![CDATA[   bzwrite writes a string into the given bzip2 file  stream.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "uncompressed data";
$bz = bzopen("/tmp/foo.bz2", "w");
bzwrite($bz, $str, strlen($str));
bzclose($bz);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Bzip2_1" />
      <property kind="parameter" name="data" type="string" required="1" >
      <description>  The written data.  </description>
      </property>
      <property ref="Arrays_36" />
    </properties>
    
  </element>
</group>
<group name="CCVS">
  <description><![CDATA[CCVS API Functions [deprecated]]]></description>
  <element kind="function" name="ccvs_add">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="session" type="string" required="1" />
      <property kind="parameter" name="invoice" type="string" required="1" />
      <property kind="parameter" name="argtype" type="string" required="1" />
      <property kind="parameter" name="argval" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_auth">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_command">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property kind="parameter" name="type" type="string" required="1" />
      <property ref="CCVS_4" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_count">
    <properties>
      <property ref="ret_int" />
      <property ref="CCVS_1" />
      <property ref="CCVS_5" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_delete">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_done">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="sess" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_init">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_lookup">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
      <property kind="parameter" name="inum" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_new">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_report">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_5" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_return">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_reverse">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_sale">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_status">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_textvalue">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
    </properties>
    
  </element>
  <element kind="function" name="ccvs_void">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_2" />
    </properties>
    
  </element>
</group>
<group name="COM">
  <description><![CDATA[COM and .Net (Windows)]]></description>
  <element kind="function" name="COM::COM">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// starting word
$word = new COM("word.application") or die("Unable to instantiate Word");
echo "Loaded Word, version {$word->Version}\n";

//bring it to front
$word->Visible = 1;

//open an empty document
$word->Documents->Add();

//do some weird stuff
$word->Selection->TypeText("This is a test...");
$word->Documents[1]->SaveAs("Useless test.doc");

//closing word
$word->Quit();

//free the object
$word = null;
?>

     

<?php

$conn = new COM("ADODB.Connection") or die("Cannot start ADO");
$conn->Open("Provider=SQLOLEDB; Data Source=localhost;
Initial Catalog=database; User ID=user; Password=password");

$rs = $conn->Execute("SELECT * FROM sometable");    // Recordset

$num_columns = $rs->Fields->Count();
echo $num_columns . "\n";

for ($i=0; $i < $num_columns; $i++) {
    $fld[$i] = $rs->Fields($i);
}

$rowcount = 0;
while (!$rs->EOF) {
    for ($i=0; $i < $num_columns; $i++) {
        echo $fld[$i]->value . "\t";
    }
    echo "\n";
    $rowcount++;            // increments rowcount
    $rs->MoveNext();
}

$rs->Close();
$conn->Close();

$rs = null;
$conn = null;

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="module_name" type="string" required="1" />
      <property kind="parameter" name="server_name" type="mixed"  />
      <property ref=".NET_3" />
      <property kind="parameter" name="typelib" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="DOTNET::DOTNET">
    <description><![CDATA[  DOTNET class constructor. assembly_name specifies  which assembly should be loaded, and class_name  specifices which class in that assembly to instantiate.  You may  optionally specify a codepage to use for unicode  string transformations; see the class  for more details on code pages.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $stack = new DOTNET("mscorlib", "System.Collections.Stack"); 
  $stack->Push(".Net"); 
  $stack->Push("Hello "); 
  echo $stack->Pop() . $stack->Pop(); 
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref=".NET_1" />
      <property kind="parameter" name="class_name" type="string" required="1" />
      <property ref=".NET_3" />
    </properties>
    
  </element>
  <element kind="function" name="VARIANT::VARIANT">
    <description><![CDATA[  VARIANT class constructor. Parameters:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$v = new VARIANT(42);
print "The type is " . $v->type . "<br/>";
print "The value is " . $v->value . "<br/>";
?>

     

<?php
$v = new VARIANT(42);
print "The type is " . variant_get_type($v) . "<br/>";
print "The value is " . $v . "<br/>";
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property kind="parameter" name="value" type="mixed"  />
      <property kind="parameter" name="type" type="int"  />
      <property ref=".NET_3" />
    </properties>
    
  </element>
  <element kind="function" name="com_addref">
    <description><![CDATA[  Increases the components reference counter.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="com_create_guid">
    <description><![CDATA[  Generates a Globally Unique Identifier (GUID) and returns it as a string.  A GUID is generated in the same way as DCE UUID's, except that the  Microsoft convention is to enclose a GUID in curly braces.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="com_event_sink">
    <description><![CDATA[  Instructs COM to sink events generated by   comobject into the PHP object   sinkobject .  PHP will attempt to use the default  dispinterface type specified by the typelibrary associated with   comobject , but you may override this choice by  setting sinkinterface to the name of the  dispinterface that you want to use.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class IEEventSinker {
  var $terminated = false;

  function ProgressChange($progress, $progressmax) {
    echo "Download progress: $progress / $progressmax\n";
  }

  function DocumentComplete(&$dom, $url) {
    echo "Document $url complete\n";
  }

  function OnQuit() {
    echo "Quit!\n";
    $this->terminated = true;
  }
}
$ie = new COM("InternetExplorer.Application");
// note that you don't need the & for PHP 5!
$sink =& new IEEventSinker();
com_event_sink($ie, $sink, "DWebBrowserEvents2");
$ie->Visible = true;
$ie->Navigate("http://www.php.net");
while(!$sink->terminated) {
  com_message_pump(4000);
}
$ie = null;
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="comobject" type="variant" required="1" />
      <property kind="parameter" name="sinkobject" type="object" required="1" />
      <property kind="parameter" name="sinkinterface" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="com_get">
    <description><![CDATA[  Returns the value of the property of the  COM component referenced by com_object .  Returns on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
// do this
$var = $obj->property;
// instead of this:
$var = com_get($obj, 'property');
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="com_object" type="resource" required="1" />
      <property kind="parameter" name="property" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="com_get_active_object">
    <description><![CDATA[   com_get_active_object is similar to creating a new  instance of a object, except that it will  only return an object to your script if the object is already running.  OLE applications use something known as the Running Object Table to  allow well-known applications to be launched only once; this function  exposes the COM library function GetActiveObject() to get a handle on a  running instance.  ]]></description>
    <properties>
      <property kind="return" type="variant" />	
      <property kind="parameter" name="progid" type="string" required="1" />
      <property kind="parameter" name="code_page" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="com_invoke">
    <description><![CDATA[   com_invoke invokes the method  named function_name of the COM  component referenced by com_object .   com_invoke returns on error,  returns the function_name 's return  value on success. All the extra parameters   function_parameters are passed to  the method function_name .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
// do this
$val = $obj->method($one, $two);
// instead of this:
$val = com_invoke($obj, 'method', $one, $two);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="COM_10" />
      <property ref="APD_9" />
      <property kind="parameter" name="function_parameters" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="com_isenum">
    <description><![CDATA[  Checks to see if a COM object can be enumerated using the   method hack.  Returns if it can, if it cannot.  See class for more details on these  methods.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="com_module" type="variant" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="com_load">
    <description><![CDATA[  Equivalent to using the operator to create an  instance of the class.  You should do  that instead of calling this function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
// do this
$obj = new COM($module);
// instead of this:
$obj = com_load($module);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="COM_1" />
      <property kind="parameter" name="server_name" type="string"  />
      <property ref=".NET_3" />
    </properties>
    
  </element>
  <element kind="function" name="com_load_typelib">
    <description><![CDATA[  Loads a type-library and registers its constants in the engine, as though  they were defined using define .  The   case_insensitive behaves in the same way as the  parameter with the same name in the define function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="typelib_name" type="string" required="1" />
      <property kind="parameter" name="case_insensitive" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="com_message_pump">
    <description><![CDATA[  This function will sleep for up to timeoutms  milliseconds, or until a message arrives in the queue.  If a message or  messages arrives before the timeout, they will be dispatched, and the  function will return .  If the timeout occurs and no messages were  processed, the return value will be .  If you do not specify a  value for timeoutms , then 0 will be assumed.  A 0  value means that no waiting will be performed; if there are messages  pending they will be dispatched as before; if there are no messages  pending, the function will return immediately without sleeping.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="timeoutms" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="com_print_typeinfo">
    <description><![CDATA[  The purpose of this function is to help generate a skeleton class for use  as an event sink.  You may also use it to generate a dump of any COM  object, provided that it supports enough of the introspection  interfaces, and that you know the name of the interface you want to  display.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="comobject" type="object" required="1" />
      <property kind="parameter" name="dispinterface" type="string"  />
      <property kind="parameter" name="wantsink" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="com_release">
    <description><![CDATA[  Decreases the components reference counter.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="com_set">
    <description><![CDATA[  Sets the value of the property of the COM  component referenced by com_object .  Returns the newly set value if succeeded, on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
// do this
$obj->property = $value;
// instead of this:
com_set($obj, 'property', $value);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="COM_10" />
      <property ref="COM_11" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="variant_abs">
    <description><![CDATA[  Returns the absolute value of val .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="val" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="variant_add">
    <description><![CDATA[  Adds left to right using  the following rules (taken from the MSDN library), which correspond to  those of Visual Basic:     ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="left" type="mixed" required="1" />
      <property kind="parameter" name="right" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="variant_and">
    <description><![CDATA[  Performs a bitwise AND operation, according to the following truth table;  note that this is slightly different from a regular AND operation.    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_cast">
    <description><![CDATA[  This function makes a copy of variant and then  performs a variant cast operation to force the copy to have the type  given by type . type should  be one of the constants.  ]]></description>
    <properties>
      <property ref="ret_variant" />
      <property kind="parameter" name="variant" type="variant" required="1" />
      <property kind="parameter" name="type" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="variant_cat">
    <description><![CDATA[  Concatenates left with   right and returns the result.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_cmp">
    <description><![CDATA[  Compares left with right  and returns one of the following values:     ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="COM_24" />
      <property ref="COM_25" />
      <property kind="parameter" name="lcid" type="int"  />
      <property kind="parameter" name="flags" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="variant_date_from_timestamp">
    <description><![CDATA[  Converts timestamp from a unix timestamp value  into a variant of type .  This allows easier  interopability between the unix-ish parts of PHP and COM.  ]]></description>
    <properties>
      <property ref="ret_variant" />
      <property kind="parameter" name="timestamp" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="variant_date_to_timestamp">
    <description><![CDATA[  Converts variant from a  (or similar) value into a unix timestamp.  This allows easier  interopability between the unix-ish parts of PHP and COM.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="COM_26" />
    </properties>
    
  </element>
  <element kind="function" name="variant_div">
    <description><![CDATA[  Divides left by right and  returns the result, subject to the following rules:      ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_eqv">
    <description><![CDATA[  If each bit in left is equal to the corresponding  bit in right then is returned, otherwise   is returned.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_fix">
    <description><![CDATA[  If variant is negative, then the first negative  integer greater than or equal to the variant is returned, otherwise  returns the integer portion of the value of   variant .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="variant" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="variant_get_type">
    <description><![CDATA[  This function returns an integer value that indicates the type of   variant , which can be an instance of   ,   or   classes.  The return value  can be compared to one of the constants.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="COM_26" />
    </properties>
    
  </element>
  <element kind="function" name="variant_idiv">
    <description><![CDATA[  Converts left and right to  integer values, and then performs integer division according the  following rules:    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_imp">
    <description><![CDATA[  Performs a bitwise implication operation, according to the following truth table:    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_int">
    <description><![CDATA[  If variant is negative, then the first negative  integer greater than or equal to the variant is returned, otherwise  returns the integer portion of the value of   variant .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_31" />
    </properties>
    
  </element>
  <element kind="function" name="variant_mod">
    <description><![CDATA[  Divides left by right and  returns the remainder.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_mul">
    <description><![CDATA[  Multiplies left by right and  returns the result, subject to the following rules:      ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_neg">
    <description><![CDATA[  Performs logical negation of variant and returns  the result.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_31" />
    </properties>
    
  </element>
  <element kind="function" name="variant_not">
    <description><![CDATA[  Performs bitwise not negation on variant and  returns the result.  If variant is , the  result will also be .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_31" />
    </properties>
    
  </element>
  <element kind="function" name="variant_or">
    <description><![CDATA[  Performs a bitwise OR operation, according to the following truth table;  note that this is slightly different from a regular OR operation.    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_pow">
    <description><![CDATA[  Returns the result of left to the power of   right .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_round">
    <description><![CDATA[  Returns the value of variant rounded to   decimals decimal places.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_31" />
      <property kind="parameter" name="decimals" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="variant_set">
    <description><![CDATA[  Converts value to a variant and assigns it to the   variant object; no new variant object is created,  and the old value of variant is freed/released.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="COM_26" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="variant_set_type">
    <description><![CDATA[  This function is similar to variant_cast except that  the variant is modified "in-place"; no new variant is created. The  parameters for this function have identical meaning to those of   variant_cast .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="COM_26" />
      <property ref="COM_27" />
    </properties>
    
  </element>
  <element kind="function" name="variant_sub">
    <description><![CDATA[  Subtracts right from left using  the following rules:     ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
  <element kind="function" name="variant_xor">
    <description><![CDATA[  Performs a logical exclusion, according to the following truth table:    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="COM_24" />
      <property ref="COM_25" />
    </properties>
    
  </element>
</group>
<group name="CURL">
  <description><![CDATA[CURL, Client URL Library Functions]]></description>
  <element kind="function" name="curl_close">
    <description><![CDATA[  This function closes a CURL session and frees all resources.  The CURL handle, ch , is also deleted.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// create a new curl resource
$ch = curl_init();

// set URL and other appropriate options
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, 0);

// grab URL and pass it to the browser
curl_exec($ch);

// close curl resource, and free up system resources
curl_close($ch);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="ch" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_copy_handle">
    <properties>
      <property ref="ret_resource" />
      <property ref="CURL_1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_errno">
    <description><![CDATA[  Returns the error number for the last cURL operation on the  resource ch , or   (zero) if no error occurred.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="CURL_1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_error">
    <description><![CDATA[  Returns a clear text error message for the last cURL operation on the  resource ch , or   (the empty string) if no error occurred.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="CURL_1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_exec">
    <description><![CDATA[  This function should be called after you initialize a CURL  session and all the options for the session are set.  Its purpose  is simply to execute the predefined CURL session (given by the   ch ).    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// create a new curl resource
$ch = curl_init();

// set URL and other appropriate options
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, 0);

// grab URL and pass it to the browser
curl_exec($ch);

// close curl resource, and free up system resources
curl_close($ch);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="CURL_1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_getinfo">
    <description><![CDATA[  Returns information about the last transfer, opt may be one of the following:    ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="CURL_1" />
      <property kind="parameter" name="opt" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="curl_init">
    <description><![CDATA[  The curl_init will initialize a new session  and return a CURL handle for use with the   curl_setopt , curl_exec ,  and curl_close functions.  If the optional   url parameter is supplied then the  CURLOPT_URL option will be set to the value of the parameter.  You can manually set this using the   curl_setopt function.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// create a new curl resource
$ch = curl_init();

// set URL and other appropriate options
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, 0);

// grab URL and pass it to the browser
curl_exec($ch);

// close curl resource, and free up system resources
curl_close($ch);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="url" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_add_handle">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="mh" type="resource" required="1" />
      <property ref="CURL_1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_close">
    <properties>
      <property ref="ret_void" />
      <property ref="CURL_4" />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_exec">
    <properties>
      <property ref="ret_int" />
      <property ref="CURL_4" />
      <property kind="parameter" name="still_running" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_getcontent">
    <properties>
      <property ref="ret_string" />
      <property ref="CURL_1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_info_read">
    <properties>
      <property ref="ret_array" />
      <property ref="CURL_4" />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_init">
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_remove_handle">
    <properties>
      <property ref="ret_int" />
      <property ref="CURL_4" />
      <property ref="CURL_1" />
    </properties>
    
  </element>
  <element kind="function" name="curl_multi_select">
    <properties>
      <property ref="ret_int" />
      <property ref="CURL_4" />
      <property kind="parameter" name="timeout" type="float"  />
    </properties>
    
  </element>
  <element kind="function" name="curl_setopt">
    <description><![CDATA[  Set an option for a CURL session identified by the   ch parameter. option  specifies which option to set, and   value specifies the value for the option given.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// create a new CURL resource
$ch = curl_init();

// set URL and other appropriate options
curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
curl_setopt($ch, CURLOPT_HEADER, false);

// grab URL and pass it to the browser
curl_exec($ch);

// close CURL resource, and free up system resources
curl_close($ch);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CURL_1" />
      <property kind="parameter" name="option" type="int" required="1" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="curl_version">
    <description><![CDATA[  The curl_version function returns a string  containing the current CURL version.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="version" type="int"  />
    </properties>
    
  </element>
</group>
<group name="Calendar">
  <description><![CDATA[Calendar Functions]]></description>
  <element kind="function" name="cal_days_in_month">
    <description><![CDATA[  This function will return the number of days in the   month of year for  the specified calendar .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$num = cal_days_in_month(CAL_GREGORIAN, 8, 2003); // 31
echo "There was $num days in August 2003";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="calendar" type="int" required="1" />
      <property kind="parameter" name="month" type="int" required="1" />
      <property kind="parameter" name="year" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cal_from_jd">
    <description><![CDATA[   cal_from_jd converts the Julian day given in   jd into a date of the specified   calendar . Supported   calendar values are   ,   ,   and   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$today = unixtojd(mktime(0, 0, 0, 8, 16, 2003));
print_r(cal_from_jd($today, CAL_GREGORIAN));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="jd" type="int" required="1" />
      <property ref="Calendar_1" />
    </properties>
    
  </element>
  <element kind="function" name="cal_info">
    <description><![CDATA[   cal_info returns information on the  specified calendar .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="calendar" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="cal_to_jd">
    <description><![CDATA[   cal_to_jd calculates the Julian day count  for a date in the specified calendar .  Supported calendar s are   ,   ,   and   .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_1" />
      <property ref="Calendar_2" />
      <property kind="parameter" name="day" type="int" required="1" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
  <element kind="function" name="easter_date">
    <description><![CDATA[  Returns the Unix timestamp corresponding to midnight on Easter of  the given year.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo date("M-d-Y", easter_date(1999));        // Apr-04-1999
echo date("M-d-Y", easter_date(2000));        // Apr-23-2000
echo date("M-d-Y", easter_date(2001));        // Apr-15-2001

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="year" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="easter_days">
    <description><![CDATA[  Returns the number of days after March 21 on which Easter falls  for a given year. If no year is specified, the current year is  assumed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo easter_days(1999);        // 14, i.e. April 4
echo easter_days(1492);        // 32, i.e. April 22
echo easter_days(1913);        //  2, i.e. March 23

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Calendar_7" />
      <property kind="parameter" name="method" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="frenchtojd">
    <description><![CDATA[  Converts a date from the French Republican Calendar to a Julian  Day Count.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
  <element kind="function" name="gregoriantojd">
    <description><![CDATA[  Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$jd = GregorianToJD(10, 11, 1970);
echo "$jd\n";
$gregorian = JDToGregorian($jd);
echo "$gregorian\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
  <element kind="function" name="jddayofweek">
    <description><![CDATA[  Returns the day of the week.  Can return a string or an integer  depending on the mode.    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="julianday" type="int" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="jdmonthname">
    <description><![CDATA[  Returns a string containing a month name.   mode tells this function which calendar to  convert the Julian Day Count to, and what type of month names are  to be returned.    ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Calendar_9" />
      <property kind="parameter" name="mode" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="jdtofrench">
    <description><![CDATA[  Converts a Julian Day Count to the French Republican Calendar.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="juliandaycount" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="jdtogregorian">
    <description><![CDATA[  Converts Julian Day Count to a string containing the Gregorian  date in the format of "month/day/year".  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Calendar_9" />
    </properties>
    
  </element>
  <element kind="function" name="jdtojewish">
    <description><![CDATA[  Converts a Julian Day Count to the Jewish Calendar.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo jdtojewish(gregoriantojd(10, 8, 2002), true,
       CAL_JEWISH_ADD_GERESHAYIM + CAL_JEWISH_ADD_ALAFIM + CAL_JEWISH_ADD_ALAFIM_GERESH); 
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Calendar_11" />
      <property kind="parameter" name="hebrew" type="bool"  />
      <property kind="parameter" name="fl" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="jdtojulian">
    <description><![CDATA[  Converts Julian Day Count to a string containing the Julian  Calendar Date in the format of "month/day/year".  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Calendar_9" />
    </properties>
    
  </element>
  <element kind="function" name="jdtounix">
    <description><![CDATA[  This function will return a Unix timestamp corresponding to the  Julian Day given in jday or if   jday is not inside the Unix epoch  (Gregorian years between 1970 and 2037 or 2440588 < =   jday  < = 2465342 ). The time returned is  localtime (and not GMT).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="jday" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="jewishtojd">
    <description><![CDATA[  Although this function can handle dates all the way back to the year 1  (3761 B.C.), such use may not be meaningful.  The Jewish calendar has  been in use for several thousand years, but in the early days there was  no formula to determine the start of a month. A new month was started  when the new moon was first observed.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
  <element kind="function" name="juliantojd">
    <description><![CDATA[  Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
  <element kind="function" name="unixtojd">
    <description><![CDATA[  Return the Julian Day for a Unix timestamp  (seconds since 1.1.1970), or for the current day if no   timestamp is given.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="timestamp" type="int"  />
    </properties>
    
  </element>
</group>
<group name="Classes/Objects">
  <description><![CDATA[Class/Object Functions]]></description>
  <element kind="function" name="call_user_method">
    <description><![CDATA[  The call_user_method function is deprecated  as of PHP 4.1.0, use the call_user_func variety  with the syntax instead.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="method_name" type="string" required="1" />
      <property kind="parameter" name="obj" type="object" required="1" />
      <property kind="parameter" name="parameter" type="mixed"  />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="call_user_method_array">
    <description><![CDATA[  The call_user_method_array function is deprecated  as of PHP 4.1.0, use the call_user_func_array variety  with the syntax instead.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Classes/Objects_1" />
      <property ref="Classes/Objects_2" />
      <property kind="parameter" name="paramarr" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="class_exists">
    <description><![CDATA[  This function returns if the class given by   class_name has been defined,   otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Check the class exists before trying to use it
if (class_exists('MyClass')) {
    $myclass = new MyClass();
}

?>

      

<?php
function __autoload($class)
{
    include($class . '.php');

    // Check to see if the include declared the class
    if (!class_exists($class, false)) {
        trigger_error("Unable to load class: $class", E_USER_WARNING);
    }
}
    
if (class_exists('MyClass')) {
    $myclass = new MyClass();
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="COM_4" />
      <property kind="parameter" name="autoload" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="get_class">
    <description><![CDATA[  This function returns the name of the class of which the  object obj is an instance. Returns   if obj is not an object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class foo {
    function foo() 
    {
    // implements some logic
    }

    function name() 
    {
        echo "My name is " , get_class($this) , "\n";
    }
}

// create an object
$bar = new foo();

// external call
echo "Its name is " , get_class($bar) , "\n";

// internal call
$bar->name();

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Classes/Objects_2" />
    </properties>
    
  </element>
  <element kind="function" name="get_class_methods">
    <description><![CDATA[  This function returns an array of method names defined for the  class specified by class_name .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class myclass {
    // constructor
    function myclass() 
    {
        return(true);
    }
    
    // method 1
    function myfunc1() 
    {
        return(true);
    }

    // method 2
    function myfunc2() 
    {
        return(true);
    }
}

$my_object = new myclass();

$class_methods = get_class_methods(get_class($my_object));

foreach ($class_methods as $method_name) {
    echo "$method_name\n";
}

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="class_name" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="get_class_vars">
    <description><![CDATA[  This function will return an associative array of default public  properties of the class.  The resulting array elements are in the  form of varname => value .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class myclass {

    var $var1; // this has no default value...
    var $var2 = "xyz";
    var $var3 = 100;
    private $var4; // PHP 5
    
    // constructor
    function myclass() {
        // change some properties
        $this->var1 = "foo";
        $this->var2 = "bar";
        return true;
    }

}

$my_class = new myclass();

$class_vars = get_class_vars(get_class($my_class));

foreach ($class_vars as $name => $value) {
    echo "$name : $value\n";
}

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="COM_4" />
    </properties>
    
  </element>
  <element kind="function" name="get_declared_classes">
    <description><![CDATA[  This function returns an array of the names of the declared classes  in the current script.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(get_declared_classes());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="get_declared_interfaces">
    <description><![CDATA[  This function returns an array of the names of the declared interfaces  in the current script.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(get_declared_interfaces());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="get_object_vars">
    <description><![CDATA[  This function returns an associative array of defined object properties  for the specified object obj .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class Point2D {
    var $x, $y;
    var $label;

    function Point2D($x, $y) 
    {
        $this->x = $x;
        $this->y = $y;
    }

    function setLabel($label) 
    {
        $this->label = $label;
    }

    function getPoint() 
    {
        return array("x" => $this->x,
                     "y" => $this->y,
                     "label" => $this->label);
    }
}

// "$label" is declared but not defined
$p1 = new Point2D(1.233, 3.445);
print_r(get_object_vars($p1));

$p1->setLabel("point #1");
print_r(get_object_vars($p1));

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Classes/Objects_2" />
    </properties>
    
  </element>
  <element kind="function" name="get_parent_class">
    <description><![CDATA[  If obj is an object, returns the name of the  parent class of the class of which obj is an  instance.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class dad {
    function dad() 
    {
    // implements some logic
    }
}

class child extends dad {
    function child() 
    {
        echo "I'm " , get_parent_class($this) , "'s son\n";
    }
}

class child2 extends dad {
    function child2() 
    {
        echo "I'm " , get_parent_class('child2') , "'s son too\n";
    }
}

$foo = new child();
$bar = new child2();

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="obj" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="interface_exists">
    <description><![CDATA[  This function returns if the interface given by   interface_name has been defined,   otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Check the interface exists before trying to use it
if (interface_exists('MyInterface')) {
    class MyClass implements MyInterface
    {
        // Methods
    }
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="interface_name" type="string" required="1" />
      <property ref="Classes/Objects_5" />
    </properties>
    
  </element>
  <element kind="function" name="is_a">
    <description><![CDATA[  This function returns if the object is of this class or  has this class as one of its parents, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// define a class
class WidgetFactory
{
  var $oink = 'moo';
}

// create a new object
$WF = new WidgetFactory();

if (is_a($WF, 'WidgetFactory')) {
  echo "yes, \$WF is still a WidgetFactory\n";
}
?>

        

<?php
if ($WF instanceof WidgetFactory) {
    echo 'Yes, $WF is a WidgetFactory';
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="object" type="object" required="1" />
      <property ref="COM_4" />
    </properties>
    
  </element>
  <element kind="function" name="is_subclass_of">
    <description><![CDATA[  This function returns if the object   object , belongs to a class which is a  subclass of class_name , otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// define a class
class WidgetFactory
{
  var $oink = 'moo';
}

// define a child class
class WidgetFactory_Child extends WidgetFactory
{
  var $oink = 'oink';
}

// create a new object
$WF = new WidgetFactory();
$WFC = new WidgetFactory_Child();

if (is_subclass_of($WFC, 'WidgetFactory')) {
  echo "yes, \$WFC is a subclass of WidgetFactory\n";
} else {
  echo "no, \$WFC is not a subclass of WidgetFactory\n";
}


if (is_subclass_of($WF, 'WidgetFactory')) {
  echo "yes, \$WF is a subclass of WidgetFactory\n";
} else {
  echo "no, \$WF is not a subclass of WidgetFactory\n";
}


// usable only since PHP 5.0.3
if (is_subclass_of('WidgetFactory_Child', 'WidgetFactory')) {
  echo "yes, WidgetFactory_Child is a subclass of WidgetFactory\n";
} else {
  echo "no, WidgetFactory_Child is not a subclass of WidgetFactory\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="object" type="mixed" required="1" />
      <property ref="COM_4" />
    </properties>
    
  </element>
  <element kind="function" name="method_exists">
    <description><![CDATA[  This function returns if the method given by   method_name has been defined for the given   object , otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$directory = new Directory('.');
var_dump(method_exists($directory,'read'));
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Classes/Objects_9" />
      <property ref="Classes/Objects_1" />
    </properties>
    
  </element>
</group>
<group name="Classkit">
  <description><![CDATA[Classkit Functions]]></description>
  <element kind="function" name="classkit_import">
    <description><![CDATA[    The filename of the class method definitions to import  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// file: newclass.php
class Example {
    function foo() {
        return "bar!\n";
    }
}
?>

    

<?php
// requires newclass.php (see above)
class Example {
    function foo() {
        return "foo!\n";
    }
}

$e = new Example();

// output original
echo $e->foo();

// import replacement method
classkit_import('newclass.php');

// output imported
echo $e->foo();

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="classkit_method_add">
    <description><![CDATA[    The class to which this method will be added  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class Example {
    function foo() {
        echo "foo!\n";
    }
}

// create an Example object
$e = new Example();

// Add a new public method
classkit_method_add(
    'Example',
    'add',
    '$num1, $num2',
    'return $num1 + $num2;',
    CLASSKIT_ACC_PUBLIC
);

// add 12 + 4
echo $e->add(12, 4);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="classname" type="string" required="1" />
      <property kind="parameter" name="methodname" type="string" required="1" >
      <description>  The name of the method to add  </description>
      </property>
      <property kind="parameter" name="args" type="string" required="1" >
      <description>  Comma-delimited list of arguments for the newly-created method  </description>
      </property>
      <property kind="parameter" name="code" type="string" required="1" >
      <description>  The code to be evaluated when  is called  </description>
      </property>
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="classkit_method_copy">
    <description><![CDATA[    Destination class for copied method  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class Foo {
    function example() {
        return "foo!\n";
    }
}

class Bar {
    // initially, no methods
}

// copy the example() method from the Foo class to the Bar class, as baz()
classkit_method_copy('Bar', 'baz', 'Foo', 'example');

// output copied function
echo Bar::baz();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="dClass" type="string" required="1" />
      <property kind="parameter" name="dMethod" type="string" required="1" >
      <description>  Destination method name  </description>
      </property>
      <property kind="parameter" name="sClass" type="string" required="1" >
      <description>  Source class of the method to copy  </description>
      </property>
      <property kind="parameter" name="sMethod" type="string"  >
      <description>  Name of the method to copy from the source class. If this parameter is  omitted, the value of is assumed.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="classkit_method_redefine">
    <description><![CDATA[    The class in which to redefine the method  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class Example {
    function foo() {
        return "foo!\n";
    }
}

// create an Example object
$e = new Example();

// output Example::foo() (before redefine)
echo "Before: " . $e->foo();

// Redefine the 'foo' method
classkit_method_redefine(
    'Example',
    'foo',
    '',
    'return "bar!\n";',
    CLASSKIT_ACC_PUBLIC
);

// output Example::foo() (after redefine)
echo "After: " . $e->foo();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Classkit_1" />
      <property ref="Classkit_2" />
      <property ref="Classkit_3" />
      <property ref="Classkit_4" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="classkit_method_remove">
    <description><![CDATA[    The class in which to remove the method  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class Example {
    function foo() {
        return "foo!\n";
    }
    
    function bar() {
        return "bar!\n";
    }
}

// Remove the 'foo' method
classkit_method_remove(
    'Example',
    'foo'
);

echo implode(' ', get_class_methods('Example'));

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Classkit_1" />
      <property ref="Classkit_2" />
    </properties>
    
  </element>
  <element kind="function" name="classkit_method_rename">
    <description><![CDATA[    The class in which to rename the method  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class Example {
    function foo() {
        return "foo!\n";
    }
}

// Rename the 'foo' method to 'bar'
classkit_method_rename(
    'Example',
    'foo',
    'bar'
);

// output renamed function
echo Example::bar();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Classkit_1" />
      <property ref="Classkit_2" />
      <property kind="parameter" name="newname" type="string" required="1" >
      <description>  The new name to give to the renamed method  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="ClibPDF">
  <description><![CDATA[ClibPDF Functions]]></description>
  <element kind="function" name="cpdf_add_annotation">
    <description><![CDATA[  The cpdf_add_annotation adds a note with the  lower left corner at ( llx ,   lly ) and the upper right corner at  ( urx , ury ).    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="pdf_document" type="int" required="1" />
      <property kind="parameter" name="llx" type="float" required="1" />
      <property kind="parameter" name="lly" type="float" required="1" />
      <property kind="parameter" name="urx" type="float" required="1" />
      <property kind="parameter" name="ury" type="float" required="1" />
      <property kind="parameter" name="title" type="string" required="1" />
      <property kind="parameter" name="content" type="string" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_add_outline">
    <description><![CDATA[  The cpdf_add_outline function adds a bookmark  with text text that points to the current page.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$cpdf = cpdf_open(0);
cpdf_page_init($cpdf, 1, 0, 595, 842);
cpdf_add_outline($cpdf, 0, 0, 0, 1, "Page 1");
// ...
// some drawing
// ...
cpdf_finalize($cpdf);
Header("Content-type: application/pdf");
cpdf_output_buffer($cpdf);
cpdf_close($cpdf);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="lastoutline" type="int" required="1" />
      <property kind="parameter" name="sublevel" type="int" required="1" />
      <property kind="parameter" name="open" type="int" required="1" />
      <property kind="parameter" name="pagenr" type="int" required="1" />
      <property kind="parameter" name="text" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_arc">
    <description><![CDATA[  The cpdf_arc function draws an arc with  center at point  ( x_coor , y_coor )  and radius radius , starting at angle   start and ending at angle   end .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="x_coor" type="float" required="1" />
      <property kind="parameter" name="y_coor" type="float" required="1" />
      <property kind="parameter" name="radius" type="float" required="1" />
      <property kind="parameter" name="start" type="float" required="1" />
      <property kind="parameter" name="end" type="float" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_begin_text">
    <description><![CDATA[  The cpdf_begin_text function starts a text  section.  The created text section must be ended with   cpdf_end_text .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
cpdf_begin_text($pdf);
cpdf_set_font($pdf, 16, "Helvetica", "WinAnsiEncoding");
cpdf_text($pdf, 100, 100, "Some text");
cpdf_end_text($pdf)
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_circle">
    <description><![CDATA[  The cpdf_circle function draws a circle with  center at point  ( x_coor , y_coor )  and radius radius .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="ClibPDF_15" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_clip">
    <description><![CDATA[  The cpdf_clip function clips all drawing  to the current path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_close">
    <description><![CDATA[  The cpdf_close function closes the pdf document.   This should be the last function even after   cpdf_finalize , cpdf_output_buffer  and cpdf_save_to_file .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_closepath">
    <description><![CDATA[  The cpdf_closepath function closes the  current path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_closepath_fill_stroke">
    <description><![CDATA[  The cpdf_closepath_fill_stroke function closes,  fills the interior of the current path with the current fill color and  draws current path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_closepath_stroke">
    <description><![CDATA[  The cpdf_closepath_stroke function is a  combination of cpdf_closepath and   cpdf_stroke . Then clears the path.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_continue_text">
    <description><![CDATA[  The cpdf_continue_text function outputs the  string in text in the next line.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_curveto">
    <description><![CDATA[  The cpdf_curveto function draws a Bezier curve  from the current point to the point  ( x3 , y3 ) using  ( x1 , y1 ) and  ( x2 , y2 ) as control  points.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="x1" type="float" required="1" />
      <property kind="parameter" name="y1" type="float" required="1" />
      <property kind="parameter" name="x2" type="float" required="1" />
      <property kind="parameter" name="y2" type="float" required="1" />
      <property kind="parameter" name="x3" type="float" required="1" />
      <property kind="parameter" name="y3" type="float" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_end_text">
    <description><![CDATA[  The cpdf_end_text function ends a text  section which was started with cpdf_begin_text .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
cpdf_begin_text($pdf);
cpdf_set_font($pdf, 16, "Helvetica", "WinAnsiEncoding");
cpdf_text($pdf, 100, 100, "Some text");
cpdf_end_text($pdf)
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_fill">
    <description><![CDATA[  The cpdf_fill function fills the interior of  the current path with the current fill color.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_fill_stroke">
    <description><![CDATA[  The cpdf_fill_stroke function fills the interior of  the current path with the current fill color and draws current path.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_finalize">
    <description><![CDATA[  The cpdf_finalize function ends the document.  You still have to call cpdf_close .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_finalize_page">
    <description><![CDATA[  The cpdf_finalize_page function ends the page  with page number page_number .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="page_number" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_global_set_document_limits">
    <description><![CDATA[  The cpdf_global_set_document_limits function sets  several document limits. This function has to be called before   cpdf_open to take effect. It sets the limits  for any document open afterwards.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="maxpages" type="int" required="1" />
      <property kind="parameter" name="maxfonts" type="int" required="1" />
      <property kind="parameter" name="maximages" type="int" required="1" />
      <property kind="parameter" name="maxannotations" type="int" required="1" />
      <property kind="parameter" name="maxobjects" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_import_jpeg">
    <description><![CDATA[  The cpdf_import_jpeg function opens an image  stored in the file with the name file_name .  The format of the image has to be jpeg. The  image is placed on the current page at position  ( x_coor , y_coor ).  The image is rotated by angle degrees.   gsave should be non-zero to allow this  function to operate correctly.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="file_name" type="string" required="1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property kind="parameter" name="angle" type="float" required="1" />
      <property kind="parameter" name="width" type="float" required="1" />
      <property kind="parameter" name="height" type="float" required="1" />
      <property kind="parameter" name="x_scale" type="float" required="1" />
      <property kind="parameter" name="y_scale" type="float" required="1" />
      <property kind="parameter" name="gsave" type="int" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_lineto">
    <description><![CDATA[  The cpdf_lineto function draws a line from  the current point to the point with coordinates  ( x_coor , y_coor ).    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_moveto">
    <description><![CDATA[  The cpdf_moveto function set the current  point to the coordinates x_coor and   y_coor .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_newpath">
    <description><![CDATA[  The cpdf_newpath starts a new path on the  document given by the pdf_document  parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_open">
    <description><![CDATA[  The cpdf_open function opens  a new pdf document. The first parameter turns document compression  on if it is unequal to 0. The second optional parameter sets the  file in which the document is written. If it is omitted the document  is created in memory and can either be written into a file with  the cpdf_save_to_file or written to standard  output with cpdf_output_buffer .    ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="compression" type="int" required="1" />
      <property kind="parameter" name="filename" type="string"  />
      <property kind="parameter" name="doc_limits" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_output_buffer">
    <description><![CDATA[  The cpdf_output_buffer function outputs  the pdf document to stdout. The document has to be created in memory which  is the case if cpdf_open has been called with  no filename parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_page_init">
    <description><![CDATA[  The cpdf_page_init function starts a new  page with height height and width   width .   The page has number page_number and orientation   orientation . orientation  can be 0 for portrait and 1 for landscape. The last optional parameter   unit sets the unit for the coordinate system.  The value should be the number of postscript points per unit. Since  one inch is equal to 72 points, a value of 72 would set the unit  to one inch. The default is also 72.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_24" />
      <property kind="parameter" name="orientation" type="int" required="1" />
      <property ref="ClibPDF_33" />
      <property ref="ClibPDF_32" />
      <property kind="parameter" name="unit" type="float"  />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_place_inline_image">
    <description><![CDATA[  The cpdf_place_inline_image function places  an image created with the PHP image functions on the page at  position ( x_coor ,   y_coor ). The image can be scaled at the  same time.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="image" type="int" required="1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="ClibPDF_31" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
      <property ref="ClibPDF_36" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_rect">
    <description><![CDATA[  The cpdf_rect function draws a rectangle with  its lower left corner at point  ( x_coor , y_coor ).  This width is set to width .  This height is set to height .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$cpdf = cpdf_open(0);
cpdf_page_init($cpdf, 1, 0, 595, 842, 1.0);

// set the fill color to red
cpdf_setrgbcolor($cpdf, 1, 0, 0);

// draw a (180 * 100) rectangle
cpdf_rect($cpdf, 645, 400, 180, 100);

// fill the rectangle
cpdf_fill($cpdf);

cpdf_finalize($cpdf);
Header("Content-type: application/pdf");
cpdf_output_buffer($cpdf);
cpdf_close($cpdf);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_restore">
    <description><![CDATA[  The cpdf_restore function restores the  environment saved with cpdf_save . It works  like the postscript command grestore. Very useful if you want  to translate or rotate an object without effecting other objects.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
cpdf_save($pdf);
// do all kinds of rotations, transformations, ...
cpdf_restore($pdf)
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_rlineto">
    <description><![CDATA[  The cpdf_rlineto function draws a line from  the current point to the relative point with coordinates  ( x_coor , y_coor ).    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_rmoveto">
    <description><![CDATA[  The cpdf_rmoveto function set the current point  relative to the coordinates x_coor and   y_coor .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_rotate">
    <description><![CDATA[  The cpdf_rotate function set the rotation in  degrees to angle .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_31" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_rotate_text">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="pdfdoc" type="int" required="1" />
      <property ref="ClibPDF_31" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_save">
    <description><![CDATA[  The cpdf_save function saves the current  environment. It works like the postscript command gsave. Very  useful if you want to translate or rotate an object without effecting  other objects.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_save_to_file">
    <description><![CDATA[  The cpdf_save_to_file function outputs  the pdf document into a file if it has been created in memory.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_scale">
    <description><![CDATA[  The cpdf_scale function set the scaling factor  in both directions.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_34" />
      <property ref="ClibPDF_35" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_action_url">
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_43" />
      <property kind="parameter" name="xll" type="float" required="1" />
      <property kind="parameter" name="yll" type="float" required="1" />
      <property kind="parameter" name="xur" type="float" required="1" />
      <property ref="ClibPDF_46" />
      <property kind="parameter" name="url" type="string" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_char_spacing">
    <description><![CDATA[  The cpdf_set_char_spacing function sets the  spacing between characters.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="space" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_creator">
    <description><![CDATA[  The cpdf_set_creator function sets the  creator of a pdf document.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="creator" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_current_page">
    <description><![CDATA[  The cpdf_set_current_page function set the page  on which all operations are performed. One can switch between pages  until a page is finished with cpdf_finalize_page .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_24" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_font">
    <description><![CDATA[  The cpdf_set_font function sets the  current font face, font size and encoding. Currently only  the standard postscript fonts are supported.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="font_name" type="string" required="1" />
      <property kind="parameter" name="size" type="float" required="1" />
      <property kind="parameter" name="encoding" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_font_directories">
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_43" />
      <property kind="parameter" name="pfmdir" type="string" required="1" />
      <property kind="parameter" name="pfbdir" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_font_map_file">
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_43" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_horiz_scaling">
    <description><![CDATA[  The cpdf_set_horiz_scaling function sets the  horizontal scaling to scale percent.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="scale" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_keywords">
    <description><![CDATA[  The cpdf_set_keywords function sets the  keywords of a pdf document.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="keywords" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_leading">
    <description><![CDATA[  The cpdf_set_leading function sets the   distance between text lines. This will  be used if text is output by cpdf_continue_text .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="distance" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_page_animation">
    <description><![CDATA[  The cpdf_set_page_animation function set the  transition between following pages.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="transition" type="int" required="1" />
      <property kind="parameter" name="duration" type="float" required="1" />
      <property kind="parameter" name="direction" type="float" required="1" />
      <property ref="ClibPDF_40" />
      <property kind="parameter" name="inout" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_subject">
    <description><![CDATA[  The cpdf_set_subject function sets the   subject of a pdf document.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="subject" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_text_matrix">
    <description><![CDATA[  The cpdf_set_text_matrix function sets  a matrix which describes a transformation  applied on the current text font.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="matrix" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_text_pos">
    <description><![CDATA[  The cpdf_set_text_pos function sets the  position of text for the next cpdf_show   function call.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_text_rendering">
    <description><![CDATA[  The cpdf_set_text_rendering function  determines how text is rendered.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="rendermode" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_text_rise">
    <description><![CDATA[  The cpdf_set_text_rise function sets the  text rising to value units.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="value" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_title">
    <description><![CDATA[  The cpdf_set_title function sets the   title of a pdf document.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_6" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_viewer_preferences">
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_43" />
      <property kind="parameter" name="preferences" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_set_word_spacing">
    <description><![CDATA[  The cpdf_set_word_spacing function sets the  spacing between words.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_48" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setdash">
    <description><![CDATA[  The cpdf_setdash function set the dash  pattern white white units and   black black units. If both are 0 a solid  line is set.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="white" type="float" required="1" />
      <property kind="parameter" name="black" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setflat">
    <description><![CDATA[  The cpdf_setflat function set the flatness to  a value between 0 and 100.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_65" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setgray">
    <description><![CDATA[  The cpdf_setgray function sets the current  drawing and filling color to the given gray value.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="gray_value" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setgray_fill">
    <description><![CDATA[  The cpdf_setgray_fill function sets the current  gray value to fill a path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_65" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setgray_stroke">
    <description><![CDATA[  The cpdf_setgray_stroke function sets the current  drawing color to the given gray value.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_69" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setlinecap">
    <description><![CDATA[  The cpdf_setlinecap function set the linecap  parameter between a value of 0 and 2.  0 = butt end, 1 = round, 2 = projecting square.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="value" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setlinejoin">
    <description><![CDATA[  The cpdf_setlinejoin function set the  linejoin parameter between a value of  0 and 2. 0 = miter, 1 = round, 2 = bevel.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_70" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setlinewidth">
    <description><![CDATA[  The cpdf_setlinewidth function set the line  width to width .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_32" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setmiterlimit">
    <description><![CDATA[  The cpdf_setmiterlimit function set the  miter limit to a value greater or equal than 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_65" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setrgbcolor">
    <description><![CDATA[  The cpdf_setrgbcolor function sets the current  drawing and filling color to the given rgb color value.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property kind="parameter" name="red_value" type="float" required="1" />
      <property kind="parameter" name="green_value" type="float" required="1" />
      <property kind="parameter" name="blue_value" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setrgbcolor_fill">
    <description><![CDATA[  The cpdf_setrgbcolor_fill function sets the current  rgb color value to fill a path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_71" />
      <property ref="ClibPDF_72" />
      <property ref="ClibPDF_73" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_setrgbcolor_stroke">
    <description><![CDATA[  The cpdf_setrgbcolor_stroke function sets the current  drawing color to the given rgb color value.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_71" />
      <property ref="ClibPDF_72" />
      <property ref="ClibPDF_73" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_show">
    <description><![CDATA[  The cpdf_show function outputs the  string in text at the current position.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_show_xy">
    <description><![CDATA[  The cpdf_show_xy function outputs the  string text at position with coordinates  ( x_coor , y_coor ).    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_12" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_stringwidth">
    <description><![CDATA[  The cpdf_stringwidth function returns the  width of the string in text . It requires  a font to be set before.  ]]></description>
    <properties>
      <property kind="return" type="float" />	
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_stroke">
    <description><![CDATA[  The cpdf_stroke function draws a line along  current path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_text">
    <description><![CDATA[  The cpdf_text function outputs the string   text at position with coordinates  ( x_coor , y_coor ).    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_12" />
      <property kind="parameter" name="x_coor" type="float"  />
      <property ref="ClibPDF_14" />
      <property ref="Arrays_43" />
      <property kind="parameter" name="orientation" type="float"  />
      <property kind="parameter" name="alignmode" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="cpdf_translate">
    <description><![CDATA[  The cpdf_translate function set the origin of  coordinate system to the point ( x_coor ,   y_coor ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_1" />
      <property ref="ClibPDF_13" />
      <property ref="ClibPDF_14" />
    </properties>
    
  </element>
</group>
<group name="Crack">
  <description><![CDATA[Crack Functions]]></description>
  <element kind="function" name="crack_check">
    <description><![CDATA[   Performs an obscure check with the given password on the specified  dictionary.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="dictionary" type="resource" required="1" >
      <description>  The crack lib dictionary. If not specified, the last opened dictionary  is used.  </description>
      </property>
      <property kind="parameter" name="password" type="string" required="1" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="crack_closedict">
    <description><![CDATA[   crack_closedict closes the specified   dictionary identifier.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="dictionary" type="resource"  >
      <description>  The dictionary to close. If not specified, the current directory is  closed.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="crack_getlastmessage">
    <description><![CDATA[   crack_getlastmessage returns the message from the  last obscure check.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="crack_opendict">
    <description><![CDATA[   crack_opendict opens the specified CrackLib   dictionary for use with   crack_check .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="dictionary" type="string" required="1" >
      <description>  The path to the Cracklib dictionary.  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="Cybercash">
  <description><![CDATA[Cybercash Payment Functions]]></description>
  <element kind="function" name="cybercash_base64_decode">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="inbuff" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cybercash_base64_encode">
    <properties>
      <property ref="ret_string" />
      <property ref="Cybercash_1" />
    </properties>
    
  </element>
  <element kind="function" name="cybercash_decr">
    <description><![CDATA[  The function returns an associative array with the elements  "errcode" and, if "errcode" is , "outbuff" (string),  "outLth" (long) and "macbuff" (string).  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="wmk" type="string" required="1" />
      <property kind="parameter" name="sk" type="string" required="1" />
      <property ref="Cybercash_1" />
    </properties>
    
  </element>
  <element kind="function" name="cybercash_encr">
    <description><![CDATA[  The function returns an associative array with the elements  "errcode" and, if "errcode" is , "outbuff" (string),  "outLth" (long) and "macbuff" (string).  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Cybercash_2" />
      <property ref="Cybercash_3" />
      <property ref="Cybercash_1" />
    </properties>
    
  </element>
</group>
<group name="Cyrus IMAP">
  <description><![CDATA[Cyrus IMAP administration Functions]]></description>
  <element kind="function" name="cyrus_authenticate">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="connection" type="resource" required="1" />
      <property kind="parameter" name="mechlist" type="string"  />
      <property kind="parameter" name="service" type="string"  />
      <property kind="parameter" name="user" type="string"  />
      <property kind="parameter" name="minssf" type="int"  />
      <property kind="parameter" name="maxssf" type="int"  />
      <property kind="parameter" name="authname" type="string"  />
      <property kind="parameter" name="password" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="cyrus_bind">
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="callbacks" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cyrus_close">
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="cyrus_connect">
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="host" type="string"  />
      <property kind="parameter" name="port" type="string"  />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="cyrus_query">
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="query" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="cyrus_unbind">
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="trigger_name" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="DB++">
  <description><![CDATA[DB++ Functions]]></description>
  <element kind="function" name="dbplus_add">
    <description><![CDATA[  This function will add a tuple to a relation. The   tuple data is an array of attribute/value  pairs to be inserted into the given   relation . After successful execution the   tuple array will contain the complete data  of the newly created tuple, including all implicitly set domain  fields like sequences.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="relation" type="resource" required="1" />
      <property kind="parameter" name="tuple" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_aql">
    <description><![CDATA[   dbplus_aql will execute an AQL   query on the given   server and   dbpath .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="server" type="string"  />
      <property kind="parameter" name="dbpath" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_chdir">
    <description><![CDATA[   dbplus_chdir will change the virtual current  directory where relation files will be looked for by   dbplus_open .   dbplus_chdir will return the absolute path  of the current directory. Calling   dbplus_chdir without giving any   newdir may be used to query the current  working directory.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="newdir" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_close">
    <description><![CDATA[  Calling dbplus_close will close a relation  previously opened by dbplus_open .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_curr">
    <description><![CDATA[   dbplus_curr will read the data for the  current tuple for the given relation and  will pass it back as an associative array in   tuple .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_2" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_errcode">
    <description><![CDATA[   dbplus_errcode returns a cleartext error  string for the error code passed as errno  of for the result code of the last db++ operation if no parameter  is given.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="errno" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_errno">
    <description><![CDATA[   dbplus_errno will return the error code  returned by the last db++ operation.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_find">
    <description><![CDATA[   dbplus_find will place a constraint on the  given relation. Further calls to functions like   dbplus_curr or   dbplus_next will only return tuples matching  the given constraints.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="constraints" type="array" required="1" />
      <property kind="parameter" name="tuple" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_first">
    <description><![CDATA[   dbplus_curr will read the data for the first  tuple for the given relation , make it the  current tuple and pass it back as an associative array in   tuple .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_2" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_flush">
    <description><![CDATA[   dbplus_flush will write all changes applied  to relation since the last flush to disk.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_freealllocks">
    <description><![CDATA[   dbplus_freealllocks will free all tuple locks  held by this client.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_freelock">
    <description><![CDATA[   dbplus_freelock will release a write lock on  the given tuple previously obtained by   dbplus_getlock .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="tname" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_freerlocks">
    <description><![CDATA[   dbplus_freerlocks will free all tuple locks held  on the given relation .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_getlock">
    <description><![CDATA[   dbplus_getlock will request a write lock on  the specified tuple . It will return zero on  success or a non-zero error code, especially DBPLUS_ERR_WLOCKED,  on failure.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_9" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_getunique">
    <description><![CDATA[   dbplus_getunique will obtain a number  guaranteed to be unique for the given   relation and will pass it back in the  variable given as uniqueid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="uniqueid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_info">
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="key" type="string" required="1" />
      <property kind="parameter" name="result" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_last">
    <description><![CDATA[   dbplus_curr will read the data for the last  tuple for the given relation , make it the  current tuple and pass it back as an associative array in   tuple .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_2" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_lockrel">
    <description><![CDATA[   dbplus_lockrel will request a write lock  on the given relation. Other clients may still query the  relation, but can't alter it while it is locked.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_next">
    <description><![CDATA[   dbplus_curr will read the data for the next  tuple for the given relation , will make it  the current tuple and will pass it back as an associative array  in tuple .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_2" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_open">
    <description><![CDATA[  The relation file name will be opened.   name can be either a file name or a  relative or absolute path name. This will be mapped in any case  to an absolute relation file path on a specific host machine and  server.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_prev">
    <description><![CDATA[   dbplus_curr will read the data for the previous  tuple for the given relation , will make it  the current tuple and will pass it back as an associative array  in tuple .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_2" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rchperm">
    <description><![CDATA[   dbplus_rchperm will change access  permissions as specified by mask ,   user and group . The  values for these are operating system specific.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="mask" type="int" required="1" />
      <property kind="parameter" name="user" type="string" required="1" />
      <property kind="parameter" name="group" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rcreate">
    <description><![CDATA[   dbplus_rcreate will create a new relation  named name . An existing relation by the  same name will only be overwritten if the relation is currently  not in use and overwrite is set to TRUE.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="CCVS_7" />
      <property kind="parameter" name="domlist" type="mixed" required="1" />
      <property kind="parameter" name="overwrite" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rcrtexact">
    <description><![CDATA[   dbplus_rcrtexact will create an exact but  empty copy of the given relation under a  new name . An existing relation by the same   name will only be overwritten if   overwrite is and no other process is  currently using the relation.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="CCVS_7" />
      <property ref="DB++_1" />
      <property ref="DB++_17" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rcrtlike">
    <description><![CDATA[   dbplus_rcrtexact will create an  empty copy  of the given relation under a new   name , but with default indices. An  existing relation by the same name will  only be overwritten if overwrite is  and no other process is currently using the relation.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="CCVS_7" />
      <property ref="DB++_1" />
      <property kind="parameter" name="overwrite" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_resolve">
    <description><![CDATA[   dbplus_resolve will try to resolve the given   relation_name and find out internal server  id, real hostname and the database path on this host. The  function will return an array containing these values under the  keys 'sid', 'host' and 'host_path' or on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="relation_name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_restorepos">
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_2" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rkeys">
    <description><![CDATA[   dbplus_rkeys will replace the current  primary key for relation with the  combination of domains specified by domlist .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DB++_1" />
      <property ref="DB++_16" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_ropen">
    <description><![CDATA[   dbplus_ropen will open the relation   file locally for quick access without any  client/server overhead. Access is read only and only   dbplus_current and   dbplus_next may be applied to the returned  relation.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rquery">
    <description><![CDATA[   dbplus_rquery performs a local (raw) AQL  query using an AQL interpreter embedded into the db++ client  library. dbplus_rquery is faster than   dbplus_aql but will work on local data only.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Cyrus IMAP_12" />
      <property ref="DB++_4" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rrename">
    <description><![CDATA[   dbplus_rrename will change the name of   relation to name .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rsecindex">
    <description><![CDATA[   dbplus_rsecindex will create a new secondary  index for relation with consists of the  domains specified by domlist and is of  type type  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DB++_1" />
      <property ref="DB++_16" />
      <property ref="COM_27" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_runlink">
    <description><![CDATA[   dbplus_unlink will close and remove the   relation .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_rzap">
    <description><![CDATA[   dbplus_rzap will remove all tuples from   relation .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_savepos">
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_setindex">
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="idx_name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_setindexbynumber">
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="idx_number" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_sql">
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="DB++_3" />
      <property ref="DB++_4" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_tcl">
    <description><![CDATA[  A db++ server will prepare a TCL interpreter for each client  connection. This interpreter will enable the server to execute  TCL code provided by the client as a sort of stored procedures to  improve the performance of database operations by avoiding  client/server data transfers and context switches.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="sid" type="int" required="1" />
      <property kind="parameter" name="script" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_tremove">
    <description><![CDATA[   dbplus_tremove removes   tuple from relation  if it perfectly matches a tuple within the  relation. current , if given, will contain  the data of the new current tuple after calling   dbplus_tremove .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property ref="DB++_2" />
      <property kind="parameter" name="current" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_undo">
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_undoprepare">
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_unlockrel">
    <description><![CDATA[   dbplus_unlockrel will release a write lock  previously obtained by dbplus_lockrel .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_unselect">
    <description><![CDATA[  Calling dbplus_unselect will remove a  constraint previously set by dbplus_find on   relation .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_update">
    <description><![CDATA[   dbplus_update replaces the tuple given by   old with the data from   new if and only if   old completely matches a tuple within   relation .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
      <property kind="parameter" name="old" type="array" required="1" />
      <property kind="parameter" name="new" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_xlockrel">
    <description><![CDATA[   dbplus_xlockrel will request an exclusive  lock on relation preventing even read  access from other clients.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbplus_xunlockrel">
    <description><![CDATA[   dbplus_xunlockrel will release an exclusive  lock on relation previously obtained by   dbplus_xlockrel .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_1" />
    </properties>
    
  </element>
</group>
<group name="DBM">
  <description><![CDATA[DBM Functions [deprecated]]]></description>
  <element kind="function" name="dblist">
    <properties>
      <property kind="example">
        <description><![CDATA[[marcus@zaphod marcus]$ php -r 'echo dblist();'
This is GDBM version 1.8.0, as of May 19, 1999.]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="dbmclose">
    <description><![CDATA[  Unlocks and closes the specified database.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="dbm_identifier" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbmdelete">
    <description><![CDATA[  Deletes the value for key in the database.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DBM_1" />
      <property ref="DB++_11" />
    </properties>
    
  </element>
  <element kind="function" name="dbmexists">
    <description><![CDATA[  Returns if there is a value associated with the   key .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DBM_1" />
      <property ref="DB++_11" />
    </properties>
    
  </element>
  <element kind="function" name="dbmfetch">
    <description><![CDATA[  Returns the value associated with key .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DBM_1" />
      <property ref="DB++_11" />
    </properties>
    
  </element>
  <element kind="function" name="dbmfirstkey">
    <description><![CDATA[  Returns the first key in the database. Note that no particular order  is guaranteed since the database may be built using a hash-table,  which doesn't guarantee any ordering.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DBM_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbminsert">
    <description><![CDATA[  Adds the value to the database with the specified key.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DBM_1" />
      <property ref="DB++_11" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="dbmnextkey">
    <description><![CDATA[  Returns the next key after key . By calling   dbmfirstkey followed by successive  calls to dbmnextkey it is possible to  visit every key/value pair in the dbm database. For example:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$key = dbmfirstkey($dbm_id);
while ($key) {
    echo "$key = " . dbmfetch($dbm_id, $key) . "\n";
    $key = dbmnextkey($dbm_id, $key);
}

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DBM_1" />
      <property ref="DB++_11" />
    </properties>
    
  </element>
  <element kind="function" name="dbmopen">
    <description><![CDATA[  The first argument is the full-path filename of the DBM file to  be opened and the second is the file open mode which is one of  "r", "n", "c" or "w" for read-only, new (implies read-write, and  most likely will truncate an already-existing database of the  same name), create (implies read-write, and will not truncate an  already-existing database of the same name) and read-write  respectively.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property kind="parameter" name="flags" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbmreplace">
    <description><![CDATA[  Replaces the value for the specified key in the database.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DBM_1" />
      <property ref="DB++_11" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
</group>
<group name="DOM">
  <description><![CDATA[DOM Functions]]></description>
  <element kind="function" name="appendChild">
    <description><![CDATA[  This functions appends a child to an existing list of children or creates  a new list of children. The child can be created with e.g. , etc. or simply by using  any other node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument;

$node = $doc->createElement("para");
$newnode = $doc->appendChild($node);

echo $doc->saveXML();
?>]]></description>
      </property>
      <property kind="return" type="DOMNode" />	
      <property kind="parameter" name="newnode" type="DOMNode" required="1" >
      <description>  The appended child.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="appendData">
    <description><![CDATA[  Append the string data to the end of the character data of the node.  ]]></description>
    <properties>
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="cloneNode">
    <description><![CDATA[  Creates a copy of the node.  ]]></description>
    <properties>
      <property ref="ret_DOMNode" />
      <property kind="parameter" name="deep" type="bool"  >
      <description>  Indicates whether to copy all descendant nodes. This parameter is  defaulted to .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="createAttribute">
    <description><![CDATA[  This function creates a new instance of class .    ]]></description>
    <properties>
      <property kind="return" type="DOMAttr" />	
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="createAttributeNS">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property ref="ret_DOMAttr" />
      <property kind="parameter" name="namespaceURI" type="string" required="1" >
      <description>  The URI of the namespace.  </description>
      </property>
      <property kind="parameter" name="qualifiedName" type="string" required="1" >
      <description>  The tag name and prefix of the attribute, as .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="createCDATASection">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property kind="return" type="DOMCDATASection" />	
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="createComment">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property kind="return" type="DOMComment" />	
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="createDocument">
    <description><![CDATA[  Creates a object of the specified type  with its document element.  ]]></description>
    <properties>
      <property kind="return" type="DOMDocument" />	
      <property kind="parameter" name="namespaceURI" type="string"  >
      <description>  The namespace URI of the document element to create.  </description>
      </property>
      <property kind="parameter" name="qualifiedName" type="string"  >
      <description>  The qualified name of the document element to create.  </description>
      </property>
      <property kind="parameter" name="doctype" type="DOMDocumentType"  >
      <description>  The type of document to create or .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="createDocumentFragment">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property kind="return" type="DOMDocumentFragment" />	
    </properties>
    
  </element>
  <element kind="function" name="createDocumentType">
    <description><![CDATA[  Creates an empty object. Entity  declarations and notations are not made available. Entity reference  expansions and default attribute additions do not occur.  ]]></description>
    <properties>
      <property kind="return" type="DOMDocumentType" />	
      <property ref="DOM_6" />
      <property kind="parameter" name="publicId" type="string"  >
      <description>  The external subset public identifier.  </description>
      </property>
      <property kind="parameter" name="systemId" type="string"  >
      <description>  The external subset system identifier.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="createElement">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$dom = new DOMDocument('1.0', 'iso-8859-1');

$element = $dom->createElement('test', 'This is the root element!');

// We insert the new element as root (child of the document)
$dom->appendChild($element);

echo $dom->saveXML();
?>]]></description>
      </property>
      <property kind="return" type="DOMElement" />	
      <property ref="CCVS_7" />
      <property kind="parameter" name="value" type="string"  >
      <description>  The value of the element. By default, an empty element will be created.  You can also set the value later with .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="createElementNS">
    <description><![CDATA[  This function creates a new element node with an associated namespace.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$dom = new DOMDocument('1.0', 'iso-8859-1');

$element = $dom->createElementNS('http://www.example.com/XFoo', 'xfoo:test', 'This is the root element!');

// We insert the new element as root (child of the document)
$dom->appendChild($element);

echo $dom->saveXML();
?>]]></description>
      </property>
      <property ref="ret_DOMElement" />
      <property ref="DOM_3" />
      <property ref="DOM_4" />
      <property ref="DOM_10" />
    </properties>
    
  </element>
  <element kind="function" name="createEntityReference">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property kind="return" type="DOMEntityReference" />	
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="createProcessingInstruction">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property kind="return" type="DOMProcessingInstruction" />	
      <property kind="parameter" name="target" type="string" required="1" >
      <description>  The target of the processing instruction.  </description>
      </property>
      <property kind="parameter" name="data" type="string"  >
      <description>  The content of the processing instruction.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="createTextNode">
    <description><![CDATA[  This function creates a new instance of class   .  ]]></description>
    <properties>
      <property kind="return" type="DOMText" />	
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="deleteData">
    <description><![CDATA[  Deletes count characters starting from position   offset .  ]]></description>
    <properties>
      <property ref="Arrays_35" />
      <property kind="parameter" name="count" type="int" required="1" >
      <description>  The number of characters to delete. If the sum of   and exceeds  the length, then all characters to the end of the data are deleted.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="dom_import_simplexml">
    <description><![CDATA[  This function takes the node node of class   and makes it into a   node. This new object can then be used  as a native node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$sxe = simplexml_load_string('<books><book><title>blah</title></book></books>');

if ($sxe === false) {
    echo 'Error while parsing the document';
    exit;
}

$dom_sxe = dom_import_simplexml($sxe);
if (!$dom_sxe) {
    echo 'Error while converting XML';
    exit;
}

$dom = new DOMDocument('1.0');
$dom_sxe = $dom->importNode($dom_sxe, true);
$dom_sxe = $dom->appendChild($dom_sxe);

echo $dom->saveXML();

?>]]></description>
      </property>
      <property ref="ret_DOMElement" />
      <property kind="parameter" name="node" type="SimpleXMLElement" required="1" >
      <description>  The node.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="evaluate">
    <description><![CDATA[  Executes the given XPath expression and returns  a typed result if possible.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument;

$doc->load('book.xml');

$xpath = new DOMXPath($doc);

$tbody = $doc->getElementsByTagName('tbody')->item(0);

// our query is relative to the tbody node
$query = 'count(row/entry[. = "en"])';

$entries = $xpath->evaluate($query, $tbody);
echo "There are $entries english books\n";

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="expression" type="string" required="1" >
      <description>  The XPath expression to execute.  </description>
      </property>
      <property kind="parameter" name="contextnode" type="DOMNode"  >
      <description>  The optional can be specified for  doing relative XPath queries. By default, the queries are relative to  the root element.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="getAttribute">
    <description><![CDATA[  Gets the value of the attribute with name name   for the current node.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="getAttributeNS">
    <description><![CDATA[  Gets the value of the attribute in namespace namespaceURI   with local name localName for the current node.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM_3" />
      <property kind="parameter" name="localName" type="string" required="1" >
      <description>  The local name.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="getAttributeNode">
    <description><![CDATA[  Returns the attribute node with name name for the  current element.  ]]></description>
    <properties>
      <property ref="ret_DOMAttr" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="getAttributeNodeNS">
    <description><![CDATA[  Returns the attribute node in namespace namespaceURI   with local name localName for the current node.  ]]></description>
    <properties>
      <property ref="ret_DOMAttr" />
      <property ref="DOM_3" />
      <property ref="DOM_17" />
    </properties>
    
  </element>
  <element kind="function" name="getElementById">
    <description><![CDATA[  This function is similar to   but  searches for an element with a given id.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DomDocument;

// We need to validate our document before refering to the id
$doc->validateOnParse = true;
$doc->Load('book.xml');

echo "The element whose id is books is: " . $doc->getElementById('books')->tagName . "\n";

?>]]></description>
      </property>
      <property ref="ret_DOMElement" />
      <property kind="parameter" name="elementId" type="string" required="1" >
      <description>  The unique id value for an element.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="getElementsByTagName">
    <description><![CDATA[  This function returns a new instance of the class   of all descendant elements with a  given tag name , in the order in which they are  encountered in a preorder traversal of this element tree.  ]]></description>
    <properties>
      <property kind="return" type="DOMNodeList" />	
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="getElementsByTagNameNS">
    <description><![CDATA[  This function fetch all the descendant elements with a given   localName and namespaceURI .  ]]></description>
    <properties>
      <property ref="ret_DOMNodeList" />
      <property ref="DOM_3" />
      <property ref="DOM_17" />
    </properties>
    
  </element>
  <element kind="function" name="getNamedItem">
    <description><![CDATA[  Retrieves a node specified by its .  ]]></description>
    <properties>
      <property ref="ret_DOMNode" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="getNamedItemNS">
    <description><![CDATA[  Retrieves a node specified by localName and   namespaceURI .  ]]></description>
    <properties>
      <property ref="ret_DOMNode" />
      <property ref="DOM_3" />
      <property ref="DOM_17" />
    </properties>
    
  </element>
  <element kind="function" name="hasAttribute">
    <description><![CDATA[  Indicates whether attribute named name   exists as a member of the element.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="hasAttributeNS">
    <description><![CDATA[  Indicates whether attribute in namespace namespaceURI   named localName exists as a member of the element.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_3" />
      <property ref="DOM_17" />
    </properties>
    
  </element>
  <element kind="function" name="hasAttributes">
    <description><![CDATA[  This method checks if the node has attributes. The tested node have to be  an .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="hasChildNodes">
    <description><![CDATA[  This function checks if the node has children.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="hasFeature">
    <description><![CDATA[  Test if the DOM implementation implements a specific   feature .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$features = array(
  'Core'           => 'Core module',
  'XML'            => 'XML module',
  'HTML'           => 'HTML module',
  'Views'          => 'Views module',
  'Stylesheets'    => 'Style Sheets module',
  'CSS'            => 'CSS module',
  'CSS2'           => 'CSS2 module',
  'Events'         => 'Events module',
  'UIEvents'       => 'User interface Events module',
  'MouseEvents'    => 'Mouse Events module',
  'MutationEvents' => 'Mutation Events module',
  'HTMLEvents'     => 'HTML Events module',
  'Range'          => 'Range module',
  'Traversal'      => 'Traversal module'
);
               
foreach ($features as $key => $name) {
  if (DOMImplementation::hasFeature($key, '2.0')) {
    echo "Has feature $name\n";
  } else {
    echo "Missing feature $name\n";
  }
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="feature" type="string" required="1" >
      <description>  The feature to test.  </description>
      </property>
      <property kind="parameter" name="version" type="string" required="1" >
      <description>  The version number of the to test. In  level 2, this can be either or   .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="importNode">
    <description><![CDATA[  This function returns a copy of the node to import and associates it with  the current document.  ]]></description>
    <properties>
      <property ref="ret_DOMNode" />
      <property kind="parameter" name="importedNode" type="DOMNode" required="1" >
      <description>  The node to import.  </description>
      </property>
      <property ref="DOM_2" />
    </properties>
    
  </element>
  <element kind="function" name="insertBefore">
    <description><![CDATA[  This function inserts a new node right before the reference node.  If you plan to do further modifications on the appended child you must use  the returned node.  ]]></description>
    <properties>
      <property ref="ret_DOMNode" />
      <property ref="DOM_1" />
      <property kind="parameter" name="refnode" type="DOMNode"  >
      <description>  The reference node. If not supplied, is  appended to the children.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="insertData">
    <description><![CDATA[  Inserts string data at position offset .  ]]></description>
    <properties>
      <property ref="Arrays_35" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="isId">
    <description><![CDATA[  This function checks if the attribute is a defined ID.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DomDocument;

// We need to validate our document before refering to the id
$doc->validateOnParse = true;
$doc->Load('book.xml');

// We retrieve the attribute named id of the chapter element
$attr = $doc->getElementsByTagName('chapter')->item(0)->getAttributeNode('id');

var_dump($attr->isId()); // bool(true)

?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="isSameNode">
    <description><![CDATA[  This function indicates if two nodes are the same node.  The comparison is based on content  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="node" type="DOMNode" required="1" >
      <description>  The compared node.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="isSupported">
    <description><![CDATA[  Checks if the asked feature is supported for the  specified version .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_19" />
      <property ref="DOM_20" />
    </properties>
    
  </element>
  <element kind="function" name="isWhitespaceInElementContent">
    <description><![CDATA[  Indicates whether this text node contains whitespace. The text node is  determined to contain whitespace in element content during the load of the  document.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="item">
    <description><![CDATA[  Retrieves a node specified by index within the   object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument;
$doc->load('book.xml');

$items = $doc->getElementsByTagName('entry');

for ($i = 0; $i < $items->length; $i++) {
    echo $items->item($i)->nodeValue . "\n";	
}

?>

    

<?php

foreach ($items as $item) {
    echo $item->nodeValue . "\n";	
}

?>]]></description>
      </property>
      <property ref="ret_DOMNode" />
      <property kind="parameter" name="index" type="int" required="1" >
      <description>  Index of the node into the collection.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="load">
    <description><![CDATA[  Loads an XML document from a file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = DOMDocument::load('book.xml');
echo $doc->saveXML();

$doc = new DOMDocument();
$doc->load('book.xml');
echo $doc->saveXML();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="loadHTML">
    <description><![CDATA[  The function parses the HTML contained in the string source .  Unlike loading XML, HTML does not have to be well-formed to load. This  function may also be called statically to load and create a   object. The static invocation may be  used when no properties need to be  set prior to loading.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = DOMDocument::loadHTML("<html><body>Test<br></body></html>");
echo $doc->saveHTML();

$doc = new DOMDocument();
$doc->loadHTML("<html><body>Test<br></body></html>");
echo $doc->saveHTML();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Bzip2_2" />
    </properties>
    
  </element>
  <element kind="function" name="loadHTMLFile">
    <description><![CDATA[  The function parses the HTML document in the file named   filename . Unlike loading XML, HTML does not have  to be  well-formed to load.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = DOMDocument::loadHTMLFile("filename.html");
print $doc->saveHTML();

$doc = new DOMDocument();
$doc->loadHTMLFile("filename.html");
print $doc->saveHTML();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="loadXML">
    <description><![CDATA[  Loads an XML document from a string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = DOMDocument::loadXML('<root><node/></root>');
echo $doc->saveXML();

$doc = new DOMDocument();
$doc->loadXML('<root><node/></root>');
echo $doc->saveXML();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Bzip2_2" />
    </properties>
    
  </element>
  <element kind="function" name="lookupNamespaceURI">
    <description><![CDATA[  Gets the namespace URI of the node based on the   prefix .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="prefix" type="string" required="1" >
      <description>  The prefix of the namespace.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="lookupPrefix">
    <description><![CDATA[  Gets the namespace prefix of the node based on the namespace URI.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM_3" />
    </properties>
    
  </element>
  <element kind="function" name="normalize">
    <description><![CDATA[  Normalizes the node.  ]]></description>
    <properties>
    </properties>
    
  </element>
  <element kind="function" name="query">
    <description><![CDATA[  Executes the given XPath expression .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument;

// We don't want to bother with white spaces
$doc->preserveWhiteSpace = false;

$doc->Load('book.xml');

$xpath = new DOMXPath($doc);

// We starts from the root element
$query = '//book/chapter/para/informaltable/tgroup/tbody/row/entry[. = "en"]';

$entries = $xpath->query($query);

foreach ($entries as $entry) {
    echo "Found {$entry->previousSibling->previousSibling->nodeValue}," .
         " by {$entry->previousSibling->nodeValue}\n";
}
?>

    

<?php

$doc = new DOMDocument;
$doc->preserveWhiteSpace = false;

$doc->load('book.xml');

$xpath = new DOMXPath($doc);

$tbody = $doc->getElementsByTagName('tbody')->item(0);

// our query is relative to the tbody node
$query = 'row/entry[. = "en"]';

$entries = $xpath->query($query, $tbody);

foreach ($entries as $entry) {
    echo "Found {$entry->previousSibling->previousSibling->nodeValue}," .
         " by {$entry->previousSibling->nodeValue}\n";
}
?>]]></description>
      </property>
      <property ref="ret_DOMNodeList" />
      <property ref="DOM_15" />
      <property ref="DOM_16" />
    </properties>
    
  </element>
  <element kind="function" name="registerNamespace">
    <description><![CDATA[  Registers the namespaceURI and   prefix with the DOMXpath object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_25" />
      <property ref="DOM_3" />
    </properties>
    
  </element>
  <element kind="function" name="relaxNGValidate">
    <description><![CDATA[  Performs validation on the document  based on the given RNG schema.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="relaxNGValidateSource">
    <description><![CDATA[  Performs validation on the document  based on the given RNG source.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_2" />
    </properties>
    
  </element>
  <element kind="function" name="removeAttribute">
    <description><![CDATA[  Removes attribute named name from the element.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="removeAttributeNS">
    <description><![CDATA[  Removes attribute is namespace namespaceURI   named localName from the element.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_3" />
      <property ref="DOM_17" />
    </properties>
    
  </element>
  <element kind="function" name="removeAttributeNode">
    <description><![CDATA[  Removes attribute oldnode from the element.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="oldnode" type="DOMAttr" required="1" >
      <description>  The attribute node.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="removeChild">
    <description><![CDATA[  This functions removes a child from a list of children.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument;
$doc->load('book.xml');

$book = $doc->documentElement;

// we retrieve the chapter and remove it from the book
$chapter = $book->getElementsByTagName('chapter')->item(0);
$oldchapter = $book->removeChild($chapter);

echo $doc->saveXML();
?>]]></description>
      </property>
      <property ref="ret_DOMNode" />
      <property kind="parameter" name="oldnode" type="DOMNode" required="1" >
      <description>  The removed child.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="replaceChild">
    <description><![CDATA[  This function replaces the child oldnode   with the passed new node. If the new node is already a child it  will not be added a second time. If the replacement succeeds the  old node  is returned.  ]]></description>
    <properties>
      <property ref="ret_DOMNode" />
      <property ref="DOM_1" />
      <property ref="DOM_27" />
    </properties>
    
  </element>
  <element kind="function" name="replaceData">
    <description><![CDATA[  Replace count characters starting from position   offset with data .  ]]></description>
    <properties>
      <property ref="Arrays_35" />
      <property ref="DOM_13" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="save">
    <description><![CDATA[  Creates an XML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument('1.0');
// we want a nice output
$doc->formatOutput = true;

$root = $doc->createElement('book');
$root = $doc->appendChild($root);

$title = $doc->createElement('title');
$title = $root->appendChild($title);

$text = $doc->createTextNode('This is the title');
$text = $title->appendChild($text);

echo 'Wrote: ' . $doc->save("/tmp/test.xml") . ' bytes'; // Wrote: 72 bytes

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="saveHTML">
    <description><![CDATA[  Creates an HTML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument('1.0');
// we want a nice output
$doc->formatOutput = true;

$root = $doc->createElement('html');
$root = $doc->appendChild($root);

$head = $doc->createElement('head');
$head = $root->appendChild($head);

$title = $doc->createElement('title');
$title = $head->appendChild($title);

$text = $doc->createTextNode('This is the title');
$text = $title->appendChild($text);

echo $doc->saveHTML();

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="saveHTMLFile">
    <description><![CDATA[  Creates an HTML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument('1.0');
// we want a nice output
$doc->formatOutput = true;

$root = $doc->createElement('html');
$root = $doc->appendChild($root);

$head = $doc->createElement('head');
$head = $root->appendChild($head);

$title = $doc->createElement('title');
$title = $head->appendChild($title);

$text = $doc->createTextNode('This is the title');
$text = $title->appendChild($text);

echo 'Wrote: ' . $doc->saveHTMLFile("/tmp/test.html") . ' bytes'; // Wrote: 129 bytes

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="saveXML">
    <description><![CDATA[  Creates an XML document from the DOM representation. This function is usually  called after building a new dom document from scratch as in the example below.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$doc = new DOMDocument('1.0');
// we want a nice output
$doc->formatOutput = true;

$root = $doc->createElement('book');
$root = $doc->appendChild($root);

$title = $doc->createElement('title');
$title = $root->appendChild($title);

$text = $doc->createTextNode('This is the title');
$text = $title->appendChild($text);

echo "Retrieving all the document:\n";
echo $doc->saveXML() . "\n";

echo "Retrieving only the title part:\n";
echo $doc->saveXML($title);

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="node" type="DOMNode"  >
      <description>  Use this parameter to output only a specific node without XML declaration  rather than the entire document.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="schemaValidate">
    <description><![CDATA[  Validates a document based on a the given schema file.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="schemaValidateSource">
    <description><![CDATA[  Validates a document based on a schema defined in the given string.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_2" />
    </properties>
    
  </element>
  <element kind="function" name="setAttribute">
    <description><![CDATA[  Sets an attribute with name name to the given  value. If the attribute does not exist, it will be created.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = new DOMDocument("1.0");
$node = $doc->createElement("para");
$newnode = $doc->appendChild($node);
$newnode->setAttribute("align", "left");
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="setAttributeNS">
    <description><![CDATA[  Sets an attribute with namespace namespaceURI and  name name to the given value. If the attribute  does not exist, it will be created.  ]]></description>
    <properties>
      <property ref="DOM_3" />
      <property ref="DOM_4" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="setAttributeNode">
    <description><![CDATA[  Adds new attribute node attr to element.  ]]></description>
    <properties>
      <property ref="ret_DOMAttr" />
      <property kind="parameter" name="attr" type="DOMAttr" required="1" >
      <description>  The attribute node.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="setAttributeNodeNS">
    <description><![CDATA[  Adds new attribute node attr to element.  ]]></description>
    <properties>
      <property ref="ret_DOMAttr" />
      <property ref="DOM_29" />
    </properties>
    
  </element>
  <element kind="function" name="splitText">
    <description><![CDATA[  Breaks this node into two nodes at the specified offset ,  keeping both in the tree as siblings.  ]]></description>
    <properties>
      <property ref="ret_DOMText" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="substringData">
    <description><![CDATA[  Returns the specified substring.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Arrays_35" />
      <property ref="DOM_13" />
    </properties>
    
  </element>
  <element kind="function" name="validate">
    <description><![CDATA[  Validates the document based on its DTD.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dom = new DOMDocument;
$dom->Load('book.xml');
if ($dom->validate()) {
    echo "This document is valid!\n";	
}
?>

    

<?php
$dom = new DOMDocument;
$dom->validateOnParse = true;
$dom->Load('book.xml');
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="xinclude">
    <description><![CDATA[  This method substitutes in a DOMDocument object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$xml = <<<EOD
<?xml version="1.0" ?>
<chapter xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>Books of the other guy..</title>
 <para>
  <xi:include href="book.xml">
   <xi:fallback>
    <error>xinclude: book.xml not found</error>
   </xi:fallback>
  </xi:include>
 </para>
</chapter>
EOD;

$dom = new DOMDocument;

// let's have a nice output
$dom->preserveWhiteSpace = false;
$dom->formatOutput = true;

// load the XML string defined above
$dom->loadXML($xml);

// substitute xincludes
$dom->xinclude();

echo $dom->saveXML();

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="options" type="int"  >
      <description>   . Available  since PHP 5.1.0 and Libxml 2.6.7.  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="DOM XML">
  <description><![CDATA[DOM XML Functions]]></description>
  <element kind="function" name="DomAttribute->name">
    <description><![CDATA[  This function returns the name of the attribute.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomAttribute->specified">
    <description><![CDATA[  Check DOM standard for a detailed explanation.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DomAttribute->value">
    <description><![CDATA[  This function returns the value of the attribute.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
     echo "Error while parsing the document\n";
     exit;
}

$root = $dom->document_element();
$attrs = $root->attributes();

echo 'Attributes of ' . $root->node_name() . "\n";
foreach ($attrs as $attribute) {
     echo ' - ' . $attribute->name . ' : ' . $attribute->value . "\n";
}

?>]]></description>
      </property>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->add_root">
    <description><![CDATA[  Adds a root element node to a dom document and returns the new node.  The element name is given in the passed parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = domxml_new_doc("1.0");
$root = $doc->add_root("html");
$head = $root->new_child("head", "");
$head->new_child("title", "Hier der Titel");
echo htmlentities($doc->dump_mem());
?>]]></description>
      </property>
      <property kind="return" type="domelement" />	
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_attribute">
    <description><![CDATA[  This function returns a new instance of class   . The name of the attribute is the  value of the first parameter. The value of the attribute is the value of  the second parameter.  ]]></description>
    <properties>
      <property kind="return" type="domattribute" />	
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_cdata_section">
    <description><![CDATA[  This function returns a new instance of class   . The content of the cdata is the  value of the passed parameter.  ]]></description>
    <properties>
      <property kind="return" type="domcdata" />	
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_comment">
    <description><![CDATA[  This function returns a new instance of class   . The content of the comment is the  value of the passed parameter.  ]]></description>
    <properties>
      <property kind="return" type="domcomment" />	
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_element">
    <description><![CDATA[  This function returns a new instance of class   . The tag name of the element is the  value of the passed parameter.  ]]></description>
    <properties>
      <property ref="ret_domelement" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_element_ns">
    <description><![CDATA[  This function returns a new instance of class   . The tag name of the element is the  value of the passed parameter name . The URI of the  namespace is the value of the passed parameter uri .  If there is already a namespace declaration with the same uri in the root-node  of the document, the prefix of this is taken, otherwise it will take the one provided  in the optional parameter prefix or generate a random one.    ]]></description>
    <properties>
      <property ref="ret_domelement" />
      <property kind="parameter" name="uri" type="string" required="1" />
      <property ref="CCVS_7" />
      <property ref="Arrays_46" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_entity_reference">
    <description><![CDATA[  This function returns a new instance of class   . The content of the entity  reference is the value of the passed parameter.  ]]></description>
    <properties>
      <property kind="return" type="domentityreference" />	
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_processing_instruction">
    <description><![CDATA[  This function returns a new instance of class   . The content of the pi is the  value of the passed parameter.    ]]></description>
    <properties>
      <property kind="return" type="domprocessinginstruction" />	
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->create_text_node">
    <description><![CDATA[  This function returns a new instance of class   . The content of the text is the value of  the passed parameter.    ]]></description>
    <properties>
      <property kind="return" type="domtext" />	
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->doctype">
    <description><![CDATA[  This function returns an object of class   . In versions of  PHP before 4.3 this has been the class ,  but the DOM Standard does not know such a class.  ]]></description>
    <properties>
      <property kind="return" type="domdocumenttype" />	
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->document_element">
    <description><![CDATA[  This function returns the root element node of a document.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$root = $dom->document_element();
print_r($root);
?>]]></description>
      </property>
      <property ref="ret_domelement" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->dump_file">
    <description><![CDATA[  Creates an XML document from the dom representation. This function  usually is called after building a new dom document from scratch  as in the example below. The   format specifies whether the output should be  neatly formatted, or not. The first parameter specifies the name of the  filename and the second parameter, whether it should be compressed or not.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = domxml_new_doc("1.0");
$root = $doc->create_element("HTML");
$root = $doc->append_child($root);
$head = $doc->create_element("HEAD");
$head = $root->append_child($head);
$title = $doc->create_element("TITLE");
$title = $head->append_child($title);
$text = $doc->create_text_node("This is the title");
$text = $title->append_child($text);
$doc->dump_file("/tmp/test.xml", false, true);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Apache_3" />
      <property kind="parameter" name="compressionmode" type="bool"  />
      <property kind="parameter" name="format" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->dump_mem">
    <description><![CDATA[  Creates an XML document from the dom representation. This function  usually is called after building a new dom document from scratch  as in the example below. The   format specifies whether the output should be  neatly formatted, or not.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = domxml_new_doc("1.0");
$root = $doc->create_element("HTML");
$root = $doc->append_child($root);
$head = $doc->create_element("HEAD");
$head = $root->append_child($head);
$title = $doc->create_element("TITLE");
$title = $head->append_child($title);
$text = $doc->create_text_node("This is the title");
$text = $title->append_child($text);
echo "<PRE>";
echo htmlentities($doc->dump_mem(true));
echo "</PRE>";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_3" />
      <property kind="parameter" name="encoding" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->get_element_by_id">
    <description><![CDATA[  This function is similar to   domdocument_get_elements_by_tagname but searches for  an element with a given id. According to the DOM standard this requires a  DTD which defines the attribute ID to be of type ID, though the current  implementation simply does an xpath search for "//*[@ID = '%s']". This  does not comply to the DOM standard which requires to return null if it  is not known which attribute is of type id. This behaviour is likely to  be fixed, so do not rely on the current behaviour.  ]]></description>
    <properties>
      <property ref="ret_domelement" />
      <property kind="parameter" name="id" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->get_elements_by_tagname">
    <properties>
      <property ref="ret_array" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->html_dump_mem">
    <description><![CDATA[  Creates an HTML document from the dom representation. This function  usually is called after building a new dom document from scratch  as in the example below.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Creates the document
$doc = domxml_new_doc("1.0");

$root = $doc->create_element("html");
$root = $doc->append_child($root);

$head = $doc->create_element("head");
$head = $root->append_child($head);

$title = $doc->create_element("title");
$title = $head->append_child($title);

$text = $doc->create_text_node("This is the title");
$text = $title->append_child($text);

echo $doc->html_dump_mem();
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocument->xinclude">
    <description><![CDATA[  This function substitutes in a DomDocument object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// include.xml contains :
// <child>test</child> 

$xml = '<?xml version="1.0"?>
<root xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="include.xml">
    <xi:fallback>
      <error>xinclude: include.xml not found</error>
    </xi:fallback>
  </xi:include>
</root>';

$domxml = domxml_open_mem($xml);
$domxml->xinclude();

echo $domxml->dump_mem();

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocumentType->entities">
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocumentType->internal_subset">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocumentType->name">
    <description><![CDATA[  This function returns the name of the document type.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
    echo "Error while parsing the document\n";
    exit;
}

$doctype = $dom->doctype();
echo $doctype->name(); // chapter

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocumentType->notations">
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocumentType->public_id">
    <description><![CDATA[  This function returns the public id of the document type.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$doctype = $dom->doctype();
echo $doctype->public_id();
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomDocumentType->system_id">
    <description><![CDATA[  Returns the system id of the document type.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$doctype = $dom->doctype();
echo $doctype->system_id();
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomElement->get_attribute">
    <description><![CDATA[  Returns the value of the attribute named name  in the current node. The name parameter is case  sensitive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
    echo "Error while parsing the document\n";
    exit;
}

// get chapter
$root = $dom->document_element();
echo $root->get_attribute('language'); // en

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomElement->get_attribute_node">
    <description><![CDATA[  Returns the node of the attribute named name  in the current element. The name parameter is  case sensitive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
    echo "Error while parsing the document\n";
    exit;
}

$root = $dom->document_element();
if ($attribute = $root->get_attribute_node('language')) {
    echo 'Language is: ' . $attribute->value() . "\n";
}

?>]]></description>
      </property>
      <property ref="ret_domattribute" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomElement->get_elements_by_tagname">
    <description><![CDATA[  This function returns an array with all the elements which has   name as his tagname. Every element of the  array is a DomElement.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$root = $dom->document_element();

$node_array = $root->get_elements_by_tagname("element");

for ($i = 0; $i<count($node_array); $i++) {
    $node = $node_array[$i];
    echo "The element[$i] is: " . $node->get_content();
}

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomElement->has_attribute">
    <description><![CDATA[  This functions checks to see if an attribute named   name exists in the current node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
    echo "Error while parsing the document\n";
    exit;
}

$root = $dom->document_element();

$buffer = '<html';
if ($root->has_attribute('language')) {
    $buffer .= 'lang="' . $root->get_attribute('language') . '"';
}
$buffer .= '>';

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomElement->remove_attribute">
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="DomElement->set_attribute">
    <description><![CDATA[  Sets an attribute with name name to the given   value . If the attribute does not exist, it will  be created.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = domxml_new_doc("1.0");
$node = $doc->create_element("para");
$newnode = $doc->append_child($node);
$newnode->set_attribute("align", "left");
?>]]></description>
      </property>
      <property ref="ret_domattribute" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="DomElement->tagname">
    <description><![CDATA[  Returns the name of the current node. Calling this function is the same  as accessing the property, or calling   DomElement->node_name of the current node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
    echo "Error while parsing the document\n";
    exit;
}

$root = $dom->document_element();
echo $root->tagname();   // chapter
echo $root->tagname;     // chapter
echo $root->node_name(); // chapter


?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->add_namespace">
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM XML_1" />
      <property ref="DOM_25" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->append_child">
    <description><![CDATA[  This functions appends a child to an existing list of children or creates  a new list of children. The child can be created with e.g.   domdocument_create_element ,   domdocument_create_text etc. or simply by using any  other node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = domxml_new_doc("1.0");
$node = $doc->create_element("para");
$newnode = $doc->append_child($node);
$newnode->set_attribute("align", "left");
?>

      

<?php
$doc = domxml_new_doc("1.0");
$node = $doc->create_element("para");
$node->set_attribute("align", "left");
$newnode = $doc->append_child($node);
?>

      

<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$elements = $dom->get_elements_by_tagname("informaltable");
print_r($elements);
$element = $elements[0];

$parent = $element->parent_node();
$newnode = $parent->append_child($element);
$children = $newnode->children();
$attr = $children[1]->set_attribute("align", "left");

echo "<pre>";
$xmlfile = $dom->dump_mem();
echo htmlentities($xmlfile);
echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_domelement" />
      <property kind="parameter" name="newnode" type="domelement" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->append_sibling">
    <description><![CDATA[  This functions appends a sibling to an existing node.  The child can be created with e.g.   domdocument_create_element ,   domdocument_create_text etc. or simply by using any  other node.  ]]></description>
    <properties>
      <property ref="ret_domelement" />
      <property ref="DOM XML_6" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->attributes">
    <description><![CDATA[  This function only returns an array of attributes if the node is of  type XML_ELEMENT_NODE.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->child_nodes">
    <description><![CDATA[  Returns all children of the node.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->clone_node">
    <properties>
      <property ref="ret_domelement" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->dump_node">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->first_child">
    <description><![CDATA[  Returns the first child of the node.  ]]></description>
    <properties>
      <property ref="ret_domelement" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->get_content">
    <description><![CDATA[  This function returns the content of the actual node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$root = $dom->document_element();

$node_array = $root->get_elements_by_tagname("element");

for ($i = 0; $i<count($node_array); $i++) {
    $node = $node_array[$i];
    echo "The element[$i] is: " . $node->get_content();
}

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->has_attributes">
    <description><![CDATA[  This function checks if the node has attributes.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->has_child_nodes">
    <description><![CDATA[  This function checks if the node has children.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->insert_before">
    <description><![CDATA[  This function inserts the new node newnode right  before the node refnode . The return value is the  inserted node. If you plan to do further modifications on the appended  child you must use the returned node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$elements = $dom->get_elements_by_tagname("informaltable");
print_r($elements);
$element = $elements[0];

$newnode = $element->insert_before($element, $element);
$children = $newnode->children();
$attr = $children[1]->set_attribute("align", "left");

echo "<pre>";
$xmlfile = $dom->dump_mem();
echo htmlentities($xmlfile);
echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_domelement" />
      <property ref="DOM XML_6" />
      <property kind="parameter" name="refnode" type="domelement" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->is_blank_node">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->last_child">
    <description><![CDATA[  Returns the last child of the node.  ]]></description>
    <properties>
      <property ref="ret_domelement" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->next_sibling">
    <description><![CDATA[  This function returns the next sibling of the current node. If there is  no next sibling it returns ( < 4.3) or null ( > = 4.3). You can  use this function to iterate over all children of a node as shown in the  example.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$elements = $dom->get_elements_by_tagname("tbody");
$element = $elements[0];
$child = $element->first_child();

while ($child) {
   print_r($child);
   $child = $child->next_sibling();
}
?>]]></description>
      </property>
      <property ref="ret_domelement" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->node_name">
    <description><![CDATA[  Returns name of the node. The name has different meanings  for the different types of nodes as illustrated in the following table.    ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->node_type">
    <description><![CDATA[  Returns the type of the node. All possible types are listed in  the table in the introduction.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include 'example.inc';

$dom = domxml_open_mem($xmlstr);

$chapter = $dom->document_element();

// Let's see the elements contained in chapter
foreach($chapter->child_nodes() as $node) {
  if ($node->node_type() == XML_ELEMENT_NODE) {
    echo $node->node_name() . "\n";
  }
}

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->node_value">
    <description><![CDATA[  Returns value of the node. The value has different meanings  for the different types of nodes as illustrated in the following table.    ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->owner_document">
    <description><![CDATA[  This function returns the document the current node belongs to.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = domxml_new_doc("1.0");
$node = $doc->create_element("para");
$node = $doc->append_child($node);
$children = $doc->children();
print_r($children);

$doc2 = $node->owner_document();
$children = $doc2->children();
print_r($children);
?>]]></description>
      </property>
      <property kind="return" type="domdocument" />	
    </properties>
    
  </element>
  <element kind="function" name="DomNode->parent_node">
    <description><![CDATA[  This function returns the parent node.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$doc = domxml_new_doc("1.0");
$node = $doc->create_element("para");
$node = $doc->append_child($node);
$children = $doc->children();
print_r($children);

$doc2 = $node->parent_node();
$children = $doc2->children();
print_r($children);
?>]]></description>
      </property>
      <property kind="return" type="domnode" />	
    </properties>
    
  </element>
  <element kind="function" name="DomNode->prefix">
    <description><![CDATA[  Returns the name space prefix of the node.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->previous_sibling">
    <description><![CDATA[  This function returns the previous sibling of the current node. If there  is no previous sibling it returns ( < 4.3) or ( > = 4.3). You  can use this function to iterate over all children of a node as shown in  the example.  ]]></description>
    <properties>
      <property ref="ret_domelement" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->remove_child">
    <description><![CDATA[  This functions removes a child from a list of children. If child cannot  be removed or is not a child the function will return .  If the child could be removed the functions returns the old child.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$elements = $dom->get_elements_by_tagname("tbody");
$element = $elements[0];
$children = $element->child_nodes();
$child = $element->remove_child($children[0]);

echo "<PRE>";
$xmlfile = $dom->dump_mem(true);
echo htmlentities($xmlfile);
echo "</PRE>";
?>]]></description>
      </property>
      <property ref="ret_domtext" />
      <property kind="parameter" name="oldchild" type="domtext" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->replace_child">
    <description><![CDATA[  (PHP 4.2) This function replaces the child oldnode  with the passed new node. If the new node is already a child it  will not be added a second time. If the old node cannot be found  the function returns . If the replacement succeeds the old node  is returned.  ]]></description>
    <properties>
      <property ref="ret_domelement" />
      <property kind="parameter" name="oldnode" type="domelement" required="1" />
      <property ref="DOM XML_6" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->replace_node">
    <description><![CDATA[  (PHP 4.2) This function replaces an existing node with the passed  new node. Before the replacement   newnode is copied if it has a parent to  make sure a node which is  already in the document will not be inserted a second time. This  behaviour enforces doing all modifications on the node before the  replacement or to refetch the inserted node afterwards with functions like   domnode_first_child ,   domnode_child_nodes etc..  ]]></description>
    <properties>
      <property ref="ret_domelement" />
      <property ref="DOM XML_6" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->set_content">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->set_name">
    <description><![CDATA[  Sets name of node.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->set_namespace">
    <description><![CDATA[  Sets the namespace of a node to uri .  If there is already a namespace declaration with the same uri in one of the parent nodes  of the node, the prefix of this is taken, otherwise it will take the one provided  in the optional parameter prefix or generate a random one.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="DOM XML_1" />
      <property ref="Arrays_46" />
    </properties>
    
  </element>
  <element kind="function" name="DomNode->unlink_node">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="DomProcessingInstruction->data">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomProcessingInstruction->target">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DomXsltStylesheet->process">
    <properties>
      <property ref="ret_domdocument" />
      <property kind="parameter" name="DomDocument" type="domdocument" required="1" />
      <property kind="parameter" name="xslt_parameters" type="array"  />
      <property kind="parameter" name="param_is_xpath" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="DomXsltStylesheet->result_dump_file">
    <description><![CDATA[  This function is only available since PHP 4.3  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$filename = "stylesheet.xsl";
$xmldoc = domxml_open_file("data.xml");
$xsldoc = domxml_xslt_stylesheet_file($filename);
$result =  $xsldoc->process($xmldoc);
echo $xsldoc->result_dump_file($result, "filename");     
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_10" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="DomXsltStylesheet->result_dump_mem">
    <description><![CDATA[  This function is only available since PHP 4.3  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$filename = "stylesheet.xsl";
$xmldoc = domxml_open_file("data.xml");
$xsldoc = domxml_xslt_stylesheet_file($filename);
$result =  $xsldoc->process($xmldoc);
echo $xsldoc->result_dump_mem($result);     
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_10" />
    </properties>
    
  </element>
  <element kind="function" name="domxml_new_doc">
    <description><![CDATA[  Creates a new dom document from scratch and returns it.  ]]></description>
    <properties>
      <property ref="ret_domdocument" />
      <property ref="DOM_20" />
    </properties>
    
  </element>
  <element kind="function" name="domxml_open_file">
    <description><![CDATA[  The function parses the XML document in the file named   filename and returns an object of class  "Dom document", having the properties as listed above.  The file is accessed read-only.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

if (!$dom = domxml_open_file("example.xml")) {
  echo "Error while parsing the document\n";
  exit;
}

$root = $dom->document_element();
?>]]></description>
      </property>
      <property ref="ret_domdocument" />
      <property ref="Apache_3" />
      <property ref="Arrays_43" />
      <property kind="parameter" name="error" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="domxml_open_mem">
    <description><![CDATA[  The function parses the XML document in   str and returns an object of class "Dom  document", having the properties as listed above. This function,   domxml_open_file or domxml_new_doc  must be called before any other function calls.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
  echo "Error while parsing the document\n";
  exit;
}

$root = $dom->document_element();
?>]]></description>
      </property>
      <property ref="ret_domdocument" />
      <property kind="parameter" name="str" type="string" required="1" />
      <property ref="Arrays_43" />
      <property ref="DOM XML_13" />
    </properties>
    
  </element>
  <element kind="function" name="domxml_version">
    <description><![CDATA[  This function returns the version of the version of the XML library  currently used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo domxml_version();

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="domxml_xmltree">
    <description><![CDATA[  The function parses the XML document in   str and returns a tree PHP objects as the  parsed document. This function is isolated from the other functions,  which means you cannot access the tree with any of the other functions.  Modifying it, for example by adding nodes, makes no sense since there  is currently no way to dump it as an XML file.  However this function may be valuable if you want to read a file and  investigate the content.  ]]></description>
    <properties>
      <property ref="ret_domdocument" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="domxml_xslt_stylesheet">
    <properties>
      <property kind="return" type="XsltStylesheet" />	
      <property kind="parameter" name="xsl_document" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="domxml_xslt_stylesheet_doc">
    <properties>
      <property ref="ret_XsltStylesheet" />
      <property kind="parameter" name="DocDocumentObject" type="domdocument" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="domxml_xslt_stylesheet_file">
    <properties>
      <property ref="ret_XsltStylesheet" />
      <property kind="parameter" name="xsl_file" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xpath_eval">
    <description><![CDATA[  The optional contextnode can be specified for doing relative XPath queries.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="xpath_context" type="XPathContext" required="1" />
      <property kind="parameter" name="xpath_expression" type="string" required="1" />
      <property kind="parameter" name="contextnode" type="domnode"  />
    </properties>
    
  </element>
  <element kind="function" name="xpath_eval_expression">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include("example.inc");

if (!$dom = domxml_open_mem($xmlstr)) {
    echo "Error while parsing the document\n";
    exit;
}

$xpath = xpath_new_context($dom);
var_dump(xpath_eval_expression($xpath, '/chapter/@language'));

?>]]></description>
      </property>
      <property kind="return" type="XPathObject" />	
      <property ref="DOM XML_18" />
      <property ref="DOM_15" />
    </properties>
    
  </element>
  <element kind="function" name="xpath_new_context">
    <properties>
      <property kind="return" type="XPathContext" />	
      <property kind="parameter" name="dom_document" type="domdocument" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xptr_eval">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="xpath_context" type="XPathContext"  />
      <property kind="parameter" name="eval_str" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xptr_new_context">
    <properties>
      <property ref="ret_XPathContext" />
    </properties>
    
  </element>
</group>
<group name="Date/Time">
  <description><![CDATA[Date and Time Functions]]></description>
  <element kind="function" name="checkdate">
    <description><![CDATA[  Returns if the date given is valid; otherwise returns .  Checks the validity of the date formed by the arguments. A date  is considered valid if:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
var_dump(checkdate(12, 31, 2000));
var_dump(checkdate(2, 29, 2001));
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
  <element kind="function" name="date">
    <description><![CDATA[  Returns a string formatted according to the given format string using the  given integer timestamp or the current local time  if no timestamp is given.  In other words, timestamp  is optional and defaults to the value of time .    The valid range of a timestamp is typically from Fri, 13 Dec  1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are  the dates that correspond to the minimum and maximum values for  a 32-bit signed integer). On Windows this range is limited from  01-01-1970 to 19-01-2038.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Prints something like: Wednesday
echo date("l");

// Prints something like: Wednesday 15th of January 2003 05:51:38 AM
echo date("l dS of F Y h:i:s A");

// Prints: July 1, 2000 is on a Saturday
echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));
?>

      

<?php
// prints something like: Wednesday the 15th
echo date("l \\t\h\e jS");
?>

      

<?php
$tomorrow  = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
$lastmonth = mktime(0, 0, 0, date("m")-1, date("d"),   date("Y"));
$nextyear  = mktime(0, 0, 0, date("m"),   date("d"),   date("Y")+1);
?>

      

<?php
// Assuming today is: March 10th, 2001, 5:16:18 pm

$today = date("F j, Y, g:i a");                 // March 10, 2001, 5:16 pm
$today = date("m.d.y");                         // 03.10.01
$today = date("j, n, Y");                       // 10, 3, 2001
$today = date("Ymd");                           // 20010310
$today = date('h-i-s, j-m-y, it is w Day z ');  // 05-16-17, 10-03-01, 1631 1618 6 Fripm01
$today = date('\i\t \i\s \t\h\e jS \d\a\y.');   // It is the 10th day.
$today = date("D M j G:i:s T Y");               // Sat Mar 10 15:16:08 MST 2001
$today = date('H:m:s \m \i\s\ \m\o\n\t\h');     // 17:03:17 m is month
$today = date("H:i:s");                         // 17:16:17
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="format" type="string" required="1" />
      <property ref="Calendar_15" />
    </properties>
    
  </element>
  <element kind="function" name="date_sunrise">
    <description><![CDATA[   date_sunrise returns the sunrise time for a given  day (specified as a timestamp ) and location. The   latitude , longitude and   zenith parameters default to the   ,   and   configuration options,  respectively.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* calculate the sunrise time for Lisbon, Portugal
Latitude: 38.4 North
Longitude: 9 West
Zenith ~= 90
offset: +1 GMT
*/

echo date("D M d Y"). ', sunrise time : ' .date_sunrise(time(), SUNFUNCS_RET_STRING, 38.4, -9, 90, 1);

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="COM_30" />
      <property kind="parameter" name="format" type="int"  />
      <property kind="parameter" name="latitude" type="float"  />
      <property kind="parameter" name="longitude" type="float"  />
      <property kind="parameter" name="zenith" type="float"  />
      <property kind="parameter" name="gmt_offset" type="float"  />
    </properties>
    
  </element>
  <element kind="function" name="date_sunset">
    <description><![CDATA[   date_sunset returns the sunset time for a given day  (specified as a timestamp ) and location. The   latitude , longitude and   zenith parameters default to the   ,   and   configuration options,  respectively.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* calculate the sunset time for Lisbon, Portugal
Latitude: 38.4 North
Longitude: 9 West
Zenith ~= 90
offset: +1 GMT
*/

echo date("D M d Y"). ', sunset time : ' .date_sunset(time(), SUNFUNCS_RET_STRING, 38.4, -9, 90, 1);

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="COM_30" />
      <property ref="Date/Time_2" />
      <property ref="Date/Time_3" />
      <property ref="Date/Time_4" />
      <property ref="Date/Time_5" />
      <property ref="Date/Time_6" />
    </properties>
    
  </element>
  <element kind="function" name="getdate">
    <description><![CDATA[  Returns an associative containing the date  information of the timestamp , or the current  local time if no timestamp is given, as the  following associative array elements:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$today = getdate(); 
print_r($today);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Calendar_15" />
    </properties>
    
  </element>
  <element kind="function" name="gettimeofday">
    <description><![CDATA[  This is an interface to gettimeofday(2). It returns an  associative array containing the data returned from the system  call.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(gettimeofday());

echo gettimeofday(true);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="return_float" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="gmdate">
    <description><![CDATA[  Identical to the date function except that  the time returned is Greenwich Mean Time (GMT). For example, when  run in Finland (GMT +0200), the first line below prints "Jan 01  1998 00:00:00", while the second prints "Dec 31 1997 22:00:00".    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo date("M d Y H:i:s", mktime(0, 0, 0, 1, 1, 1998));
echo gmdate("M d Y H:i:s", mktime(0, 0, 0, 1, 1, 1998));
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Date/Time_1" />
      <property ref="Calendar_15" />
    </properties>
    
  </element>
  <element kind="function" name="gmmktime">
    <description><![CDATA[  Identical to mktime except the passed  parameters represents a GMT date.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
gmmktime(0, 0, 0, 1, 1, 1970); // valid in GMT and west, invalid in east
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="hour" type="int"  />
      <property kind="parameter" name="minute" type="int"  />
      <property kind="parameter" name="second" type="int"  />
      <property kind="parameter" name="month" type="int"  />
      <property kind="parameter" name="day" type="int"  />
      <property ref="Calendar_7" />
      <property kind="parameter" name="is_dst" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="gmstrftime">
    <description><![CDATA[  Behaves the same as strftime except that the  time returned is Greenwich Mean Time (GMT). For example, when run  in Eastern Standard Time (GMT -0500), the first line below prints  "Dec 31 1998 20:00:00", while the second prints "Jan 01 1999  01:00:00".    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
setlocale(LC_TIME, 'en_US');
echo strftime("%b %d %Y %H:%M:%S", mktime(20, 0, 0, 12, 31, 98)) . "\n";
echo gmstrftime("%b %d %Y %H:%M:%S", mktime(20, 0, 0, 12, 31, 98)) . "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Date/Time_1" />
      <property ref="Calendar_15" />
    </properties>
    
  </element>
  <element kind="function" name="idate">
    <description><![CDATA[  Returns a string formatted according to the given format string using the  given integer timestamp or the current local time  if no timestamp is given. In other words, timestamp  is optional and defaults to the value of time .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Date/Time_1" />
      <property ref="Calendar_15" />
    </properties>
    
  </element>
  <element kind="function" name="localtime">
    <description><![CDATA[  The localtime function returns an array  identical to that of the structure returned by the C function  call.  The first argument to localtime is  the timestamp, if this is not given the current time as returned  from time is used.  The second argument to the localtime is the   is_associative , if this is set to 0 or not  supplied than the array is returned as a regular, numerically  indexed array.  If the argument is set to 1 then   localtime is an associative array containing  all the different elements of the structure returned by the C  function call to localtime.  The names of the different keys of  the associative array are as follows:    ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Calendar_15" />
      <property kind="parameter" name="is_associative" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="microtime">
    <description><![CDATA[   microtime returns the current Unix timestamp with  microseconds. This function is only available on operating systems that  support the gettimeofday() system call.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/**
 * Simple function to replicate PHP 5 behaviour
 */
function microtime_float() 
{ 
    list($usec, $sec) = explode(" ", microtime()); 
    return ((float)$usec + (float)$sec); 
} 

$time_start = microtime_float();

// Sleep for a while
usleep(100);

$time_end = microtime_float();
$time = $time_end - $time_start;

echo "Did nothing in $time seconds\n";
?>

      

<?php
$time_start = microtime(true);

// Sleep for a while
usleep(100);

$time_end = microtime(true);
$time = $time_end - $time_start;

echo "Did nothing in $time seconds\n";
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="get_as_float" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="mktime">
    <description><![CDATA[   Note the strange order of  arguments, which differs from the order of arguments in a regular  Unix mktime() call and which does not lend itself well to leaving  out parameters from right to left (see below). It is a common  error to mix these values up in a script.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo date("M-d-Y", mktime(0, 0, 0, 12, 32, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 13, 1, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 1998));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 98));
?>

      

<?php
$lastday = mktime(0, 0, 0, 3, 0, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
     
$lastday = mktime(0, 0, 0, 4, -31, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Date/Time_8" />
      <property ref="Date/Time_9" />
      <property ref="Date/Time_10" />
      <property ref="Date/Time_11" />
      <property ref="Date/Time_12" />
      <property ref="Calendar_7" />
      <property ref="Date/Time_13" />
    </properties>
    
  </element>
  <element kind="function" name="strftime">
    <description><![CDATA[  Returns a string formatted according to the given format string  using the given timestamp or the current  local time if no timestamp is given.  Month and weekday names and  other language dependent strings respect the current locale set  with setlocale .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
setlocale(LC_TIME, "C");
echo strftime("%A");
setlocale(LC_TIME, "fi_FI");
echo strftime(" in Finnish is %A,");
setlocale(LC_TIME, "fr_FR");
echo strftime(" in French %A and");
setlocale(LC_TIME, "de_DE");
echo strftime(" in German %A.\n");
?>

      

<?php
/*     December 2002 / January 2003
ISOWk  M   Tu  W   Thu F   Sa  Su
----- ----------------------------
51     16  17  18  19  20  21  22 
52     23  24  25  26  27  28  29
1      30  31   1   2   3   4   5
2       6   7   8   9  10  11  12
3      13  14  15  16  17  18  19   */

// Outputs: 12/28/2002 - %V,%G,%Y = 52,2002,2002
echo "12/28/2002 - %V,%G,%Y = " . strftime("%V,%G,%Y", strtotime("12/28/2002")) . "\n";

// Outputs: 12/30/2002 - %V,%G,%Y = 1,2003,2002
echo "12/30/2002 - %V,%G,%Y = " . strftime("%V,%G,%Y", strtotime("12/30/2002")) . "\n";

// Outputs: 1/3/2003 - %V,%G,%Y = 1,2003,2003
echo "1/3/2003 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/3/2003")) . "\n";

// Outputs: 1/10/2003 - %V,%G,%Y = 2,2003,2003
echo "1/10/2003 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/10/2003")) . "\n";



/*     December 2004 / January 2005
ISOWk  M   Tu  W   Thu F   Sa  Su
----- ----------------------------
51     13  14  15  16  17  18  19
52     20  21  22  23  24  25  26
53     27  28  29  30  31   1   2
1       3   4   5   6   7   8   9
2      10  11  12  13  14  15  16   */

// Outputs: 12/23/2004 - %V,%G,%Y = 52,2004,2004
echo "12/23/2004 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("12/23/2004")) . "\n";

// Outputs: 12/31/2004 - %V,%G,%Y = 53,2004,2004
echo "12/31/2004 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("12/31/2004")) . "\n";

// Outputs: 1/2/2005 - %V,%G,%Y = 53,2004,2005
echo "1/2/2005 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/2/2005")) . "\n";

// Outputs: 1/3/2005 - %V,%G,%Y = 1,2005,2005
echo "1/3/2005 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/3/2005")) . "\n";

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Date/Time_1" />
      <property ref="Calendar_15" />
    </properties>
    
  </element>
  <element kind="function" name="strptime">
    <description><![CDATA[   strptime returns an array with the   timestamp parsed, or on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$format = '%d/%m/%Y %H:%M:%S';
$strf = strftime($format);

echo "$strf\n";

print_r(strptime($strf, $format));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="timestamp" type="string" required="1" >
      <description>  A timestamp (e.g. returned from )  </description>
      </property>
      <property ref="Date/Time_1" />
    </properties>
    
  </element>
  <element kind="function" name="strtotime">
    <description><![CDATA[  In PHP 5 up to 5.0.2, and other relative times  are wrongly computed from today's midnight. It differs from other  versions where it is correctly computed from current time.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo strtotime("now"), "\n";
echo strtotime("10 September 2000"), "\n";
echo strtotime("+1 day"), "\n";
echo strtotime("+1 week"), "\n";
echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
echo strtotime("next Thursday"), "\n";
echo strtotime("last Monday"), "\n";
?>

      

<?php
$str = 'Not Good';
if (($timestamp = strtotime($str)) === -1) {
    echo "The string ($str) is bogus";
} else {
    echo "$str == " . date('l dS of F Y h:i:s A', $timestamp);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="time" type="string" required="1" />
      <property kind="parameter" name="now" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="time">
    <description><![CDATA[  Returns the current time measured in the number of seconds since  the Unix Epoch (January 1 1970 00:00:00 GMT).  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
</group>
<group name="Direct IO">
  <description><![CDATA[Direct IO Functions]]></description>
  <element kind="function" name="dio_close">
    <description><![CDATA[  The function dio_close closes the  file descriptor fd .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fd = dio_open('/dev/ttyS0', O_RDWR);

dio_close($fd);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="fd" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dio_fcntl">
    <description><![CDATA[  The dio_fcntl function performs the  operation specified by cmd on the file  descriptor fd . Some commands require  additional arguments args to be supplied.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fd = dio_open('/dev/ttyS0', O_RDWR);

if (dio_fcntl($fd, F_SETLK, Array("type"=>F_WRLCK)) == -1) {
   // the file descriptor appears locked
   echo "The lock can not be cleared. It is held by someone else.";
} else {
   echo "Lock succesfully set/cleared";
}

dio_close($fd);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Direct IO_1" />
      <property kind="parameter" name="cmd" type="int" required="1" />
      <property kind="parameter" name="args" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="dio_open">
    <description><![CDATA[   dio_open opens a file and returns a new file  descriptor for it, or if any error occurred.  If   flags is O_CREAT, the optional third parameter   mode will set the mode of the file  (creation permissions).  The flags  parameter can be one of the following options:   O_RDONLY - opens the file for read access.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fd = dio_open('/dev/ttyS0', O_RDWR | O_NOCTTY | O_NONBLOCK);

dio_close($fd);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property kind="parameter" name="flags" type="int" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="dio_read">
    <description><![CDATA[  The function dio_read reads and returns   n bytes from file with descriptor   fd . If n is  not specified, dio_read reads 1K sized block  and returns them.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Direct IO_1" />
      <property kind="parameter" name="n" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="dio_seek">
    <description><![CDATA[  The function dio_seek is used to change the  file position of the file with descriptor   fd .  The parameter   whence specifies how the position   pos should be interpreted:    SEEK_SET (default) - specifies that pos is  specified from the beginning of the file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fd = dio_open('/dev/ttyS0', O_RDWR);

dio_seek($fd, SEEK_SET, 10);
// position is now at 10 characters from the start of the file

dio_seek($fd, SEEK_CUR, -2);
// position is now at 8 characters from the start of the file

dio_seek($fd, SEEK_END, 5);
// position is now at 5 characters from the end of the file

dio_seek($fd, SEEK_END, -10);
// position is now at 10 characters past the end of the file. 
// The 10 characters between the end of the file and the current
// position are filled with zeros.

dio_close($fd);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Direct IO_1" />
      <property kind="parameter" name="pos" type="int" required="1" />
      <property kind="parameter" name="whence" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="dio_stat">
    <description><![CDATA[  Function dio_stat returns information about  the file with file descriptor   fd . dio_stat returns  an associative array with the following keys:   "device" - device]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Direct IO_1" />
    </properties>
    
  </element>
  <element kind="function" name="dio_tcsetattr">
    <description><![CDATA[  The function dio_tcsetattr sets  the terminal attributes and baud rate of the open   resource . The currently available options are    'baud' - baud rate of the port - can be 38400,19200,9600,4800,2400,1800,  1200,600,300,200,150,134,110,75 or 50, default value is 9600.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fd = dio_open('/dev/ttyS0', O_RDWR | O_NOCTTY | O_NONBLOCK);

dio_fcntl($fd, F_SETFL, O_SYNC);

dio_tcsetattr($fd, array(
  'baud' => 9600,
  'bits' => 8,
  'stop'  => 1,
  'parity' => 0
)); 

while (1) {

  $data = dio_read($fd, 256);

  if ($data) {
      echo $data;
  }
} 

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Direct IO_1" />
      <property kind="parameter" name="options" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dio_truncate">
    <description><![CDATA[  Function dio_truncate causes the file  referenced by fd to be truncated to at  most offset bytes in size.  If the file  previously was larger than this size, the extra data is lost. If  the file previously was shorter, it is unspecified whether the  file is left unchanged or is extended. In the latter case the  extended part reads as zero bytes. .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Direct IO_1" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="dio_write">
    <description><![CDATA[  The function dio_write writes up to   len bytes from data  to file fd . If len  is not specified, dio_write writes all   data to the specified  file. dio_write returns the number of bytes  written to fd .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Direct IO_1" />
      <property ref="Bzip2_7" />
      <property kind="parameter" name="len" type="int"  />
    </properties>
    
  </element>
</group>
<group name="Directories">
  <description><![CDATA[Directory Functions]]></description>
  <element kind="function" name="chdir">
    <description><![CDATA[  Changes PHP's current directory to   directory .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// current directory
echo getcwd() . "\n";

chdir('public_html');

// current directory
echo getcwd() . "\n";

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="directory" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="chroot">
    <description><![CDATA[  Changes the root directory of the current process to   directory .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="closedir">
    <description><![CDATA[  Closes the directory stream indicated by   dir_handle . The stream must have previously  been opened by opendir .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="dir_handle" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="getcwd">
    <description><![CDATA[  Returns the current working directory, or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// current directory
echo getcwd() . "\n";

chdir('cvs');

// current directory
echo getcwd() . "\n";

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="opendir">
    <description><![CDATA[   Returns a directory handle to be used in subsequent   closedir , readdir , and   rewinddir calls.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dir = "/etc/php5/";

// Open a known directory, and proceed to read its contents
if (is_dir($dir)) {
    if ($dh = opendir($dir)) {
        while (($file = readdir($dh)) !== false) {
            echo "filename: $file : filetype: " . filetype($dir . $file) . "\n";
        }
        closedir($dh);
    }
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="path" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="read">
    <description><![CDATA[  A pseudo-object oriented mechanism for reading a directory.  The  given directory is opened.  Two properties  are available once the directory has been opened.  The handle  property can be used with other directory functions such as   readdir , rewinddir and   closedir .  The path property is set to path  the directory that was opened.  Three methods are available:  read, rewind and close.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$d = dir("/etc/php5");
echo "Handle: " . $d->handle . "\n";
echo "Path: " . $d->path . "\n";
while (false !== ($entry = $d->read())) {
   echo $entry."\n";
}
$d->close();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="readdir">
    <description><![CDATA[  Returns the filename of the next file from the directory. The  filenames are returned in the order in which they are stored by  the filesystem.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Note that !== did not exist until 4.0.0-RC2

if ($handle = opendir('/path/to/files')) {
    echo "Directory handle: $handle\n";
    echo "Files:\n";

    /* This is the correct way to loop over the directory. */
    while (false !== ($file = readdir($handle))) { 
        echo "$file\n";
    }

    /* This is the WRONG way to loop over the directory. */
    while ($file = readdir($handle)) { 
        echo "$file\n";
    }

    closedir($handle); 
}
?>

      

<?php 
if ($handle = opendir('.')) {
    while (false !== ($file = readdir($handle))) { 
        if ($file != "." && $file != "..") { 
            echo "$file\n"; 
        } 
    }
    closedir($handle); 
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Directories_2" />
    </properties>
    
  </element>
  <element kind="function" name="rewinddir">
    <description><![CDATA[  Resets the directory stream indicated by   dir_handle to the beginning of the  directory.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Directories_2" />
    </properties>
    
  </element>
  <element kind="function" name="scandir">
    <description><![CDATA[  Returns an of files and directories from the   directory .  If directory  is not a directory, then boolean is returned, and an error of  level is generated.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dir    = '/tmp';
$files1 = scandir($dir);
$files2 = scandir($dir, 1);

print_r($files1);
print_r($files2);
?>

      

<?php
$dir = "/tmp";
$dh  = opendir($dir);
while (false !== ($filename = readdir($dh))) {
    $files[] = $filename;
}

sort($files);

print_r($files);

rsort($files);

print_r($files);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Directories_1" />
      <property kind="parameter" name="sorting_order" type="int"  />
      <property kind="parameter" name="context" type="resource"  />
    </properties>
    
  </element>
</group>
<group name="Errors and Logging">
  <description><![CDATA[Error Handling and Logging Functions]]></description>
  <element kind="function" name="debug_backtrace">
    <description><![CDATA[   debug_backtrace generates a PHP backtrace  and returns this information as an associative .  The  possible returned elements are listed in the following table:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// filename: a.php

function a_test($str) 
{
    echo "\nHi: $str";
    var_dump(debug_backtrace());
}

a_test('friend');
?>

<?php
// filename: b.php
include_once '/tmp/a.php';
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="debug_print_backtrace">
    <description><![CDATA[   debug_print_backtrace prints a PHP backtrace. It  prints the function calls, included/required files and   eval ed stuff.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// include.php file

function a() {
    b();
}

function b() {
    c();
}

function c(){
    debug_print_backtrace();
}

a();

?>


<?php
// test.php file
// this is the file you should run

include 'include.php';
?>]]></description>
      </property>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="error_log">
    <description><![CDATA[  Sends an error message to the web server's error log, a   port or to a file.  The first parameter,   message , is the error message that should be  logged.  The second parameter, message_type says  where the message should go:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Send notification through the server log if we can not
// connect to the database.
if (!Ora_Logon($username, $password)) {
    error_log("Oracle database not available!", 0);
}

// Notify administrator by email if we run out of FOO
if (!($foo = allocate_new_foo())) {
    error_log("Big trouble, we're all out of FOOs!", 1,
               "operator@example.com");
}

// other ways of calling error_log():
error_log("You messed up!", 2, "127.0.0.1:7000");
error_log("You messed up!", 2, "loghost");
error_log("You messed up!", 3, "/var/tmp/my-errors.log");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="message" type="string" required="1" />
      <property kind="parameter" name="message_type" type="int"  />
      <property kind="parameter" name="destination" type="string"  />
      <property kind="parameter" name="extra_headers" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="error_reporting">
    <description><![CDATA[  The error_reporting function sets the     directive at runtime.  PHP has many levels of errors, using  this function sets that level for the duration (runtime) of  your script.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Turn off all error reporting
error_reporting(0);

// Report simple running errors
error_reporting(E_ERROR | E_WARNING | E_PARSE);

// Reporting E_NOTICE can be good too (to report uninitialized 
// variables or catch variable name misspellings ...)
error_reporting(E_ERROR | E_WARNING | E_PARSE | E_NOTICE);

// Report all errors except E_NOTICE
// This is the default value set in php.ini
error_reporting(E_ALL ^ E_NOTICE);

// Report all PHP errors (bitwise 63 may be used in PHP 3)
error_reporting(E_ALL);

// Same as error_reporting(E_ALL);
ini_set('error_reporting', E_ALL);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="level" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="restore_error_handler">
    <description><![CDATA[  Used after changing the error handler function using   set_error_handler , to revert to the previous error  handler (which could be the built-in or a user defined function). This  function always returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="restore_exception_handler">
    <description><![CDATA[  Used after changing the exception handler function using   set_exception_handler , to revert to the previous  exception handler (which could be the built-in or a user defined  function). This function always returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="set_error_handler">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// redefine the user error constants - PHP 4 only
define("FATAL", E_USER_ERROR);
define("ERROR", E_USER_WARNING);
define("WARNING", E_USER_NOTICE);

// set the error reporting level for this script
error_reporting(FATAL | ERROR | WARNING);

// error handler function
function myErrorHandler($errno, $errstr, $errfile, $errline) 
{
  switch ($errno) {
  case FATAL:
    echo "<b>FATAL</b> [$errno] $errstr<br />\n";
    echo "  Fatal error in line $errline of file $errfile";
    echo ", PHP " . PHP_VERSION . " (" . PHP_OS . ")<br />\n";
    echo "Aborting...<br />\n";
    exit(1);
    break;
  case ERROR:
    echo "<b>ERROR</b> [$errno] $errstr<br />\n";
    break;
  case WARNING:
    echo "<b>WARNING</b> [$errno] $errstr<br />\n";
    break;
  default:
    echo "Unkown error type: [$errno] $errstr<br />\n";
    break;
  }
}

// function to test the error handling
function scale_by_log($vect, $scale) 
{
  if (!is_numeric($scale) || $scale <= 0) {
    trigger_error("log(x) for x <= 0 is undefined, you used: scale = $scale",
      FATAL);
  }

  if (!is_array($vect)) {
    trigger_error("Incorrect input vector, array of values expected", ERROR);
    return null;
  }

  for ($i=0; $i<count($vect); $i++) {
    if (!is_numeric($vect[$i]))
      trigger_error("Value at position $i is not a number, using 0 (zero)", 
        WARNING);
    $temp[$i] = log($scale) * $vect[$i];
  }
  return $temp;
}

// set to the user defined error handler
$old_error_handler = set_error_handler("myErrorHandler");

// trigger some errors, first define a mixed array with a non-numeric item
echo "vector a\n";
$a = array(2,3, "foo", 5.5, 43.3, 21.11);
print_r($a);

// now generate second array, generating a warning
echo "----\nvector b - a warning (b = log(PI) * a)\n";
$b = scale_by_log($a, M_PI);
print_r($b);

// this is trouble, we pass a string instead of an array
echo "----\nvector c - an error\n";
$c = scale_by_log("not array", 2.3);
var_dump($c);

// this is a critical error, log of zero or negative number is undefined
echo "----\nvector d - fatal error\n";
$d = scale_by_log($a, -2.5);

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="error_handler" type="callback" required="1" />
      <property kind="parameter" name="error_types" type="int"  />
      <property kind="parameter" name="errno" type="int" required="1" />
      <property kind="parameter" name="errstr" type="string" required="1" />
      <property kind="parameter" name="errfile" type="string"  />
      <property kind="parameter" name="errline" type="int"  />
      <property kind="parameter" name="errcontext" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="set_exception_handler">
    <description><![CDATA[    Name of function to be called when an uncaught exception occurs.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function exception_handler($exception) {
  echo "Uncaught exception: " , $exception->getMessage(), "\n";
}

set_exception_handler('exception_handler');

throw new Exception('Uncaught Exception');
echo "Not Executed\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="exception_handler" type="callback" required="1" >
      <description>  Name of function to be called when an uncaught exception occurs.  </description>
      </property>
      <property kind="parameter" name="exception" type="object" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="trigger_error">
    <description><![CDATA[  Used to trigger a user error condition, it can be used by in conjunction  with the built-in error handler, or with a user defined function that has  been set as the new error handler  ( set_error_handler ). It only works with the E_USER  family of constants, and will default to .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="error_msg" type="string" required="1" />
      <property kind="parameter" name="error_type" type="int"  />
    </properties>
    
  </element>
</group>
<group name="Exif">
  <description><![CDATA[Exif Functions]]></description>
  <element kind="function" name="exif_imagetype">
    <description><![CDATA[   exif_imagetype reads the first bytes of an image and  checks its signature.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (exif_imagetype('image.gif') != IMAGETYPE_GIF) {
    echo 'The picture is not a gif';
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="exif_read_data">
    <description><![CDATA[   exif_read_data reads the   headers from a or   image file.  This way you can read meta data  generated by digital cameras.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo "test1.jpg:<br />\n";
$exif = exif_read_data('tests/test1.jpg', 'IFD0');
echo $exif===false ? "No header data found.<br />\n" : "Image contains headers<br />\n";

$exif = exif_read_data('tests/test2.jpg', 0, true);
echo "test2.jpg:<br />\n";
foreach ($exif as $key => $section) {
    foreach ($section as $name => $val) {
        echo "$key.$name: $val<br />\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property kind="parameter" name="sections" type="string"  >
      <description>  Is a comma separated list of sections that need to be present in file  to produce a result .  If none of the requested  sections could be found the return value is .    </description>
      </property>
      <property kind="parameter" name="arrays" type="bool"  >
      <description>  Specifies whether or not each section becomes an array. The    ,   , and   always become arrays as they may contain values whose names conflict  with other sections.  </description>
      </property>
      <property kind="parameter" name="thumbnail" type="bool"  >
      <description>  When set to the thumbnail itself is read.  Otherwise, only the  tagged data is read.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="exif_tagname">
    <description><![CDATA[    The image index  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="index" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="exif_thumbnail">
    <description><![CDATA[   exif_thumbnail reads the embedded thumbnail of a   or image.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (array_key_exists('file', $_REQUEST)) {
    $image = exif_thumbnail($_REQUEST['file'], $width, $height, $type);
} else {
    $image = false;
}
if ($image!==false) {
    header('Content-type: ' .image_type_to_mime_type($type));
    echo $image;
    exit;
} else {
    // no thumbnail available, handle the error here
    echo 'No thumbnail available';
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Apache_3" />
      <property kind="parameter" name="width" type="int"  >
      <description>  The return width of the returned thumbnail.  </description>
      </property>
      <property kind="parameter" name="height" type="int"  >
      <description>  The returned height of the returned thumbnail.  </description>
      </property>
      <property kind="parameter" name="imagetype" type="int"  >
      <description>  The returned image type of the returned thumbnail.  This is either   or .  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="FDF">
  <description><![CDATA[Forms Data Format Functions]]></description>
  <element kind="function" name="fdf_add_doc_javascript">
    <description><![CDATA[  Adds a script to the FDF, which Acrobat then adds to the doc-level  scripts of a document, once the FDF is imported into it. It is strongly  suggested to use '\r' for linebreaks within script_code .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fdf = fdf_create();
fdf_add_doc_javascript($fdf, "PlusOne", "function PlusOne(x)\r{\r  return x+1;\r}\r");
fdf_save($fdf);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="fdfdoc" type="resource" required="1" />
      <property kind="parameter" name="script_name" type="string" required="1" />
      <property kind="parameter" name="script_code" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_add_template">
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_1" />
      <property kind="parameter" name="newpage" type="int" required="1" />
      <property ref="Apache_3" />
      <property kind="parameter" name="template" type="string" required="1" />
      <property kind="parameter" name="rename" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_close">
    <description><![CDATA[  The fdf_close function closes the FDF document.]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="fdf_document" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_create">
    <description><![CDATA[  The fdf_create creates a new  FDF document. This function is needed if one would like to  populate input fields in a PDF document with data.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$outfdf = fdf_create();
fdf_set_value($outfdf, "volume", $volume, 0);

fdf_set_file($outfdf, "http:/testfdf/resultlabel.pdf");
fdf_save($outfdf, "outtest.fdf");
fdf_close($outfdf);
Header("Content-type: application/vnd.fdf");
$fp = fopen("outtest.fdf", "r");
fpassthru($fp);
unlink("outtest.fdf");
?>]]></description>
      </property>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_enum_values">
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_1" />
      <property ref="Arrays_31" />
      <property ref="Arrays_40" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_errno">
    <description><![CDATA[   fdf_errno returns the error code set by  the last FDF function call. This is zero  for a successfull operation or a non-zero error code on failure.  A textual description may be obtained using the   fdf_error function.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_error">
    <description><![CDATA[   fdf_error returns a textual description for  the fdf error code given in error_code .  The function uses the internal error code set by the last operation  if no error_code is given, so   is a convenient shortcut for   .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="error_code" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_ap">
    <description><![CDATA[  The fdf_get_ap function gets the  appearance of a field (i.e. the value of the /AP key) and  stores it in a file.  The possible values of face  are , and   . The appearance is stored in   filename .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property kind="parameter" name="field" type="string" required="1" />
      <property kind="parameter" name="face" type="int" required="1" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_attachment">
    <description><![CDATA[  Extracts a file uploaded by means of the "file selection" field   fieldname and stores it under   savepath . savepath may be  the name of a plain file or an existing directory in which the file is to be created  under its original name. Any existing file under the same name will be overwritten.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
  $fdf = fdf_open_string($HTTP_FDF_DATA);
  $data = fdf_get_attachment($fdf, "filename", "/tmpdir");
  echo "The uploaded file is stored in $data[path]";
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FDF_7" />
      <property kind="parameter" name="fieldname" type="string" required="1" />
      <property kind="parameter" name="savepath" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_encoding">
    <description><![CDATA[  The fdf_get_encoding returns the value  of the /Encoding key. An empty string is returned if the default  PDFDocEncoding/Unicode scheme is used.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_file">
    <description><![CDATA[  The fdf_set_file returns the value  of the /F key.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_flags">
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_1" />
      <property ref="FDF_11" />
      <property kind="parameter" name="whichflags" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_opt">
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="fdfdof" type="resource" required="1" />
      <property ref="FDF_11" />
      <property kind="parameter" name="element" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_status">
    <description><![CDATA[  The fdf_get_status returns the value  of the /STATUS key.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_value">
    <description><![CDATA[  The fdf_get_value function returns the  value for the requested fieldname .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_7" />
      <property ref="FDF_11" />
      <property kind="parameter" name="which" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_get_version">
    <description><![CDATA[  This function will return the fdf version for the given   fdf_document , or the toolkit API  version number if no parameter is given.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="fdf_document" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_header">
    <description><![CDATA[  This is a convenience function to set appropriate HTTP headers  for FDF output. It sets the  to .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_next_field_name">
    <description><![CDATA[  The fdf_next_field_name function returns the  name of the field after the field in   fieldname or the field name of the first field  if the second parameter is .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fdf = fdf_open($HTTP_FDF_DATA);
for ($field = fdf_next_field_name($fdf); 
    $field != ""; 
    $field = fdf_next_field_name($fdf, $field)) {
  echo "field: $field\n";
} 
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FDF_7" />
      <property kind="parameter" name="fieldname" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_open">
    <description><![CDATA[  The fdf_open function opens  a file with form data. This file must contain the data as returned  from a PDF form or created using fdf_create and   fdf_save .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Save the FDF data into a temp file
$fdffp = fopen("test.fdf", "w");
fwrite($fdffp, $HTTP_FDF_DATA, strlen($HTTP_FDF_DATA));
fclose($fdffp);

// Open temp file and evaluate data
$fdf = fdf_open("test.fdf");
/* ... */
fdf_close($fdf);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_open_string">
    <description><![CDATA[  The fdf_open_string function reads form data  from a string. fdf_data must contain the data  as returned from a PDF form or created using fdf_create   and fdf_save_string .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fdf = fdf_open_string($HTTP_FDF_DATA);
/* ... */
fdf_close($fdf);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="fdf_data" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_remove_item">
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_1" />
      <property ref="FDF_11" />
      <property kind="parameter" name="item" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_save">
    <description><![CDATA[  The fdf_save function saves a FDF document.  The resulting FDF will be written to filename .  Without a filename  fdf_save  will write the FDF to the default PHP output stream.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="ClibPDF_38" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_save_string">
    <description><![CDATA[  The fdf_save_string function returns the FDF document as a string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fdf = fdf_create();
fdf_set_value($fdf, "foo", "bar");
$str = fdf_save_string($fdf);
fdf_close($fdf);
echo $str;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_ap">
    <description><![CDATA[  The fdf_set_ap function sets the  appearance of a field (i.e. the value of the /AP key).  The possible values of face  are ,   and .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property kind="parameter" name="field_name" type="string" required="1" />
      <property ref="FDF_10" />
      <property ref="Apache_3" />
      <property ref="ClibPDF_24" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_encoding">
    <description><![CDATA[   fdf_set_encoding sets the character  encoding in FDF document fdf_document .   encoding should be the valid encoding  name. Currently the following values are supported:  " ", " ",  " "," ".  An empty string resets the encoding to the default PDFDocEncoding/Unicode  scheme.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="ClibPDF_52" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_file">
    <description><![CDATA[  The fdf_set_file selects a different PDF  document to display the form results in then the form it originated  from. The url needs to be given as an  absolute URL.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  /* set content type for Adobe FDF */
  fdf_header();

  /* start new fdf */
  $fdf = fdf_create();
    
  /* set field "foo" to value "bar" */
  $fdf_set_value($fdf, "foo", "bar");

  /* tell client to display FDF data using "fdf_form.pdf" */
  fdf_set_file($fdf, "http://www.example.com/fdf_form.pdf");

  /* output fdf */
  fdf_save();

  /* clean up */
  fdf_close();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="ClibPDF_47" />
      <property kind="parameter" name="target_frame" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_flags">
    <description><![CDATA[  The fdf_set_flags sets certain flags  of the given field fieldname .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="FDF_11" />
      <property kind="parameter" name="whichFlags" type="int" required="1" />
      <property kind="parameter" name="newFlags" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_javascript_action">
    <description><![CDATA[   fdf_set_javascript_action sets a javascript  action for the given field fieldname .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="FDF_11" />
      <property kind="parameter" name="trigger" type="int" required="1" />
      <property ref="DB++_23" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_on_import_javascript">
    <description><![CDATA[  See also   fdf_add_doc_javascript   fdf_set_javascript_action .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_1" />
      <property ref="DB++_23" />
      <property kind="parameter" name="before_data_import" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_opt">
    <description><![CDATA[  The fdf_set_opt sets options  of the given field fieldname .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="FDF_11" />
      <property kind="parameter" name="element" type="int" required="1" />
      <property kind="parameter" name="str1" type="string" required="1" />
      <property kind="parameter" name="str2" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_status">
    <description><![CDATA[  The fdf_set_status sets the value  of the /STATUS key. When a client receives a FDF with a status set  it will present the value in an alert box.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property kind="parameter" name="status" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_submit_form_action">
    <description><![CDATA[  The fdf_set_submit_form_action sets a submit form  action for the given field fieldname .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="FDF_11" />
      <property ref="FDF_25" />
      <property ref="DB++_23" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_target_frame">
    <description><![CDATA[  Sets the target frame to display a result PDF defined with fdf_save_file in.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property kind="parameter" name="frame_name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_value">
    <description><![CDATA[  The fdf_set_value function sets the   value for a field named fieldname .  The value will be stored as a string unless it is an array.  In this case all array elements will be stored as a value array.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FDF_7" />
      <property ref="FDF_11" />
      <property ref="Arrays_14" />
      <property kind="parameter" name="isName" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fdf_set_version">
    <description><![CDATA[  This function will set the fdf version  for the given fdf_document . Some features  supported by this extension are only available in newer fdf versions.  For the current FDF toolkit 5.0 version   may be either '1.2', '1.3' or '1.4'.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_7" />
      <property ref="DOM_20" />
    </properties>
    
  </element>
</group>
<group name="FTP">
  <description><![CDATA[FTP Functions]]></description>
  <element kind="function" name="ftp_alloc">
    <description><![CDATA[  Sends an command to the remote FTP server to  allocate space for a file to be uploaded.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = "/home/user/myfile";

/* connect to the server */
$conn_id = ftp_connect('ftp.example.com');
$login_result = ftp_login($conn_id, 'anonymous', 'user@example.com');

if (ftp_alloc($conn_id, filesize($file), $result)) {
  echo "Space successfully allocated on server.  Sending $file.\n";
  ftp_put($conn_id, '/incomming/myfile', $file, FTP_BINARY);
} else {
  echo "Unable to allocate space on server.  Server said: $result\n";
}

ftp_close($conn_id);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="ftp_stream" type="resource" required="1" >
      <description>  The link identifier of the FTP connection.  </description>
      </property>
      <property kind="parameter" name="filesize" type="int" required="1" />
      <property kind="parameter" name="result" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ftp_cdup">
    <description><![CDATA[   Changes to the parent directory.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// change the current directory to html
ftp_chdir($conn_id, 'html');

echo ftp_pwd($conn_id); // /html 

// return to the parent directory
if (ftp_cdup($conn_id)) { 
  echo "cdup successful\n";
} else {
  echo "cdup not successful\n";
}

echo ftp_pwd($conn_id); // /

ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_chdir">
    <description><![CDATA[   Changes the current directory to the specified one.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// set up basic connection
$conn_id = ftp_connect($ftp_server); 

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass); 

// check connection
if ((!$conn_id) || (!$login_result)) {
    die("FTP connection has failed !");
}

echo "Current directory: " . ftp_pwd($conn_id) . "\n";

// try to change the directory to somedir
if (ftp_chdir($conn_id, "somedir")) {
    echo "Current directory is now: " . ftp_pwd($conn_id) . "\n";
} else { 
    echo "Couldn't change directory\n";
}

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_chmod">
    <description><![CDATA[   Sets the permissions on the specified remote file to   mode .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'public_html/index.php';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to chmod $file to 644
if (ftp_chmod($conn_id, 0644, $file) !== false) {
 echo "$file chmoded successfully to 644\n";
} else {
 echo "could not chmod $file\n";
}

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
      <property ref="Calendar_10" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_close">
    <description><![CDATA[   ftp_close closes the given link identifier  and releases the .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// print the current directory
echo ftp_pwd($conn_id); // /

// close this connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_connect">
    <description><![CDATA[   ftp_connect opens an FTP connection to the  specified host .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$ftp_server = "ftp.example.com";

// set up a connection or die
$conn_id = ftp_connect($ftp_server) or die("Couldn't connect to $ftp_server"); 

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="host" type="string" required="1" >
      <description>  The FTP server address. This parameter shouldn't have any trailing  slashes and shouldn't be prefixed with .  </description>
      </property>
      <property kind="parameter" name="port" type="int"  >
      <description>  This parameter specifies an alternate port to connect to. If it is  omitted or set to zero, then the default FTP port, 21, will be used.  </description>
      </property>
      <property kind="parameter" name="timeout" type="int"  >
      <description>  This parameter specifies the timeout for all subsequent network operations.  If omitted, the default value is 90 seconds. The timeout can be changed and  queried at any time with and   .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="ftp_delete">
    <description><![CDATA[   ftp_delete deletes the file specified by   path from the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'public_html/old.txt';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to delete $file
if (ftp_delete($conn_id, $file)) {
 echo "$file deleted successful\n";
} else {
 echo "could not delete $file\n";
}

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_exec">
    <description><![CDATA[  Sends a SITE EXEC command request to the FTP  server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$command = 'ls -al >files.txt';

$conn_id = ftp_connect($ftp_server);

$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

if (ftp_exec($conn_id, $command)) {
    echo "$command executed successfully<br />\n";
} else {
    echo 'could not execute ' . $command;
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property kind="parameter" name="command" type="string" required="1" >
      <description>  The command to execute.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="ftp_fget">
    <description><![CDATA[   ftp_fget retrieves remote_file  from the FTP server, and writes it to the given file pointer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open some file for reading
$remote_file = 'somefile.txt';
$handle = fopen('localfile.txt', 'w');

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to download $file
if (ftp_fget($conn_id, $handle, $remote_file, FTP_ASCII, 1)) {
 echo "successfully written to $file\n";
} else {
 echo "There was a problem with $file\n";
}

// close the connection and the file handler
ftp_close($conn_id);
fclose($handle);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property kind="parameter" name="handle" type="resource" required="1" >
      <description>  An open file pointer in which we store the data.  </description>
      </property>
      <property kind="parameter" name="remote_file" type="string" required="1" >
      <description>  The remote file path.  </description>
      </property>
      <property ref="Calendar_10" />
      <property kind="parameter" name="resumepos" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ftp_fput">
    <description><![CDATA[   ftp_fput uploads the data from a file pointer  to a remote file on the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open some file for reading
$file = 'somefile.txt';
$fp = fopen($file, 'r');

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to upload $file
if (ftp_fput($conn_id, $file, $fp, FTP_ASCII)) {
    echo "Successfully uploaded $file\n";
} else {
    echo "There was a problem while uploading $file\n";
}

// close the connection and the file handler
ftp_close($conn_id);
fclose($fp);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property ref="FTP_9" />
      <property ref="FTP_8" />
      <property ref="Calendar_10" />
      <property kind="parameter" name="startpos" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ftp_get">
    <description><![CDATA[   ftp_get retrieves a remote file from the FTP server,  and saves it into a local file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// define some variables
$local_file = 'local.zip';
$server_file = 'server.zip';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to download $server_file and save to $local_file
if (ftp_get($conn_id, $local_file, $server_file, FTP_BINARY)) {
    echo "Successfully written to $local_file\n";
} else {
    echo "There was a problem\n";
}

// close the connection
ftp_close($conn_id);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property kind="parameter" name="local_file" type="string" required="1" >
      <description>  The local file path (will be overwritten if the file already exists).  </description>
      </property>
      <property ref="FTP_9" />
      <property ref="Calendar_10" />
      <property ref="FTP_10" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_get_option">
    <description><![CDATA[  This function returns the value for the requested   option from the specified FTP connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Get the timeout of the given FTP stream
$timeout = ftp_get_option($conn_id, FTP_TIMEOUT_SEC);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="FTP_1" />
      <property ref="CURL_7" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_login">
    <description><![CDATA[   Logs in to the given FTP stream.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
                     
$ftp_server = "ftp.example.com";
$ftp_user = "foo";
$ftp_pass = "bar";

// set up a connection or die
$conn_id = ftp_connect($ftp_server) or die("Couldn't connect to $ftp_server"); 

// try to login
if (@ftp_login($conn_id, $ftp_user, $ftp_pass)) {
    echo "Connected as $ftp_user@$ftp_server\n";
} else {
    echo "Couldn't connect as $ftp_user\n";
}

// close the connection
ftp_close($conn_id);  
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property kind="parameter" name="username" type="string" required="1" >
      <description>  The username ( ).  </description>
      </property>
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_mdtm">
    <description><![CDATA[   ftp_mdtm gets the last modified time for a remote  file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = 'somefile.txt';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

//  get the last modified time
$buff = ftp_mdtm($conn_id, $file);

if ($buff != -1) {
    // somefile.txt was last modified on: March 26 2003 14:16:41.
    echo "$file was last modified on : " . date("F d Y H:i:s.", $buff);
} else {
    echo "Couldn't get mdtime";
}

// close the connection
ftp_close($conn_id);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
      <property ref="FTP_9" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_mkdir">
    <description><![CDATA[   Creates the specified directory on the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$dir = 'www';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to create the directory $dir
if (ftp_mkdir($conn_id, $dir)) {
 echo "successfully created $dir\n";
} else {
 echo "There was a problem while creating $dir\n";
}

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_1" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_nb_continue">
    <description><![CDATA[   Continues retrieving/sending a file non-blocking.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Initate the download
$ret = ftp_nb_get($my_connection, "test", "README", FTP_BINARY);
while ($ret == FTP_MOREDATA) {

   // Continue downloading...
   $ret = ftp_nb_continue($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error downloading the file...";
   exit(1);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_nb_fget">
    <description><![CDATA[   ftp_nb_fget retrieves a remote file from the FTP  server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open some file for reading
$file = 'index.php';
$fp = fopen($file, 'w');

$conn_id = ftp_connect($ftp_server);

$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// Initate the download
$ret = ftp_nb_fget($conn_id, $fp, $file, FTP_BINARY);
while ($ret == FTP_MOREDATA) {

   // Do whatever you want
   echo ".";

   // Continue downloading...
   $ret = ftp_nb_continue($conn_id);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error downloading the file...";
   exit(1);
}

// close filepointer
fclose($fp);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
      <property ref="FTP_8" />
      <property ref="FTP_9" />
      <property ref="Calendar_10" />
      <property ref="FTP_10" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_nb_fput">
    <description><![CDATA[   ftp_nb_fput uploads the data from a file pointer to  a remote file on the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = 'index.php';

$fp = fopen($file, 'r');

$conn_id = ftp_connect($ftp_server);

$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// Initate the upload
$ret = ftp_nb_fput($conn_id, $file, $fp, FTP_BINARY);
while ($ret == FTP_MOREDATA) {

   // Do whatever you want
   echo ".";

   // Continue upload...
   $ret = ftp_nb_continue($conn_id);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error uploading the file...";
   exit(1);
}

fclose($fp);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
      <property ref="FTP_9" />
      <property ref="FTP_8" />
      <property ref="Calendar_10" />
      <property ref="FTP_11" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_nb_get">
    <description><![CDATA[   ftp_nb_get retrieves a remote file from the FTP server,  and saves it into a local file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Initate the download
$ret = ftp_nb_get($my_connection, "test", "README", FTP_BINARY);
while ($ret == FTP_MOREDATA) {
   
   // Do whatever you want
   echo ".";

   // Continue downloading...
   $ret = ftp_nb_continue($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error downloading the file...";
   exit(1);
}
?>

    

<?php

// Initate 
$ret = ftp_nb_get($my_connection, "test", "README", FTP_BINARY, 
                      filesize("test"));
// OR: $ret = ftp_nb_get($my_connection, "test", "README", 
//                           FTP_BINARY, FTP_AUTORESUME);
while ($ret == FTP_MOREDATA) {
   
   // Do whatever you want
   echo ".";

   // Continue downloading...
   $ret = ftp_nb_continue($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error downloading the file...";
   exit(1);
}
?>

    

<?php

// Disable Autoseek
ftp_set_option($my_connection, FTP_AUTOSEEK, false);

// Initiate
$ret = ftp_nb_get($my_connection, "newfile", "README", FTP_BINARY, 100);
while ($ret == FTP_MOREDATA) {

   /* ... */
   
   // Continue downloading...
   $ret = ftp_nb_continue($my_connection);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
      <property ref="FTP_12" />
      <property ref="FTP_9" />
      <property ref="Calendar_10" />
      <property ref="FTP_10" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_nb_put">
    <description><![CDATA[   ftp_nb_put stores a local file on the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Initiate the Upload
$ret = ftp_nb_put($my_connection, "test.remote", "test.local", FTP_BINARY);
while ($ret == FTP_MOREDATA) {
   
   // Do whatever you want
   echo ".";

   // Continue uploading...
   $ret = ftp_nb_continue($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error uploading the file...";
   exit(1);
}
?>

    

<?php

// Initiate
$ret = ftp_nb_put($my_connection, "test.remote", "test.local", 
                      FTP_BINARY, ftp_size("test.remote"));
// OR: $ret = ftp_nb_put($my_connection, "test.remote", "test.local", 
//                           FTP_BINARY, FTP_AUTORESUME);

while ($ret == FTP_MOREDATA) {
   
   // Do whatever you want
   echo ".";

   // Continue uploading...
   $ret = ftp_nb_continue($my_connection);
}
if ($ret != FTP_FINISHED) {
   echo "There was an error uploading the file...";
   exit(1);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
      <property ref="FTP_9" />
      <property ref="FTP_12" />
      <property ref="Calendar_10" />
      <property ref="FTP_11" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_nlist">
    <description><![CDATA[    The link identifier of the FTP connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// get contents of the current directory
$contents = ftp_nlist($conn_id, ".");

// output $contents
var_dump($contents);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FTP_1" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_pasv">
    <description><![CDATA[   ftp_pasv turns on or off passive mode. In  passive mode, data connections are initiated by the client,  rather than by the server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'somefile.txt';
$remote_file = 'readme.txt';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// turn passive mode on
ftp_pasv($conn_id, true);

// upload a file
if (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {
 echo "successfully uploaded $file\n";
} else {
 echo "There was a problem while uploading $file\n";
}

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property kind="parameter" name="pasv" type="bool" required="1" >
      <description>  If , the passive mode is turned on, else it's turned off.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="ftp_put">
    <description><![CDATA[   ftp_put stores a local file on the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'somefile.txt';
$remote_file = 'readme.txt';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// upload a file
if (ftp_put($conn_id, $remote_file, $file, FTP_ASCII)) {
 echo "successfully uploaded $file\n";
} else {
 echo "There was a problem while uploading $file\n";
}

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property ref="FTP_9" />
      <property ref="FTP_12" />
      <property ref="Calendar_10" />
      <property ref="FTP_11" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_pwd">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// change directory to public_html
ftp_chdir($conn_id, 'public_html');

// print current directory
echo ftp_pwd($conn_id); // /public_html

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_raw">
    <description><![CDATA[  Sends an arbitrary command to the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = ftp_connect("ftp.example.com");

/* This is the same as: 
   ftp_login($fp, "joeblow", "secret"); */
ftp_raw($fp, "USER joeblow");
ftp_raw($fp, "PASS secret");
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FTP_1" />
      <property ref="FTP_7" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_rawlist">
    <description><![CDATA[   ftp_rawlist executes the FTP   command, and returns the result as an array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// get the file list for /
$buff = ftp_rawlist($conn_id, '/');

// close the connection
ftp_close($conn_id);

// output the buffer
var_dump($buff);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FTP_1" />
      <property ref="Directories_1" />
      <property kind="parameter" name="recursive" type="bool"  >
      <description>  If set to , the issued command will be .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="ftp_rename">
    <description><![CDATA[   ftp_rename renames a file or a directory on the FTP  server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_file = 'somefile.txt.bak';
$new_file = 'somefile.txt';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to rename $olf_file to $new_file
if (ftp_rename($conn_id, $old_file, $new_file)) {
 echo "successfully renamed $old_file to $new_file\n";
} else {
 echo "There was a problem while renaming $old_file to $new_file\n";
}

// close the connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property kind="parameter" name="oldname" type="string" required="1" >
      <description>  The old file/directory name.  </description>
      </property>
      <property ref="Classkit_9" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_rmdir">
    <description><![CDATA[   Removes the specified directory on the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$dir = 'www/';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// try to delete the directory $dir
if (ftp_rmdir($conn_id, $dir)) {
    echo "Successfully deleted $dir\n";
} else {
    echo "There was a problem while deleting $dir\n";
}

ftp_close($conn_id);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_set_option">
    <description><![CDATA[  This function controls various runtime options for the specified FTP  stream.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Set the network timeout to 10 seconds
ftp_set_option($conn_id, FTP_TIMEOUT_SEC, 10);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property ref="CURL_7" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_site">
    <description><![CDATA[   ftp_site sends the given   command to the FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Connect to FTP server */
$conn = ftp_connect('ftp.example.com');
if (!$conn) die('Unable to connect to ftp.example.com');

/* Login as "user" with password "pass" */
if (!ftp_login($conn, 'user', 'pass')) die('Error logging into ftp.example.com');

/* Issue: "SITE CHMOD 0600 /home/user/privatefile" command to ftp server */
if (ftp_site($conn, 'CHMOD 0600 /home/user/privatefile')) {
   echo "Command executed successfully.\n";
} else {
   die('Command failed.');
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_1" />
      <property ref="FTP_7" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_size">
    <description><![CDATA[   ftp_size returns the size of a the given file in  bytes.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = 'somefile.txt';

// set up basic connection
$conn_id = ftp_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

// get the size of $file
$res = ftp_size($conn_id, $file);

if ($res != -1) {
    echo "size of $file is $res bytes";
} else {
    echo "couldn't get the size";
}

// close the connection
ftp_close($conn_id);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_1" />
      <property ref="FTP_9" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_ssl_connect">
    <description><![CDATA[   ftp_ssl_connect opens a SSL-FTP connection to the  specified host .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// set up basic ssl connection
$conn_id = ftp_ssl_connect($ftp_server);

// login with username and password
$login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass);

echo ftp_pwd($conn_id); // /

// close the ssl connection
ftp_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FTP_4" />
      <property ref="FTP_5" />
      <property ref="FTP_6" />
    </properties>
    
  </element>
  <element kind="function" name="ftp_systype">
    <description><![CDATA[  Returns the system type identifier of the remove FTP server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// ftp connection
$ftp = ftp_connect('ftp.example.com');
ftp_login($ftp, 'user', 'password');

// get the system type
if ($type = ftp_systype($ftp)) {
    echo "Example.com is powered by $type\n";
} else {
    echo "Couldn't get the systype";
}

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_1" />
    </properties>
    
  </element>
</group>
<group name="Filesystem">
  <description><![CDATA[Filesystem Functions]]></description>
  <element kind="function" name="basename">
    <description><![CDATA[  Given a string containing a path to a file, this function will  return the base name of the file.  If the filename ends in suffix this will  also be cut off.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$path = "/home/httpd/html/index.php";
$file = basename($path);        // $file is set to "index.php"
$file = basename($path, ".php"); // $file is set to "index"
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Directories_3" />
      <property kind="parameter" name="suffix" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="chgrp">
    <description><![CDATA[  Attempts to change the group of the file filename  to group (specified by name or number). Only the  superuser may change the group of a file arbitrarily; other users may  change the group of a file to any group of which that user is a member.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property kind="parameter" name="group" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="chmod">
    <description><![CDATA[  Attempts to change the mode of the file specified by   filename to that given in   mode .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="chown">
    <description><![CDATA[  Attempts to change the owner of the file filename  to user user (specified by name or number).  Only  the superuser may change the owner of a file.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property kind="parameter" name="user" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="clearstatcache">
    <description><![CDATA[  When you use stat , lstat , or  any of the other functions listed in the affected functions list (below),  PHP caches the information those functions return in order to provide  faster performance. However, in certain cases, you may want to clear the  cached information. For instance, if the same file is being checked  multiple times within a single script, and that file is in danger of  being removed or changed during that script's operation, you may elect to  clear the status cache.  In these cases, you can use the   clearstatcache function to clear the information  that PHP caches about a file.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="copy">
    <description><![CDATA[  Makes a copy of the file source to   dest .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'example.txt';
$newfile = 'example.txt.bak';

if (!copy($file, $newfile)) {
    echo "failed to copy $file...\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Bzip2_2" />
      <property kind="parameter" name="dest" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="delete">
    <description><![CDATA[  This is a dummy manual entry to satisfy those people who are  looking for unlink or   unset in the wrong place.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="file" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dirname">
    <description><![CDATA[  Given a string containing a path to a file, this function will  return the name of the directory.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$path = "/etc/passwd";
$file = dirname($path); // $file is set to "/etc"
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="disk_free_space">
    <description><![CDATA[  Given a string containing a directory, this function will return  the number of bytes available on the corresponding filesystem or  disk partition.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $df contains the number of bytes available on "/"
$df = disk_free_space("/");

// On Windows:
disk_free_space("C:");
disk_free_space("D:");
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="disk_total_space">
    <description><![CDATA[  Given a string containing a directory, this function will return  the total number of bytes on the corresponding filesystem or disk  partition.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $df contains the total number of bytes available on "/"
$df = disk_total_space("/");

// On Windows:
disk_total_space("C:");
disk_total_space("D:");
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="fclose">
    <description><![CDATA[  The file pointed to by handle is closed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

  $handle = fopen('somefile.txt', 'r');
  
  fclose($handle);
  
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="feof">
    <description><![CDATA[  Returns if the file pointer is at EOF or an error occurs  (including socket timeout); otherwise returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="fflush">
    <description><![CDATA[  This function forces a write of all buffered output to the  resource pointed to by the file handle handle .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="fgetc">
    <description><![CDATA[  Returns a string containing a single character read from the  file pointed to by handle .  Returns on EOF.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = fopen('somefile.txt', 'r');
if (!$fp) {
    echo 'Could not open file somefile.txt';
}
while (false !== ($char = fgetc($fp))) {
    echo "$char\n";
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="fgetcsv">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$row = 1;
$handle = fopen("test.csv", "r");
while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
    $num = count($data);
    echo "<p> $num fields in line $row: <br /></p>\n";
    $row++;
    for ($c=0; $c < $num; $c++) {
        echo $data[$c] . "<br />\n";
    }
}
fclose($handle);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FTP_8" />
      <property ref="Arrays_36" />
      <property ref="APD_3" />
      <property kind="parameter" name="enclosure" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="fgets">
    <description><![CDATA[  Returns a string of up to length - 1 bytes read from  the file pointed to by handle . Reading ends when   length - 1 bytes have been read, on a newline (which is  included in the return value), or on EOF (whichever comes first). If no length  is specified, the length defaults to 1k, or 1024 bytes.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = fopen("/tmp/inputfile.txt", "r");
while (!feof($handle)) {
    $buffer = fgets($handle, 4096);
    echo $buffer;
}
fclose($handle);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_8" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="fgetss">
    <description><![CDATA[  Identical to fgets , except that fgetss  attempts to strip any HTML and PHP tags from the text it  reads.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_8" />
      <property ref="Arrays_36" />
      <property kind="parameter" name="allowable_tags" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="file">
    <description><![CDATA[   Identical to readfile , except that   file returns the file in an array. Each  element of the array corresponds to a line in the file, with the  newline still attached.  Upon failure, file  returns .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property kind="parameter" name="use_include_path" type="int"  />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="file_exists">
    <description><![CDATA[  On windows, use or   to check files on  network shares.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$filename = '/path/to/foo.txt';

if (file_exists($filename)) {
    echo "The file $filename exists";
} else {
    echo "The file $filename does not exist";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="file_get_contents">
    <description><![CDATA[   Identical to file , except that   file_get_contents returns the file in a string,  starting at the specified offset up to   maxlen bytes.  On failure, file_get_contents will return .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Apache_3" />
      <property kind="parameter" name="use_include_path" type="bool"  />
      <property ref="Directories_5" />
      <property kind="parameter" name="offset" type="int"  />
      <property kind="parameter" name="maxlen" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="file_put_contents">
    <description><![CDATA[  You can also specify the data parameter as an array  (not multi-dimension arrays). This is equivalent to   .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
      <property kind="parameter" name="data" type="mixed" required="1" />
      <property ref="COM_29" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="fileatime">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// outputs e.g.  somefile.txt was last accessed: December 29 2002 22:16:23.

$filename = 'somefile.txt';
if (file_exists($filename)) {
    echo "$filename was last accessed: " . date("F d Y H:i:s.", fileatime($filename));
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="filectime">
    <description><![CDATA[  Returns the time the file was last changed, or in case of  an error. The time is returned as a Unix timestamp.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// outputs e.g.  somefile.txt was last changed: December 29 2002 22:16:23.

$filename = 'somefile.txt';
if (file_exists($filename)) {
    echo "$filename was last changed: " . date("F d Y H:i:s.", filectime($filename));
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="filegroup">
    <description><![CDATA[   Returns the group ID of the file, or in case  of an error. The group ID is returned in numerical format, use   posix_getgrgid to resolve it to a group name.  Upon failure, is returned along with an error of level   .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="fileinode">
    <description><![CDATA[   Returns the inode number of the file, or in case of an  error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="filemtime">
    <description><![CDATA[  Returns the time the file was last modified, or in case of  an error. The time is returned as a Unix timestamp, which is  suitable for the date function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// outputs e.g.  somefile.txt was last modified: December 29 2002 22:16:23.

$filename = 'somefile.txt';
if (file_exists($filename)) {
    echo "$filename was last modified: " . date ("F d Y H:i:s.", filemtime($filename));
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="fileowner">
    <description><![CDATA[   Returns the user ID of the owner of the file, or in case of  an error. The user ID is returned in numerical format, use   posix_getpwuid to resolve it to a username.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="fileperms">
    <description><![CDATA[   Returns the permissions on the file, or in case of an error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo substr(sprintf('%o', fileperms('/tmp')), -4);
echo substr(sprintf('%o', fileperms('/etc/passwd')), -4);
?>

        

<?php
$perms = fileperms('/etc/passwd');

if (($perms & 0xC000) == 0xC000) {
    // Socket
    $info = 's';
} elseif (($perms & 0xA000) == 0xA000) {
    // Symbolic Link
    $info = 'l';
} elseif (($perms & 0x8000) == 0x8000) {
    // Regular
    $info = '-';
} elseif (($perms & 0x6000) == 0x6000) {
    // Block special
    $info = 'b';
} elseif (($perms & 0x4000) == 0x4000) {
    // Directory
    $info = 'd';
} elseif (($perms & 0x2000) == 0x2000) {
    // Character special
    $info = 'c';
} elseif (($perms & 0x1000) == 0x1000) {
    // FIFO pipe
    $info = 'p';
} else {
    // Unknown
    $info = 'u';
}

// Owner
$info .= (($perms & 0x0100) ? 'r' : '-');
$info .= (($perms & 0x0080) ? 'w' : '-');
$info .= (($perms & 0x0040) ?
            (($perms & 0x0800) ? 's' : 'x' ) :
            (($perms & 0x0800) ? 'S' : '-'));

// Group
$info .= (($perms & 0x0020) ? 'r' : '-');
$info .= (($perms & 0x0010) ? 'w' : '-');
$info .= (($perms & 0x0008) ?
            (($perms & 0x0400) ? 's' : 'x' ) :
            (($perms & 0x0400) ? 'S' : '-'));

// World
$info .= (($perms & 0x0004) ? 'r' : '-');
$info .= (($perms & 0x0002) ? 'w' : '-');
$info .= (($perms & 0x0001) ?
            (($perms & 0x0200) ? 't' : 'x' ) :
            (($perms & 0x0200) ? 'T' : '-'));

echo $info;
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="filesize">
    <description><![CDATA[   Returns the size of the file in bytes, or in case of an error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// outputs e.g.  somefile.txt: 1024 bytes

$filename = 'somefile.txt';
echo $filename . ': ' . filesize($filename) . ' bytes';

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="filetype">
    <description><![CDATA[   Returns the type of the file. Possible values are fifo, char,  dir, block, link, file, and unknown.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo filetype('/etc/passwd');  // file
echo filetype('/etc/');        // dir

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="flock">
    <description><![CDATA[   flock is mandatory under Windows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fp = fopen("/tmp/lock.txt", "w+");

if (flock($fp, LOCK_EX)) { // do an exclusive lock
    fwrite($fp, "Write something here\n");
    flock($fp, LOCK_UN); // release the lock
} else {
    echo "Couldn't lock the file !";
}

fclose($fp);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
      <property kind="parameter" name="operation" type="int" required="1" />
      <property kind="parameter" name="wouldblock" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fnmatch">
    <description><![CDATA[   fnmatch checks if the passed string would  match the given shell wildcard pattern .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (fnmatch("*gr[ae]y", $color)) {
  echo "some form of gray ...";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="pattern" type="string" required="1" />
      <property kind="parameter" name="string" type="string" required="1" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="fopen">
    <description><![CDATA[  The mode parameter specifies the type of access  you require to the stream.  It may be any of the following:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = fopen("/home/rasmus/file.txt", "r");
$handle = fopen("/home/rasmus/file.gif", "wb");
$handle = fopen("http://www.example.com/", "r");
$handle = fopen("ftp://user:password@example.com/somefile.txt", "w");
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property ref="Bzip2_6" />
      <property ref="Filesystem_9" />
      <property kind="parameter" name="zcontext" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="fpassthru">
    <description><![CDATA[  When using fpassthru on a binary file on Windows  systems, you should make sure to open the file in binary mode by  appending a to the mode used in the call to   fopen .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open the file in a binary mode
$name = ".\public\dev\img\ok.png";
$fp = fopen($name, 'rb');

// send the right headers
header("Content-Type: image/png");
header("Content-Length: " . filesize($name));

// dump the picture and stop the script
fpassthru($fp);
exit;

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="fputcsv">
    <description><![CDATA[   fputcsv formats a line (passed as a   fields array) as CSV and write it to the  specified file handle . Returns the length of the  written string, or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$list = array (
    'aaa,bbb,ccc,dddd',
    '123,456,789',
    '"aaa","bbb"'
);

$fp = fopen('file.csv', 'w');

foreach ($list as $line) {
    fputcsv($fp, split(',', $line));
}

fclose($fp);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
      <property kind="parameter" name="fields" type="array"  />
      <property ref="APD_3" />
      <property ref="Filesystem_6" />
    </properties>
    
  </element>
  <element kind="function" name="fread">
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_8" />
      <property kind="parameter" name="length" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fscanf">
    <description><![CDATA[  The function fscanf is similar to   sscanf , but it takes its input from a file  associated with handle and interprets the  input according to the specified format , which is  described in the documentation for sprintf . If only  two parameters were passed to this function, the values parsed will be  returned as an array. Otherwise, if optional parameters are passed, the  function will return the number of assigned values. The optional  parameters must be passed by reference.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = fopen("users.txt", "r");
while ($userinfo = fscanf($handle, "%s\t%s\t%s\n")) {
    list ($name, $profession, $countrycode) = $userinfo;
    //... do something with the values
}
fclose($handle);
?>

      

javier  argonaut        pe
hiroshi sculptor        jp
robert  slacker us
luigi   florist it]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="FTP_8" />
      <property ref="Date/Time_1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="fseek">
    <description><![CDATA[  Sets the file position indicator for the file referenced by   handle . The new position, measured in bytes  from the beginning of the file, is obtained by adding   offset to the position specified by   whence , whose values are defined as  follows:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$fp = fopen('somefile.txt');

// read some data
$data = fgets($fp, 4096);

// move back to the beginning of the file
// same as rewind($fp);
fseek($fp, 0);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
      <property ref="Arrays_35" />
      <property ref="Direct IO_7" />
    </properties>
    
  </element>
  <element kind="function" name="fstat">
    <description><![CDATA[  Gathers the statistics of the file opened by the file  pointer handle . This function is similar to the   stat function except that it operates  on an open file pointer instead of a filename.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open a file
$fp = fopen("/etc/passwd", "r");

// gather statistics
$fstat = fstat($fp);

// close the file
fclose($fp);

// print only the associative part
print_r(array_slice($fstat, 13));

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="ftell">
    <description><![CDATA[  Returns the position of the file pointer referenced by   handle ; i.e., its offset into the  file stream.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// opens a file and read some data
$fp = fopen("/etc/passwd", "r");
$data = fgets($fp, 12);

// where are we ?
echo ftell($fp); // 11

fclose($fp);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="ftruncate">
    <description><![CDATA[  Takes the filepointer, handle , and truncates the file to  length, size .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
      <property ref="Arrays_4" />
    </properties>
    
  </element>
  <element kind="function" name="fwrite">
    <description><![CDATA[  On systems which differentiate between binary and text files  (i.e. Windows) the file must be opened with 'b' included in   fopen mode parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$filename = 'test.txt';
$somecontent = "Add this to the file\n";

// Let's make sure the file exists and is writable first.
if (is_writable($filename)) {

    // In our example we're opening $filename in append mode.
    // The file pointer is at the bottom of the file hence 
    // that's where $somecontent will go when we fwrite() it.
    if (!$handle = fopen($filename, 'a')) {
         echo "Cannot open file ($filename)";
         exit;
    }

    // Write $somecontent to our opened file.
    if (fwrite($handle, $somecontent) === FALSE) {
        echo "Cannot write to file ($filename)";
        exit;
    }
    
    echo "Success, wrote ($somecontent) to file ($filename)";
    
    fclose($handle);

} else {
    echo "The file $filename is not writable";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
      <property ref="Filesystem_16" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="glob">
    <description><![CDATA[  The glob function searches for all the pathnames  matching pattern according to the rules used by  the libc glob() function, which is similar to the rules used by common  shells. No tilde expansion or parameter substitution is done.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
foreach (glob("*.txt") as $filename) {
    echo "$filename size " . filesize($filename) . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Filesystem_15" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_dir">
    <description><![CDATA[  Returns if the filename exists and is a directory. If   filename is a relative filename, it will be  checked relative to the current working directory.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?
var_dump(is_dir('a_file.txt')) . "\n";
var_dump(is_dir('bogus_dir/abc')) . "\n";

var_dump(is_dir('..')); //one dir up
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="is_executable">
    <description><![CDATA[  Returns if the filename exists and is executable.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = '/home/vincent/somefile.sh';

if (is_executable($file)) {
    echo $file.' is executable';
} else {
    echo $file.' is not executable';
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="is_file">
    <description><![CDATA[  Returns if the filename exists and is a regular file.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="is_link">
    <description><![CDATA[  Returns if the filename exists and is a symbolic link.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="is_readable">
    <description><![CDATA[  Returns if the filename exists and is readable.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="is_uploaded_file">
    <description><![CDATA[  Returns if the file named by filename was  uploaded via HTTP POST. This is useful to help ensure that a  malicious user hasn't tried to trick the script into working on  files upon which it should not be working--for instance,   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

if (is_uploaded_file($_FILES['userfile']['tmp_name'])) {
   echo "File ". $_FILES['userfile']['name'] ." uploaded successfully.\n";
   echo "Displaying contents\n";
   readfile($_FILES['userfile']['tmp_name']);
} else {
   echo "Possible file upload attack: ";
   echo "filename '". $_FILES['userfile']['tmp_name'] . "'.";
}

?>
     

<?php
/* Userland test for uploaded file. */
function is_uploaded_file($filename) 
{
    if (!$tmp_file = get_cfg_var('upload_tmp_dir')) {
        $tmp_file = dirname(tempnam('', ''));
    }
    $tmp_file .= '/' . basename($filename);
    /* User might have trailing slash in php.ini... */
    return (ereg_replace('/+', '/', $tmp_file) == $filename);
}

/* This is how to use it, since you also don't have
 * move_uploaded_file() in these older versions: */
if (is_uploaded_file($HTTP_POST_FILES['userfile'])) {
    copy($HTTP_POST_FILES['userfile'], "/place/to/put/uploaded/file");
} else {
    echo "Possible file upload attack: filename '$HTTP_POST_FILES[userfile]'.";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="is_writable">
    <description><![CDATA[  Returns if the filename exists and is  writable.  The filename argument may be a directory name allowing you  to check if a directory is writeable.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="link">
    <description><![CDATA[   link creates a hard link.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_11" />
      <property kind="parameter" name="link" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="linkinfo">
    <description><![CDATA[   linkinfo returns the   field of the Unix C stat structure returned by the   system call.  This function is used to verify if a link (pointed to by   path ) really exists (using the same method  as the S_ISLNK macro defined in ).  Returns 0 or in  case of error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo linkinfo('/vmlinuz'); // 835

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="lstat">
    <description><![CDATA[  Gathers the statistics of the file or symbolic link named by   filename .  This function is identical to the   stat function except that if the   filename parameter is a symbolic link, the  status of the symbolic link is returned, not the status of the  file pointed to by the symbolic link.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="mkdir">
    <description><![CDATA[  Attempts to create the directory specified by pathname.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
mkdir("/path/to/my/dir", 0700);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="pathname" type="string" required="1" />
      <property ref="Arrays_43" />
      <property ref="FTP_15" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="move_uploaded_file">
    <description><![CDATA[  This function checks to ensure that the file designated by   filename is a valid upload file (meaning  that it was uploaded via PHP's HTTP POST upload mechanism). If  the file is valid, it will be moved to the filename given by   destination .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property kind="parameter" name="destination" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="parse_ini_file">
    <description><![CDATA[   parse_ini_file loads in the  ini file specified in filename ,  and returns the settings in it in an associative array.  By setting the last process_sections  parameter to , you get a multidimensional array, with  the section names and settings included. The default  for process_sections is  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[; This is a sample configuration file
; Comments start with ';', as in php.ini

[first_section]
one = 1
five = 5
animal = BIRD

[second_section]
path = /usr/local/bin
URL = "http://www.example.com/~username"

      

<?php

define('BIRD', 'Dodo bird');

// Parse without sections
$ini_array = parse_ini_file("sample.ini");
print_r($ini_array);

// Parse with sections
$ini_array = parse_ini_file("sample.ini", true);
print_r($ini_array);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property kind="parameter" name="process_sections" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="pathinfo">
    <description><![CDATA[   pathinfo returns an associative array  containing information about path .  The  following array elements are returned:   ,  and .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$path_parts = pathinfo('/www/htdocs/index.html');

echo $path_parts['dirname'], "\n";
echo $path_parts['basename'], "\n";
echo $path_parts['extension'], "\n";
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Directories_3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pclose">
    <description><![CDATA[   Closes a file pointer to a pipe opened by   popen .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="popen">
    <description><![CDATA[   Opens a pipe to a process executed by forking the command given  by command.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = popen("/bin/ls", "r");
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FTP_7" />
      <property ref="Bzip2_6" />
    </properties>
    
  </element>
  <element kind="function" name="readfile">
    <description><![CDATA[  Reads a file and writes it to the output buffer.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
      <property ref="Filesystem_9" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="readlink">
    <description><![CDATA[   readlink does the same as the readlink C  function and returns the contents of the symbolic link path or  in case of error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// output e.g. /boot/vmlinux-2.4.20-xfs
echo readlink('/vmlinuz');

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="realpath">
    <description><![CDATA[   realpath expands all symbolic links and  resolves references to '/./', '/../' and extra '/' characters in  the input path and return the canonicalized  absolute pathname.  The resulting path will have no symbolic link,  '/./' or '/../' components.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$real_path = realpath("../../index.php");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="rename">
    <description><![CDATA[   Attempts to rename oldname to   newname .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
rename("/tmp/tmp_file.txt", "/home/user/login/docs/my_file.txt");
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_16" />
      <property ref="Classkit_9" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="rewind">
    <description><![CDATA[   Sets the file position indicator for handle  to the beginning of the file stream.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="rmdir">
    <description><![CDATA[   Attempts to remove the directory named by dirname .  The directory must be empty, and the relevant permissions must permit this.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="dirname" type="string" required="1" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="stat">
    <description><![CDATA[  Gathers the statistics of the file named by   filename .  If filename  is a symbolic link, statistics are from the file itself, not the  symlink. lstat is identical to  stat except it would instead be based off the symlinks  status.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="symlink">
    <description><![CDATA[   symlink creates a symbolic link  from the existing target with  the specified name link .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_11" />
      <property ref="Filesystem_20" />
    </properties>
    
  </element>
  <element kind="function" name="tempnam">
    <description><![CDATA[  Creates a file with a unique filename in the specified directory.  If the directory does not exist, tempnam may  generate a file in the system's temporary directory, and return  the name of that.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$tmpfname = tempnam("/tmp", "FOO");

$handle = fopen($tmpfname, "w");
fwrite($handle, "writing to tempfile");
fclose($handle);

// do here something

unlink($tmpfname);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="dir" type="string" required="1" />
      <property ref="DOM_25" />
    </properties>
    
  </element>
  <element kind="function" name="tmpfile">
    <description><![CDATA[  Creates a temporary file with an unique name in read-write (w+) mode,  returning a file handle similar to the one returned by   fopen .  The file is automatically removed when closed (using   fclose ), or when the script ends.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$temp = tmpfile();
fwrite($temp, "writing to tempfile");
fseek($temp, 0);
echo fread($temp, 1024);
fclose($temp); // this removes the file
?>]]></description>
      </property>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="touch">
    <description><![CDATA[  Attempts to set the access and modification time of the file named by   filename to the value given by   time . If the parameter time  is not given, uses the present time. This is equivalent to what utime  (sometimes referred to as utimes) does. If the third parameter   atime is present, the access time of the given  filename is set to the value of atime .  Note that the access time is always modified, regardless of the number  of parameters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (touch($FileName)) {
    echo "$FileName modification time has been changed to present time";
} else {
    echo "Sorry, could not change modification time of $FileName";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property kind="parameter" name="time" type="int"  />
      <property kind="parameter" name="atime" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="umask">
    <description><![CDATA[   umask sets PHP's umask to   mask  & 0777 and returns the old  umask. When PHP is being used as a server module, the umask  is restored when each request is finished.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="mask" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="unlink">
    <description><![CDATA[  Deletes filename .  Similar to the Unix C  unlink() function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
</group>
<group name="Firebird/InterBase">
  <description><![CDATA[Firebird/InterBase Functions]]></description>
  <element kind="function" name="ibase_add_user">
    <description><![CDATA[  PHP 4 uses server ,   dba_user_name and   dba_user_password instead of   service_handle parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="service_handle" type="resource" required="1" />
      <property kind="parameter" name="user_name" type="string" required="1" />
      <property ref="Crack_2" />
      <property kind="parameter" name="first_name" type="string"  />
      <property kind="parameter" name="middle_name" type="string"  />
      <property kind="parameter" name="last_name" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_affected_rows">
    <description><![CDATA[  This function returns the number of rows that were affected by the previous query that was  executed from within the transaction context specified by link_identifier .  If link_identifier is a connection resource, its default transaction  is used.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="link_identifier" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_backup">
    <properties>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_1" />
      <property kind="parameter" name="source_db" type="string" required="1" />
      <property kind="parameter" name="dest_file" type="string" required="1" />
      <property ref="DOM_30" />
      <property kind="parameter" name="verbose" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_add">
    <description><![CDATA[   ibase_blob_add adds data into a blob  created with ibase_blob_create .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="blob_handle" type="resource" required="1" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_cancel">
    <description><![CDATA[  This function will discard a BLOB created by ibase_create_blob  if it has not yet been closed by ibase_blob_close .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_10" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_close">
    <description><![CDATA[  This function closes a BLOB that has either been opened for reading by   ibase_open_blob or has been opened for writing by   ibase_create_blob . If the BLOB was being read, this function  returns on success, if the BLOB was being written to, this function  returns a string containing the BLOB id that has been assigned to it by the database.  On failure, this function returns .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_10" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_create">
    <description><![CDATA[   ibase_blob_create creates a new BLOB for  filling with data. It returns a BLOB handle for later use with   ibase_blob_add or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_echo">
    <description><![CDATA[  This function opens a BLOB for reading and sends its contents directly  to standard output (the browser, in most cases).     ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="link_identifier" type="resource" required="1" />
      <property kind="parameter" name="blob_id" type="string" required="1" />
      <property ref="Firebird/InterBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_get">
    <description><![CDATA[  This function returns at most len bytes from a BLOB  that has been opened for reading by ibase_blob_open .  Returns on failure.    Whilst this example doesn't do much more than a 'ibase_blob_echo($data->BLOB_VALUE)' would do,  it does show you how to get information into a $variable to manipulate as you please.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_10" />
      <property kind="parameter" name="len" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_import">
    <description><![CDATA[  This function creates a BLOB, reads an entire file into it, closes it and  returns the assigned BLOB id. The file handle is a handle returned by   fopen . Returns on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbh = ibase_connect($host, $username, $password);
$filename = '/tmp/bar';

$fd = fopen($filename, 'r');
if ($fd) {

    $blob = ibase_blob_import($dbh, $fd);
    fclose($fd);

    if (!is_string($blob)) {
        // import failed
    } else {
        $query = "INSERT INTO foo (name, data) VALUES ('$filename', ?)";
        $prepared = ibase_prepare($dbh, $query);
        if (!ibase_execute($prepared, $blob)) {
            // record insertion failed
        }
    }
} else {
    // unable to open the data file
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="file_handle" type="resource" required="1" />
      <property ref="Firebird/InterBase_14" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_info">
    <description><![CDATA[  Returns an array containing information about a BLOB. The information returned  consists of the length of the BLOB, the number of segments it contains, the size  of the largest segment, and whether it is a stream BLOB or a segmented BLOB.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Firebird/InterBase_12" />
      <property ref="Firebird/InterBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_blob_open">
    <description><![CDATA[   ibase_blob_open opens an existing BLOB for  reading. It returns a BLOB handle for later use with   ibase_blob_get or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Firebird/InterBase_12" />
      <property ref="Firebird/InterBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_close">
    <description><![CDATA[  Closes the link to an InterBase database that's associated with  a connection id returned from ibase_connect .  If the connection id is omitted, the last opened link is assumed.  Default transaction on link is committed, other transactions are  rolled back.   ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="connection_id" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_commit">
    <description><![CDATA[  If called without an argument, this function commits the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be committed. If the argument  is a transaction identifier, the corresponding transaction will be committed.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="link_or_trans_identifier" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_commit_ret">
    <description><![CDATA[  If called without an argument, this function commits the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be committed. If the argument  is a transaction identifier, the corresponding transaction will be committed.  The transaction context will be retained, so statements executed from within  this transaction will not be invalidated.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_16" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_connect">
    <description><![CDATA[  Establishes a connection to an InterBase server.  The database argument  has to be a valid path to database file on the server it resides on.  If the server is not local, it must be prefixed with either  'hostname:' (TCP/IP), '//hostname/' (NetBEUI) or 'hostname@' (IPX/SPX),  depending on the connection protocol used. username  and password can also  be specified with PHP configuration directives ibase.default_user and  ibase.default_password. charset is the default  character set for a database. buffers is the number  of database buffers to allocate for the server-side cache. If 0 or omitted,  server chooses its own default. dialect selects  the default SQL dialect for any statement executed within a connection,  and it defaults to the highest one supported by client libraries.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $host = 'localhost:/path/to/your.gdb';

    $dbh = ibase_connect($host, $username, $password);
    $stmt = 'SELECT * FROM tblname';
    $sth = ibase_query($dbh, $stmt);
    while ($row = ibase_fetch_object($sth)) {
        echo $row->email, "\n";
    }
    ibase_free_result($sth);
    ibase_close($dbh);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="database" type="string" required="1" />
      <property kind="parameter" name="username" type="string"  />
      <property ref="Cyrus IMAP_8" />
      <property kind="parameter" name="charset" type="string"  />
      <property kind="parameter" name="buffers" type="int"  />
      <property kind="parameter" name="dialect" type="int"  />
      <property kind="parameter" name="role" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_db_info">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_1" />
      <property kind="parameter" name="db" type="string" required="1" />
      <property kind="parameter" name="action" type="int" required="1" />
      <property kind="parameter" name="argument" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_delete_user">
    <description><![CDATA[  PHP 4 uses server ,   dba_user_name and   dba_user_password instead of   service_handle parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_1" />
      <property ref="Firebird/InterBase_2" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_drop_db">
    <description><![CDATA[  This functions drops a database that was opened by either ibase_connect  or ibase_pconnect . The database is closed and deleted from the server.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="connection" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_errcode">
    <description><![CDATA[  Returns the error code that resulted from the most recent InterBase function  call. Returns if no error occurred.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_errmsg">
    <description><![CDATA[  See also   ibase_errcode .  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_execute">
    <description><![CDATA[  Execute a query prepared by ibase_prepare . If  the query raises an error, returns . If it is successful and  there is a (possibly empty) result set (such as with a SELECT query),  returns a result identifier. If the query was successful and there were  no results, returns .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
   
$dbh = ibase_connect($host, $username, $password); 

$updates = array(
    1 => 'Eric',
    5 => 'Filip',
    7 => 'Larry'
);

$query = ibase_prepare($dbh, "UPDATE FOO SET BAR = ? WHERE BAZ = ?");

while (list($baz, $bar) = each($updates)) {
    ibase_execute($query, $bar, $baz);
}

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="query" type="resource" required="1" />
      <property kind="parameter" name="bind_arg" type="mixed"  />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_fetch_assoc">
    <description><![CDATA[   ibase_fetch_assoc returns an associative array  that corresponds to the fetched row.  Subsequent calls will return  the next row in the result set, or if there are no more  rows.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="result" type="resource" required="1" />
      <property kind="parameter" name="fetch_flag" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_fetch_object">
    <description><![CDATA[  Fetches a row as a pseudo-object from a   result_id obtained either by   ibase_query or   ibase_execute .    ]]></description>
    <properties>
      <property ref="ret_object" />
      <property kind="parameter" name="result_id" type="resource" required="1" />
      <property ref="Firebird/InterBase_30" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_fetch_row">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or  if there are no more rows.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="result_identifier" type="resource" required="1" />
      <property ref="Firebird/InterBase_30" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_field_info">
    <description><![CDATA[  Returns an array with information about a field after a select  query has been run. The array is in the form of name, alias,  relation, length, type.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="field_number" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_free_event_handler">
    <description><![CDATA[  This function causes the registered event handler specified by   event to be cancelled. The callback function  will no longer be called for the events it was registered to handle.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="event" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_free_query">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_27" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_free_result">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_32" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_gen_id">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="generator" type="string" required="1" />
      <property kind="parameter" name="increment" type="int"  />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_maintain_db">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_1" />
      <property ref="Firebird/InterBase_23" />
      <property ref="Firebird/InterBase_24" />
      <property ref="Firebird/InterBase_25" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_modify_user">
    <description><![CDATA[  PHP 4 uses server ,   dba_user_name and   dba_user_password instead of   service_handle parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_1" />
      <property ref="Firebird/InterBase_2" />
      <property ref="Crack_2" />
      <property ref="Firebird/InterBase_3" />
      <property ref="Firebird/InterBase_4" />
      <property ref="Firebird/InterBase_5" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_name_result">
    <description><![CDATA[  This function assigns a name to a result set. This name can be used later in  UPDATE|DELETE ... WHERE CURRENT OF name statements.      ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_num_fields">
    <description><![CDATA[  Returns an integer containing the number of fields in a result  set.    ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_num_params">
    <description><![CDATA[  This function returns the number of parameters in the prepared query specified  by query . This is the number of binding arguments that  must be present when calling ibase_execute .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_27" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_param_info">
    <description><![CDATA[  Returns an array with information about a parameter after a  query has been prepared. The array is in the form of name, alias,  relation, length, type.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_27" />
      <property kind="parameter" name="param_number" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_pconnect">
    <description><![CDATA[   ibase_pconnect acts very much like   ibase_connect with two major differences.  First, when connecting, the function will first try to find a  (persistent) link that's already opened with the same parameters.  If one is found, an identifier for it will be returned instead of  opening a new connection. Second, the connection to the InterBase  server will not be closed when the execution of the script ends.  Instead, the link will remain open for future use  ( ibase_close will not close links established  by ibase_pconnect ). This type of link is  therefore called 'persistent'.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
      <property ref="Firebird/InterBase_19" />
      <property ref="Firebird/InterBase_20" />
      <property ref="Firebird/InterBase_21" />
      <property ref="Firebird/InterBase_22" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_prepare">
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="trans" type="string" required="1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_query">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

    $host = 'localhost:/path/to/your.gdb';

    $dbh = ibase_connect($host, $username, $password);
    $stmt = 'SELECT * FROM tblname';

    $sth = ibase_query($dbh, $stmt) or die(ibase_errmsg());

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_6" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="bind_args" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_restore">
    <properties>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_1" />
      <property kind="parameter" name="source_file" type="string" required="1" />
      <property kind="parameter" name="dest_db" type="string" required="1" />
      <property ref="DOM_30" />
      <property ref="Firebird/InterBase_9" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_rollback">
    <description><![CDATA[  If called without an argument, this function rolls back the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be rolled back. If the argument  is a transaction identifier, the corresponding transaction will be rolled back.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_16" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_rollback_ret">
    <description><![CDATA[  If called without an argument, this function rolls back the default transaction  of the default link. If the argument is a connection identifier, the default  transaction of the corresponding connection will be rolled back. If the argument  is a transaction identifier, the corresponding transaction will be rolled back.  The transaction context will be retained, so statements executed from within  this transaction will not be invalidated.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_16" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_server_info">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_1" />
      <property ref="Firebird/InterBase_24" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_service_attach">
    <properties>
      <property ref="ret_resource" />
      <property ref="FTP_4" />
      <property kind="parameter" name="dba_username" type="string" required="1" />
      <property kind="parameter" name="dba_password" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_service_detach">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_1" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_set_event_handler">
    <description><![CDATA[  This function registers a PHP user function as event handler for the specified  events. The callback is called with the event name and the link resource as arguments  whenever one of the specified events is posted by the database. The callback must  return if the event handler should be canceled. Any other return value is ignored.  This function accepts up to 15 event arguments.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="event_handler" type="callback" required="1" />
      <property kind="parameter" name="event_name1" type="string" required="1" />
      <property kind="parameter" name="event_name2" type="string"  />
      <property kind="parameter" name="..." type="string"  />
      <property ref="Cyrus IMAP_1" />
      <property ref="Firebird/InterBase_44" />
      <property ref="Firebird/InterBase_45" />
      <property ref="Firebird/InterBase_46" />
      <property ref="Firebird/InterBase_47" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_timefmt">
    <description><![CDATA[  Sets the format of timestamp, date or time type columns returned  from queries. Internally, the columns are formatted by c-function  strftime(), so refer to its documentation regarding to the format  of the string. columntype is one of the  constants IBASE_TIMESTAMP, IBASE_DATE and IBASE_TIME. If omitted,  defaults to IBASE_TIMESTAMP for backwards compatibility.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Date/Time_1" />
      <property kind="parameter" name="columntype" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ibase_trans">
    <description><![CDATA[  Begins a transaction.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="trans_args" type="int"  />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="ibase_wait_event">
    <description><![CDATA[  This function suspends execution of the script until one of the specified events  is posted by the database. The name of the event that was posted is returned. This  function accepts up to 15 event arguments.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_45" />
      <property ref="Firebird/InterBase_46" />
      <property ref="Firebird/InterBase_47" />
      <property ref="Cyrus IMAP_1" />
      <property ref="Firebird/InterBase_45" />
      <property ref="Firebird/InterBase_46" />
      <property ref="Firebird/InterBase_47" />
    </properties>
    
  </element>
</group>
<group name="FriBiDi">
  <description><![CDATA[FriBiDi Functions]]></description>
  <element kind="function" name="fribidi_log2vis">
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="direction" type="string" required="1" />
      <property kind="parameter" name="charset" type="int" required="1" />
    </properties>
    
  </element>
</group>
<group name="FrontBase">
  <description><![CDATA[FrontBase Functions]]></description>
  <element kind="function" name="fbsql_affected_rows">
    <description><![CDATA[    fbsql_affected_rows returns the number  of rows affected by the last INSERT, UPDATE or DELETE query  associated with link_identifier .  If the  link identifier isn't specified, the last link opened by   fbsql_connect is assumed.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_autocommit">
    <description><![CDATA[    fbsql_autocommit returns the current  autocommit status. If the optional OnOff parameter is  given the auto commit status will be changed.  With OnOff set to each statement will be committed  automatically, if no errors was found.  With OnOff set to the user must commit or rollback  the transaction using either fbsql_commit or   fbsql_rollback .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="OnOff" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_blob_size">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="blob_handle" type="string" required="1" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_change_user">
    <description><![CDATA[    fbsql_change_user changes the logged in user  of the current active connection, or the connection given by the  optional parameter link_identifier.  If a database is specified,  this will default or current database after the user has been  changed.  If the new user and password authorization fails, the  current connected user stays active.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property kind="parameter" name="database" type="string"  />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_clob_size">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="clob_handle" type="string" required="1" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_close">
    <description><![CDATA[  Returns: on success, on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_connect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    echo "Connected successfully";
    fbsql_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_commit">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_connect">
    <description><![CDATA[   Returns a positive FrontBase link identifier on success, or an  error message on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

    $link = fbsql_connect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    echo "Connected successfully";
    fbsql_close($link);

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="hostname" type="string"  />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_create_blob">
    <description><![CDATA[   Returns: A resource handle to the newly created blob.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_pconnect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    $filename = "blobfile.bin";
    $fp = fopen($filename, "rb");
    $blobdata = fread($fp, filesize($filename));
    fclose($fp);
    
    $blobHandle = fbsql_create_blob($blobdata, $link);
    
    $sql = "INSERT INTO BLOB_TABLE (BLOB_COLUMN) VALUES ($blobHandle);";
    $rs = fbsql_query($sql, $link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="blob_data" type="string" required="1" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_create_clob">
    <description><![CDATA[   Returns: A resource handle to the newly created CLOB.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_pconnect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    $filename = "clob_file.txt";
    $fp = fopen($filename, "rb");
    $clobdata = fread($fp, filesize($filename));
    fclose($fp);
    
    $clobHandle = fbsql_create_clob($clobdata, $link);
    
    $sql = "INSERT INTO CLOB_TABLE (CLOB_COLUMN) VALUES ($clobHandle);";
    $rs = fbsql_query($sql, $link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="clob_data" type="string" required="1" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_create_db">
    <description><![CDATA[    fbsql_create_db attempts to create a new  database named database_name on the server  associated with the specified connection   link_identifier .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_pconnect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    if (fbsql_create_db("my_db")) {
        echo "Database created successfully\n";
    } else {
        printf("Error creating database: %s\n", fbsql_error());
    }
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="database_name" type="string" required="1" />
      <property ref="Firebird/InterBase_6" />
      <property kind="parameter" name="database_options" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_data_seek">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_pconnect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");

    fbsql_select_db("samp_db")
        or die("Could not select database");

    $query = "SELECT last_name, first_name FROM friends;";
    $result = fbsql_query($query)
        or die("Query failed");

    // fetch rows in reverse order

    for ($i = fbsql_num_rows($result) - 1; $i >=0; $i--) {
        if (!fbsql_data_seek($result, $i)) {
            printf("Cannot seek to row %d\n", $i);
            continue;
        }

        if (!($row = fbsql_fetch_object($result)))
            continue;

        echo $row->last_name . $row->first_name . "<br />\n";
    }

    fbsql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_32" />
      <property kind="parameter" name="row_number" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_database">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property ref="FrontBase_3" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_database_password">
    <description><![CDATA[   Returns: The database password associated with the link identifier.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_pconnect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    fbsql_database_password($link, "secret db password");
    fbsql_select_db($database, $link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="database_password" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_db_query">
    <description><![CDATA[   Returns: A positive FrontBase result identifier to the query  result, or on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_db_status">
    <description><![CDATA[   Returns: An integer value with the current status.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_drop_db">
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_errno">
    <description><![CDATA[  Returns the error number from the last fbsql function, or   (zero) if no error occurred.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_error">
    <description><![CDATA[  Returns the error text from the last fbsql function, or   (the empty string) if no error occurred.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_fetch_array">
    <description><![CDATA[   Returns an array that corresponds to the fetched row, or  if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
fbsql_connect($host, $user, $password);
$result = fbsql_db_query("database", "select user_id, fullname from table");
while ($row = fbsql_fetch_array($result)) {
    echo "user_id: " . $row["user_id"] . "<br />\n";
    echo "user_id: " . $row[0] . "<br />\n";
    echo "fullname: " . $row["fullname"] . "<br />\n";
    echo "fullname: " . $row[1] . "<br />\n";
}
fbsql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="result_type" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_fetch_assoc">
    <description><![CDATA[   Returns an associative array that corresponds to the fetched row,  or if there are no more rows.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
fbsql_connect($host, $user, $password);
$result = fbsql_db_query("database", "select * from table");
while ($row = fbsql_fetch_assoc($result)) {
    echo $row["user_id"];
    echo $row["fullname"];
}
fbsql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_fetch_field">
    <description><![CDATA[  Returns an object containing field information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
fbsql_connect($host, $user, $password)
    or die("Could not connect");
$result = fbsql_db_query("database", "select * from table")
    or die("Query failed");
# get column metadata
$i = 0;
while ($i < fbsql_num_fields($result)) {
    echo "Information for column $i:<br />\n";
    $meta = fbsql_fetch_field($result);
    if (!$meta) {
        echo "No information available<br />\n";
    }
    echo "<pre>
max_length:   $meta->max_length
name:         $meta->name
not_null:     $meta->not_null
table:        $meta->table
type:         $meta->type
</pre>";
    $i++;
}
fbsql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="field_offset" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_fetch_lengths">
    <description><![CDATA[   Returns: An array that corresponds to the lengths of each field  in the last row fetched by fbsql_fetch_row ,  or on error.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_fetch_object">
    <description><![CDATA[   Returns an object with properties that correspond to the fetched  row, or if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
fbsql_connect($host, $user, $password);
$result = fbsql_db_query("database", "select * from table");
while ($row = fbsql_fetch_object($result)) {
    echo $row->user_id;
    echo $row->fullname;
}
fbsql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_fetch_row">
    <description><![CDATA[   Returns: An array that corresponds to the fetched row, or  if there are no more rows.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_field_flags">
    <description><![CDATA[    fbsql_field_flags returns the field flags of  the specified field. The flags are reported as a single word  per flag separated by a single space, so that you can split the  returned value using explode .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_field_len">
    <description><![CDATA[   fbsql_field_len returns the length of the  specified field.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_field_name">
    <description><![CDATA[   fbsql_field_name returns the name of the  specified field index. result must be a  valid result identifier and field_index is  the numerical offset of the field.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// The users table consists of three fields: 
//   user_id
//   username
//   password.

$res = fbsql_db_query("users", "select * from users", $link);

echo fbsql_field_name($res, 0) . "\n";
echo fbsql_field_name($res, 2);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="field_index" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_field_seek">
    <description><![CDATA[  Seeks to the specified field offset.  If the next call to   fbsql_fetch_field doesn't include a field  offset, the field offset specified in   fbsql_field_seek will be returned.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_field_table">
    <description><![CDATA[   Returns the name of the table that the specified field is  in.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_field_type">
    <description><![CDATA[   fbsql_field_type is similar to the   fbsql_field_name function. The arguments are  identical, but the field type is returned instead. The field type  will be one of "int", "real", "string", "blob", and others as  detailed in the .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 

fbsql_connect("localhost", "_SYSTEM", "");
fbsql_select_db("wisconsin");
$result = fbsql_query("SELECT * FROM onek;");
$fields = fbsql_num_fields($result);
$rows   = fbsql_num_rows($result);
$i = 0;
$table = fbsql_field_table($result, $i);
echo "Your '" . $table . "' table has " . $fields . " fields and " . $rows . " records <br />";
echo "The table has the following fields <br />"; 
while ($i < $fields) {
    $type  = fbsql_field_type($result, $i);
    $name  = fbsql_field_name($result, $i);
    $len   = fbsql_field_len($result, $i);
    $flags = fbsql_field_flags($result, $i);
    echo $type . " " . $name . " " . $len . " " . $flags . "<br />";
    $i++;
}
fbsql_close();

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_free_result">
    <description><![CDATA[   fbsql_free_result will free all memory  associated with the result identifier result .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_get_autostart_info">
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_hostname">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="host_name" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_insert_id">
    <description><![CDATA[   fbsql_insert_id returns the ID generated for  an column defined as DEFAULT UNIQUE by the previous INSERT query  using the given link_identifier .  If   link_identifier isn't specified, the last  opened link is assumed.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_list_dbs">
    <description><![CDATA[   fbsql_list_dbs will return a result pointer  containing the databases available from the current fbsql  daemon. Use the fbsql_tablename function to  traverse this result pointer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[$link = fbsql_connect('localhost', 'myname', 'secret');
$db_list = fbsql_list_dbs($link);

while ($row = fbsql_fetch_object($db_list)) {
    echo $row->Database . "\n";
}]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_list_fields">
    <description><![CDATA[   fbsql_list_fields retrieves information  about the given tablename. Arguments are the database name and  the table name. A result pointer is returned which can be used  with fbsql_field_flags ,   fbsql_field_len ,   fbsql_field_name , and   fbsql_field_type .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = fbsql_connect('localhost', 'myname', 'secret');

$fields = fbsql_list_fields("database1", "table1", $link);
$columns = fbsql_num_fields($fields);

for ($i = 0; $i < $columns; $i++) {
    echo fbsql_field_name($fields, $i) . "\n";;
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FrontBase_8" />
      <property kind="parameter" name="table_name" type="string" required="1" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_list_tables">
    <description><![CDATA[    fbsql_list_tables takes a database name and  returns a result pointer much like the   fbsql_db_query function.  The   fbsql_tablename function should be used to  extract the actual table names from the result pointer.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_next_result">
    <description><![CDATA[  When sending more than one SQL statement to the server or  executing a stored procedure with multiple results will cause the  server to return multiple result sets.  This function will test  for additional results available form the server. If an  additional result set exists it will free the existing result set  and prepare to fetch the words from the new result set.  The  function will return if an additional result set was  available or otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_connect("localhost", "_SYSTEM", "secret");
    fbsql_select_db("MyDB", $link);
    $SQL = "Select * from table1; select * from table2;";
    $rs = fbsql_query($SQL, $link);
    do {
        while ($row = fbsql_fetch_row($rs)) {
        }
    } while (fbsql_next_result($rs));
    fbsql_free_result($rs);
    fbsql_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_num_fields">
    <description><![CDATA[    fbsql_num_fields returns the number of  fields in a result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_num_rows">
    <description><![CDATA[   fbsql_num_rows returns the number of rows in  a result set. This command is only valid for SELECT statements.  To retrieve the number of rows returned from a INSERT, UPDATE or  DELETE query, use fbsql_affected_rows .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$link = fbsql_connect("localhost", "username", "password"); 
fbsql_select_db("database", $link);

$result = fbsql_query("SELECT * FROM table1;", $link); 
$num_rows = fbsql_num_rows($result); 

echo "$num_rows Rows\n";

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_password">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_pconnect">
    <description><![CDATA[   Returns: A positive FrontBase persistent link identifier on  success, or on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="FrontBase_5" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_query">
    <description><![CDATA[    fbsql_query sends a query to the currently  active database on the server that's associated with the  specified link identifier.  If   link_identifier isn't specified, the last  opened link is assumed.  If no link is open, the function tries  to establish a link as if fbsql_connect was  called with no arguments, and use it.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = fbsql_query("SELECT * WHERE 1=1")
    or die ("Invalid query");
?>

      

<?php
$result = fbsql_query ("SELECT my_col FROM my_tbl")
    or die ("Invalid query");
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
      <property kind="parameter" name="batch_size" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_read_blob">
    <description><![CDATA[   Returns: A string containing the BLOB specified by blob_handle.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_pconnect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    $sql = "SELECT BLOB_COLUMN FROM BLOB_TABLE;";
    $rs = fbsql_query($sql, $link);
    $row_data = fbsql_fetch_row($rs);
    // $row_data[0] will now contain the blob data for the first row
    fbsql_free_result($rs);
    
    $rs = fbsql_query($sql, $link);
    fbsql_set_lob_mode($rs, FBSQL_LOB_HANDLE);
    $row_data = fbsql_fetch_row($rs);
    // $row_data[0] will now contain a handle to the BLOB data in the first row
    $blob_data = fbsql_read_blob($row_data[0]);
    fbsql_free_result($rs);
    
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FrontBase_2" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_read_clob">
    <description><![CDATA[   Returns: A string containing the CLOB specified by clob_handle.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = fbsql_pconnect("localhost", "_SYSTEM", "secret")
        or die("Could not connect");
    $sql = "SELECT CLOB_COLUMN FROM CLOB_TABLE;";
    $rs = fbsql_query($sql, $link);
    $row_data = fbsql_fetch_row($rs);
    // $row_data[0] will now contain the clob data for the first row
    fbsql_free_result($rs);
    
    $rs = fbsql_query($sql, $link);
    fbsql_set_lob_mode($rs, FBSQL_LOB_HANDLE);
    $row_data = fbsql_fetch_row($rs);
    // $row_data[0] will now contain a handle to the CLOB data in the first row
    $clob_data = fbsql_read_clob($row_data[0]);
    fbsql_free_result($rs);
    
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FrontBase_4" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_result">
    <description><![CDATA[   fbsql_result returns the contents of one  cell from a FrontBase result set.  The field argument can be the  field's offset, or the field's name, or the field's table dot  field's name (tabledname.fieldname).  If the column name has been  aliased ('select foo as bar from...'), use the alias instead of  the column name.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="row" type="int"  />
      <property kind="parameter" name="field" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_rollback">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_select_db">
    <description><![CDATA[    fbsql_select_db sets the current active  database on the server that's associated with the specified link  identifier.  If no link identifier is specified, the last opened  link is assumed.  If no link is open, the function will try to  establish a link as if fbsql_connect was  called, and use it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="database_name" type="string"  />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_set_lob_mode">
    <description><![CDATA[   Returns: on success, on error.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_8" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_set_password">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property kind="parameter" name="old_password" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_set_transaction">
    <properties>
      <property ref="ret_void" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="Locking" type="int" required="1" />
      <property kind="parameter" name="Isolation" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_start_db">
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
      <property ref="FrontBase_9" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_stop_db">
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_tablename">
    <description><![CDATA[    fbsql_tablename takes a result pointer  returned by the fbsql_list_tables function  as well as an integer index and returns the name of a table. The   fbsql_num_rows function may be used to  determine the number of tables in the result pointer.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
fbsql_connect("localhost", "_SYSTEM", "");
$result = fbsql_list_tables("wisconsin");
$i = 0;
while ($i < fbsql_num_rows($result)) {
    $tb_names[$i] = fbsql_tablename($result, $i);
    echo $tb_names[$i] . "<br />";
    $i++;
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="i" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_username">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Firebird/InterBase_18" />
    </properties>
    
  </element>
  <element kind="function" name="fbsql_warnings">
    <description><![CDATA[   Returns if warnings is turned on otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_1" />
    </properties>
    
  </element>
</group>
<group name="Function handling">
  <description><![CDATA[Function Handling Functions]]></description>
  <element kind="function" name="call_user_func">
    <description><![CDATA[  Call a user defined function given by the   function parameter.  Take the  following:  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Arrays_31" />
      <property ref="Classes/Objects_3" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="call_user_func_array">
    <description><![CDATA[  Call a user defined function given by   function , with  the parameters in param_arr .  For example:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function debug($var, $val) 
{
    echo "***DEBUGGING\nVARIABLE: $var\nVALUE:";
    if (is_array($val) || is_object($val) || is_resource($val)) {
        print_r($val);
    } else {
        echo "\n$val\n";
    }
    echo "***\n";
}

$c = mysql_connect();
$host = $_SERVER["SERVER_NAME"];

call_user_func_array('debug', array("host", $host));
call_user_func_array('debug', array("c", $c));
call_user_func_array('debug', array("_POST", $_POST));
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Arrays_31" />
      <property kind="parameter" name="param_arr" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="create_function">
    <description><![CDATA[  Creates an anonymous function from the parameters passed, and  returns a unique name for it. Usually the   args will be passed as a single quote  delimited string, and this is also recommended for the   code . The reason for using single quoted  strings, is to protect  the variable names from parsing, otherwise, if you use double  quotes there will be a need to escape the variable names, e.g.   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$newfunc = create_function('$a,$b', 'return "ln($a) + ln($b) = " . log($a * $b);');
echo "New anonymous function: $newfunc\n";
echo $newfunc(2, M_E) . "\n";
// outputs
// New anonymous function: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
?>

      

<?php
function process($var1, $var2, $farr) 
{
    for ($f=0; $f < count($farr); $f++) {
        echo $farr[$f]($var1, $var2) . "\n";
    }
}

// create a bunch of math functions
$f1 = 'if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; }';
$farr = array(
    create_function('$x,$y', 'return "some trig: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "a hypotenuse: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nUsing the first array of anonymous functions\n";
echo "parameters: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// now make a bunch of string processing functions
$garr = array(
    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '.
    'and \"$b\"\n** Look the same to me! (looking at the first 3 chars)";'),
    create_function('$a,$b', '; return "CRCs: " . crc32($a) . " , ".crc32(b);'),
    create_function('$a,$b', '; return "similar(a,b) = " . similar_text($a, $b, &$p) . "($p%)";')
    );
echo "\nUsing the second array of anonymous functions\n";
process("Twas brilling and the slithy toves", "Twas the night", $garr);
?>

      

<?php
$av = array("the ", "a ", "that ", "this ");
array_walk($av, create_function('&$v,$k', '$v = $v . "mango";'));
print_r($av); 
?>

      

<?php

$sv = array("small", "larger", "a big string", "it is a string thing");
print_r($sv);

?>

      

<?php

usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Classkit_3" />
      <property ref="Classkit_4" />
    </properties>
    
  </element>
  <element kind="function" name="func_get_arg">
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="arg_num" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="func_get_args">
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="func_num_args">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="function_exists">
    <description><![CDATA[  Checks the list of defined functions, both built-in (internal) and  user-defined, for function_name .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="APD_9" />
    </properties>
    
  </element>
  <element kind="function" name="get_defined_functions">
    <description><![CDATA[  This function returns an multidimensional array containing a list of  all defined functions, both built-in (internal) and user-defined. The  internal functions will be accessible via   , and the user defined ones using   (see example below).  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="register_shutdown_function">
    <description><![CDATA[  Multiple calls to register_shutdown_function can be  made, and each will be called in the same order as they were registered.  If you call exit within one registered shutdown  function, processing will stop completely and no other registered  shutdown functions will be called.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Arrays_31" />
      <property ref="Classes/Objects_3" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="register_tick_function">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// using a function as the callback
register_tick_function('my_function', true);

// using an object->method
$object = new my_class();
register_tick_function(array(&$object, 'my_method'), true);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Arrays_31" />
      <property ref="Arrays_25" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="unregister_tick_function">
    <properties>
      <property ref="ret_void" />
      <property ref="APD_9" />
    </properties>
    
  </element>
</group>
<group name="GMP">
  <description><![CDATA[GMP Functions]]></description>
  <element kind="function" name="gmp_abs">
    <description><![CDATA[  Returns absolute value of a .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$abs1 = gmp_abs("274982683358");
$abs2 = gmp_abs("-274982683358");

echo gmp_strval($abs1) . "\n";
echo gmp_strval($abs2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="a" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_add">
    <description><![CDATA[  Add two GMP numbers. The result will be a GMP number representing  the sum of the arguments.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sum = gmp_add("123456789012345", "76543210987655");
echo gmp_strval($sum) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property kind="parameter" name="b" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_and">
    <description><![CDATA[  Calculates logical AND of two GMP numbers.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$and1 = gmp_and("0xfffffffff4", "0x4");
$and2 = gmp_and("0xfffffffff4", "0x8");
echo gmp_strval($and1) . "\n";
echo gmp_strval($and2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_clrbit">
    <description><![CDATA[  Clears (sets to 0) bit index in   a . The index starts at 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = gmp_init("0xff");
gmp_clrbit($a, 0); // index starts at 0, least significant bit
echo gmp_strval($a) . "\n";
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="GMP_1" />
      <property ref="DOM_24" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_cmp">
    <description><![CDATA[  Returns a positive value if , zero if   and a negative value if .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$cmp1 = gmp_cmp("1234", "1000"); // greater than
$cmp2 = gmp_cmp("1000", "1234"); // less than
$cmp3 = gmp_cmp("1234", "1234"); // equal to

echo "$cmp1 $cmp2 $cmp3\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_com">
    <description><![CDATA[  Returns the one's complement of a .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$com = gmp_com("1234");
echo gmp_strval($com) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_div_q">
    <description><![CDATA[  Divides a by b and  returns the integer result. The result rounding is defined by the   round , which can have the following  values:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$div1 = gmp_div_q("100", "5");
echo gmp_strval($div1) . "\n";

$div2 = gmp_div_q("1", "3");
echo gmp_strval($div2) . "\n";

$div3 = gmp_div_q("1", "3", GMP_ROUND_PLUSINF);
echo gmp_strval($div3) . "\n";

$div4 = gmp_div_q("-1", "4", GMP_ROUND_PLUSINF);
echo gmp_strval($div4) . "\n";

$div5 = gmp_div_q("-1", "4", GMP_ROUND_MINUSINF);
echo gmp_strval($div5) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
      <property kind="parameter" name="round" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="gmp_div_qr">
    <description><![CDATA[  The function divides n by   d and returns array, with the first  element being (the integer result of the  division) and the second being  (the remainder of the division).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = gmp_init("0x41682179fbf5");
$res = gmp_div_qr($a, "0xDEFE75");
printf("Result is: q - %s, r - %s", 
       gmp_strval($res[0]), gmp_strval($res[1]));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="n" type="resource" required="1" />
      <property kind="parameter" name="d" type="resource" required="1" />
      <property ref="GMP_3" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_div_r">
    <description><![CDATA[  Calculates remainder of the integer division of   n by d . The  remainder has the sign of the n argument,  if not zero.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$div = gmp_div_r("105", "20");
echo gmp_strval($div) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_4" />
      <property ref="GMP_5" />
      <property ref="GMP_3" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_divexact">
    <description><![CDATA[  Divides n by d ,  using fast "exact division" algorithm. This function produces  correct results only when it is known in advance that   d divides n .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$div1 = gmp_divexact("10", "2");
echo gmp_strval($div1) . "\n";

$div2 = gmp_divexact("10", "3"); // bogus result
echo gmp_strval($div2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_4" />
      <property ref="GMP_5" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_fact">
    <description><![CDATA[  Calculates factorial ( ) of a .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fact1 = gmp_fact(5); // 5 * 4 * 3 * 2 * 1
echo gmp_strval($fact1) . "\n";

$fact2 = gmp_fact(50); // 50 * 49 * 48, ... etc
echo gmp_strval($fact2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="a" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_gcd">
    <description><![CDATA[  Calculate greatest common divisor of a and   b . The result is always positive even if  either of, or both, input operands are negative.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$gcd = gmp_gcd("12", "21");
echo gmp_strval($gcd) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_gcdext">
    <description><![CDATA[  Calculates g, s, and t, such that , where gcd is the greatest common divisor. Returns  an array with respective elements g, s and t.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Solve the equation a*s + b*t = g
// where a = 12, b = 21, g = gcd(12, 21) = 3
$a = gmp_init(12);
$b = gmp_init(21);
$g = gmp_gcd($a, $b);
$r = gmp_gcdext($a, $b);

$check_gcd = (gmp_strval($g) == gmp_strval($r['g']));
$eq_res = gmp_add(gmp_mul($a, $r['s']), gmp_mul($b, $r['t']));
$check_res = (gmp_strval($g) == gmp_strval($eq_res));

if ($check_gcd && $check_res) {
    $fmt = "Solution: %d*%d + %d*%d = %d\n";
    printf($fmt, gmp_strval($a), gmp_strval($r['s']), gmp_strval($b),
    gmp_strval($r['t']), gmp_strval($r['g']));
} else {
    echo "Error while solving the equation\n";
}
    
// output: Solution: 12*2 + 21*-1 = 3
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_hamdist">
    <description><![CDATA[  Returns the hamming distance between a and   b . Both operands should be non-negative.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$ham1 = gmp_init("1001010011", 2);
$ham2 = gmp_init("1011111100", 2);
echo gmp_hamdist($ham1, $ham2) . "\n";

/* hamdist is equivilent to: */
echo gmp_popcount(gmp_xor($ham1, $ham2)) . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_init">
    <description><![CDATA[  Creates a GMP number from an integer or string. String  representation can be decimal or hexadecimal. In the latter case,  the string should start with .  Optional parameter base is available since  PHP 4.1.0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = gmp_init(123456);
$b = gmp_init("0xFFFFDEBACDFEDF7200");
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="number" type="mixed" required="1" />
      <property kind="parameter" name="base" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="gmp_intval">
    <description><![CDATA[  This function allows to convert GMP number to integer.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// displays correct result
echo gmp_intval("2147483647") . "\n";

// displays wrong result, above PHP integer limit
echo gmp_intval("2147483648") . "\n";

// displays correct result
echo gmp_strval("2147483648") . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="gmpnumber" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_invert">
    <description><![CDATA[  Computes the inverse of a modulo   b . Returns if an inverse does not  exist.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo gmp_invert("5", "10"); // no inverse, outputs nothing, result is FALSE
$invert = gmp_invert("5", "11");
echo gmp_strval($invert) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_jacobi">
    <description><![CDATA[  Computes   of a and   p . p should be odd  and must be positive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo gmp_jacobi("1", "3") . "\n";
echo gmp_jacobi("2", "3") . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
      <property kind="parameter" name="p" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_legendre">
    <description><![CDATA[  Compute the   of a and   p . p should be odd  and must be positive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo gmp_legendre("1", "3") . "\n";
echo gmp_legendre("2", "3") . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
      <property ref="GMP_10" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_mod">
    <description><![CDATA[  Calculates n modulo   d . The result is always non-negative, the  sign of d is ignored.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mod = gmp_mod("8", "3");
echo gmp_strval($mod) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_4" />
      <property ref="GMP_5" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_mul">
    <description><![CDATA[  Multiplies a by b  and returns the result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mul = gmp_mul("12345678", "2000");
echo gmp_strval($mul) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_neg">
    <description><![CDATA[  Returns - a .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$neg1 = gmp_neg("1"); 
echo gmp_strval($neg1) . "\n";
$neg2 = gmp_neg("-1");
echo gmp_strval($neg2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_or">
    <description><![CDATA[  Calculates logical inclusive OR of two GMP numbers.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$or1 = gmp_or("0xfffffff2", "4");
echo gmp_strval($or1, 16) . "\n";
$or2 = gmp_or("0xfffffff2", "2");
echo gmp_strval($or2, 16) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_perfect_square">
    <description><![CDATA[  Returns if a is a perfect square,   otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// 3 * 3, perfect square
var_dump(gmp_perfect_square("9"));

// not a perfect square
var_dump(gmp_perfect_square("7"));

// 1234567890 * 1234567890, perfect square
var_dump(gmp_perfect_square("1524157875019052100"));
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="GMP_1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_popcount">
    <description><![CDATA[  Return the population count of a .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pop1 = gmp_init("10000101", 2); // 3 1's
echo gmp_popcount($pop1) . "\n";
$pop2 = gmp_init("11111110", 2); // 7 1's
echo gmp_popcount($pop2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_pow">
    <description><![CDATA[  Raise base into power   exp . The case of 0^0 yields  1. exp cannot be negative.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pow1 = gmp_pow("2", 31);
echo gmp_strval($pow1) . "\n";
$pow2 = gmp_pow("0", 0);
echo gmp_strval($pow2) . "\n";
$pow3 = gmp_pow("2", -1); // Negative exp, generates warning
echo gmp_strval($pow3) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="base" type="resource" required="1" />
      <property kind="parameter" name="exp" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_powm">
    <description><![CDATA[  Calculate ( base raised into power   exp ) modulo mod . If   exp is negative, result is undefined.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pow1 = gmp_powm("2", "31", "2147483649");
echo gmp_strval($pow1) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_11" />
      <property kind="parameter" name="exp" type="resource" required="1" />
      <property kind="parameter" name="mod" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_prob_prime">
    <description><![CDATA[  If this function returns 0, a is  definitely not prime. If it returns 1, then   a is "probably" prime.  If it returns 2,  then a is surely prime. Reasonable values  of reps vary from 5 to 10 (default being  10); a higher value lowers the probability for a non-prime to  pass as a "probable" prime.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// definitely not a prime
echo gmp_prob_prime("6") . "\n";

// probably a prime
echo gmp_prob_prime("1111111111111111111") . "\n";

// definitely a prime
echo gmp_prob_prime("11") . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
      <property kind="parameter" name="reps" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="gmp_random">
    <description><![CDATA[  Generate a random number. The number will be between  zero and the number of bits per limb multiplied by   limiter . If limiter  is negative, negative numbers are generated.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$rand1 = gmp_random(1); // random number from 0 to 1 * bits per limb
$rand2 = gmp_random(2); // random number from 0 to 2 * bits per limb

echo gmp_strval($rand1) . "\n";
echo gmp_strval($rand2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="limiter" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_scan0">
    <description><![CDATA[  Scans a , starting with bit   start , towards more significant bits,  until the first clear bit is found. Returns the index of the  found bit. The index starts from 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// "0" bit is found at position 3. index starts at 0
$s1 = gmp_init("10111", 2);
echo gmp_scan0($s1, 0) . "\n";

// "0" bit is found at position 7. index starts at 5
$s2 = gmp_init("101110000", 2);
echo gmp_scan0($s2, 5) . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
      <property kind="parameter" name="start" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_scan1">
    <description><![CDATA[  Scans a , starting with bit   start , towards more significant bits,  until the first set bit is found. Returns the index of the found  bit. If no set bit is found, -1 is returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// "1" bit is found at position 3. index starts at 0
$s1 = gmp_init("01000", 2);
echo gmp_scan1($s1, 0) . "\n";

// "1" bit is found at position 9. index starts at 5
$s2 = gmp_init("01000001111", 2);
echo gmp_scan1($s2, 5) . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
      <property ref="GMP_17" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_setbit">
    <description><![CDATA[  Sets bit index in   a . set_clear  defines if the bit is set to 0 or 1. By default the bit is set to  1. Index starts at 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = gmp_init("0xfd");
gmp_setbit($a, 1); // index starts at 0
echo gmp_strval($a) . "\n";
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="GMP_1" />
      <property ref="DOM_24" />
      <property kind="parameter" name="set_clear" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="gmp_sign">
    <description><![CDATA[  Returns 1 if a is positive,  -1 if a is negative,  and 0 if a is zero.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// positive
echo gmp_sign("500") . "\n";

// negative
echo gmp_sign("-500") . "\n";

// zero
echo gmp_sign("0") . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="GMP_1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_sqrt">
    <description><![CDATA[  Calculates square root of a and returns the  integer portion of the result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sqrt1 = gmp_sqrt("9");
$sqrt2 = gmp_sqrt("7");
$sqrt3 = gmp_sqrt("1524157875019052100");

echo gmp_strval($sqrt1) . "\n";
echo gmp_strval($sqrt2) . "\n";
echo gmp_strval($sqrt3) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_sqrtrem">
    <description><![CDATA[  Returns array where first element is the integer square root of   a (see also   gmp_sqrt ), and the second is the remainder  (i.e., the difference between a and the  first element squared).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
list($sqrt1, $sqrt1rem) = gmp_sqrtrem("9");
list($sqrt2, $sqrt2rem) = gmp_sqrtrem("7");
list($sqrt3, $sqrt3rem) = gmp_sqrtrem("1048576");

echo gmp_strval($sqrt1) . ", " . gmp_strval($sqrt1rem) . "\n";     
echo gmp_strval($sqrt2) . ", " . gmp_strval($sqrt2rem) . "\n";     
echo gmp_strval($sqrt3) . ", " . gmp_strval($sqrt3rem) . "\n";     
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="GMP_1" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_strval">
    <description><![CDATA[  Convert GMP number to string representation in base   base . The default base is 10.  Allowed  values for the base are from 2 to 36.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = gmp_init("0x41682179fbf5");
printf("Decimal: %s, 36-based: %s", gmp_strval($a), gmp_strval($a,36));
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="GMP_9" />
      <property ref="GMP_8" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_sub">
    <description><![CDATA[  Subtracts b from a  and returns the result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sub = gmp_sub("281474976710656", "4294967296"); // 2^48 - 2^32
echo gmp_strval($sub) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
  <element kind="function" name="gmp_xor">
    <description><![CDATA[  Calculates logical exclusive OR (XOR) of two GMP numbers.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$xor1 = gmp_init("1101101110011101", 2);
$xor2 = gmp_init("0110011001011001", 2);

$xor3 = gmp_xor($xor1, $xor2);

echo gmp_strval($xor3, 2) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="GMP_1" />
      <property ref="GMP_2" />
    </properties>
    
  </element>
</group>
<group name="HTTP">
  <description><![CDATA[HTTP Functions]]></description>
  <element kind="function" name="header">
    <description><![CDATA[   header is used to send raw   headers.  See the for more  information on headers.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Filesystem_16" />
      <property kind="parameter" name="replace" type="bool"  />
      <property kind="parameter" name="http_response_code" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="headers_list">
    <description><![CDATA[    this will output :  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* setcookie() will add a response header on its own */
setcookie('foo', 'bar');

/* Define a custom response header
   This will be ignored by most clients */
header("X-Sample-Test: foo");

/* Specify plain text content in our response */
header('Content-type: text/plain');

/* What headers are going to be sent? */
var_dump(headers_list());

?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="headers_sent">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// If no headers are sent, send one
if (!headers_sent()) {
    header('Location: http://www.example.com/');
    exit;
}
  
// An example using the optional file and line parameters, as of PHP 4.3.0
// Note that $filename and $linenum are passed in for later use.
// Do not assign them values beforehand.
if (!headers_sent($filename, $linenum)) {
    header('Location: http://www.example.com/');
    exit;

// You would most likely trigger an error here.
} else {

    echo "Headers already sent in $filename on line $linenum\n" .
          "Cannot redirect, for now please click this <a " .
          "href=\"http://www.example.com\">link</a> instead\n";
    exit;
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="file" type="string"  />
      <property kind="parameter" name="line" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="setcookie">
    <description><![CDATA[   setcookie defines a cookie to be sent along  with the rest of the HTTP headers. Like other headers, cookies  must be sent any output from your  script (this is a protocol restriction). This requires that you  place calls to this function prior to any output, including   and tags  as well as any whitespace. If output exists prior to calling this  function, setcookie will fail and return .  If setcookie successfully runs, it will return   . This does not indicate whether the user accepted the cookie.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$value = 'something from somewhere';

setcookie("TestCookie", $value);
setcookie("TestCookie", $value, time()+3600);  /* expire in 1 hour */
setcookie("TestCookie", $value, time()+3600, "/~rasmus/", ".example.com", 1);
?>

      

<?php
// set the expiration date to one hour ago
setcookie ("TestCookie", "", time() - 3600);
setcookie ("TestCookie", "", time() - 3600, "/~rasmus/", ".example.com", 1);
?>

      

<?php
// set the cookies
setcookie("cookie[three]", "cookiethree");
setcookie("cookie[two]", "cookietwo");
setcookie("cookie[one]", "cookieone");

// after the page reloads, print them out
if (isset($_COOKIE['cookie'])) {
    foreach ($_COOKIE['cookie'] as $name => $value) {
        echo "$name : $value <br />\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
      <property ref="DOM_10" />
      <property kind="parameter" name="expire" type="int"  />
      <property kind="parameter" name="path" type="string"  />
      <property kind="parameter" name="domain" type="string"  />
      <property kind="parameter" name="secure" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="setrawcookie">
    <description><![CDATA[   setrawcookie is exactly the same as   setcookie except that the cookie value will not  be automatically urlencoded when sent to the browser.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
      <property ref="DOM_10" />
      <property ref="HTTP_5" />
      <property ref="HTTP_6" />
      <property ref="HTTP_7" />
      <property ref="HTTP_8" />
    </properties>
    
  </element>
</group>
<group name="Hyperwave">
  <description><![CDATA[Hyperwave Functions]]></description>
  <element kind="function" name="hw_array2objrec">
    <description><![CDATA[  Converts an object_array into an object record.  Multiple attributes like 'Title' in different languages are treated  properly.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="object_array" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_changeobject">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="link" type="int" required="1" />
      <property kind="parameter" name="objid" type="int" required="1" />
      <property kind="parameter" name="attributes" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_children">
    <description><![CDATA[  Returns an array of object ids. Each id  belongs to a child of the collection with ID   objectID .  The array contains all children both documents and collections.]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="connection" type="int" required="1" />
      <property kind="parameter" name="objectID" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_childrenobj">
    <description><![CDATA[  Returns an array of object records. Each object record  belongs to a child of the collection with ID   objectID .  The array contains all children both documents and collections.]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_close">
    <description><![CDATA[  Returns if connection is not a valid connection index,  otherwise .  Closes down the connection to a Hyperwave server  with the given connection index.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
    </properties>
    
  </element>
  <element kind="function" name="hw_connect">
    <description><![CDATA[  Opens a connection to a Hyperwave server and returns a connection  index on success, or if the connection  could not be made. Each of the arguments should be a quoted string,  except for the port number. The username and   password arguments are  optional and can be left out. In such a case no identification with  the server will be done. It is similar to identify as user anonymous.  This function returns a connection  index that is needed by other Hyperwave functions. You can have  multiple connections open at once. Keep in mind, that the password  is not encrypted.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FTP_4" />
      <property ref="APD_8" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="hw_connection_info">
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_2" />
    </properties>
    
  </element>
  <element kind="function" name="hw_cp">
    <description><![CDATA[  Copies the objects with object ids as specified in the second  parameter to the collection  with the id destination id .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="object_id_array" type="array" required="1" />
      <property kind="parameter" name="destination_id" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_deleteobject">
    <description><![CDATA[  Deletes the object with the given object id in the second  parameter. It will delete all instances of the object.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="object_to_delete" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_docbyanchor">
    <description><![CDATA[  Returns an th object id of the document to  which anchorID belongs.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="anchorID" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_docbyanchorobj">
    <description><![CDATA[  Returns an th object record of the document to  which anchorID belongs.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_10" />
    </properties>
    
  </element>
  <element kind="function" name="hw_document_attributes">
    <description><![CDATA[  Returns the object record of the document.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="hw_document" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_document_bodytag">
    <description><![CDATA[  Returns the BODY tag of the document. If the document is an HTML  document the BODY tag should be printed before the document.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_11" />
      <property ref="Arrays_46" />
    </properties>
    
  </element>
  <element kind="function" name="hw_document_content">
    <description><![CDATA[  Returns the content of the document. If the document is an HTML  document the content is everything after the BODY tag. Information  from the HEAD and BODY tag is in the stored in the object record.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_11" />
    </properties>
    
  </element>
  <element kind="function" name="hw_document_setcontent">
    <description><![CDATA[  Sets or replaces the content of the document. If the document is an HTML  document the content is everything after the BODY tag. Information  from the HEAD and BODY tag is in the stored in the object record.  If you provide this information in the content of the document too,  the Hyperwave server will change the object record accordingly when  the document is inserted. Probably not a very good idea.  If this functions fails the document will retain its old content.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_11" />
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="hw_document_size">
    <description><![CDATA[  Returns the size in bytes of the document.]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_11" />
    </properties>
    
  </element>
  <element kind="function" name="hw_dummy">
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_2" />
      <property kind="parameter" name="id" type="int" required="1" />
      <property kind="parameter" name="msgid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_edittext">
    <description><![CDATA[  Uploads the text document to the server. The object record  of the document may not be modified while the document  is edited.  This function will only works for pure text documents. It will  not open a special data connection and therefore blocks the  control connection during the transfer.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_11" />
    </properties>
    
  </element>
  <element kind="function" name="hw_error">
    <description><![CDATA[  Returns the last error number. If the return value is 0 no error has  occurred. The error relates to the last command.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
    </properties>
    
  </element>
  <element kind="function" name="hw_errormsg">
    <description><![CDATA[  Returns a string containing the last error message or 'No Error'. If  is returned, this function failed.  The message relates to the last command.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_5" />
    </properties>
    
  </element>
  <element kind="function" name="hw_free_document">
    <description><![CDATA[  Frees the memory occupied by the Hyperwave document.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_11" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getanchors">
    <description><![CDATA[  Returns an array of object ids with anchors of the document  with object ID objectID .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getanchorsobj">
    <description><![CDATA[  Returns an array of object records with anchors of the document  with object ID objectID .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getandlock">
    <description><![CDATA[  Returns the object record for the object with ID   objectID .  It will also lock the object, so other users cannot access  it until it is unlocked.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getchildcoll">
    <description><![CDATA[  Returns an array of object ids. Each object ID  belongs to a child collection of the collection with ID   objectID . The function will not  return child documents.]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getchildcollobj">
    <description><![CDATA[  Returns an array of object records. Each object records  belongs to a child collection of the collection with ID   objectID . The function will not return  child documents.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getchilddoccoll">
    <description><![CDATA[  Returns array of object ids for child documents of a collection.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getchilddoccollobj">
    <description><![CDATA[  Returns an array of object records for child documents of a collection.]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getobject">
    <description><![CDATA[  Returns the object record for the object with ID   objectID if the second parameter is an integer.  If the second parameter is an array of integer the function will  return an array of object records. In such a case the last  parameter is also evaluated which is a query string.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="objectID" type="mixed" required="1" />
      <property kind="parameter" name="query" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="hw_getobjectbyquery">
    <description><![CDATA[  Searches for objects on the whole server and returns an array of  object ids. The maximum number of matches is limited to   max_hits . If max_hits  is set to -1 the maximum number of matches is unlimited.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="max_hits" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getobjectbyquerycoll">
    <description><![CDATA[  Searches for objects in collection with ID   objectID and returns an array of  object ids. The maximum number of matches is limited to   max_hits .  If max_hits  is set to -1 the maximum number of matches is unlimited.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Hyperwave_16" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getobjectbyquerycollobj">
    <description><![CDATA[  Searches for objects in collection with ID   objectID and returns an array of  object records. The maximum number of matches is limited to   max_hits .  If max_hits  is set to -1 the maximum number of matches is unlimited.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Hyperwave_16" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getobjectbyqueryobj">
    <description><![CDATA[  Searches for objects on the whole server and returns an array of  object records. The maximum number of matches is limited to   max_hits . If max_hits  is set to -1 the maximum number of matches is unlimited.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Hyperwave_16" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getparents">
    <description><![CDATA[  Returns an indexed array of object ids. Each object id belongs to  a parent of the object with ID objectID .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getparentsobj">
    <description><![CDATA[  Returns an indexed array of object records plus an associated array with statistical  information about the object records. The associated array is the  last entry of the returned array. Each object record belongs to  a parent of the object with ID objectID .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getrellink">
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_2" />
      <property kind="parameter" name="rootid" type="int" required="1" />
      <property kind="parameter" name="sourceid" type="int" required="1" />
      <property kind="parameter" name="destid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getremote">
    <description><![CDATA[  Returns a remote document. Remote documents in Hyperwave notation  are documents retrieved from an external source. Common remote  documents are for example external web pages or queries in  a database.  In order to be able to access external sources  through remote documents Hyperwave introduces the HGI (Hyperwave  Gateway Interface) which is similar to the CGI. Currently, only  ftp, http-servers and some databases can be accessed by the HGI.  Calling hw_getremote returns the document from  the external source.  If you want to use this function you should be  very familiar with HGIs.  You should also consider to use PHP instead  of Hyperwave to access external sources. Adding database support  by a Hyperwave gateway should be more difficult than doing it in PHP.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getremotechildren">
    <description><![CDATA[  Returns the children of a remote document. Children of a remote  document are remote documents itself.  This makes sense  if a database query has to be narrowed and is explained in  Hyperwave Programmers' Guide. If the number of children is 1 the  function will return the document itself formatted by the Hyperwave  Gateway Interface (HGI). If the number of children  is greater than 1 it will return an array of object record with  each maybe the input value for another call to   hw_getremotechildren . Those object records are  virtual and do not exist in the Hyperwave server, therefore they  do not have a valid object ID. How exactly such an object record  looks like is up to the HGI.  If you want to use this function you should be very familiar with HGIs.  You should also consider to use PHP instead of Hyperwave to access  external  sources. Adding database support by a Hyperwave gateway should be more  difficult than doing it in PHP.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="object_record" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_getsrcbydestobj">
    <description><![CDATA[  Returns the object records of all anchors pointing to the object with ID   objectID . The object can either be a document  or an anchor of type destination.]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_gettext">
    <description><![CDATA[  Returns the document with object ID   objectID . If the document  has anchors which can be inserted, they will be inserted already.  The optional parameter rootID/prefix can  be a string or an integer. If it is an integer it determines  how links are inserted  into the document. The default is 0 and will result in links that  are constructed from the name of the link's destination object. This  is useful for web applications. If a link points to an object with  name 'internet_movie' the HTML link will be   < A HREF="/internet_movie">. The actual location of the source and  destination object in the document hierarchy is disregarded. You  will have to set up your web browser, to rewrite that URL to for  example '/my_script.php3/internet_movie'. 'my_script.php3' will  have to evaluate $PATH_INFO and retrieve the document.  All links will have the prefix '/my_script.php3/'. If you do not  want this you can set the optional parameter   rootID/prefix to any prefix which  is used instead. Is this case it has to be a string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
      <property kind="parameter" name="rootID/prefix" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="hw_getusername">
    <description><![CDATA[  Returns the username of the connection.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_5" />
    </properties>
    
  </element>
  <element kind="function" name="hw_identify">
    <description><![CDATA[  Identifies as user with username and   password . Identification  is only valid for the current session. I do not thing this  function will be needed very often. In most cases it will  be easier to identify with the opening of the connection.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_2" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="hw_incollections">
    <description><![CDATA[  Checks whether a set of objects (documents or collections)  specified by the object_id_array is part of  the collections listed in collection_id_array .  When the fourth parameter return_collections is 0,  the subset of object ids that is part of the collections (i.e.,  the documents or collections that are children of one or more  collections of collection ids or their subcollections, recursively)  is returned as an array. When the fourth parameter is 1, however, the  set of collections that have one or more objects of this subset as  children are returned as an array. This option allows a client to,  e.g., highlight the part of the collection hierarchy that contains  the matches of a previous query, in a graphical overview.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_7" />
      <property kind="parameter" name="collection_id_array" type="array" required="1" />
      <property kind="parameter" name="return_collections" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_info">
    <description><![CDATA[  Returns information about the current connection. The returned string  has the following format: < Serverstring > , < Host > ,   < Port > , < Username > , < Port of Client > ,   < Byte swapping >  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_5" />
    </properties>
    
  </element>
  <element kind="function" name="hw_inscoll">
    <description><![CDATA[  Inserts a new collection with attributes as in   object_array into  collection with object ID objectID .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
      <property ref="Hyperwave_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_insdoc">
    <description><![CDATA[  Inserts a new document with attributes as in   object_record into collection with object ID   parentID . This function inserts either  an object record only or an object record and a pure ascii text in   text if text is given.  If you want to insert a general document of any kind use   hw_insertdocument instead.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="parentID" type="int" required="1" />
      <property ref="Hyperwave_20" />
      <property kind="parameter" name="text" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="hw_insertanchors">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="hwdoc" type="int" required="1" />
      <property kind="parameter" name="anchorecs" type="array" required="1" />
      <property kind="parameter" name="dest" type="array" required="1" />
      <property kind="parameter" name="urlprefixes" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="hw_insertdocument">
    <description><![CDATA[  Uploads a document into the collection with   parent_id .  The document has to be created before with   hw_new_document . Make sure that  the object record of the new document contains at least  the attributes: Type, DocumentType, Title and Name. Possibly  you also want to set the MimeType. The functions returns the  object id of the new document or .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="parent_id" type="int" required="1" />
      <property ref="Hyperwave_11" />
    </properties>
    
  </element>
  <element kind="function" name="hw_insertobject">
    <description><![CDATA[  Inserts an object into the server. The object can be  any valid hyperwave object. See the HG-CSP documentation  for a detailed information on how the parameters have to be.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="object_rec" type="string" required="1" />
      <property kind="parameter" name="parameter" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_mapid">
    <description><![CDATA[  Maps a global object id on any hyperwave server, even those  you did not connect to with hw_connect ,  onto a virtual object id. This virtual object id can then be  used as any other object id, e.g. to obtain the object record  with hw_getobject . The server id is the  first part of the global object id (GOid) of the object which  is actually the IP number as an integer.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="server_id" type="int" required="1" />
      <property kind="parameter" name="object_id" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_modifyobject">
    <description><![CDATA[  This command allows to remove, add, or modify individual attributes  of an object record.  The object is specified by the Object ID   object_to_change . The first array   remove is a list of attributes to remove.  The second array add is a list of attributes  to add. In order to modify an attribute one will have to remove  the old one and add a new one. hw_modifyobject  will always remove the attributes before it adds attributes unless  the value of the attribute to remove is not a string or array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
       // $connect is an existing connection to the Hyperwave server
       // $objid is the ID of the object to modify
       $remarr = array("Name" => "books");
       $addarr = array("Name" => "articles");
       $hw_modifyobject($connect, $objid, $remarr, $addarr);
?>

      

<?php
       // $connect is an existing connection to the Hyperwave server
       // $objid is the ID of the object to modify
       $remarr = array("Name" => 0);
       $addarr = array("Name" => "articles");
       $hw_modifyobject($connect, $objid, $remarr, $addarr);
?>

      

<?php
       $remarr = array("Title" => "en:Books");
       $addarr = array("Title" => "en:Articles");
       $hw_modifyobject($connect, $objid, $remarr, $addarr);
?>

      

<?php
       $remarr = array("Title" => array("en" => "Books"));
       $addarr = array("Title" => array("en" => "Articles", "ge"=>"Artikel"));
       $hw_modifyobject($connect, $objid, $remarr, $addarr);
?>

      

<?php
       $remarr = array("Title" => "");
       $addarr = array("Title" => "en:Articles");
       $hw_modifyobject($connect, $objid, $remarr, $addarr);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property kind="parameter" name="object_to_change" type="int" required="1" />
      <property kind="parameter" name="remove" type="array" required="1" />
      <property kind="parameter" name="add" type="array" required="1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="hw_mv">
    <description><![CDATA[  Moves the objects with object ids as specified in the second  parameter from the collection with id source_id  to the collection with the id destination_id .  If the destination id is 0 the objects will  be unlinked from the source collection. If this is the last instance  of that object it will be deleted. If you want to delete all instances  at once, use hw_deleteobject .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_7" />
      <property kind="parameter" name="source_id" type="int" required="1" />
      <property ref="Hyperwave_8" />
    </properties>
    
  </element>
  <element kind="function" name="hw_new_document">
    <description><![CDATA[  Returns a new Hyperwave document with document data set to   document_data and object record set to   object_record . The length of the   document_data has to passed in   document_size This function does not  insert the document into the Hyperwave server.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_20" />
      <property kind="parameter" name="document_data" type="string" required="1" />
      <property kind="parameter" name="document_size" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_objrec2array">
    <description><![CDATA[  Converts an object_record into an object array.  The keys of the resulting array are the attributes names.  Multi-value attributes like 'Title' in different languages form its own  array. The keys of this array are the left part to the colon of the  attribute value. This left part must be two characters long.  Other multi-value attributes without a prefix form an indexed array.  If the optional parameter is missing the  attributes 'Title', 'Description'  and 'Keyword' are treated as language attributes and the attributes  'Group', 'Parent' and 'HtmlAttr' as non-prefixed multi-value attributes.  By passing an array holding the type for each attribute you can  alter this behaviour. The array is an associated array with the attribute  name as its key and the value being one of   or .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave_20" />
      <property kind="parameter" name="format" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="hw_output_document">
    <description><![CDATA[  Prints the document without the BODY tag.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_11" />
    </properties>
    
  </element>
  <element kind="function" name="hw_pconnect">
    <description><![CDATA[  Returns a connection index on success, or if the connection  could not be made.  Opens a persistent connection to a Hyperwave  server. Each of the arguments should be a quoted string,  except for the port number. The username  and password arguments are  optional and can be left out. In such a case no identification with  the server will be done. It is similar to identify as user anonymous.  This function returns a connection  index that is needed by other Hyperwave functions. You can have  multiple persistent connections open at once.]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FTP_4" />
      <property ref="APD_8" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="hw_pipedocument">
    <description><![CDATA[  Returns the Hyperwave document with object ID   objectID . If the document  has anchors which can be inserted, they will have been inserted already.  The document will be transferred via a special data connection which  does not block the control connection.]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
      <property kind="parameter" name="url_prefixes" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="hw_root">
    <description><![CDATA[  Returns the object ID of the hyperroot collection. Currently this  is always 0. The child collection of the hyperroot is the root  collection of the connected server.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="hw_setlinkroot">
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_2" />
      <property ref="Hyperwave_17" />
    </properties>
    
  </element>
  <element kind="function" name="hw_stat">
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave_2" />
    </properties>
    
  </element>
  <element kind="function" name="hw_unlock">
    <description><![CDATA[  Unlocks a document, so other users regain access.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
      <property ref="Hyperwave_6" />
    </properties>
    
  </element>
  <element kind="function" name="hw_who">
    <description><![CDATA[  Returns an array of users currently logged into the Hyperwave server.  Each entry in this array is an array itself containing the elements id,  name, system, onSinceDate, onSinceTime, TotalTime and self. 'self'  is 1 if this entry belongs to the user who initiated the request.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave_5" />
    </properties>
    
  </element>
</group>
<group name="Hyperwave API">
  <description><![CDATA[Hyperwave API Functions]]></description>
  <element kind="function" name="hw_api->checkin">
    <description><![CDATA[  This function checks in an object or a whole hierarchy of objects.  The parameters array contains the required element  'objectIdentifier' and the optional element 'version', 'comment', 'mode'  and  'objectQuery'. 'version' sets the version of the object. It consists of  the major and minor version separated by a period. If the version is not  set, the minor version is incremented. 'mode' can be one of the following  values:    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="parameter" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->checkout">
    <description><![CDATA[  This function checks out an object or a whole hierarchy of objects.  The parameters array contains the required element  'objectIdentifier' and the optional element 'version', 'mode'  and 'objectQuery'. 'mode' can be one of the following values:    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->children">
    <description><![CDATA[  Retrieves the children of a collection or the attributes of a document.  The children can be further filtered by specifying an object query.  The parameter array  contains the required elements 'objectIdentifier' and the optional  elements 'attributeSelector' and 'objectQuery'.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->content">
    <description><![CDATA[  This function returns the content of a document as an object of type   . The parameter array  contains the required elements 'objectidentifier' and the optional  element 'mode'. The mode can be one of the constants   ,   or   .   means to insert all  anchors even if the destination is not reachable.   tells   hw_api_content to insert only reachable links and   will lead to  document without any links.  ]]></description>
    <properties>
      <property kind="return" type="HW_API_Content" />	
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->copy">
    <description><![CDATA[  This function will make a physical copy including the content if it  exists and returns the new object or an error object.  The parameter array contains the  required elements 'objectIdentifier' and 'destinationParentIdentifier'.  The optional parameter is 'attributeSelector'`  ]]></description>
    <properties>
      <property kind="return" type="hw_api_object" />	
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->dbstat">
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->dcstat">
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->dstanchors">
    <description><![CDATA[  Retrieves all destination anchors of an object. The parameter array  contains  the required element 'objectIdentifier' and the optional elements  'attributeSelector' and 'objectQuery'.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->dstofsrcanchor">
    <description><![CDATA[  Retrieves the destination object pointed by the specified source anchors.  The destination object can either be a destination anchor or a whole  document. The parameters array contains the required element  'objectIdentifier' and the optional element 'attributeSelector'.  ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->find">
    <description><![CDATA[  This functions searches for objects either by executing a key or/and full  text query. The found objects can further be filtered by an optional  object query. They are sorted by their importance. The second search  operation is relatively slow and its result can be limited to a certain  number of hits. This allows to perform an incremental search, each  returning just a subset of all found documents, starting at a given  index. The parameter array contains the 'keyquery' or/and 'fulltextquery'  depending on who you would like to search. Optional parameters are  'objectquery', 'scope', 'languages' and 'attributeselector'. In case of  an incremental search the optional parameters 'startIndex',  numberOfObjectsToGet' and 'exactMatchUnit' can be passed.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->ftstat">
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->hwstat">
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->identify">
    <description><![CDATA[  Logs into the Hyperwave Server. The parameter array must contain the  elements 'username' and 'password'.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->info">
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->insert">
    <description><![CDATA[  Insert a new object. The object type can be user, group, document or  anchor. Depending on the type other object attributes has to be set.  The parameter array contains the required elements 'object' and 'content'  (if the object is a document) and the optional parameters 'parameters',  'mode' and 'attributeSelector'. The 'object' must contain all attributes  of the object. 'parameters' is an object as well holding further  attributes like the destination (attribute key is 'Parent'). 'content' is  the content of the document. 'mode' can be a  combination of the following flags:    ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->insertanchor">
    <description><![CDATA[  This function is a shortcut for hwapi_insert . It  inserts an object of type anchor and sets some of the attributes  required  for an anchor. The parameter array contains the required elements  'object' and 'documentIdentifier' and the optional elements  'destinationIdentifier', 'parameter', 'hint' and 'attributeSelector'.  The 'documentIdentifier'  specifies the document where the anchor shall be inserted. The target of  the anchor is set in 'destinationIdentifier' if it already exists. If the  target does not exists the element 'hint' has to be set to the name of  object which is supposed to be inserted later. Once it is inserted the  anchor target is resolved automatically.  ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->insertcollection">
    <description><![CDATA[  This function is a shortcut for hwapi_insert . It  inserts an object of type collection and sets some of the attributes  required  for a collection. The parameter array contains the required elements  'object' and 'parentIdentifier' and the optional elements  'parameter' and 'attributeSelector'. See   hwapi_insert for the meaning of each element.  ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->insertdocument">
    <description><![CDATA[  This function is a shortcut for hwapi_insert . It  inserts an object with content and sets some of the attributes required  for a document. The parameter array contains the required elements  'object', 'parentIdentifier' and 'content' and the optional elements  'mode', 'parameter' and 'attributeSelector'. See   hwapi_insert for the meaning of each element.  ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->link">
    <description><![CDATA[  Creates a link to an object. Accessing this link is like accessing the  object to links points to. The parameter array contains the required  elements 'objectIdentifier' and 'destinationParentIdentifier'.  'destinationParentIdentifier' is the target collection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->lock">
    <description><![CDATA[  Locks an object for exclusive editing by the user calling this function.  The object can be only unlocked by this user or the system user.  The  parameter array contains the required element 'objectIdentifier' and the  optional parameters 'mode' and 'objectquery'.  'mode' determines how an object is locked.   means,  an object is locked until it is unlocked.     is only valid for collection and locks all objects  within the collection and possible subcollections.   means, an  object is locked only as long as the session is valid.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->move">
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->object">
    <description><![CDATA[  This function retrieves the attribute information of an object of any  version. It will not return the document content. The parameter array  contains the required elements 'objectIdentifier' and the optional  elements 'attributeSelector' and 'version'.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function handle_error($error) 
{
  $reason = $error->reason(0);
  echo "Type: <b>";
  switch ($reason->type()) {
    case 0:
      echo "Error";
      break;
    case 1:
      echo "Warning";
      break;
    case 2:
      echo "Message";
      break;
  }
  echo "</b><br />\n";
  echo "Description: " . $reason->description("en") . "<br />\n";
}

function list_attr($obj) 
{
  echo "<table>\n";
  $count = $obj->count();
  for ($i=0; $i<$count; $i++) {
    $attr = $obj->attribute($i);
    printf("<tr><td align=\"right\" bgcolor=\"#c0c0c0\"><b>%s</b></td><td bgcolor=\"#F0F0F0\">%s</td></tr>\n",
             $attr->key(), $attr->value());
  }
  echo "</table>\n";
}

$hwapi = hwapi_hgcsp($g_config[HOSTNAME]);
$parms = array("objectIdentifier"=>"rootcollection", "attributeSelector"=>array("Title", "Name", "DocumentType"));
$root = $hwapi->object($parms);
if (get_class($root) == "HW_API_Error") {
  handle_error($root);
  exit;
}
list_attr($root);
?>]]></description>
      </property>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->objectbyanchor">
    <description><![CDATA[  This function retrieves an object the specified anchor belongs to.  The parameter array contains the required element 'objectIdentifier' and  the optional element 'attributeSelector'.  ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->parents">
    <description><![CDATA[  Retrieves the parents of an object. The parents can be further filtered by  specifying an object query. The parameter array  contains the required elements 'objectidentifier' and the  optional elements 'attributeselector' and 'objectquery'.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->remove">
    <description><![CDATA[  Removes an object from the specified parent. Collections  will be removed recursively. You can pass an optional object query to  remove only those objects which match the query. An object will be  deleted physically if it is the last instance. The parameter array  contains the required elements 'objectidentifier' and 'parentidentifier'.  If you want to remove a user or group 'parentidentifier' can be skipped.  The optional parameter 'mode' determines how the deletion is performed.  In normal mode the object will not be removed physically until all  instances are removed. In physical mode all instances of the object will  be deleted immediately. In removelinks mode all references  to and from the objects will be deleted as well. In nonrecursive the  deletion is not performed recursive. Removing a collection which is not  empty will cause an error.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->replace">
    <description><![CDATA[  Replaces the attributes and the content of an object The parameter array  contains the required elements 'objectIdentifier' and 'object' and  the optional parameters 'content', 'parameters', 'mode' and  'attributeSelector'. 'objectIdentifier' contains the object to be  replaced. 'object' contains the new object. 'content' contains the new  content. 'parameters' contain extra information for HTML documents.  HTML_Language is the letter abbreviation of the language of the title.  HTML_Base sets the base attribute of the HTML document. 'mode' can be a  combination of the following flags:    ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->setcommittedversion">
    <description><![CDATA[  Commits a version of a document. The committed version is the one which is  visible to users with read access. By default the last version is the  committed version.  ]]></description>
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->srcanchors">
    <description><![CDATA[  Retrieves all source anchors of an object. The parameter array contains  the required element 'objectIdentifier' and the optional elements  'attributeSelector' and 'objectQuery'.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->srcsofdst">
    <description><![CDATA[  Retrieves all the source anchors pointing to the specified destination.  The destination object can either be a destination anchor or a whole  document. The parameters array contains the required element  'objectIdentifier' and the optional element 'attributeSelector' and  'objectQuery'. The function returns an array of objects or an error.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->unlock">
    <description><![CDATA[  Unlocks a locked object. Only the user who has locked the object and the  system user may unlock an object. The parameter array contains the  required element 'objectIdentifier' and the optional parameters  'mode' and 'objectquery'. The meaning of 'mode' is the same as in  function hwapi_lock .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->user">
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api->userlist">
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_attribute">
    <description><![CDATA[  Creates a new instance of hw_api_attribute with the given name and value.  ]]></description>
    <properties>
      <property kind="return" type="HW_API_Attribute" />	
      <property kind="parameter" name="name" type="string"  />
      <property ref="DOM_10" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_attribute->key">
    <description><![CDATA[  Returns the name of the attribute.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_attribute->langdepvalue">
    <description><![CDATA[  Returns the value in the given language of the attribute.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="language" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_attribute->value">
    <description><![CDATA[  Returns the value of the attribute.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_attribute->values">
    <description><![CDATA[  Returns all values of the attribute as an array of strings.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_content">
    <description><![CDATA[  Creates a new content object from the string   content . The mimetype is set to   mimetype .  ]]></description>
    <properties>
      <property ref="ret_HW_API_Content" />
      <property ref="ClibPDF_7" />
      <property kind="parameter" name="mimetype" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_content->mimetype">
    <description><![CDATA[  Returns the mimetype of the content.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_content->read">
    <description><![CDATA[  Reads len bytes from the content into the given  buffer.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="buffer" type="string" required="1" />
      <property kind="parameter" name="len" type="integer" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_error->count">
    <description><![CDATA[  Returns the number of error reasons.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_error->reason">
    <description><![CDATA[  Returns the first error reason.  ]]></description>
    <properties>
      <property kind="return" type="HW_API_Reason" />	
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object">
    <properties>
      <property ref="ret_hw_api_object" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object->assign">
    <description><![CDATA[  Clones the attributes of an object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object->attreditable">
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object->count">
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object->insert">
    <description><![CDATA[  Adds an attribute to the object. Returns on success and otherwise   .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="attribute" type="HW_API_Attribute" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object->remove">
    <description><![CDATA[  Removes the attribute with the given name. Returns on success  and otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object->title">
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave API_1" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_object->value">
    <description><![CDATA[  Returns the value of the attribute with the given name or if an  error occurred.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_reason->description">
    <description><![CDATA[  Returns the description of a reason  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="hw_api_reason->type">
    <description><![CDATA[  Returns the type of a reason.  ]]></description>
    <properties>
      <property ref="ret_HW_API_Reason" />
    </properties>
    
  </element>
  <element kind="function" name="hwapi_hgcsp">
    <description><![CDATA[  Opens a connection to the Hyperwave server on host   hostname . The protocol used is HGCSP.  If you do not pass a port number, 418 is used.  ]]></description>
    <properties>
      <property kind="return" type="HW_API" />	
      <property kind="parameter" name="hostname" type="string" required="1" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
</group>
<group name="ICAP">
  <description><![CDATA[ICAP Functions [deprecated]]]></description>
  <element kind="function" name="icap_close">
    <description><![CDATA[   Closes the given icap stream.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="icap_stream" type="int" required="1" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="icap_create_calendar">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="stream_id" type="int" required="1" />
      <property kind="parameter" name="calendar" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="icap_delete_calendar">
    <properties>
      <property ref="ret_string" />
      <property ref="ICAP_2" />
      <property ref="ICAP_3" />
    </properties>
    
  </element>
  <element kind="function" name="icap_delete_event">
    <description><![CDATA[    icap_delete_event deletes the calendar event  specified by the uid .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ICAP_2" />
      <property kind="parameter" name="uid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="icap_fetch_event">
    <description><![CDATA[    icap_fetch_event fetches an event from the  calendar stream specified by event_id .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ICAP_2" />
      <property kind="parameter" name="event_id" type="int" required="1" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="icap_list_alarms">
    <description><![CDATA[  Returns an array of event ID's that has an alarm going off at the  given datetime.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ICAP_2" />
      <property kind="parameter" name="date" type="array" required="1" />
      <property kind="parameter" name="time" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="icap_list_events">
    <description><![CDATA[  Returns an array of event ID's that are between the two given  datetimes.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ICAP_2" />
      <property kind="parameter" name="begin_date" type="int" required="1" />
      <property kind="parameter" name="end_date" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="icap_open">
    <description><![CDATA[  Returns an ICAP stream on success, on error.]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ICAP_3" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property kind="parameter" name="options" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="icap_rename_calendar">
    <properties>
      <property ref="ret_string" />
      <property ref="ICAP_2" />
      <property kind="parameter" name="old_name" type="string" required="1" />
      <property ref="APD_13" />
    </properties>
    
  </element>
  <element kind="function" name="icap_reopen">
    <properties>
      <property ref="ret_int" />
      <property ref="ICAP_2" />
      <property ref="ICAP_3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="icap_snooze">
    <description><![CDATA[    icap_snooze turns on an alarm for a  calendar event specified by the uid .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ICAP_2" />
      <property ref="ICAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="icap_store_event">
    <description><![CDATA[    icap_store_event Stores an event into  an ICAP calendar.  An event object consists of:    ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ICAP_2" />
      <property kind="parameter" name="event" type="object" required="1" />
    </properties>
    
  </element>
</group>
<group name="IIS Functions">
  <description><![CDATA[IIS Administration Functions]]></description>
  <element kind="function" name="iis_add_server">
    <properties>
      <property ref="ret_int" />
      <property ref="Directories_3" />
      <property kind="parameter" name="comment" type="string" required="1" />
      <property kind="parameter" name="server_ip" type="string" required="1" />
      <property ref="APD_8" />
      <property kind="parameter" name="host_name" type="string" required="1" />
      <property kind="parameter" name="rights" type="int" required="1" />
      <property kind="parameter" name="start_server" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_get_dir_security">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="server_instance" type="int" required="1" />
      <property kind="parameter" name="virtual_path" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_get_script_map">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
      <property ref="IIS Functions_7" />
      <property kind="parameter" name="script_extension" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_get_server_by_comment">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_get_server_by_path">
    <description><![CDATA[  Each virtual server in IIS is associated with an instance number.   iis_get_server_by_path Finds the instance number  from the actual path to the root directory.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="iis_get_server_rights">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
      <property ref="IIS Functions_7" />
    </properties>
    
  </element>
  <element kind="function" name="iis_get_service_state">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="service_id" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_remove_server">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
    </properties>
    
  </element>
  <element kind="function" name="iis_set_app_settings">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
      <property ref="IIS Functions_7" />
      <property kind="parameter" name="application_scope" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_set_dir_security">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
      <property ref="IIS Functions_7" />
      <property kind="parameter" name="directory_flags" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_set_script_map">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
      <property ref="IIS Functions_7" />
      <property ref="IIS Functions_8" />
      <property kind="parameter" name="engine_path" type="string" required="1" />
      <property kind="parameter" name="allow_scripting" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iis_set_server_rights">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
      <property ref="IIS Functions_7" />
      <property ref="IIS Functions_11" />
    </properties>
    
  </element>
  <element kind="function" name="iis_start_server">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
    </properties>
    
  </element>
  <element kind="function" name="iis_start_service">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_9" />
    </properties>
    
  </element>
  <element kind="function" name="iis_stop_server">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_6" />
    </properties>
    
  </element>
  <element kind="function" name="iis_stop_service">
    <properties>
      <property ref="ret_int" />
      <property ref="IIS Functions_9" />
    </properties>
    
  </element>
</group>
<group name="IMAP">
  <description><![CDATA[IMAP, POP3 and NNTP Functions]]></description>
  <element kind="function" name="imap_8bit">
    <description><![CDATA[   Convert an 8bit string to a quoted-printable string (according to   , section  6.7).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="imap_alerts">
    <description><![CDATA[  This function returns an array of all of the IMAP alert messages  generated since the last imap_alerts call,  or the beginning of the page. When   imap_alerts is called, the alert stack is  subsequently cleared. The IMAP specification requires that these  messages be passed to the user.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="imap_append">
    <description><![CDATA[   imap_append appends a string message to the  specified mailbox mbox . If the optional   options is specified, writes the   options to that mailbox also.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$stream = imap_open("{your.imap.host}INBOX.Drafts", "username", "password");

$check = imap_check($stream);
echo "Msg Count before append: ". $check->Nmsgs . "\n";

imap_append($stream, "{your.imap.host}INBOX.Drafts"
                   , "From: me@example.com\r\n"
                   . "To: you@example.com\r\n"
                   . "Subject: test\r\n"
                   . "\r\n"
                   . "this is a test message, please ignore\r\n"
                   );

$check = imap_check($stream);
echo "Msg Count after append : ". $check->Nmsgs . "\n";

imap_close($stream);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="imap_stream" type="resource" required="1" />
      <property kind="parameter" name="mbox" type="string" required="1" />
      <property ref="Errors and Logging_1" />
      <property kind="parameter" name="options" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="imap_base64">
    <description><![CDATA[   imap_base64 function decodes BASE-64 encoded   text (see ,  Section 6.8). The decoded message is returned as a string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="imap_binary">
    <description><![CDATA[   Convert an 8bit string to a base64 string (according to , Section 6.8).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="imap_body">
    <description><![CDATA[   imap_body returns the body of the message,  numbered msg_number in the current  mailbox.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="msg_number" type="int" required="1" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_bodystruct">
    <properties>
      <property ref="ret_object" />
      <property kind="parameter" name="stream_id" type="resource" required="1" />
      <property kind="parameter" name="msg_no" type="int" required="1" />
      <property kind="parameter" name="section" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_check">
    <description><![CDATA[  Returns information about the current mailbox. Returns on  failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$imap_obj = imap_check($imap_stream);
var_dump($imap_obj);

?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_clearflag_full">
    <description><![CDATA[  This function causes a store to delete the specified   flag to the flags set for the  messages in the specified sequence .  The flags which you can unset are "\\Seen", "\\Answered",  "\\Flagged", "\\Deleted", and "\\Draft" (as defined  by RFC2060). .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="stream" type="resource" required="1" />
      <property kind="parameter" name="sequence" type="string" required="1" />
      <property kind="parameter" name="flag" type="string" required="1" />
      <property ref="IMAP_3" />
    </properties>
    
  </element>
  <element kind="function" name="imap_close">
    <description><![CDATA[   Closes the imap stream. Takes an optional   flag  ,  which will silently expunge the mailbox before closing,  removing all messages marked for deletion.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="flag" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="imap_createmailbox">
    <description><![CDATA[    imap_createmailbox creates a new mailbox  specified by mbox . Names containing  international characters should be encoded by imap_utf7_encode  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host}", "username", "password", OP_HALFOPEN)
     or die("can't connect: " . imap_last_error());

$name1 = "phpnewbox";
$name2 = imap_utf7_encode("phpnewb&ouml;x");

$newname = $name1;

echo "Newname will be '$name1'<br />\n";

// we will now create a new mailbox "phptestbox" in your inbox folder,
// check its status after creation and finaly remove it to restore
// your inbox to its initial state 

if (@imap_createmailbox($mbox, imap_utf7_encode("{your.imap.host}INBOX.$newname"))) {
    $status = @imap_status($mbox, "{your.imap.host}INBOX.$newname", SA_ALL);
    if ($status) {
        echo "your new mailbox '$name1' has the following status:<br />\n";
        echo "Messages:   " . $status->messages    . "<br />\n";
        echo "Recent:     " . $status->recent      . "<br />\n";
        echo "Unseen:     " . $status->unseen      . "<br />\n";
        echo "UIDnext:    " . $status->uidnext     . "<br />\n";
        echo "UIDvalidity:" . $status->uidvalidity . "<br />\n";

        if (imap_renamemailbox($mbox, "{your.imap.host}INBOX.$newname", "{your.imap.host}INBOX.$name2")) {
            echo "renamed new mailbox from '$name1' to '$name2'<br />\n";
            $newname = $name2;
        } else {
            echo "imap_renamemailbox on new mailbox failed: " . imap_last_error() . "<br />\n";
        }
    } else {
        echo "imap_status on new mailbox failed: " . imap_last_error() . "<br />\n";
    }
    
    if (@imap_deletemailbox($mbox, "{your.imap.host}INBOX.$newname")) {
        echo "new mailbox removed to restore initial state<br />\n";
    } else {
        echo "imap_deletemailbox on new mailbox failed: " . implode("<br />\n", imap_errors()) . "<br />\n";
    }

} else {
    echo "could not create new mailbox: " . implode("<br />\n", imap_errors()) . "<br />\n";
}

imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property ref="IMAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="imap_delete">
    <description><![CDATA[  Returns .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$mbox = imap_open("{your.imap.host}INBOX", "username", "password")
    or die("Can't connect: " . imap_last_error());

$check = imap_mailboxmsginfo($mbox);
echo "Messages before delete: " . $check->Nmsgs . "<br />\n";

imap_delete($mbox, 1);

$check = imap_mailboxmsginfo($mbox);
echo "Messages after  delete: " . $check->Nmsgs . "<br />\n";

imap_expunge($mbox);

$check = imap_mailboxmsginfo($mbox);
echo "Messages after expunge: " . $check->Nmsgs . "<br />\n";

imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="imap_stream" type="int" required="1" />
      <property ref="IMAP_4" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_deletemailbox">
    <description><![CDATA[    imap_deletemailbox deletes the specified  mailbox (see imap_open for the format  of mbox names).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property ref="IMAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="imap_errors">
    <description><![CDATA[  This function returns an array of all of the IMAP error messages  generated since the last imap_errors call,  or the beginning of the page. When   imap_errors is called, the error stack is  subsequently cleared.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="imap_expunge">
    <description><![CDATA[    imap_expunge deletes all the messages marked  for deletion by imap_delete ,   imap_mail_move , or   imap_setflag_full .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_fetch_overview">
    <description><![CDATA[  This function fetches mail headers for the given   sequence and returns an overview of their  contents. sequence will contain a sequence  of message indices or UIDs, if flags  contains FT_UID. The returned value is an array of objects  describing one message header each:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host:143}", "username", "password")
     or die("can't connect: " . imap_last_error());
 
$overview = imap_fetch_overview($mbox, "2,4:6", 0);
 
if (is_array($overview)) {
        reset($overview);
        while (list($key, $val) = each($overview)) {
                echo      $val->msgno
                . " - " . $val->date
                . " - " . $val->subject
                . "\n";
        }
}
 
imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property ref="IMAP_9" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_fetchbody">
    <description><![CDATA[  This function causes a fetch of a particular section of the body  of the specified messages as a text string and returns that text  string. The section specification is a string of integers  delimited by period which index into a body part list as per the  IMAP4 specification. Body parts are not decoded by this function.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="IMAP_1" />
      <property ref="IMAP_4" />
      <property kind="parameter" name="part_number" type="string" required="1" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_fetchheader">
    <description><![CDATA[  This function causes a fetch of the complete, unfiltered    format header of the specified message as a text string and  returns that text string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="msgno" type="int" required="1" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_fetchstructure">
    <description><![CDATA[  This function fetches all the structured information for a given  message. The optional options parameter only  has a single option, FT_UID , which tells  the function to treat the msg_number  argument as a UID . The returned object  includes the envelope, internal date, size, flags and body  structure along with a similar object for each mime  attachment. The structure of the returned objects is as follows:  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="IMAP_1" />
      <property ref="IMAP_4" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_get_quota">
    <description><![CDATA[  Returns an array with integer values limit and usage for the given  mailbox.  The value of limit represents the total amount of space  allowed for this mailbox.  The usage value represents the mailboxes  current level of capacity.  Will return in the case of failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host}", "mailadmin", "password", OP_HALFOPEN)
      or die("can't connect: " . imap_last_error());
 
$quota_value = imap_get_quota($mbox, "user.kalowsky");
if (is_array($quota_value)) {
    echo "Usage level is: " . $quota_value['usage'];
    echo "Limit level is: " . $quota_value['limit'];
} 
 
imap_close($mbox); 
?>

       

<?php
$mbox = imap_open("{your.imap.host}", "mailadmin", "password", OP_HALFOPEN)
      or die("can't connect: " . imap_last_error());
       
$quota_values = imap_get_quota($mbox, "user.kalowsky");
if (is_array($quota_values)) {
   $storage = $quota_values['STORAGE'];
   echo "STORAGE usage level is: " .  $storage['usage'];
   echo "STORAGE limit level is: " .  $storage['limit'];

   $message = $quota_values['MESSAGE']; 
   echo "MESSAGE usage level is: " .  $message['usage'];
   echo "MESSAGE limit is: " .  $message['limit'];

   /* ...  */ 
} 

imap_close($mbox); 
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="quota_root" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_get_quotaroot">
    <description><![CDATA[  Returns an array of integer values pertaining to the specified user  mailbox.  All values contain a key based upon the resource name, and a  corresponding array with the usage and limit values within.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host}", "kalowsky", "password", OP_HALFOPEN)
      or die("can't connect: " . imap_last_error());
 
$quota = imap_get_quotaroot($mbox, "INBOX");
if (is_array($quota)) {
   $storage = $quota_values['STORAGE'];
   echo "STORAGE usage level is: " .  $storage['usage'];
   echo "STORAGE limit level is: " .  $storage['limit'];

   $message = $quota_values['MESSAGE']; 
   echo "MESSAGE usage level is: " .  $message['usage'];
   echo "MESSAGE usage level is: " .  $message['limit'];

   /* ...  */ 

} 
 
imap_close($mbox); 
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property ref="IMAP_15" />
    </properties>
    
  </element>
  <element kind="function" name="imap_getacl">
    <description><![CDATA[  This function is currently only available to users of the c-client2000  or greater library.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_5" />
      <property kind="parameter" name="mailbox" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_getmailboxes">
    <description><![CDATA[  Returns an array of objects containing mailbox information. Each  object has the attributes name , specifying  the full name of the mailbox; delimiter ,  which is the hierarchy delimiter for the part of the hierarchy  this mailbox is in; and   attributes . Attributes  is a bitmask that can be tested against:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host}", "username", "password", OP_HALFOPEN)
      or die("can't connect: " . imap_last_error());
 
$list = imap_getmailboxes($mbox, "{your.imap.host}", "*");
if (is_array($list)) {
  reset($list);
  while (list($key, $val) = each($list)) {
    echo "($key) ";
    echo imap_utf7_decode($val->name) . ",";
    echo "'" . $val->delimiter . "',";
    echo $val->attributes . "<br />\n";
  }
} else {
  echo "imap_getmailboxes failed: " . imap_last_error() . "\n";
}
 
imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="ref" type="string" required="1" />
      <property ref="Filesystem_15" />
    </properties>
    
  </element>
  <element kind="function" name="imap_getsubscribed">
    <description><![CDATA[  This function is identical to   imap_getmailboxes , except that it only  returns mailboxes that the user is subscribed to.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property ref="IMAP_17" />
      <property ref="Filesystem_15" />
    </properties>
    
  </element>
  <element kind="function" name="imap_headerinfo">
    <description><![CDATA[  This function returns an object of various header elements.  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="IMAP_1" />
      <property ref="IMAP_4" />
      <property kind="parameter" name="fromlength" type="int"  />
      <property kind="parameter" name="subjectlength" type="int"  />
      <property kind="parameter" name="defaulthost" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="imap_headers">
    <description><![CDATA[  Returns an array of string formatted with header info. One  element per mail message.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_last_error">
    <description><![CDATA[  This function returns the full text of the last IMAP error  message that occurred on the current page. The error stack is  untouched; calling imap_last_error  subsequently, with no intervening errors, will return the same  error.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="imap_list">
    <description><![CDATA[  Returns an array containing the names of the mailboxes.  See imap_getmailboxes for a description  of ref and pattern .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host}", "username", "password", OP_HALFOPEN)
      or die("can't connect: " . imap_last_error());
 
$list = imap_list($mbox, "{your.imap.host}", "*");
if (is_array($list)) {
  reset($list);
  while (list($key, $val) = each($list)) {
    echo imap_utf7_decode($val) . "<br />\n";
  }
} else {
  echo "imap_list failed: " . imap_last_error() . "\n";
}

imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property ref="IMAP_17" />
      <property ref="Filesystem_15" />
    </properties>
    
  </element>
  <element kind="function" name="imap_listscan">
    <description><![CDATA[  Returns an array containing the names of the mailboxes that have   content in the text of the mailbox.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property ref="IMAP_17" />
      <property ref="Filesystem_15" />
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="imap_lsub">
    <description><![CDATA[  Returns an array of all the mailboxes that you have  subscribed.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property ref="IMAP_17" />
      <property ref="Filesystem_15" />
    </properties>
    
  </element>
  <element kind="function" name="imap_mail">
    <description><![CDATA[  This function allows sending of emails with correct handling of  Cc and Bcc receivers. .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="to" type="string" required="1" />
      <property ref="ClibPDF_62" />
      <property ref="Errors and Logging_1" />
      <property kind="parameter" name="additional_headers" type="string"  />
      <property kind="parameter" name="cc" type="string"  />
      <property kind="parameter" name="bcc" type="string"  />
      <property kind="parameter" name="rpath" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="imap_mail_compose">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$envelope["from"]= "joe@example.com";
$envelope["to"]  = "foo@example.com";
$envelope["cc"]  = "bar@example.com";

$part1["type"] = TYPEMULTIPART;
$part1["subtype"] = "mixed";

$filename = "/tmp/imap.c.gz";
$fp = fopen($filename, "r");
$contents = fread($fp, filesize($filename));
fclose($fp);

$part2["type"] = TYPEAPPLICATION;
$part2["encoding"] = ENCBINARY;
$part2["subtype"] = "octet-stream";
$part2["description"] = basename($filename);
$part2["contents.data"] = $contents;

$part3["type"] = TYPETEXT;
$part3["subtype"] = "plain";
$part3["description"] = "description3";
$part3["contents.data"] = "contents.data3\n\n\n\t";

$body[1] = $part1;
$body[2] = $part2;
$body[3] = $part3;

echo nl2br(imap_mail_compose($envelope, $body));

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="envelope" type="array" required="1" />
      <property kind="parameter" name="body" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_mail_copy">
    <description><![CDATA[   Copies mail messages specified by msglist  to specified mailbox. .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="msglist" type="string" required="1" />
      <property ref="IMAP_2" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_mail_move">
    <description><![CDATA[   Moves mail messages specified by msglist  to specified mailbox mbox . .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property ref="IMAP_28" />
      <property ref="IMAP_2" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_mailboxmsginfo">
    <description><![CDATA[  Returns information about the current mailbox. Returns on  failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$mbox = imap_open("{your.imap.host}INBOX", "username", "password")
      or die("can't connect: " . imap_last_error());
 
$check = imap_mailboxmsginfo($mbox);
 
if ($check) {
    echo "Date: "     . $check->Date    . "<br />\n" ;
    echo "Driver: "   . $check->Driver  . "<br />\n" ;
    echo "Mailbox: "  . $check->Mailbox . "<br />\n" ;
    echo "Messages: " . $check->Nmsgs   . "<br />\n" ;
    echo "Recent: "   . $check->Recent  . "<br />\n" ;
    echo "Unread: "   . $check->Unread  . "<br />\n" ;
    echo "Deleted: "  . $check->Deleted . "<br />\n" ;
    echo "Size: "     . $check->Size    . "<br />\n" ;
} else {
    echo "imap_check() failed: " . imap_last_error() . "<br />\n";
}
 
imap_close($mbox);

?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_mime_header_decode">
    <description><![CDATA[   imap_mime_header_decode function decodes  MIME message header extensions that are non ASCII text  (see )  The decoded elements are returned in an array of objects,  where each object has two properties, "charset" and "text".  If the element hasn't been encoded, and in other words is in  plain US-ASCII,the "charset" property of that element is set to  "default".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$text = "=?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@example.com>";

$elements = imap_mime_header_decode($text);
for ($i=0; $i<count($elements); $i++) {
    echo "Charset: {$elements[$i]->charset}\n";
    echo "Text: {$elements[$i]->text}\n\n";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="imap_msgno">
    <description><![CDATA[  This function returns the message sequence number for the given   uid . It is the inverse of   imap_uid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="IMAP_1" />
      <property ref="ICAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="imap_num_msg">
    <description><![CDATA[  Return the number of messages in the current mailbox.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_num_recent">
    <description><![CDATA[  Returns the number of recent messages in the current mailbox.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_open">
    <description><![CDATA[  Returns an IMAP stream on success and on error.  This  function can also be used to open streams to POP3 and NNTP  servers, but some functions and features are only available  on IMAP servers.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// To connect to an IMAP server running on port 143 on the local machine,
// do the following:
$mbox = imap_open("{localhost:143}INBOX", "user_id", "password");

// To connect to a POP3 server on port 110 on the local server, use:
$mbox = imap_open ("{localhost:110/pop3}INBOX", "user_id", "password");

// To connect to an SSL IMAP or POP3 server, add /ssl after the protocol
// specification:
$mbox = imap_open ("{localhost:993/imap/ssl}INBOX", "user_id", "password");

// To connect to an SSL IMAP or POP3 server with a self-signed certificate,
// add /ssl/novalidate-cert after the protocol specification:
$mbox = imap_open ("{localhost:995/pop3/ssl/novalidate-cert}", "user_id", "password");

// To connect to an NNTP server on port 119 on the local server, use:
$nntp = imap_open ("{localhost:119/nntp}comp.test", "", "");
// To connect to a remote server replace "localhost" with the name or the
// IP address of the server you want to connect to.
?>

      

<?php
$mbox = imap_open("{your.imap.host:143}", "username", "password");

echo "<h1>Mailboxes</h1>\n";
$folders = imap_listmailbox($mbox, "{your.imap.host:143}", "*");

if ($folders == false) {
    echo "Call failed<br />\n";
} else {
    while (list ($key, $val) = each($folders)) {
        echo $val . "<br />\n";
    }
}

echo "<h1>Headers in INBOX</h1>\n";
$headers = imap_headers($mbox);

if ($headers == false) {
    echo "Call failed<br />\n";
} else {
    while (list ($key, $val) = each ($headers)) {
        echo $val . "<br />\n";
    }
}

imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="IMAP_16" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_ping">
    <description><![CDATA[   Returns if the stream is still alive, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$imap = imap_open("{your.imap.host}", "mailadmin", "password");

// after some sleeping
if (!imap_ping($imap)) {
    // do some stuff to reconnect
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_qprint">
    <description><![CDATA[   Convert a quoted-printable string to an 8 bit string (according  to , section  6.7).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="imap_renamemailbox">
    <description><![CDATA[   This function renames on old mailbox to new mailbox (see   imap_open for the format of   mbox names).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="old_mbox" type="string" required="1" />
      <property kind="parameter" name="new_mbox" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_reopen">
    <description><![CDATA[   This function reopens the specified stream to a new   mailbox on an IMAP or NNTP server.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property ref="IMAP_16" />
      <property ref="IMAP_3" />
    </properties>
    
  </element>
  <element kind="function" name="imap_rfc822_parse_adrlist">
    <description><![CDATA[  This function parses the address string as defined in   and  for each address, returns an array of objects.  The objects properties are:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$address_string = "Joe Doe <doe@example.com>, postmaster@example.com, root";
$address_array  = imap_rfc822_parse_adrlist($address_string, "example.com");
if (!is_array($address_array) || count($address_array) < 1) {
    die("something is wrong\n");
}
 
foreach ($address_array as $val) {
  echo "mailbox : " . $val->mailbox . "<br />\n";
  echo "host    : " . $val->host . "<br />\n";
  echo "personal: " . $val->personal . "<br />\n";
  echo "adl     : " . $val->adl . "<br />\n";
} 
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="address" type="string" required="1" />
      <property kind="parameter" name="default_host" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_rfc822_parse_headers">
    <description><![CDATA[  This function returns an object of various header elements,  similar to imap_header , except without the  flags and other elements that come from the IMAP server.  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property kind="parameter" name="headers" type="string" required="1" />
      <property ref="IMAP_20" />
    </properties>
    
  </element>
  <element kind="function" name="imap_rfc822_write_address">
    <description><![CDATA[  Returns a properly formatted email address as defined in    given the mailbox , host ,  and personal info.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo imap_rfc822_write_address("hartmut", "cvs.php.net", "Hartmut Holzgraefe") . "\n";      
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="IMAP_16" />
      <property ref="FTP_4" />
      <property kind="parameter" name="personal" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_search">
    <description><![CDATA[  This function performs a search on the mailbox currently opened  in the given imap stream. criteria is a  string, delimited by spaces, in which the following keywords are  allowed. Any multi-word arguments (e.g. FROM "joey smith") must be  quoted.    ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_1" />
      <property kind="parameter" name="criteria" type="string" required="1" />
      <property ref="DOM_30" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="imap_set_quota">
    <description><![CDATA[   Sets an upper limit quota on a per mailbox basis.  This function  requires the imap_stream to have been opened  as the mail administrator account.  It will not work if opened as  any other user.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host:143}", "mailadmin", "password");

if (!imap_set_quota($mbox, "user.kalowsky", 3000)) {
    echo "Error in setting quota\n";
    return;
}

imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property ref="IMAP_15" />
      <property kind="parameter" name="quota_limit" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_setacl">
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_5" />
      <property ref="IMAP_16" />
      <property ref="DOM XML_5" />
      <property kind="parameter" name="rights" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_setflag_full">
    <description><![CDATA[  This function causes a store to add the specified   flag to the flags set for the messages  in the specified sequence .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host:143}", "username", "password")
     or die("can't connect: " . imap_last_error());
 
$status = imap_setflag_full($mbox, "2,5", "\\Seen \\Flagged");
 
echo gettype($status) . "\n";
echo $status . "\n";
 
imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="IMAP_8" />
      <property ref="IMAP_9" />
      <property ref="IMAP_10" />
      <property ref="IMAP_3" />
    </properties>
    
  </element>
  <element kind="function" name="imap_sort">
    <description><![CDATA[  Returns an array of message numbers sorted by the given  parameters.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_8" />
      <property kind="parameter" name="criteria" type="int" required="1" />
      <property kind="parameter" name="reverse" type="int" required="1" />
      <property ref="DOM_30" />
      <property kind="parameter" name="search_criteria" type="string"  />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="imap_status">
    <description><![CDATA[  This function returns an object containing status  information. Valid flags are:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mbox = imap_open("{your.imap.host}", "username", "password", OP_HALFOPEN)
      or die("can't connect: " . imap_last_error());
 
$status = imap_status($mbox, "{your.imap.host}INBOX", SA_ALL);
if ($status) {
  echo "Messages:   " . $status->messages    . "<br />\n";
  echo "Recent:     " . $status->recent      . "<br />\n";
  echo "Unseen:     " . $status->unseen      . "<br />\n";
  echo "UIDnext:    " . $status->uidnext     . "<br />\n";
  echo "UIDvalidity:" . $status->uidvalidity . "<br />\n"; 
} else {
  echo "imap_status failed: " . imap_last_error() . "\n";
}

imap_close($mbox);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="IMAP_1" />
      <property ref="IMAP_16" />
      <property kind="parameter" name="options" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imap_subscribe">
    <description><![CDATA[   Subscribe to a new mailbox.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property ref="IMAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="imap_thread">
    <description><![CDATA[   imap_thread returns an associative array containing  a tree of messages threaded by , or  on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Here we're outputting the threads of a newsgroup, in HTML

$nntp = imap_open('{news.example.com:119/nntp}some.newsgroup', '', '');
$threads = imap_thread($nntp);

foreach ($thread as $key => $val) {
  $tree = explode('.', $key);
  if ($tree[1] == 'num') {
    $header = imap_headerinfo($nntp, $val);
    echo "<ul>\n\t<li>" . $header->fromaddress . "\n";
  } elseif ($tree[1] == 'branch') {
    echo "\t</li>\n</ul>\n";
  }
}

imap_close($nntp);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="IMAP_5" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="imap_timeout">
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="timeout_type" type="int" required="1" />
      <property ref="FTP_6" />
    </properties>
    
  </element>
  <element kind="function" name="imap_uid">
    <description><![CDATA[  This function returns the UID for the given message sequence  number. An UID is an unique identifier that will not change over  time while a message sequence number may change whenever the  content of the mailbox changes.  This function is the inverse of   imap_msgno .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="IMAP_1" />
      <property ref="IMAP_14" />
    </properties>
    
  </element>
  <element kind="function" name="imap_undelete">
    <description><![CDATA[   This function removes the deletion flag for a specified message,  which is set by imap_delete or   imap_mail_move .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_1" />
      <property ref="IMAP_4" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="imap_unsubscribe">
    <description><![CDATA[   Unsubscribe from a specified mailbox.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="imap_stream" type="string" required="1" />
      <property ref="IMAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="imap_utf7_decode">
    <description><![CDATA[   Decodes modified UTF-7 text into ISO-8859-1 string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="imap_utf7_encode">
    <description><![CDATA[  Converts data to modified UTF-7  text. Note that data is expected to be  encoded in ISO-8859-1.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="imap_utf8">
    <description><![CDATA[  Converts the given mime_encoded_text to  UTF-8. MIME encoding method and the UTF-8 specification are described in   and   respectively.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="mime_encoded_text" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="IRC Gateway">
  <description><![CDATA[IRC Gateway Functions]]></description>
  <element kind="function" name="ircg_channel_mode">
    <description><![CDATA[  Set channel mode flags for channel on  server connected to by connection . Mode flags  are passed in mode_spec and are applied to  the user specified by nick .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="channel" type="string" required="1" />
      <property kind="parameter" name="mode_spec" type="string" required="1" />
      <property kind="parameter" name="nick" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_disconnect">
    <description><![CDATA[   ircg_disconnect will close a   connection to a server previously  established with ircg_pconnect .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="reason" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_eval_ecmascript_params">
    <description><![CDATA[  See also   ircg_lookup_format_messages .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="params" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_fetch_error_msg">
    <description><![CDATA[   ircg_fetch_error_msg returns the error from  a failed connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!ircg_join ($id, "#php")) {
    $error = ircg_fetch_error_msg($id);
    echo "Can't join channel #php. Error code: 
          $error[0] Description: $error[1]";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_get_username">
    <description><![CDATA[  Function ircg_get_username returns the  username for the specified connection connection .  Returns if connection died or is  not valid.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_html_encode">
    <description><![CDATA[  Encodes a HTML string html_string for  output. This exposes the interface which the IRCG extension  uses internally to reformat data coming from an IRC link.  The function causes IRC color/font codes to be encoded in  HTML and escapes certain entities.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="html_string" type="string" required="1" />
      <property kind="parameter" name="auto_links" type="bool"  />
      <property kind="parameter" name="conv_br" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="ircg_ignore_add">
    <description><![CDATA[  This function adds user nick to the  ignore list of connection   connection . Afterwards, IRCG will suppress  all messages from this user through the associated connection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_3" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_ignore_del">
    <description><![CDATA[  This function removes user nick from the IRCG  ignore list associated with connection .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_3" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_invite">
    <description><![CDATA[   ircg_invite will send an invitation to the  user nickname , prompting him to join   channel .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_1" />
      <property kind="parameter" name="nickname" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_is_conn_alive">
    <description><![CDATA[   ircg_is_conn_alive returns if   connection is still alive and working or   , if the connection has died for some reason.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_join">
    <description><![CDATA[  Join the channel channel on the server  connected to by connection . IRCG will  optionally pass the room key key .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_1" />
      <property kind="parameter" name="key" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ircg_kick">
    <description><![CDATA[  Kick user nick from   channel on server connected to by   connection . reason  should give a short message describing why this action was  performed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_1" />
      <property ref="IRC Gateway_3" />
      <property ref="IRC Gateway_4" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_list">
    <description><![CDATA[    This example will output something similar to:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// connect to server
$id = ircg_pconnect($nickname, $ip, $port);

// set to output to a file
ircg_set_file($id, 'irc_output.html');

// try to join a channel
if (!ircg_join($id, $channel)) {
    echo "Cannot /join $channel<br />";
}

// send list command
ircg_list($id, $channel);

// wait for output to arrive
sleep(5);

// disconnect
ircg_disconnect($id,'Bye World');

// output everything
readfile('irc_output.html');

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_lookup_format_messages">
    <description><![CDATA[  Check for the existence of the format message set   name .  Sets may be registered with   ircg_register_format_messages , a default set  named is always available. Returns ,  if the set exists and otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_lusers">
    <description><![CDATA[   ircg_lusers will request a statistical  breakdown of users on the network connected to on   connection . The answer is sent to the  output defined by ircg_set_file or   ircg_set_current .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_msg">
    <description><![CDATA[   ircg_msg will send the message to a channel  or user on the server connected to by   connection . A   recipient starting with   or will send the   message to a channel, anything else will  be interpreted as a username.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="recipient" type="string" required="1" />
      <property ref="Errors and Logging_1" />
      <property kind="parameter" name="suppress" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="ircg_names">
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave_5" />
      <property ref="IRC Gateway_1" />
      <property kind="parameter" name="target" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ircg_nick">
    <description><![CDATA[  Change your nickname on the given   connection to the one given in   nick , if possible.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_3" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_nickname_escape">
    <description><![CDATA[  Function ircg_nickname_escape returns an encoded  nickname specified by nick which is IRC-compliant.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="IRC Gateway_3" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_nickname_unescape">
    <description><![CDATA[  Function ircg_nickname_unescape returns a  decoded nickname, which is specified in nick .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="IRC Gateway_3" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_notice">
    <description><![CDATA[  This function will send the message text  to the user nick on the server connected  to by connection . IRC servers and other  software will not automatically generate replies to NOTICEs  in contrast to other message types.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_11" />
      <property ref="Errors and Logging_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_oper">
    <description><![CDATA[   ircg_oper will authenticate the logged in user  on connection as an IRC operator.   name and password must  match a registered IRC operator account.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="CCVS_7" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_part">
    <description><![CDATA[  Leave the channel channel on the server  connected to by connection .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_pconnect">
    <description><![CDATA[   ircg_pconnect will try to establish a  connection to an IRC server and return a connection resource  handle for further use.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="FTP_13" />
      <property kind="parameter" name="server_ip" type="string"  />
      <property kind="parameter" name="server_port" type="int"  />
      <property kind="parameter" name="msg_format" type="string"  />
      <property kind="parameter" name="ctcp_messages" type="array"  />
      <property kind="parameter" name="user_settings" type="array"  />
      <property kind="parameter" name="bailout_on_trivial" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="ircg_register_format_messages">
    <description><![CDATA[  With ircg_register_format_messages you can  customize the way your IRC output looks like or which script  functions are invoked on the client side.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
      <property kind="parameter" name="messages" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_set_current">
    <description><![CDATA[  Select the current HTTP connection for output in this execution  context. Every output sent from the server connected to by   connection will be copied to standard  output while using default formatting or a format message set  specified by ircg_register_format_messages .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_set_file">
    <description><![CDATA[  Function ircg_set_file specifies a logfile   path in which all output from connection   connection will be logged.  Returns on success, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_set_on_die">
    <description><![CDATA[  In case of the termination of connection connection  IRCG will connect to host at   port (Note: host must be an IPv4 address,  IRCG does not resolve host-names due to blocking issues), send   data to the new host connection and will  wait until the remote part closes connection. This can be used to  trigger a PHP script for example.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FTP_4" />
      <property ref="APD_8" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_topic">
    <description><![CDATA[  Change the topic for channel channel on  the server connected to by connection to   new_topic .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_1" />
      <property kind="parameter" name="new_topic" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ircg_who">
    <description><![CDATA[   ircg_who will request a list of users  whose nickname is matching mask on connected  network connection . The optional parameter   ops_only will shrink the list to server  operators only.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="mask" type="string" required="1" />
      <property kind="parameter" name="ops_only" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="ircg_whois">
    <description><![CDATA[  Sends a query to the connected server   connection to ask for information about the  specified user nick .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="IRC Gateway_3" />
    </properties>
    
  </element>
</group>
<group name="Image">
  <description><![CDATA[Image Functions]]></description>
  <element kind="function" name="gd_info">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
var_dump(gd_info());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="getimagesize">
    <description><![CDATA[  The getimagesize function will determine the  size of any , ,   , ,   , ,   , ,   , ,   , ,   , , or   image file and return the dimensions along with  the file type and a height/width text string to be used inside a normal    tag.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
list($width, $height, $type, $attr) = getimagesize("img/flag.jpg");
echo "<img src=\"img/flag.jpg\" $attr alt=\"getimagesize() example\" />";
?>

     

<?php 
$size = getimagesize("http://www.example.com/gifs/logo.gif");

// if the file name has space in it, encode it properly
$size = getimagesize("http://www.example.com/gifs/lo%20go.gif");

?>

     

<?php
$size = getimagesize($filename);
$fp=fopen($filename, "rb");
if ($size && $fp) {
  header("Content-type: {$size['mime']}");
  fpassthru($fp);
  exit;
} else {
  // error
}
?>

     

<?php
$size = getimagesize("testimg.jpg", $info);
if (isset($info["APP13"])) {
    $iptc = iptcparse($info["APP13"]);
    var_dump($iptc);
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property kind="parameter" name="imageinfo" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="image2wbmp">
    <description><![CDATA[   image2wbmp creates the   file in filename from the image   image . The image argument  is the return from imagecreate .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = 'php.png';
$image = imagecreatefrompng($file);

header('Content-type: ' . image_type_to_mime_type(IMAGETYPE_WBMP));
image2wbmp($image); // output the stream directly

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="image" type="resource" required="1" />
      <property ref="ClibPDF_38" />
      <property kind="parameter" name="threshold" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="image_type_to_extension">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="imagetype" type="int" required="1" />
      <property kind="parameter" name="include_dot" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="image_type_to_mime_type">
    <description><![CDATA[  The image_type_to_mime_type function will determine  the Mime-Type for an IMAGETYPE constant.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
header("Content-type: " . image_type_to_mime_type(IMAGETYPE_PNG));
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Image_4" />
    </properties>
    
  </element>
  <element kind="function" name="imagealphablending">
    <description><![CDATA[   imagealphablending allows for two different  modes of drawing on truecolor images. In blending mode, the  alpha channel component of the color supplied to all drawing function,  such as imagesetpixel determines how much of the  underlying color should be allowed to shine through.  As a result, gd  automatically blends the existing color at that point with the drawing color,  and stores the result in the image.  The resulting pixel is opaque.  In  non-blending mode, the drawing color is copied literally with its alpha channel  information, replacing the destination pixel.  Blending mode is not available  when drawing on palette images.  If blendmode is , then blending mode is enabled, otherwise  disabled.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property kind="parameter" name="blendmode" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imageantialias">
    <description><![CDATA[  See also imagecreatetruecolor .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="im" type="resource" required="1" />
      <property kind="parameter" name="on" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagearc">
    <description><![CDATA[   imagearc draws a partial ellipse centered at   cx , cy (top left is  0, 0) in the image represented by image .   W  and h specifies the ellipse's width and  height respectively while the start and end points are specified  in degrees indicated by the s and   e arguments. 0 is located at the three-o'clock  position, and the arc is drawn clockwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// create a 200*200 image
$img = imagecreate(200, 200);

// allocate some colors
$white = imagecolorallocate($img, 255, 255, 255);
$black = imagecolorallocate($img, 0, 0, 0);
   
// draw a black circle 
imagearc($img, 100, 100, 150, 150, 0, 360, $black);

// output image in the browser
header("Content-type: image/png");
imagepng($img);
   
// free memory
imagedestroy($img);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="cx" type="int" required="1" />
      <property kind="parameter" name="cy" type="int" required="1" />
      <property kind="parameter" name="w" type="int" required="1" />
      <property kind="parameter" name="h" type="int" required="1" />
      <property kind="parameter" name="s" type="int" required="1" />
      <property kind="parameter" name="e" type="int" required="1" />
      <property kind="parameter" name="color" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagechar">
    <description><![CDATA[   imagechar draws the first character of   c in the image identified by   image with its upper-left at   x , y (top left is 0,  0) with the color color . If font  is 1, 2, 3, 4 or 5, a built-in font is used (with higher numbers  corresponding to larger fonts).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$im = imagecreate(100, 100);

$string = 'PHP';

$bg = imagecolorallocate($im, 255, 255, 255);
$black = imagecolorallocate($im, 0, 0, 0);

// prints a black "P" in the top left corner
imagechar($im, 1, 0, 0, $string, $black);

header('Content-type: image/png');
imagepng($im);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="font" type="int" required="1" />
      <property kind="parameter" name="x" type="int" required="1" />
      <property kind="parameter" name="y" type="int" required="1" />
      <property kind="parameter" name="c" type="string" required="1" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagecharup">
    <description><![CDATA[   imagecharup draws the character   c vertically in the image identified by   image at coordinates   x , y (top left is  0, 0) with the color color .  If font is 1, 2, 3, 4 or 5, a built-in font is  used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$im = imagecreate(100, 100);

$string = 'Note that the first letter is a N';

$bg = imagecolorallocate($im, 255, 255, 255);
$black = imagecolorallocate($im, 0, 0, 0);

// prints a black "Z" on a white background
imagecharup($im, 3, 10, 10, $string, $black);

header('Content-type: image/png');
imagepng($im);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_16" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property ref="Image_19" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorallocate">
    <description><![CDATA[   imagecolorallocate returns a color  identifier representing the color composed of the given   components.  The image  argument is the return from the imagecreate  function. red , green and   blue are the values of the red, green and blue  component of the requested color respectively.  These parameters are  integers between 0 and 255 or hexadecimals between 0x00 and 0xFF.   imagecolorallocate must be called  to create each color that is to be used in the image represented  by image .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="red" type="int" required="1" />
      <property kind="parameter" name="green" type="int" required="1" />
      <property kind="parameter" name="blue" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorallocatealpha">
    <description><![CDATA[   imagecolorallocatealpha behaves identically to   imagecolorallocate with the addition of the transparency  parameter alpha which may have a value between   and .  indicates completely opaque while indicates  completely transparent.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$size = 300;
$image=imagecreatetruecolor($size, $size);

// something to get a white background with black border
$back = imagecolorallocate($image, 255, 255, 255);
$border = imagecolorallocate($image, 0, 0, 0);
imagefilledrectangle($image, 0, 0, $size - 1, $size - 1, $back);
imagerectangle($image, 0, 0, $size - 1, $size - 1, $border);

$yellow_x = 100;
$yellow_y = 75;
$red_x    = 120;
$red_y    = 165; 
$blue_x   = 187;
$blue_y   = 125; 
$radius   = 150;

// allocate colors with alpha values
$yellow = imagecolorallocatealpha($image, 255, 255, 0, 75);
$red    = imagecolorallocatealpha($image, 255, 0, 0, 75);
$blue   = imagecolorallocatealpha($image, 0, 0, 255, 75);

// drawing 3 overlapped circle
imagefilledellipse($image, $yellow_x, $yellow_y, $radius, $radius, $yellow);
imagefilledellipse($image, $red_x, $red_y, $radius, $radius, $red);   
imagefilledellipse($image, $blue_x, $blue_y, $radius, $radius, $blue);

// don't forget to output a correct header!
header('Content-type: image/png');

// and finally, output the result
imagepng($image);
imagedestroy($image);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property kind="parameter" name="alpha" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorat">
    <description><![CDATA[  Returns the index of the color of the pixel at the  specified location in the image specified by image .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$im = ImageCreateFromPng("rockym.png");
$rgb = ImageColorAt($im, 100, 100);
$r = ($rgb >> 16) & 0xFF;
$g = ($rgb >> 8) & 0xFF;
$b = $rgb & 0xFF;
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorclosest">
    <description><![CDATA[  Returns the index of the color in the palette of the image which  is "closest" to the specified value.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorclosestalpha">
    <description><![CDATA[  Returns the index of the color in the palette of the image which  is "closest" to the specified value and alpha level.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Image_23" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorclosesthwb">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolordeallocate">
    <description><![CDATA[  The imagecolordeallocate function  de-allocates a color previously allocated with   imagecolorallocate or   imagecolorallocatealpha .    ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorexact">
    <description><![CDATA[  Returns the index of the specified color in the palette of the  image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorexactalpha">
    <description><![CDATA[  Returns the index of the specified color+alpha in the palette of the  image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Image_23" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolormatch">
    <description><![CDATA[   image1 must be Truecolor,   image2 must be Palette, and  both image1 and image2  must be the same size.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="image1" type="resource" required="1" />
      <property kind="parameter" name="image2" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorresolve">
    <description><![CDATA[  This function is guaranteed to return a color index for a  requested color, either the exact color or the closest possible  alternative.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorresolvealpha">
    <description><![CDATA[  This function is guaranteed to return a color index for a  requested color, either the exact color or the closest possible  alternative.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Image_23" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorset">
    <description><![CDATA[  This sets the specified index in the palette to the specified  color. This is useful for creating flood-fill-like effects in  palleted images without the overhead of performing the actual  flood-fill.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="DOM_24" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorsforindex">
    <description><![CDATA[  This returns an associative array with red, green, blue and alpha  keys that contain the appropriate values for the specified color  index.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open an image
$im = imagecreatefrompng('nexen.png');

// get a color
$start_x = 40;
$start_y = 50;
$color_index = imagecolorat($im, $start_x, $start_y);

// make it human readable
$color_tran = imagecolorsforindex($im, $color_index);

// what is it ?
echo '<pre>';
print_r($color_tran);
echo '</pre>';

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Image_2" />
      <property ref="DOM_24" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolorstotal">
    <description><![CDATA[  This returns the number of colors in the specified image's  palette.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
    </properties>
    
  </element>
  <element kind="function" name="imagecolortransparent">
    <description><![CDATA[   imagecolortransparent sets the transparent  color in the image image to   color . image is the  image identifier returned by imagecreate and   color is a color identifier returned by   imagecolorallocate .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="color" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="imagecopy">
    <description><![CDATA[  Copy a part of src_im onto   dst_im starting at the x,y coordinates   src_x , src_y with  a width of src_w and a height of   src_h .  The portion defined will be copied  onto the x,y coordinates, dst_x and   dst_y .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="dst_im" type="resource" required="1" />
      <property kind="parameter" name="src_im" type="resource" required="1" />
      <property kind="parameter" name="dst_x" type="int" required="1" />
      <property kind="parameter" name="dst_y" type="int" required="1" />
      <property kind="parameter" name="src_x" type="int" required="1" />
      <property kind="parameter" name="src_y" type="int" required="1" />
      <property kind="parameter" name="src_w" type="int" required="1" />
      <property kind="parameter" name="src_h" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecopymerge">
    <description><![CDATA[  Copy a part of src_im onto   dst_im starting at the x,y coordinates   src_x , src_y with  a width of src_w and a height of   src_h .  The portion defined will be copied  onto the x,y coordinates, dst_x and   dst_y .  The two images will be merged according to pct  which can range from 0 to 100.  When pct = 0,  no action is taken, when 100 this function behaves identically  to imagecopy for pallete images, while it  implements alpha transparency for true colour images.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_27" />
      <property ref="Image_28" />
      <property ref="Image_29" />
      <property ref="Image_30" />
      <property ref="Image_31" />
      <property ref="Image_32" />
      <property ref="Image_33" />
      <property ref="Image_34" />
      <property kind="parameter" name="pct" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecopymergegray">
    <description><![CDATA[   imagecopymergegray copy a part of src_im onto   dst_im starting at the x,y coordinates   src_x , src_y with  a width of src_w and a height of   src_h .  The portion defined will be copied  onto the x,y coordinates, dst_x and   dst_y .  The two images will be merged according to pct  which can range from 0 to 100.  When pct = 0,  no action is taken, when 100 this function behaves identically  to imagecopy .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_27" />
      <property ref="Image_28" />
      <property ref="Image_29" />
      <property ref="Image_30" />
      <property ref="Image_31" />
      <property ref="Image_32" />
      <property ref="Image_33" />
      <property ref="Image_34" />
      <property ref="Image_35" />
    </properties>
    
  </element>
  <element kind="function" name="imagecopyresampled">
    <description><![CDATA[   imagecopyresampled copies a rectangular  portion of one image to another image, smoothly interpolating pixel  values so that, in particular, reducing the size of an image still  retains a great deal of clarity.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// The file
$filename = 'test.jpg';
$percent = 0.5;

// Content type
header('Content-type: image/jpeg');

// Get new dimensions
list($width, $height) = getimagesize($filename);
$new_width = $width * $percent;
$new_height = $height * $percent;

// Resample
$image_p = imagecreatetruecolor($new_width, $new_height);
$image = imagecreatefromjpeg($filename);
imagecopyresampled($image_p, $image, 0, 0, 0, 0, $new_width, $new_height, $width, $height);

// Output
imagejpeg($image_p, null, 100);
?>

     

<?php
// The file
$filename = 'test.jpg';

// Set a maximum height and width
$width = 200;
$height = 200;

// Content type
header('Content-type: image/jpeg');

// Get new dimensions
list($width_orig, $height_orig) = getimagesize($filename);

if ($width && ($width_orig < $height_orig)) {
    $width = ($height / $height_orig) * $width_orig;
} else {
    $height = ($width / $width_orig) * $height_orig;
}

// Resample
$image_p = imagecreatetruecolor($width, $height);
$image = imagecreatefromjpeg($filename);
imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);

// Output
imagejpeg($image_p, null, 100);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="dst_image" type="resource" required="1" />
      <property kind="parameter" name="src_image" type="resource" required="1" />
      <property ref="Image_29" />
      <property ref="Image_30" />
      <property ref="Image_31" />
      <property ref="Image_32" />
      <property kind="parameter" name="dst_w" type="int" required="1" />
      <property kind="parameter" name="dst_h" type="int" required="1" />
      <property ref="Image_33" />
      <property ref="Image_34" />
    </properties>
    
  </element>
  <element kind="function" name="imagecopyresized">
    <description><![CDATA[   imagecopyresized copies a rectangular  portion of one image to another image.   dst_image is the destination image,   src_image is the source image identifier.  If the source and destination coordinates and width and heights  differ, appropriate stretching or shrinking of the image fragment  will be performed. The coordinates refer to the upper left  corner. This function can be used to copy regions within the  same image (if dst_image is the same as   src_image ) but if the regions overlap the  results will be unpredictable.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// File and new size
$filename = 'test.jpg';
$percent = 0.5;

// Content type
header('Content-type: image/jpeg');

// Get new sizes
list($width, $height) = getimagesize($filename);
$newwidth = $width * $percent;
$newheight = $height * $percent;

// Load
$thumb = imagecreate($newwidth, $newheight);
$source = imagecreatefromjpeg($filename);

// Resize
imagecopyresized($thumb, $source, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);

// Output
imagejpeg($thumb);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_36" />
      <property ref="Image_37" />
      <property ref="Image_29" />
      <property ref="Image_30" />
      <property ref="Image_31" />
      <property ref="Image_32" />
      <property ref="Image_38" />
      <property ref="Image_39" />
      <property ref="Image_33" />
      <property ref="Image_34" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreate">
    <description><![CDATA[   imagecreate returns an image identifier  representing a blank image of size x_size  by y_size .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
header("Content-type: image/png");
$im = @imagecreate(100, 50)
    or die("Cannot Initialize new GD image stream");
$background_color = imagecolorallocate($im, 255, 255, 255);
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5,  "A Simple Text String", $text_color);
imagepng($im);
imagedestroy($im);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="x_size" type="int" required="1" />
      <property kind="parameter" name="y_size" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromgd">
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromgd2">
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromgd2part">
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property kind="parameter" name="srcX" type="int" required="1" />
      <property kind="parameter" name="srcY" type="int" required="1" />
      <property kind="parameter" name="width" type="int" required="1" />
      <property kind="parameter" name="height" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromgif">
    <description><![CDATA[   imagecreatefromgif returns an image identifier  representing the image obtained from the given filename.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function LoadGif ($imgname) 
{
    $im = @imagecreatefromgif ($imgname); /* Attempt to open */
    if (!$im) { /* See if it failed */
        $im = imagecreate (150, 30); /* Create a blank image */
        $bgc = imagecolorallocate ($im, 255, 255, 255);
        $tc = imagecolorallocate ($im, 0, 0, 0);
        imagefilledrectangle ($im, 0, 0, 150, 30, $bgc);
        /* Output an errmsg */
        imagestring ($im, 1, 5, 5, "Error loading $imgname", $tc);
    }
    return $im;
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromjpeg">
    <description><![CDATA[   imagecreatefromjpeg returns an image identifier  representing the image obtained from the given filename.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function LoadJpeg($imgname) 
{
    $im = @imagecreatefromjpeg($imgname); /* Attempt to open */
    if (!$im) { /* See if it failed */
        $im  = imagecreate(150, 30); /* Create a blank image */
        $bgc = imagecolorallocate($im, 255, 255, 255);
        $tc  = imagecolorallocate($im, 0, 0, 0);
        imagefilledrectangle($im, 0, 0, 150, 30, $bgc);
        /* Output an errmsg */
        imagestring($im, 1, 5, 5, "Error loading $imgname", $tc);
    }
    return $im;
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefrompng">
    <description><![CDATA[   imagecreatefrompng returns an image identifier  representing the image obtained from the given filename.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function LoadPNG($imgname) 
{
    $im = @imagecreatefrompng($imgname); /* Attempt to open */
    if (!$im) { /* See if it failed */
        $im  = imagecreate(150, 30); /* Create a blank image */
        $bgc = imagecolorallocate($im, 255, 255, 255);
        $tc  = imagecolorallocate($im, 0, 0, 0);
        imagefilledrectangle($im, 0, 0, 150, 30, $bgc);
        /* Output an errmsg */
        imagestring($im, 1, 5, 5, "Error loading $imgname", $tc);
    }
    return $im;
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromstring">
    <description><![CDATA[   imagecreatefromstring returns an image identifier  representing the image obtained from the given string. These types  will be automatically detected if your build of PHP supports them:  JPEG, PNG, GIF, WBMP, and GD2.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$data = 'iVBORw0KGgoAAAANSUhEUgAAABwAAAASCAMAAAB/2U7WAAAABl'
       . 'BMVEUAAAD///+l2Z/dAAAASUlEQVR4XqWQUQoAIAxC2/0vXZDr'
       . 'EX4IJTRkb7lobNUStXsB0jIXIAMSsQnWlsV+wULF4Avk9fLq2r'
       . '8a5HSE35Q3eO2XP1A1wQkZSgETvDtKdQAAAABJRU5ErkJggg==';
$data = base64_decode($data);

$im = imagecreatefromstring($data);
if ($im !== false) {
    header('Content-Type: image/png');
    imagepng($im);
}
else {
    echo 'An error occured.';
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="image" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromwbmp">
    <description><![CDATA[   imagecreatefromwbmp returns an image identifier  representing the image obtained from the given filename.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function LoadWBMP($imgname) 
{
    $im = @imagecreatefromwbmp($imgname); /* Attempt to open */
    if (!$im) { /* See if it failed */
        $im  = imagecreate (20, 20); /* Create a blank image */
        $bgc = imagecolorallocate($im, 255, 255, 255);
        $tc  = imagecolorallocate($im, 0, 0, 0);
        imagefilledrectangle($im, 0, 0, 10, 10, $bgc);
        /* Output an errmsg */
        imagestring($im, 1, 5, 5, "Error loading $imgname", $tc);
    }
    return $im;
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromxbm">
    <description><![CDATA[   imagecreatefromxbm returns an image identifier  representing the image obtained from the given filename.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatefromxpm">
    <description><![CDATA[   imagecreatefromxpm returns an image identifier  representing the image obtained from the given filename.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagecreatetruecolor">
    <description><![CDATA[   imagecreatetruecolor returns an image identifier  representing a black image of size x_size  by y_size .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
header ("Content-type: image/png");
$im = @imagecreatetruecolor(50, 100)
      or die("Cannot Initialize new GD image stream");
$text_color = imagecolorallocate($im, 233, 14, 91);
imagestring($im, 1, 5, 5,  "A Simple Text String", $text_color);
imagepng($im);
imagedestroy($im);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Image_40" />
      <property ref="Image_41" />
    </properties>
    
  </element>
  <element kind="function" name="imagedashedline">
    <description><![CDATA[  This function is deprecated. Use combination of   imagesetstyle and imageline  instead.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="x1" type="int" required="1" />
      <property kind="parameter" name="y1" type="int" required="1" />
      <property kind="parameter" name="x2" type="int" required="1" />
      <property kind="parameter" name="y2" type="int" required="1" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagedestroy">
    <description><![CDATA[   imagedestroy frees any memory associated  with image image . image  is the image identifier returned by the   imagecreate function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
    </properties>
    
  </element>
  <element kind="function" name="imageellipse">
    <description><![CDATA[   imageellipse draws an ellipse centered at   cx , cy (top left is  0, 0) in the image represented by image .   W and h specifies the  ellipse's width and height respectively. The color of the ellipse is  specified by color .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// create a blank image
$image = imagecreate(400, 300);

// fill the background color
$bg = imagecolorallocate($image, 0, 0, 0);

// choose a color for the ellipse
$col_ellipse = imagecolorallocate($image, 255, 255, 255);

// draw the ellipse
imageellipse($image, 200, 150, 300, 200, $col_ellipse);

// output the picture
header("Content-type: image/png");
imagepng($image);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_9" />
      <property ref="Image_10" />
      <property ref="Image_11" />
      <property ref="Image_12" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagefill">
    <description><![CDATA[   imagefill performs a flood fill starting at  coordinate x , y  (top left is 0, 0) with color color in the  image image .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagefilledarc">
    <description><![CDATA[   imagefilledarc draws a partial ellipse centered at   cx , cy (top left is  0, 0) in the image represented by image .     W  and h specifies the ellipse's width and  height respectively while the start and end points are specified  in degrees indicated by the s and   e arguments.   style is a bitwise OR of the following possibilities:     and are  mutually exclusive; just  connects the starting and ending angles with a straight line, while   produces a rounded edge.   indicates that the arc  or chord should be outlined, not filled. ,  used together with , indicates that the  beginning and ending angles should be connected to the center - this is a  good way to outline (rather than fill) a 'pie slice'.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// this example is provided by poxy at klam dot is

// create image
$image = imagecreate(100, 100);

// allocate some solors
$white    = imagecolorallocate($image, 0xFF, 0xFF, 0xFF);
$gray     = imagecolorallocate($image, 0xC0, 0xC0, 0xC0);
$darkgray = imagecolorallocate($image, 0x90, 0x90, 0x90);
$navy     = imagecolorallocate($image, 0x00, 0x00, 0x80);
$darknavy = imagecolorallocate($image, 0x00, 0x00, 0x50);
$red      = imagecolorallocate($image, 0xFF, 0x00, 0x00);
$darkred  = imagecolorallocate($image, 0x90, 0x00, 0x00);

// make the 3D effect
for ($i = 60; $i > 50; $i--) {
   imagefilledarc($image, 50, $i, 100, 50, 0, 45, $darknavy, IMG_ARC_PIE);
  imagefilledarc($image, 50, $i, 100, 50, 45, 75 , $darkgray, IMG_ARC_PIE);
  imagefilledarc($image, 50, $i, 100, 50, 75, 360 , $darkred, IMG_ARC_PIE);
}

imagefilledarc($image, 50, 50, 100, 50, 0, 45, $navy, IMG_ARC_PIE);
imagefilledarc($image, 50, 50, 100, 50, 45, 75 , $gray, IMG_ARC_PIE);
imagefilledarc($image, 50, 50, 100, 50, 75, 360 , $red, IMG_ARC_PIE);


// flush image
header('Content-type: image/png');
imagepng($image);
imagedestroy($image);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="Image_9" />
      <property ref="Image_10" />
      <property ref="Image_11" />
      <property ref="Image_12" />
      <property ref="Image_13" />
      <property ref="Image_14" />
      <property ref="Image_15" />
      <property kind="parameter" name="style" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagefilledellipse">
    <description><![CDATA[   imagefilledellipse draws an ellipse centered at   cx , cy (top left is  0, 0) in the image represented by image .   W and h specifies the  ellipse's width and height respectively. The ellipse is filled using   color .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// create a blank image
$image = imagecreate(400, 300);

// fill the background color
$bg = imagecolorallocate($image, 0, 0, 0);

// choose a color for the ellipse
$col_ellipse = imagecolorallocate($image, 255, 255, 255);

// draw the white ellipse
imagefilledellipse($image, 200, 150, 300, 200, $col_ellipse);

// output the picture
header("Content-type: image/png");
imagepng($image);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="Image_9" />
      <property ref="Image_10" />
      <property ref="Image_11" />
      <property ref="Image_12" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagefilledpolygon">
    <description><![CDATA[   imagefilledpolygon creates a filled polygon  in image image .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// set up array of points for polygon
$values = array(
            40,  50,  // Point 1 (x, y)
            20,  240, // Point 2 (x, y)
            60,  60,  // Point 3 (x, y)
            240, 20,  // Point 4 (x, y)
            50,  40,  // Point 5 (x, y)
            10,  10   // Point 6 (x, y)
            );

// create image
$image = imagecreate(250, 250);

// some colors
$bg   = imagecolorallocate($image, 200, 200, 200);
$blue = imagecolorallocate($image, 0, 0, 255);

// draw a polygon
imagefilledpolygon($image, $values, 6, $blue);

// flush image
header('Content-type: image/png');
imagepng($image);
imagedestroy($image);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="points" type="array" required="1" />
      <property kind="parameter" name="num_points" type="int" required="1" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagefilledrectangle">
    <description><![CDATA[   imagefilledrectangle creates a filled  rectangle of color color in image   image starting at upper left coordinates   x1 , y1 and ending  at bottom right coordinates x2 ,   y2 .  0, 0 is the top left corner of the  image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_47" />
      <property ref="Image_48" />
      <property ref="Image_49" />
      <property ref="Image_50" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagefilltoborder">
    <description><![CDATA[   imagefilltoborder performs a flood fill  whose border color is defined by border .  The starting point for the fill is x ,   y (top left is 0, 0) and the region is  filled with color color .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property kind="parameter" name="border" type="int" required="1" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagefilter">
    <description><![CDATA[   imagefilter applies the filter   filtertype to the image, using   arg1 , arg2 and   arg3 where necessary.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$im = imagecreatefrompng('dave.png');
if ($im && imagefilter($im, IMG_FILTER_GRAYSCALE)) {
    echo 'Image converted to grayscale.';
    imagepng($im, 'dave.png');
} else {
    echo 'Conversion to grayscale failed.';
}

imagedestroy($im);
?>

      

<?php
$im = imagecreatefrompng('sean.png');
if ($im && imagefilter($im, IMG_FILTER_BRIGHTNESS, 20)) {
    echo 'Image brightness changed.';
    imagepng($im, 'sean.png');
} else {
    echo 'Image brightness change failed.';
}

imagedestroy($im);
?>

      

<?php
$im = imagecreatefrompng('philip.png');

/* R, G, B, so 0, 255, 0 is green */
if ($im && imagefilter($im, IMG_FILTER_COLORIZE, 0, 255, 0)) {
    echo 'Image successfully shaded green.';
    imagepng($im, 'philip.png');
} else {
    echo 'Green shading failed.';
}

imagedestroy($im);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Image_28" />
      <property kind="parameter" name="filtertype" type="int" required="1" />
      <property kind="parameter" name="arg1" type="int"  />
      <property kind="parameter" name="arg2" type="int"  />
      <property kind="parameter" name="arg3" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="imagefontheight">
    <description><![CDATA[  Returns the pixel height of a character in the specified font.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_16" />
    </properties>
    
  </element>
  <element kind="function" name="imagefontwidth">
    <description><![CDATA[  Returns the pixel width of a character in font.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_16" />
    </properties>
    
  </element>
  <element kind="function" name="imageftbbox">
    <properties>
      <property ref="ret_array" />
      <property ref="ClibPDF_51" />
      <property ref="ClibPDF_31" />
      <property kind="parameter" name="font_file" type="string" required="1" />
      <property ref="ClibPDF_12" />
      <property kind="parameter" name="extrainfo" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="imagefttext">
    <properties>
      <property ref="ret_array" />
      <property ref="Image_2" />
      <property ref="ClibPDF_51" />
      <property ref="ClibPDF_31" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property kind="parameter" name="col" type="int" required="1" />
      <property ref="Image_59" />
      <property ref="ClibPDF_12" />
      <property ref="Image_60" />
    </properties>
    
  </element>
  <element kind="function" name="imagegammacorrect">
    <description><![CDATA[  The imagegammacorrect function applies gamma  correction to a gd image stream ( image ) given  an input gamma, the parameter inputgamma  and an output gamma, the parameter   outputgamma .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="inputgamma" type="float" required="1" />
      <property kind="parameter" name="outputgamma" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagegd">
    <description><![CDATA[   imagegd outputs a GD image to   filename . The image  argument is the return from the imagecreate  function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="ClibPDF_38" />
    </properties>
    
  </element>
  <element kind="function" name="imagegd2">
    <description><![CDATA[   imagegd2 outputs a GD2 image to   filename .  The image parameter is the return from the   imagecreate function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="ClibPDF_38" />
      <property kind="parameter" name="chunk_size" type="int"  />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="imagegif">
    <description><![CDATA[   imagegif creates the  file in filename from the image image . The   image argument is the return from the   imagecreate function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="ClibPDF_38" />
    </properties>
    
  </element>
  <element kind="function" name="imageinterlace">
    <description><![CDATA[   imageinterlace turns the interlace bit on or off.  If interlace is 1 the image will be interlaced, and if interlace  is 0 the interlace bit is turned off.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="interlace" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="imageistruecolor">
    <description><![CDATA[   imageistruecolor finds whether the image   image is a truecolor image.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
    </properties>
    
  </element>
  <element kind="function" name="imagejpeg">
    <description><![CDATA[   imagejpeg creates the   file in filename from the image   image . The image argument  is the return from the imagecreate function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="ClibPDF_38" />
      <property kind="parameter" name="quality" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="imagelayereffect">
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property kind="parameter" name="effect" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imageline">
    <description><![CDATA[   imageline draws a line from   x1 , y1 to   x2 , y2 (top left is  0, 0) in image image of color color .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

function imagelinethick($image, $x1, $y1, $x2, $y2, $color, $thick = 1) 
{
    /* this way it works well only for orthogonal lines
    imagesetthickness($image, $thick);
    return imageline($image, $x1, $y1, $x2, $y2, $color);
    */
    if ($thick == 1) {
        return imageline($image, $x1, $y1, $x2, $y2, $color);
    }
    $t = $thick / 2 - 0.5;
    if ($x1 == $x2 || $y1 == $y2) {
        return imagefilledrectangle($image, round(min($x1, $x2) - $t), round(min($y1, $y2) - $t), round(max($x1, $x2) + $t), round(max($y1, $y2) + $t), $color);
    }
    $k = ($y2 - $y1) / ($x2 - $x1); //y = kx + q
    $a = $t / sqrt(1 + pow($k, 2));
    $points = array(
        round($x1 - (1+$k)*$a), round($y1 + (1-$k)*$a),
        round($x1 - (1-$k)*$a), round($y1 - (1+$k)*$a),
        round($x2 + (1+$k)*$a), round($y2 - (1-$k)*$a),
        round($x2 + (1-$k)*$a), round($y2 + (1+$k)*$a),
    );    
    imagefilledpolygon($image, $points, 4, $color);
    return imagepolygon($image, $points, 4, $color);
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_47" />
      <property ref="Image_48" />
      <property ref="Image_49" />
      <property ref="Image_50" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imageloadfont">
    <description><![CDATA[   imageloadfont loads a user-defined bitmap  font and returns an identifier for the font (that is always  greater than 5, so it will not conflict with the built-in fonts).  It returns in case of error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$im = imagecreate(50, 20);
$black = imagecolorallocate($im, 0, 0, 0);
$white = imagecolorallocate($im, 255, 255, 255);
imagefilledrectangle($im, 0, 0, 49, 19, $white);
$font = imageloadfont("04b.gdf");
imagestring($im, $font, 0, 0, "Hello", $black);
imagepng($im);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Filesystem_5" />
    </properties>
    
  </element>
  <element kind="function" name="imagepalettecopy">
    <description><![CDATA[   imagepalettecopy copies the  palette from the source image  to the destination image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="destination" type="resource" required="1" />
      <property kind="parameter" name="source" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagepng">
    <description><![CDATA[  The imagepng outputs a GD image stream  ( image ) in PNG format to standard output  (usually the browser) or, if a filename is given by the   filename it outputs the image to the file.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="ClibPDF_38" />
    </properties>
    
  </element>
  <element kind="function" name="imagepolygon">
    <description><![CDATA[   imagepolygon creates a polygon in image id.   points is a PHP array containing the  polygon's vertices, i.e. points[0] = x0, points[1] = y0, points[2]  = x1, points[3] = y1, etc. num_points is  the total number of points (vertices).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// create a blank image
$image = imagecreate(400, 300);

// fill the background color
$bg = imagecolorallocate($image, 0, 0, 0);

// choose a color for the polygon
$col_poly = imagecolorallocate($image, 255, 255, 255);

// draw the polygon
imagepolygon($image, 
             array (
                    0, 0,
                    100, 200,
                    300, 200
             ),
             3,
             $col_poly);

// output the picture
header("Content-type: image/png");
imagepng($image);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_52" />
      <property ref="Image_53" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagepsbbox">
    <description><![CDATA[   size is expressed in pixels.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ClibPDF_12" />
      <property ref="Image_16" />
      <property ref="Arrays_4" />
      <property kind="parameter" name="space" type="int"  />
      <property kind="parameter" name="tightness" type="int" required="1" />
      <property ref="ClibPDF_31" />
    </properties>
    
  </element>
  <element kind="function" name="imagepscopyfont">
    <description><![CDATA[  Use this function if you need make further modifications to the  font, for example extending/condensing, slanting it or changing  its character encoding vector, but need to keep the original  along as well. Note that the font you want to copy must be one  obtained using imagepsloadfont , not a font  that is itself a copied one. You can although make modifications  to it before copying.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="fontindex" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagepsencodefont">
    <description><![CDATA[  Loads a character encoding vector from a file and changes  the fonts encoding vector to it. As a PostScript fonts default  vector lacks most of the character positions above 127, you'll  definitely want to change this if you use an other language than  English. The exact format of this file is described in T1libs  documentation. T1lib comes with two ready-to-use files,  IsoLatin1.enc and IsoLatin2.enc.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="font_index" type="int" required="1" />
      <property kind="parameter" name="encodingfile" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagepsextendfont">
    <description><![CDATA[  Extend or condense a font ( font_index ), if  the value of the extend parameter is less  than one you will be condensing the font.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_73" />
      <property kind="parameter" name="extend" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagepsfreefont">
    <description><![CDATA[   imagepsfreefont frees memory used by a PostScript Type 1 font.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_72" />
    </properties>
    
  </element>
  <element kind="function" name="imagepsloadfont">
    <description><![CDATA[  In the case everything went right, a valid font index will be  returned and can be used for further purposes. Otherwise the  function returns and prints a message describing what went  wrong, which you cannot read directly, while the output type is image.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
header("Content-type: image/jpeg");
$im = imagecreate(350, 45);
$black = imagecolorallocate($im, 0, 0, 0);
$white = imagecolorallocate($im, 255, 255, 255);
$font = imagepsloadfont("bchbi.pfb"); // or locate your .pfb files on your machine
imagepstext($im, "Testing... It worked!", $font, 32, $white, $black, 32, 32);
imagepsfreefont($font);
imagejpeg($im, "", 100); //for best quality...your mileage may vary
imagedestroy($im);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="imagepsslantfont">
    <description><![CDATA[  Slant a font given by the font_index  parameter with a slant of the value of the   slant parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_73" />
      <property kind="parameter" name="slant" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagepstext">
    <description><![CDATA[   foreground is the color in which the text  will be painted. Background is the color  to which the text will try to fade in with antialiasing. No  pixels with the color background are  actually painted, so the background image does not need to be of  solid color.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Image_2" />
      <property ref="ClibPDF_12" />
      <property ref="Image_16" />
      <property ref="Arrays_4" />
      <property kind="parameter" name="foreground" type="int" required="1" />
      <property kind="parameter" name="background" type="int" required="1" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property ref="Image_70" />
      <property ref="Image_71" />
      <property ref="ClibPDF_31" />
      <property kind="parameter" name="antialias_steps" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagerectangle">
    <description><![CDATA[   imagerectangle creates a rectangle of color  col in image image starting at upper left  coordinate x1, y1 and ending at bottom right coordinate x2, y2.  0, 0 is the top left corner of the image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_47" />
      <property ref="Image_48" />
      <property ref="Image_49" />
      <property ref="Image_50" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="imagerotate">
    <description><![CDATA[  Rotates the src_im image using a given   angle in degrees. bgd_color  specifies the color of the uncovered zone after the rotation.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[// File and rotation
$filename = 'test.jpg';
$degrees = 180;

// Content type
header('Content-type: image/jpeg');

// Load
$source = imagecreatefromjpeg($filename);

// Rotate
$rotate = imagerotate($source, $degrees, 0);

// Output
imagejpeg($rotate);]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Image_28" />
      <property ref="ClibPDF_31" />
      <property kind="parameter" name="bgd_color" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagesavealpha">
    <description><![CDATA[   imagesavealpha sets the flag to attempt to save  full alpha channel information (as opposed to single-color transparency)  when saving PNG images.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property kind="parameter" name="saveflag" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagesetbrush">
    <description><![CDATA[   imagesetbrush sets the brush image to be  used by all line drawing functions (such as imageline  and imagepolygon ) when drawing with the special  colors or .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="brush" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagesetpixel">
    <description><![CDATA[   imagesetpixel draws a pixel at   x , y (top left is  0, 0) in image image of color   color .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property ref="Image_15" />
    </properties>
    
  </element>
  <element kind="function" name="imagesetstyle">
    <description><![CDATA[   imagesetstyle sets the style to be used by all  line drawing functions (such as imageline  and imagepolygon ) when drawing with the special  color or lines of images with color   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
header("Content-type: image/jpeg");
$im  = imagecreate(100, 100);
$w   = imagecolorallocate($im, 255, 255, 255);
$red = imagecolorallocate($im, 255, 0, 0);

/* Draw a dashed line, 5 red pixels, 5 white pixels */
$style = array($red, $red, $red, $red, $red, $w, $w, $w, $w, $w);
imagesetstyle($im, $style);
imageline($im, 0, 0, 100, 100, IMG_COLOR_STYLED);

/* Draw a line of happy faces using imagesetbrush() with imagesetstyle */
$style = array($w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $w, $red);
imagesetstyle($im, $style);

$brush = imagecreatefrompng("http://www.libpng.org/pub/png/images/smile.happy.png");
$w2 = imagecolorallocate($brush, 255, 255, 255);
imagecolortransparent($brush, $w2);
imagesetbrush($im, $brush);
imageline($im, 100, 0, 0, 100, IMG_COLOR_STYLEDBRUSHED);

imagejpeg($im);
imagedestroy($im);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property kind="parameter" name="style" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagesetthickness">
    <description><![CDATA[   imagesetthickness sets the thickness of the lines  drawn when drawing rectangles, polygons, ellipses etc. etc. to   thickness pixels.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property kind="parameter" name="thickness" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagesettile">
    <description><![CDATA[   imagesettile sets the tile image to be  used by all region filling functions (such as imagefill  and imagefilledpolygon ) when filling with the special  color .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property kind="parameter" name="tile" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagestring">
    <description><![CDATA[   imagestring draws the string   s in the image identified by   image with the upper-left corner at coordinates   x , y (top left is  0, 0) in color col .  If font is 1, 2, 3, 4  or 5, a built-in font is used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// create a 100*30 image
$im = imagecreate(100, 30);

// white background and blue text
$bg = imagecolorallocate($im, 255, 255, 255);
$textcolor = imagecolorallocate($im, 0, 0, 255);

// write the string at the top left
imagestring($im, 5, 0, 0, "Hello world!", $textcolor);

// output the image
header("Content-type: image/jpeg");
imagejpeg($im);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_16" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property kind="parameter" name="s" type="string" required="1" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="imagestringup">
    <description><![CDATA[   imagestringup draws the string   s vertically in the image identified by   image at coordinates   x , y (top left is  0, 0) in color col .  If font is 1, 2, 3, 4  or 5, a built-in font is used.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Image_2" />
      <property ref="Image_16" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property ref="Image_86" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="imagesx">
    <description><![CDATA[   imagesx returns the width of the image  identified by image .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// create a 300*200 image
$img = imagecreate(300, 200);

echo imagesx($img); // 300

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
    </properties>
    
  </element>
  <element kind="function" name="imagesy">
    <description><![CDATA[   imagesy returns the height of the image  identified by image .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// create a 300*200 image
$img = imagecreate(300, 200);

echo imagesy($img); // 200

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_2" />
    </properties>
    
  </element>
  <element kind="function" name="imagetruecolortopalette">
    <description><![CDATA[   imagetruecolortopalette converts a truecolor image  to a palette image. The code for this function was originally drawn from  the Independent JPEG Group library code, which is excellent. The code  has been modified to preserve as much alpha channel information as  possible in the resulting palette, in addition to preserving colors as  well as possible. This does not work as well as might be hoped. It is  usually best to simply produce a truecolor output image instead, which  guarantees the highest output quality.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_2" />
      <property kind="parameter" name="dither" type="bool" required="1" />
      <property kind="parameter" name="ncolors" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="imagettfbbox">
    <description><![CDATA[  This function calculates and returns the bounding box in pixels  for a TrueType text.     imagettfbbox returns an array with 8  elements representing four points making the bounding box of the  text:    The points are relative to the  regardless of the angle, so "upper left" means in the top  left-hand corner seeing the text horizontally.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ClibPDF_51" />
      <property ref="ClibPDF_31" />
      <property kind="parameter" name="fontfile" type="string" required="1" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="imagettftext">
    <description><![CDATA[    In many cases where a font resides in the same directory as the script using it  the following trick will alleviate any include problems.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Set the content-type
header("Content-type: image/png");

// Create the image
$im = imagecreate(400, 30);

// Create some colors
$white = imagecolorallocate($im, 255, 255, 255);
$grey = imagecolorallocate($im, 128, 128, 128);
$black = imagecolorallocate($im, 0, 0, 0);

// The text to draw
$text = 'Testing...';
// Replace path by your own font path
$font = 'arial.ttf';

// Add some shadow to the text
imagettftext($im, 20, 0, 11, 21, $grey, $font, $text);

// Add the text
imagettftext($im, 20, 0, 10, 20, $black, $font, $text);

// Using imagepng() results in clearer text compared with imagejpeg()
imagepng($im);
imagedestroy($im);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Image_2" />
      <property ref="ClibPDF_51" />
      <property ref="ClibPDF_31" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property ref="Image_15" />
      <property ref="Image_89" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="imagetypes">
    <description><![CDATA[  This function returns a bit-field corresponding to the image  formats supported by the version of GD linked into PHP.  The  following bits are returned, |   | | | .  To check for PNG support, for example, do this:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (imagetypes() & IMG_PNG) {
    echo "PNG Support is enabled";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="imagewbmp">
    <description><![CDATA[   imagewbmp creates the   file in filename from the image   image . The image argument  is the return from the imagecreate function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="ClibPDF_38" />
      <property kind="parameter" name="foreground" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="imagexbm">
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_2" />
      <property ref="Apache_3" />
      <property ref="Image_90" />
    </properties>
    
  </element>
  <element kind="function" name="iptcembed">
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="iptcdata" type="string" required="1" />
      <property kind="parameter" name="jpeg_file_name" type="string" required="1" />
      <property kind="parameter" name="spool" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="iptcparse">
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="iptcblock" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="jpeg2wbmp">
    <description><![CDATA[  Converts the jpegname JPEG file  to WBMP format, and saves it as wbmpname .  With the d_height and   d_width you specify the height  and width of the destination image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="jpegname" type="string" required="1" />
      <property kind="parameter" name="wbmpname" type="string" required="1" />
      <property kind="parameter" name="d_height" type="int" required="1" />
      <property kind="parameter" name="d_width" type="int" required="1" />
      <property kind="parameter" name="threshold" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="png2wbmp">
    <description><![CDATA[  Converts the pngname PNG file  to WBMP format, and saves it as wbmpname .  With the d_height and   d_width you specify the height  and width of the destination image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="pngname" type="string" required="1" />
      <property ref="Image_96" />
      <property ref="Image_97" />
      <property ref="Image_98" />
      <property ref="Image_99" />
    </properties>
    
  </element>
</group>
<group name="Informix">
  <description><![CDATA[Informix Functions]]></description>
  <element kind="function" name="ifx_affected_rows">
    <description><![CDATA[   result_id is a valid result id returned by   ifx_query or   ifx_prepare .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$rid = ifx_prepare("select * from emp 
                     where name like " . $name, $connid);
if (! $rid) {
    /* ... error ... */
}
$rowcount = ifx_affected_rows($rid);
if ($rowcount > 1000) {
    printf ("Too many rows in result set (%d)\n<br />", $rowcount);
    die ("Please restrict your query<br />\n");
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="result_id" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_blobinfile_mode">
    <description><![CDATA[  Set the default blob mode for all select queries. Mode "0" means  save Byte-Blobs in memory, and mode "1" means save Byte-Blobs in  a file.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_byteasvarchar">
    <description><![CDATA[  Sets the default byte mode for all select-queries.  Mode "0" will  return a blob id, and mode "1" will return a varchar with text  content.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_close">
    <description><![CDATA[  Returns: always .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn_id = ifx_connect ("mydb@ol_srv", "itsme", "mypassword");
/* ... some queries and stuff ... */
ifx_close($conn_id);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="link_identifier" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ifx_connect">
    <description><![CDATA[   Returns a connection identifier on success, or on  error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn_id = ifx_connect ("mydb@ol_srv1", "imyself", "mypassword");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FrontBase_3" />
      <property kind="parameter" name="userid" type="string"  />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_copy_blob">
    <description><![CDATA[  Duplicates the given blob object. bid is  the ID of the blob object.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="bid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_create_blob">
    <description><![CDATA[  Creates an blob object.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="COM_27" />
      <property ref="Calendar_10" />
      <property kind="parameter" name="param" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_create_char">
    <description><![CDATA[  Creates an char object. param should  be the char content.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_5" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_do">
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_error">
    <description><![CDATA[  The Informix error codes (SQLSTATE & SQLCODE) formatted as  follows :  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_errormsg">
    <description><![CDATA[  Returns the Informix error message associated with the most  recent Informix error, or, when the optional  " errorcode " parameter is present, the error  message corresponding to " errorcode ".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[printf("%s\n&lt;br>", ifx_errormsg(-201));]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="errorcode" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ifx_fetch_row">
    <description><![CDATA[   Returns an associative array that corresponds to the fetched row,  or if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$rid = ifx_prepare ("select * from emp where name like " . $name,
                     $connid, IFX_SCROLL);
if (! $rid) {
    /* ... error ... */
}
$rowcount = ifx_affected_rows($rid);
if ($rowcount > 1000) {
    printf ("Too many rows in result set (%d)\n<br />", $rowcount);
    die ("Please restrict your query<br />\n");
}
if (! ifx_do ($rid)) {
   /* ... error ... */
}
$row = ifx_fetch_row ($rid, "NEXT");
while (is_array($row)) {
    for (reset($row); $fieldname=key($row); next($row)) {
        $fieldvalue = $row[$fieldname];
        printf ("%s = %s,", $fieldname, $fieldvalue);
    }
    printf("\n<br />");
    $row = ifx_fetch_row($rid, "NEXT");
}
ifx_free_result ($rid);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Informix_1" />
      <property kind="parameter" name="position" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="ifx_fieldproperties">
    <description><![CDATA[  Returns an associative array with fieldnames as key and the SQL  fieldproperties as data for a query with   result_id .  Returns on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$properties = ifx_fieldproperties ($resultid);
if (! isset($properties)) {
    /* ... error ... */
}
for ($i = 0; $i < count($properties); $i++) {
    $fname = key ($properties);
    printf ("%s:\t type =  %s\n", $fname, $properties[$fname]);
    next ($properties);
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_fieldtypes">
    <description><![CDATA[  Returns an associative array with fieldnames as key and the SQL  fieldtypes as data for query with   result_id .  Returns on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$types = ifx_fieldtypes ($resultid);
if (! isset ($types)) {
    /* ... error ... */
}
for ($i = 0; $i < count($types); $i++) {
    $fname = key($types);
    printf("%s :\t type =  %s\n", $fname, $types[$fname]);
    next($types);
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_free_blob">
    <description><![CDATA[  Deletes the blobobject for the given blob object-id   bid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_free_char">
    <description><![CDATA[  Deletes the charobject for the given char object-id   bid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_free_result">
    <description><![CDATA[  Releases resources for the query associated with   result_id .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_get_blob">
    <description><![CDATA[  Returns the content of the blob object for the given blob  object-id bid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_get_char">
    <description><![CDATA[  Returns the content of the char object for the given char  object-id bid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_getsqlca">
    <description><![CDATA[   result_id is a valid result id returned by   ifx_query or   ifx_prepare .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* assume the first column of 'sometable' is a serial */
$qid = ifx_query("insert into sometable 
                  values (0, '2nd column', 'another column') ", $connid);
if (!$qid) {
    /* ... error ... */
}
$sqlca = ifx_getsqlca($qid);
$serial_value = $sqlca["sqlerrd1"];
echo "The serial value of the inserted row is : $serial_value<br />\n"; 
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_htmltbl_result">
    <description><![CDATA[  Returns the number of rows fetched or on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$rid = ifx_prepare ("select * from emp where name like " . $name,
                     $connid, IFX_SCROLL);
if (! $rid) {
    /* ... error ... */
}
$rowcount = ifx_affected_rows ($rid);
if ($rowcount > 1000) {
    printf ("Too many rows in result set (%d)\n<br />", $rowcount);
    die ("Please restrict your query<br />\n");
}
if (! ifx_do($rid)) {
    /* ... error ... */
}

ifx_htmltbl_result ($rid, "border=\"2\"");

ifx_free_result($rid);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Informix_1" />
      <property kind="parameter" name="html_table_options" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ifx_nullformat">
    <description><![CDATA[  Sets the default return value of a NULL-value on a fetch row.  Mode "0" returns "", and mode "1" returns " ".  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_num_fields">
    <description><![CDATA[  Returns the number of columns in query for   result_id or on error  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_num_rows">
    <description><![CDATA[  Gives the number of rows fetched so far for a query with   result_id after a   ifx_query or ifx_do  query.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_pconnect">
    <description><![CDATA[   Returns: A positive Informix persistent link identifier on success,  or on error  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FrontBase_3" />
      <property ref="Informix_3" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_prepare">
    <description><![CDATA[  Returns an integer result_id for use by   ifx_do . Sets   affected_rows for retrieval by the   ifx_affected_rows function.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="conn_id" type="int" required="1" />
      <property kind="parameter" name="cursor_def" type="int"  />
      <property kind="parameter" name="blobidarray" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_query">
    <description><![CDATA[   Returns a positive Informix result identifier on success, or   on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ifx_textasvarchar(1);      // use "text mode" for blobs
$res_id = ifx_query("select * from orders", $conn_id);
if (! $res_id) {
    printf("Can't select orders : %s\n<br />%s<br />\n", ifx_error());
    ifx_errormsg();
    die;
}
ifx_htmltbl_result($res_id, "border=\"1\"");
ifx_free_result($res_id);
?>

      
   
<?php

// create blob id's for a byte and text column
$textid = ifx_create_blob(0, 0, "Text column in memory");
$byteid = ifx_create_blob(1, 0, "Byte column in memory");

// store blob id's in a blobid array
$blobidarray[] = $textid;
$blobidarray[] = $byteid;

// launch query
$query = "insert into catalog (stock_num, manu_code, " .
         "cat_descr,cat_picture) values(1,'HRO',?,?)";
$res_id = ifx_query($query, $conn_id, $blobidarray);
if (! $res_id) {
    /* ... error ... */
}

// free result id
ifx_free_result($res_id);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="link_identifier" type="int" required="1" />
      <property kind="parameter" name="cursor_type" type="int"  />
      <property kind="parameter" name="blobidarray" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="ifx_textasvarchar">
    <description><![CDATA[  Sets the default text mode for all select-queries.  Mode "0" will  return a blob id, and mode "1" will return a varchar with text  content.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_update_blob">
    <description><![CDATA[  Updates the content of the blob object for the given blob object   bid . content is a  string with new data.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Informix_4" />
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="ifx_update_char">
    <description><![CDATA[  Updates the content of the char object for the given char object   bid . content is a  string with new data.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_close_slob">
    <description><![CDATA[  Deletes the slob object on the given slob object-id   bid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_create_slob">
    <description><![CDATA[  Creates an slob object and opens it.  Modes: 1 = LO_RDONLY, 2 =  LO_WRONLY, 4 = LO_APPEND, 8 = LO_RDWR, 16 = LO_BUFFER, 32 =  LO_NOBUFFER -> or-mask. You can also use constants named  IFX_LO_RDONLY, IFX_LO_WRONLY etc.  Return on error otherwise  the new slob object-id.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_free_slob">
    <description><![CDATA[  Deletes the slob object. bid is the Id of  the slob object.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_open_slob">
    <description><![CDATA[  Opens an slob object. bid should be an  existing slob id.  Modes: 1 = LO_RDONLY, 2 = LO_WRONLY, 4 =  LO_APPEND, 8 = LO_RDWR, 16 = LO_BUFFER, 32 = LO_NOBUFFER ->  or-mask.  Returns on error otherwise the new slob  object-id.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_read_slob">
    <description><![CDATA[  Reads nbytes of the slob object. bid is a  existing slob id and nbytes is the number  of bytes read.  Return on error otherwise the string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
      <property kind="parameter" name="nbytes" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_seek_slob">
    <description><![CDATA[  Sets the current file or seek position of an open slob object.   bid should be an existing slob id.  Modes:  0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END and   offset is an byte offset.  Return on  error otherwise the seek position.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
      <property ref="Calendar_10" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_tell_slob">
    <description><![CDATA[  Returns the current file or seek position of an open slob object   bid should be an existing slob id.  Return   on error otherwise the seek position.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
    </properties>
    
  </element>
  <element kind="function" name="ifxus_write_slob">
    <description><![CDATA[  Writes a string into the slob object. bid  is an existing slob id and content the  content to write. Return on error otherwise bytes written.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_4" />
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
</group>
<group name="Ingres II">
  <description><![CDATA[Ingres II Functions]]></description>
  <element kind="function" name="ingres_autocommit">
    <description><![CDATA[   ingres_autocommit is called before opening a  transaction (before the first call to   ingres_query or just after a call to   ingres_rollback or   ingres_commit ) to switch the  "autocommit" mode of the server on or off (when the script begins  the autocommit mode is off).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="link" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="ingres_close">
    <description><![CDATA[  Returns on success, or on failure.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_commit">
    <description><![CDATA[   ingres_commit commits the currently open  transaction, making all changes made to the database permanent.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_connect">
    <description><![CDATA[  Returns a Ingres II link resource on success, or on  failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = ingres_connect("mydb", "user", "pass")
        or die("Could not connect");
    echo "Connected successfully";
    ingres_close($link);
?>

      

<?php
    ingres_connect("mydb", "user", "pass")
        or die("Could not connect");
    echo "Connected successfully";
    ingres_close();
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FrontBase_3" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_fetch_array">
    <description><![CDATA[   ingres_fetch_array Returns an array that  corresponds to the fetched row, or if there are no more  rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ingres_connect($database, $user, $password);

ingres_query("select * from table");
while ($row = ingres_fetch_array()) {
    echo $row["user_id"];  // using associative array
    echo $row["fullname"];
    echo $row[1];          // using enumerated array
    echo $row[2];
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FrontBase_12" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_fetch_object">
    <description><![CDATA[   ingres_fetch_object Returns an object that  corresponds to the fetched row, or if there are no more  rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ingres_connect($database, $user, $password);
ingres_query("select * from table");
while ($row = ingres_fetch_object()) {
    echo $row->user_id;
    echo $row->fullname;
}
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="FrontBase_12" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_fetch_row">
    <description><![CDATA[   ingres_fetch_row returns an array that  corresponds to the fetched row, or if there are no more  rows. Each result column is stored in an array offset, starting  at offset 1.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ingres_connect($database, $user, $password);

ingres_query("select * from table");
while ($row = ingres_fetch_row()) {
    echo $row[1];
    echo $row[2];
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_field_length">
    <description><![CDATA[   ingres_field_length returns the length of a  field.  This is the number of bytes used by the server to store  the field.  For detailed information, see the Ingres/OpenAPI User  Guide - Appendix C.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DOM_24" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_field_name">
    <description><![CDATA[   ingres_field_name returns the name of a field  in a query result, or on failure.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM_24" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_field_nullable">
    <description><![CDATA[   ingres_field_nullable returns if the  field can be set to the value and if it can't.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_24" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_field_precision">
    <description><![CDATA[   ingres_field_precision returns the precision  of a field. This value is used only for decimal, float and money  SQL data types. For detailed information, see the Ingres/OpenAPI  User Guide - Appendix C.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DOM_24" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_field_scale">
    <description><![CDATA[   ingres_field_scale returns the scale of a  field.  This value is used only for the decimal SQL data  type. For detailed information, see the Ingres/OpenAPI User Guide  - Appendix C.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DOM_24" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_field_type">
    <description><![CDATA[   ingres_field_type returns the type of a  field in a query result, or on failure.  Examples of  types returned are "IIAPI_BYTE_TYPE", "IIAPI_CHA_TYPE",  "IIAPI_DTE_TYPE", "IIAPI_FLT_TYPE", "IIAPI_INT_TYPE",  "IIAPI_VCH_TYPE". Some of these types can map to more than one  SQL type depending on the length of the field (see   ingres_field_length ). For example  "IIAPI_FLT_TYPE" can be a float4 or a float8. For detailed  information, see the Ingres/OpenAPI User Guide - Appendix C.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM_24" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_num_fields">
    <description><![CDATA[   ingres_num_fields returns the number of  fields in the results returned by the Ingres server after a call  to ingres_query  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_num_rows">
    <description><![CDATA[  For delete, insert or update queries,   ingres_num_rows returns the number of rows  affected by the query. For other queries,   ingres_num_rows returns the number of rows  in the query's result.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_pconnect">
    <description><![CDATA[  Returns a Ingres II link resource on success, or on  failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="FrontBase_3" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_query">
    <description><![CDATA[  Returns on success, or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ingres_connect($database, $user, $password);

ingres_query("select * from table");
while ($row = ingres_fetch_row()) {
    echo $row[1];
    echo $row[2];
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
  <element kind="function" name="ingres_rollback">
    <description><![CDATA[   ingres_rollback rolls back the currently  open transaction, actually canceling all changes made to the  database during the transaction.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Ingres II_1" />
    </properties>
    
  </element>
</group>
<group name="Java">
  <description><![CDATA[PHP / Java Integration]]></description>
  <element kind="function" name="java_last_exception_clear">
    <description><![CDATA[  See java_last_exception_get for an example.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="java_last_exception_get">
    <description><![CDATA[  The following example demonstrates the usage of Java's exception  handler from within PHP:     ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$stack = new Java('java.util.Stack');
$stack->push(1);

// This should succeed
$result = $stack->pop();
$ex = java_last_exception_get();
if (!$ex) {
  echo "$result\n";
}

// This should fail (error suppressed by @)
$result = @$stack->pop();
$ex = java_last_exception_get();
if ($ex) {
  echo $ex->toString();
}

// Clear last exception
java_last_exception_clear();
?>]]></description>
      </property>
      <property ref="ret_object" />
    </properties>
    
  </element>
</group>
<group name="LDAP">
  <description><![CDATA[LDAP Functions]]></description>
  <element kind="function" name="ldap_8859_to_t61">
    <properties>
      <property ref="ret_string" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_add">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$ds=ldap_connect("localhost");  // assuming the LDAP server is on this host

if ($ds) {
    // bind with appropriate dn to give update access
    $r=ldap_bind($ds, "cn=root, o=My Company, c=US", "secret");

    // prepare data
    $info["cn"]="John Jones";
    $info["sn"]="Jones";
    $info["mail"]="jonj@example.com";
    $info["objectclass"]="person";

    // add data to directory
    $r=ldap_add($ds, "cn=John Jones, o=My Company, c=US", $info);

    ldap_close($ds);
} else {
    echo "Unable to connect to LDAP server"; 
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="dn" type="string" required="1" />
      <property kind="parameter" name="entry" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_bind">
    <description><![CDATA[  Binds to the LDAP directory with specified RDN and  password.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// using ldap bind
$ldaprdn  = 'uname';     // ldap rdn or dn
$ldappass = 'password';  // associated password

// connect to ldap server
$ldapconn = ldap_connect("ldap.example.com")
    or die("Could not connect to LDAP server.");

if ($ldapconn) {

    // binding to ldap server
    $ldapbind = ldap_bind($ldapconn, $ldaprdn, $ldappass);

    // verify binding
    if ($ldapbind) {
        echo "LDAP bind successful...";
    } else {
        echo "LDAP bind failed...";
    }
        
}

?>

     

<?php

//using ldap bind anonymously

// connect to ldap server
$ldapconn = ldap_connect("ldap.example.com")
    or die("Could not connect to LDAP server.");

if ($ldapconn) {

    // binding anonymously
    $ldapbind = ldap_bind($ldapconn);

    if ($ldapbind) {
        echo "LDAP bind anonymous successful...";
    } else {
        echo "LDAP bind anonymous failed...";
    }
 
}
    
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="bind_rdn" type="string"  />
      <property kind="parameter" name="bind_password" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ldap_close">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_compare">
    <description><![CDATA[   ldap_compare is used to compare value  of attribute to value of same attribute in LDAP directory  entry specified with dn .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$ds=ldap_connect("localhost");  // assuming the LDAP server is on this host
      
if ($ds) {

    // bind 
    if (ldap_bind($ds)) {

        // prepare data
        $dn = "cn=Matti Meikku, ou=My Unit, o=My Company, c=FI";
        $value = "secretpassword";
        $attr = "password"; 

        // compare value
        $r=ldap_compare($ds, $dn, $attr, $value);

        if ($r === -1) {
            echo "Error: " . ldap_error($ds);
        } elseif ($r === true) {
            echo "Password correct.";
        } elseif ($r === false) {
            echo "Wrong guess! Password incorrect.";
        }

    } else {
        echo "Unable to bind to LDAP server.";
    }          

    ldap_close($ds);

} else {
    echo "Unable to connect to LDAP server.";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_1" />
      <property kind="parameter" name="attribute" type="string" required="1" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_connect">
    <description><![CDATA[  Returns a positive LDAP link identifier on success, or on  error.  When OpenLDAP 2.x.x is used, ldap_connect   will always return a as it does not actually  connect but just initializes the connecting parameters.  The actual  connect happens with the next calls to ldap_* funcs, usually with   ldap_bind .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// LDAP variables
$ldaphost = "ldap.example.com";  // your ldap servers
$ldapport = 389;                 // your ldap server's port number

// Connecting to LDAP
$ldapconn = ldap_connect($ldaphost, $ldapport) 
          or die("Could not connect to $ldaphost");

?>

     

<?php

// make sure your host is the correct one
// that you issued your secure certificate to
$ldaphost = "ldaps://ldap.example.com/";

// Connecting to LDAP
$ldapconn = ldap_connect($ldaphost) 
          or die("Could not connect to {$ldaphost}");

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FrontBase_5" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_count_entries">
    <description><![CDATA[  Returns number of entries in the result or on error.]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Firebird/InterBase_32" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_delete">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_dn2ufn">
    <description><![CDATA[   ldap_dn2ufn function is used to turn a DN,  specified by dn , into a more user-friendly form,  stripping off type names.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="LDAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_err2str">
    <description><![CDATA[  Returns string error message.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  for ($i=0; $i<100; $i++) {
    printf("Error $i: %s<br />\n", ldap_err2str($i));
  }
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Errors and Logging_8" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_errno">
    <description><![CDATA[  Return the LDAP error number of the last LDAP command for this  link.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// This example contains an error, which we will catch.
$ld = ldap_connect("localhost");
$bind = ldap_bind($ld);
// syntax error in filter expression (errno 87),
// must be "objectclass=*" to work.
$res =  @ldap_search($ld, "o=Myorg, c=DE", "objectclass");
if (!$res) {
    echo "LDAP-Errno: " . ldap_errno($ld) . "<br />\n";
    echo "LDAP-Error: " . ldap_error($ld) . "<br />\n";
    die("Argh!<br />\n");
}
$info = ldap_get_entries($ld, $res);
echo $info["count"] . " matching entries.<br />\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_11" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_error">
    <description><![CDATA[  Returns string error message.]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_explode_dn">
    <description><![CDATA[   ldap_explode_dn function is used to split  the DN returned by ldap_get_dn and breaks  it up into its component parts. Each part is known as Relative  Distinguished Name, or RDN. ldap_explode_dn  returns an array of all those components.   with_attrib is used to request if the RDNs  are returned with only values or their attributes as well.  To  get RDNs with the attributes (i.e. in attribute=value format) set   with_attrib to 0 and to get only values  set it to 1.]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="LDAP_1" />
      <property kind="parameter" name="with_attrib" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_first_attribute">
    <description><![CDATA[  Returns the first attribute in the entry on success and on  error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="result_entry_identifier" type="resource" required="1" />
      <property kind="parameter" name="ber_identifier" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_first_entry">
    <description><![CDATA[  Returns the result entry identifier for the first entry on  success and on error.]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Firebird/InterBase_32" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_first_reference">
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="link" type="resource" required="1" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_free_result">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_32" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_get_attributes">
    <description><![CDATA[  Returns a complete entry information in a multi-dimensional array  on success and on error.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $ds is the link identifier for the directory

// $sr is a valid search result from a prior call to
// one of the ldap directory search calls

$entry = ldap_first_entry($ds, $sr);

$attrs = ldap_get_attributes($ds, $entry);

echo $attrs["count"] . " attributes held for this entry:<p>";

for ($i=0; $i<$attrs["count"]; $i++) {
    echo $attrs[$i] . "<br />";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_7" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_get_dn">
    <description><![CDATA[  Returns the DN of the result entry and on error.]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_7" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_get_entries">
    <description><![CDATA[  Returns a complete result information in a multi-dimensional  array on success and on error.]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_11" />
      <property ref="Firebird/InterBase_32" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_get_option">
    <description><![CDATA[  Sets retval to the value of the specified option.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $ds is a valid link identifier for a directory server
if (ldap_get_option($ds, LDAP_OPT_PROTOCOL_VERSION, $version)) {
    echo "Using protocol version $version\n";
} else {
    echo "Unable to determine protocol version\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="CURL_7" />
      <property kind="parameter" name="retval" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_get_values">
    <description><![CDATA[  Returns an array of values for the attribute on success and  on error.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $ds is a valid link identifier for a directory server

// $sr is a valid search result from a prior call to
//     one of the ldap directory search calls

// $entry is a valid entry identifier from a prior call to
//        one of the calls that returns a directory entry

$values = ldap_get_values($ds, $entry, "mail");

echo $values["count"] . " email addresses for this entry.<br />";

for ($i=0; $i < $values["count"]; $i++) {
    echo $values[$i] . "<br />";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_7" />
      <property ref="LDAP_5" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_get_values_len">
    <description><![CDATA[  Returns an array of values for the attribute on success and  on error.]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_7" />
      <property ref="LDAP_5" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_list">
    <description><![CDATA[  Returns a search result identifier or on error.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[// $ds is a valid link identifier for a directory server

$basedn = "o=My Company, c=US";
$justthese = array("ou");

$sr=ldap_list($ds, $basedn, "ou=*", $justthese);

$info = ldap_get_entries($ds, $sr);

for ($i=0; $i<$info["count"]; $i++) {
    echo $info[$i]["ou"][0] ;
}]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="base_dn" type="string" required="1" />
      <property kind="parameter" name="filter" type="string" required="1" />
      <property kind="parameter" name="attributes" type="array"  />
      <property kind="parameter" name="attrsonly" type="int"  />
      <property kind="parameter" name="sizelimit" type="int"  />
      <property kind="parameter" name="timelimit" type="int"  />
      <property kind="parameter" name="deref" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ldap_mod_add">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_1" />
      <property ref="LDAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_mod_del">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_1" />
      <property ref="LDAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_mod_replace">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_1" />
      <property ref="LDAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_modify">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_1" />
      <property ref="LDAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_next_attribute">
    <description><![CDATA[  Returns the next attribute in an entry on success and on  error.]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_7" />
      <property kind="parameter" name="ber_identifier" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_next_entry">
    <description><![CDATA[  Returns entry identifier for the next entry in the result whose  entries are being read starting with   ldap_first_entry . If there are no more  entries in the result then it returns .]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_7" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_next_reference">
    <properties>
      <property ref="ret_resource" />
      <property ref="LDAP_9" />
      <property kind="parameter" name="entry" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_parse_reference">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="LDAP_19" />
      <property kind="parameter" name="referrals" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_parse_result">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="errcode" type="int" required="1" />
      <property kind="parameter" name="matcheddn" type="string"  />
      <property kind="parameter" name="errmsg" type="string"  />
      <property kind="parameter" name="referrals" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="ldap_read">
    <description><![CDATA[  Returns a search result identifier or on error.]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_11" />
      <property ref="LDAP_12" />
      <property ref="LDAP_13" />
      <property ref="LDAP_14" />
      <property ref="LDAP_15" />
      <property ref="LDAP_16" />
      <property ref="LDAP_17" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_rename">
    <description><![CDATA[  The entry specified by dn is renamed/moved.  The new RDN is specified by newrdn and the  new parent/superior entry is specified  by newparent . If the parameter   deleteoldrdn is the old RDN value(s)  is removed, else the old RDN value(s) is retained as  non-distinguished values of the entry.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_1" />
      <property kind="parameter" name="newrdn" type="string" required="1" />
      <property kind="parameter" name="newparent" type="string" required="1" />
      <property kind="parameter" name="deleteoldrdn" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_sasl_bind">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_search">
    <description><![CDATA[  Returns a search result identifier or on error.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $ds is a valid link identifier for a directory server

// $person is all or part of a person's name, eg "Jo"

$dn = "o=My Company, c=US";
$filter="(|(sn=$person*)(givenname=$person*))";
$justthese = array("ou", "sn", "givenname", "mail");

$sr=ldap_search($ds, $dn, $filter, $justthese);

$info = ldap_get_entries($ds, $sr);

echo $info["count"]." entries returned\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_11" />
      <property ref="LDAP_11" />
      <property ref="LDAP_12" />
      <property ref="LDAP_13" />
      <property ref="LDAP_14" />
      <property ref="LDAP_15" />
      <property ref="LDAP_16" />
      <property ref="LDAP_17" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_set_option">
    <description><![CDATA[  Sets the value of the specified option to be   newval .  on error.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $ds is a valid link identifier for a directory server
if (ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) {
    echo "Using LDAPv3";
} else {
    echo "Failed to set protocol version to 3";
}
?>

      

<?php
// $ds is a valid link identifier for a directory server
// control with no value
$ctrl1 = array("oid" => "1.2.752.58.10.1", "iscritical" => true);
// iscritical defaults to FALSE
$ctrl2 = array("oid" => "1.2.752.58.1.10", "value" => "magic");
// try to set both controls
if (!ldap_set_option($ds, LDAP_OPT_SERVER_CONTROLS, array($ctrl1, $ctrl2)))
    echo "Failed to set server controls";
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
      <property ref="CURL_7" />
      <property kind="parameter" name="newval" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_set_rebind_proc">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="Arrays_21" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_sort">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="sortfilter" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_start_tls">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_t61_to_8859">
    <properties>
      <property ref="ret_string" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="ldap_unbind">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_11" />
    </properties>
    
  </element>
</group>
<group name="LZF">
  <description><![CDATA[LZF Functions]]></description>
  <element kind="function" name="lzf_compress">
    <description><![CDATA[   lzf_compress compresses the given   data .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="lzf_decompress">
    <description><![CDATA[   lzf_compress decompresses the given   data .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="lzf_optimized_for">
    <description><![CDATA[  Determines for what the LZF extension was optimised.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
</group>
<group name="Lotus Notes">
  <description><![CDATA[Lotus Notes Functions]]></description>
  <element kind="function" name="notes_body">
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="server" type="string" required="1" />
      <property ref="IMAP_16" />
      <property ref="IMAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="notes_copy_db">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="from_database_name" type="string" required="1" />
      <property kind="parameter" name="to_database_name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="notes_create_db">
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
    </properties>
    
  </element>
  <element kind="function" name="notes_create_note">
    <properties>
      <property ref="ret_string" />
      <property ref="FrontBase_8" />
      <property kind="parameter" name="form_name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="notes_drop_db">
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
    </properties>
    
  </element>
  <element kind="function" name="notes_find_note">
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="CCVS_7" />
      <property kind="parameter" name="type" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="notes_header_info">
    <properties>
      <property ref="ret_object" />
      <property ref="Lotus Notes_1" />
      <property ref="IMAP_16" />
      <property ref="IMAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="notes_list_msgs">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_23" />
    </properties>
    
  </element>
  <element kind="function" name="notes_mark_read">
    <properties>
      <property ref="ret_string" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_2" />
      <property kind="parameter" name="note_id" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="notes_mark_unread">
    <properties>
      <property ref="ret_string" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_2" />
      <property ref="Lotus Notes_6" />
    </properties>
    
  </element>
  <element kind="function" name="notes_nav_create">
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="notes_search">
    <properties>
      <property ref="ret_string" />
      <property ref="FrontBase_8" />
      <property ref="ClibPDF_56" />
    </properties>
    
  </element>
  <element kind="function" name="notes_unread">
    <properties>
      <property ref="ret_string" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_2" />
    </properties>
    
  </element>
  <element kind="function" name="notes_version">
    <properties>
      <property ref="ret_string" />
      <property ref="FrontBase_8" />
    </properties>
    
  </element>
</group>
<group name="MCAL">
  <description><![CDATA[MCAL Functions]]></description>
  <element kind="function" name="mcal_append_event">
    <description><![CDATA[    mcal_append_event stores the global event  into an MCAL calendar for the stream mcal_stream .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="mcal_stream" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_close">
    <description><![CDATA[   Closes the given mcal stream.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_1" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_create_calendar">
    <description><![CDATA[   Creates a new calendar named calendar .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="stream" type="int" required="1" />
      <property ref="ICAP_3" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_date_compare">
    <description><![CDATA[    mcal_date_compare Compares the two given  dates, returns < 0, 0, >0 if a < b, a==b, a>b respectively.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="a_year" type="int" required="1" />
      <property kind="parameter" name="a_month" type="int" required="1" />
      <property kind="parameter" name="a_day" type="int" required="1" />
      <property kind="parameter" name="b_year" type="int" required="1" />
      <property kind="parameter" name="b_month" type="int" required="1" />
      <property kind="parameter" name="b_day" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_date_valid">
    <description><![CDATA[    mcal_date_valid Returns if the given  year, month and day is a valid date, if not.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_day_of_week">
    <description><![CDATA[    mcal_day_of_week returns the day of the week  of the given date.  Possible return values range from 0 for Sunday through 6 for Saturday.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_day_of_year">
    <description><![CDATA[    mcal_day_of_year returns the day of the year  of the given date.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_days_in_month">
    <description><![CDATA[    mcal_days_in_month returns the number of  days in the month month , taking into account if the  considered year is a leap year or not.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_2" />
      <property kind="parameter" name="leap_year" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_delete_calendar">
    <description><![CDATA[   Deletes the calendar named calendar .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="MCAL_2" />
      <property ref="ICAP_3" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_delete_event">
    <description><![CDATA[    mcal_delete_event deletes the calendar event  specified by the event_id.]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_1" />
      <property ref="ICAP_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_add_attribute">
    <description><![CDATA[    mcal_event_add_attribute adds an attribute  to the stream's global event structure with the value given by  "value".  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="MCAL_2" />
      <property ref="LDAP_5" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_init">
    <description><![CDATA[    mcal_event_init initializes a streams global  event structure. this effectively sets all elements of the  structure to 0, or the default settings.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_alarm">
    <description><![CDATA[    mcal_event_set_alarm sets the streams global  event structure's alarm to the given minutes before the event.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property kind="parameter" name="alarm" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_category">
    <description><![CDATA[    mcal_event_set_category sets the streams  global event structure's category to the given string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property kind="parameter" name="category" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_class">
    <description><![CDATA[    mcal_event_set_class sets the streams global  event structure's class to the given value. The class is either 1  for public, or 0 for private.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property kind="parameter" name="class" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_description">
    <description><![CDATA[    mcal_event_set_description sets the streams  global event structure's description to the given string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property kind="parameter" name="description" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_end">
    <description><![CDATA[    mcal_event_set_end sets the streams global  event structure's end date and time to the given values.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="Date/Time_8" />
      <property kind="parameter" name="min" type="int"  />
      <property kind="parameter" name="sec" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_recur_daily">
    <description><![CDATA[    mcal_event_set_recur_daily sets the streams  global event structure's recurrence to the given value to be  reoccurring on a daily basis, ending at the given date.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property kind="parameter" name="interval" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_recur_monthly_mday">
    <description><![CDATA[    mcal_event_set_recur_monthly_mday sets the  streams global event structure's recurrence to the given value to  be reoccurring on a monthly by month day basis, ending at the  given date.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="MCAL_16" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_recur_monthly_wday">
    <description><![CDATA[    mcal_event_set_recur_monthly_wday sets the  streams global event structure's recurrence to the given value to  be reoccurring on a monthly by week basis, ending at the given  date.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="MCAL_16" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_recur_none">
    <description><![CDATA[    mcal_event_set_recur_none sets the streams  global event structure to not recur (event->recur_type is set to   ).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_recur_weekly">
    <description><![CDATA[    mcal_event_set_recur_weekly sets the streams  global event structure's recurrence to the given value to be  reoccurring on a weekly basis, ending at the given date.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="MCAL_16" />
      <property kind="parameter" name="weekdays" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_recur_yearly">
    <description><![CDATA[    mcal_event_set_recur_yearly sets the streams  global event structure's recurrence to the given value to be  reoccurring on a yearly basis,ending at the given date.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="MCAL_16" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_start">
    <description><![CDATA[    mcal_event_set_start sets the streams global  event structure's start date and time to the given values.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="Calendar_3" />
      <property ref="Calendar_2" />
      <property ref="Calendar_6" />
      <property ref="Date/Time_8" />
      <property ref="MCAL_14" />
      <property ref="MCAL_15" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_event_set_title">
    <description><![CDATA[    mcal_event_set_title sets the streams global  event structure's title to the given string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property ref="ClibPDF_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_expunge">
    <description><![CDATA[    mcal_expunge deletes all events which have  been previously marked for deletion.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_fetch_current_stream_event">
    <description><![CDATA[    mcal_fetch_current_stream_event  returns the current stream's event structure as an object  containing:      All datetime entries consist of an object that contains:     ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="MCAL_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_fetch_event">
    <description><![CDATA[    mcal_fetch_event fetches an event from the  calendar stream specified by id .  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="MCAL_1" />
      <property ref="ICAP_5" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_is_leap_year">
    <description><![CDATA[    mcal_is_leap_year returns 1 if the given  year is a leap year, 0 if not.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_list_alarms">
    <description><![CDATA[  Returns an array of event ID's that has an alarm going off  between the start and end dates, or if just a stream is given,  uses the start and end dates in the global event structure.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="MCAL_1" />
      <property kind="parameter" name="begin_year" type="int"  />
      <property kind="parameter" name="begin_month" type="int" required="1" />
      <property kind="parameter" name="begin_day" type="int" required="1" />
      <property kind="parameter" name="end_year" type="int" required="1" />
      <property kind="parameter" name="end_month" type="int" required="1" />
      <property kind="parameter" name="end_day" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_list_events">
    <description><![CDATA[  Returns an array of ID's that are between the start and end  dates, or if just a stream is given, uses the start and end dates  in the global event structure.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="MCAL_1" />
      <property ref="MCAL_18" />
      <property ref="MCAL_19" />
      <property ref="MCAL_20" />
      <property ref="MCAL_21" />
      <property ref="MCAL_22" />
      <property ref="MCAL_23" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_next_recurrence">
    <description><![CDATA[    mcal_next_recurrence returns an object  filled with the next date the event occurs, on or after the  supplied date.  Returns empty date field if event does not occur  or something is invalid. Uses weekstart to determine what day is  considered the beginning of the week.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_2" />
      <property kind="parameter" name="weekstart" type="int" required="1" />
      <property kind="parameter" name="next" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_open">
    <description><![CDATA[  Returns an MCAL stream on success, on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ICAP_3" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_popen">
    <description><![CDATA[  Returns an MCAL stream on success, on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ICAP_3" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_rename_calendar">
    <description><![CDATA[   Renames the calendar old_name to   new_name .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="MCAL_2" />
      <property ref="ICAP_11" />
      <property ref="APD_13" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_reopen">
    <description><![CDATA[  Reopens an MCAL stream to a new calendar.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_1" />
      <property ref="ICAP_3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_snooze">
    <description><![CDATA[    mcal_snooze turns off an alarm for a  calendar event specified by the stream_id and   event_id .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ICAP_2" />
      <property ref="ICAP_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_store_event">
    <description><![CDATA[    mcal_store_event stores the modifications  to the current global event for the given stream.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_time_valid">
    <description><![CDATA[    mcal_time_valid Returns if the given  hour, minutes and seconds is a valid time, if not.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="hour" type="int" required="1" />
      <property kind="parameter" name="minutes" type="int" required="1" />
      <property kind="parameter" name="seconds" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcal_week_of_year">
    <description><![CDATA[   mcal_week_of_year returns the week number of the  given date.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Calendar_6" />
      <property ref="Calendar_2" />
      <property ref="Calendar_3" />
    </properties>
    
  </element>
</group>
<group name="MCVE">
  <description><![CDATA[MCVE Payment Functions]]></description>
  <element kind="function" name="mcve_adduser">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="conn" type="resource" required="1" />
      <property kind="parameter" name="admin_password" type="string" required="1" />
      <property kind="parameter" name="usersetup" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_adduserarg">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="usersetup" type="resource" required="1" />
      <property kind="parameter" name="argtype" type="int" required="1" />
      <property ref="CCVS_4" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_bt">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_checkstatus">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property kind="parameter" name="identifier" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_chkpwd">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_chngpwd">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_2" />
      <property kind="parameter" name="new_password" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_completeauthorizations">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property kind="parameter" name="array" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_connect">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_connectionerror">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_deleteresponse">
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_deletetrans">
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_deleteusersetup">
    <properties>
      <property ref="ret_void" />
      <property ref="MCVE_4" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_deluser">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_2" />
      <property ref="FTP_13" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_destroyconn">
    <properties>
      <property ref="ret_void" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_destroyengine">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_disableuser">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_2" />
      <property ref="FTP_13" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_edituser">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_2" />
      <property ref="MCVE_3" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_enableuser">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_2" />
      <property ref="FTP_13" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_force">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property kind="parameter" name="trackdata" type="string" required="1" />
      <property kind="parameter" name="account" type="string" required="1" />
      <property kind="parameter" name="expdate" type="string" required="1" />
      <property kind="parameter" name="amount" type="float" required="1" />
      <property kind="parameter" name="authcode" type="string" required="1" />
      <property kind="parameter" name="comments" type="string" required="1" />
      <property kind="parameter" name="clerkid" type="string" required="1" />
      <property kind="parameter" name="stationid" type="string" required="1" />
      <property kind="parameter" name="ptrannum" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_getcell">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
      <property kind="parameter" name="column" type="string" required="1" />
      <property kind="parameter" name="row" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_getcellbynum">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
      <property kind="parameter" name="column" type="int" required="1" />
      <property ref="MCVE_19" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_getcommadelimited">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_getheader">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
      <property kind="parameter" name="column_num" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_getuserarg">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_4" />
      <property ref="MCVE_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_getuserparam">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
      <property kind="parameter" name="key" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_gft">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="COM_27" />
      <property ref="MCVE_10" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_14" />
      <property ref="MCVE_17" />
      <property kind="parameter" name="startdate" type="string" required="1" />
      <property kind="parameter" name="enddate" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_gl">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="conn" type="int" required="1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="COM_27" />
      <property ref="MCVE_10" />
      <property kind="parameter" name="batch" type="string" required="1" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_14" />
      <property ref="MCVE_17" />
      <property ref="MCVE_23" />
      <property ref="MCVE_24" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_gut">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="COM_27" />
      <property ref="MCVE_10" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_14" />
      <property ref="MCVE_17" />
      <property ref="MCVE_23" />
      <property ref="MCVE_24" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_initconn">
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_initengine">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="location" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_initusersetup">
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_iscommadelimited">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_liststats">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_listusers">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_maxconntimeout">
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
      <property kind="parameter" name="secs" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_monitor">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_numcolumns">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_numrows">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_override">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="MCVE_9" />
      <property ref="MCVE_10" />
      <property ref="MCVE_11" />
      <property ref="MCVE_12" />
      <property kind="parameter" name="street" type="string" required="1" />
      <property kind="parameter" name="zip" type="string" required="1" />
      <property kind="parameter" name="cv" type="string" required="1" />
      <property ref="MCVE_14" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_17" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_parsecommadelimited">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_ping">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_preauth">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="MCVE_9" />
      <property ref="MCVE_10" />
      <property ref="MCVE_11" />
      <property ref="MCVE_12" />
      <property ref="MCVE_29" />
      <property ref="MCVE_30" />
      <property ref="MCVE_31" />
      <property ref="MCVE_14" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_17" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_preauthcompletion">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property kind="parameter" name="finalamount" type="float" required="1" />
      <property ref="DB++_22" />
      <property ref="MCVE_17" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_qc">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_14" />
      <property ref="MCVE_17" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_responseparam">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
      <property ref="DB++_11" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_return">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_25" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="MCVE_9" />
      <property ref="MCVE_10" />
      <property ref="MCVE_11" />
      <property ref="MCVE_12" />
      <property ref="MCVE_14" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_17" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_returncode">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_returnstatus">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_sale">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="MCVE_9" />
      <property ref="MCVE_10" />
      <property ref="MCVE_11" />
      <property ref="MCVE_12" />
      <property ref="MCVE_29" />
      <property ref="MCVE_30" />
      <property ref="MCVE_31" />
      <property ref="MCVE_14" />
      <property ref="MCVE_15" />
      <property ref="MCVE_16" />
      <property ref="MCVE_17" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_setblocking">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property kind="parameter" name="tf" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_setdropfile">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_setip">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_4" />
      <property ref="APD_8" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_setssl">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_4" />
      <property ref="APD_8" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_setssl_files">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="sslkeyfile" type="string" required="1" />
      <property kind="parameter" name="sslcertfile" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_settimeout">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCAL_28" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_settle">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="MCVE_26" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_text_avs">
    <properties>
      <property ref="ret_string" />
      <property ref="Classkit_4" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_text_code">
    <properties>
      <property ref="ret_string" />
      <property ref="Classkit_4" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_text_cv">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="code" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactionauth">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactionavs">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactionbatch">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactioncv">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactionid">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactionitem">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactionssent">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transactiontext">
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transinqueue">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transnew">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transparam">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
      <property ref="MCVE_22" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_transsend">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="MCVE_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_ub">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_uwait">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="microsecs" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_verifyconnection">
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
      <property ref="MCVE_33" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_verifysslcert">
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
      <property ref="MCVE_33" />
    </properties>
    
  </element>
  <element kind="function" name="mcve_void">
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="DB++_22" />
      <property ref="MCVE_17" />
    </properties>
    
  </element>
</group>
<group name="MS SQL Server">
  <description><![CDATA[Microsoft SQL Server Functions]]></description>
  <element kind="function" name="mssql_bind">
    <description><![CDATA[  See also mssql_execute ,   mssql_free_statement , and   mssql_init .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="stmt" type="resource" required="1" />
      <property kind="parameter" name="param_name" type="string" required="1" />
      <property ref="Arrays_29" />
      <property ref="COM_27" />
      <property kind="parameter" name="is_output" type="int"  />
      <property kind="parameter" name="is_null" type="int"  />
      <property ref="Filesystem_11" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_close">
    <description><![CDATA[    mssql_close closes the link to a MS SQL  Server database that's associated with the specified link  identifier.  If the link identifier isn't specified, the last  opened link is assumed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_connect">
    <description><![CDATA[   Returns: A positive MS SQL link identifier on success, or  on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="servername" type="string"  />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_data_seek">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_32" />
      <property ref="FrontBase_10" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_execute">
    <description><![CDATA[  See also mssql_bind ,   mssql_free_statement , and   mssql_init .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_1" />
      <property kind="parameter" name="skip_results" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="mssql_fetch_array">
    <description><![CDATA[   Returns: An array that corresponds to the fetched row, or  if there are no more rows.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_fetch_assoc">
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_fetch_batch">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="result_index" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_fetch_field">
    <description><![CDATA[  Returns an object containing field information.  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_fetch_object">
    <description><![CDATA[   Returns: An object with properties that correspond to the fetched  row, or if there are no more rows.  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_fetch_row">
    <description><![CDATA[   Returns: An array that corresponds to the fetched row, or  if there are no more rows.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_field_length">
    <description><![CDATA[  This function returns the length of field no. offset in  result result . If offset is omitted,  the current field is used.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_field_name">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_field_seek">
    <description><![CDATA[  Seeks to the specified field offset.  If the next call to   mssql_fetch_field won't include a field  offset, this field would be returned.]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="field_offset" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_field_type">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_free_result">
    <description><![CDATA[   mssql_free_result only needs to be called  if you are worried about using too much memory while your script  is running. All result memory will automatically be freed when  the script ends. You may call mssql_free_result  with the result identifier as an argument and the associated  result memory will be freed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_free_statement">
    <description><![CDATA[   mssql_free_statement only needs to be called  if you are worried about using too much memory while your script  is running. All statement memory will automatically be freed when  the script ends. You may call mssql_free_statement  with the statement identifier as an argument and the associated  statement memory will be freed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="statement" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_get_last_message">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_guid_string">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="binary" type="string" required="1" />
      <property kind="parameter" name="short_format" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="mssql_init">
    <description><![CDATA[  See also mssql_bind ,   mssql_execute , and   mssql_free_statement  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="sp_name" type="string" required="1" />
      <property kind="parameter" name="conn_id" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="mssql_min_error_severity">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="severity" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_min_message_severity">
    <properties>
      <property ref="ret_void" />
      <property ref="MS SQL Server_14" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_next_result">
    <description><![CDATA[  When sending more than one SQL statement to the server or  executing a stored procedure with multiple results, it will cause  the server to return multiple result sets. This function will  test for additional results available form the server. If an  additional result set exists it will free the existing result set  and prepare to fetch the rows from the new result set. The  function will return if an additional result set was  available or otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = mssql_connect("localhost", "userid", "secret");
    mssql_select_db("MyDB", $link);
    $SQL = "Select * from table1 select * from table2";
    $rs = mssql_query($SQL, $link);
    do {
        while ($row = mssql_fetch_row($rs)) {
        }
    } while (mssql_next_result($rs));
    mssql_free_result($rs);
    mssql_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_num_fields">
    <description><![CDATA[    mssql_num_fields returns the number of  fields in a result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_num_rows">
    <description><![CDATA[   mssql_num_rows returns the number of rows in  a result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_pconnect">
    <description><![CDATA[   Returns: A positive MS SQL persistent link identifier on success,  or on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_5" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_query">
    <description><![CDATA[   Returns: A positive MS SQL result identifier on success, if no  rows were returned, or on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
      <property ref="FrontBase_17" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_result">
    <description><![CDATA[   mssql_result returns the contents of one  cell from a MS SQL result set.  The field argument can be the  field's offset, the field's name or the field's table dot  field's name (tablename.fieldname).  If the column name has been  aliased ('select foo as bar from...'), it uses the alias instead of  the column name.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MCVE_19" />
      <property kind="parameter" name="field" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_rows_affected">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="conn_id" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mssql_select_db">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $conn = mssql_connect('MYSQLSERVER', 'sa', 'password');
    mssql_select_db('[my data-base]', $conn);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
</group>
<group name="Mail">
  <description><![CDATA[Mail Functions]]></description>
  <element kind="function" name="ezmlm_hash">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$user = "joecool@example.com";
$hash = ezmlm_hash($user);
$query = sprintf("INSERT INTO sample VALUES (%s, '%s')", $hash, $user);
$db->query($query); // using PHPLIB db interface

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="addr" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mail">
    <description><![CDATA[  Sends an email.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// The message
$message = "Line 1\nLine 2\nLine 3";

// In case any of our lines are larger than 70 characters, we should use wordwrap()
$message = wordwrap($message, 70);

// Send
mail('caffinated@example.com', 'My Subject', $message);
?>

    

<?php
$to      = 'nobody@example.com';
$subject = 'the subject';
$message = 'hello';
$headers = 'From: webmaster@' . $_SERVER['SERVER_NAME'] . "\r\n" .
    'Reply-To: webmaster@' . $_SERVER['SERVER_NAME'] . "\r\n" .
    'X-Mailer: PHP/' . phpversion();

mail($to, $subject, $message, $headers);
?>

    

<?php
mail('nobody@example.com', 'the subject', 'the message', null,
   '-fwebmaster@' . $_SERVER['SERVER_NAME']);
?>

    

<?php
// multiple recipients
$to  = 'aidan@example.com' . ', '; // note the comma
$to .= 'wez@example.com';

// subject
$subject = 'Birthday Reminders for August';

// message
$message = '
<html>
<head>
  <title>Birthday Reminders for August</title>
</head>
<body>
  <p>Here are the birthdays upcoming in August!</p>
  <table>
    <tr>
      <th>Person</th><th>Day</th><th>Month</th><th>Year</th>
    </tr>
    <tr>
      <td>Joe</td><td>3rd</td><td>August</td><td>1970</td>
    </tr>
    <tr>
      <td>Sally</td><td>17th</td><td>August</td><td>1973</td>
    </tr>
  </table>
</body>
</html>
';

// To send HTML mail, the Content-type header must be set
$headers  = 'MIME-Version: 1.0' . "\r\n";
$headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";

// Additional headers
$headers .= 'To: Mary <mary@example.com>, Kelly <kelly@example.com>' . "\r\n";
$headers .= 'From: Birthday Reminder <birthday@example.com>' . "\r\n";
$headers .= 'Cc: birthdayarchive@example.com' . "\r\n";
$headers .= 'Bcc: birthdaycheck@example.com' . "\r\n";

// Mail it
mail($to, $subject, $message, $headers);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="IMAP_21" />
      <property ref="ClibPDF_62" />
      <property ref="Errors and Logging_1" />
      <property ref="IMAP_22" />
      <property kind="parameter" name="additional_parameters" type="string"  >
      <description>  The parameter  can be used to pass an additional parameter to the program configured  to use when sending mail using the  configuration setting. For example, this can be used to set the  envelope sender address when using sendmail with the   sendmail option.    The user that the webserver runs as should be added as a trusted user to the  sendmail configuration to prevent a 'X-Warning' header from being added  to the message when the envelope sender (-f) is set using this method.  For sendmail users, this file is .  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="Math">
  <description><![CDATA[Mathematical Functions]]></description>
  <element kind="function" name="abs">
    <description><![CDATA[  Returns the absolute value of number . If the  argument number is  of type , the return type is also ,  otherwise it is (as usually has a  bigger value range than ).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$abs = abs(-4.2); // $abs = 4.2; (double/float)
$abs2 = abs(5);   // $abs2 = 5; (integer)
$abs3 = abs(-5);  // $abs3 = 5; (integer)
?>]]></description>
      </property>
      <property ref="ret_number" />
      <property ref="GMP_7" />
    </properties>
    
  </element>
  <element kind="function" name="acos">
    <description><![CDATA[  Returns the arc cosine of arg in radians.   acos is the complementary function of   cos , which means that   for every value of a that is within   acos ' range.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property kind="parameter" name="arg" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="acosh">
    <description><![CDATA[  Returns the inverse hyperbolic cosine of   arg , i.e. the value whose  hyperbolic cosine is arg .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="asin">
    <description><![CDATA[  Returns the arc sine of arg in radians.   asin is the complementary function of   sin , which means that   for every value of a that is within   asin 's range.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="asinh">
    <description><![CDATA[  Returns the inverse hyperbolic sine of   arg , i.e. the value whose  hyperbolic sine is arg .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="atan">
    <description><![CDATA[  Returns the arc tangent of arg in radians.   atan is the complementary function of   tan , which means that   for every value of a that is within   atan 's range.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="atan2">
    <description><![CDATA[  See also acos and atan .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property kind="parameter" name="y" type="float" required="1" />
      <property kind="parameter" name="x" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="atanh">
    <description><![CDATA[  Returns the inverse hyperbolic tangent of   arg , i.e. the value whose  hyperbolic tangent is arg .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="base_convert">
    <description><![CDATA[  Returns a string containing number  represented in base tobase .  The base in  which number is given is specified in   frombase .  Both   frombase and tobase  have to be between 2 and 36, inclusive.  Digits in numbers with a  base higher than 10 will be represented with the letters a-z,  with a meaning 10, b meaning 11 and z meaning 35.    Outputs:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$hexadecimal = 'A37334';
echo base_convert($hexadecimal, 16, 2);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="number" type="string" required="1" />
      <property kind="parameter" name="frombase" type="int" required="1" />
      <property kind="parameter" name="tobase" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bindec">
    <description><![CDATA[  Returns the decimal equivalent of the binary number represented by  the binary_string argument.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo bindec('110011') . "\n";
echo bindec('000110011') . "\n";

echo bindec('111');
?>]]></description>
      </property>
      <property ref="ret_number" />
      <property kind="parameter" name="binary_string" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ceil">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo ceil(4.3);    // 5
echo ceil(9.999);  // 10
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="ClibPDF_65" />
    </properties>
    
  </element>
  <element kind="function" name="cos">
    <description><![CDATA[   cos returns the cosine of the arg  parameter.  The arg parameter is in radians.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo cos(M_PI); // -1

?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="cosh">
    <description><![CDATA[  Returns the hyperbolic cosine of arg ,  defined as .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="decbin">
    <description><![CDATA[  Returns a string containing a binary representation of the given   number argument.  The largest number that can be converted is  4294967295 in decimal resulting to a string of 32 1's.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo decbin(12) . "\n";
echo decbin(26);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="number" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dechex">
    <description><![CDATA[  Returns a string containing a hexadecimal representation of the  given number argument. The largest number that can  be converted is 4294967295 in decimal resulting to "ffffffff".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo dechex(10) . "\n";
echo dechex(47);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Math_8" />
    </properties>
    
  </element>
  <element kind="function" name="decoct">
    <description><![CDATA[  Returns a string containing an octal representation of the given   number argument.  The largest number that can be converted is  4294967295 in decimal resulting to "37777777777".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo decoct(15) . "\n";
echo decoct(264);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Math_8" />
    </properties>
    
  </element>
  <element kind="function" name="deg2rad">
    <description><![CDATA[  This function converts number from degrees  to the radian equivalent.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo deg2rad(45); // 0.785398163397
var_dump(deg2rad(45) === M_PI_4); // bool(true)

?>]]></description>
      </property>
      <property ref="ret_float" />
      <property kind="parameter" name="number" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="exp">
    <description><![CDATA[  Returns raised to the power of arg .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo exp(12) . "\n";
echo exp(5.7);
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="expm1">
    <description><![CDATA[   expm1 returns the equivalent to  'exp( number ) -  1' computed in a way that is  accurate even if the value of number is near zero,  a case where 'exp ( number ) - 1' would be  inaccurate due to subtraction of two numbers that are nearly equal.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_9" />
    </properties>
    
  </element>
  <element kind="function" name="floor">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo floor(4.3);   // 4
echo floor(9.999); // 9
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="ClibPDF_65" />
    </properties>
    
  </element>
  <element kind="function" name="fmod">
    <description><![CDATA[  Returns the floating point remainder of dividing the dividend  ( x ) by the divisor ( y ).  The reminder ( ) is defined as: x = i * y + r, for  some integer . If y is  non-zero, has the same sign as   x and a magnitude less than the magnitude of   y .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$x = 5.7;
$y = 1.3;
$r = fmod($x, $y);
// $r equals 0.5, because 4 * 1.3 + 0.5 = 5.7
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="getrandmax">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="hexdec">
    <description><![CDATA[  Returns the decimal equivalent of the hexadecimal number  represented by the hex_string argument.   hexdec converts a hexadecimal string to a  decimal number. The largest number that can be converted is  7fffffff or 2147483647 in decimal.  As of PHP 4.1.0, this function can also convert larger numbers. It returns   in that case.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
var_dump(hexdec("See"));
var_dump(hexdec("ee"));
// both print "int(238)"

var_dump(hexdec("that")); // print "int(10)"
var_dump(hexdec("a0")); // print "int(160)"
?>]]></description>
      </property>
      <property ref="ret_number" />
      <property kind="parameter" name="hex_string" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="hypot">
    <description><![CDATA[   hypot returns the length of the hypotenuse of a  right-angle triangle with sides of length x and   y , or the distance of the point  ( x , y ) from the origin.  This is equivalent to .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="is_finite">
    <description><![CDATA[  Returns if val is a legal finite  number within the allowed range for a PHP float on this platform.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="val" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="is_infinite">
    <description><![CDATA[  Returns if val is infinite (positive or  negative), like the result of or any value too  big to fit into a float on this platform.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Math_11" />
    </properties>
    
  </element>
  <element kind="function" name="is_nan">
    <description><![CDATA[  Returns if val is 'not a number',  like the result of .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Math_11" />
    </properties>
    
  </element>
  <element kind="function" name="lcg_value">
    <description><![CDATA[   lcg_value returns a pseudo random number in  the range of (0, 1).  The function combines two CGs with periods  of 2^31 - 85 and 2^31 - 249. The period of this function is equal  to the product of both primes.  ]]></description>
    <properties>
      <property ref="ret_float" />
    </properties>
    
  </element>
  <element kind="function" name="log">
    <description><![CDATA[  If the optional base parameter is specified,   log returns log   arg , otherwise log   returns the natural logarithm of arg .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
      <property kind="parameter" name="base" type="float"  />
    </properties>
    
  </element>
  <element kind="function" name="log10">
    <description><![CDATA[  Returns the base-10 logarithm of arg .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="log1p">
    <description><![CDATA[   log1p returns log(1 +   number ) computed in a way that is accurante even  when the value of number is close to zero.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_9" />
    </properties>
    
  </element>
  <element kind="function" name="max">
    <description><![CDATA[   max returns the numerically highest of the  parameter values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo max(1, 3, 5, 6, 7);  // 7
echo max(array(2, 4, 5)); // 5

echo max(0, 'hello');     // 0
echo max('hello', 0);     // hello
echo max(-1, 'hello');    // hello

// With multiple arrays, max compares from left to right
// so in our example: 2 == 2, but 4 < 5
$val = max(array(2, 4, 8), array(2, 5, 7)); // array(2, 5, 7)

// If both an array and non-array are given, the array
// is always returned as it's seen as the largest
$val = max('string', array(2, 5, 7), 42);   // array(2, 5, 7)
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="arg1" type="number" required="1" />
      <property kind="parameter" name="arg2" type="number" required="1" />
      <property kind="parameter" name="..." type="number"  />
      <property kind="parameter" name="numbers" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="min">
    <description><![CDATA[   min returns the numerically lowest of the  parameter values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo min(2, 3, 1, 6, 7);  // 1
echo min(array(2, 4, 5)); // 2

echo min(0, 'hello');     // 0
echo min('hello', 0);     // hello
echo min('hello', -1);    // -1

// With multiple arrays, min compares from left to right
// so in our example: 2 == 2, but 4 < 5
$val = min(array(2, 4, 8), array(2, 5, 1)); // array(2, 4, 8)

// If both an array and non-array are given, the array
// is never returned as it's considered the largest
$val = min('string', array(2, 5, 7), 42);   // string
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Math_13" />
      <property ref="Math_14" />
      <property ref="Math_15" />
      <property ref="Math_16" />
    </properties>
    
  </element>
  <element kind="function" name="mt_getrandmax">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="mt_rand">
    <description><![CDATA[    The above example will output something similar to:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo mt_rand() . "\n";
echo mt_rand() . "\n";

echo mt_rand(5, 15);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MCAL_14" />
      <property kind="parameter" name="max" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mt_srand">
    <description><![CDATA[  Seeds the random number generator with   seed .  Since PHP 4.2.0, the seed  becomes optional and defaults to a random value if omitted.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// seed with microseconds
function make_seed()
{
    list($usec, $sec) = explode(' ', microtime());
    return (float) $sec + ((float) $usec * 100000);
}
mt_srand(make_seed());
$randval = mt_rand();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="seed" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="octdec">
    <description><![CDATA[  Returns the decimal equivalent of the octal number  represented by the octal_string argument.  The largest number that can be converted is 17777777777 or 2147483647 in  decimal.  As of PHP 4.1.0, this function can also convert larger numbers. It returns   in that case.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo octdec('77') . "\n";
echo octdec(decoct(45));
?>]]></description>
      </property>
      <property ref="ret_number" />
      <property kind="parameter" name="octal_string" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pi">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo pi(); // 3.1415926535898
echo M_PI; // 3.1415926535898
?>]]></description>
      </property>
      <property ref="ret_float" />
    </properties>
    
  </element>
  <element kind="function" name="pow">
    <description><![CDATA[  Returns base raised to the power of   exp . If possible, this function will  return an .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

var_dump(pow(2, 8)); // int(256)
echo pow(-1, 20); // 1
echo pow(0, 0); // 1

echo pow(-1, 5.5); // error

?>]]></description>
      </property>
      <property ref="ret_number" />
      <property kind="parameter" name="base" type="number" required="1" />
      <property kind="parameter" name="exp" type="number" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="rad2deg">
    <description><![CDATA[  This function converts number from radian  to degrees.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo rad2deg(M_PI_4); // 45

?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_9" />
    </properties>
    
  </element>
  <element kind="function" name="rand">
    <description><![CDATA[    The above example will output something similar to:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo rand() . "\n";
echo rand() . "\n";

echo rand(5, 15);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MCAL_14" />
      <property ref="Math_17" />
    </properties>
    
  </element>
  <element kind="function" name="round">
    <description><![CDATA[  Returns the rounded value of val to  specified precision  (number of digits after the decimal point).   precision can also be negative or zero (default).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo round(3.4);         // 3
echo round(3.5);         // 4
echo round(3.6);         // 4
echo round(3.6, 0);      // 4
echo round(1.95583, 2);  // 1.96
echo round(1241757, -3); // 1242000
echo round(5.045, 2);    // 5.05
echo round(5.055, 2);    // 5.06
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_11" />
      <property kind="parameter" name="precision" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="sin">
    <description><![CDATA[   sin returns the sine of the arg  parameter.  The arg parameter is in radians.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Precision depends on your precision directive
echo sin(deg2rad(60));  //  0.866025403 ...
echo sin(60);           // -0.304810621 ...

?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="sinh">
    <description><![CDATA[  Returns the hyperbolic sine of arg ,  defined as .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="sqrt">
    <description><![CDATA[  Returns the square root of arg .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Precision depends on your precision directive
echo sqrt(9); // 3
echo sqrt(10); // 3.16227766 ...
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="srand">
    <description><![CDATA[  Seeds the random number generator with seed .  Since PHP 4.2.0, the seed  becomes optional and defaults to a random value if omitted.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// seed with microseconds
function make_seed()
{
    list($usec, $sec) = explode(' ', microtime());
    return (float) $sec + ((float) $usec * 100000);
}
srand(make_seed());
$randval = rand();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Math_18" />
    </properties>
    
  </element>
  <element kind="function" name="tan">
    <description><![CDATA[   tan returns the tangent of the arg  parameter.  The arg parameter is in radians.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo tan(M_PI_4); // 1

?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
  <element kind="function" name="tanh">
    <description><![CDATA[  Returns the hyperbolic tangent of arg ,  defined as .  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="Math_1" />
    </properties>
    
  </element>
</group>
<group name="MaxDB">
  <description><![CDATA[MaxDB PHP Extension]]></description>
  <element kind="function" name="maxdb_affected_rows">
    <description><![CDATA[   maxdb_affected_rows returns the number of rows affected by the last  INSERT, UPDATE, or DELETE query associated with the provided link  parameter. If this number cannot be determined, this function will return -1.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

if (!$link) {
   printf("Can't connect to localhost. Error: %s\n", maxdb_connect_error());
   exit();
}

maxdb_report (MAXDB_REPORT_OFF);
maxdb_query($link,"DROP TABLE mycustomer");
maxdb_report (MAXDB_REPORT_ERROR);

/* Insert rows */
maxdb_query($link, "CREATE TABLE mycustomer AS SELECT * from hotel.customer");
printf("Affected rows (INSERT): %d\n", maxdb_affected_rows($link));

maxdb_query($link, "ALTER TABLE mycustomer ADD Status int default 0");

/* update rows */
maxdb_query($link, "UPDATE mycustomer SET Status=1 WHERE cno > 50");
printf("Affected rows (UPDATE): %d\n", maxdb_affected_rows($link));

/* delete rows */
maxdb_query($link, "DELETE FROM mycustomer WHERE cno < 50");
printf("Affected rows (DELETE): %d\n", maxdb_affected_rows($link));

/* select all rows */
$result = maxdb_query($link, "SELECT title FROM mycustomer");
printf("Affected rows (SELECT): %d\n", maxdb_affected_rows($link));

maxdb_free_result($result);

/* Delete table Language */
maxdb_query($link, "DROP TABLE mycustomer");

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_autocommit">
    <description><![CDATA[   maxdb_autocommit is used to turn on or off auto-commit mode  on queries for the database connection represented by the link  resource.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

if (!$link) {
   printf("Can't connect to localhost. Error: %s\n", maxdb_connect_error());
   exit();
}

/* turn autocommit on */
maxdb_autocommit($link, TRUE);

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property kind="parameter" name="mode" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_change_user">
    <description><![CDATA[   maxdb_change_user is used to change the user of the specified  database connection as given by the link parameter and to set the  current database to that specified by the database parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (!$link) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

if ($result = maxdb_query($link, "SELECT * FROM dual")) {
   $row = maxdb_fetch_row($result);
   printf("Result: %s\n", $row[0]);
   maxdb_free_result($result);
}

/* reset all and select a new database */
if (!maxdb_change_user($link, $user, $passwd, "XXXXXXX")) {
  printf("Database not running\n");
} else {
  printf("Database running\n");
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property ref="Firebird/InterBase_17" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_character_set_name">
    <description><![CDATA[  Returns the current character set for the database connection specified by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (!$link) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* Print current character set */
$charset = maxdb_character_set_name($link);
printf ("Current character set is %s\n",$charset);

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_close">
    <description><![CDATA[  The maxdb_close function closes a previously opened database  connection specified by the link parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_commit">
    <description><![CDATA[  Commits the current transaction for the database connection specified by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (!$link) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* set autocommit to off */
maxdb_autocommit($link, FALSE);

maxdb_report (MAXDB_REPORT_OFF);
maxdb_query($link,"DROP TABLE mycustomer");
maxdb_report (MAXDB_REPORT_ERROR);

maxdb_query($link, "CREATE TABLE mycustomer LIKE hotel.customer");

/* Insert some values */
maxdb_query($link, "INSERT INTO mycustomer VALUES (3000,'Mrs','Jenny','Porter','10580','1340 N.Ash Street, #3')");
maxdb_query($link, "INSERT INTO mycustomer VALUES (3100,'Mr','Peter','Brown','48226','1001 34th Str., APT.3')");

/* commit transaction */
maxdb_commit($link);

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_connect">
    <description><![CDATA[  The maxdb_connect function attempts to open a connection to the MaxDB Server  running on host which can be either a host name or an IP address. Passing the  string "localhost" to this parameter, the local host is assumed.  If successful, the maxdb_connect  will return an resource representing the connection to the database, or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (!$link) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

printf("Host information: %s\n", maxdb_get_host_info($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_10" />
      <property ref="Firebird/InterBase_18" />
      <property kind="parameter" name="passwd" type="string"  />
      <property kind="parameter" name="dbname" type="string"  />
      <property ref="FTP_5" />
      <property kind="parameter" name="socket" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_connect_errno">
    <description><![CDATA[  The maxdb_connect_errno function will return the last error code number  for last call to maxdb_connect .  If no errors have occured, this function will return zero.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

if (!$link) {
   printf("Can't connect to localhost. Errorcode: %d\n", maxdb_connect_errno());
}
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_connect_error">
    <description><![CDATA[  The maxdb_connect_error function is identical to the corresponding   maxdb_connect_errno function in every way, except instead of returning  an integer error code the maxdb_connect_error function will return  a string representation of the last error to occur for the last   maxdb_connect call.  If no error has occured, this function will return an empty string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$link = maxdb_connect("localhost", "nonexisting_user", "");

if (!$link) {
   printf("Can't connect to localhost. Error: %s\n", maxdb_connect_error());
}
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_data_seek">
    <description><![CDATA[  The maxdb_data_seek function seeks to an arbitrary result pointer  specified by the offset in the result set represented by   result . The offset parameter must be between  zero and the total number of rows minus one (0.. maxdb_num_rows - 1).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (!$link) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, state FROM hotel.city ORDER BY name";

if ($result = maxdb_query($link, $query)) {

   /* seek to row no. 400 */
   maxdb_data_seek($result, 10);

   /* fetch row */
   $row = maxdb_fetch_row($result);

   printf ("City: %s  State: %s\n", $row[0], $row[1]);
       
   /* free result set*/
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_debug">
    <description><![CDATA[ maxdb_debug doesn't return any value.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
   
/* Create a trace file in '/tmp/client.trace' on the local (client) machine: */
/* NOTE: Does nothing in case of MaxDB */
maxdb_debug("d:t:0,/tmp/client.trace");
   
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="debug" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_disable_reads_from_master">
    <properties>
      <property ref="ret_void" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_disable_rpl_parse">
    <properties>
      <property ref="ret_void" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_dump_debug_info">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_embedded_connect">
    <properties>
      <property ref="ret_resource" />
      <property ref="MaxDB_3" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_enable_reads_from_master">
    <properties>
      <property ref="ret_void" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_enable_rpl_parse">
    <properties>
      <property ref="ret_void" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_errno">
    <description><![CDATA[  The maxdb_errno function will return the last error code for  the most recent MaxDB function call that can succeed or fail with respect to the  database link defined by the link parameter. If no errors  have occured, this function will return zero.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

if (!maxdb_query($link, "SELECT xxx FROM hotel.city")) {
   printf("Errorcode: %d\n", maxdb_errno($link));
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_error">
    <description><![CDATA[  The maxdb_error function is identical to the corresponding   maxdb_errno function in every way, except instead of returning  an integer error code the maxdb_error function will return  a string representation of the last error to occur for the database connection  represented by the link parameter. If no error has occured,  this function will return an empty string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

if (!maxdb_query($link, "SELECT xxx FROM hotel.city")) {
   printf("Errormessgae: %s\n", maxdb_error($link));
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_array">
    <description><![CDATA[  Returns an array that corresponds to the fetched row or if there are no more rows for the  resultset represented by the result parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, state FROM hotel.city ORDER by zip";
$result = maxdb_query($link, $query);

/* numeric array */
$row = maxdb_fetch_array($result, MAXDB_NUM);
printf ("%s (%s)\n", $row[0], $row[1]);  

/* associative array */
$row = maxdb_fetch_array($result, MAXDB_ASSOC);
printf ("%s (%s)\n", $row["NAME"], $row["STATE"]);  

/* associative and numeric array */
$row = maxdb_fetch_array($result, MAXDB_BOTH);
printf ("%s (%s)\n", $row[0], $row["STATE"]);  

/* free result set */
maxdb_free_result($result);

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="resulttype" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_assoc">
    <description><![CDATA[  Returns an associative array that corresponds to the fetched row or if there are  no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, state FROM hotel.city ORDER by zip";

if ($result = maxdb_query($link, $query)) {

   /* fetch associative array */
   while ($row = maxdb_fetch_assoc($result)) {
       printf ("%s (%s)\n", $row["NAME"], $row["STATE"]);
   }

   /* free result set */
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_field">
    <description><![CDATA[  The maxdb_fetch_field returns the definition of one column  of a result set as an resource. Call this function repeatedly to retrieve  information about all columns in the result set.   maxdb_fetch_field returns when no more fields  are left.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, cno from hotel.customer ORDER BY cno";

if ($result = maxdb_query($link, $query)) {

   /* Get field information for all fields */
   while ($finfo = maxdb_fetch_field($result)) {
 
       printf("Name:     %s\n", $finfo->name);
       printf("Table:    %s\n", $finfo->table);
       printf("max. Len: %d\n", $finfo->max_length);
       printf("Flags:    %d\n", $finfo->flags);
       printf("Type:     %d\n\n", $finfo->type);
   }
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_field_direct">
    <description><![CDATA[   maxdb_fetch_field_direct returns an resource which contains  field definition informations from specified resultset. The value of fieldnr must be in the  range from to .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, cno from hotel.customer ORDER BY name";

if ($result = maxdb_query($link, $query)) {

   /* Get field information for column 'cno' */
   $finfo = maxdb_fetch_field_direct($result, 1);
 
   printf("Name:     %s\n", $finfo->name);
   printf("Table:    %s\n", $finfo->table);
   printf("max. Len: %d\n", $finfo->max_length);
   printf("Flags:    %d\n", $finfo->flags);
   printf("Type:     %d\n", $finfo->type);

   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="fieldnr" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_fields">
    <description><![CDATA[  This function serves an identical purpose to the maxdb_fetch_field  function with the single difference that, instead of returning one resource at a time for  each field, the columns are returned as an array of resources.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, cno from hotel.customer ORDER BY cno";

if ($result = maxdb_query($link, $query)) {

   /* Get field information for all columns */
   $finfo = maxdb_fetch_fields($result);
 
   for ($i=0; $i < count($finfo); $i++) { 
       printf("Name:     %s\n", $finfo[$i]->name);
       printf("Table:    %s\n", $finfo[$i]->table);
       printf("max. Len: %d\n", $finfo[$i]->max_length);
       printf("Flags:    %d\n", $finfo[$i]->flags);
       printf("Type:     %d\n\n", $finfo[$i]->type);
   }    
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_lengths">
    <description><![CDATA[  The maxdb_fetch_lengths function returns an array containing the  lengths of every column of the current row within the result set represented by the   result parameter. If successful, a numerically indexed array  representing the lengths of each column is returned or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT * from hotel.customer WHERE cno = 3000";

if ($result = maxdb_query($link, $query)) {

   $row = maxdb_fetch_row($result);

   /* display column lengths */
   $lengths = maxdb_fetch_lengths($result);
   for ($i=0; $i < count($lengths); $i++) {
       printf("Field %2d has Length %2d\n", $i+1, $lengths[$i]);
   }
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_resource">
    <description><![CDATA[  The maxdb_fetch_resource will return the current row result set  as an resource where the attributes of the resource represent the names of the fields found  within the result set. If no more rows exist in the current result set, is returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, state FROM hotel.city ORDER by zip";

if ($result = maxdb_query($link, $query)) {

   /* fetch associative array */
   while ($obj = maxdb_fetch_object($result)) {
       printf ("%s (%s)\n", $obj->NAME, $obj->STATE);
   }

   /* free result set */
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_fetch_row">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, state FROM hotel.city ORDER by zip";

if ($result = maxdb_query($link, $query)) {

   /* fetch associative array */
   while ($row = maxdb_fetch_row($result)) {
       printf ("%s (%s)\n", $row[0], $row[1]);
   }

   /* free result set */
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_field_count">
    <description><![CDATA[  Returns the number of columns for the most recent query on the connection  represented by the link parameter. This function  can be useful when using the maxdb_store_result  function to determine if the query should have produced a non-empty result  set or not without knowing the nature of the query.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

maxdb_report (MAXDB_REPORT_OFF);
maxdb_query($link,"DROP TABLE friends");
maxdb_report (MAXDB_REPORT_ERROR);

maxdb_query($link, "CREATE TABLE friends (id int, name varchar(20))"); 
 
maxdb_query($link, "INSERT INTO friends VALUES (1,'Hartmut')");
maxdb_query($link, "INSERT INTO friends VALUES (2, 'Ulf')");

if (maxdb_field_count($link)) {
   /* this was a select/show or describe query */
   $result = maxdb_store_result($link);
   
   /* process resultset */
   $row = maxdb_fetch_row($result);

   /* free resultset */
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_field_seek">
    <description><![CDATA[  Sets the field cursor to the given offset. The next call to maxdb_fetch_field  will retrieve the field definition of the column associated with that offset.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, cno from hotel.customer ORDER BY cno";

if ($result = maxdb_query($link, $query)) {

   /* Get field information for 2nd column */
   maxdb_field_seek($result, 1);
   $finfo = maxdb_fetch_field($result);
 
   printf("Name:     %s\n", $finfo->name);
   printf("Table:    %s\n", $finfo->table);
   printf("max. Len: %d\n", $finfo->max_length);
   printf("Flags:    %d\n", $finfo->flags);
   printf("Type:     %d\n\n", $finfo->type);

   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MaxDB_7" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_field_tell">
    <description><![CDATA[   Returns the position of the field cursor used for the last   maxdb_fetch_field call. This value can  be used as an argument to maxdb_field_seek .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, cno from hotel.customer ORDER BY cno";

if ($result = maxdb_query($link, $query)) {

   /* Get field information for all fields */
   while ($finfo = maxdb_fetch_field($result)) {
 
       /* get fieldpointer offset */
       $currentfield = maxdb_field_tell($result);

       printf("Column    %d:\n", $currentfield); 
       printf("Name:     %s\n", $finfo->name);
       printf("Table:    %s\n", $finfo->table);
       printf("max. Len: %d\n", $finfo->max_length);
       printf("Flags:    %d\n", $finfo->flags);
       printf("Type:     %d\n\n", $finfo->type);
   }
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_free_result">
    <description><![CDATA[  The maxdb_free_result function frees the memory  associated with the result represented by the   result parameter, which was allocated by   maxdb_query , maxdb_store_result  or maxdb_use_result .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_get_client_info">
    <description><![CDATA[  The maxdb_get_client_info function is used to  return a string representing the client version being used in the  MaxDB extension.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* We don't need a connection to determine
   the version of MaxDB client library */

printf("Client library version: %s\n", maxdb_get_client_info());
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_get_client_version">
    <description><![CDATA[  Returns client version number as an integer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* We don't need a connection to determine
   the version of MaxDB client library */

printf("Client library version: %d\n", maxdb_get_client_version());
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_get_host_info">
    <description><![CDATA[  The maxdb_get_host_info function returns a string  describing the connection represented by the link  parameter is using.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* print host information */
printf("Host info: %s\n", maxdb_get_host_info($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_get_proto_info">
    <description><![CDATA[  Returns an integer representing the MaxDB protocol version used by the  connection represented by the link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* print protocol version */
printf("Protocol version: %d\n", maxdb_get_proto_info($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_get_server_info">
    <description><![CDATA[  Returns a string representing the version of the MaxDB server that the  MaxDB extension is connected to (represented by the   link parameter).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* print server version */
printf("Server version: %s\n", maxdb_get_server_info($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_get_server_version">
    <description><![CDATA[  The maxdb_get_server_version function returns the  version of the server connected to (represented by the   link parameter) as an integer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* print server version */
printf("Server version: %d\n", maxdb_get_server_version($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_info">
    <description><![CDATA[  The maxdb_info function returns a string providing  information about the last query executed. The nature of this string is  provided below:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_query($link, "CREATE TABLE temp.t1 LIKE hotel.city");

/* INSERT INTO .. SELECT */
maxdb_query($link, "INSERT INTO temp.t1 SELECT * FROM hotel.city");
printf("%s\n", maxdb_info($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_init">
    <description><![CDATA[  Allocates or initializes a MaxDB resource suitable for   maxdb_options and maxdb_real_connect .  ]]></description>
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_insert_id">
    <description><![CDATA[  The maxdb_insert_id function returns the ID generated  by a query on a table with a column having the DEFAULT SERIAL attribute. If  the last query wasn't an INSERT or UPDATE statement or if the modified table  does not have a column with the DEFAULT SERIAL attribute, this function will  return zero.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_report (MAXDB_REPORT_OFF);
maxdb_query($link,"DROP TABLE mycity");
maxdb_report (MAXDB_REPORT_ERROR);

maxdb_query($link, "CREATE TABLE mycity LIKE hotel.city");
maxdb_query($link, "ALTER TABLE mycity ADD id FIXED(11) DEFAULT SERIAL");

$query = "INSERT INTO mycity (zip,name,state) VALUES ('12203','Albany' ,'NY')";
maxdb_query($link, $query);

printf ("New Record has id %d.\n", maxdb_insert_id($link));

/* drop table */
maxdb_query($link, "DROP TABLE mycity");

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_kill">
    <description><![CDATA[  This function is used to disconnect from a MaxDB server specified  by the processid parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* determine our thread id */
$thread_id = maxdb_thread_id($link);

/* Kill connection */
maxdb_kill($link, $thread_id);

/* This should produce an error */
if (!maxdb_query($link, "CREATE TABLE myCity LIKE City")) {
   printf("Error: %s\n", maxdb_error($link));
   exit;
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property kind="parameter" name="processid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_master_query">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_more_results">
    <description><![CDATA[   maxdb_more_results indicates if one or more result sets  are available from a previous call to maxdb_multi_query .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_multi_query">
    <description><![CDATA[  The maxdb_multi_query works like the function   maxdb_query . Multiple queries are not yet supported.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT * FROM dual";
$query .= "SELECT name FROM hotel.city ORDER BY zip";

/* execute multi query */
if (maxdb_multi_query($link, $query)) {
   do {
       /* store first result set */
       if ($result = maxdb_store_result($link)) {
           while ($row = maxdb_fetch_row($result)) {
               printf("%s\n", $row[0]);
           }
           maxdb_free_result($result);
       }
       /* print divider */
       if (maxdb_more_results($link)) {
           printf("-----------------\n");
       }
   } while (maxdb_next_result($link));
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_next_result">
    <description><![CDATA[  Since multiple queries are not yet supported, maxdb_next_result   returns always .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_num_fields">
    <description><![CDATA[   maxdb_num_fields returns the number of fields from specified result set.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

if ($result = maxdb_query($link, "SELECT * FROM hotel.city ORDER BY zip")) {

   /* determine number of fields in result set */
   $field_cnt = maxdb_num_fields($result);

   printf("Result set has %d fields.\n", $field_cnt);

   /* close result set */
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_num_rows">
    <description><![CDATA[  Returns the number of rows in the result set.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

if ($result = maxdb_query($link, "SELECT cno, name FROM hotel.customer ORDER BY name")) {

   /* determine number of rows result set */
   $row_cnt = maxdb_num_rows($result);

   printf("Result set has %d rows.\n", $row_cnt);

   /* close result set */
   maxdb_free_result($result);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_options">
    <description><![CDATA[   maxdb_options can be used to set extra connect options  and affect behavior for a connection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="CURL_7" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_ping">
    <description><![CDATA[  Checks whether the connection to the server is working. If it has gone  down, and global option is enabled  an automatic reconnection is attempted.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* check if server is alive */
if (maxdb_ping($link)) {
   printf ("Our connection is ok!\n");
} else {
   printf ("Error: %s\n", maxdb_error($link));
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_prepare">
    <description><![CDATA[   maxdb_prepare prepares the SQL query pointed to by the  null-terminated string query, and returns a statement handle to be used for  further operations on the statement. The query must consist of a single SQL statement.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$city = "Rosemont";

/* create a prepared statement */
if ($stmt = maxdb_prepare($link, "SELECT state FROM hotel.city WHERE name=?")) {

   /* bind parameters for markers */
   maxdb_stmt_bind_param($stmt, "s", $city);

   /* execute query */
   maxdb_stmt_execute($stmt);

  /* bind result variables */
   maxdb_stmt_bind_result($stmt, $district);

   /* fetch value */
   maxdb_stmt_fetch($stmt);

   printf("%s is in district %s\n", $city, $district);

   /* close statement */
   maxdb_stmt_close($stmt);
} 

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="LDAP_9" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_query">
    <description><![CDATA[  The maxdb_query function is used to simplify the  act of performing a query against the database represented by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* Create table doesn't return a resultset */
if (maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city") === TRUE) {
   printf("Table mycity successfully created.\n");
}

/* Select queries return a resultset */
if ($result = maxdb_query($link, "SELECT name FROM hotel.city")) {
   printf("Select returned %d rows.\n", maxdb_num_rows($result));

   /* free result set */
   maxdb_free_result($result);
}

/* If we have to retrieve large amount of data we use MAXDB_USE_RESULT */
if ($result = maxdb_query($link, "SELECT * FROM hotel.city", MAXDB_USE_RESULT)) {
   maxdb_free_result($result);
}

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="LDAP_9" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="resultmode" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_real_connect">
    <description><![CDATA[   maxdb_real_connect attempts to establish a  connection to a MaxDB database engine running on   hostname .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* create a connection object which is not connected */
$link = maxdb_init();

/* set connection options */
maxdb_options($link, MAXDB_UNICODE, "FALSE");
maxdb_options($link, MAXDB_TIMEOUT, 5);

/* connect to server */
maxdb_real_connect($link, 'localhost', 'MONA', 'RED');

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

printf ("Connection: %s\n.", maxdb_get_host_info($link));

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="FrontBase_5" />
      <property ref="Firebird/InterBase_18" />
      <property ref="MaxDB_2" />
      <property ref="MaxDB_3" />
      <property ref="FTP_5" />
      <property ref="MaxDB_4" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_real_escape_string">
    <description><![CDATA[  This function is used to create a legal SQL string that you can use in a SQL statement.  The string is encoded to an escaped SQL string, taking into  account the current character set of the connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");

$city = "'s Hertogenbosch";

/* this query will fail, cause we didn't escape $city */
if (!maxdb_query($link, "INSERT into temp.mycity VALUES ('11111','$city','NY')")) {
   printf("Error: %s\n", maxdb_sqlstate($link));
}

$city = maxdb_real_escape_string($link, $city);

/* this query with escaped $city will work */
if (maxdb_query($link, "INSERT into temp.mycity VALUES ('22222','$city','NY')")) {
   printf("%d Row inserted.\n", maxdb_affected_rows($link));
} 

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="LDAP_9" />
      <property kind="parameter" name="escapestr" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_real_query">
    <description><![CDATA[  The maxdb_real_query is functionally identical  with the maxdb_query .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_report">
    <description><![CDATA[  The above examples would produce the following output:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* activate reporting */
maxdb_report(MAXDB_REPORT_ERROR);

$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* this query should report an error */
$result = maxdb_query($link,"SELECT Name FROM Nonexistingtable WHERE population > 50000");

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_rollback">
    <description><![CDATA[  Rollbacks the current transaction for the database specified by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* disable autocommit */
maxdb_autocommit($link, FALSE);

maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");
maxdb_query($link, "INSERT INTO temp.mycity SELECT * FROM hotel.city");

/* commit insert */
maxdb_commit($link);

/* delete all rows */
maxdb_query($link, "DELETE FROM temp.mycity");

if ($result = maxdb_query($link, "SELECT COUNT(*) FROM temp.mycity")) {
   $row = maxdb_fetch_row($result);
   printf("%d rows in table mycity.\n", $row[0]);
   /* Free result */
   maxdb_free_result($result);
}

/* Rollback */
maxdb_rollback($link);

if ($result = maxdb_query($link, "SELECT COUNT(*) FROM temp.mycity")) {
   $row = maxdb_fetch_row($result);
   printf("%d rows in table mycity (after rollback).\n", $row[0]);
   /* Free result */
   maxdb_free_result($result);
}

/* Drop table myCity */
maxdb_query($link, "DROP TABLE temp.mycity");

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_rpl_parse_enabled">
    <properties>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_rpl_probe">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_rpl_query_type">
    <properties>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_select_db">
    <description><![CDATA[  The maxdb_select_db function selects the default  database (specified by the dbname parameter) to be  used when performing queries against the database connection  represented by the link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* return name of current default database */
if ($result = maxdb_query($link, "SELECT SERVERDB FROM USERS WHERE USERNAME='MONA'")) {
   $row = maxdb_fetch_row($result);
   printf("Default database is %s.\n", $row[0]);
   maxdb_free_result($result);
}

/* change db to world db */
maxdb_select_db($link, "XXXXXXXX");

/* return name of current default database */
if ($result = maxdb_query($link, "SELECT SERVERDB FROM USERS WHERE USERNAME='MONA'")) {
   $row = maxdb_fetch_row($result);
   printf("Default database is %s.\n", $row[0]);
   maxdb_free_result($result);
}

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property kind="parameter" name="dbname" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_send_query">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_server_end">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_server_init">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="server" type="array"  />
      <property kind="parameter" name="groups" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_sqlstate">
    <description><![CDATA[  Returns a string containing the SQLSTATE error code for the last error.  The error code consists of five characters. means no error.  The values are specified by ANSI SQL and ODBC.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* Table City already exists, so we should get an error */
if (!maxdb_query($link, "CREATE TABLE hotel.city (ID INT, Name VARCHAR(30))")) {
   printf("Error - SQLSTATE %s.\n", maxdb_sqlstate($link));
}

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_ssl_set">
    <properties>
      <property ref="ret_bool" />
      <property ref="LDAP_9" />
      <property ref="DB++_11" />
      <property kind="parameter" name="cert" type="string" required="1" />
      <property kind="parameter" name="ca" type="string" required="1" />
      <property kind="parameter" name="capath" type="string" required="1" />
      <property kind="parameter" name="cipher" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stat">
    <description><![CDATA[   maxdb_stat returns a string containing several  information about the MaxDB server running.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

printf("System status: %s\n", maxdb_stat($link));

maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_affected_rows">
    <description><![CDATA[   maxdb_stmt_affected_rows returns the number of rows affected  by INSERT, UPDATE, or DELETE query. If the last query was invalid or the  number of rows can not determined, this function will return -1.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* create temp table */
maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");

$query = "INSERT INTO temp.mycity SELECT * FROM hotel.city WHERE state LIKE ?";

/* prepare statement */
if ($stmt = maxdb_prepare($link, $query)) {

   /* Bind variable for placeholder */
   $code = 'N%';
   maxdb_stmt_bind_param($stmt, "s", $code);
   
   /* execute statement */
   maxdb_stmt_execute($stmt);

   printf("rows inserted: %d\n", maxdb_stmt_affected_rows($stmt));

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_bind_param">
    <description><![CDATA[   maxdb_stmt_bind_param is used to bind variables for the  parameter markers in the SQL statement that was passed to   maxdb_prepare .  The string types contains one or more characters which specify  the types for the corresponding bind variables    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (!$link) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_query ($link, "CREATE TABLE temp.mycity LIKE hotel.city");
maxdb_query ($link, "INSERT INTO temp.mycity SELECT * FROM hotel.city");

$stmt = maxdb_prepare($link, "INSERT INTO temp.mycity VALUES (?, ?, ?)");
maxdb_stmt_bind_param($stmt, 'sss', $zip, $name, $state);

$zip = '11111';
$name = 'Georgetown';
$state = 'NY';

/* execute prepared statement */
maxdb_stmt_execute($stmt);

printf("%d Row inserted.\n", maxdb_stmt_affected_rows($stmt));

/* close statement and connection */
maxdb_stmt_close($stmt);

/* Clean up table CountryLanguage */
maxdb_query($link, "DELETE FROM temp.mycity WHERE name='Georgetown'");
printf("%d Row deleted.\n", maxdb_affected_rows($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property kind="parameter" name="types" type="string" required="1" />
      <property kind="parameter" name="var1" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_bind_result">
    <description><![CDATA[   maxdb_stmt_bind_result is used to associate (bind) columns in the result  set to variables. When maxdb_stmt_fetch is called to fetch data, the MaxDB  client/server protocol places the data for the bound columns into the specified variables   var1, ... .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (!$link) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* prepare statement */
if ($stmt = maxdb_prepare($link, "SELECT zip, name FROM hotel.city ORDER BY name")) {
   maxdb_stmt_execute($stmt);

   /* bind variables to prepared statement */
   maxdb_stmt_bind_result($stmt, $col1, $col2);

   /* fetch values */
   while (maxdb_stmt_fetch($stmt)) {
       printf("%s %s\n", $col1, $col2);
   }

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="MaxDB_19" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_close">
    <description><![CDATA[  Closes a prepared statement. maxdb_stmt_close also deallocates the  statement handle pointed to by stmt .  If the current statement has pending or unread results, this function cancels them so that  the next query can be executed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_close_long_data">
    <description><![CDATA[  This function has to be called after a sequence of   maxdb_stmt_send_long_data , that was started  after maxdb_execute .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property kind="parameter" name="param_nr" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_data_seek">
    <description><![CDATA[  The maxdb_stmt_data_seek function seeks to an arbitrary result pointer  specified by the offset in the statement result set represented by   statement . The offset parameter must be between  zero and the total number of rows minus one (0.. maxdb_stmt_num_rows - 1).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, zip FROM hotel.city ORDER BY name";
if ($stmt = maxdb_prepare($link, $query)) {

   /* execute query */
   maxdb_stmt_execute($stmt);

   /* bind result variables */
   maxdb_stmt_bind_result($stmt, $name, $code);

   /* store result */
   maxdb_stmt_store_result($stmt);

   /* seek to row no. 400 */
   maxdb_stmt_data_seek($stmt, 5);

   /* fetch values */
   maxdb_stmt_fetch($stmt);

   printf ("City: %s  Zip: %s\n", $name, $code);

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_9" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_errno">
    <description><![CDATA[  For the statement specified by , maxdb_stmt_errno  returns the error code for the most recently invoked statement function that can succeed or fail.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");
maxdb_query($link, "INSERT INTO temp.mycity SELECT * FROM hotel.city");


$query = "SELECT name, zip FROM temp.mycity ORDER BY name";
if ($stmt = maxdb_prepare($link, $query)) {

   /* drop table */
   maxdb_query($link, "DROP TABLE temp.mycity");

   /* execute query */
   maxdb_stmt_execute($stmt);

   printf("Error: %d.\n", maxdb_stmt_errno($stmt));

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_error">
    <description><![CDATA[  For the statement specified by , maxdb_stmt_error  returns a containing the error message for the most recently invoked statement function that  can succeed or fail.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");
maxdb_query($link, "INSERT INTO temp.mycity SELECT * FROM hotel.city");


$query = "SELECT name, zip FROM temp.mycity ORDER BY name";
if ($stmt = maxdb_prepare($link, $query)) {

   /* drop table */
   maxdb_query($link, "DROP TABLE temp.mycity");

   /* execute query */
   maxdb_stmt_execute($stmt);

   printf("Error: %s.\n", maxdb_stmt_error($stmt));

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_execute">
    <description><![CDATA[  The maxdb_stmt_execute function executes a query that has been previously  prepared using the maxdb_prepare function represented by the   stmt resource. When executed any parameter markers which exist will  automatically be replaced with the appropiate data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");
   
/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}
   
maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");
 
/* Prepare an insert statement */
$query = "INSERT INTO temp.mycity (zip, name, state) VALUES (?,?,?)";
$stmt = maxdb_prepare($link, $query);

maxdb_stmt_bind_param($stmt, "sss", $val1, $val2, $val3);

$val1 = '11111';
$val2 = 'Georgetown';
$val3 = 'NY';
   
/* Execute the statement */
maxdb_stmt_execute($stmt);

$val1 = '22222';
$val2 = 'Hubbatown';
$val3 = 'CA';
   
/* Execute the statement */
maxdb_stmt_execute($stmt);

/* close statement */
maxdb_stmt_close($stmt);

/* retrieve all rows from myCity */
$query = "SELECT zip, name, state FROM temp.mycity";
if ($result = maxdb_query($link, $query)) {
   while ($row = maxdb_fetch_row($result)) {
       printf("%s (%s,%s)\n", $row[0], $row[1], $row[2]);
   }
   /* free result set */
   maxdb_free_result($result);
}

/* remove table */
maxdb_query($link, "DROP TABLE temp.mycity");

/* close connection */    
maxdb_close($link); 
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_fetch">
    <description><![CDATA[   maxdb_stmt_fetch returns row data using the variables bound by maxdb_stmt_bind_result .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT zip, name FROM hotel.city ORDER by name";

if ($stmt = maxdb_prepare($link, $query)) {

   /* execute statement */
   maxdb_stmt_execute($stmt);

   /* bind result variables */
   maxdb_stmt_bind_result($stmt, $name, $code);

   /* fetch values */
   while (maxdb_stmt_fetch($stmt)) {
       printf ("%s (%s)\n", $name, $code);
   }

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_free_result">
    <description><![CDATA[  The maxdb_stmt_free_result function frees the result memory  associated with the statement represented by the   stmt parameter, which was allocated by   maxdb_stmt_store_result .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_init">
    <description><![CDATA[  Allocates and initializes a statement resource suitable for   maxdb_stmt_prepare .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_num_rows">
    <description><![CDATA[  Returns the number of rows in the result set.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT zip, name FROM hotel.city ORDER BY name";
if ($stmt = maxdb_prepare($link, $query)) {

   /* execute query */
   maxdb_stmt_execute($stmt);

   /* store result */
   maxdb_stmt_store_result($stmt);

   printf("Number of rows: %d.\n", maxdb_stmt_num_rows($stmt));

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_param_count">
    <description><![CDATA[   maxdb_stmt_param_count returns the number of parameter  markers present in the prepared statement.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

if ($stmt = maxdb_prepare($link, "SELECT name FROM hotel.city WHERE name=? OR state=?")) {

   $marker = maxdb_stmt_param_count($stmt);
   printf("Statement has %d markers.\n", $marker);

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_prepare">
    <description><![CDATA[   maxdb_stmt_prepare prepares the SQL query pointed to by the  null-terminated string query. The statement resource has to be allocated by   maxdb_stmt_init .  The query must consist of a single SQL statement.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$city = "Portland";

/* create a prepared statement */
$stmt = maxdb_stmt_init($link);
if (maxdb_stmt_prepare($stmt, "SELECT state FROM hotel.city WHERE name=?")) {

   /* bind parameters for markers */
   maxdb_stmt_bind_param($stmt, "s", $city);

   /* execute query */
   maxdb_stmt_execute($stmt);

   /* bind result variables */
   maxdb_stmt_bind_result($stmt, $district);

   /* fetch value */
   maxdb_stmt_fetch($stmt);

   printf("%s is in district %s\n", $city, $district);

   /* close statement */
   maxdb_stmt_close($stmt);
} 

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_reset">
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_result_metadata">
    <description><![CDATA[  If a statement passed to maxdb_prepare is one that produces  a result set, maxdb_stmt_result_metadata returns the result resource  that can be used to process the meta information such as total number of fields  and individual field information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

maxdb_query($link, "CREATE TABLE temp.friends (id int, name varchar(20))"); 
 
maxdb_query($link, "INSERT INTO temp.friends VALUES (1,'Hartmut')");
maxdb_query($link, "INSERT INTO temp.friends VALUES (2, 'Ulf')");

$stmt = maxdb_prepare($link, "SELECT id, name FROM temp.friends");
maxdb_stmt_execute($stmt);

/* get resultset for metadata */
$result = maxdb_stmt_result_metadata($stmt);

/* retrieve field information from metadata result set */
$field = maxdb_fetch_field($result);

printf("Fieldname: %s\n", $field->name);

/* close resultset */
maxdb_free_result($result);

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_send_long_data">
    <description><![CDATA[  Allows to send parameter data to the server in pieces (or chunks).  This function can be called multiple times to send the parts of a character or  binary data value for a column, which must be one of the TEXT or BLOB datatypes.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="MaxDB_20" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_sqlstate">
    <description><![CDATA[  Returns a string containing the SQLSTATE error code  for the most recently invoked prepared statement function that can succeed or fail.  The error code consists of five characters. means no error.  The values are specified by ANSI SQL and ODBC.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");
maxdb_query($link, "INSERT INTO temp.mycity SELECT * FROM hotel.city");

$query = "SELECT name, zip FROM temp.mycity ORDER BY name";
if ($stmt = maxdb_prepare($link, $query)) {

   /* drop table */
   maxdb_query($link, "DROP TABLE temp.mycity");

   /* execute query */
   maxdb_stmt_execute($stmt);

   printf("Error: %s.\n", maxdb_stmt_sqlstate($stmt));

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_stmt_store_result">
    <description><![CDATA[   maxdb_stmt_store_result has no functionally effect  and should not be used for retrieving data from MaxDB server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */ 
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query = "SELECT name, zip FROM hotel.city ORDER BY name";
if ($stmt = maxdb_prepare($link, $query)) {

   /* execute query */
   maxdb_stmt_execute($stmt);

   /* store result */
   maxdb_stmt_store_result($stmt);

   printf("Number of rows: %d.\n", maxdb_stmt_num_rows($stmt));

   /* free result */
   maxdb_stmt_free_result($stmt);

   /* close statement */
   maxdb_stmt_close($stmt);
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_store_result">
    <description><![CDATA[  This function has no functionally effect.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_thread_id">
    <description><![CDATA[  The maxdb_thread_id function returns the thread  ID for the current connection which can then be killed using the   maxdb_kill function. If the connection is lost  and you reconnect with maxdb_ping , the thread ID  will be other. Therefore you should get the thread ID only when you need it.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

/* determine our thread id */
$thread_id = maxdb_thread_id($link);

/* Kill connection */
maxdb_kill($link, $thread_id);

/* This should produce an error */
if (!maxdb_query($link, "CREATE TABLE mycity LIKE hotel.city")) {
   printf("Error: %s\n", maxdb_error($link));
   exit;
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_thread_safe">
    <description><![CDATA[   maxdb_thread_safe indicates whether the  client library is compiled as thread-safe.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_use_result">
    <description><![CDATA[   maxdb_use_result has no effect.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

$query  = "SELECT * FROM DUAL;";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* execute multi query */
if (maxdb_multi_query($link, $query)) {
   do {
       /* store first result set */
       if ($result = maxdb_use_result($link)) {
           while ($row = maxdb_fetch_row($result)) {
               printf("%s\n", $row[0]);
           }
           maxdb_free_result($result);
       }
       /* print divider */
       if (maxdb_more_results($link)) {
           printf("-----------------\n");
       }
   } while (maxdb_next_result($link));
}

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
  <element kind="function" name="maxdb_warning_count">
    <description><![CDATA[   maxdb_warning_count returns the number of warnings  from the last query in the connection represented by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = maxdb_connect("localhost", "MONA", "RED");

/* check connection */
if (maxdb_connect_errno()) {
   printf("Connect failed: %s\n", maxdb_connect_error());
   exit();
}

maxdb_query($link, "CREATE TABLE temp.mycity LIKE hotel.city");

/* a remarkable long city name in Wales */
$query = "INSERT INTO temp.mycity (zip, name) VALUES('11111',
       'Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch')";

maxdb_query($link, $query);

printf ("Number of warning: %d\n", maxdb_warning_count($link));

/* close connection */
maxdb_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="LDAP_9" />
    </properties>
    
  </element>
</group>
<group name="Memcache">
  <description><![CDATA[Memcache Functions]]></description>
  <element kind="function" name="Memcache::add">
    <description><![CDATA[   Memcache::add stores variable   var with key only if such  key doesn't exist at the server yet.   Memcache::add returns if such key already  exist. For the rest Memcache::add behaves  similarly to Memcache::set .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$memcache_obj = memcache_connect("localhost", 11211);

/* procedural API */
memcache_add($memcache_obj, 'var_key', 'test variable', false, 30);

/* OO API */
$memcache_obj->add('var_key', 'test variable', false, 30);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="Arrays_29" />
      <property ref="IMAP_11" />
      <property ref="HTTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::close">
    <description><![CDATA[   Memcache::close closes connection to memcached  server. This function doesn't close persistent connections, which are  closed only during web-server shutdown/restart.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
/* 
do something here ..
*/
memcache_close($memcache_obj);

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
/* 
do something here ..
*/
$memcache_obj->close();

?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::connect">
    <description><![CDATA[   Memcache::connect establishes a connection to the  memcached server. Parameters host and   port point to the host and port, where  memcached is listening for connections.  Parameter port is optional, it's default value is  11211. Also you can define a timeout , which will be  used when connecting to the daemon. Think twice before changing the default  value - you can loose all the advantages of caching if your connection is too  slow.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */

$memcache_obj = memcache_connect('memcache_host', 11211);

/* OO API */

$memcache = new Memcache;
$memcache->connect('memcache_host', 11211);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_4" />
      <property ref="FTP_5" />
      <property ref="FTP_6" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::decrement">
    <description><![CDATA[   Memcache::decrement decrements value of the  item by value . Similarly to   Memcache::increment , current value of the item is  being converted to numerical and after that value  is substracted.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
/* decrement item by 2 */
$new_value = memcache_decrement($memcache_obj, 'test_item', 2);

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
/* decrement item by 3 */
$new_value = $memcache_obj->decrement('test_item', 3);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="DB++_11" />
      <property kind="parameter" name="value" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::delete">
    <description><![CDATA[   Memcache::delete deletes item with the   key . If parameter timeout  is specified, the item will expire after   timeout seconds.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);

/* after 10 seconds item will be deleted by the server */
memcache_delete('key_to_delete', 10);

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);

$memcache_obj->delete('key_to_delete', 10);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="FTP_6" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::flush">
    <description><![CDATA[   Memcache::flush immediately invalidates all  existing items. Memcache::flush doesn't  actually free any resources, it only marks all the items as expired, so  occupied memory will be overwritten by new items.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);

memcache_flush($memcache_obj);

/* OO API */

$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);

$memcache_obj->flush();

?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::get">
    <description><![CDATA[   Memcache::get returns previously stored data if  an item with such key exists on the server at this  moment.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, 'some_key');

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get('some_key');

/* 
You also can use array of keys as a parameter.
If such item wasn't found at the server, the result
array simply will not include such key.
*/

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, Array('some_key', 'another_key'));

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get(Array('some_key', 'second_key'));

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="DB++_11" />
      <property ref="Arrays_6" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::getStats">
    <description><![CDATA[   Memcache::getStats returns an associative array  with server's statistics. Array keys correspond to stats parameters and  values to parameter's values.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::getVersion">
    <description><![CDATA[   Memcache::getVersion returns a string with server's  version number.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);

echo memcache_get_version($memcache_obj);

/* OO API */
$memcache_obj = new Memcache;
echo $memcache_obj->getVersion();

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::increment">
    <description><![CDATA[   Memcache::increment increments value of the item on  the specified value . If item with key   key was not numeric and cannot be converted to  number, it will change it's value to value .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
/* increment counter by 2 */
$current_value = memcache_increment($memcache_obj, 'counter', 2);

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
/* increment counter by 3 */
$current_value = $memcache_obj->increment('counter', 3);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="DB++_11" />
      <property ref="Memcache_1" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::pconnect">
    <description><![CDATA[   Memcache::pconnect is similar to   Memcache::connect with the difference, that  the connection it establishes is persistent.  This connection is not closed after the end of script execution and  by Memcache::close function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* procedural API */
$memcache_obj = memcache_pconnect('memcache_host', 11211);

/* OO API */

$memcache_obj = new Memcache;
$memcache_obj->pconnect('memcache_host', 11211);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_4" />
      <property ref="FTP_5" />
      <property ref="FTP_6" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::replace">
    <description><![CDATA[   Memcache::replace should be used to replace value of  existing item with key . In case if item with such  key doesn't exists, Memcache::replace returns   . For the rest Memcache::replace behaves  similarly to Memcache::set .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$memcache_obj = memcache_connect('memcache_host', 11211);

/* procedural API */
memcache_replace($memcache_obj, "test_key", "some variable", false, 30);

/* OO API */
$memcache_obj->replace("test_key", "some variable", false, 30);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="Arrays_29" />
      <property ref="IMAP_11" />
      <property ref="HTTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="Memcache::set">
    <description><![CDATA[   Memcache::set stores an item   var with key on the  memcached server. Parameter expire is expiration  time in seconds. If it's 0, the item never expires (but memcached server  doesn't guarantee this item to be stored all the time, it could be deleted  from the cache to make place for other items).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* procedural API */

/* connect to memcached server */
$memcache_obj = memcache_connect('memcache_host', 11211);

/*
set value of item with key 'var_key'
using 0 as flag value, compression is not used
expire time is 30 seconds
*/
memcache_set($memcache_obj, 'var_key', 'some variable', 0, 30);

echo memcache_get($memcache_obj, 'var_key');

?>

   

<?php
/* OO API */

$memcache_obj = new Memcache;

/* connect to memcached server */
$memcache->connect('memcache_host', 11211);

/*
set value of item with key 'var_key', using on-the-fly compression
expire time is 50 seconds
*/
$memcache_obj->set('var_key', 'some really big variable', MEMCACHE_COMPRESSED, 50);

echo $memcache_obj->get('var_key');

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="Arrays_29" />
      <property ref="IMAP_11" />
      <property ref="HTTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="memcache_debug">
    <description><![CDATA[   memcache_debug turns on debug output if parameter   on_off is equal to 1 and turns off if it's 0.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="on_off" type="int" required="1" />
    </properties>
    
  </element>
</group>
<group name="Mimetype">
  <description><![CDATA[Mimetype Functions]]></description>
  <element kind="function" name="mime_content_type">
    <description><![CDATA[  Returns the MIME content type for a file as determined by using  information from the file.  Content types are returned in MIME format, like   or .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo mime_content_type('php.gif') . "\n";
echo mime_content_type('test.php');
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
</group>
<group name="Ming (flash)">
  <description><![CDATA[Ming functions for Flash]]></description>
  <element kind="function" name="SWFShape->addFill">
    <description><![CDATA[   SWFShape->addFill adds a solid fill to the shape's list  of fill styles. SWFShape->addFill accepts three different  types of arguments.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

  $p = new SWFMorph();

  $b = new SWFBitmap(file_get_contents("alphafill.jpg"));
  // use your own bitmap
  $width = $b->getWidth();
  $height = $b->getHeight();

  $s = $p->getShape1();
  $f = $s->addFill($b, SWFFILL_TILED_BITMAP);
  $f->moveTo(-$width/2, -$height/4);
  $f->scaleTo(1.0, 0.5);
  $s->setLeftFill($f);
  $s->movePenTo(-$width/2, -$height/4);
  $s->drawLine($width, 0);
  $s->drawLine(0, $height/2);
  $s->drawLine(-$width, 0);
  $s->drawLine(0, -$height/2);

  $s = $p->getShape2();
  $f = $s->addFill($b, SWFFILL_TILED_BITMAP);

  // these two have no effect!
  $f->moveTo(-$width/4, -$height/2);
  $f->scaleTo(0.5, 1.0);

  $s->setLeftFill($f);
  $s->movePenTo(-$width/4, -$height/2);
  $s->drawLine($width/2, 0);
  $s->drawLine(0, $height);
  $s->drawLine(-$width/2, 0);
  $s->drawLine(0, -$height);

  $m = new SWFMovie();
  $m->setDimension($width, $height);
  $i = $m->add($p);
  $i->moveTo($width/2, $height/2);

  for ($n=0; $n<1.001; $n+=0.03) {
    $i->setRatio($n);
    $m->nextFrame();
  }

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFFill" />	
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property kind="parameter" name="a" type="int"  />
      <property kind="parameter" name="bitmap" type="SWFBitmap" required="1" />
      <property ref="COM_29" />
      <property kind="parameter" name="gradient" type="SWFGradient" required="1" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="ming_setcubicthreshold">
    <properties>
      <property ref="ret_void" />
      <property ref="Image_99" />
    </properties>
    
  </element>
  <element kind="function" name="ming_setscale">
    <properties>
      <property ref="ret_void" />
      <property ref="BC math_7" />
    </properties>
    
  </element>
  <element kind="function" name="ming_useswfversion">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="version" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfaction">
    <description><![CDATA[   swfaction creates a new Action, and  compiles the given script into an SWFAction object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $s = new SWFShape();
  $f = $s->addFill(0xff, 0, 0);
  $s->setRightFill($f);

  $s->movePenTo(-500, -500);
  $s->drawLineTo(500, -500);
  $s->drawLineTo(500, 500);
  $s->drawLineTo(-500, 500);
  $s->drawLineTo(-500, -500);

  $p = new SWFSprite();
  $i = $p->add($s);
  $i->setDepth(1);
  $p->nextFrame();

  for ($n=0; $n<5; ++$n) {
    $i->rotate(-15);
    $p->nextFrame();
  }

  $m = new SWFMovie();
  $m->setBackground(0xff, 0xff, 0xff);
  $m->setDimension(6000, 4000);

  $i = $m->add($p);
  $i->setDepth(1);
  $i->moveTo(-500,2000);
  $i->setName("box");

  $m->add(new SWFAction("/box.x += 3;"));
  $m->nextFrame();
  $m->add(new SWFAction("gotoFrame(0); play();"));
  $m->nextFrame();

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>

      

<?php

  $m = new SWFMovie();
  $m->setRate(36.0);
  $m->setDimension(1200, 800);
  $m->setBackground(0, 0, 0);

  /* mouse tracking sprite - empty, but follows mouse so we can
     get its x and y coordinates */

  $i = $m->add(new SWFSprite());
  $i->setName('mouse');

  $m->add(new SWFAction("
    startDrag('/mouse', 1); /* '1' means lock sprite to the mouse */
  "));

  /* might as well turn off antialiasing, since these are just squares. */

  $m->add(new SWFAction("
    this.quality = 0;
  "));

  /* morphing box */
  $r = new SWFMorph();
  $s = $r->getShape1();

  /* Note this is backwards from normal shapes.  No idea why. */
  $s->setLeftFill($s->addFill(0xff, 0xff, 0xff));
  $s->movePenTo(-40, -40);
  $s->drawLine(80, 0);
  $s->drawLine(0, 80);
  $s->drawLine(-80, 0);
  $s->drawLine(0, -80);

  $s = $r->getShape2();

  $s->setLeftFill($s->addFill(0x00, 0x00, 0x00));
  $s->movePenTo(-1, -1);
  $s->drawLine(2, 0);
  $s->drawLine(0, 2);
  $s->drawLine(-2, 0);
  $s->drawLine(0, -2);

  /* sprite container for morphing box -
     this is just a timeline w/ the box morphing */

  $box = new SWFSprite();
  $box->add(new SWFAction("
    stop();
  "));
  $i = $box->add($r);

  for ($n=0; $n<=20; ++$n) {
    $i->setRatio($n/20);
    $box->nextFrame();
  }

  /* this container sprite allows us to use the same action code many times */

  $cell = new SWFSprite();
  $i = $cell->add($box);
  $i->setName('box');

  $cell->add(new SWFAction("

    setTarget('box');

    /* ...x means the x coordinate of the parent, i.e. (..).x */
    dx = (/mouse.x + random(6)-3 - ...x)/5;
    dy = (/mouse.y + random(6)-3 - ...y)/5;
    gotoFrame(int(dx*dx + dy*dy));

  "));

  $cell->nextFrame();
  $cell->add(new SWFAction("

    gotoFrame(0);
    play();

  "));

  $cell->nextFrame();

  /* finally, add a bunch of the cells to the movie */

  for ($x=0; $x<12; ++$x) {
    for ($y=0; $y<8; ++$y) {
      $i = $m->add($cell);
      $i->moveTo(100*$x+50, 100*$y+50);
    }
  }

  $m->nextFrame();

  $m->add(new SWFAction("

    gotoFrame(1);
    play();

  "));

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>

      

<?php

  $m = new SWFMovie();
  $m->setDimension(11000, 8000);
  $m->setBackground(0x00, 0x00, 0x00);

  $m->add(new SWFAction("

this.quality = 0;
/frames.visible = 0;
startDrag('/mouse', 1);

  "));

  // mouse tracking sprite
  $t = new SWFSprite();
  $i = $m->add($t);
  $i->setName('mouse');

  $g = new SWFGradient();
  $g->addEntry(0, 0xff, 0xff, 0xff, 0xff);
  $g->addEntry(0.1, 0xff, 0xff, 0xff, 0xff);
  $g->addEntry(0.5, 0xff, 0xff, 0xff, 0x5f);
  $g->addEntry(1.0, 0xff, 0xff, 0xff, 0);

  // gradient shape thing
  $s = new SWFShape();
  $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);
  $f->scaleTo(0.03);
  $s->setRightFill($f);
  $s->movePenTo(-600, -600);
  $s->drawLine(1200, 0);
  $s->drawLine(0, 1200);
  $s->drawLine(-1200, 0);
  $s->drawLine(0, -1200);

  // need to make this a sprite so we can multColor it
  $p = new SWFSprite();
  $p->add($s);
  $p->nextFrame();

  // put the shape in here, each frame a different color
  $q = new SWFSprite();
  $q->add(new SWFAction("gotoFrame(random(7)+1); stop();"));
  $i = $q->add($p);

  $i->multColor(1.0, 1.0, 1.0);
  $q->nextFrame();
  $i->multColor(1.0, 0.5, 0.5);
  $q->nextFrame();
  $i->multColor(1.0, 0.75, 0.5);
  $q->nextFrame();
  $i->multColor(1.0, 1.0, 0.5);
  $q->nextFrame();
  $i->multColor(0.5, 1.0, 0.5);
  $q->nextFrame();
  $i->multColor(0.5, 0.5, 1.0);
  $q->nextFrame();
  $i->multColor(1.0, 0.5, 1.0);
  $q->nextFrame();

  // finally, this one contains the action code
  $p = new SWFSprite();
  $i = $p->add($q);
  $i->setName('frames');
  $p->add(new SWFAction("

dx = (/:mousex-/:lastx)/3 + random(10)-5;
dy = (/:mousey-/:lasty)/3;
x = /:mousex;
y = /:mousey;
alpha = 100;

  "));
  $p->nextFrame();

  $p->add(new SWFAction("

this.x = x;
this.y = y;
this.alpha = alpha;
x += dx;
y += dy;
dy += 3;
alpha -= 8;

  "));
  $p->nextFrame();

  $p->add(new SWFAction("prevFrame(); play();"));
  $p->nextFrame();

  $i = $m->add($p);
  $i->setName('frames');
  $m->nextFrame();

  $m->add(new SWFAction("

lastx = mousex;
lasty = mousey;
mousex = /mouse.x;
mousey = /mouse.y;

++num;

if (num == 11)
  num = 1;

removeClip('char' & num);
duplicateClip(/frames, 'char' & num, num);

  "));

  $m->nextFrame();
  $m->add(new SWFAction("prevFrame(); play();"));

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFAction" />	
      <property ref="DB++_23" />
    </properties>
    
  </element>
  <element kind="function" name="swfbitmap">
    <description><![CDATA[   swfbitmap creates a new SWFBitmap object from  the Jpeg or DBL file in file .   alphafile is a MSK file to  be used as an alpha mask for a Jpeg image.  Both parameters can be fopen resources or binary  strings.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $s = new SWFShape();
  $f = $s->addFill(new SWFBitmap(file_get_contents("png.dbl")));
  $s->setRightFill($f);

  $s->drawLine(32, 0);
  $s->drawLine(0, 32);
  $s->drawLine(-32, 0);
  $s->drawLine(0, -32);

  $m = new SWFMovie();
  $m->setDimension(32, 32);
  $m->add($s);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>

      

<?php

  $s = new SWFShape();

  // .msk file generated with "gif2mask" utility
  $f = $s->addFill(new SWFBitmap(file_get_contents("alphafill.jpg"), file_get_contents("alphafill.msk")));
  $s->setRightFill($f);

  $s->drawLine(640, 0);
  $s->drawLine(0, 480);
  $s->drawLine(-640, 0);
  $s->drawLine(0, -480);

  $c = new SWFShape();
  $c->setRightFill($c->addFill(0x99, 0x99, 0x99));
  $c->drawLine(40, 0);
  $c->drawLine(0, 40);
  $c->drawLine(-40, 0);
  $c->drawLine(0, -40);

  $m = new SWFMovie();
  $m->setDimension(640, 480);
  $m->setBackground(0xcc, 0xcc, 0xcc);

  // draw checkerboard background
  for ($y=0; $y<480; $y+=40) {
    for ($x=0; $x<640; $x+=80) {
      $i = $m->add($c);
      $i->moveTo($x, $y);
    }

    $y+=40;

    for ($x=40; $x<640; $x+=80) {
      $i = $m->add($c);
      $i->moveTo($x, $y);
    }
  }

  $m->add($s);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFBitmap" />	
      <property kind="parameter" name="file" type="mixed" required="1" />
      <property kind="parameter" name="alphafile" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="swfbitmap->getheight">
    <description><![CDATA[   swfbitmap->getheight returns the bitmap's height in pixels.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="swfbitmap->getwidth">
    <description><![CDATA[   swfbitmap->getwidth returns the bitmap's width in pixels.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton">
    <description><![CDATA[   swfbutton creates a new Button.  Roll over it, click it, see it call action code. Swank.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

  $f = new SWFFont("_serif");

  $p = new SWFSprite();

  function label($string) 
  {
    global $f;

    $t = new SWFTextField();
    $t->setFont($f);
    $t->addString($string);
    $t->setHeight(200);
    $t->setBounds(3200, 200);
    return $t;
  }
  
  function addLabel($string) 
  {
    global $p;

    $i = $p->add(label($string));
    $p->nextFrame();
    $p->remove($i);
  }

  $p->add(new SWFAction("stop();"));
  addLabel("NO ACTION");
  addLabel("SWFBUTTON_MOUSEUP");
  addLabel("SWFBUTTON_MOUSEDOWN");
  addLabel("SWFBUTTON_MOUSEOVER");
  addLabel("SWFBUTTON_MOUSEOUT");
  addLabel("SWFBUTTON_MOUSEUPOUTSIDE");
  addLabel("SWFBUTTON_DRAGOVER");
  addLabel("SWFBUTTON_DRAGOUT");

  function rect($r, $g, $b) 
  {
    $s = new SWFShape();
    $s->setRightFill($s->addFill($r, $g, $b));
    $s->drawLine(600, 0);
    $s->drawLine(0, 600);
    $s->drawLine(-600, 0);
    $s->drawLine(0, -600);

    return $s;
  }

  $b = new SWFButton();
  $b->addShape(rect(0xff, 0, 0), SWFBUTTON_UP | SWFBUTTON_HIT);
  $b->addShape(rect(0, 0xff, 0), SWFBUTTON_OVER);
  $b->addShape(rect(0, 0, 0xff), SWFBUTTON_DOWN);

  $b->addAction(new SWFAction("setTarget('/label'); gotoFrame(1);"),
            SWFBUTTON_MOUSEUP);

  $b->addAction(new SWFAction("setTarget('/label'); gotoFrame(2);"),
        SWFBUTTON_MOUSEDOWN);

  $b->addAction(new SWFAction("setTarget('/label'); gotoFrame(3);"),
        SWFBUTTON_MOUSEOVER);

  $b->addAction(new SWFAction("setTarget('/label'); gotoFrame(4);"),
        SWFBUTTON_MOUSEOUT);

  $b->addAction(new SWFAction("setTarget('/label'); gotoFrame(5);"),
        SWFBUTTON_MOUSEUPOUTSIDE);

  $b->addAction(new SWFAction("setTarget('/label'); gotoFrame(6);"),
        SWFBUTTON_DRAGOVER);

  $b->addAction(new SWFAction("setTarget('/label'); gotoFrame(7);"),
        SWFBUTTON_DRAGOUT);

  $m = new SWFMovie();
  $m->setDimension(4000, 3000);

  $i = $m->add($p);
  $i->setName("label");
  $i->moveTo(400, 1900);

  $i = $m->add($b);
  $i->moveTo(400, 900);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>

      

<?php

  $s = new SWFShape();
  $s->setRightFill($s->addFill(0xff, 0, 0));
  $s->drawLine(1000,0);
  $s->drawLine(0,1000);
  $s->drawLine(-1000,0);
  $s->drawLine(0,-1000);

  $b = new SWFButton();
  $b->addShape($s, SWFBUTTON_HIT | SWFBUTTON_UP | SWFBUTTON_DOWN | SWFBUTTON_OVER);

  $b->addAction(new SWFAction("startDrag('/test', 0);"), // '0' means don't lock to mouse
        SWFBUTTON_MOUSEDOWN);

  $b->addAction(new SWFAction("stopDrag();"),
        SWFBUTTON_MOUSEUP | SWFBUTTON_MOUSEUPOUTSIDE);

  $p = new SWFSprite();
  $p->add($b);
  $p->nextFrame();

  $m = new SWFMovie();
  $i = $m->add($p);
  $i->setName('test');
  $i->moveTo(1000,1000);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFButton" />	
    </properties>
    
  </element>
  <element kind="function" name="swfbutton->addaction">
    <description><![CDATA[   swfbutton->addaction adds the action   action to this button for the given conditions.  The following flags are valid:  SWFBUTTON_MOUSEOVER, SWFBUTTON_MOUSEOUT, SWFBUTTON_MOUSEUP,  SWFBUTTON_MOUSEUPOUTSIDE, SWFBUTTON_MOUSEDOWN, SWFBUTTON_DRAGOUT and  SWFBUTTON_DRAGOVER.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="action" type="resource" required="1" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton->addshape">
    <description><![CDATA[   swfbutton->addshape adds the shape   shape to this button. The following   flags ' values are valid:  SWFBUTTON_UP, SWFBUTTON_OVER, SWFBUTTON_DOWN or SWFBUTTON_HIT.  SWFBUTTON_HIT isn't ever displayed, it defines the hit region for the button.  That is, everywhere the hit shape would be drawn is considered a "touchable"  part of the button.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="shape" type="resource" required="1" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton->setaction">
    <description><![CDATA[   swfbutton->setaction sets the action to be performed  when the button is clicked. Alias for addAction(shape, SWFBUTTON_MOUSEUP).   action is a swfaction .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_7" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton->setdown">
    <description><![CDATA[   swfbutton->setdown alias for addShape(shape, SWFBUTTON_DOWN).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_8" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton->sethit">
    <description><![CDATA[   swfbutton->sethit alias for addShape(shape, SWFBUTTON_HIT).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_8" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton->setover">
    <description><![CDATA[   swfbutton->setover alias for addShape(shape, SWFBUTTON_OVER).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_8" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton->setup">
    <description><![CDATA[   swfbutton->setup alias for addShape(shape, SWFBUTTON_UP).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_8" />
    </properties>
    
  </element>
  <element kind="function" name="swfbutton_keypress">
    <properties>
      <property ref="ret_int" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem">
    <description><![CDATA[   swfdisplayitem creates a new swfdisplayitem object.  ]]></description>
    <properties>
      <property kind="return" type="SWFDisplayItem" />	
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->addcolor">
    <description><![CDATA[   swfdisplayitem->addcolor adds the color to  this item's color transform. The color is given in its RGB form.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="red" type="int"  />
      <property kind="parameter" name="green" type="int"  />
      <property kind="parameter" name="blue" type="int"  />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->move">
    <description><![CDATA[   swfdisplayitem->move moves the current object by  ( dx , dy ) from its  current position.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="dx" type="int" required="1" />
      <property kind="parameter" name="dy" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->moveto">
    <description><![CDATA[   swfdisplayitem->moveto moves the current object to  ( x , y ) in global coordinates.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->multcolor">
    <description><![CDATA[   swfdisplayitem->multcolor multiplies the item's  color transform by the given values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

  $b = new SWFBitmap(file_get_contents("backyard.jpg"));
  // note use your own picture :-)
  $s = new SWFShape();
  $s->setRightFill($s->addFill($b));
  $s->drawLine($b->getWidth(), 0);
  $s->drawLine(0, $b->getHeight());
  $s->drawLine(-$b->getWidth(), 0);
  $s->drawLine(0, -$b->getHeight());

  $m = new SWFMovie();
  $m->setDimension($b->getWidth(), $b->getHeight());

  $i = $m->add($s);

  for ($n=0; $n<=20; ++$n) {
    $i->multColor(1.0-$n/10, 1.0, 1.0);
    $i->addColor(0xff*$n/20, 0, 0);
    $m->nextFrame();
  }

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Ming (flash)_9" />
      <property ref="Ming (flash)_10" />
      <property ref="Ming (flash)_11" />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->remove">
    <description><![CDATA[   swfdisplayitem->remove removes this object from  the movie's display list.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->rotate">
    <description><![CDATA[   swfdisplayitem->rotate rotates the current object  by ddegrees degrees from its current rotation.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="ddegrees" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->rotateto">
    <description><![CDATA[   swfdisplayitem->rotateto set the current object  rotation to degrees degrees in global coordinates.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $thetext =  "ming!";

  $f = new SWFFont("Bauhaus 93.fdb");

  $m = new SWFMovie();
  $m->setRate(24.0);
  $m->setDimension(2400, 1600);
  $m->setBackground(0xff, 0xff, 0xff);

  // functions with huge numbers of arbitrary
  // arguments are always a good idea!  Really!

  function text($r, $g, $b, $a, $rot, $x, $y, $scale, $string) 
  {
    global $f, $m;

    $t = new SWFText();
    $t->setFont($f);
    $t->setColor($r, $g, $b, $a);
    $t->setHeight(960);
    $t->moveTo(-($f->getWidth($string))/2, $f->getAscent()/2);
    $t->addString($string);

    // we can add properties just like a normal PHP var,
    // as long as the names aren't already used.
    // e.g., we can't set $i->scale, because that's a function

    $i = $m->add($t);
    $i->x = $x;
    $i->y = $y;
    $i->rot = $rot;
    $i->s = $scale;
    $i->rotateTo($rot);
    $i->scale($scale, $scale);

    // but the changes are local to the function, so we have to
    // return the changed object.  kinda weird..

    return $i;
 }

  function step($i) 
  {
    $oldrot = $i->rot;
    $i->rot = 19*$i->rot/20;
    $i->x = (19*$i->x + 1200)/20;
    $i->y = (19*$i->y + 800)/20;
    $i->s = (19*$i->s + 1.0)/20;

    $i->rotateTo($i->rot);
    $i->scaleTo($i->s, $i->s);
    $i->moveTo($i->x, $i->y);

    return $i;
  }

  // see?  it sure paid off in legibility:

  $i1 = text(0xff, 0x33, 0x33, 0xff, 900, 1200, 800, 0.03, $thetext);
  $i2 = text(0x00, 0x33, 0xff, 0x7f, -560, 1200, 800, 0.04, $thetext);
  $i3 = text(0xff, 0xff, 0xff, 0x9f, 180, 1200, 800, 0.001, $thetext);

  for ($i=1; $i<=100; ++$i) {
    $i1 = step($i1);
    $i2 = step($i2);
    $i3 = step($i3);

    $m->nextFrame();
  }

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="degrees" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->scale">
    <description><![CDATA[   swfdisplayitem->scale scales the current object by  ( dx , dy ) from its  current size.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_12" />
      <property ref="Ming (flash)_13" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->scaleto">
    <description><![CDATA[   swfdisplayitem->scaleto scales the current object to  ( x , y ) in global coordinates.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->setdepth">
    <description><![CDATA[   swfdisplayitem->setdepth sets the object's  z-order to depth . Depth defaults to the  order in which instances are created (by adding a shape/text to  a movie)- newer ones are on top of older ones. If two objects are  given the same depth, only the later-defined one can be moved.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="depth" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->setname">
    <description><![CDATA[   swfdisplayitem->setname sets the object's name to   name , for targetting with action script.  Only useful on sprites.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->setratio">
    <description><![CDATA[   swfdisplayitem->setratio sets the object's ratio  to ratio . Obviously only useful for morphs.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

  $p = new SWFMorph();

  $g = new SWFGradient();
  $g->addEntry(0.0, 0, 0, 0);
  $g->addEntry(0.16, 0xff, 0xff, 0xff);
  $g->addEntry(0.32, 0, 0, 0);
  $g->addEntry(0.48, 0xff, 0xff, 0xff);
  $g->addEntry(0.64, 0, 0, 0);
  $g->addEntry(0.80, 0xff, 0xff, 0xff);
  $g->addEntry(1.00, 0, 0, 0);

  $s = $p->getShape1();
  $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);
  $f->scaleTo(0.05);
  $s->setLeftFill($f);
  $s->movePenTo(-160, -120);
  $s->drawLine(320, 0);
  $s->drawLine(0, 240);
  $s->drawLine(-320, 0);
  $s->drawLine(0, -240);

  $g = new SWFGradient();
  $g->addEntry(0.0, 0, 0, 0);
  $g->addEntry(0.16, 0xff, 0, 0);
  $g->addEntry(0.32, 0, 0, 0);
  $g->addEntry(0.48, 0, 0xff, 0);
  $g->addEntry(0.64, 0, 0, 0);
  $g->addEntry(0.80, 0, 0, 0xff);
  $g->addEntry(1.00, 0, 0, 0);

  $s = $p->getShape2();
  $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);
  $f->scaleTo(0.05);
  $f->skewXTo(1.0);
  $s->setLeftFill($f);
  $s->movePenTo(-160, -120);
  $s->drawLine(320, 0);
  $s->drawLine(0, 240);
  $s->drawLine(-320, 0);
  $s->drawLine(0, -240);

  $m = new SWFMovie();
  $m->setDimension(320, 240);
  $i = $m->add($p);
  $i->moveTo(160, 120);

  for ($n=0; $n<=1.001; $n+=0.01) {
    $i->setRatio($n);
    $m->nextFrame();
  }

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="ratio" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->skewx">
    <description><![CDATA[   swfdisplayitem->skewx adds ddegrees  to current x-skew.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_14" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->skewxto">
    <description><![CDATA[   swfdisplayitem->skewxto sets the  x-skew to degrees . For degrees  is  1.0, it means a 45-degree forward slant. More is more forward,  less is more backward.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_15" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->skewy">
    <description><![CDATA[   swfdisplayitem->skewy adds ddegrees  to current y-skew.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_14" />
    </properties>
    
  </element>
  <element kind="function" name="swfdisplayitem->skewyto">
    <description><![CDATA[   swfdisplayitem->skewyto sets the  y-skew to degrees . For degrees  is 1.0, it means a 45-degree forward slant. More is more upward,  less is more downward.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_15" />
    </properties>
    
  </element>
  <element kind="function" name="swffill">
    <description><![CDATA[  The swffill object allows you to transform  (scale, skew, rotate) bitmap and gradient fills. swffill  objects are created by the swfshape->addfill methods.  ]]></description>
    <properties>
      <property ref="ret_SWFFill" />
    </properties>
    
  </element>
  <element kind="function" name="swffill->moveto">
    <description><![CDATA[   swffill->moveto moves fill's origin to  ( x , y ) in global coordinates.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="swffill->rotateto">
    <description><![CDATA[   swffill->rotateto sets fill's rotation to   degrees degrees.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_15" />
    </properties>
    
  </element>
  <element kind="function" name="swffill->scaleto">
    <description><![CDATA[   swffill->scaleto sets fill's scale to   x in the x-direction,   y in the y-direction.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="swffill->skewxto">
    <description><![CDATA[   swffill->skewxto sets fill x-skew to x .  For x is 1.0, it is a 45-degree  forward slant. More is more forward, less is more backward.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Math_3" />
    </properties>
    
  </element>
  <element kind="function" name="swffill->skewyto">
    <description><![CDATA[   swffill->skewyto sets fill y-skew to y .  For y is 1.0, it is a 45-degree  upward slant. More is more upward, less is more downward.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="swffont">
    <description><![CDATA[  If filename is the name of an FDB file  (i.e., it ends in ".fdb"), load the font definition found in said  file. Otherwise, create a browser-defined font reference.  ]]></description>
    <properties>
      <property kind="return" type="SWFFont" />	
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="swffont->getwidth">
    <description><![CDATA[   swffont->getwidth returns the string   string 's width, using font's default scaling.  You'll probably want to use the swftext version of this method which  uses the text object's scale.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="swfgradient">
    <description><![CDATA[   swfgradient creates a new SWFGradient object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

  $m = new SWFMovie();
  $m->setDimension(320, 240);

  $s = new SWFShape();

  // first gradient- black to white
  $g = new SWFGradient();
  $g->addEntry(0.0, 0, 0, 0);
  $g->addEntry(1.0, 0xff, 0xff, 0xff);

  $f = $s->addFill($g, SWFFILL_LINEAR_GRADIENT);
  $f->scaleTo(0.01);
  $f->moveTo(160, 120);
  $s->setRightFill($f);
  $s->drawLine(320, 0);
  $s->drawLine(0, 240);
  $s->drawLine(-320, 0);
  $s->drawLine(0, -240);

  $m->add($s);

  $s = new SWFShape();

  // second gradient- radial gradient from red to transparent
  $g = new SWFGradient();
  $g->addEntry(0.0, 0xff, 0, 0, 0xff);
  $g->addEntry(1.0, 0xff, 0, 0, 0);

  $f = $s->addFill($g, SWFFILL_RADIAL_GRADIENT);
  $f->scaleTo(0.005);
  $f->moveTo(160, 120);
  $s->setRightFill($f);
  $s->drawLine(320, 0);
  $s->drawLine(0, 240);
  $s->drawLine(-320, 0);
  $s->drawLine(0, -240);

  $m->add($s);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFGradient" />	
    </properties>
    
  </element>
  <element kind="function" name="swfgradient->addentry">
    <description><![CDATA[   swfgradient->addentry adds an entry to the gradient list.   ratio is a number between 0 and 1 indicating where in  the gradient this color appears. Thou shalt add entries in order of increasing ratio.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_17" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swfmorph">
    <description><![CDATA[   swfmorph creates a new SWFMorph object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $p = new SWFMorph();

  $s = $p->getShape1();
  $s->setLine(0, 0, 0, 0);

  /* Note that this is backwards from normal shapes (left instead of right).
     I have no idea why, but this seems to work.. */

  $s->setLeftFill($s->addFill(0xff, 0, 0));
  $s->movePenTo(-1000,-1000);
  $s->drawLine(2000,0);
  $s->drawLine(0,2000);
  $s->drawLine(-2000,0);
  $s->drawLine(0,-2000);

  $s = $p->getShape2();
  $s->setLine(60,0,0,0);
  $s->setLeftFill($s->addFill(0, 0, 0xff));
  $s->movePenTo(0,-1000);
  $s->drawLine(1000,1000);
  $s->drawLine(-1000,1000);
  $s->drawLine(-1000,-1000);
  $s->drawLine(1000,-1000);

  $m = new SWFMovie();
  $m->setDimension(3000,2000);
  $m->setBackground(0xff, 0xff, 0xff);

  $i = $m->add($p);
  $i->moveTo(1500,1000);

  for ($r=0.0; $r<=1.0; $r+=0.1) {
    $i->setRatio($r);
    $m->nextFrame();
  }

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFMorph" />	
    </properties>
    
  </element>
  <element kind="function" name="swfmorph->getshape1">
    <description><![CDATA[   swfmorph->getshape1 gets a handle to the morph's  starting shape. swfmorph->getshape1 returns an   swfshape object.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="swfmorph->getshape2">
    <description><![CDATA[   swfmorph->getshape2 gets a handle to the morph's  ending shape. swfmorph->getshape2 returns an   swfshape object.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie">
    <description><![CDATA[   swfmovie creates a new movie object,  representing an SWF version 4 movie.  ]]></description>
    <properties>
      <property kind="return" type="SWFMovie" />	
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->add">
    <description><![CDATA[   swfmovie->add adds instance to  the current movie. instance is any type of data :  Shapes, text, fonts, etc. must all be added to the movie to make this work.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="instance" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->nextframe">
    <description><![CDATA[   swfmovie->nextframe moves to the next frame of  the animation.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->output">
    <description><![CDATA[   swfmovie->output dumps your lovingly prepared movie out.  In PHP, preceding this with the command    convinces the browser to display this as a flash movie.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="compression" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->remove">
    <description><![CDATA[   swfmovie->remove removes the object instance   instance from the display list.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_18" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->save">
    <description><![CDATA[   swfmovie->save saves your movie to the  file named filename .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
      <property ref="Ming (flash)_19" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->setbackground">
    <description><![CDATA[   swfmovie->setbackground sets the background color. Why is  there no rgba version? Think about it. (Actually, that's not such a dumb  question after all- you might want to let the HTML background show through.  There's a way to do that, but it only works on IE4. Search the   site for  details.)  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->setdimension">
    <description><![CDATA[   swfmovie->setdimension sets the movie's width  to width and height to height .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_44" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->setframes">
    <description><![CDATA[   swfmovie->setframes sets the total number of frames  in the animation to numberofframes .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="numberofframes" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->setrate">
    <description><![CDATA[   swfmovie->setrate sets the frame rate to   rate , in frame per seconds.  Animation will slow down if the player can't render frames fast enough- unless  there's a streaming sound, in which case display frames are sacrificed to  keep sound from skipping.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="rate" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfmovie->streammp3">
    <description><![CDATA[   swfmovie->streammp3 streams the mp3 file   mp3File . Not very robust in dealing with  oddities (can skip over an initial ID3 tag, but that's about it).  Like swfshape->addjpegfill , this isn't a stable function- we'll  probably need to make a separate SWFSound object to contain sound types.  Parameter mp3File can be a   fopen resource or a binary string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $m = new SWFMovie();
  $m->setRate(12.0);
  $m->streamMp3(file_get_contents("distortobass.mp3"));
  // use your own MP3

  // 11.85 seconds at 12.0 fps = 142 frames
  $m->setFrames(142);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="mp3File" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape">
    <description><![CDATA[   swfshape creates a new shape object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $s = new SWFShape();
  $s->setLine(40, 0x7f, 0, 0);
  $s->setRightFill($s->addFill(0xff, 0, 0));
  $s->movePenTo(200, 200);
  $s->drawLineTo(6200, 200);
  $s->drawLineTo(6200, 4600);
  $s->drawCurveTo(200, 4600, 200, 200);

  $m = new SWFMovie();
  $m->setDimension(6400, 4800);
  $m->setRate(12.0);
  $m->add($s);
  $m->nextFrame();

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFShape" />	
    </properties>
    
  </element>
  <element kind="function" name="swfshape->drawcurve">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="controldx" type="int" required="1" />
      <property kind="parameter" name="controldy" type="int" required="1" />
      <property kind="parameter" name="anchordx" type="int" required="1" />
      <property kind="parameter" name="anchordy" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->drawcurveto">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="controlx" type="int" required="1" />
      <property kind="parameter" name="controly" type="int" required="1" />
      <property kind="parameter" name="anchorx" type="int" required="1" />
      <property kind="parameter" name="anchory" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->drawline">
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_12" />
      <property ref="Ming (flash)_13" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->drawlineto">
    <properties>
      <property ref="ret_void" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->movepen">
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_12" />
      <property ref="Ming (flash)_13" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->movepento">
    <properties>
      <property ref="ret_void" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->setleftfill">
    <description><![CDATA[  What this nonsense is about is, every edge segment borders at most two fills.  When rasterizing the object, it's pretty handy to know what those fills are  ahead of time, so the swf format requires these to be specified.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="fill" type="swfgradient" required="1" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->setline">
    <description><![CDATA[   swfshape->setline sets the shape's line style.   width is the line's width. If width  is 0, the line's style is removed (then, all other arguments are ignored).  If width > 0, then line's color is set to   red , green , blue .  Last parameter a is optional.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $s = new SWFShape();
  $f1 = $s->addFill(0xff, 0, 0);
  $f2 = $s->addFill(0xff, 0x7f, 0);
  $f3 = $s->addFill(0xff, 0xff, 0);
  $f4 = $s->addFill(0, 0xff, 0);
  $f5 = $s->addFill(0, 0, 0xff);

  // bug: have to declare all line styles before you use them
  $s->setLine(40, 0x7f, 0, 0);
  $s->setLine(40, 0x7f, 0x3f, 0);
  $s->setLine(40, 0x7f, 0x7f, 0);
  $s->setLine(40, 0, 0x7f, 0);
  $s->setLine(40, 0, 0, 0x7f);

  $f = new SWFFont('Techno.fdb');

  $s->setRightFill($f1);
  $s->setLine(40, 0x7f, 0, 0);
  $s->drawGlyph($f, '!');
  $s->movePen($f->getWidth('!'), 0);

  $s->setRightFill($f2);
  $s->setLine(40, 0x7f, 0x3f, 0);
  $s->drawGlyph($f, '#');
  $s->movePen($f->getWidth('#'), 0);

  $s->setRightFill($f3);
  $s->setLine(40, 0x7f, 0x7f, 0);
  $s->drawGlyph($f, '%');
  $s->movePen($f->getWidth('%'), 0);

  $s->setRightFill($f4);
  $s->setLine(40, 0, 0x7f, 0);
  $s->drawGlyph($f, '*');
  $s->movePen($f->getWidth('*'), 0);

  $s->setRightFill($f5);
  $s->setLine(40, 0, 0, 0x7f);
  $s->drawGlyph($f, '@');

  $m = new SWFMovie();
  $m->setDimension(3000,2000);
  $m->setRate(12.0);
  $i = $m->add($s);
  $i->moveTo(1500-$f->getWidth("!#%*@")/2, 1000+$f->getAscent()/2);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Image_44" />
      <property ref="Ming (flash)_9" />
      <property ref="Ming (flash)_10" />
      <property ref="Ming (flash)_11" />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swfshape->setrightfill">
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_31" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swfsprite">
    <description><![CDATA[   swfsprite are also known as a "movie clip",  this allows one to create objects which are animated in their own  timelines. Hence, the sprite has most of the same methods as the movie.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $s = new SWFShape();
  $s->setRightFill($s->addFill(0xff, 0, 0));
  $s->movePenTo(-500, -500);
  $s->drawLineTo(500, -500);
  $s->drawLineTo(500, 500);
  $s->drawLineTo(-500, 500);
  $s->drawLineTo(-500, -500);

  $p = new SWFSprite();
  $i = $p->add($s);
  $p->nextFrame();
  $i->rotate(15);
  $p->nextFrame();
  $i->rotate(15);
  $p->nextFrame();
  $i->rotate(15);
  $p->nextFrame();
  $i->rotate(15);
  $p->nextFrame();
  $i->rotate(15);
  $p->nextFrame();

  $m = new SWFMovie();
  $i = $m->add($p);
  $i->moveTo(1500, 1000);
  $i->setName("blah");

  $m->setBackground(0xff, 0xff, 0xff);
  $m->setDimension(3000, 2000);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFSprite" />	
    </properties>
    
  </element>
  <element kind="function" name="swfsprite->add">
    <description><![CDATA[   swfsprite->add adds a swfshape , a   swfbutton , a swftext ,  a swfaction or a swfsprite object.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="object" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swfsprite->nextframe">
    <description><![CDATA[   swfsprite->setframes moves to the next frame of  the animation.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swfsprite->remove">
    <description><![CDATA[   swfsprite->remove remove a swfshape , a   swfbutton , a swftext ,  a swfaction or a swfsprite object  from the sprite.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_32" />
    </properties>
    
  </element>
  <element kind="function" name="swfsprite->setframes">
    <description><![CDATA[   swfsprite->setframes sets the total number of frames  in the animation to numberofframes .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="numberofframes" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swftext">
    <description><![CDATA[   swftext creates a new SWFText object,  fresh for manipulating.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $f = new SWFFont("Techno.fdb");
  $t = new SWFText();
  $t->setFont($f);
  $t->moveTo(200, 2400);
  $t->setColor(0xff, 0xff, 0);
  $t->setHeight(1200);
  $t->addString("PHP generates Flash with Ming!!");

  $m = new SWFMovie();
  $m->setDimension(5400, 3600);

  $m->add($t);

  header('Content-type: application/x-shockwave-flash');
  $m->output();
?>]]></description>
      </property>
      <property kind="return" type="SWFText" />	
    </properties>
    
  </element>
  <element kind="function" name="swftext->addstring">
    <description><![CDATA[   swftext->addstring draws the string string  at the current pen (cursor) location. Pen is at the baseline of the text;  i.e., ascending text is in the -y direction.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="swftext->getwidth">
    <description><![CDATA[   swftext->addstring returns the rendered width of the   string string at the text object's current font,  scale, and spacing settings.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="swftext->moveto">
    <description><![CDATA[   swftext->moveto moves the pen (or cursor, if  that makes more sense) to ( x , y )  in text object's coordinate space. If either is zero, though, value  in that dimension stays the same. Annoying, should be fixed.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="swftext->setcolor">
    <description><![CDATA[   swftext->setspacing changes the current text color.  Default is black. I think. Color is represented using the RGB system.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swftext->setfont">
    <description><![CDATA[   swftext->setfont sets the current font to   font .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="font" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swftext->setheight">
    <description><![CDATA[   swftext->setheight sets the current font height to   height . Default is 240.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="swftext->setspacing">
    <description><![CDATA[   swftext->setspacing sets the current font spacing to   spacing spacing . Default is 1.0.  0 is all of the letters written at the same point. This doesn't really work  that well because it inflates the advance across the letter, doesn't add  the same amount of spacing between the letters. I should try and explain  that better, prolly. Or just fix the damn thing to do constant spacing.  This was really just a way to figure out how letter advances work,  anyway.. So nyah.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="spacing" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield">
    <description><![CDATA[   swftextfield creates a new text field object.  Text Fields are less flexible than swftext objects-  they can't be rotated, scaled non-proportionally, or skewed, but they can  be used as form entries, and they can use browser-defined fonts.  ]]></description>
    <properties>
      <property kind="return" type="SWFTextField" />	
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->addstring">
    <description><![CDATA[   swftextfield->setname concatenates the string   string to the text field.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->align">
    <description><![CDATA[   swftextfield->align sets the text field alignment  to alignement . Valid values for   alignement are : SWFTEXTFIELD_ALIGN_LEFT,  SWFTEXTFIELD_ALIGN_RIGHT, SWFTEXTFIELD_ALIGN_CENTER and  SWFTEXTFIELD_ALIGN_JUSTIFY.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="alignement" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setbounds">
    <description><![CDATA[   swftextfield->setbounds sets the text field width  to width and height to height .  If you don't set the bounds yourself, Ming makes a poor guess at what  the bounds are.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_44" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setcolor">
    <description><![CDATA[   swftextfield->setcolor sets the color of the text field.  Default is fully opaque black. Color is represented using RGB system.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_20" />
      <property ref="Image_21" />
      <property ref="Image_22" />
      <property ref="Ming (flash)_1" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setfont">
    <description><![CDATA[   swftextfield->setfont sets the text field font to  the [browser-defined?] font font.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ming (flash)_34" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setheight">
    <description><![CDATA[   swftextfield->setheight sets the font height of this text field  font to the given height height . Default is 240.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setindentation">
    <description><![CDATA[   swftextfield->setindentation sets the indentation of  the first line in the text field, to width .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_44" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setleftmargin">
    <description><![CDATA[   swftextfield->setleftmargin sets the left margin width  of the text field to width . Default is 0.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_44" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setlinespacing">
    <description><![CDATA[   swftextfield->setlinespacing sets the line spacing  of the text field to the height of height . Default is 40.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setmargins">
    <description><![CDATA[   swftextfield->setmargins set both margins at once,  for the man on the go.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="left" type="int" required="1" />
      <property kind="parameter" name="right" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setname">
    <description><![CDATA[   swftextfield->setname sets the variable name of this  text field to name , for form posting and action  scripting purposes.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="swftextfield->setrightmargin">
    <description><![CDATA[   swftextfield->setrightmargin sets the right margin width  of the text field to width . Default is 0.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_44" />
    </properties>
    
  </element>
</group>
<group name="Misc.">
  <description><![CDATA[Miscellaneous Functions]]></description>
  <element kind="function" name="connection_aborted">
    <description><![CDATA[  See also connection_status , and   ignore_user_abort .  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="connection_status">
    <description><![CDATA[  See also connection_aborted , and   ignore_user_abort .  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="connection_timeout">
    <description><![CDATA[  See also connection_status .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="constant">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

define("MAXSIZE", 100);

echo MAXSIZE;
echo constant("MAXSIZE"); // same thing as the previous line

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="define">
    <description><![CDATA[  Defines a named constant. See the    for more details.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // outputs "Hello world."
echo Constant; // outputs "Constant" and issues a notice.

define("GREETING", "Hello you.", true);
echo GREETING; // outputs "Hello you."
echo Greeting; // outputs "Hello you."

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
      <property ref="Arrays_14" />
      <property ref="COM_18" />
    </properties>
    
  </element>
  <element kind="function" name="defined">
    <description><![CDATA[  Returns if the named constant given by   name has been defined,   otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Note the use of quotes, this is important.  This example is checking 
 * if the string 'CONSTANT' is the name of a constant named CONSTANT */
if (defined('CONSTANT')) {
    echo CONSTANT;
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="eval">
    <description><![CDATA[    The above example will show:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = 'cup';
$name = 'coffee';
$str = 'This is a $string with my $name in it.';
echo $str. "\n";
eval("\$str = \"$str\";");
echo $str. "\n";
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="code_str" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="exit">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$filename = '/path/to/data-file';
$file = fopen($filename, 'r')
    or exit("unable to open file ($filename)");

?>

      

<?php

//exit program normally
exit;
exit();
exit(0);

//exit with an error code
exit(1);
exit(0376); //octal

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="status" type="string"  />
      <property kind="parameter" name="status" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="get_browser">
    <description><![CDATA[   get_browser attempts to determine the  capabilities of the user's browser. This is done by looking up  the browser's information in the  file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo $_SERVER['HTTP_USER_AGENT'] . "\n\n";

$browser = get_browser(null, true);
print_r($browser);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property kind="parameter" name="user_agent" type="string"  />
      <property kind="parameter" name="return_array" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="highlight_file">
    <description><![CDATA[  Many servers are configured to automatically highlight files  with a extension. For example,   when viewed will show the  syntax highlighted source of the file. To enable this, add this  line to the :  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Apache_3" />
      <property kind="parameter" name="return" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="highlight_string">
    <description><![CDATA[    The above example will output (in PHP 4):  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
highlight_string('<?php phpinfo(); ?>');
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="DOM XML_14" />
      <property ref="Misc._6" />
    </properties>
    
  </element>
  <element kind="function" name="ignore_user_abort">
    <description><![CDATA[  See also connection_aborted , and   connection_status .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="setting" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="pack">
    <description><![CDATA[  Pack given arguments into binary string according to   format . Returns binary string containing  data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Date/Time_1" />
      <property ref="Direct IO_3" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="php_check_syntax">
    <description><![CDATA[    The name of the file being checked.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$error_message = "";
$filename = "./tests.php";

if(!php_check_syntax($filename, $error_message)) {
   printf("Errors were found in the file %s:\n\n%s\n", $filename, $error_message);
} else {
   printf("The file %s contained no syntax errors.", $filename);
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_30" />
      <property kind="parameter" name="error_message" type="string"  >
      <description>  If the parameter is used, it will  contain the error message generated by the syntax check.   is passed by   .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="php_strip_whitespace">
    <description><![CDATA[  Returns the PHP source code in filename with  PHP comments and whitespace removed. This may be useful for determining the  amount of actual code in your scripts compared with the amount of comments.  This is similar to using from the   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// PHP comment here

/*
 * Another PHP comment
 */

echo        php_strip_whitespace(__FILE__);
// Newlines are considered whitespace, and are removed too:
do_nothing();
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="sleep">
    <description><![CDATA[    This example will output (after 10 seconds)  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// current time
echo date('h:i:s') . "\n";

// sleep for 10 seconds
sleep(10);

// wake up !
echo date('h:i:s') . "\n";

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="MCAL_28" />
    </properties>
    
  </element>
  <element kind="function" name="time_nanosleep">
    <description><![CDATA[  Delays program execution for the given number of   seconds and nanoseconds .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Careful! This won't work as expected if an array is returned
if (time_nanosleep(0, 500000000)) {
    echo "Slept for half a second.\n";
}

// This is better:
if (time_nanosleep(0, 500000000) === true) {
    echo "Slept for half a second.\n";
}

// And this is the best:
$nano = time_nanosleep(2, 100000);

if ($nano === true) {
    echo "Slept for 2 seconds, 100 milliseconds.\n";
} elseif ($nano === false) {
    echo "Sleeping failed.\n";
} elseif (is_array($nano)) {
    $seconds = $nano['seconds'];
    $nanoseconds = $nano['nanoseconds'];
    echo "Interrupted by a signal.\n";
    echo "Time remaining: $seconds seconds, $nanoseconds nanoseconds.";
}
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="MCAL_28" />
      <property kind="parameter" name="nanoseconds" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="uniqid">
    <description><![CDATA[  If you need a unique identifier or token and you intend to give  out that token to the user via the network (i.e. session cookies),  it is recommended that you use something along these lines:  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Arrays_46" />
      <property kind="parameter" name="more_entropy" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="unpack">
    <description><![CDATA[   unpack from binary string into array  according to format . Returns array  containing unpacked elements of binary string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = unpack("c2chars/nint", $binarydata);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Date/Time_1" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="usleep">
    <description><![CDATA[    This script will output :  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Current time
echo date('h:i:s') . "\n";

// wait for 2 secondes
usleep(2000000);

// back!
echo date('h:i:s') . "\n";

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="micro_seconds" type="int" required="1" />
    </properties>
    
  </element>
</group>
<group name="Msession">
  <description><![CDATA[Mohawk Software Session Handler Functions]]></description>
  <element kind="function" name="msession_connect">
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_4" />
      <property kind="parameter" name="port" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="msession_count">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="msession_create">
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_1" />
    </properties>
    
  </element>
  <element kind="function" name="msession_destroy">
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="msession_disconnect">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="msession_find">
    <properties>
      <property ref="ret_array" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="msession_get">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="msession_get_array">
    <properties>
      <property ref="ret_array" />
      <property ref="CCVS_1" />
    </properties>
    
  </element>
  <element kind="function" name="msession_get_data">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
    </properties>
    
  </element>
  <element kind="function" name="msession_inc">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="msession_list">
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="msession_listvar">
    <description><![CDATA[  Returns an associative array of value/session for all sessions  with a variable named name .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="msession_lock">
    <properties>
      <property ref="ret_int" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="msession_plugin">
    <properties>
      <property ref="ret_string" />
      <property ref="CCVS_1" />
      <property kind="parameter" name="val" type="string" required="1" />
      <property kind="parameter" name="param" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="msession_randstr">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="param" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="msession_set">
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_1" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="msession_set_array">
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_1" />
      <property kind="parameter" name="tuples" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="msession_set_data">
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_1" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="msession_timeout">
    <properties>
      <property ref="ret_int" />
      <property ref="CCVS_1" />
      <property kind="parameter" name="param" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="msession_uniq">
    <properties>
      <property ref="ret_string" />
      <property ref="Msession_4" />
    </properties>
    
  </element>
  <element kind="function" name="msession_unlock">
    <properties>
      <property ref="ret_int" />
      <property ref="CCVS_1" />
      <property ref="MCVE_22" />
    </properties>
    
  </element>
</group>
<group name="Multibyte String">
  <description><![CDATA[Multibyte String Functions]]></description>
  <element kind="function" name="mb_convert_case">
    <description><![CDATA[   mb_convert_case returns case folded version of   string converted in the way specified by   mode .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "mary had a Little lamb and she loved it so";
$str = mb_convert_case($str, MB_CASE_UPPER, "UTF-8");
echo $str; // Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO
$str = mb_convert_case($str, MB_CASE_TITLE, "UTF-8");
echo $str; // Prints Mary Had A Little Lamb And She Loved It So
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Calendar_10" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_convert_encoding">
    <description><![CDATA[   mb_convert_encoding converts  character encoding of string str from   from_encoding to   to_encoding .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Convert internal character encoding to SJIS */
$str = mb_convert_encoding($str, "SJIS");

/* Convert EUC-JP to UTF-7 */
$str = mb_convert_encoding($str, "UTF-7", "EUC-JP");

/* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE */
$str = mb_convert_encoding($str, "UCS-2LE", "JIS, eucjp-win, sjis-win");

/* "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS" */
$str = mb_convert_encoding($str, "EUC-JP", "auto");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="to_encoding" type="string" required="1" />
      <property kind="parameter" name="from_encoding" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_convert_kana">
    <description><![CDATA[   mb_convert_kana performs "han-kaku" -  "zen-kaku" conversion for string str . It  returns converted string. This function is only useful for  Japanese.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Convert all "kana" to "zen-kaku" "kata-kana" */
$str = mb_convert_kana($str, "KVC");

/* Convert "han-kaku" "kata-kana" to "zen-kaku" "kata-kana" 
   and "zen-kaku" alpha-numeric to "han-kaku" */
$str = mb_convert_kana($str, "KVa");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="option" type="string"  />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_convert_variables">
    <description><![CDATA[   mb_convert_variables convert  character encoding of variables vars in  encoding from_encoding to encoding   to_encoding . It returns character encoding  before conversion for success, for failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Convert variables $post1, $post2 to internal encoding */
$interenc = mb_internal_encoding();
$inputenc = mb_convert_variables($interenc, "ASCII,UTF-8,SJIS-win", $post1, $post2);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Multibyte String_1" />
      <property kind="parameter" name="from_encoding" type="mixed" required="1" />
      <property kind="parameter" name="vars" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="mb_decode_mimeheader">
    <description><![CDATA[   mb_decode_mimeheader decodes encoded-word  string str in MIME header.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="mb_decode_numericentity">
    <description><![CDATA[  Convert numeric string reference of string   str in specified block to character. It  returns converted string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[$convmap = array (
   int start_code1, int end_code1, int offset1, int mask1,
   int start_code2, int end_code2, int offset2, int mask2,
   ........
   int start_codeN, int end_codeN, int offsetN, int maskN );
// Specify Unicode value for start_codeN and end_codeN
// Add offsetN to value and take bit-wise 'AND' with maskN, 
// then convert value to numeric string reference.]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="convmap" type="array" required="1" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_detect_encoding">
    <description><![CDATA[   mb_detect_encoding detects character  encoding in string str . It returns  detected character encoding.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Detect character encoding with current detect_order */
echo mb_detect_encoding($str);

/* "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS" */
echo mb_detect_encoding($str, "auto");

/* Specify encoding_list character encoding by comma separated list */
echo mb_detect_encoding($str, "JIS, eucjp-win, sjis-win");

/* Use array to specify encoding_list  */
$ary[] = "ASCII";
$ary[] = "JIS";
$ary[] = "EUC-JP";
echo mb_detect_encoding($str, $ary);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="encoding_list" type="mixed"  />
      <property ref="Arrays_20" />
    </properties>
    
  </element>
  <element kind="function" name="mb_detect_order">
    <description><![CDATA[   mb_detect_order sets automatic character  encoding detection order to encoding_list .  It returns for success,   for failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[; Always detect as ISO-8859-1
detect_order = ISO-8859-1, UTF-8

; Always detect as UTF-8, since ASCII/UTF-7 values are 
; valid for UTF-8
detect_order = UTF-8, ASCII, UTF-7

       

<?php
/* Set detection order by enumerated list */
mb_detect_order("eucjp-win,sjis-win,UTF-8");

/* Set detection order by array */
$ary[] = "ASCII";
$ary[] = "JIS";
$ary[] = "EUC-JP";
mb_detect_order($ary);

/* Display current detection order */
echo implode(", ", mb_detect_order());
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Multibyte String_7" />
    </properties>
    
  </element>
  <element kind="function" name="mb_encode_mimeheader">
    <description><![CDATA[   mb_encode_mimeheader encodes a given string   str by the MIME header encoding scheme.  Returns a converted version of the string represented in ASCII.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$name = ""; // kanji
$mbox = "kru";
$doma = "gtinn.mon";
$addr = mb_encode_mimeheader($name, "UTF-7", "Q") . " <" . $mbox . "@" . $doma . ">";
echo $addr;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Firebird/InterBase_19" />
      <property kind="parameter" name="transfer_encoding" type="string"  />
      <property kind="parameter" name="linefeed" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_encode_numericentity">
    <description><![CDATA[   mb_encode_numericentity converts  specified character codes in string str  from HTML numeric character reference to character code. It  returns converted string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[$convmap = array (
 int start_code1, int end_code1, int offset1, int mask1,
 int start_code2, int end_code2, int offset2, int mask2,
 ........
 int start_codeN, int end_codeN, int offsetN, int maskN );
// Specify Unicode value for start_codeN and end_codeN
// Add offsetN to value and take bit-wise 'AND' with maskN, then
// it converts value to numeric string reference.

      

<?php
/* Convert Left side of ISO-8859-1 to HTML numeric character reference */
$convmap = array(0x80, 0xff, 0, 0xff);
$str = mb_encode_numericentity($str, $convmap, "ISO-8859-1");

/* Convert user defined SJIS-win code in block 95-104 to numeric
   string reference */
$convmap = array(
       0xe000, 0xe03e, 0x1040, 0xffff,
       0xe03f, 0xe0bb, 0x1041, 0xffff,
       0xe0bc, 0xe0fa, 0x1084, 0xffff,
       0xe0fb, 0xe177, 0x1085, 0xffff,
       0xe178, 0xe1b6, 0x10c8, 0xffff,
       0xe1b7, 0xe233, 0x10c9, 0xffff,
       0xe234, 0xe272, 0x110c, 0xffff,
       0xe273, 0xe2ef, 0x110d, 0xffff,
       0xe2f0, 0xe32e, 0x1150, 0xffff,
       0xe32f, 0xe3ab, 0x1151, 0xffff );
$str = mb_encode_numericentity($str, $convmap, "sjis-win");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Multibyte String_6" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property kind="parameter" name="regs" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_match">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_3" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_replace">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Filesystem_15" />
      <property kind="parameter" name="replacement" type="string" required="1" />
      <property ref="Filesystem_16" />
      <property kind="parameter" name="option" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_search">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="pattern" type="string"  />
      <property ref="Multibyte String_3" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_search_getpos">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_search_getregs">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_search_init">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_13" />
      <property ref="Multibyte String_3" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_search_pos">
    <description><![CDATA[  The string for match is specified by   mb_ereg_search_init . It it is not specified,  the previous one will be used.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Multibyte String_13" />
      <property ref="Multibyte String_3" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_search_regs">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Multibyte String_13" />
      <property ref="Multibyte String_3" />
    </properties>
    
  </element>
  <element kind="function" name="mb_ereg_search_setpos">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="position" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mb_eregi">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_10" />
    </properties>
    
  </element>
  <element kind="function" name="mb_eregi_replace">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Filesystem_15" />
      <property kind="parameter" name="replace" type="string" required="1" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="mb_get_info">
    <description><![CDATA[  If type isn't specified or is specified to  "all", an array having the elements "internal_encoding",  "http_output", "http_input", "func_overload" will be returned.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Lotus Notes_5" />
    </properties>
    
  </element>
  <element kind="function" name="mb_http_input">
    <description><![CDATA[   type : Input string specifies input  type. " G " for GET, " P " for POST,   " C " for COOKIE. If type is omitted, it returns last  input type processed.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Lotus Notes_5" />
    </properties>
    
  </element>
  <element kind="function" name="mb_http_output">
    <description><![CDATA[  If encoding is set,   mb_http_output sets HTTP output character  encoding to encoding . Output after this  function is converted to encoding .   mb_http_output returns   for success and  for failure.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_internal_encoding">
    <description><![CDATA[   mb_internal_encoding sets internal character  encoding to encoding If parameter is  omitted, it returns current internal encoding.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Set internal character encoding to UTF-8 */
mb_internal_encoding("UTF-8");

/* Display current internal character encoding */
echo mb_internal_encoding();
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_language">
    <description><![CDATA[   mb_language sets language. If   language is omitted, it returns current  language as string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="language" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_list_encodings">
    <description><![CDATA[   mb_list_encodings returns an array with all  supported encodings.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

print_r(mb_list_encodings());

?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="mb_output_handler">
    <description><![CDATA[   mb_output_handler is   ob_start callback  function. mb_output_handler converts  characters in output buffer from internal character encoding to  HTTP output character encoding.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
mb_http_output("UTF-8");
ob_start("mb_output_handler");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="contents" type="string" required="1" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
  <element kind="function" name="mb_parse_str">
    <description><![CDATA[   mb_parse_str parses GET/POST/COOKIE data and  sets global variables. Since PHP does not provide raw POST/COOKIE  data, it can only used for GET data for now. It preses URL  encoded data, detects encoding, converts coding to internal  encoding and set values to result array or  global variables.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="encoded_string" type="string" required="1" />
      <property kind="parameter" name="result" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_preferred_mime_name">
    <description><![CDATA[   mb_preferred_mime_name returns MIME   string for character encoding   encoding . It returns   string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$outputenc = "sjis-win";
mb_http_output($outputenc);
ob_start("mb_output_handler");
header("Content-Type: text/html; charset=" . mb_preferred_mime_name($outputenc));
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="ClibPDF_52" />
    </properties>
    
  </element>
  <element kind="function" name="mb_regex_encoding">
    <description><![CDATA[  If the optional parameter encoding is  specified, it is set to the character encoding for multibyte  regex. The default value is the internal character encoding.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_regex_set_options">
    <description><![CDATA[  Returns the previous options. If options is  omitted, it returns the string that describes the current options.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="IMAP_3" />
    </properties>
    
  </element>
  <element kind="function" name="mb_send_mail">
    <description><![CDATA[   mb_send_mail sends email. Headers and  message are converted and encoded according to   mb_language setting.   mb_send_mail is wrapper  function of mail . See   mail for details.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_21" />
      <property ref="ClibPDF_62" />
      <property ref="Errors and Logging_1" />
      <property ref="IMAP_22" />
      <property kind="parameter" name="additional_parameter" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_split">
    <description><![CDATA[  The internal encoding or the character encoding specified in   mb_regex_encoding will be used as character  encoding.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property kind="parameter" name="limit" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_strcut">
    <description><![CDATA[   mb_strcut returns the portion of   str specified by the   start and   length parameters.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="GMP_17" />
      <property ref="Arrays_36" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_strimwidth">
    <description><![CDATA[   mb_strimwidth truncates string   str to specified   width . It returns truncated string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = mb_strimwidth($str, 0, 40, "..>");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="GMP_17" />
      <property ref="Image_44" />
      <property kind="parameter" name="trimmarker" type="string"  />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_strlen">
    <description><![CDATA[   mb_strlen returns number of characters in  string str having character encoding   encoding . A multi-byte character is  counted as 1.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_strpos">
    <description><![CDATA[   mb_strpos returns the numeric position of  the first occurrence of needle in the   haystack string. If   needle is not found, it returns .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="haystack" type="string" required="1" />
      <property kind="parameter" name="needle" type="string" required="1" />
      <property ref="Filesystem_10" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_strrpos">
    <description><![CDATA[   mb_strrpos returns the numeric position of  the last occurrence of needle in the   haystack string. If   needle is not found, it returns .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_strtolower">
    <description><![CDATA[   mb_strtolower returns str  with all alphabetic characters converted to lowercase.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = mb_strtolower($str);
echo $str; // Prints mary had a little lamb and she loved it so
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_strtoupper">
    <description><![CDATA[   mb_strtoupper returns str  with all alphabetic characters converted to uppercase.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = mb_strtoupper($str);
echo $str; // Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_strwidth">
    <description><![CDATA[   mb_strwidth returns width of string   str .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DOM XML_14" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_substitute_character">
    <description><![CDATA[   mb_substitute_character specifies  substitution character when input character encoding is invalid  or character code is not exist in output character  encoding. Invalid characters may be substituted (no output),  string or integer value (Unicode character code value).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Set with Unicode U+3013 (GETA MARK) */
mb_substitute_character(0x3013);

/* Set hex format */
mb_substitute_character("long");

/* Display current setting */
echo mb_substitute_character();
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="substrchar" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="mb_substr">
    <description><![CDATA[   mb_substr returns the portion of   str specified by the   start and   length parameters.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="GMP_17" />
      <property ref="Arrays_36" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="mb_substr_count">
    <description><![CDATA[   mb_substr_count returns the number of times the   needle substring occurs in the   haystack string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo mb_substr_count("This is a test", "is"); // prints out 2
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
</group>
<group name="MySQL">
  <description><![CDATA[MySQL Functions]]></description>
  <element kind="function" name="mysql_affected_rows">
    <description><![CDATA[   mysql_affected_rows returns the number  of rows affected by the last INSERT, UPDATE or DELETE query  associated with link_identifier .  If the  link identifier isn't specified, the last link opened by   mysql_connect is assumed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* connect to database */
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
mysql_select_db('mydb');

/* this should return the correct numbers of deleted records */
mysql_query('DELETE FROM mytable WHERE id < 10');
printf("Records deleted: %d\n", mysql_affected_rows());

/* with a where clause that is never true, it should return 0 */
mysql_query('DELETE FROM mytable WHERE 0');
printf("Records deleted: %d\n", mysql_affected_rows());
?>

      

<?php
/* connect to database */
mysql_connect("localhost", "mysql_user", "mysql_password") or
    die("Could not connect: " . mysql_error());
mysql_select_db("mydb");

/* Update records */
mysql_query("UPDATE mytable SET used=1 WHERE id < 10");
printf ("Updated records: %d\n", mysql_affected_rows());
mysql_query("COMMIT");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_change_user">
    <description><![CDATA[   mysql_change_user changes the logged in user  of the current active connection, or the connection given by the  optional link_identifier parameter. If a  database is specified, this will be the current database after  the user has been changed. If the new user and password  authorization fails, the current connected user stays active.    ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property ref="FrontBase_3" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_client_encoding">
    <description><![CDATA[   mysql_client_encoding returns the default  character set name for the current connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
$charset = mysql_client_encoding($link);
printf("current character set is %s\n", $charset);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_close">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
echo 'Connected successfully';
mysql_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_connect">
    <description><![CDATA[  Returns a MySQL link identifier on success, or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
echo 'Connected successfully';
mysql_close($link);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="DB++_3" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
      <property kind="parameter" name="new_link" type="bool"  />
      <property kind="parameter" name="client_flags" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="mysql_create_db">
    <description><![CDATA[   mysql_create_db attempts to create a new  database on the server associated with the specified link  identifier.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}

if (mysql_create_db('my_db')) {
    echo "Database created successfully\n";
} else {
    echo 'Error creating database: ' . mysql_error() . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_data_seek">
    <description><![CDATA[   mysql_data_seek moves the internal row  pointer of the MySQL result associated with the specified result  identifier to point to the specified row number.  The next call  to mysql_fetch_row would return that row.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
$db_selected = mysql_select_db('sample_db');
if (!$db_selected) {
    die('Could not select database: ' . mysql_error());
}
$query = 'SELECT last_name, first_name FROM friends';
$result = mysql_query($query);
if (!$result) {
    die('Query failed: ' . mysql_error());
}
/* fetch rows in reverse order */
for ($i = mysql_num_rows($result) - 1; $i >= 0; $i--) {
    if (!mysql_data_seek($result, $i)) {
        echo "Cannot seek to row $i: " . mysql_error() . "\n";
        continue;
    }

    if (!($row = mysql_fetch_assoc($result))) {
        continue;
    }

    echo $row['last_name'] . ' ' . $row['first_name'] . "<br />\n";
}

mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_32" />
      <property ref="FrontBase_10" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_db_name">
    <description><![CDATA[   mysql_db_name takes as its first parameter  the result pointer from a call to   mysql_list_dbs . The   row parameter is an index into the result  set.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
error_reporting(E_ALL);

$link = mysql_connect('dbhost', 'username', 'password');
$db_list = mysql_list_dbs($link);

$i = 0;
$cnt = mysql_num_rows($db_list);
while ($i < $cnt) {
    echo mysql_db_name($db_list, $i) . "\n";
    $i++;
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MCVE_19" />
      <property ref="FrontBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_db_query">
    <description><![CDATA[  Returns a positive MySQL result resource to the query result,  or on error. The function also returns / for   / /  queries to indicate success/failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_drop_db">
    <description><![CDATA[   mysql_drop_db attempts to drop (remove) an  entire database from the server associated with the specified  link identifier.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_errno">
    <description><![CDATA[  Returns the error number from the last MySQL function, or   (zero) if no error occurred.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect("localhost", "mysql_user", "mysql_password");

if (!mysql_select_db("nonexistentdb", $link)) {
    echo mysql_errno($link) . ": " . mysql_error($link). "\n";
}

mysql_select_db("kossu", $link);
if (!mysql_query("SELECT * FROM nonexistenttable", $link)) {
    echo mysql_errno($link) . ": " . mysql_error($link) . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_error">
    <description><![CDATA[  Returns the error text from the last MySQL function, or   (the empty string) if no error occurred.  If no link is explicitly passed to the function, the last  successful open link will be used to retrieve the error message  from the MySQL server.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect("localhost", "mysql_user", "mysql_password");

mysql_select_db("nonexistentdb", $link);
echo mysql_errno($link) . ": " . mysql_error($link). "\n";

mysql_select_db("kossu", $link);
mysql_query("SELECT * FROM nonexistenttable", $link);
echo mysql_errno($link) . ": " . mysql_error($link) . "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_escape_string">
    <description><![CDATA[  This function will escape the unescaped_string ,  so that it is safe to place it in a mysql_query .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$item = "Zak's Laptop";
$escaped_item = mysql_escape_string($item);
printf("Escaped string: %s\n", $escaped_item);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="unescaped_string" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_fetch_array">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or  if there are no more rows.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[SELECT table1.field AS foo, table2.field AS bar FROM table1, table2

      

<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
    die("Could not connect: " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_NUM)) {
    printf("ID: %s  Name: %s", $row[0], $row[1]);  
}

mysql_free_result($result);
?>

      

<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
    die("Could not connect: " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
    printf("ID: %s  Name: %s", $row["id"], $row["name"]);
}

mysql_free_result($result);
?>

      

<?php
mysql_connect("localhost", "mysql_user", "mysql_password") or
    die("Could not connect: " . mysql_error());
mysql_select_db("mydb");

$result = mysql_query("SELECT id, name FROM mytable");

while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {
    printf ("ID: %s  Name: %s", $row[0], $row["name"]);
}

mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_fetch_assoc">
    <description><![CDATA[  Returns an associative array that corresponds to the fetched row,  or if there are no more rows.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$conn = mysql_connect("localhost", "mysql_user", "mysql_password");

if (!$conn) {
    echo "Unable to connect to DB: " . mysql_error();
    exit;
}
    
if (!mysql_select_db("mydbname")) {
    echo "Unable to select mydbname: " . mysql_error();
    exit;
}

$sql = "SELECT id as userid, fullname, userstatus 
        FROM   sometable
        WHERE  userstatus = 1";

$result = mysql_query($sql);

if (!$result) {
    echo "Could not successfully run query ($sql) from DB: " . mysql_error();
    exit;
}

if (mysql_num_rows($result) == 0) {
    echo "No rows found, nothing to print so am exiting";
    exit;
}

// While a row of data exists, put that row in $row as an associative array
// Note: If you're expecting just one row, no need to use a loop
// Note: If you put extract($row); inside the following loop, you'll
//       then create $userid, $fullname, and $userstatus
while ($row = mysql_fetch_assoc($result)) {
    echo $row["userid"];
    echo $row["fullname"];
    echo $row["userstatus"];
}

mysql_free_result($result);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_fetch_field">
    <description><![CDATA[  Returns an object containing field information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn = mysql_connect('localhost:3306', 'user', 'password');
if (!$conn) {
    die('Could not connect: ' . mysql_error());
}
mysql_select_db('database');
$result = mysql_query('select * from table');
if (!$result) {
    die('Query failed: ' . mysql_error());
}
/* get column metadata */
$i = 0;
while ($i < mysql_num_fields($result)) {
    echo "Information for column $i:<br />\n";
    $meta = mysql_fetch_field($result, $i);
    if (!$meta) {
        echo "No information available<br />\n";
    }
    echo "<pre>
blob:         $meta->blob
max_length:   $meta->max_length
multiple_key: $meta->multiple_key
name:         $meta->name
not_null:     $meta->not_null
numeric:      $meta->numeric
primary_key:  $meta->primary_key
table:        $meta->table
type:         $meta->type
unique_key:   $meta->unique_key
unsigned:     $meta->unsigned
zerofill:     $meta->zerofill
</pre>";
    $i++;
}
mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_fetch_lengths">
    <description><![CDATA[  Returns an array that corresponds to the lengths of each field  in the last row fetched by mysql_fetch_row ,  or on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SELECT id,email FROM people WHERE id = '42'");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}
$row     = mysql_fetch_assoc($result);
$lengths = mysql_fetch_lengths($result);

print_r($row);
print_r($lengths);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_fetch_object">
    <description><![CDATA[  Returns an object with properties that correspond to the fetched  row, or if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$row = mysql_fetch_object($result);

/* this is valid */
echo $row->field;
/* this is invalid */
// echo $row->0;

?>

      

<?php
mysql_connect("hostname", "user", "password");
mysql_select_db("mydb");
$result = mysql_query("select * from mytable");
while ($row = mysql_fetch_object($result)) {
    echo $row->user_id;
    echo $row->fullname;
}
mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_fetch_row">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or  if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SELECT id,email FROM people WHERE id = '42'");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}
$row = mysql_fetch_row($result);

echo $row[0]; // 42
echo $row[1]; // the email value
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_field_flags">
    <description><![CDATA[   mysql_field_flags returns the field flags of  the specified field. The flags are reported as a single word  per flag separated by a single space, so that you can split the  returned value using explode .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SELECT id,email FROM people WHERE id = '42'");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}
$flags = mysql_field_flags($result, 0);

echo $flags;
print_r(explode(' ', $flags));
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_field_len">
    <description><![CDATA[   mysql_field_len returns the length of the  specified field.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SELECT id,email FROM people WHERE id = '42'");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}

// Will get the length of the value in email so for example
// user@example.com would give us a length of 16
$length = mysql_field_len($result, 'email');
echo $length;
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_field_name">
    <description><![CDATA[   mysql_field_name returns the name of the  specified field index. result must be a  valid result identifier and field_index is  the numerical offset of the field.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* The users table consists of three fields:
 *   user_id
 *   username
 *   password.
 */
$link = @mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect to MySQL server: ' . mysql_error());
}
$dbname = 'mydb';
$db_selected = mysql_select_db($dbname, $link);
if (!$db_selected) {
    die('Could not set $dbname: ' . mysql_error());
}
$res = mysql_query('select * from users', $link);

echo mysql_field_name($res, 0) . "\n";
echo mysql_field_name($res, 2);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="field_index" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_field_seek">
    <description><![CDATA[  Seeks to the specified field offset.  If the next call to   mysql_fetch_field doesn't include a field  offset, the field offset specified in   mysql_field_seek will be returned.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_field_table">
    <description><![CDATA[  Returns the name of the table that the specified field is  in.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SELECT name,comment FROM people,comments");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}

// Assuming name is in the people table
$table = mysql_field_table($result, 'name');
echo $table; // people
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_field_type">
    <description><![CDATA[   mysql_field_type is similar to the   mysql_field_name function. The arguments are  identical, but the field type is returned instead. The field type  will be one of , ,   , , and others as  detailed in the .    The above example would produce the following output:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
mysql_connect("localhost", "mysql_username", "mysql_password");
mysql_select_db("mysql");
$result = mysql_query("SELECT * FROM func");
$fields = mysql_num_fields($result);
$rows   = mysql_num_rows($result);
$table = mysql_field_table($result, 0);
echo "Your '" . $table . "' table has " . $fields . " fields and " . $rows . " record(s)\n";
echo "The table has the following fields:\n";
for ($i=0; $i < $fields; $i++) {
    $type  = mysql_field_type($result, $i);
    $name  = mysql_field_name($result, $i);
    $len   = mysql_field_len($result, $i);
    $flags = mysql_field_flags($result, $i);
    echo $type . " " . $name . " " . $len . " " . $flags . "\n";
}
mysql_free_result($result);
mysql_close();
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_free_result">
    <description><![CDATA[   mysql_free_result will free all memory  associated with the result identifier result .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SELECT id,email FROM people WHERE id = '42'");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}
/* Use the result, assuming we're done with it afterwords */
$row = mysql_fetch_assoc($result);

/* Now we free up the result and continue on with our script */
mysql_free_result($result);

echo $row['id'];
echo $row['email'];
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_get_client_info">
    <description><![CDATA[   mysql_get_client_info returns a string that  represents the client library version.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
printf("MySQL client info: %s\n", mysql_get_client_info());
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_get_host_info">
    <description><![CDATA[   mysql_get_host_info returns a string  describing the type of connection in use for the connection   link_identifier , including the server host  name.  If link_identifier is omitted, the  last opened connection will be used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
printf("MySQL host info: %s\n", mysql_get_host_info());
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_get_proto_info">
    <description><![CDATA[   mysql_get_proto_info returns the protocol  version used by connection   link_identifier .  If   link_identifier is omitted, the last opened  connection will be used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
printf("MySQL protocol version: %s\n", mysql_get_proto_info());
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_get_server_info">
    <description><![CDATA[   mysql_get_server_info returns the server  version used by connection   link_identifier .  If   link_identifier is omitted, the last opened  connection will be used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
printf("MySQL server version: %s\n", mysql_get_server_info());
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_info">
    <description><![CDATA[   mysql_info returns detailed information about  the last query using the given link_identifier .  If link_identifier isn't specified, the last  opened link is assumed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[INSERT INTO ... SELECT ...
String format: Records: 23 Duplicates: 0 Warnings: 0 
INSERT INTO ... VALUES (...),(...),(...)...
String format: Records: 37 Duplicates: 0 Warnings: 0 
LOAD DATA INFILE ...
String format: Records: 42 Deleted: 0 Skipped: 0 Warnings: 0 
ALTER TABLE
String format: Records: 60 Duplicates: 0 Warnings: 0 
UPDATE
String format: Rows matched: 65 Changed: 65 Warnings: 0]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_insert_id">
    <description><![CDATA[   mysql_insert_id returns the ID generated for  an AUTO_INCREMENT column by the previous INSERT query using the  given link_identifier .  If   link_identifier isn't specified, the last  opened link is assumed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
mysql_select_db('mydb');

mysql_query("INSERT INTO mytable (product) values ('kossu')");
printf("Last inserted record has id %d\n", mysql_insert_id());
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_list_dbs">
    <description><![CDATA[   mysql_list_dbs will return a result pointer  containing the databases available from the current mysql  daemon. Use the mysql_tablename function to  traverse this result pointer, or any function for result tables,  such as mysql_fetch_array .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
$db_list = mysql_list_dbs($link);

while ($row = mysql_fetch_object($db_list)) {
    echo $row->Database . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_list_fields">
    <description><![CDATA[  The function mysql_list_fields is deprecated. It  is preferable to use mysql_query to issue a  SQL Statement instead.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SHOW COLUMNS FROM sometable");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}
if (mysql_num_rows($result) > 0) {
    while ($row = mysql_fetch_assoc($result)) {
        print_r($row);
    }
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FrontBase_8" />
      <property ref="FrontBase_16" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_list_processes">
    <description><![CDATA[   mysql_list_processes returns a result pointer  describing the current server threads.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');

$result = mysql_list_processes($link);
while ($row = mysql_fetch_assoc($result)){
    printf("%s %s %s %s %s\n", $row["Id"], $row["Host"], $row["db"],
       $row["Command"], $row["Time"]);
}
mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_list_tables">
    <description><![CDATA[   mysql_list_tables takes a database name and  returns a result pointer much like the   mysql_query function.  Use the mysql_tablename function to  traverse this result pointer, or any function for result tables,  such as mysql_fetch_array .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbname = 'mysql_dbname';

if (!mysql_connect('mysql_host', 'mysql_user', 'mysql_password')) {
    echo 'Could not connect to mysql';
    exit;
}

$result = mysql_list_tables($dbname);

if (!$result) {
    echo "DB Error, could not list tables\n";
    echo 'MySQL Error: ' . mysql_error();
    exit;
}

while ($row = mysql_fetch_row($result)) {
    echo "Table: $row[0]\n";
}

mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_num_fields">
    <description><![CDATA[   mysql_num_fields returns the number of  fields in the result set result .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query("SELECT id,email FROM people WHERE id = '42'");
if (!$result) {
    echo 'Could not run query: ' . mysql_error();
    exit;
}

/* returns 2 because id,email === two fields */
echo mysql_num_fields($result);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_num_rows">
    <description><![CDATA[   mysql_num_rows returns the number of rows in  a result set. This command is only valid for SELECT statements.  To retrieve the number of rows affected by a INSERT, UPDATE or  DELETE query, use mysql_affected_rows .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$link = mysql_connect("localhost", "mysql_user", "mysql_password");
mysql_select_db("database", $link);

$result = mysql_query("SELECT * FROM table1", $link);
$num_rows = mysql_num_rows($result);

echo "$num_rows Rows\n";

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_pconnect">
    <description><![CDATA[  Returns a positive MySQL persistent link identifier on success,  or on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DB++_3" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
      <property ref="MySQL_2" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_ping">
    <description><![CDATA[   mysql_ping checks whether or not the connection to  the server is working. If it has gone down, an automatic reconnection is  attempted. This function can be used by scripts that remain idle for a  long while, to check whether or not the server has closed the connection  and reconnect if necessary.   mysql_ping returns if the connection to the  server is working, otherwise .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
set_time_limit(0);

$conn = mysql_connect('localhost', 'mysqluser', 'mypass');
$db   = mysql_select_db('mydb');

/* Assuming this query will take a long time */
$result = mysql_query($sql);
if (!$result) {
    echo 'Query #1 failed, exiting.';
    exit;
}

/* Make sure the connection is still alive, if not, try to reconnect */
if (!mysql_ping($conn)) {
    echo 'Lost connection, exiting after query #1';
    exit;
}
mysql_free_result($result);

/* So the connection is still alive, let's run another query */
$result2 = mysql_query($sql2);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_query">
    <description><![CDATA[   mysql_query sends a query (to the currently  active database on the server that's associated with the  specified link_identifier ).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = mysql_query('SELECT * WHERE 1=1');
if (!$result) {
    die('Invalid query: ' . mysql_error());
}

?>

      

<?php
// This could be supplied by a user, for example
$firstname = 'fred';
$lastname  = 'fox';

// Formulate Query
// This is the best way to perform a SQL query
// For more examples, see mysql_real_escape_string()
$query = sprintf("SELECT firstname, lastname, address, age FROM friends WHERE firstname='%s' AND lastname='%s'",
    mysql_real_escape_string($firstname),
    mysql_real_escape_string($lastname));

// Perform Query
$result = mysql_query($query);

// Check result
// This shows the actual query sent to MySQL, and the error. Useful for debugging.
if (!$result) {
    $message  = 'Invalid query: ' . mysql_error() . "\n";
    $message .= 'Whole query: ' . $query;
    die($message);
}

// Use result
// Attempting to print $result won't allow access to information in the resource
// One of the mysql result functions must be used
// See also mysql_result(), mysql_fetch_array(), mysql_fetch_row(), etc.
while ($row = mysql_fetch_assoc($result)) {
    echo $row['firstname'];
    echo $row['lastname'];
    echo $row['address'];
    echo $row['age'];
}

// Free the resources associated with the result set
// This is done automatically at the end of the script
mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_real_escape_string">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Connect
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
    OR die(mysql_error());

// Query
$query = sprintf("SELECT * FROM users WHERE user='%s' AND password='%s'",
            mysql_real_escape_string($user),
            mysql_real_escape_string($password));
?>

      

<?php
// Query database to check if there are any matching users
$query = "SELECT * FROM users WHERE user='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($query);

// We didn't check $_POST['password'], it could be anything the user wanted! For example:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// This means the query sent to MySQL would be:
echo $query;
?>

      

<?php
// Quote variable to make safe
function quote_smart($value)
{
    // Stripslashes
    if (get_magic_quotes_gpc()) {
        $value = stripslashes($value);
    }
    // Quote if not integer
    if (!is_numeric($value)) {
        $value = "'" . mysql_real_escape_string($value) . "'";
    }
    return $value;
}

// Connect
$link = mysql_connect('mysql_host', 'mysql_user', 'mysql_password')
    OR die(mysql_error());

// Make a safe query
$query = sprintf("SELECT * FROM users WHERE user=%s AND password=%s",
            quote_smart($_POST['username']),
            quote_smart($_POST['password']));

mysql_query($query);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MySQL_3" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_result">
    <description><![CDATA[   mysql_result returns the contents of one  cell from a MySQL result set.  The field argument can be the  field's offset, or the field's name, or the field's table dot  field name (tablename.fieldname).  If the column name has been  aliased ('select foo as bar from...'), use the alias instead of  the column name.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Could not connect: ' . mysql_error());
}
$result = mysql_query('SELECT name FROM work.employee');
if (!$result) {
    die('Could not query:' . mysql_error());
}
echo mysql_result($result, 2); // outputs third employee's name

mysql_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MCVE_19" />
      <property ref="FrontBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_select_db">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
if (!$link) {
    die('Not connected : ' . mysql_error());
}

// make foo the current db
$db_selected = mysql_select_db('foo', $link);
if (!$db_selected) {
    die ('Can\'t use foo : ' . mysql_error());
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_stat">
    <description><![CDATA[   mysql_stat returns the current server status.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link   = mysql_connect('localhost', 'mysql_user', 'mysql_password');
$status = explode('  ', mysql_stat($link));
print_r($status);
?>

    

<?php
$link   = mysql_connect('localhost', 'mysql_user', 'mysql_password');
$result = mysql_query('SHOW VARIABLES', $link);
while ($row = mysql_fetch_assoc($result)) {
    echo $row['Variable_name'] . ' = ' . $row['Value'] . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_tablename">
    <description><![CDATA[   mysql_tablename takes a result pointer  returned by the mysql_list_tables function  as well as an integer index and returns the name of a table. The   mysql_num_rows function may be used to  determine the number of tables in the result pointer.  Use the mysql_tablename function to  traverse this result pointer, or any function for result tables,  such as mysql_fetch_array .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
mysql_connect("localhost", "mysql_user", "mysql_password");
$result = mysql_list_tables("mydb");
$num_rows = mysql_num_rows($result);
for ($i = 0; $i < $num_rows; $i++) {
    echo "Table: ", mysql_tablename($result, $i), "\n";
}

mysql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_24" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_thread_id">
    <description><![CDATA[   mysql_thread_id returns the current thread ID. If  the connection is lost and you reconnect with   mysql_ping , the thread ID will change. This means  you should not get the thread ID and store it for later. You should get  it when you need it.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
$thread_id = mysql_thread_id($link);
if ($thread_id){
    printf("current thread id is %d\n", $thread_id);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysql_unbuffered_query">
    <description><![CDATA[   mysql_unbuffered_query sends a SQL query   query to MySQL, without fetching and  buffering the result rows automatically, as   mysql_query does.  On the one hand, this  saves a considerable amount of memory with SQL queries that  produce large result sets. On the other hand, you can start  working on the result set immediately after the first row has  been retrieved: you don't have to wait until the complete SQL  query has been performed.  When using multiple DB-connects, you  have to specify the optional parameter   link_identifier .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
</group>
<group name="NSAPI">
  <description><![CDATA[NSAPI-specific Functions]]></description>
  <element kind="function" name="nsapi_request_headers">
    <description><![CDATA[   nsapi_request_headers gets all the HTTP headers in  the current request. This is only supported when PHP runs as a   module.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$headers = nsapi_request_headers();

foreach ($headers as $header => $value) {
  echo "$header: $value <br />\n";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="nsapi_response_headers">
    <description><![CDATA[  Gets all the NSAPI response headers.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="nsapi_virtual">
    <description><![CDATA[   nsapi_virtual is an NSAPI-specific function which  is equivalent to < !--#include virtual...-- > in SSI  ( files). It does an NSAPI sub-request.  It is useful for including CGI scripts or .shtml files, or anything  else that you'd parse through webserver.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM XML_1" />
    </properties>
    
  </element>
</group>
<group name="Ncurses">
  <description><![CDATA[Ncurses Terminal Screen Control Functions]]></description>
  <element kind="function" name="ncurses_addch">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="ch" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_addchnstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_86" />
      <property kind="parameter" name="n" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_addchstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_86" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_addnstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_86" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_addstr">
    <properties>
      <property ref="ret_int" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_assume_default_colors">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="fg" type="int" required="1" />
      <property kind="parameter" name="bg" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_attroff">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="attributes" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_attron">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_5" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_attrset">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_5" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_baudrate">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_beep">
    <description><![CDATA[   ncurses_beep sends an audible alert (bell)  and if its not possible flashes the screen.    ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_bkgd">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="attrchar" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_bkgdset">
    <properties>
      <property ref="ret_void" />
      <property ref="Ncurses_6" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_border">
    <properties>
      <property ref="ret_int" />
      <property ref="Ming (flash)_37" />
      <property ref="Ming (flash)_38" />
      <property kind="parameter" name="top" type="int" required="1" />
      <property kind="parameter" name="bottom" type="int" required="1" />
      <property kind="parameter" name="tl_corner" type="int" required="1" />
      <property kind="parameter" name="tr_corner" type="int" required="1" />
      <property kind="parameter" name="bl_corner" type="int" required="1" />
      <property kind="parameter" name="br_corner" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_bottom_panel">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="panel" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_can_change_color">
    <description><![CDATA[  The function ncurses_can_change_color returns   or , depending on whether the terminal has color  capabilities and whether the programmer can change the colors.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_cbreak">
    <description><![CDATA[   ncurses_cbreak disables line buffering and  character processing (interrupt and flow control characters are  unaffected), making characters typed by the user immediately  available to the program.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_clear">
    <description><![CDATA[   ncurses_clear clears the screen completely  without setting blanks.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_clrtobot">
    <description><![CDATA[   ncurses_clrtobot erases all lines from cursor  to end of screen and creates blanks. Blanks created by   ncurses_clrtobot have the current background  rendition.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_clrtoeol">
    <description><![CDATA[   ncurses_clrtoeol erases the current line from  cursor position to the end. Blanks created by   ncurses_clrtoeol have the current background  rendition.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_color_content">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_15" />
      <property kind="parameter" name="r" type="int" required="1" />
      <property kind="parameter" name="g" type="int" required="1" />
      <property kind="parameter" name="b" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_color_set">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="pair" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_curs_set">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="visibility" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_def_prog_mode">
    <description><![CDATA[   ncurses_def_prog_mode saves the current  terminal modes for program (in curses) for use by   ncurses_reset_prog_mode . Returns on  success, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_def_shell_mode">
    <description><![CDATA[   ncurses_def_shell_mode saves the current  terminal modes for shell (not in curses) for use by   ncurses_reset_shell_mode . Returns on  success, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_define_key">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="definition" type="string" required="1" />
      <property kind="parameter" name="keycode" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_del_panel">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_delay_output">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="milliseconds" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_delch">
    <description><![CDATA[   ncurses_delch deletes the character under  the cursor. All characters to the right of the cursor on the same  line are moved to the left one position and the last character on  the line is filled with a blank. The cursor position does  not change. Returns on success, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_deleteln">
    <description><![CDATA[   ncurses_deleteln deletes the current line under  cursorposition. All lines below the current line are moved up one  line.  The bottom line of window is cleared. Cursor position does not  change.  Returns on success, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_delwin">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="window" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_doupdate">
    <description><![CDATA[   ncurses_doupdate() compares the virtual screen to the  physical screen and updates the physical screen. This way is more  effective than using multiple refresh calls.    ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_echo">
    <description><![CDATA[   ncurses_echo enables echo mode.  All characters typed by user are echoed by   ncurses_getch .  Returns on success, if any error occurred.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_echochar">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="character" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_end">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_erase">
    <description><![CDATA[   ncurses_erase fills the terminal screen with  blanks. Created blanks have the current background rendition, set  by ncurses_bkgd .    ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_erasechar">
    <description><![CDATA[   ncurses_erasechar returns the current erase  char character.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_filter">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_flash">
    <description><![CDATA[   ncurses_flash flashes the screen, and if  its not possible, sends an audible alert (bell).  Returns on success, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_flushinp">
    <description><![CDATA[  The ncurses_flushinp throws away any  typeahead that has been typed and has not yet been read by your  program.  Returns on success, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_getch">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_getmaxyx">
    <properties>
      <property ref="ret_void" />
      <property ref="Ncurses_22" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_getmouse">
    <description><![CDATA[   ncurses_getmouse reads mouse event out of  queue. Function ncurses_getmouse will return  ; if a mouse event is actually visible in the given  window, otherwise it will return .  Event options will be delivered in parameter   mevent , which has to be an array, passed  by reference (see example below).  On success an associative array with following keys will be  delivered:   "id" : Id to distinguish multiple  devices]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
switch (ncurses_getch()){
  case NCURSES_KEY_MOUSE:
    if (!ncurses_getmouse(&$mevent)){
      if ($mevent["mmask"] & NCURSES_MOUSE_BUTTON1_PRESSED){
        $mouse_x = $mevent["x"]; // Save mouse position
        $mouse_y = $mevent["y"];
      }
    }
  break;

  default:
    /* .... */
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="mevent" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_getyx">
    <properties>
      <property ref="ret_void" />
      <property ref="Ncurses_22" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_halfdelay">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="tenth" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_has_colors">
    <description><![CDATA[   ncurses_has_colors returns or  depending on whether the terminal has color capacities.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_has_ic">
    <description><![CDATA[   ncurses_has_ic checks terminals insert- and  delete capabilities. It returns when terminal has  insert/delete-capabilities, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_has_il">
    <description><![CDATA[   ncurses_has_il checks terminals insert- and  delete-line-capabilities. It returns when terminal has  insert/delete-line capabilities, otherwise  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_has_key">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_20" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_hide_panel">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_hline">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="charattr" type="int" required="1" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_inch">
    <description><![CDATA[   ncurses_inch returns the character from the  current position.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_init">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_init_color">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_15" />
      <property ref="Ncurses_14" />
      <property ref="Ncurses_15" />
      <property ref="Ncurses_16" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_init_pair">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_17" />
      <property ref="Ncurses_3" />
      <property ref="Ncurses_4" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_insch">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_23" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_insdelln">
    <properties>
      <property ref="ret_int" />
      <property ref="DOM_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_insertln">
    <description><![CDATA[   ncurses_insertln inserts a new line above  the current line. The bottom line will be lost.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_insstr">
    <properties>
      <property ref="ret_int" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_instr">
    <description><![CDATA[   ncurses_instr returns the number of  characters read from the current character position until end of  line.   buffer contains the characters. Attributes  are stripped from the characters.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave API_5" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_isendwin">
    <description><![CDATA[   ncurses_isendwin returns , if   ncurses_endwin has been called without any  subsequent calls to ncurses_wrefresh ,  otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_keyok">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_20" />
      <property kind="parameter" name="enable" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_keypad">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property kind="parameter" name="bf" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_killchar">
    <description><![CDATA[   ncurses_killchar returns the current line  kill character.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_longname">
    <description><![CDATA[   ncurses_longname returns a verbose  description of the terminal. The description is truncated to 128  characters.  On Error ncurses_longname returns NULL.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_meta">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property kind="parameter" name="8bit" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mouse_trafo">
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property kind="parameter" name="toscreen" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mouseinterval">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_21" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mousemask">
    <description><![CDATA[  Function ncurses_mousemask will set mouse events  to be reported. By default no mouse events will be reported. The  function ncurses_mousemask will return a  mask to indicated which of the in parameter   newmask  specified mouse events can be reported. On complete failure, it  returns 0. In parameter oldmask , which is  passed by reference ncurses_mousemask  returns the previous value of mouse event mask.   Mouse events are represented by NCURSES_KEY_MOUSE in the   ncurses_wgetch input stream. To read the  event data and pop the event of of queue, call   ncurses_getmouse .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$newmask = NCURSES_BUTTON1_CLICKED + NCURSES_BUTTON1_RELEASED;
$mask = ncurses_mousemask($newmask, &$oldmask);
if ($mask & $newmask){
  printf ("All specified mouse options will be supported\n");
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="newmask" type="int" required="1" />
      <property kind="parameter" name="oldmask" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_move">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_move_panel">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
      <property kind="parameter" name="startx" type="int" required="1" />
      <property kind="parameter" name="starty" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvaddch">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property kind="parameter" name="c" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvaddchnstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="Image_86" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvaddchstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="Image_86" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvaddnstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="Image_86" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvaddstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="Image_86" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvcur">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="old_y" type="int" required="1" />
      <property kind="parameter" name="old_x" type="int" required="1" />
      <property kind="parameter" name="new_y" type="int" required="1" />
      <property kind="parameter" name="new_x" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvdelch">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvgetch">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvhline">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="Ncurses_6" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvinch">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvvline">
    <properties>
      <property ref="ret_int" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="Ncurses_6" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_mvwaddstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_napms">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_21" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_new_panel">
    <properties>
      <property ref="ret_resource" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_newpad">
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="rows" type="int" required="1" />
      <property kind="parameter" name="cols" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_newwin">
    <properties>
      <property ref="ret_resource" />
      <property ref="Ncurses_40" />
      <property ref="Ncurses_41" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_nl">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_nocbreak">
    <description><![CDATA[   ncurses_nocbreak routine returns terminal to  normal (cooked) mode. Initially the terminal may or may not in  cbreak mode as the mode is inherited. Therefore a program should  call ncurses_cbreak and   ncurses_nocbreak explicitly.  Returns if any error occurred, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_noecho">
    <description><![CDATA[   ncurses_noecho prevents echoing of user  typed characters.  Returns if any error occurred, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_nonl">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_noqiflush">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_noraw">
    <description><![CDATA[   ncurses_noraw switches the terminal out of raw  mode. Raw mode is similar to cbreak mode, in that characters  typed are immediately passed through to the user program. The  differences that are that in raw mode, the interrupt, quit,  suspend and flow control characters are all passed through  uninterpreted, instead of generating a signal.  Returns if any error occurred, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_pair_content">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_17" />
      <property kind="parameter" name="f" type="int" required="1" />
      <property ref="Ncurses_16" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_panel_above">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_panel_below">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_panel_window">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_pnoutrefresh">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="pad" type="resource" required="1" />
      <property kind="parameter" name="pminrow" type="int" required="1" />
      <property kind="parameter" name="pmincol" type="int" required="1" />
      <property kind="parameter" name="sminrow" type="int" required="1" />
      <property kind="parameter" name="smincol" type="int" required="1" />
      <property kind="parameter" name="smaxrow" type="int" required="1" />
      <property kind="parameter" name="smaxcol" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_prefresh">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_43" />
      <property ref="Ncurses_44" />
      <property ref="Ncurses_45" />
      <property ref="Ncurses_46" />
      <property ref="Ncurses_47" />
      <property ref="Ncurses_48" />
      <property ref="Ncurses_49" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_putp">
    <properties>
      <property ref="ret_int" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_qiflush">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_raw">
    <description><![CDATA[   ncurses_raw places the terminal in raw  mode. Raw mode is similar to cbreak mode, in that characters  typed are immediately passed through to the user program. The  differences that are that in raw mode, the interrupt, quit,  suspend and flow control characters are all passed through  uninterpreted, instead of generating a signal.  Returns if any error occurred, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_refresh">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_replace_panel">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_reset_prog_mode">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_reset_shell_mode">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_resetty">
    <description><![CDATA[  Function ncurses_resetty restores the  terminal state, which was previously saved by calling   ncurses_savetty .  This function always returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_savetty">
    <description><![CDATA[  Function ncurses_savetty saves the current  terminal state. The saved terminal state can be restored with  function ncurses_resetty .   ncurses_savetty always returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_scr_dump">
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_scr_init">
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_scr_restore">
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_scr_set">
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_scrl">
    <properties>
      <property ref="ret_int" />
      <property ref="DOM_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_show_panel">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_attr">
    <description><![CDATA[   ncurses_slk_attr returns the current soft  label key attribute. On error returns , otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_attroff">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="intarg" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_attron">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_50" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_attrset">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_50" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_clear">
    <description><![CDATA[  The function ncurses_slk_clear clears soft  label keys from screen. Returns on error, otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_color">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_50" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_init">
    <description><![CDATA[  Function ncurses_slk_init must be called  before ncurses_initscr or   ncurses_newterm is called. If   ncurses_initscr eventually uses a line from  stdscr to emulate the soft labels, then   format determines how the labels are  arranged of the screen. Setting format to  0 indicates a 3-2-3 arrangement of the labels, 1 indicates a 4-4  arrangement and 2 indicates the PC like 4-4-4 mode, but in  addition an index line will be created.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="format" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_noutrefresh">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_refresh">
    <description><![CDATA[   ncurses_slk_refresh copies soft label keys  from virtual screen to physical screen. Returns on error,  otherwise .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_restore">
    <description><![CDATA[  The function ncurses_slk_restore restores  the soft label keys after ncurses_slk_clear  has been performed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_set">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="labelnr" type="int" required="1" />
      <property kind="parameter" name="label" type="string" required="1" />
      <property ref="Ncurses_51" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_slk_touch">
    <description><![CDATA[  The ncurses_slk_touch function forces  all the soft  labels to be output the next time a   ncurses_slk_noutrefresh is performed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_standend">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_standout">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_start_color">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_termattrs">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_termname">
    <description><![CDATA[   ncurses_termname returns terminals  shortname. The shortname is truncated to 14 characters.  On error ncurses_termname returns NULL.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_timeout">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="millisec" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_top_panel">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_13" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_typeahead">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="fd" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_ungetch">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_20" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_ungetmouse">
    <description><![CDATA[   ncurses_getmouse pushes a KEY_MOUSE event  onto the unput queue and associates with this event the given  state sata and screen-relative character cell coordinates,  specified in mevent .   Event options will be specified in associative array   mevent :   "id" : Id to distinguish multiple  devices]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Ncurses_24" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_update_panels">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_use_default_colors">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_use_env">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="flag" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_use_extended_names">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_56" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_vidattr">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_50" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_vline">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_26" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_waddch">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Ncurses_1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_waddstr">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="DOM XML_14" />
      <property ref="Direct IO_5" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wattroff">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property kind="parameter" name="attrs" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wattron">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Ncurses_57" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wattrset">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Ncurses_57" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wborder">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Ming (flash)_37" />
      <property ref="Ming (flash)_38" />
      <property ref="Ncurses_7" />
      <property ref="Ncurses_8" />
      <property ref="Ncurses_9" />
      <property ref="Ncurses_10" />
      <property ref="Ncurses_11" />
      <property ref="Ncurses_12" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wclear">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wcolor_set">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property kind="parameter" name="color_pair" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_werase">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wgetch">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_whline">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Ncurses_26" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wmouse_trafo">
    <properties>
      <property ref="ret_bool" />
      <property ref="Ncurses_22" />
      <property ref="Image_18" />
      <property ref="Image_17" />
      <property ref="Ncurses_30" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wmove">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Image_18" />
      <property ref="Image_17" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wnoutrefresh">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wrefresh">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wstandend">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wstandout">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
    </properties>
    
  </element>
  <element kind="function" name="ncurses_wvline">
    <properties>
      <property ref="ret_int" />
      <property ref="Ncurses_22" />
      <property ref="Ncurses_26" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
</group>
<group name="Network">
  <description><![CDATA[Network Functions]]></description>
  <element kind="function" name="checkdnsrr">
    <properties>
      <property ref="ret_int" />
      <property ref="FTP_4" />
      <property ref="Lotus Notes_5" />
    </properties>
    
  </element>
  <element kind="function" name="closelog">
    <description><![CDATA[   closelog closes the descriptor being used to  write to the system logger.  The use of   closelog is optional.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="debugger_off">
    <description><![CDATA[  Disables the internal PHP debugger. This function is only  available in PHP 3.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="debugger_on">
    <description><![CDATA[  Enables the internal PHP debugger, connecting it to   address .   This function is only  available in PHP 3.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="IMAP_31" />
    </properties>
    
  </element>
  <element kind="function" name="define_syslog_variables">
    <description><![CDATA[  Initializes all constants used in the syslog functions.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="dns_check_record">
    <description><![CDATA[  Check DNS records corresponding to a given Internet host name or  IP address  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FTP_4" />
      <property ref="Lotus Notes_5" />
    </properties>
    
  </element>
  <element kind="function" name="dns_get_mx">
    <description><![CDATA[  Get MX records corresponding to a given Internet host name.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Hyperwave API_8" />
      <property kind="parameter" name="mxhosts" type="array" required="1" />
      <property kind="parameter" name="weight" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="dns_get_record">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = dns_get_record("php.net");
print_r($result);
?>

      

<?php
/* Request "ANY" record for php.net, 
   and create $authns and $addtl arrays
   containing list of name servers and
   any additional records which go with
   them */
$result = dns_get_record("php.net", DNS_ANY, $authns, $addtl);
echo "Result = ";
print_r($result);
echo "Auth NS = ";
print_r($authns);
echo "Additional = ";
print_r($addtl);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Hyperwave API_8" />
      <property ref="COM_6" />
      <property kind="parameter" name="authns" type="array"  />
      <property kind="parameter" name="addtl" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fsockopen">
    <description><![CDATA[  Initiates a socket connection to the resource specified by   target . PHP supports  targets in the Internet and Unix domains as described in   .  A list of supported transports  can also be retrieved using stream_get_transports .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = fsockopen("www.example.com", 80, $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    $out = "GET / HTTP/1.1\r\n";
    $out .= "Host: www.example.com\r\n";
    $out .= "Connection: Close\r\n\r\n";

    fwrite($fp, $out);
    while (!feof($fp)) {
        echo fgets($fp, 128);
    }
    fclose($fp);
}
?>

      

<?php
$fp = fsockopen("udp://127.0.0.1", 13, $errno, $errstr);
if (!$fp) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($fp, "\n");
    echo fread($fp, 26);
    fclose($fp);
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="DOM_11" />
      <property ref="APD_8" />
      <property ref="DB++_6" />
      <property kind="parameter" name="errstr" type="string"  />
      <property ref="CURL_6" />
    </properties>
    
  </element>
  <element kind="function" name="gethostbyaddr">
    <description><![CDATA[  Returns the host name of the Internet host specified by   ip_address or a string containing the unmodified   ip_address on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$hostname = gethostbyaddr($_SERVER['REMOTE_ADDR']);
  
echo $hostname;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="ip_address" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="gethostbyname">
    <description><![CDATA[  Returns the IP address of the Internet host specified by   hostname or a string containing the unmodified   hostname on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$ip = gethostbyname('www.example.com');

echo $ip;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Hyperwave API_8" />
    </properties>
    
  </element>
  <element kind="function" name="gethostbynamel">
    <description><![CDATA[  Returns a list of IP addresses to which the Internet host  specified by hostname resolves. Returns if   hostname could not be resolved.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $hosts = gethostbynamel('www.example.com');
  print_r($hosts);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Hyperwave API_8" />
    </properties>
    
  </element>
  <element kind="function" name="getmxrr">
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_8" />
      <property ref="Network_1" />
      <property ref="Network_2" />
    </properties>
    
  </element>
  <element kind="function" name="getprotobyname">
    <description><![CDATA[   getprotobyname returns the protocol number  associated with the protocol name as per   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$protocol = 'tcp';
$get_prot = getprotobyname($protocol);
if ($get_prot == -1) {
    // if nothing found, returns -1
    echo 'Invalid Protocol';
} else {
    echo 'Protocol #' . $get_prot;
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="getprotobynumber">
    <description><![CDATA[   getprotobynumber returns the protocol name  associated with protocol number as per   .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Math_8" />
    </properties>
    
  </element>
  <element kind="function" name="getservbyname">
    <description><![CDATA[   getservbyname returns the Internet port  which corresponds to service for the  specified protocol as per   .   protocol is either  or (in lowercase). Returns if   service or protocol is not  found.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$services = array('http', 'ftp', 'ssh', 'telnet', 'imap', 
'smtp', 'nicname', 'gopher', 'finger', 'pop3', 'www');

foreach ($services as $service) {                    
    $port = getservbyname($service, 'tcp');
    echo $service . ": " . $port . "<br />\n";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="service" type="string" required="1" />
      <property kind="parameter" name="protocol" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="getservbyport">
    <description><![CDATA[   getservbyport returns the Internet service  associated with port for the specified   protocol as per .   protocol is either  or (in lowercase).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="APD_8" />
      <property ref="Network_8" />
    </properties>
    
  </element>
  <element kind="function" name="inet_ntop">
    <description><![CDATA[  See also long2ip ,   inet_pton , and   ip2long .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$packed = chr(127) . chr(0) . chr(0) . chr(1);
$expanded = inet_pton($packed);

/* Outputs: 127.0.0.1 */
echo $expanded;

$packed = str_repeat(chr(0), 15) . chr(1);
$expanded = inet_pton($packed);

/* Outputs: ::1 */
echo $expanded;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="in_addr" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="inet_pton">
    <description><![CDATA[  See also ip2long ,   inet_ntop , and   long2ip .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$in_addr = inet_pton('127.0.0.1');

$in6_addr = inet_pton('::1');

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="IMAP_31" />
    </properties>
    
  </element>
  <element kind="function" name="ip2long">
    <description><![CDATA[  The function ip2long generates an IPv4 Internet  network address from its Internet standard format (dotted string)  representation.  If ip_address is invalid then   is returned.  Note that  does not evaluate as in PHP.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$ip = gethostbyname('www.example.com');
$out = "The following URLs are equivalent:<br />\n";
$out .= 'http://www.example.com/, http://' . $ip . '/, and http://' . sprintf("%u", ip2long($ip)) . "/<br />\n";
echo $out;
?>

     

<?php
$ip   = gethostbyname('www.example.com');
$long = ip2long($ip);

if ($long == -1 || $long === FALSE) {
    echo 'Invalid IP, please try again';
} else {
    echo $ip   . "\n";           // 192.0.34.166
    echo $long . "\n";           // -1073732954
    printf("%u\n", ip2long($ip)); // 3221234342
}
?>

     

<?php
// make sure IPs are valid. also converts a non-complete IP into
// a proper dotted quad as explained below.
$ip = long2ip(ip2long("127.0.0.1")); // "127.0.0.1"
$ip = long2ip(ip2long("10.0.0")); // "10.0.0.0"
$ip = long2ip(ip2long("10.0.256")); // "10.0.1.0"
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Network_6" />
    </properties>
    
  </element>
  <element kind="function" name="long2ip">
    <description><![CDATA[  The function long2ip generates an Internet address  in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address  representation.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="proper_address" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openlog">
    <description><![CDATA[   openlog opens a connection to the system  logger for a program.  The string ident is  added to each message.  Values for option  and facility are given below.  The option argument is used to indicate  what logging options will be used when generating a log message.  The facility argument is used to specify what  type of program is logging the message. This allows you to specify  (in your machine's syslog configuration) how messages coming from  different facilities will be handled.  The use of openlog is optional. It  will automatically be called by syslog if  necessary, in which case ident will default  to .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="ident" type="string" required="1" />
      <property ref="CURL_7" />
      <property kind="parameter" name="facility" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pfsockopen">
    <description><![CDATA[  This function behaves exactly as fsockopen  with the difference that the connection is not closed after the  script finishes.  It is the persistent version of   fsockopen .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Hyperwave API_8" />
      <property ref="APD_8" />
      <property ref="DB++_6" />
      <property ref="Network_5" />
      <property ref="FTP_6" />
    </properties>
    
  </element>
  <element kind="function" name="syslog">
    <description><![CDATA[   syslog generates a log message that will be  distributed by the system logger.   priority is a combination of the facility  and the level, values for which are given in the next section.  The remaining argument is the message to send, except that the  two characters will be replaced by the  error message string (strerror) corresponding to the present  value of .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
define_syslog_variables();
// open syslog, include the process ID and also send
// the log to standard error, and use a user defined
// logging mechanism
openlog("myScriptLog", LOG_PID | LOG_PERROR, LOG_LOCAL0);

// some code

if (authorized_client()) {
    // do something
} else {
    // unauthorized client!
    // log the attempt
    $access = date("Y/m/d H:i:s");
    syslog(LOG_WARNING, "Unauthorized client: $access $_SERVER[REMOTE_ADDR] ($_SERVER[HTTP_USER_AGENT])");
}

closelog();
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="priority" type="int" required="1" />
      <property ref="Errors and Logging_1" />
    </properties>
    
  </element>
</group>
<group name="OCI8">
  <description><![CDATA[Oracle 8 functions]]></description>
  <element kind="function" name="OCI-Collection->append">
    <description><![CDATA[  Appends an object to the end of the collection. Parameter   value can be a string or a number.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="OCI-Collection->assign">
    <description><![CDATA[  Assigns a value to the collection from another, previously created  collection. Both collections must be created with   oci_new_collection prior to using them.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="from" type="OCI-Collection" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="OCI-Collection->assignElem">
    <description><![CDATA[  Assigns a value to the element with index index .  Parameter value can be a string or a number.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_24" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="OCI-Collection->free">
    <description><![CDATA[  Frees resources associated with collection object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="OCI-Collection->getElem">
    <description><![CDATA[  Method OCI-Collection->getElem returns value of the  element with index index (1-based).  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="DOM_24" />
    </properties>
    
  </element>
  <element kind="function" name="OCI-Collection->max">
    <description><![CDATA[  Returns the maximum number of elements in the collection.  If the returned value is 0, then the number of elements is not limited.   OCI-Collection->max returns in case of error.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="OCI-Collection->size">
    <description><![CDATA[  Returns the number of elements in the collection.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="OCI-Collection->trim">
    <description><![CDATA[  Trims num of elements from the end of the  collection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_13" />
    </properties>
    
  </element>
  <element kind="function" name="descriptor->free">
    <description><![CDATA[   descriptor->free frees resources associated with  descriptor, previously allocated with oci_new_descriptor .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="lob->append">
    <description><![CDATA[  Appends data from the large object to the end of another large object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="lob_from" type="OCI-Lob" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="lob->close">
    <description><![CDATA[   lob->close closes descriptor of LOB or FILE. This  function should be used only with   lob->writeTemporary .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="lob->eof">
    <description><![CDATA[  Returns if internal pointer of large object is at the end of LOB.  Otherwise returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="lob->erase">
    <description><![CDATA[  Erases a specified portion of the internal LOB data starting at a  specified offset . Parameters   length and offset are optional.   lob->erase erases all LOB data by default.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Filesystem_10" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="lob->export">
    <description><![CDATA[  Exports LOB's contents to a file, which name is given in parameter   filename . Optional parameter   start indicates from what position to start export  and parameter length - length of data to be  exported.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property kind="parameter" name="start" type="int"  />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="lob->flush">
    <description><![CDATA[   lob->flush actually writes data to the server.  By default, resources are not freed, but using flag   you can do it explicitly.  Be sure you know what you're doing - next read/write operation to the  same part of LOB will involve a round-trip to the server and initialize  new buffer resources. Tt is recommended to use   flag only when you are not going  to work with the LOB anymore.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_11" />
    </properties>
    
  </element>
  <element kind="function" name="lob->getBuffering">
    <description><![CDATA[  Returns if buffering for the large object is off and if  buffering is used.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="lob->import">
    <description><![CDATA[  Writes data from filename in to the current  position of large object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="lob->load">
    <description><![CDATA[  Returns large object's contents. As script execution is terminated  when the is reached,  ensure that the LOB does not exceed this limit. In most cases it's  recommended to use oci_lob_read instead. In case of  error lob->load returns .  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="lob->read">
    <description><![CDATA[  Reads length bytes from the current position of  LOB's internal pointer. Reading stops when length  bytes have been read or end of large object is reached.  Internal pointer of large object will be shifted on the amount of bytes  read.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Filesystem_19" />
    </properties>
    
  </element>
  <element kind="function" name="lob->rewind">
    <description><![CDATA[  Sets the internal pointer to the beginning of the large object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="lob->save">
    <description><![CDATA[  Saves data to the large object.  Parameter offset can be used to indicate offset  from the beginning of the large object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="lob->seek">
    <description><![CDATA[  Sets the internal pointer of the large object. Parameter   offset indicates the amount of  bytes, on which internal pointer should be moved from the position,  pointed by whence :    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_35" />
      <property ref="Direct IO_7" />
    </properties>
    
  </element>
  <element kind="function" name="lob->setBuffering">
    <description><![CDATA[   lob->setBuffering sets the buffering for the  large object, depending on the value of the on_off  parameter. Repeated calls to lob->setBuffering with  the same flag will return .  The values for on_off   are: for on and for off.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="on_off" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="lob->size">
    <description><![CDATA[  Returns length of large object value or in case of error.  Empty objects have zero length.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="lob->tell">
    <description><![CDATA[  Returns current position of a LOB's internal pointer or if an  error occurred.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="lob->truncate">
    <description><![CDATA[  If parameter length is given,   lob->truncate truncates large object to   length bytes. Otherwise,   lob->truncate will purge the LOB completely.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="lob->write">
    <description><![CDATA[  Writes data from the parameter data into the  current position of LOB's internal pointer.  If the parameter length is given, writing will  stop after length bytes have been written or the  end of data is reached, whichever comes first.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Bzip2_7" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="lob->writeTemporary">
    <description><![CDATA[  Creates a temporary large object and writes data  to it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property kind="parameter" name="lob_type" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="oci_bind_by_name">
    <description><![CDATA[   oci_bind_by_name binds the PHP variable   variable to the Oracle placeholder   ph_name .  Whether it will be used for  input or output will be determined at run-time and the necessary  storage space will be allocated. The length   parameter sets the maximum length for the bind. If you set   length to -1   oci_bind_by_name will use the current length of   variable to set the maximum length.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* oci_bind_by_name example thies at thieso dot net (980221)
  inserts 3 records into emp, and uses the ROWID for updating the 
  records just after the insert.
*/

$conn = oci_connect("scott", "tiger");

$stmt = oci_parse($conn, "
                          INSERT INTO 
                                     emp (empno, ename) 
                                              VALUES 
                                     (:empno,:ename) 
                            RETURNING 
                                     ROWID 
                                 INTO 
                                     :rid
                                         ");

$data = array(
              1111 => "Larry", 
              2222 => "Bill", 
              3333 => "Jim"
             );

$rowid = oci_new_descriptor($conn, OCI_D_ROWID);

oci_bind_by_name($stmt, ":empno", $empno, 32);
oci_bind_by_name($stmt, ":ename", $ename, 32);
oci_bind_by_name($stmt, ":rid",   $rowid, -1, OCI_B_ROWID);

$update = oci_parse($conn, "
                            UPDATE
                                  emp 
                               SET 
                                  sal = :sal 
                             WHERE 
                                  ROWID = :rid
                             ");
oci_bind_by_name($update, ":rid", $rowid, -1, OCI_B_ROWID);
oci_bind_by_name($update, ":sal", $sal,   32);

$sal = 10000;

while (list($empno, $ename) = each($data)) {
    oci_execute($stmt);
 oci_execute($update);
} 

$rowid->free();

oci_free_statement($update);
oci_free_statement($stmt);

$stmt = oci_parse($conn, "
                          SELECT 
                                * 
                            FROM 
                                emp 
                           WHERE 
                                empno 
                              IN 
                                (1111,2222,3333)
                              ");
oci_execute($stmt);
                              
while ($row = oci_fetch_assoc($stmt)) {
    var_dump($row);
}

oci_free_statement($stmt);

/* delete our "junk" from the emp table.... */
$stmt = oci_parse($conn, "
                          DELETE FROM
                                     emp 
                                WHERE 
                                     empno 
                                   IN 
                                     (1111,2222,3333)
                                   ");
oci_execute($stmt);
oci_free_statement($stmt);

oci_close($conn);
?>

      

<?php
    $connection = oci_connect('apelsin','kanistra');
    $query = "INSERT INTO test_table VALUES(:id, :text)";

    $statement = oci_parse($query);
    oci_bind_by_name($statement, ":id", 1);
    oci_bind_by_name($statement, ":text", "trailing spaces follow     ");
    oci_execute($statement);
    /*
     This code will insert into DB string 'trailing spaces follow', without
     trailing spaces
    */
?>

      

<?php
    $connection = oci_connect('apelsin','kanistra');
    $query = "INSERT INTO test_table VALUES(:id, 'trailing spaces follow      ')";

    $statement = oci_parse($query);
    oci_bind_by_name($statement, ":id", 1);
    oci_execute($statement);
    /*
     And this code will add 'trailing spaces follow      ', preserving
     trailing whitespaces
    */
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property kind="parameter" name="ph_name" type="string" required="1" />
      <property kind="parameter" name="variable" type="mixed" required="1" />
      <property kind="parameter" name="maxlength" type="int"  />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="oci_cancel">
    <description><![CDATA[   oci_cancel invalidates a cursor, freeing all  associated resources and cancels the ability to read from it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_close">
    <description><![CDATA[   oci_close closes the Oracle connection   connection .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_commit">
    <description><![CDATA[   oci_commit commits all outstanding statements  for the active transaction on the Oracle connection   connection .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    // Login to Oracle server
    $conn = oci_connect('scott', 'tiger');
     
    // Parse SQL
    $stmt = oci_parse($conn, "
                              INSERT INTO 
                                         employees (name, surname) 
                                   VALUES 
                                         ('Maxim', 'Maletsky')
                             ");

    /* Execute statement
       OCI_DEFAULT tells oci_execute() 
       not to commit statement immediately */
    oci_execute($stmt, OCI_DEFAULT);

    /*
    ....
    Parsing and executing other statements here ...
    ....
    */
    
    // Commit transaction
    $committed = oci_commit($conn);

    // Test whether commit was successful. If error occurred, return error message
    if (!$committed) {
        $error = oci_error($conn);
        echo 'Commit failed. Oracle reports: ' . $error['message'];
    }

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_connect">
    <description><![CDATA[   oci_connect returns a connection identifier  needed for most other OCI calls.  The optional third parameter  can either contain the name of the local Oracle instance or the  name of the entry in to which  you want to connect.  If the optional third parameter is not specified, PHP uses the  environment variables (Oracle  instance) or  ( ) to determine which database  to connect to.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo "<pre>";
$db = "";

$c1 = oci_connect("scott", "tiger", $db);
$c2 = oci_connect("scott", "tiger", $db);

function create_table($conn) 
{
  $stmt = oci_parse($conn, "create table scott.hallo (test varchar2(64))");
  oci_execute($stmt);
  echo $conn . " created table\n\n";
}

function drop_table($conn) 
{
  $stmt = oci_parse($conn, "drop table scott.hallo");
  oci_execute($stmt);
  echo $conn . " dropped table\n\n";
}

function insert_data($conn) 
{
  $stmt = oci_parse($conn, "insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn . " inserted hallo\n\n";
}

function delete_data($conn) 
{
  $stmt = oci_parse($conn, "delete from scott.hallo");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn . " deleted hallo\n\n";
}

function commit($conn) 
{
  oci_commit($conn);
  echo $conn . " committed\n\n";
}

function rollback($conn) 
{
  oci_rollback($conn);
  echo $conn . " rollback\n\n";
}

function select_data($conn) 
{
  $stmt = oci_parse($conn, "select * from scott.hallo");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (oci_fetch($stmt)) {
    echo $conn . " [" . oci_result($stmt, "TEST") . "]\n\n";
  }
  echo $conn . "----done\n\n";
}

create_table($c1);
insert_data($c1);   // Insert a row using c1
insert_data($c2);   // Insert a row using c2

select_data($c1);   // Results of both inserts are returned
select_data($c2);   

rollback($c1);      // Rollback using c1

select_data($c1);   // Both inserts have been rolled back
select_data($c2);   

insert_data($c2);   // Insert a row using c2
commit($c2);        // Commit using c2

select_data($c1);   // Result of c2 insert is returned

delete_data($c1);   // Delete all rows in table using c1
select_data($c1);   // No rows returned
select_data($c2);   // No rows returned
commit($c1);        // Commit using c1

select_data($c1);   // No rows returned
select_data($c2);   // No rows returned

drop_table($c1);
echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property kind="parameter" name="db" type="string"  />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="oci_define_by_name">
    <description><![CDATA[   oci_define_by_name defines PHP variables for fetches  of SQL-Columns. Be careful that Oracle uses ALL-UPPERCASE column names,  whereby in your select you can also write lowercase.   oci_define_by_name expects  the column_name to be in uppercase. If you  define a variable that doesn't exists in your select statement, no  error will issued.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* oci_define_by_name example - thies at thieso dot net (980219) */

$conn = oci_connect("scott", "tiger");

$stmt = oci_parse($conn, "SELECT empno, ename FROM emp");

/* the define MUST be done BEFORE oci_execute! */

oci_define_by_name($stmt, "EMPNO", $empno);
oci_define_by_name($stmt, "ENAME", $ename);

oci_execute($stmt);

while (oci_fetch($stmt)) {
    echo "empno:" . $empno . "\n";
    echo "ename:" . $ename . "\n";
}

oci_free_statement($stmt);
oci_close($conn);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_9" />
      <property kind="parameter" name="column_name" type="string" required="1" />
      <property ref="OCI8_7" />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="oci_error">
    <description><![CDATA[  For most errors, the parameter is the most appropriate resource  handle. For connection errors with oci_connect ,   oci_new_connect or oci_pconnect ,  do not pass a parameter. If no error is found, oci_error   returns . oci_error returns the error as an  associative array. In this array,  consists the oracle error code and  the oracle error string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[$conn = @oci_connect("scott", "tiger", "mydb");
if (!$conn) {
  $e = oci_error();   // For oci_connect errors pass no handle
  echo htmlentities($e['message']);
}

      

$stmt = @oci_parse($conn, "select ' from dual");  // note mismatched quote
if (!$stmt) {
  $e = oci_error($conn);  // For oci_parse errors pass the connection handle
  echo htmlentities($e['message']);
}

      

$r = oci_execute($stmt);
if (!$r) {
  $e = oci_error($stmt); // For oci_execute errors pass the statementhandle
  echo htmlentities($e['message']);
  echo "<pre>";
  echo htmlentities($e['sqltext']);
  printf("\n%".($e['offset']+1)."s", "^");
  echo "</pre>";
}]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="source" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="oci_execute">
    <description><![CDATA[   oci_execute executes a previously parsed  statement (see oci_parse ). The optional   mode allows you to specify the  execution mode (default is ).  If you don't want statements to be committed automatically,  you should specify as your   mode .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="oci_fetch">
    <description><![CDATA[   oci_fetch fetches the next row (for SELECT  statements) into the internal result-buffer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_9" />
    </properties>
    
  </element>
  <element kind="function" name="oci_fetch_all">
    <description><![CDATA[    oci_fetch_all fetches all the rows from a  result into a user-defined array.   oci_fetch_all returns the number of rows  fetched or in case of error. skip   is the number of initial rows to ignore when fetching the result  (default value of 0, to start at the first line).   maxrows is the number of  rows to read, starting at the skip th row  (default to -1, meaning all the rows).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* oci_fetch_all example mbritton at verinet dot com (990624) */

$conn = oci_connect("scott", "tiger");

$stmt = oci_parse($conn, "select * from emp");

oci_execute($stmt);

$nrows = oci_fetch_all($stmt, $results);
if ($nrows > 0) {
   echo "<table border=\"1\">\n";
   echo "<tr>\n";
   while (list($key, $val) = each($results)) {
      echo "<th>$key</th>\n";
   }
   echo "</tr>\n";
   
   for ($i = 0; $i < $nrows; $i++) {
      reset($results);
      echo "<tr>\n";
      while ($column = each($results)) {   
         $data = $column['value'];
         echo "<td>$data[$i]</td>\n";
      }
      echo "</tr>\n";
   }
   echo "</table>\n";
} else {
   echo "No data found<br />\n";
}      
echo "$nrows Records Selected<br />\n";
 
oci_free_statement($stmt);
oci_close($conn);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_9" />
      <property kind="parameter" name="output" type="array" required="1" />
      <property kind="parameter" name="skip" type="int"  />
      <property kind="parameter" name="maxrows" type="int"  />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="oci_fetch_array">
    <description><![CDATA[  Returns an array, which corresponds to the next result row or in  case of error or there is no more rows in the result.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = oci_connect("apelsin", "kanistra");

$query = "SELECT id, name FROM fruits";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, OCI_BOTH)) {
    echo $row[0]." and ".$row['ID']." is the same<br>";
    echo $row[1]." and ".$row['NAME']." is the same<br>";
}
?>

      

<?php
$connection = oci_connect("user", "password");

$query = "SELECT id, name, lob_field FROM fruits";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, OCI_NUM)) {
    echo $row[0]."<br>";
    echo $row[1]."<br>";
    echo $row[2]->read(100)."<br>";  //this will output first 100 bytes from LOB
}
?>

      

<?php
$connection = oci_connect("user", "password");

$query = "SELECT id, name, lob_field FROM fruits";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, OCI_NUM)) {
    echo $row['ID']."<br>";
    echo $row['NAME']."<br>";
    echo $row['LOB_FIELD']."<br>";  //this will output "Object id #1"
}
?>

      

<?php
$connection = oci_connect("user", "password");

$query = "SELECT id, name, lob_field FROM fruits";

$statement = oci_parse ($connection, $query);
oci_execute ($statement);

while ($row = oci_fetch_array ($statement, OCI_NUM)) {
    echo $row[0]."<br>";
    echo $row[1]."<br>";
    echo $row['LOB_FIELD']."<br>";  //this will output LOB's content
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="MS SQL Server_9" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="oci_fetch_assoc">
    <description><![CDATA[   oci_fetch_assoc returns the next row from the result  data as an associative array (identical to   oci_fetch_array call with   flag).  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="MS SQL Server_9" />
    </properties>
    
  </element>
  <element kind="function" name="oci_fetch_object">
    <description><![CDATA[   oci_fetch_object returns the next row from the result data as  an object, which attributes correspond to fields in statement.  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="MS SQL Server_9" />
    </properties>
    
  </element>
  <element kind="function" name="oci_fetch_row">
    <description><![CDATA[  Calling oci_fetch_row is identical to   oci_fetch_array with   flag and returns the next row from the result  data as a numeric array.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="MS SQL Server_9" />
    </properties>
    
  </element>
  <element kind="function" name="oci_field_is_null">
    <description><![CDATA[   oci_field_is_null returns if field   field from the statement is   . Parameter field could be a field's index  or a field's name (uppercased).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="oci_field_name">
    <description><![CDATA[   oci_field_name returns the name of the field  corresponding to the field number (1-based).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    $conn = oci_connect("scott", "tiger");
    $stmt = oci_parse($conn, "SELECT * FROM emp");
    oci_execute($stmt);
    
    echo "<table border=\"1\">";
    echo "<tr>";
    echo "<th>Name</th>";
    echo "<th>Type</th>";
    echo "<th>Length</th>";
    echo "</tr>";
   
    $ncols = oci_num_fields($stmt);
   
    for ($i = 1; $i <= $ncols; $i++) {
        $column_name  = oci_field_name($stmt, $i);
        $column_type  = oci_field_type($stmt, $i);
        $column_size  = oci_field_size($stmt, $i);
        
        echo "<tr>";
        echo "<td>$column_name</td>";
        echo "<td>$column_type</td>";
        echo "<td>$column_size</td>";
        echo "</tr>";
    }
       
    echo "</table>\n"; 
    oci_free_statement($stmt);  
    oci_close($conn);   
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MS SQL Server_9" />
      <property kind="parameter" name="field" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_field_precision">
    <description><![CDATA[  Returns precision of the field with field index  (1-based).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_9" />
      <property ref="OCI8_15" />
    </properties>
    
  </element>
  <element kind="function" name="oci_field_scale">
    <description><![CDATA[  Returns scale of the column with field index  (1-based) or if there is no such field.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_9" />
      <property ref="OCI8_15" />
    </properties>
    
  </element>
  <element kind="function" name="oci_field_size">
    <description><![CDATA[   oci_field_size returns the size of a field in  bytes. Value of field parameter can be the field's  index (1-based) or it's name.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    $conn = oci_connect("scott", "tiger");
    $stmt = oci_parse($conn, "SELECT * FROM emp");
    oci_execute($stmt);
    
    echo "<table border=\"1\">";
    echo "<tr>";
    echo "<th>Name</th>";
    echo "<th>Type</th>";
    echo "<th>Length</th>";
    echo "</tr>";
   
    $ncols = oci_num_fields($stmt);
   
    for ($i = 1; $i <= $ncols; $i++) {
        $column_name  = oci_field_name($stmt, $i);
        $column_type  = oci_field_type($stmt, $i);
        $column_size  = oci_field_size($stmt, $i);
        echo "<tr>";
        echo "<td>$column_name</td>";
        echo "<td>$column_type</td>";
        echo "<td>$column_size</td>";
        echo "</tr>";
    }
       
    echo "</table>";
   
    oci_free_statement($stmt);  
    oci_close($conn);   
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="oci_field_type">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    $conn = oci_connect("scott", "tiger");
    $stmt = oci_parse($conn, "SELECT * FROM emp");
    oci_execute($stmt);
    
    echo "<table border=\"1\">";
    echo "<tr>";
    echo "<th>Name</th>";
    echo "<th>Type</th>";
    echo "<th>Length</th>";
    echo "</tr>";
   
    $ncols = oci_num_fields($stmt);
   
    for ($i = 1; $i <= $ncols; $i++) {
        $column_name  = oci_field_name($stmt, $i);
        $column_type  = oci_field_type($stmt, $i);
        $column_size  = oci_field_size($stmt, $i);
        
        echo "<tr>";
        echo "<td>$column_name</td>";
        echo "<td>$column_type</td>";
        echo "<td>$column_size</td>";
        echo "</tr>";
    }
       
    echo "</table>\n"; 
   
    oci_free_statement($stmt);  
    oci_close($conn);   
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_1" />
      <property ref="OCI8_15" />
    </properties>
    
  </element>
  <element kind="function" name="oci_field_type_raw">
    <description><![CDATA[   oci_field_type_raw returns Oracle's raw data type of the  field.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_9" />
      <property ref="OCI8_15" />
    </properties>
    
  </element>
  <element kind="function" name="oci_free_statement">
    <description><![CDATA[   oci_free_statement frees resources associated with  Oracle's cursor or statement, which was received from as a result of   oci_parse or obtained from Oracle.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_9" />
    </properties>
    
  </element>
  <element kind="function" name="oci_internal_debug">
    <description><![CDATA[   oci_internal_debug enables or disables internal debug  output.  Set onoff to 0 to turn debug  output off or 1 to turn it on.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="onoff" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_lob_copy">
    <description><![CDATA[  Copies large object or a part of large object to another large object.  Parameter length indicates the length of data to  be copied. Old data of LOB-recipient will be overwritten.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="lob_to" type="OCI-Lob" required="1" />
      <property ref="OCI8_2" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="oci_lob_is_equal">
    <description><![CDATA[  Compares two LOB/FILE locators. Returns if these objects are equal  and otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="lob1" type="OCI-Lob" required="1" />
      <property kind="parameter" name="lob2" type="OCI-Lob" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_new_collection">
    <description><![CDATA[  Allocates new collection object. Parameter tdo  should be a valid named type (uppercased). Third, optional parameter   schema should point to the scheme, where the  named type was created. oci_new_collection uses  name of the current user as default value of schema .  ]]></description>
    <properties>
      <property kind="return" type="OCI-Collection" />	
      <property ref="Cyrus IMAP_1" />
      <property kind="parameter" name="tdo" type="string" required="1" />
      <property kind="parameter" name="schema" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="oci_new_connect">
    <description><![CDATA[   oci_new_connect creates a new connection to an Oracle  server and logs on. The optional third parameter can either contain the name  of the local Oracle instance or the name of the entry in   . If the third parameter is not specified,  PHP uses environment variables and   to determine the name of local Oracle  instance and location of accordingly.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo "<html><pre>";
$db = "";

$c1 = oci_connect("scott", "tiger", $db);
$c2 = oci_new_connect("scott", "tiger", $db);

function create_table($conn) 
{
  $stmt = oci_parse($conn, "create table scott.hallo (test
varchar2(64))");
  oci_execute($stmt);
  echo $conn . " created table\n\n";
}

function drop_table($conn) 
{
  $stmt = oci_parse($conn, "drop table scott.hallo");
  oci_execute($stmt);
  echo $conn . " dropped table\n\n";
}

function insert_data($conn) 
{
  $stmt = oci_parse($conn, "insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn . " inserted hallo\n\n";
}

function delete_data($conn) 
{
  $stmt = oci_parse($conn, "delete from scott.hallo");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn . " deleted hallo\n\n";
}

function commit($conn) 
{
  oci_commit($conn);
  echo $conn . " committed\n\n";
}

function rollback($conn) 
{
  oci_rollback($conn);
  echo $conn . " rollback\n\n";
}

function select_data($conn) 
{
  $stmt = oci_parse($conn, "select * from scott.hallo");
  oci_execute($stmt, OCI_DEFAULT);
  echo $conn . "----selecting\n\n";
  while (oci_fetch($stmt)) {
    echo $conn . " <" . oci_result($stmt, "TEST") . ">\n\n";
  }
  echo $conn . "----done\n\n";
}

create_table($c1);
insert_data($c1);

select_data($c1);   
select_data($c2);   

rollback($c1);      

select_data($c1);   
select_data($c2);   

insert_data($c2);   
commit($c2);        

select_data($c1);   

delete_data($c1);   
select_data($c1);   
select_data($c2);   
commit($c1);        

select_data($c1);
select_data($c2);

drop_table($c1);
echo "</pre></html>";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="OCI8_9" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="oci_new_cursor">
    <description><![CDATA[   oci_new_cursor allocates a new statement handle on  the specified connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
// suppose your stored procedure info.output returns a ref cursor in :data

$conn = oci_connect("scott", "tiger");
$curs = oci_new_cursor($conn);
$stmt = oci_parse($conn, "begin info.output(:data); end;");

oci_bind_by_name($stmt, "data", $curs, -1, OCI_B_CURSOR);
oci_execute($stmt);
oci_execute($curs);

while ($data = oci_fetch_row($curs)) {
    var_dump($data);
}
 
oci_free_statement($stmt);
oci_free_statement($curs);
oci_close($conn);
?>

      

<?php   
echo "<html><body>";
$conn = oci_connect("scott", "tiger");
$count_cursor = "CURSOR(select count(empno) num_emps from emp " .
                "where emp.deptno = dept.deptno) as EMPCNT from dept";
$stmt = oci_parse($conn, "select deptno,dname,$count_cursor");

oci_execute($stmt);
echo "<table border=\"1\">";
echo "<tr>";
echo "<th>DEPT NAME</th>";
echo "<th>DEPT #</th>";
echo "<th># EMPLOYEES</th>";
echo "</tr>";

while ($data = oci_fetch_assoc($stmt)) {
    echo "<tr>";
    $dname  = $data["DNAME"];
    $deptno = $data["DEPTNO"];
    echo "<td>$dname</td>";
    echo "<td>$deptno</td>";
    oci_execute($data["EMPCNT"]);
    while ($subdata = oci_fetch_assoc($data["EMPCNT"])) {
        $num_emps = $subdata["NUM_EMPS"];
        echo  "<td>$num_emps</td>";
    }
    echo "</tr>";
}
echo "</table>";
echo "</body></html>";
oci_free_statement($stmt);
oci_close($conn);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_new_descriptor">
    <description><![CDATA[   oci_new_descriptor allocates resources to hold  descriptor or LOB locator. Valid values for type  are: ,   and .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    /* This script is designed to be called from a HTML form.
     * It expects $user, $password, $table, $where, and $commitsize
     * to be passed in from the form.  The script then deletes
     * the selected rows using the ROWID and commits after each
     * set of $commitsize rows. (Use with care, there is no rollback)
     */
    $conn = oci_connect($user, $password);
    $stmt = oci_parse($conn, "select rowid from $table $where");
    $rowid = oci_new_descriptor($conn, OCI_D_ROWID);
    oci_define_by_name($stmt, "ROWID", $rowid);   
    oci_execute($stmt);
    while (oci_fetch($stmt)) {
       $nrows = oci_num_rows($stmt);
       $delete = oci_parse($conn, "delete from $table where ROWID = :rid");
       oci_bind_by_name($delete, ":rid", $rowid, -1, OCI_B_ROWID);
       oci_execute($delete);      
       echo "$nrows\n";
       if (($nrows % $commitsize) == 0) {
           oci_commit($conn);      
       }   
    }
    $nrows = oci_num_rows($stmt);   
    echo "$nrows deleted...\n";
    oci_free_statement($stmt);  
    oci_close($conn);
?>  

      

<?php
    /* This script demonstrates file upload to LOB columns
     * The formfield used for this example looks like this
     * <form action="upload.php" method="post" enctype="multipart/form-data">
     * <input type="file" name="lob_upload" />
     * ...
     */
  if (!isset($lob_upload) || $lob_upload == 'none'){
?>
<form action="upload.php" method="post" enctype="multipart/form-data">
Upload file: <input type="file" name="lob_upload" /><br />
<input type="submit" value="Upload" /> - <input type="reset" value="Reset" />
</form>
<?php
  } else {

     // $lob_upload contains the temporary filename of the uploaded file

     // see also the features section on file upload,
     // if you would like to use secure uploads
     
     $conn = oci_connect($user, $password);
     $lob = oci_new_descriptor($conn, OCI_D_LOB);
     $stmt = oci_parse($conn, "insert into $table (id, the_blob) 
               values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     oci_bind_by_name($stmt, ':the_blob', $lob, -1, OCI_B_BLOB);
     oci_execute($stmt, OCI_DEFAULT);
     if ($lob->savefile($lob_upload)){
        oci_commit($conn);
        echo "Blob successfully uploaded\n";
     }else{
        echo "Couldn't upload Blob\n";
     }
     oci_free_descriptor($lob);
     oci_free_statement($stmt);
     oci_close($conn);
  }
?>

      

<?php   
    /* Calling PL/SQL stored procedures which contain clobs as input
     * parameters (PHP 4 >= 4.0.6). 
     * Example PL/SQL stored procedure signature is:
     *
     * PROCEDURE save_data
     *   Argument Name                  Type                    In/Out Default?
     *   ------------------------------ ----------------------- ------ --------
     *   KEY                            NUMBER(38)              IN
     *   DATA                           CLOB                    IN
     *
     */

    $conn = oci_connect($user, $password);
    $stmt = oci_parse($conn, "begin save_data(:key, :data); end;");
    $clob = oci_new_descriptor($conn, OCI_D_LOB);
    oci_bind_by_name($stmt, ':key', $key);
    oci_bind_by_name($stmt, ':data', $clob, -1, OCI_B_CLOB);
    $clob->write($data);
    oci_execute($stmt, OCI_DEFAULT);
    oci_commit($conn);
    $clob->free();
    oci_free_statement($stmt);
?>]]></description>
      </property>
      <property kind="return" type="OCI-Lob" />	
      <property ref="Cyrus IMAP_1" />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="oci_num_fields">
    <description><![CDATA[   oci_num_fields returns the number of columns in the   statement .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    echo "<pre>\n";   
    $conn = oci_connect("scott", "tiger");
    $stmt = oci_parse($conn, "select * from emp");
    
    oci_execute($stmt);
    
    while (oci_fetch($stmt)) {
        echo "\n";   
        $ncols = oci_num_fields($stmt);
        for ($i = 1; $i <= $ncols; $i++) {
            $column_name  = oci_field_name($stmt, $i);
            $column_value = oci_result($stmt, $i);
            echo $column_name . ': ' . $column_value . "\n";
        }
        echo "\n";
    }
    
    oci_free_statement($stmt);  
    oci_close($conn);   
    
    echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_9" />
    </properties>
    
  </element>
  <element kind="function" name="oci_num_rows">
    <description><![CDATA[   oci_num_rows returns number of rows affected during statement execution.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    echo "<pre>";
    $conn = oci_connect("scott", "tiger");
     
    $stmt = oci_parse($conn, "create table emp2 as select * from emp");
    oci_execute($stmt);
    echo oci_num_rows($stmt) . " rows inserted.<br />";
    oci_free_statement($stmt);
    
    $stmt = oci_parse($conn, "delete from emp2");
    oci_execute($stmt, OCI_DEFAULT);
    echo oci_num_rows($stmt) . " rows deleted.<br />";
    oci_commit($conn);
    oci_free_statement($stmt);
    
    $stmt = oci_parse($conn, "drop table emp2");
    oci_execute($stmt);
    oci_free_statement($stmt);
    
    oci_close($conn);
    echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_parse">
    <description><![CDATA[   oci_parse prepares the query  using connection and returns the statement  identifier, which can be used with   oci_bind_by_name , oci_execute  and other functions.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="oci_password_change">
    <description><![CDATA[  Changes password for user with username .  Parameters old_password and   new_password should indicate old and new passwords  respectively.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FTP_13" />
      <property ref="FrontBase_21" />
      <property ref="MCVE_7" />
    </properties>
    
  </element>
  <element kind="function" name="oci_pconnect">
    <description><![CDATA[   oci_pconnect creates a new persistent connection to  an Oracle server and logs on. The optional third parameter can either contain  the name of the local Oracle instance or the name of the entry in   . If the third parameter is not specified,  PHP uses environment variables and   to determine the name of local Oracle  instance and location of accordingly.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="OCI8_9" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="oci_result">
    <description><![CDATA[   oci_result returns the data from the field   field in the current row, fetched by   oci_fetch . oci_result returns  everything as strings except for abstract types (ROWIDs, LOBs and FILEs).   oci_result returns on error.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_9" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="oci_rollback">
    <description><![CDATA[   oci_rollback rolls back all outstanding statements  for Oracle connection connection .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_server_version">
    <description><![CDATA[  Returns a string with version information of the Oracle server, which uses  connection connection or returns on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $conn = oci_connect("scott", "tiger");
    echo "Server Version: " . oci_server_version($conn);
    oci_close($conn);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="oci_set_prefetch">
    <description><![CDATA[  Sets the number of rows to be prefetched after successful call to   oci_execute . The default value for   rows is 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_9" />
      <property kind="parameter" name="rows" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="oci_statement_type">
    <description><![CDATA[   oci_statement_type returns the query type of  statement statement as one of the following  values:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $conn = oci_connect("scott", "tiger");
    $sql  = "delete from emp where deptno = 10";
   
    $stmt = oci_parse($conn, $sql);
    if (oci_statement_type($stmt) == "DELETE") {
        die("You are not allowed to delete from this table<br />");
    }
   
    oci_close($conn);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MS SQL Server_9" />
    </properties>
    
  </element>
  <element kind="function" name="ocibindbyname">
    <description><![CDATA[   ocibindbyname binds the PHP variable   variable to the Oracle placeholder   ph_name .  Whether it will be used for  input or output will be determined run-time, and the necessary  storage space will be allocated. The   length parameter sets the maximum length  for the bind. If you set length to -1   ocibindbyname will use the current length of   variable to set the maximum length.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* OCIBindByPos example thies at thieso dot net (980221)
  inserts 3 records into emp, and uses the ROWID for updating the 
  records just after the insert.
*/

$conn = OCILogon("scott", "tiger");

$stmt = OCIParse($conn, "insert into emp (empno, ename) " .
                        "values (:empno,:ename) " .
                        "returning ROWID into :rid");

$data = array(1111 => "Larry", 2222 => "Bill", 3333 => "Jim");

$rowid = OCINewDescriptor($conn, OCI_D_ROWID);

OCIBindByName($stmt, ":empno", $empno, 32);
OCIBindByName($stmt, ":ename", $ename, 32);
OCIBindByName($stmt, ":rid", $rowid, -1, OCI_B_ROWID);

$update = OCIParse($conn, "update emp set sal = :sal where ROWID = :rid");
OCIBindByName($update, ":rid", $rowid, -1, OCI_B_ROWID);
OCIBindByName($update, ":sal", $sal, 32);

$sal = 10000;

while (list($empno, $ename) = each($data)) {
    OCIExecute($stmt);
    OCIExecute($update);
} 

$rowid->free();

OCIFreeStatement($update);
OCIFreeStatement($stmt);

$stmt = OCIParse($conn, "select * from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
while (OCIFetchInto($stmt, &$arr, OCI_ASSOC)) {
    var_dump($arr);
}
OCIFreeStatement($stmt);

/* delete our "junk" from the emp table.... */
$stmt = OCIParse($conn, "delete from emp where empno in (1111,2222,3333)");
OCIExecute($stmt);
OCIFreeStatement($stmt);

OCILogoff($conn);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="OCI8_6" />
      <property ref="OCI8_7" />
      <property ref="OCI8_8" />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="ocicancel">
    <description><![CDATA[  If you do not want read more data from a cursor, then call   ocicancel .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocicloselob">
    <description><![CDATA[  This function was renamed to oci_lob_close   after PHP >= 5.0.0. For downward compatibility   ocicloselob can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ocicollappend">
    <description><![CDATA[  This function was renamed to oci_collection_append   after PHP >= 5.0.0. For downward compatibility   ocicollappend can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="ocicollassign">
    <description><![CDATA[  This function was renamed to oci_collection_assign   after PHP >= 5.0.0. For downward compatibility   ocicollassign can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="OCI8_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocicollassignelem">
    <description><![CDATA[  This function was renamed to oci_collection_element_assign   after PHP >= 5.0.0. For downward compatibility   ocicollassignelem can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="ndx" type="int" required="1" />
      <property ref="Msession_2" />
    </properties>
    
  </element>
  <element kind="function" name="ocicollgetelem">
    <description><![CDATA[  This function was renamed to oci_collection_element_get   after PHP >= 5.0.0. For downward compatibility   ocicollgetelem can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="OCI8_23" />
    </properties>
    
  </element>
  <element kind="function" name="ocicollmax">
    <description><![CDATA[  This function was renamed to oci_collection_max   after PHP >= 5.0.0. For downward compatibility   ocicollmax can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ocicollsize">
    <description><![CDATA[  This function was renamed to oci_collection_size   after PHP >= 5.0.0. For downward compatibility   ocicollsize can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolltrim">
    <description><![CDATA[  This function was renamed to oci_collection_trim   after PHP >= 5.0.0. For downward compatibility   ocicolltrim can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_13" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolumnisnull">
    <description><![CDATA[   ocicolumnisnull returns if the returned  column column in the result from the  statement stmt is . You can either use  the column-number (1-Based) or the column-name, in uppercase, for the   col parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property kind="parameter" name="col" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolumnname">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn, "select * from emp");
    OCIExecute($stmt);
    echo "<table border=\"1\">";
    echo "<tr>";
    echo "<th>Name</th>";
    echo "<th>Type</th>";
    echo "<th>Length</th>";
    echo "</tr>";
    $ncols = OCINumCols($stmt);
    for ($i = 1; $i <= $ncols; $i++) {
        $column_name  = OCIColumnName($stmt, $i);
        $column_type  = OCIColumnType($stmt, $i);
        $column_size  = OCIColumnSize($stmt, $i);
        echo "<tr>";
        echo "<td>$column_name</td>";
        echo "<td>$column_type</td>";
        echo "<td>$column_size</td>";
        echo "</tr>";
    }
    echo "</table>\n"; 
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MS SQL Server_1" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolumnprecision">
    <description><![CDATA[  Returns precision of the field with col index  (1-based).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolumnscale">
    <description><![CDATA[  This function was renamed to oci_field_scale   after PHP >= 5.0.0. For downward compatibility   ocicolumnscale can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolumnsize">
    <description><![CDATA[   ocicolumnsize returns the size of the column  as given by Oracle. You can either use  the column-number (1-Based) or the column-name for the   column parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn, "select * from emp");
    OCIExecute($stmt);
    echo "<table border=\"1\">";
    echo "<tr>";
    echo "<th>Name</th>";
    echo "<th>Type</th>";
    echo "<th>Length</th>";
    echo "</tr>";
    $ncols = OCINumCols($stmt);
    for ($i = 1; $i <= $ncols; $i++) {
        $column_name  = OCIColumnName($stmt, $i);
        $column_type  = OCIColumnType($stmt, $i);
        $column_size  = OCIColumnSize($stmt, $i);
        echo "<tr>";
        echo "<td>$column_name</td>";
        echo "<td>$column_type</td>";
        echo "<td>$column_size</td>";
        echo "</tr>";
    }
    echo "</table>";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
      <property kind="parameter" name="column" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolumntype">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn, "select * from emp");
    OCIExecute($stmt);
    echo "<table border=\"1\">";
    echo "<tr>";
    echo "<th>Name</th>";
    echo "<th>Type</th>";
    echo "<th>Length</th>";
    echo "</tr>";
    $ncols = OCINumCols($stmt);
    for ($i = 1; $i <= $ncols; $i++) {
        $column_name  = OCIColumnName($stmt, $i);
        $column_type  = OCIColumnType($stmt, $i);
        $column_size  = OCIColumnSize($stmt, $i);
        echo "<tr>";
        echo "<td>$column_name</td>";
        echo "<td>$column_type</td>";
        echo "<td>$column_size</td>";
        echo "</tr>";
    }
    echo "</table>\n"; 
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_1" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="ocicolumntyperaw">
    <description><![CDATA[   ocicolumntyperaw returns Oracle's raw data type of the  field.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
      <property ref="Image_61" />
    </properties>
    
  </element>
  <element kind="function" name="ocicommit">
    <description><![CDATA[   ocicommit commits all outstanding statements  for the active transaction on Oracle connection connection .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    // Login to Oracle server
    $conn = OCILogon('scott', 'tiger');
     
    // Parse SQL
    $stmt = OCIParse($conn, "INSERT INTO employees (name, surname) VALUES ('Maxim', 'Maletsky')");

    // Execute statement
    OCIExecute($stmt);

    // Commit transaction
    $committed = OCICommit($conn);

    // Test whether commit was successful. If error occurred, return error message
    if (!$committed) {
        $error = OCIError($conn);
        echo 'Commit failed. Oracle reports: ' . $error['message'];
    }

    // Close connection
    OCILogoff($conn);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocidefinebyname">
    <description><![CDATA[   ocidefinebyname binds PHP variables for fetches  of SQL-Columns. Be careful that Oracle uses ALL-UPPERCASE column-names,  whereby in your select you can also write lowercase.   ocidefinebyname expects  the column_name to be in uppercase. If you  define a variable that doesn't exists in your select statement, no  error will be given!  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* OCIDefineByName example - thies at thieso dot net (980219) */

$conn = OCILogon("scott", "tiger");

$stmt = OCIParse($conn, "select empno, ename from emp");

/* the define MUST be done BEFORE ociexecute! */

OCIDefineByName($stmt, "EMPNO", $empno);
OCIDefineByName($stmt, "ENAME", $ename);

OCIExecute($stmt);

while (OCIFetch($stmt)) {
    echo "empno:" . $empno . "\n";
    echo "ename:" . $ename . "\n";
}

OCIFreeStatement($stmt);
OCILogoff($conn);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="OCI8_10" />
      <property ref="OCI8_7" />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="ocierror">
    <description><![CDATA[  This function was renamed to oci_error   after PHP >= 5.0.0. For downward compatibility   ocierror can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="stmt_or_conn_or_global" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="ociexecute">
    <description><![CDATA[   ociexecute executes a previously parsed  statement. (see ociparse ). The optional   mode allows you to specify the  execution-mode (default is OCI_COMMIT_ON_SUCCESS). If you don't  want statements to be committed automatically specify OCI_DEFAULT as  your mode.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="ocifetch">
    <description><![CDATA[   ocifetch fetches the next row (for SELECT  statements) into the internal result-buffer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocifetchinto">
    <description><![CDATA[  This function is deprecated. Recommended alternatives:   oci_fetch_array , oci_fetch_object ,   oci_fetch_assoc and   oci_fetch_row .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn = ocilogon("username", "password");

$query = "SELECT apples FROM oranges";

$statement = OCIParse ($conn, $query);
OCIExecute ($statement);

while (OCIFetchInto ($statement, $row, OCI_ASSOC)) {
    echo $row['apples'];
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_9" />
      <property ref="DB++_12" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="ocifetchstatement">
    <description><![CDATA[  In PHP 5.0.0 this function became an alias for   oci_fetch_all .  This name still can be used, it was left as alias of   oci_fetch_all for downwards compatability.  This, however, is deprecated and not recommended.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
      <property ref="OCI8_12" />
      <property ref="OCI8_13" />
      <property ref="OCI8_14" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="ocifreecollection">
    <description><![CDATA[  This function was renamed to oci_free_collection   after PHP >= 5.0.0. For downward compatibility   ocifreecollection can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ocifreecursor">
    <description><![CDATA[   ocifreecursor frees all resources associated with the  cursor stmt .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocifreedesc">
    <description><![CDATA[   ocifreedesc deletes a large object descriptor.    ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ocifreestatement">
    <description><![CDATA[   ocifreestatement free all resources associated  with the statement stmt .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="ociinternaldebug">
    <description><![CDATA[  This function was renamed to oci_internal_debug   after PHP >= 5.0.0. For downward compatibility   ociinternaldebug can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="OCI8_16" />
    </properties>
    
  </element>
  <element kind="function" name="ociloadlob">
    <description><![CDATA[  This function was renamed to oci_lob_load   after PHP >= 5.0.0. For downward compatibility   ociloadlob can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ocilogoff">
    <description><![CDATA[   ocilogoff closes the Oracle connection   connection .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocilogon">
    <description><![CDATA[   ocilogon returns an connection identifier  needed for most other OCI calls.  The optional third parameter  can either contain the name of the local Oracle instance or the  name of the entry in tnsnames.ora to which you want to connect.  If the optional third parameter is not specified, PHP uses the  environment variables ORACLE_SID (Oracle instance) or TWO_TASK  (tnsnames.ora) to determine which database to connect to.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo "<pre>";
$db = "";

$c1 = ocilogon("scott", "tiger", $db);
$c2 = ocilogon("scott", "tiger", $db);

function create_table($conn) 
{
  $stmt = ociparse($conn, "create table scott.hallo (test varchar2(64))");
  ociexecute($stmt);
  echo $conn . " created table\n\n";
}

function drop_table($conn) 
{
  $stmt = ociparse($conn, "drop table scott.hallo");
  ociexecute($stmt);
  echo $conn . " dropped table\n\n";
}

function insert_data($conn) 
{
  $stmt = ociparse($conn, "insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn . " inserted hallo\n\n";
}

function delete_data($conn) 
{
  $stmt = ociparse($conn, "delete from scott.hallo");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn . " deleted hallo\n\n";
}

function commit($conn) 
{
  ocicommit($conn);
  echo $conn . " committed\n\n";
}

function rollback($conn) 
{
  ocirollback($conn);
  echo $conn . " rollback\n\n";
}

function select_data($conn) 
{
  $stmt = ociparse($conn, "select * from scott.hallo");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn."----selecting\n\n";
  while (ocifetch($stmt)) {
    echo $conn . " [" . ociresult($stmt, "TEST") . "]\n\n";
  }
  echo $conn . "----done\n\n";
}

create_table($c1);
insert_data($c1);   // Insert a row using c1
insert_data($c2);   // Insert a row using c2

select_data($c1);   // Results of both inserts are returned
select_data($c2);   

rollback($c1);      // Rollback using c1

select_data($c1);   // Both inserts have been rolled back
select_data($c2);   

insert_data($c2);   // Insert a row using c2
commit($c2);        // Commit using c2

select_data($c1);   // Result of c2 insert is returned

delete_data($c1);   // Delete all rows in table using c1
select_data($c1);   // No rows returned
select_data($c2);   // No rows returned
commit($c1);        // Commit using c1

select_data($c1);   // No rows returned
select_data($c2);   // No rows returned

drop_table($c1);
echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="OCI8_9" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="ocinewcollection">
    <description><![CDATA[  This function was renamed to oci_new_collection   after PHP >= 5.0.0. For downward compatibility   ocinewcollection can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_OCI-Collection" />
      <property ref="Cyrus IMAP_1" />
      <property ref="OCI8_20" />
      <property ref="OCI8_21" />
    </properties>
    
  </element>
  <element kind="function" name="ocinewcursor">
    <description><![CDATA[   ocinewcursor allocates a new statement handle  on the specified connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
// suppose your stored procedure info.output returns a ref cursor in :data

$conn = OCILogon("scott", "tiger");
$curs = OCINewCursor($conn);
$stmt = OCIParse($conn, "begin info.output(:data); end;");

ocibindbyname($stmt, "data", $curs, -1, OCI_B_CURSOR);
ociexecute($stmt);
ociexecute($curs);

while (OCIFetchInto($curs, $data)) {
    var_dump($data);
}
 
OCIFreeStatement($stmt);
OCIFreeCursor($curs);
OCILogoff($conn);
?>

      

<?php   
echo "<html><body>";
$conn = OCILogon("scott", "tiger");
$count_cursor = "CURSOR(select count(empno) num_emps from emp " .
                "where emp.deptno = dept.deptno) as EMPCNT from dept";
$stmt = OCIParse($conn, "select deptno,dname,$count_cursor");

ociexecute($stmt);
echo "<table border=\"1\">";
echo "<tr>";
echo "<th>DEPT NAME</th>";
echo "<th>DEPT #</th>";
echo "<th># EMPLOYEES</th>";
echo "</tr>";

while (OCIFetchInto($stmt, &$data, OCI_ASSOC)) {
    echo "<tr>";
    $dname  = $data["DNAME"];
    $deptno = $data["DEPTNO"];
    echo "<td>$dname</td>";
    echo "<td>$deptno</td>";
    ociexecute($data["EMPCNT"]);
    while (OCIFetchInto($data["EMPCNT"], &$subdata, OCI_ASSOC)) {
        $num_emps = $subdata["NUM_EMPS"];
        echo  "<td>$num_emps</td>";
    }
    echo "</tr>";
}
echo "</table>";
echo "</body></html>";
OCIFreeStatement($stmt);
OCILogoff($conn);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocinewdescriptor">
    <description><![CDATA[   ocinewdescriptor allocates storage to hold  descriptors or LOB locators. Valid values for   type are ,   and .  For LOB descriptors, the methods load, save, and savefile are  associated with the descriptor, for BFILE only the load method  exists. See the second example usage hints.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    /* This script is designed to be called from a HTML form.
     * It expects $user, $password, $table, $where, and $commitsize
     * to be passed in from the form.  The script then deletes
     * the selected rows using the ROWID and commits after each
     * set of $commitsize rows. (Use with care, there is no rollback)
     */
    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn, "select rowid from $table $where");
    $rowid = OCINewDescriptor($conn, OCI_D_ROWID);
    OCIDefineByName($stmt, "ROWID", &$rowid);   
    OCIExecute($stmt);
    while (OCIFetch($stmt)) {
       $nrows = OCIRowCount($stmt);
       $delete = OCIParse($conn, "delete from $table where ROWID = :rid");
       OCIBindByName($delete, ":rid", &$rowid, -1, OCI_B_ROWID);
       OCIExecute($delete);      
       echo "$nrows\n";
       if (($nrows % $commitsize) == 0) {
           OCICommit($conn);      
       }   
    }
    $nrows = OCIRowCount($stmt);   
    echo "$nrows deleted...\n";
    OCIFreeStatement($stmt);  
    OCILogoff($conn);
?>  

      

<?php
    /* This script demonstrates file upload to LOB columns
     * The formfield used for this example looks like this
     * <form action="upload.php" method="post" enctype="multipart/form-data">
     * <input type="file" name="lob_upload" />
     * ...
     */
  if (!isset($lob_upload) || $lob_upload == 'none'){
?>
<form action="upload.php" method="post" enctype="multipart/form-data">
Upload file: <input type="file" name="lob_upload" /><br />
<input type="submit" value="Upload" /> - <input type="reset" value="Reset" />
</form>
<?php
  } else {

     // $lob_upload contains the temporary filename of the uploaded file

     // see also the features section on file upload,
     // if you would like to use secure uploads
     
     $conn = OCILogon($user, $password);
     $lob = OCINewDescriptor($conn, OCI_D_LOB);
     $stmt = OCIParse($conn, "insert into $table (id, the_blob) 
               values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob");
     OCIBindByName($stmt, ':the_blob', &$lob, -1, OCI_B_BLOB);
     OCIExecute($stmt, OCI_DEFAULT);
     if ($lob->savefile($lob_upload)){
        OCICommit($conn);
        echo "Blob successfully uploaded\n";
     }else{
        echo "Couldn't upload Blob\n";
     }
     OCIFreeDesc($lob);
     OCIFreeStatement($stmt);
     OCILogoff($conn);
  }
?>

      

<?php   
    /* Calling PL/SQL stored procedures which contain clobs as input
     * parameters (PHP 4 >= 4.0.6). 
     * Example PL/SQL stored procedure signature is:
     *
     * PROCEDURE save_data
     *   Argument Name                  Type                    In/Out Default?
     *   ------------------------------ ----------------------- ------ --------
     *   KEY                            NUMBER(38)              IN
     *   DATA                           CLOB                    IN
     *
     */

    $conn = OCILogon($user, $password);
    $stmt = OCIParse($conn, "begin save_data(:key, :data); end;");
    $clob = OCINewDescriptor($conn, OCI_D_LOB);
    OCIBindByName($stmt, ':key', $key);
    OCIBindByName($stmt, ':data', $clob, -1, OCI_B_CLOB);
    $clob->WriteTemporary($data);
    OCIExecute($stmt, OCI_DEFAULT);
    OCICommit($conn);
    $clob->close();
    $clob->free();
    OCIFreeStatement($stmt);
?>]]></description>
      </property>
      <property ref="ret_OCI-Lob" />
      <property ref="Cyrus IMAP_1" />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="ocinlogon">
    <description><![CDATA[   ocinlogon creates a new connection to an  Oracle 8 database and logs on.  The optional third parameter can  either contain the name of the local Oracle instance or the name  of the entry in tnsnames.ora to which you want to connect.  If  the optional third parameter is not specified, PHP uses the  environment variables ORACLE_SID (Oracle instance) or TWO_TASK  (tnsnames.ora) to determine which database to connect to.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo "<html><pre>";
$db = "";

$c1 = ocilogon("scott", "tiger", $db);
$c2 = ocinlogon("scott", "tiger", $db);

function create_table($conn) 
{
  $stmt = ociparse($conn, "create table scott.hallo (test
varchar2(64))");
  ociexecute($stmt);
  echo $conn . " created table\n\n";
}

function drop_table($conn) 
{
  $stmt = ociparse($conn, "drop table scott.hallo");
  ociexecute($stmt);
  echo $conn . " dropped table\n\n";
}

function insert_data($conn) 
{
  $stmt = ociparse($conn, "insert into scott.hallo 
            values('$conn' || ' ' || to_char(sysdate,'DD-MON-YY HH24:MI:SS'))");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn . " inserted hallo\n\n";
}

function delete_data($conn) 
{
  $stmt = ociparse($conn, "delete from scott.hallo");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn . " deleted hallo\n\n";
}

function commit($conn) 
{
  ocicommit($conn);
  echo $conn . " committed\n\n";
}

function rollback($conn) 
{
  ocirollback($conn);
  echo $conn . " rollback\n\n";
}

function select_data($conn) 
{
  $stmt = ociparse($conn, "select * from scott.hallo");
  ociexecute($stmt, OCI_DEFAULT);
  echo $conn . "----selecting\n\n";
  while (ocifetch($stmt)) {
    echo $conn . " <" . ociresult($stmt, "TEST") . ">\n\n";
  }
  echo $conn . "----done\n\n";
}

create_table($c1);
insert_data($c1);

select_data($c1);   
select_data($c2);   

rollback($c1);      

select_data($c1);   
select_data($c2);   

insert_data($c2);   
commit($c2);        

select_data($c1);   

delete_data($c1);   
select_data($c1);   
select_data($c2);   
commit($c1);        

select_data($c1);
select_data($c2);

drop_table($c1);
echo "</pre></html>";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="OCI8_9" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="ocinumcols">
    <description><![CDATA[   ocinumcols returns the number of columns in the  statement stmt .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php   
    echo "<pre>\n";   
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn, "select * from emp");
    OCIExecute($stmt);
    while (OCIFetch($stmt)) {
        echo "\n";   
        $ncols = OCINumCols($stmt);
        for ($i = 1; $i <= $ncols; $i++) {
            $column_name  = OCIColumnName($stmt, $i);
            $column_value = OCIResult($stmt, $i);
            echo $column_name . ': ' . $column_value . "\n";
        }
        echo "\n";
    }
    OCIFreeStatement($stmt);  
    OCILogoff($conn);   
    echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="ociparse">
    <description><![CDATA[   ociparse parses the   query using conn .  It returns the statement identity if the query   is valid, if  not. The query can be any valid SQL  statement or PL/SQL block.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="MCVE_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="ociplogon">
    <description><![CDATA[   ociplogon creates a persistent connection to  an Oracle 8 database and logs on.  The optional third parameter  can either contain the name of the local Oracle instance or the  name of the entry in tnsnames.ora to which you want to connect.  If the optional third parameter is not specified, PHP uses the  environment variables (Oracle instance)  or  (tnsnames.ora) to determine which database to connect to.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property ref="OCI8_9" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="ociresult">
    <description><![CDATA[   ociresult returns the data for column   column in the current row (see   ocifetch ). ociresult will  return everything as strings except for abstract types (ROWIDs,  LOBs and FILEs).  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="MS SQL Server_9" />
      <property ref="OCI8_24" />
    </properties>
    
  </element>
  <element kind="function" name="ocirollback">
    <description><![CDATA[   ocirollback rolls back all outstanding  statements for Oracle connection connection .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocirowcount">
    <description><![CDATA[   ocirowcount returns the number of rows affected  for e.g. update-statements. This function will not tell you the number  of rows that a select will return!  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    echo "<pre>";
    $conn = OCILogon("scott", "tiger");
    $stmt = OCIParse($conn, "create table emp2 as select * from emp");
    OCIExecute($stmt);
    echo OCIRowCount($stmt) . " rows inserted.<br />";
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn, "delete from emp2");
    OCIExecute($stmt);
    echo OCIRowCount($stmt) . " rows deleted.<br />";
    OCICommit($conn);
    OCIFreeStatement($stmt);
    $stmt = OCIParse($conn, "drop table emp2");
    OCIExecute($stmt);
    OCIFreeStatement($stmt);
    OCILogOff($conn);
    echo "</pre>";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocisavelob">
    <description><![CDATA[  This function was renamed to oci_lob_save   after PHP >= 5.0.0. For downward compatibility   ocisavelob can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ocisavelobfile">
    <description><![CDATA[  This function was renamed to oci_lob_import   after PHP >= 5.0.0. For downward compatibility   ocisavelobfile can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ociserverversion">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
   $conn = OCILogon("scott", "tiger");
   echo "Server Version: " . OCIServerVersion($conn);
   OCILogOff($conn);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="ocisetprefetch">
    <description><![CDATA[  Sets the number of top level rows to be prefetched to rows .  The default value for rows is 1 row.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MS SQL Server_1" />
      <property ref="Ncurses_40" />
    </properties>
    
  </element>
  <element kind="function" name="ocistatementtype">
    <description><![CDATA[   ocistatementtype returns one of the following  values:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $conn = OCILogon("scott", "tiger");
    $sql  = "delete from emp where deptno = 10";
   
    $stmt = OCIParse($conn, $sql);
    if (OCIStatementType($stmt) == "DELETE") {
        die("You are not allowed to delete from this table<br />");
    }
   
    OCILogoff($conn);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MS SQL Server_1" />
    </properties>
    
  </element>
  <element kind="function" name="ociwritelobtofile">
    <description><![CDATA[  This function was renamed to oci_lob_export   after PHP >= 5.0.0. For downward compatibility   ociwritelobtofile can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_38" />
      <property ref="OCI8_3" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="ociwritetemporarylob">
    <description><![CDATA[  This function was renamed to oci_lob_write_temporary   after PHP >= 5.0.0. For downward compatibility   ociwritetemporarylob can also be used.  This is deprecated, however.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="var" type="string" required="1" />
      <property ref="OCI8_5" />
    </properties>
    
  </element>
</group>
<group name="ODBC">
  <description><![CDATA[ODBC Functions (Unified)]]></description>
  <element kind="function" name="odbc_autocommit">
    <description><![CDATA[  Without the OnOff parameter, this function  returns auto-commit status for   connection_id . is returned if  auto-commit is on, if it is off or an error occurs.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="connection_id" type="resource" required="1" />
      <property ref="FrontBase_1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_binmode">
    <description><![CDATA[  (ODBC SQL types affected: BINARY, VARBINARY, LONGVARBINARY)  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_close">
    <description><![CDATA[   odbc_close will close down the connection to  the database server associated with the given connection  identifier.    ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="ODBC_1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_close_all">
    <description><![CDATA[   odbc_close_all will close down all  connections to database server(s).    ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_columnprivileges">
    <description><![CDATA[  Lists columns and associated privileges for the given table.  Returns an ODBC result identifier or on  failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property kind="parameter" name="qualifier" type="string" required="1" />
      <property kind="parameter" name="owner" type="string" required="1" />
      <property ref="FrontBase_16" />
      <property ref="OCI8_10" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_columns">
    <description><![CDATA[  Lists all columns in the requested range.  Returns an ODBC result  identifier containing the information or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property kind="parameter" name="qualifier" type="string"  />
      <property ref="OCI8_21" />
      <property kind="parameter" name="table_name" type="string"  />
      <property kind="parameter" name="column_name" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="odbc_commit">
    <description><![CDATA[   odbc_commit commits all pending transactions  on the connection_id connection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ODBC_1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_connect">
    <description><![CDATA[  Returns an ODBC connection id or 0 ( ) on  error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="dsn" type="string" required="1" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property ref="Informix_13" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_cursor">
    <description><![CDATA[  odbc_cursor will return a cursorname for the given result_id.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_data_source">
    <description><![CDATA[  Returns on error, and an array upon success.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ODBC_1" />
      <property kind="parameter" name="fetch_type" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_do">
    <description><![CDATA[   odbc_do will execute a query on the given  connection.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="MS SQL Server_16" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_error">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_15" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_errormsg">
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_15" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_exec">
    <description><![CDATA[  Returns on error.  Returns an ODBC  result identifier if the SQL command was executed successfully.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property kind="parameter" name="query_string" type="string" required="1" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_execute">
    <description><![CDATA[  Executes a statement prepared with   odbc_prepare . The array   parameters_array only needs to be given if  you really have parameters in your statement.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
      <property kind="parameter" name="parameters_array" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="odbc_fetch_array">
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="rownumber" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="odbc_fetch_into">
    <description><![CDATA[  Returns the number of columns in the result;   on error.   result_array must be passed by reference,  but it can be of any type since it will be converted to type  array. The array will contain the column values starting at array  index 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$rc = odbc_fetch_into($res_id, $my_array);
?>

      

<?php
$rc = odbc_fetch_into($res_id, $row, $my_array);
       
$rc = odbc_fetch_into($res_id, 1, $my_array);
?>

      

<?php
$rc = odbc_fetch_into($res_id, $my_array);
?>

      

<?php
$row = 1;
$rc = odbc_fetch_into($res_id, $row, $my_array);
?>

      

<?php
$rc = odbc_fetch_into($res_id, $my_array);
?>

      

<?php
$rc = odbc_fetch_into($res_id, $my_array, 2);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
      <property kind="parameter" name="result_array" type="array" required="1" />
      <property ref="ODBC_11" />
      <property ref="Firebird/InterBase_31" />
      <property ref="ODBC_11" />
      <property ref="ODBC_12" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_fetch_object">
    <properties>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property ref="ODBC_11" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_fetch_row">
    <description><![CDATA[  If odbc_fetch_row was successful (there was a  row), is returned.  If there are no more  rows, is returned.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
      <property kind="parameter" name="row_number" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="odbc_field_len">
    <description><![CDATA[   odbc_field_len will return the length of  the field referenced by number in the given ODBC result  identifier.  Field numbering starts at 1.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_field_name">
    <description><![CDATA[   odbc_field_name will return the name of the  field occupying the given column number in the given ODBC result  identifier.  Field numbering starts at 1.   is returned on error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_31" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_field_num">
    <description><![CDATA[   odbc_field_num will return the number of the  column slot that corresponds to the named field in the given ODBC  result identifier.  Field numbering starts at 1.   is returned on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
      <property ref="FDF_21" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_field_precision">
    <description><![CDATA[   odbc_field_precision will return the precision  of the field referenced by number in the given ODBC result  identifier.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_field_scale">
    <description><![CDATA[   odbc_field_scale will return the scale  of the field referenced by number in the given ODBC result  identifier.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_field_type">
    <description><![CDATA[   odbc_field_type will return the SQL type of  the field referenced by number in the given ODBC result  identifier.  Field numbering starts at 1.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_31" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_foreignkeys">
    <description><![CDATA[   odbc_foreignkeys retrieves information about  foreign keys. Returns an ODBC result identifier or   on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property kind="parameter" name="pk_qualifier" type="string" required="1" />
      <property kind="parameter" name="pk_owner" type="string" required="1" />
      <property kind="parameter" name="pk_table" type="string" required="1" />
      <property kind="parameter" name="fk_qualifier" type="string" required="1" />
      <property kind="parameter" name="fk_owner" type="string" required="1" />
      <property kind="parameter" name="fk_table" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_free_result">
    <description><![CDATA[  Always returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_gettypeinfo">
    <description><![CDATA[  Retrieves information about data types supported by the data  source.  Returns an ODBC result identifier or   on failure.  The optional argument   data_type can be used to restrict the  information to a single data type.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property kind="parameter" name="data_type" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="odbc_longreadlen">
    <description><![CDATA[  (ODBC SQL types affected: LONG, LONGVARBINARY) The number of  bytes returned to PHP is controlled by the parameter length. If it  is set to 0, Long column data is passed through to the  client.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
      <property ref="Filesystem_19" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_next_result">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_num_fields">
    <description><![CDATA[   odbc_num_fields will return the number of  fields (columns) in an ODBC result.  This function will return -1  on error.  The argument is a valid result identifier returned by   odbc_exec .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_num_rows">
    <description><![CDATA[   odbc_num_rows will return the number of rows  in an ODBC result.  This function will return -1 on error.  For  INSERT, UPDATE and DELETE statements   odbc_num_rows returns the number of rows  affected.  For a SELECT clause this be  the number of rows available.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_pconnect">
    <description><![CDATA[  Returns an ODBC connection id or 0 ( ) on  error.  This function is much like   odbc_connect , except that the connection is  not really closed when the script has finished.  Future requests  for a connection with the same dsn ,   user , password  combination (via odbc_connect and   odbc_pconnect ) can reuse the persistent  connection.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_7" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property ref="Informix_13" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_prepare">
    <description><![CDATA[  Returns on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="ODBC_9" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_primarykeys">
    <description><![CDATA[  Returns the column names that comprise the primary key for a  table.  Returns an ODBC result identifier or   on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="ODBC_2" />
      <property ref="ODBC_3" />
      <property kind="parameter" name="table" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_procedurecolumns">
    <description><![CDATA[  Returns the list of input and output parameters, as well as the  columns that make up the result set for the specified procedures. Returns  an ODBC result identifier or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="ODBC_4" />
      <property ref="ODBC_3" />
      <property kind="parameter" name="proc" type="string" required="1" />
      <property ref="MCVE_18" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_procedures">
    <description><![CDATA[   Lists all procedures in the requested range.  Returns an ODBC  result identifier containing the information or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="ODBC_4" />
      <property ref="ODBC_3" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_result">
    <description><![CDATA[  Returns the contents of the field.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_31" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_result_all">
    <description><![CDATA[  Returns the number of rows in the result or   on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_31" />
      <property kind="parameter" name="format" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="odbc_rollback">
    <description><![CDATA[  Rolls back all pending statements on   connection_id .  Returns   on success, on  failure.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ODBC_1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_setoption">
    <description><![CDATA[  This function allows fiddling with the ODBC options for a  particular connection or query result.  It was written to help  find work around to problems in quirky ODBC drivers.  You should  probably only use this function if you are an ODBC programmer and  understand the effects the various options will have.  You will  certainly need a good ODBC reference to explain all the different  options and values that can be used.  Different driver versions  support different options.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// 1. Option 102 of SQLSetConnectOption() is SQL_AUTOCOMMIT.
//    Value 1 of SQL_AUTOCOMMIT is SQL_AUTOCOMMIT_ON.
//    This example has the same effect as
//    odbc_autocommit($conn, true);

odbc_setoption($conn, 1, 102, 1);

// 2. Option 0 of SQLSetStmtOption() is SQL_QUERY_TIMEOUT.
//    This example sets the query to timeout after 30 seconds.

$result = odbc_prepare($conn, $sql);
odbc_setoption($result, 2, 0, 30);
odbc_execute($result);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="id" type="resource" required="1" />
      <property kind="parameter" name="function" type="int" required="1" />
      <property ref="CURL_7" />
      <property ref="Msession_4" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_specialcolumns">
    <description><![CDATA[  The result set has the following columns:    ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="COM_27" />
      <property ref="ODBC_2" />
      <property ref="ODBC_3" />
      <property ref="ODBC_21" />
      <property kind="parameter" name="scope" type="int" required="1" />
      <property kind="parameter" name="nullable" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_statistics">
    <description><![CDATA[  Get statistics about a table and its indexes. Returns an ODBC  result identifier or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="ODBC_2" />
      <property ref="ODBC_3" />
      <property ref="FrontBase_16" />
      <property kind="parameter" name="unique" type="int" required="1" />
      <property kind="parameter" name="accuracy" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_tableprivileges">
    <description><![CDATA[  Lists tables in the requested range and the privileges associated  with each table.  Returns an ODBC result identifier or   on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="ODBC_2" />
      <property ref="ODBC_3" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="odbc_tables">
    <description><![CDATA[  Lists all tables in the requested range.  Returns an ODBC result  identifier containing the information or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="ODBC_1" />
      <property ref="ODBC_4" />
      <property kind="parameter" name="owner" type="string"  />
      <property ref="Hyperwave API_2" />
      <property kind="parameter" name="types" type="string"  />
    </properties>
    
  </element>
</group>
<group name="Object Aggregation">
  <description><![CDATA[Object Aggregation/Composition Functions]]></description>
  <element kind="function" name="aggregate">
    <description><![CDATA[  Aggregates methods and properties defined in a class to  an existing object. Methods and properties with names starting with  an underscore character (_) are considered private to  the aggregated class and are not used, constructors are  also excluded from the aggregation procedure.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property ref="COM_4" />
    </properties>
    
  </element>
  <element kind="function" name="aggregate_info">
    <description><![CDATA[  Will return the aggregation information for a particular object  as an associative array of arrays of methods and properties. The  key for the main array is the name of the aggregated class.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class Slicer {
    var $vegetable;

    function Slicer($vegetable) 
    {
        $this->vegetable = $vegetable;
    }

    function slice_it($num_cuts) 
    {
        echo "Doing some simple slicing\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // do some slicing
        }
    }
}

class Dicer {
    var $vegetable;
    var $rotation_angle = 90;   // degrees

    function Dicer($vegetable) 
    {
        $this->vegetable = $vegetable;
    }

    function dice_it($num_cuts) 
    {
        echo "Cutting in one direction\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // do some cutting
        }
        $this->rotate($this->rotation_angle);
        echo "Cutting in a second direction\n";
        for ($i=0; $i < $num_cuts; $i++) {
            // do some more cutting
        }
    }

    function rotate($deg) 
    {
        echo "Now rotating {$this->vegetable} {$deg} degrees\n";
    }

    function _secret_super_dicing($num_cuts) 
    {
        // so secret we cannot show you ;-)
    }
}

$obj = new Slicer('onion');
aggregate($obj, 'Dicer');
print_r(aggregate_info($obj));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Classes/Objects_9" />
    </properties>
    
  </element>
  <element kind="function" name="aggregate_methods">
    <description><![CDATA[  Aggregates all methods defined in a class to  an existing object, except for the class constructor, or methods  whose names start with an underscore character (_) which are  considered private to the aggregated class.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property ref="COM_4" />
    </properties>
    
  </element>
  <element kind="function" name="aggregate_methods_by_list">
    <description><![CDATA[  Aggregates methods from a class to  an existing object using a list of method names. The optional parameter   exclude is used to decide whether the list  contains the names of methods to include in the aggregation (i.e.   exclude is , which is the default value),  or to exclude from the aggregation ( exclude is   ).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property ref="COM_4" />
      <property kind="parameter" name="methods_list" type="array" required="1" />
      <property kind="parameter" name="exclude" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="aggregate_methods_by_regexp">
    <description><![CDATA[  Aggregates methods from a class to  an existing object using a regular expression to match method names.  The optional parameter   exclude is used to decide whether the regular  expression will select  the names of methods to include in the aggregation (i.e.   exclude is , which is the default value),  or to exclude from the aggregation ( exclude is   ).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property ref="COM_4" />
      <property kind="parameter" name="regexp" type="string" required="1" />
      <property ref="Object Aggregation_2" />
    </properties>
    
  </element>
  <element kind="function" name="aggregate_properties">
    <description><![CDATA[  Aggregates all properties defined in a class to  an existing object, except for properties  whose names start with an underscore character (_) which are  considered private to the aggregated class.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property ref="COM_4" />
    </properties>
    
  </element>
  <element kind="function" name="aggregate_properties_by_list">
    <description><![CDATA[  Aggregates properties from a class to  an existing object using a list of property names. The optional parameter   exclude is used to decide whether the list  contains the names of class properties to include in the aggregation (i.e.   exclude is , which is the default value),  or to exclude from the aggregation ( exclude is   ).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property ref="COM_4" />
      <property kind="parameter" name="properties_list" type="array" required="1" />
      <property ref="Object Aggregation_2" />
    </properties>
    
  </element>
  <element kind="function" name="aggregate_properties_by_regexp">
    <description><![CDATA[  Aggregates properties from a class to  an existing object using a regular expression to match their names.  The optional parameter   exclude is used to decide whether the regular  expression will select  the names of class properties to include in the aggregation (i.e.   exclude is , which is the default value),  or to exclude from the aggregation ( exclude is   ).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property ref="COM_4" />
      <property ref="Object Aggregation_3" />
      <property ref="Object Aggregation_2" />
    </properties>
    
  </element>
  <element kind="function" name="deaggregate">
    <description><![CDATA[  Removes the methods and properties from classes that were aggregated to  an object.  If the optional class_name parameters is passed,  only those methods and properties defined in that class are removed,  otherwise all aggregated methods and properties are eliminated.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Classes/Objects_9" />
      <property kind="parameter" name="class_name" type="string"  />
    </properties>
    
  </element>
</group>
<group name="Object overloading">
  <description><![CDATA[Object property and method call overloading]]></description>
  <element kind="function" name="overload">
    <description><![CDATA[  The overload function will enable  property and method call overloading for a class identified  by class_name .   .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Object Aggregation_5" />
    </properties>
    
  </element>
</group>
<group name="OpenSSL">
  <description><![CDATA[OpenSSL Functions]]></description>
  <element kind="function" name="openssl_csr_export">
    <description><![CDATA[   openssl_csr_export takes the Certificate Signing  Request represented by csr and stores it as  ascii-armoured text into out , which is passed by  reference.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="csr" type="resource" required="1" />
      <property kind="parameter" name="out" type="string" required="1" />
      <property kind="parameter" name="notext" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_csr_export_to_file">
    <description><![CDATA[   openssl_csr_export_to_file takes the Certificate  Signing Request represented by csr and saves it  as ascii-armoured text into the file named by outfilename .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="OpenSSL_1" />
      <property kind="parameter" name="outfilename" type="string" required="1" />
      <property ref="OpenSSL_3" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_csr_new">
    <description><![CDATA[   openssl_csr_new generates a new CSR (Certificate Signing Request)  based on the information provided by dn , which represents the  Distinguished Name to be used in the certificate.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Fill in data for the distinguished name to be used in the cert
// You must change the values of these keys to match your name and
// company, or more precisely, the name and company of the person/site
// that you are generating the certificate for.
// For SSL certificates, the commonName is usually the domain name of
// that will be using the certificate, but for S/MIME certificates,
// the commonName will be the name of the individual who will use the
// certificate.
$dn = array(
    "countryName" => "UK",
    "stateOrProvinceName" => "Somerset",
    "localityName" => "Glastonbury",
    "organizationName" => "The Brain Room Limited",
    "organizationalUnitName" => "PHP Documentation Team",
    "commonName" => "Wez Furlong",
    "emailAddress" => "wez@example.com"
);

// Generate a new private (and public) key pair
$privkey = openssl_pkey_new();

// Generate a certificate signing request
$csr = openssl_csr_new($dn, $privkey);

// You will usually want to create a self-signed certificate at this
// point until your CA fulfills your request.
// This creates a self-signed cert that is valid for 365 days
$sscert = openssl_csr_sign($csr, null, $privkey, 365);

// Now you will want to preserve your private key, CSR and self-signed
// cert so that they can be installed into your web server, mail server
// or mail client (depending on the intended use of the certificate).
// This example shows how to get those things into variables, but you
// can also store them directly into files.
// Typically, you will send the CSR on to your CA who will then issue
// you with the "real" certificate.
openssl_csr_export($csr, $csrout) and var_dump($csrout);
openssl_x509_export($sscert, $certout) and var_dump($certout);
openssl_pkey_export($privkey, $pkeyout, "mypassword") and var_dump($pkeyout);

// Show any errors that occurred here
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="dn" type="array" required="1" />
      <property kind="parameter" name="privkey" type="resource" required="1" />
      <property kind="parameter" name="configargs" type="array"  />
      <property kind="parameter" name="extraattribs" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_csr_sign">
    <description><![CDATA[   openssl_csr_sign generates an x509 certificate  resource from the csr previously generated by   openssl_csr_new , but it can also be the path to  a PEM encoded CSR when specified as   or an exported string generated  by openssl_csr_export .  The generated certificate will be signed by   cacert .  If cacert is ,  the generated certificate will be a self-signed certificate.   priv_key is the private key that corresponds to   cacert .   days specifies the length of time for which the  generated certificate will be valid, in days.  You can finetune the CSR signing by configargs .  See openssl_csr_new for more information about   configargs .  Since PHP 4.3.3 you can specify the serial number of issued certificate by   serial . In earlier versions, it was always 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Let's assume that this script is set to receive a CSR that has
// been pasted into a textarea from another page
$csrdata = $_POST["CSR"];

// We will sign the request using our own "certificate authority"
// certificate.  You can use any certificate to sign another, but
// the process is worthless unless the signing certificate is trusted
// by the software/users that will deal with the newly signed certificate

// We need our CA cert and its private key
$cacert = "file://path/to/ca.crt";
$privkey = array("file://path/to/ca.key", "your_ca_key_passphrase");

$userscert = openssl_csr_sign($csrdata, $cacert, $privkey, 365);

// Now display the generated certificate so that the user can
// copy and paste it into their local configuration (such as a file
// to hold the certificate for their SSL server)
openssl_x509_export($usercert, $certout);
echo $certout;

// Show any errors that occurred here
while (($e = openssl_error_string()) !== false) {
    echo $e . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="csr" type="mixed" required="1" />
      <property kind="parameter" name="cacert" type="mixed" required="1" />
      <property kind="parameter" name="priv_key" type="mixed" required="1" />
      <property kind="parameter" name="days" type="int" required="1" />
      <property ref="OpenSSL_7" />
      <property kind="parameter" name="serial" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_error_string">
    <description><![CDATA[  Returns an error message string, or if there are no more error  messages to return.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// lets assume you just called an openssl function that failed
while ($msg = openssl_error_string())
    echo $msg . "<br />\n";
?>]]></description>
      </property>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_free_key">
    <description><![CDATA[   openssl_free_key frees the key associated with  the specified key_identifier from memory.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="key_identifier" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_get_privatekey">
    <description><![CDATA[  This is an alias for openssl_pkey_get_private .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Arrays_17" />
      <property kind="parameter" name="passphrase" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_get_publickey">
    <description><![CDATA[  This is an alias for openssl_pkey_get_public .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="certificate" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_open">
    <description><![CDATA[   If successful the opened  data is returned in open_data .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $sealed and $env_key are assumed to contain the sealed data
// and our envelope key, both given to us by the sealer.

// fetch private key from file and ready it
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// decrypt the data and store it in $open
if (openssl_open($sealed, $open, $env_key, $pkeyid)) {
    echo "here is the opened data: ", $open;
} else {
    echo "failed to open data";
}

// free the private key from memory
openssl_free_key($pkeyid);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="sealed_data" type="string" required="1" />
      <property kind="parameter" name="open_data" type="string" required="1" />
      <property kind="parameter" name="env_key" type="string" required="1" />
      <property kind="parameter" name="priv_key_id" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkcs7_decrypt">
    <description><![CDATA[  Decrypts the S/MIME encrypted message contained in the file specified by   infilename using the certificate and its  associated private key specified by recipcert and   recipkey .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $cert and $key are assumed to contain your personal certificate and private
// key pair, and that you are the recipient of an S/MIME message
$infilename = "encrypted.msg";  // this file holds your encrypted message
$outfilename = "decrypted.msg"; // make sure you can write to this file

if (openssl_pkcs7_decrypt($infilename, $outfilename, $cert, $key)) {
    echo "decrypted!";
} else {
    echo "failed to decrypt!";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="infilename" type="string" required="1" />
      <property ref="OpenSSL_4" />
      <property kind="parameter" name="recipcert" type="mixed" required="1" />
      <property kind="parameter" name="recipkey" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkcs7_encrypt">
    <description><![CDATA[   openssl_pkcs7_encrypt takes the contents of the  file named infile and encrypts them using an RC2  40-bit cipher so that they can only be read by the intended recipients  specified by recipcerts , which is either a  lone X.509 certificate, or an array of X.509 certificates.   headers is an array of headers that  will be prepended to the data after it has been encrypted.   flags can be used to specify options that affect  the encoding process - see .   headers can be either an associative array  keyed by header name, or an indexed array, where each element contains  a single header line.  Cipher can be selected with cipherid since PHP 5.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// the message you want to encrypt and send to your secret agent
// in the field, known as nighthawk.  You have his certificate
// in the file nighthawk.pem
$data = <<<EOD
Nighthawk,

Top secret, for your eyes only!

The enemy is closing in! Meet me at the cafe at 8.30am
to collect your forged passport!

HQ
EOD;

// load key
$key = file_get_contents("nighthawk.pem");

// save message to file
$fp = fopen("msg.txt", "w");
fwrite($fp, $data);
fclose($fp);

// encrypt it
if (openssl_pkcs7_encrypt("msg.txt", "enc.txt", $key,
    array("To" => "nighthawk@example.com", // keyed syntax
          "From: HQ <hq@example.com>", // indexed syntax
          "Subject" => "Eyes only"))) {
    // message encrypted - send it!
    exec(ini_get("sendmail_path") . " < enc.txt");
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="infile" type="string" required="1" />
      <property kind="parameter" name="outfile" type="string" required="1" />
      <property kind="parameter" name="recipcerts" type="mixed" required="1" />
      <property kind="parameter" name="headers" type="array" required="1" />
      <property ref="COM_29" />
      <property kind="parameter" name="cipherid" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkcs7_sign">
    <description><![CDATA[   openssl_pkcs7_sign takes the contents of the file  named infilename and signs them using the  certificate and its matching private key specified by   signcert and privkey  parameters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// the message you want to sign so that recipient can be sure it was you that
// sent it
$data = <<<EOD

You have my authorization to spend $10,000 on dinner expenses.

The CEO
EOD;
// save message to file
$fp = fopen("msg.txt", "w");
fwrite($fp, $data);
fclose($fp);
// encrypt it
if (openssl_pkcs7_sign("msg.txt", "signed.txt", "mycert.pem",
    array("file://mycert.pem", "mypassphrase"),
    array("To" => "joes@example.com", // keyed syntax
          "From: HQ <ceo@example.com>", // indexed syntax
          "Subject" => "Eyes only")
    )) {
    // message signed - send it!
    exec(ini_get("sendmail_path") . " < signed.txt");
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="OpenSSL_21" />
      <property ref="OpenSSL_4" />
      <property kind="parameter" name="signcert" type="mixed" required="1" />
      <property kind="parameter" name="privkey" type="mixed" required="1" />
      <property ref="OpenSSL_27" />
      <property ref="COM_29" />
      <property kind="parameter" name="extracerts" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkcs7_verify">
    <description><![CDATA[   openssl_pkcs7_verify reads the S/MIME message  contained in the filename specified by filename and  examines the digital signature.  It returns if the signature is  verified, if it is not correct (the message has been tampered with,  or the signing certificate is invalid), or -1 on error.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="Direct IO_4" />
      <property kind="parameter" name="outfilename" type="string"  />
      <property kind="parameter" name="cainfo" type="array"  />
      <property ref="OpenSSL_31" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkey_export">
    <description><![CDATA[   openssl_pkey_export exports   key as a PEM encoded string and stores it into   out (which is passed by reference).  The key is optionally protected by passphrase .   configargs can be used to fine-tune the export  process by specifying and/or overriding options for the openssl  configuration file.  See openssl_csr_new for more  information about configargs .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_17" />
      <property ref="OpenSSL_2" />
      <property ref="OpenSSL_15" />
      <property ref="OpenSSL_7" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkey_export_to_file">
    <description><![CDATA[   openssl_pkey_export_to_file saves an ascii-armoured  (PEM encoded) rendition of key into the file named  by outfilename .  The key can be optionally  protected by a passphrase .   configargs can be used to fine-tune the export  process by specifying and/or overriding options for the openssl  configuration file.  See openssl_csr_new for more  information about configargs .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_17" />
      <property ref="OpenSSL_4" />
      <property ref="OpenSSL_15" />
      <property ref="OpenSSL_7" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkey_get_private">
    <description><![CDATA[  Returns a positive key resource identifier on success, or on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Arrays_17" />
      <property ref="OpenSSL_15" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkey_get_public">
    <description><![CDATA[  Returns a positive key resource identifier on success, or on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="OpenSSL_16" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_pkey_new">
    <description><![CDATA[   openssl_pkey_new generates a new private and public  key pair.  The public component of the key can be obtained using   openssl_pkey_get_public .  You can finetune the key generation (such as specifying the number of  bits) using configargs .  See   openssl_csr_new for more information about   configargs .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="OpenSSL_7" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_private_decrypt">
    <description><![CDATA[   openssl_private_decrypt decrypts   data that was previous encrypted via   openssl_public_encrypt and stores the result into   decrypted . key must be the  private key corresponding that was used to encrypt the  data. padding defaults to   , but can also be one of   ,   ,   .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property kind="parameter" name="decrypted" type="string" required="1" />
      <property ref="Arrays_17" />
      <property kind="parameter" name="padding" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_private_encrypt">
    <description><![CDATA[   openssl_private_encrypt encrypts data  with private key and stores the result into   crypted . Encrypted data can be decrypted via   openssl_public_decrypt . padding  defaults to , but can also be   .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property kind="parameter" name="crypted" type="string" required="1" />
      <property ref="Arrays_17" />
      <property ref="OpenSSL_35" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_public_decrypt">
    <description><![CDATA[   openssl_public_decrypt decrypts   data that was previous encrypted via   openssl_private_encrypt and stores the result into   decrypted . key must be the  public key corresponding that was used to encrypt the  data. padding defaults to   , but can also be   .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property ref="OpenSSL_34" />
      <property ref="Arrays_17" />
      <property ref="OpenSSL_35" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_public_encrypt">
    <description><![CDATA[   openssl_public_encrypt encrypts data  with public key and stores the result into   crypted . Encrypted data can be decrypted via   openssl_private_decrypt . padding  defaults to , but can also be  one of ,   ,   .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property ref="OpenSSL_36" />
      <property ref="Arrays_17" />
      <property ref="OpenSSL_35" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_seal">
    <description><![CDATA[  Returns the length of the sealed data on success, or on error.  If successful the sealed data is returned in   sealed_data , and the envelope keys in   env_keys .   ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $data is assumed to contain the data to be sealed

// fetch public keys for our recipients, and ready them
$fp = fopen("/src/openssl-0.9.6/demos/maurice/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk1 = openssl_get_publickey($cert);
// Repeat for second recipient
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pk2 = openssl_get_publickey($cert);

// seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys
// $ekeys[0] and $ekeys[1] respectively.
openssl_seal($data, $sealed, $ekeys, array($pk1, $pk2));

// free the keys from memory
openssl_free_key($pk1);
openssl_free_key($pk2);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Bzip2_7" />
      <property ref="OpenSSL_17" />
      <property kind="parameter" name="env_keys" type="array" required="1" />
      <property kind="parameter" name="pub_key_ids" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_sign">
    <description><![CDATA[    If successful the signature is returned in   signature .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $data is assumed to contain the data to be signed

// fetch private key from file and ready it
$fp = fopen("/src/openssl-0.9.6/demos/sign/key.pem", "r");
$priv_key = fread($fp, 8192);
fclose($fp);
$pkeyid = openssl_get_privatekey($priv_key);

// compute signature
openssl_sign($data, $signature, $pkeyid);

// free the key from memory
openssl_free_key($pkeyid);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property kind="parameter" name="signature" type="string" required="1" />
      <property ref="OpenSSL_20" />
      <property kind="parameter" name="signature_alg" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_verify">
    <description><![CDATA[  Returns 1 if the signature is correct, 0 if it is incorrect, and  -1 on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $data and $signature are assumed to contain the data and the signature

// fetch public key from certificate and ready it
$fp = fopen("/src/openssl-0.9.6/demos/sign/cert.pem", "r");
$cert = fread($fp, 8192);
fclose($fp);
$pubkeyid = openssl_get_publickey($cert);

// state whether signature is okay or not
$ok = openssl_verify($data, $signature, $pubkeyid);
if ($ok == 1) {
    echo "good";
} elseif ($ok == 0) {
    echo "bad";
} else {
    echo "ugly, error checking signature";
}
// free the key from memory
openssl_free_key($pubkeyid);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Bzip2_7" />
      <property ref="OpenSSL_39" />
      <property kind="parameter" name="pub_key_id" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_x509_check_private_key">
    <description><![CDATA[   openssl_x509_check_private_key returns if   key is the private key that corresponds to   cert , or otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="cert" type="mixed" required="1" />
      <property ref="Arrays_17" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_x509_checkpurpose">
    <description><![CDATA[  Returns if the certificate can be used for the intended purpose,   if it cannot, or -1 on error.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="x509cert" type="mixed" required="1" />
      <property kind="parameter" name="purpose" type="int" required="1" />
      <property ref="OpenSSL_33" />
      <property kind="parameter" name="untrustedfile" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_x509_export">
    <description><![CDATA[   openssl_x509_export stores   x509 into a string named by   output in a PEM encoded format.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="x509" type="mixed" required="1" />
      <property ref="APD_4" />
      <property ref="OpenSSL_3" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_x509_export_to_file">
    <description><![CDATA[   openssl_x509_export_to_file stores   x509 into a file named by   outfilename in a PEM encoded format.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="OpenSSL_46" />
      <property ref="OpenSSL_4" />
      <property ref="OpenSSL_3" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_x509_free">
    <description><![CDATA[   openssl_x509_free frees the certificate associated  with the specified x509cert resource from memory.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="x509cert" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openssl_x509_parse">
    <description><![CDATA[   openssl_x509_parse returns information about the  supplied x509cert , including fields such as subject  name, issuer name, purposes, valid from and valid to dates etc.   shortnames controls how the data is indexed in the  array - if shortnames is (the default) then  fields will be indexed with the short name form, otherwise, the long name  form will be used - e.g.: CN is the shortname form of commonName.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="OpenSSL_43" />
      <property kind="parameter" name="shortnames" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="openssl_x509_read">
    <description><![CDATA[   openssl_x509_read parses the certificate supplied by   x509certdata and returns a resource identifier for  it.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="x509certdata" type="mixed" required="1" />
    </properties>
    
  </element>
</group>
<group name="Oracle">
  <description><![CDATA[Oracle Functions]]></description>
  <element kind="function" name="ora_bind">
    <description><![CDATA[  This function binds the named PHP variable with a SQL parameter.  The SQL parameter must be in the form ":name". With the optional  type parameter, you can define whether the SQL parameter is an  in/out (0, default), in (1) or out (2) parameter. As of PHP  3.0.1, you can use the constants ORA_BIND_INOUT, ORA_BIND_IN and  ORA_BIND_OUT instead of the numbers.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  ora_parse($curs, "declare tmp INTEGER; begin tmp := :in; :out := tmp; :x := 7.77; end;");
  ora_bind($curs, "result", ":x", $len, 2);
  ora_bind($curs, "input", ":in", 5, 1);
  ora_bind($curs, "output", ":out", 5, 2);
  $input = 765;
  ora_exec($curs);
  echo "Result: $result<br />Out: $output<br />In: $input";
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="cursor" type="resource" required="1" />
      <property kind="parameter" name="PHP_variable_name" type="string" required="1" />
      <property kind="parameter" name="SQL_parameter_name" type="string" required="1" />
      <property ref="Filesystem_19" />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="ora_close">
    <description><![CDATA[  This function closes a data cursor opened with   ora_open .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Oracle_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_columnname">
    <description><![CDATA[  Returns the name of the field/column   column on the cursor   cursor . The returned name is in all  uppercase letters. Column 0 is the first column.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Oracle_1" />
      <property ref="MCVE_20" />
    </properties>
    
  </element>
  <element kind="function" name="ora_columnsize">
    <description><![CDATA[  Returns the size of the Oracle column   column on the cursor   cursor . Column 0 is the first column.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Oracle_1" />
      <property ref="MCVE_20" />
    </properties>
    
  </element>
  <element kind="function" name="ora_columntype">
    <description><![CDATA[  Returns the Oracle data type name of the field/column   column on the cursor   cursor . Column 0 is the first column. The returned  type will be one of the following:    ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Oracle_1" />
      <property ref="MCVE_20" />
    </properties>
    
  </element>
  <element kind="function" name="ora_commit">
    <description><![CDATA[  This function commits an Oracle transaction. A transaction is defined as  all the changes on a given connection since the last commit/rollback,  autocommit was turned off or when the connection was established.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_commitoff">
    <description><![CDATA[  This function turns off automatic commit after each   ora_exec on the given connection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_commiton">
    <description><![CDATA[  This function turns on automatic commit after each   ora_exec on the given connection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MCVE_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_do">
    <description><![CDATA[   ora_do is quick combination of ora_parse ,   ora_exec and ora_fetch .  It will parse and execute a statement, then fetch the first result row.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="MCVE_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="ora_error">
    <description><![CDATA[  Returns an error message of the form   -  where is where the error comes  from and identifies the error  message.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="cursor_or_connection" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="ora_errorcode">
    <description><![CDATA[  Returns the numeric error code of the last executed statement on  the specified cursor or connection.     Support for connection ids was added in 3.0.4.]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Oracle_4" />
    </properties>
    
  </element>
  <element kind="function" name="ora_exec">
    <description><![CDATA[   ora_exec execute the parsed statement   cursor , already parsed by ora_parse .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Oracle_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_fetch">
    <description><![CDATA[  Retrieves a row of data from the specified cursor .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Oracle_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_fetch_into">
    <description><![CDATA[  Fetches a row of data into an array. The flags  has two flag values: if the  flag is set, columns with values are set  in the array; and if the  flag is set, an associative array is created.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$results = array();
ora_fetch_into($cursor, $results);
echo $results[0];
echo $results[1];
$results = array();
ora_fetch_into($cursor, $results, ORA_FETCHINTO_NULLS|ORA_FETCHINTO_ASSOC);
echo $results['MyColumn'];
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Oracle_1" />
      <property ref="DB++_12" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="ora_getcolumn">
    <description><![CDATA[  Fetches the data for a column or function result.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Oracle_1" />
      <property ref="MCVE_20" />
    </properties>
    
  </element>
  <element kind="function" name="ora_logoff">
    <description><![CDATA[  Logs out the user and disconnects from the server.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_logon">
    <description><![CDATA[  Establishes a connection between PHP and an Oracle database with the  given username user and password password .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="ora_numcols">
    <description><![CDATA[   ora_numcols returns the number of columns in a result.  Only returns meaningful values after an parse/exec/fetch sequence.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Oracle_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_numrows">
    <description><![CDATA[   ora_numrows returns the number of rows in a result.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Oracle_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_open">
    <description><![CDATA[  Opens an Oracle cursor associated with connection.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="ora_parse">
    <description><![CDATA[  This function parses an SQL statement or a PL/SQL block and  associates it with the given cursor.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Oracle_1" />
      <property kind="parameter" name="sql_statement" type="string" required="1" />
      <property kind="parameter" name="defer" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ora_plogon">
    <description><![CDATA[  Establishes a persistent connection between PHP and an Oracle database with  the username user and password password .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="ora_rollback">
    <description><![CDATA[  This function undoes an Oracle transaction. (See   ora_commit for the definition of a  transaction.)  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
</group>
<group name="Output Control">
  <description><![CDATA[Output Control Functions]]></description>
  <element kind="function" name="flush">
    <description><![CDATA[   flush has no effect on the buffering  scheme of your webserver or the browser on the client  side.  Thus you need to call both ob_flush and   flush to flush the output buffers.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="ob_clean">
    <description><![CDATA[  This function discards the contents of the output buffer.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="ob_end_clean">
    <description><![CDATA[  This function discards the contents of the topmost output buffer and  turns off this output buffering. If you want to further  process the buffer's contents you have to call   ob_get_contents before   ob_end_clean as the buffer contents are  discarded when ob_end_flush is called.  The function returns when it successfully  discarded one buffer and otherwise. Reasons for failure are first  that you called the function without an active buffer or that for some  reason a buffer could not be deleted (possible for special buffer).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
while (@ob_end_clean());
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ob_end_flush">
    <description><![CDATA[  This function will send the contents of the topmost output buffer (if  any) and turn this output buffer off.  If you want to further  process the buffer's contents you have to call   ob_get_contents before   ob_end_flush as the buffer contents are  discarded after ob_end_flush is called.  The function returns when it successfully  discarded one buffer and otherwise. Reasons for failure are first  that you called the function without an active buffer or that for some  reason a buffer could not be deleted (possible for special buffer).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  while (@ob_end_flush());
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ob_flush">
    <description><![CDATA[  This function will send the contents of the output buffer (if  any).  If you want to further  process the buffer's contents you have to call   ob_get_contents before   ob_flush as the buffer contents are  discarded after ob_flush is called.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="ob_get_clean">
    <description><![CDATA[  This will return the contents of the output buffer and end output  buffering.  If output buffering isn't active then is returned.   ob_get_clean essentially executes both   ob_get_contents and   ob_end_clean .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

ob_start();

echo "Hello World";

$out = ob_get_clean();
$out = strtolower($out);

var_dump($out);
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ob_get_contents">
    <description><![CDATA[  This will return the contents of the output buffer or , if  output buffering isn't active.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ob_get_flush">
    <description><![CDATA[ ob_get_flush flushs the output buffer, return  it as a string and turns off output buffering.   ob_get_flush returns if no buffering is  active.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
//using output_buffering=On
print_r(ob_list_handlers());

//save buffer in a file
$buffer = ob_get_flush();
file_put_contents('buffer.txt', $buffer);

print_r(ob_list_handlers());
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="ob_get_length">
    <description><![CDATA[  This will return the length of the contents in the output buffer  or , if output buffering isn't active.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ob_get_level">
    <description><![CDATA[  This will return the level of nested output buffering handlers  or zero if output buffering is not activated.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ob_get_status">
    <description><![CDATA[  This will return the current status of output buffers. It returns  array contains buffer status or for error.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="full_status" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="ob_gzhandler">
    <description><![CDATA[   ob_gzhandler requires the   extension.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

ob_start("ob_gzhandler");

?>
<html>
<body>
<p>This should be a compressed page.</p>
</html>
<body>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Hyperwave API_5" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="ob_implicit_flush">
    <description><![CDATA[   ob_implicit_flush will turn implicit  flushing on or off (if no flag is given,  it defaults to on).  Implicit flushing will result in a flush  operation after every output call, so that explicit calls to   flush will no longer be needed.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="IMAP_11" />
    </properties>
    
  </element>
  <element kind="function" name="ob_list_handlers">
    <description><![CDATA[  This will return an array with the output handlers in use (if any). If   is  enabled, ob_list_handlers will return "default  output handler".  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
//using output_buffering=On
print_r(ob_list_handlers());
ob_end_flush();

ob_start("ob_gzhandler");
print_r(ob_list_handlers());
ob_end_flush();
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="ob_start">
    <description><![CDATA[  This function will turn output buffering on. While output  buffering is active no output is sent from the script (other than  headers), instead the output is stored in an internal buffer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

function callback($buffer) 
{
  // replace all the apples with oranges
  return (str_replace("apples", "oranges", $buffer));
}

ob_start("callback");

?>
<html>
<body>
<p>It's like comparing apples to oranges.</p>
</body>
</html>
<?php

ob_end_flush();

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="output_callback" type="callback"  />
      <property ref="Image_64" />
      <property kind="parameter" name="erase" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="output_add_rewrite_var">
    <description><![CDATA[  This function rewrite the URLs and forms with the given variable.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
output_add_rewrite_var('var', 'value');

// a link
echo '<a href="file.php">link</a>';

// a form
echo '<form action="script.php" method="post">
<input type="text" name="var2" />
</form>';

print_r(ob_list_handlers());
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="output_reset_rewrite_vars">
    <description><![CDATA[ This function resets the URL rewriter and undo the changes made by   output_add_rewrite_var and/or by   session_start that are still in the buffer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
session_start();
output_add_rewrite_var('var', 'value');

echo '<a href="file.php">link</a>';
ob_flush();

output_reset_rewrite_vars();
echo '<a href="file.php">link</a>';
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
</group>
<group name="OvrimosSQL">
  <description><![CDATA[Ovrimos SQL Functions]]></description>
  <element kind="function" name="ovrimos_close">
    <description><![CDATA[   ovrimos_close is used to close the specified  connection to Ovrimos. This has the effect of rolling back uncommitted  transactions.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_5" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_commit">
    <description><![CDATA[   ovrimos_commit is used to commit the  transaction.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="connection_id" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_connect">
    <description><![CDATA[   ovrimos_connect is used to connect to the  specified database.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn = ovrimos_connect("server.domain.com", "8001", "admin", "password");
if ($conn != 0) {
    echo "Connection ok!";
    $res=ovrimos_exec($conn, "select table_id, table_name from sys.tables");
    if ($res != 0) {
        echo "Statement ok!";
        ovrimos_result_all($res);
        ovrimos_free_result($res);
    }
    ovrimos_close($conn);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_4" />
      <property ref="Firebird/InterBase_23" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_cursor">
    <description><![CDATA[   ovrimos_cursor returns the name of the  cursor. Useful when wishing to perform positioned updates or  deletes.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_exec">
    <description><![CDATA[   ovrimos_exec executes an SQL statement  (query or update) and returns a result_id or .  Evidently,  the SQL statement should not contain parameters.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="OvrimosSQL_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_execute">
    <description><![CDATA[   ovrimos_execute executes a prepared  statement.  If the prepared statement  contained parameters (question marks in the statement), the  correct number of parameters should be passed in an array. Notice  that I don't follow the PHP convention of placing just the name  of the optional parameter inside square brackets. I couldn't  bring myself on liking it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Informix_1" />
      <property ref="ODBC_10" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_fetch_into">
    <description><![CDATA[   ovrimos_fetch_into fetches a row from the  result set into result_array , which should  be passed by reference. Which row is fetched is determined by the  two last parameters. how is one of   (default), ,   , ,   , corresponding to forward direction from  current position, backward direction from current position,  forward direction from the start, backward direction from the end  and absolute position from the start (essentially equivalent to  'first' but needs 'rownumber'). Case is not  significant. rownumber is optional except for  absolute positioning.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn=ovrimos_connect("neptune", "8001", "admin", "password");
if ($conn!=0) {
    echo "Connection ok!";
    $res=ovrimos_exec($conn, "select table_id, table_name from sys.tables");
    if ($res != 0) {
        echo "Statement ok!";
        if (ovrimos_fetch_into($res, &$row)) {
            list($table_id, $table_name) = $row;
            echo "table_id=" . $table_id . ", table_name=" . $table_name . "\n";
            if (ovrimos_fetch_into($res, &$row)) {
                list($table_id, $table_name) = $row;
                echo "table_id=" . $table_id . ", table_name=" . $table_name . "\n";
            } else {
                echo "Next: error\n";
            }
        } else {
            echo "First: error\n";
        }
        ovrimos_free_result($res);
    }
    ovrimos_close($conn);
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Informix_1" />
      <property ref="ODBC_12" />
      <property kind="parameter" name="how" type="string"  />
      <property ref="ODBC_11" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_fetch_row">
    <description><![CDATA[   ovrimos_fetch_row fetches a row from the  result set. Column values should be retrieved with other  calls.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn = ovrimos_connect("remote.host", "8001", "admin", "password");
if ($conn != 0) {
    echo "Connection ok!";
    $res=ovrimos_exec($conn, "select table_id, table_name from sys.tables");
    if ($res != 0) {
        echo "Statement ok!";
        if (ovrimos_fetch_row($res, "First")) {
            $table_id = ovrimos_result($res, 1);
            $table_name = ovrimos_result($res, 2);
            echo "table_id=" . $table_id . ", table_name=" . $table_name . "\n";
            if (ovrimos_fetch_row($res, "Next")) {
                $table_id = ovrimos_result($res, "table_id");
                $table_name = ovrimos_result($res, "table_name");
                echo "table_id=" . $table_id . ", table_name=" . $table_name . "\n";
            } else {
                echo "Next: error\n";
            }
        } else {
            echo "First: error\n";
        }
        ovrimos_free_result($res);
    }
    ovrimos_close($conn);
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Informix_1" />
      <property kind="parameter" name="how" type="int"  />
      <property ref="ODBC_13" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_field_len">
    <description><![CDATA[   ovrimos_field_len is used to get the length  of the output column with number field_number  (1-based), in result result_id .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_field_name">
    <description><![CDATA[   ovrimos_field_name returns the output column  name at the (1-based) index specified.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Informix_1" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_field_num">
    <description><![CDATA[   ovrimos_field_num returns the (1-based)  index of the output column specified by field_name ,  or .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
      <property ref="FDF_21" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_field_type">
    <description><![CDATA[   ovrimos_field_type returns the (numeric)  type of the output column at the (1-based) index specified by   field_number .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_free_result">
    <description><![CDATA[   ovrimos_free_result frees the specified   result_id . Returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_longreadlen">
    <description><![CDATA[   ovrimos_longreadlen specifies how many bytes  are to be retrieved from long datatypes (long varchar and long  varbinary). Default is zero. It currently sets this parameter  the specified result set. Returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Informix_1" />
      <property ref="Filesystem_19" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_num_fields">
    <description><![CDATA[   ovrimos_num_fields returns the number of  columns in a result_id resulting from a query.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_num_rows">
    <description><![CDATA[   ovrimos_num_rows returns the number of rows  affected by update operations.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Informix_1" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_prepare">
    <description><![CDATA[   ovrimos_prepare prepares an SQL statement  and returns a result_id (or on failure).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn=ovrimos_connect("db_host", "8001", "admin", "password");
if ($conn!=0) {
    echo "Connection ok!";
    $res=ovrimos_prepare($conn, "select table_id, table_name 
                                  from sys.tables where table_id=1");
    if ($res != 0) {
        echo "Prepare ok!";
        if (ovrimos_execute($res)) {
            echo "Execute ok!\n";
            ovrimos_result_all($res);
        } else {
            echo "Execute not ok!";
        }
        ovrimos_free_result($res);
    } else {
        echo "Prepare not ok!\n";
    }
    ovrimos_close($conn);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="OvrimosSQL_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_result">
    <description><![CDATA[   ovrimos_result retrieves the output column  specified by field , either as a string or  as an 1-based index. Returns on failure.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Informix_1" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_result_all">
    <description><![CDATA[   ovrimos_result_all prints the whole result  set as an HTML table. Returns the number of rows in the generated  table.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn = ovrimos_connect("db_host", "8001", "admin", "password");
if ($conn != 0) {
    echo "Connection ok!";
    $res = ovrimos_prepare($conn, "select table_id, table_name 
                                    from sys.tables where table_id = 7");
    if ($res != 0) {
        echo "Prepare ok!";
        if (ovrimos_execute($res, array(3))) {
            echo "Execute ok!\n";
            ovrimos_result_all($res);
        } else {
            echo "Execute not ok!";
        }
        ovrimos_free_result($res);
    } else {
        echo "Prepare not ok!\n";
    }
    ovrimos_close($conn);
}
?>

      

<?php
$conn = ovrimos_connect("db_host", "8001", "admin", "password");
if ($conn != 0) {
    echo "Connection ok!";
    $res = ovrimos_exec($conn, "select table_id, table_name 
                                 from sys.tables where table_id = 1");
    if ($res != 0) {
        echo "Statement ok! cursor=" . ovrimos_cursor($res) . "\n";
        $colnb = ovrimos_num_fields($res);
        echo "Output columns=" . $colnb . "\n";
        for ($i=1; $i <= $colnb; $i++) {
            $name = ovrimos_field_name($res, $i);
            $type = ovrimos_field_type($res, $i);
            $len = ovrimos_field_len($res, $i);  
            echo "Column " . $i . " name=" . $name . " type=" . $type . " len=" . $len . "\n";
        }
        ovrimos_result_all($res);
        ovrimos_free_result($res);
    }
    ovrimos_close($conn);
}
?>

      

<?php
$conn = ovrimos_connect("db_host", "8001", "admin", "password");
if ($conn != 0) {
    echo "Connection ok!";
    $res = ovrimos_exec($conn, "update test set i=5");
    if ($res != 0) {
        echo "Statement ok!";
        echo ovrimos_num_rows($res)." rows affected\n";
        ovrimos_free_result($res);
    }
    ovrimos_close($conn);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Informix_1" />
      <property ref="ODBC_23" />
    </properties>
    
  </element>
  <element kind="function" name="ovrimos_rollback">
    <description><![CDATA[   ovrimos_rollback is used to roll back the  transaction.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="OvrimosSQL_1" />
    </properties>
    
  </element>
</group>
<group name="PCNTL">
  <description><![CDATA[Process Control Functions]]></description>
  <element kind="function" name="pcntl_alarm">
    <description><![CDATA[  The pcntl_alarm function creates a timer that will  send a signal to the process after   seconds seconds.  If seconds  is zero, no new alarm is created.  Any call to pcntl_alarm  will cancel any previously set alarm.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCAL_28" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_exec">
    <description><![CDATA[   pcntl_exec executes the program   path with arguments args .   path must be the path to a binary executable or a  script with a valid path pointing to an executable in the shebang (  #!/usr/local/bin/perl for example) as the first line.  See your system's  man execve(2) page for additional information.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Directories_3" />
      <property kind="parameter" name="args" type="array"  />
      <property kind="parameter" name="envs" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_fork">
    <description><![CDATA[  The pcntl_fork function creates a child  process that differs from the parent process only in its PID and  PPID. Please see your system's fork(2) man page for specific details as to  how fork works on your system.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$pid = pcntl_fork();
if ($pid == -1) {
     die('could not fork');
} else if ($pid) {
     // we are the parent
     pcntl_wait($status); //Protect against Zombie children
} else {
     // we are the child
}

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_getpriority">
    <description><![CDATA[   pcntl_getpriority gets the priority of   pid .  If pid is not  specified, the pid of the current process is used.  Because priority  levels can differ between system types and kernel versions, please see  your system's getpriority(2) man page for specific details.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="pid" type="int"  />
      <property kind="parameter" name="process_identifier" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_setpriority">
    <description><![CDATA[   pcntl_setpriority sets the priority of   pid to priority .  If   pid is not specified, the pid of the current  process is used.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Network_13" />
      <property ref="PCNTL_3" />
      <property ref="PCNTL_4" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_signal">
    <description><![CDATA[  The pcntl_signal function installs a new  signal handler for the signal indicated by   signo .  The signal handler is set to   handler which may be the name of a user  created function, or either of the two global constants SIG_IGN  or SIG_DFL.  The optional restart_syscalls   specifies whether system call restarting should be used when this  signal arrives and defaults to .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// tick use required as of PHP 4.3.0
declare(ticks = 1);

// signal handler function
function sig_handler($signo) 
{

     switch ($signo) {
         case SIGTERM:
             // handle shutdown tasks
             exit;
             break;
         case SIGHUP:
             // handle restart tasks
             break;
         case SIGUSR1:
             echo "Caught SIGUSR1...\n";
             break;
         default:
             // handle all other signals
     }

}

echo "Installing signal handler...\n";

// setup signal handlers
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP,  "sig_handler");
pcntl_signal(SIGUSR1, "sig_handler");

// or use an object, available as of PHP 4.3.0
// pcntl_signal(SIGUSR1, array($obj, "do_something");

echo"Generating signal SIGTERM to self...\n";

// send SIGUSR1 to current process id
posix_kill(posix_getpid(), SIGUSR1);

echo "Done\n"

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="signo" type="int" required="1" />
      <property kind="parameter" name="handle" type="callback" required="1" />
      <property kind="parameter" name="restart_syscalls" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_wait">
    <description><![CDATA[  The wait function suspends execution of the current process until a  child has exited, or until a signal is delivered whose action is to  terminate the current process or to call a signal handling function.  If a  child has already exited by the time of the call (a so-called "zombie"  process), the function returns immediately.  Any system resources used by  the child are freed.  Please see your system's wait(2) man page for  specific details as to how wait works on your system.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Misc._3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_waitpid">
    <description><![CDATA[  The pcntl_waitpid function suspends execution  of the current process until a child as specified by the   pid argument has exited, or until a signal  is delivered whose action is to terminate the current process or  to call a signal handling function.  If a child as requested by   pid has already exited by the time of the  call (a so-called "zombie" process), the function returns  immediately.  Any system resources used by the child are  freed. Please see your system's waitpid(2) man page for specific  details as to how waitpid works on your system.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="pid" type="int" required="1" />
      <property ref="Misc._3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_wexitstatus">
    <description><![CDATA[  Returns the return code of a terminated child.  This function is  only useful if pcntl_wifexited returned   .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_wifexited">
    <description><![CDATA[  Returns if the child status code represents a successful  exit.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_wifsignaled">
    <description><![CDATA[  Returns if the child process exited because of a signal  which was not caught.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_wifstopped">
    <description><![CDATA[  Returns if the child process which caused the return is  currently stopped; this is only possible if the call to   pcntl_waitpid was done using the option   .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_wstopsig">
    <description><![CDATA[  Returns the number of the signal which caused the child to stop.  This function is only useful if   pcntl_wifstopped returned .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
  <element kind="function" name="pcntl_wtermsig">
    <description><![CDATA[  Returns the number of the signal that caused the child process to  terminate. This function is only useful if   pcntl_wifsignaled returned .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
</group>
<group name="PCRE">
  <description><![CDATA[Regular Expression Functions (Perl-Compatible)]]></description>
  <element kind="function" name="preg_grep">
    <description><![CDATA[   preg_grep returns the array consisting of  the elements of the input array that match  the given pattern .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// return all array elements
// containing floating point numbers
$fl_array = preg_grep("/^(\d+)?\.\d+$/", $array);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Filesystem_15" />
      <property ref="Arrays_2" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="preg_match">
    <description><![CDATA[  Searches subject for a match to the regular  expression given in pattern .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// The "i" after the pattern delimiter indicates a case-insensitive search
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

      

<?php
/* The \b in the pattern indicates a word boundary, so only the distinct
 * word "web" is matched, and not a word partial like "webbing" or "cobweb" */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}

if (preg_match("/\bweb\b/i", "PHP is the website scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

      

<?php
// get host name from URL
preg_match("/^(http:\/\/)?([^\/]+)/i",
    "http://www.php.net/index.html", $matches);
$host = $matches[2];

// get last two segments of host name
preg_match("/[^\.\/]+\.[^\.\/]+$/", $host, $matches);
echo "domain name is: {$matches[0]}\n";
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Filesystem_15" />
      <property ref="ClibPDF_62" />
      <property kind="parameter" name="matches" type="array"  />
      <property ref="COM_29" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="preg_match_all">
    <description><![CDATA[  Searches subject for all matches to the regular  expression given in pattern and puts them in   matches in the order specified by   flags .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
preg_match_all("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
                "Call 555-1212 or 1-800-555-1212", $phones);
?>

      

<?php
// The \\2 is an example of backreferencing. This tells pcre that
// it must match the second set of parentheses in the regular expression
// itself, which would be the ([\w]+) in this case. The extra backslash is 
// required because the string is in double quotes.
$html = "<b>bold text</b><a href=howdy.html>click me</a>";

preg_match_all("/(<([\w]+)[^>]*>)(.*)(<\/\\2>)/", $html, $matches);

for ($i=0; $i< count($matches[0]); $i++) {
  echo "matched: " . $matches[0][$i] . "\n";
  echo "part 1: " . $matches[1][$i] . "\n";
  echo "part 2: " . $matches[3][$i] . "\n";
  echo "part 3: " . $matches[4][$i] . "\n\n";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Filesystem_15" />
      <property ref="ClibPDF_62" />
      <property kind="parameter" name="matches" type="array" required="1" />
      <property ref="COM_29" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="preg_quote">
    <description><![CDATA[   preg_quote takes str  and puts a backslash in front of every character that is part of  the regular expression syntax.  This is useful if you have a  run-time string that you need to match in some text and the  string may contain special regex characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$keywords = "$40 for a g3/400";
$keywords = preg_quote($keywords, "/");
echo $keywords; // returns \$40 for a g3\/400
?>

      

<?php
// In this example, preg_quote($word) is used to keep the
// asterisks from having special meaning to the regular
// expression.

$textbody = "This book is *very* difficult to find.";
$word = "*very*";
$textbody = preg_replace ("/" . preg_quote($word) . "/",
                          "<i>" . $word . "</i>",
                          $textbody);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="APD_3" />
    </properties>
    
  </element>
  <element kind="function" name="preg_replace">
    <description><![CDATA[  Searches subject for matches to   pattern and replaces them with   replacement . If   limit is specified, then only   limit matches will be replaced; if   limit is omitted or is -1, then all  matches are replaced.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = "April 15, 2003";
$pattern = "/(\w+) (\d+), (\d+)/i";
$replacement = "\${1}1,\$3";
echo preg_replace($pattern, $replacement, $string);
?>

      

<?php
$string = "The quick brown fox jumped over the lazy dog.";

$patterns[0] = "/quick/";
$patterns[1] = "/brown/";
$patterns[2] = "/fox/";

$replacements[2] = "bear";
$replacements[1] = "black";
$replacements[0] = "slow";

echo preg_replace($patterns, $replacements, $string);
?>

      

<?php

ksort($patterns);
ksort($replacements);

echo preg_replace($patterns, $replacements, $string);

?>

      

<?php
$patterns = array ("/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/",
                   "/^\s*{(\w+)}\s*=/");
$replace = array ("\\3/\\4/\\1\\2", "$\\1 =");
echo preg_replace($patterns, $replace, "{startDate} = 1999-5-27");
?>

      

<?php
preg_replace("/(<\/?)(\w+)([^>]*>)/e", 
              "'\\1'.strtoupper('\\2').'\\3'", 
              $html_body);
?>

      

<?php
// $document should contain an HTML document.
// This will remove HTML tags, javascript sections
// and white space. It will also convert some
// common HTML entities to their text equivalent.

$search = array ("'<script[^>]*?>.*?</script>'si",  // Strip out javascript
                 "'<[\/\!]*?[^<>]*?>'si",           // Strip out HTML tags
                 "'([\r\n])[\s]+'",                 // Strip out white space
                 "'&(quot|#34);'i",                 // Replace HTML entities
                 "'&(amp|#38);'i",
                 "'&(lt|#60);'i",
                 "'&(gt|#62);'i",
                 "'&(nbsp|#160);'i",
                 "'&(iexcl|#161);'i",
                 "'&(cent|#162);'i",
                 "'&(pound|#163);'i",
                 "'&(copy|#169);'i",
                 "'&#(\d+);'e");                    // evaluate as php

$replace = array ("",
                  "",
                  "\\1",
                  "\"",
                  "&",
                  "<",
                  ">",
                  " ",
                  chr(161),
                  chr(162),
                  chr(163),
                  chr(169),
                  "chr(\\1)");

$text = preg_replace($search, $replace, $document);
?>

      

<?php
$str = 'foo   o';
$str = preg_replace('/\s\s+/', ' ', $str);

// This will be 'foo o' now
echo $str;
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="pattern" type="mixed" required="1" />
      <property kind="parameter" name="replacement" type="mixed" required="1" />
      <property kind="parameter" name="subject" type="mixed" required="1" />
      <property ref="Multibyte String_21" />
    </properties>
    
  </element>
  <element kind="function" name="preg_replace_callback">
    <description><![CDATA[  The behavior of this function is almost identical to   preg_replace , except for the fact that instead of   replacement parameter, one should specify a   callback that will be called and passed an array of  matched elements in the subject string. The callback should return the  replacement string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  // this text was used in 2002
  // we want to get this up to date for 2003
  $text = "April fools day is 04/01/2002\n";
  $text.= "Last christmas was 12/24/2001\n";

  // the callback function
  function next_year($matches) 
  {
    // as usual: $matches[0] is the complete match
    // $matches[1] the match for the first subpattern
    // enclosed in '(...)' and so on
    return $matches[1].($matches[2]+1);
  }

  echo preg_replace_callback(
              "|(\d{2}/\d{2}/)(\d{4})|",
              "next_year",
              $text);

  // result is:
  // April fools day is 04/01/2003
  // Last christmas was 12/24/2002
?>

     

<?php
  /* a unix-style command line filter to convert uppercase
   * letters at the beginning of paragraphs to lowercase */

  $fp = fopen("php://stdin", "r") or die("can't read stdin");
  while (!feof($fp)) {
      $line = fgets($fp);
      $line = preg_replace_callback(
          '|<p>\s*\w|',
          create_function(
              // single quotes are essential here,
              // or alternative escape all $ as \$
              '$matches',
              'return strtolower($matches[0]);'
          ),
          $line
      );
      echo $line;
  }
  fclose($fp);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="PCRE_3" />
      <property ref="Arrays_21" />
      <property ref="PCRE_5" />
      <property ref="Multibyte String_21" />
    </properties>
    
  </element>
  <element kind="function" name="preg_split">
    <description><![CDATA[  Returns an array containing substrings of   subject split along boundaries matched by   pattern .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// split the phrase by any number of commas or space characters,
// which include " ", \r, \t, \n and \f
$keywords = preg_split("/[\s,]+/", "hypertext language, programming");
?>

      

<?php
$str = 'string';
$chars = preg_split('//', $str, -1, PREG_SPLIT_NO_EMPTY);
print_r($chars);
?>

      

<?php
$str = 'hypertext language programming';
$chars = preg_split('/ /', $str, -1, PREG_SPLIT_OFFSET_CAPTURE);
print_r($chars);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Filesystem_15" />
      <property ref="ClibPDF_62" />
      <property ref="Multibyte String_21" />
      <property ref="COM_29" />
    </properties>
    
  </element>
</group>
<group name="PDF">
  <description><![CDATA[PDF functions ]]></description>
  <element kind="function" name="pdf_add_bookmark">
    <description><![CDATA[  Add a nested bookmark under parent , or a new top-level  bookmark if parent = 0. Returns a bookmark descriptor  which may be used as parent for subsequent nested bookmarks.  If open = 1, child bookmarks will be folded out, and  invisible if open = 0.  Parameters parent and open  were optional before PHP 5.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// create a new PDF

$pdf = pdf_new();
pdf_open_file($pdf);
pdf_set_info($pdf, "Author", "Bob Nijman");

// begin a new page
pdf_begin_page($pdf, 300, 300);

// add a top-level bookmark
$bookmark = pdf_add_bookmark($pdf, "People");

// add a nested bookmark
pdf_add_bookmark($pdf, "Rasmus", $bookmark);

// and some text
pdf_set_font($pdf, "Helvetica", 20, "host");
$text = "This is R's page";
$width = pdf_stringwidth($pdf, $text);
pdf_set_text_pos($pdf, (300-$width)/2, 100);
pdf_show($pdf, $text);

// close the page and the PDF
pdf_end_page($pdf); 
pdf_close($pdf);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="pdfdoc" type="resource" required="1" />
      <property ref="ClibPDF_12" />
      <property kind="parameter" name="parent" type="int" required="1" />
      <property ref="ClibPDF_10" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_add_launchlink">
    <description><![CDATA[  Adds a link to a web resource specified by filename .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_2" />
      <property ref="ClibPDF_3" />
      <property ref="ClibPDF_4" />
      <property ref="ClibPDF_5" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_add_locallink">
    <description><![CDATA[  Add a link annotation to a target within the current PDF file.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="lowerleftx" type="float" required="1" />
      <property kind="parameter" name="lowerlefty" type="float" required="1" />
      <property kind="parameter" name="upperrightx" type="float" required="1" />
      <property kind="parameter" name="upperrighty" type="float" required="1" />
      <property kind="parameter" name="page" type="int" required="1" />
      <property ref="Filesystem_4" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_add_note">
    <description><![CDATA[  Sets an annotation for the current page. icon is one of   , , ,   , ,   , or .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_2" />
      <property ref="ClibPDF_3" />
      <property ref="ClibPDF_4" />
      <property ref="ClibPDF_5" />
      <property ref="Multibyte String_17" />
      <property ref="ClibPDF_6" />
      <property kind="parameter" name="icon" type="string" required="1" />
      <property ref="ClibPDF_10" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_add_pdflink">
    <description><![CDATA[  Add a file link annotation (to a PDF target).    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="bottom_left_x" type="float" required="1" />
      <property kind="parameter" name="bottom_left_y" type="float" required="1" />
      <property kind="parameter" name="up_right_x" type="float" required="1" />
      <property kind="parameter" name="up_right_y" type="float" required="1" />
      <property ref="Apache_3" />
      <property ref="PDF_7" />
      <property ref="Filesystem_4" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_add_thumbnail">
    <description><![CDATA[  Adds an existing image as thumbnail for the current page.  Thumbnail images must not be wider or higher than 106 pixels.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_42" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_add_weblink">
    <description><![CDATA[  Add a weblink annotation to a target url on the Web.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="PDF_3" />
      <property ref="PDF_4" />
      <property ref="PDF_5" />
      <property ref="PDF_6" />
      <property ref="ClibPDF_47" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_arc">
    <description><![CDATA[  Add a counterclockwise circular arc from   alpha to beta degrees  with center ( x ; y )  and radius r . Actual drawing of the circle is performed by  the next stroke or fill operation.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// prepare document
$pdf = pdf_new();
pdf_open_file($pdf, "");
pdf_begin_page($pdf, 595, 842);

// an outlined arc
pdf_arc($pdf, 200, 700, 100, 0, 90);
pdf_stroke($pdf);

// a filled arc
pdf_arc($pdf, 200, 700, 50, 0, 90);
pdf_fill($pdf);

// an outlined and filled arc
pdf_setcolor($pdf, "fill", "gray", 0.8);
pdf_arc($pdf, 400, 700, 50, 0, 90);
pdf_fill_stroke($pdf);

// finish document
pdf_end_page($pdf);
pdf_close($pdf);

header("Content-type: application/pdf");
echo pdf_get_buffer($pdf);

pdf_delete($pdf);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property kind="parameter" name="r" type="float" required="1" />
      <property kind="parameter" name="alpha" type="float" required="1" />
      <property kind="parameter" name="beta" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_arcn">
    <description><![CDATA[  Add a clockwise circular arc from   alpha to beta degrees  with center ( x ; y )  and radius r . Actual drawing of the circle is performed by  the next stroke or fill operation.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// prepare document
$pdf = pdf_new();
pdf_open_file($pdf, "");
pdf_begin_page($pdf, 595, 842);

// an outlined arcn
pdf_arcn($pdf, 200, 700, 100, 0, 90);
pdf_stroke($pdf);

// a filled arcn
pdf_arcn($pdf, 200, 700, 50, 0, 90);
pdf_fill($pdf);

// an outlined and filled arcn
pdf_setcolor($pdf, "fill", "gray", 0.8);
pdf_arcn($pdf, 400, 700, 50, 0, 90);
pdf_fill_stroke($pdf);

// finish document
pdf_end_page($pdf);
pdf_close($pdf);

header("Content-type: application/pdf");
echo pdf_get_buffer($pdf);

pdf_delete($pdf);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property ref="PDF_13" />
      <property ref="PDF_14" />
      <property ref="PDF_15" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_attach_file">
    <description><![CDATA[  Add a file attachment annotation. icon is one of   , ,   , or .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_2" />
      <property ref="ClibPDF_3" />
      <property ref="ClibPDF_4" />
      <property ref="ClibPDF_5" />
      <property ref="Apache_3" />
      <property ref="MCAL_13" />
      <property kind="parameter" name="author" type="string" required="1" />
      <property ref="Hyperwave API_4" />
      <property ref="PDF_8" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_begin_page">
    <description><![CDATA[  Add a new page to the document.  The width and height are  specified in points, which are 1/72 of an inch.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_begin_pattern">
    <description><![CDATA[  Starts a new pattern definition and returns a pattern handle.   width , and height  define the bounding box for the pattern. xstep  and ystep give the repeated pattern offsets.   painttype =1 means that the pattern has its  own colour settings whereas a value of 2 indicates that the current  colour is used when the pattern is applied.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
      <property kind="parameter" name="xstep" type="float" required="1" />
      <property kind="parameter" name="ystep" type="float" required="1" />
      <property kind="parameter" name="painttype" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_begin_template">
    <description><![CDATA[  Start a new template definition.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_circle">
    <description><![CDATA[  Add a circle with center ( x ,   y ) and radius r   to the current page. Actual drawing of the circle is performed by  the next stroke or fill operation.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// prepare document
$pdf = pdf_new();
pdf_open_file($pdf, "");
pdf_begin_page($pdf, 595, 842);

// an outlined circle
pdf_circle($pdf, 200, 700, 100);
pdf_stroke($pdf);

// a filled circle
pdf_circle($pdf, 200, 700, 50);
pdf_fill($pdf);

// an outlined and filled circle
pdf_setcolor($pdf, "fill", "gray", 0.3);
pdf_circle($pdf, 400, 700, 50);
pdf_fill_stroke($pdf);

// finish document
pdf_end_page($pdf);
pdf_close($pdf);

header("Content-type: application/pdf");
echo pdf_get_buffer($pdf);

pdf_delete($pdf);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property ref="PDF_13" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_clip">
    <description><![CDATA[  Use the current path as clipping path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_close">
    <description><![CDATA[  Close the generated PDF file, and free all document-related resources.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_close_image">
    <description><![CDATA[  Close an image retrieved with the   pdf_open_image function.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_42" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_close_pdi">
    <description><![CDATA[  Close all open page handles, and close the input PDF document.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="dochandle" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_close_pdi_page">
    <description><![CDATA[  Close the page handle, and free all page-related resources.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="pagehandle" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_closepath">
    <description><![CDATA[  Close the current path.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_closepath_fill_stroke">
    <description><![CDATA[  Close the path, fill, and stroke it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_closepath_stroke">
    <description><![CDATA[  Close the path, and stroke it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_concat">
    <description><![CDATA[  Concatenate a matrix to the CTM.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="a" type="float" required="1" />
      <property kind="parameter" name="b" type="float" required="1" />
      <property kind="parameter" name="c" type="float" required="1" />
      <property kind="parameter" name="d" type="float" required="1" />
      <property kind="parameter" name="e" type="float" required="1" />
      <property kind="parameter" name="f" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_continue_text">
    <description><![CDATA[  Print text at the next line.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_curveto">
    <description><![CDATA[  Draw a Bezier curve from the current point, using 3 more control points.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_18" />
      <property ref="ClibPDF_19" />
      <property ref="ClibPDF_20" />
      <property ref="ClibPDF_21" />
      <property ref="ClibPDF_22" />
      <property ref="ClibPDF_23" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_delete">
    <description><![CDATA[  Delete the PDF resource, and free all internal resources.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_end_page">
    <description><![CDATA[  Finish the page.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_end_pattern">
    <description><![CDATA[  Finish the pattern definition.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_end_template">
    <description><![CDATA[  Finish the template definition.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_fill">
    <description><![CDATA[  Fill the interior of the path with the current fill color.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_fill_stroke">
    <description><![CDATA[  Fill and stroke the path with the current fill and stroke color.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_findfont">
    <description><![CDATA[  Prepare a font for later use with pdf_setfont .  The metrics will be loaded, and if embed is  nonzero, the font file will be checked, but not yet used.   encoding is one of ,   , ,   , a user-defined encoding name or the name of  a CMap.  Parameter embed was optional before PHP 5.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$font = pdf_findfont($pdf, "Times New Roman", "winansi", 1);
if ($font) {
    pdf_setfont($pdf, $font, 10);
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property kind="parameter" name="fontname" type="string" required="1" />
      <property ref="ClibPDF_52" />
      <property kind="parameter" name="embed" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_get_buffer">
    <description><![CDATA[  Get the contents of the PDF output buffer. The result must be  used by the client before calling any other PDFlib function.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_get_majorversion">
    <description><![CDATA[  Returns the major version number of the PDFlib.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_get_minorversion">
    <description><![CDATA[  Returns the minor version number of the PDFlib.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_get_parameter">
    <description><![CDATA[  Get the contents of some PDFlib parameter with string type.  Parameter modifier was optional before PHP 5.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="PDF_1" />
      <property ref="DB++_11" />
      <property kind="parameter" name="modifier" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_get_pdi_parameter">
    <description><![CDATA[  Get the contents of some PDI document parameter  with string type.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="PDF_1" />
      <property ref="DB++_11" />
      <property kind="parameter" name="document" type="int" required="1" />
      <property ref="PDF_7" />
      <property ref="DOM_24" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_get_pdi_value">
    <description><![CDATA[  Get the contents of some PDI document parameter with numerical type.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="PDF_1" />
      <property ref="DB++_11" />
      <property kind="parameter" name="doc" type="int" required="1" />
      <property ref="PDF_7" />
      <property ref="DOM_24" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_get_value">
    <description><![CDATA[  Get the contents of some PDFlib parameter with float type.  Parameter modifier was optional before PHP 5.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="PDF_1" />
      <property ref="DB++_11" />
      <property ref="PDF_30" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_initgraphics">
    <description><![CDATA[  Reset all implicit color and graphics state parameters to their defaults.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_lineto">
    <description><![CDATA[  Draw a line from the current point to ( x ,   y ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_makespotcolor">
    <description><![CDATA[  Make a named spot color from the current color.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="spotname" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_moveto">
    <description><![CDATA[  Set the current point to ( x , y .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_new">
    <description><![CDATA[  Create a new PDF resource, using default error handling  and memory management.  ]]></description>
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_open_ccitt">
    <description><![CDATA[  Open a raw CCITT image.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="Apache_3" />
      <property ref="Image_44" />
      <property ref="Image_45" />
      <property kind="parameter" name="BitReverse" type="int" required="1" />
      <property kind="parameter" name="k" type="int" required="1" />
      <property kind="parameter" name="Blackls1" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_open_file">
    <description><![CDATA[  Create a new PDF file using the supplied file name.  If filename is empty the PDF document  will be generated in memory instead of on file. The result  must be fetched by the client with the   pdf_get_buffer function.  Parameter filename was optional before PHP 5.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$pdf = pdf_new();

pdf_open_file($pdf);
pdf_begin_page($pdf, 595, 842);
pdf_set_font($pdf, "Times-Roman", 30, "host");
pdf_set_value($pdf, "textrendering", 1);
pdf_show_xy($pdf, "A PDF document created in memory!", 50, 750);
pdf_end_page($pdf);
pdf_close($pdf);

$data = pdf_get_buffer($pdf);

header("Content-type: application/pdf");
header("Content-disposition: inline; filename=test.pdf");
header("Content-length: " . strlen($data));

echo $data;

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_open_image">
    <description><![CDATA[  Use image data from a variety of data sources. Supported types are   , , .  Supported sources are , ,   . len is only used when type is   , params is only used when type  is .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property kind="parameter" name="imagetype" type="string" required="1" />
      <property ref="Bzip2_2" />
      <property ref="Bzip2_7" />
      <property ref="Filesystem_19" />
      <property ref="Image_44" />
      <property ref="Image_45" />
      <property kind="parameter" name="components" type="int" required="1" />
      <property kind="parameter" name="bpc" type="int" required="1" />
      <property ref="IRC Gateway_5" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_open_image_file">
    <description><![CDATA[  Open an image file. Supported types are ,   , , and .   stringparam is either empty,   , , or   .   intparam is either 0, the image id  of the applied mask, or the page.  Parameters stringparam and   intparam were optional before PHP 5.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="PDF_37" />
      <property ref="Apache_3" />
      <property kind="parameter" name="stringparam" type="string" required="1" />
      <property kind="parameter" name="intparam" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_open_memory_image">
    <description><![CDATA[  The pdf_open_memory_image function takes  an image created with the PHP's image  functions and makes it available for the pdf resource.  The function returns a pdf image identifier.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$im = imagecreate(100, 100);
$col = imagecolorallocate($im, 80, 45, 190);
imagefill($im, 10, 10, $col);
$pim = pdf_open_memory_image($pdf, $im);
imagedestroy($im);
pdf_place_image($pdf, $pim, 100, 100, 1);
pdf_close_image($pdf, $pim);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="Image_2" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_open_pdi">
    <description><![CDATA[  Opens an existing PDF document and prepares it for later use.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="Apache_3" />
      <property ref="PDF_40" />
      <property ref="PDF_41" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_open_pdi_page">
    <description><![CDATA[  Prepare a page for later use with pdf_place_image  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="PDF_20" />
      <property kind="parameter" name="pagenumber" type="int" required="1" />
      <property kind="parameter" name="pagelabel" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_place_image">
    <description><![CDATA[  Place an image with the lower left corner at ( x ,   y ), and scale it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_42" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property ref="ClibPDF_55" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_place_pdi_page">
    <description><![CDATA[  Place a PDI page with the lower left corner at ( x ,   y ), and scale it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="PDF_7" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property kind="parameter" name="sx" type="float" required="1" />
      <property kind="parameter" name="sy" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_rect">
    <description><![CDATA[  Draw a ( width * height )  rectangle at lower left ( x , y ).    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_restore">
    <description><![CDATA[  Restore the most recently saved graphics state.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_rotate">
    <description><![CDATA[  Rotate the coordinate system by phi degrees.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="phi" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_save">
    <description><![CDATA[  Save the current graphics state.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_scale">
    <description><![CDATA[  Scale the coordinate system.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_34" />
      <property ref="ClibPDF_35" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_set_border_color">
    <description><![CDATA[  Set the border color for all kinds of annotations.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="red" type="float" required="1" />
      <property kind="parameter" name="green" type="float" required="1" />
      <property kind="parameter" name="blue" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_set_border_dash">
    <description><![CDATA[  Sets the border dash style for all kinds of annotations.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_68" />
      <property ref="ClibPDF_67" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_set_border_style">
    <description><![CDATA[  Sets the border style for all kinds of annotations.   style is solid or   dashed .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="style" type="string" required="1" />
      <property ref="ClibPDF_32" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_set_info">
    <description><![CDATA[  Fill document information field key with   value .   key is one of ,   , ,   , ,  or a user-defined key.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="DB++_11" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_set_parameter">
    <description><![CDATA[  Sets some PDFlib parameters with string type.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="DB++_11" />
      <property ref="Apache_6" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_set_text_pos">
    <description><![CDATA[  Set the text output position specified by x and   y .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_set_value">
    <description><![CDATA[  Set the value of some PDFlib parameter with float type.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="DB++_11" />
      <property ref="ClibPDF_65" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setcolor">
    <description><![CDATA[  Set the current color space and color.  The parameter type can be ,   or to specify that the  color is set for filling, stroking or both filling and stroking.  The parameter colorspace can be   , ,   , or   .  The parameters c1 ,   c2 , c3 and   c4 represent the color components for the color  space specified by colorspace . Except as  otherwise noted, the color components are floating-point values that  range from 0 to 1.  Parameters c2 , c3 and   c4 were optional before PHP 5.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="CCVS_5" />
      <property kind="parameter" name="colorspace" type="string" required="1" />
      <property kind="parameter" name="c1" type="float" required="1" />
      <property kind="parameter" name="c2" type="float" required="1" />
      <property kind="parameter" name="c3" type="float" required="1" />
      <property kind="parameter" name="c4" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setdash">
    <description><![CDATA[  Set the current dash pattern to b black  and w white units.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="PDF_23" />
      <property kind="parameter" name="w" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setflat">
    <description><![CDATA[  Sets the flatness to a value between 0 and 100 inclusive.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="flatness" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setfont">
    <description><![CDATA[  Set the current font in the given size , using a   font handle returned by pdf_findfont .    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="Image_16" />
      <property ref="ClibPDF_51" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setgray">
    <description><![CDATA[  Set the current fill and stroke color.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="gray" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setgray_fill">
    <description><![CDATA[  Set the current fill color to a gray value between 0 and 1 inclusive.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="PDF_58" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setgray_stroke">
    <description><![CDATA[  Set the current stroke color to a gray value  between 0 and 1 inclusive.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="PDF_58" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setlinecap">
    <description><![CDATA[  Set the linecap parameter to a value between 0 and 2 inclusive.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PDF_1" />
      <property kind="parameter" name="linecap" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setlinejoin">
    <description><![CDATA[  Sets the line join parameter to a value between  0 and 2 inclusive.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_70" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setlinewidth">
    <description><![CDATA[  Sets the current linewidth to width .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_32" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setmatrix">
    <description><![CDATA[  Explicitly set the current transformation matrix.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="PDF_22" />
      <property ref="PDF_23" />
      <property ref="PDF_24" />
      <property ref="PDF_25" />
      <property ref="PDF_26" />
      <property ref="PDF_27" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setmiterlimit">
    <description><![CDATA[  Set the miter limit to a value greater than or equal to 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="miter" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setrgbcolor">
    <description><![CDATA[  Set the current fill and stroke color to the supplied RGB values.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_71" />
      <property ref="ClibPDF_72" />
      <property ref="ClibPDF_73" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setrgbcolor_fill">
    <description><![CDATA[  Set the current fill color to the supplied RGB values.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_71" />
      <property ref="ClibPDF_72" />
      <property ref="ClibPDF_73" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_setrgbcolor_stroke">
    <description><![CDATA[  Set the current stroke color to the supplied RGB values.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_71" />
      <property ref="ClibPDF_72" />
      <property ref="ClibPDF_73" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_show">
    <description><![CDATA[  Print text in the current font and size at  the current position.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_show_boxed">
    <description><![CDATA[  Format text in the current font and size into the  supplied text box according to the requested formatting   mode , which must be one of ,   , ,  or .  If width and height are 0,  only a single line is placed at the point ( left ,   top ) in the requested mode .  Parameter feature was optional before PHP 5.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_12" />
      <property kind="parameter" name="left" type="float" required="1" />
      <property kind="parameter" name="top" type="float" required="1" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
      <property ref="Bzip2_6" />
      <property ref="DOM_19" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_show_xy">
    <description><![CDATA[  Print text in the current font at (   x , y ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_12" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_skew">
    <description><![CDATA[  Skew the coordinate system in x and y direction by alpha  and beta degrees.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property ref="PDF_14" />
      <property ref="PDF_15" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_stringwidth">
    <description><![CDATA[  Returns the width of text using the last  font set by pdf_setfont .  If the optional  parameters font and   size are specified, the width will be  calculated using that font and size instead.  Please note that   font is a font handle returned by   pdf_findfont .  Parameters font and size  were optional before PHP 5.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="PDF_1" />
      <property ref="ClibPDF_12" />
      <property ref="Image_16" />
      <property ref="ClibPDF_51" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_stroke">
    <description><![CDATA[  Stroke the path with the current color and line width, and clear it.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
    </properties>
    
  </element>
  <element kind="function" name="pdf_translate">
    <description><![CDATA[  Translate the origin of the coordinate system.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PDF_1" />
      <property kind="parameter" name="tx" type="float" required="1" />
      <property kind="parameter" name="ty" type="float" required="1" />
    </properties>
    
  </element>
</group>
<group name="PDO">
  <description><![CDATA[PDO Functions]]></description>
  <element kind="function" name="PDO::__construct">
    <description><![CDATA[  Creates a PDO instance to represent a connection to the requested  database.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Connect to an ODBC database using driver invocation
$dsn = 'mysql:dbname=testdb;host=127.0.0.1';
$user = 'dbuser';
$password = 'dbpass';

try {
    $dbh = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>

      

<?php
// Connect to an ODBC database using driver invocation
$dsn = 'uri:file:///usr/local/dbconnect';
$user = '';
$password = '';

try {
    $dbh = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>

      

<?php
// Connect to an ODBC database using an alias
$dsn = 'mydb';
$user = '';
$password = '';

try {
    $dbh = new PDO($dsn, $user, $password);
}catch (PDOException $e) {
    echo 'Connection failed: ' . $e->getMessage();
}

?>]]></description>
      </property>
      <property kind="return" type="PDO" />	
      <property ref="ODBC_7" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
      <property kind="parameter" name="driver_options" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="PDO::beginTransaction">
    <description><![CDATA[  Turns off autocommit mode. Call PDO::commit or   PDO::rollback to end the transaction and return to  autocommit mode.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Begin a transaction, turning off autocommit */
$dbh->beginTransaction();

/* Change the database schema and data */
$sth = $dbh->exec("DROP TABLE fruit");
$sth = $dbh->exec("UPDATE dessert
    SET name = 'hamburger'");

/* Recognize mistake and roll back changes */
$dbh->rollBack();

/* Database connection is now back in autocommit mode */
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::commit">
    <description><![CDATA[  Commits a transaction, returning the database connection to autocommit  mode until the next call to PDO::beginTransaction  starts a new transaction.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Begin a transaction, turning off autocommit */
$dbh->beginTransaction();

/* Change the database schema */
$sth = $dbh->exec("DROP TABLE fruit");

/* Commit the changes */
$dbh->commit();

/* Database connection is now back in autocommit mode */
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::errorCode">
    <description><![CDATA[  Returns a SQLSTATE, a five-character alphanumeric identifier defined in the ANSI SQL  standard.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Provoke an error -- the BONES table does not exist */
$dbh->exec("INSERT INTO bones(skull) VALUES ('lucy')");

echo "\nPDO::errorCode(): ";
print $dbh->errorCode();
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::errorInfo">
    <description><![CDATA[   PDO::errorInfo returns an array of error information  about the last operation performed by this database handle. The array  consists of the following fields:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Provoke an error -- the BONES table does not exist */
$err = $dbh->prepare('SELECT skull FROM bones');
$err->execute();
echo "\nPDO::errorInfo():\n";
print_r($err->errorInfo());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::exec">
    <description><![CDATA[   PDO::exec prepares and executes an SQL statement in  a single function call, returning the number of rows affected by the  statement.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbh = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');

/* Delete all rows from the FRUIT table */
$count = $dbh->exec("DELETE FROM fruit WHERE colour = 'red'");

/* Return number of rows that were deleted */
print("Return number of rows that were deleted:\n");
print("Deleted $count rows.\n");
?>]]></description>
      </property>
      <property kind="return" type="long" />	
      <property kind="parameter" name="statement" type="string" required="1" >
      <description>  The SQL statement to prepare and execute.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="PDO::getAttribute">
    <description><![CDATA[  This function returns the value of a database connection attribute. To  retrieve PDOStatement attributes, refer to   PDOStatement::getAttribute .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');

print "\nPDO_ATTR_AUTOCOMMIT: ";
print $conn->getAttribute(PDO_ATTR_AUTOCOMMIT);

print "\nPDO_ATTR_ERRMODE: ";
print $conn->getAttribute(PDO_ATTR_ERRMODE);

print "\nPDO_ATTR_CASE: ";
print $conn->getAttribute(PDO_ATTR_CASE);

print "\nPDO_ATTR_CLIENT_VERSION: ";
print $conn->getAttribute(PDO_ATTR_CLIENT_VERSION);

print "\nPDO_ATTR_CONNECTION_STATUS: ";
print $conn->getAttribute(PDO_ATTR_CONNECTION_STATUS);

print "\nPDO_ATTR_ORACLE_NULLS: ";
print $conn->getAttribute(PDO_ATTR_ORACLE_NULLS);

print "\nPDO_ATTR_PERSISTENT: ";
print $conn->getAttribute(PDO_ATTR_PERSISTENT);

print "\nPDO_ATTR_PREFETCH: ";
print $conn->getAttribute(PDO_ATTR_PREFETCH);

print "\nPDO_ATTR_SERVER_INFO: ";
print $conn->getAttribute(PDO_ATTR_SERVER_INFO);

print "\nPDO_ATTR_SERVER_VERSION: ";
print $conn->getAttribute(PDO_ATTR_SERVER_VERSION);

print "\nPDO_ATTR_TIMEOUT: ";
print $conn->getAttribute(PDO_ATTR_TIMEOUT);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="attribute" type="long" required="1" >
      <description>  One of the constants. The constants that  apply to database connections are as follows:     </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="PDO::lastInsertId">
    <description><![CDATA[  Due to differences between database server implementations, this method  may not always return a meaningful result.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::prepare">
    <description><![CDATA[  Prepares an SQL statement to be executed by the   PDOStatement::execute method. The SQL statement can  contain zero or more named (:name) or question mark (?) parameter markers  for which real values will be substituted when the statement is executed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Execute a prepared statement by passing an array of values */
$sql = 'SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour'
$sth = $dbh->prepare($sql, array(PDO_ATTR_CURSOR, PDO_CURSOR_FWDONLY));
$sth->execute(array(':calories' => 150, ':colour' => 'red'));
$red = $sth->fetchAll();
$sth->execute(array(':calories' => 175, ':colour' => 'yellow'));
$yellow = $sth->fetchAll();
?>

      

<?php
/* Execute a prepared statement by passing an array of values */
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute(array(150, 'red'));
$red = $sth->fetchAll();
$sth->execute(array(175, 'yellow'));
$yellow = $sth->fetchAll();
?>]]></description>
      </property>
      <property kind="return" type="PDOStatement" />	
      <property ref="PDO_2" />
      <property ref="PDO_1" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::query">
    <description><![CDATA[   PDO::query prepares and executes an SQL statement in  a single function call, returning the result set (if any) returned by the  statement as a PDOStatement object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function getFruit($conn) {
    $sql = 'SELECT name, colour, calories FROM fruit ORDER BY name';
    foreach ($conn->query($sql) as $row) {
        print $row['NAME'] . "\t";
        print $row['COLOUR'] . "\t";
        print $row['CALORIES'] . "\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="PDO_2" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::quote">
    <description><![CDATA[   PDO::quote places quotes around the input  string and escapes and single quotes within the input string.  Quoting input strings has been a common means of attempting to  prevent SQL injection attacks; however, an even safer approach  is to use prepared statements with named parameters or placeholders  for the input values.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Simple string */
$string = 'Nice';
print "Unquoted string: $string\n";
print "Quoted string: " . $conn->quote($string) . "\n";
?>

    

<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Dangerous string */
$string = 'Naughty \' string';
print "Unquoted string: $string\n";
print "Quoted string:" . $conn->quote($string) . "\n";
?>

    

<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Complex string */
$string = "Co'mpl''ex \"st'\"ring";
print "Unquoted string: $string\n";
print "Quoted string: " . $conn->quote($string) . "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
      <property kind="parameter" name="parameter_type" type="int"  >
      <description>  Provides a data type hint for drivers that have alternate quoting styles.  The default value is PDO_PARAM_STR.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="PDO::rollBack">
    <description><![CDATA[  When issued against databases that support transactions,   PDO::rollBack rolls back any work in progress and  and returns the connection state to autocommit mode.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Begin a transaction, turning off autocommit */
$dbh->beginTransaction();

/* Change the database schema and data */
$sth = $dbh->exec("DROP TABLE fruit");
$sth = $dbh->exec("UPDATE dessert
    SET name = 'hamburger'");

/* Recognize mistake and roll back changes */
$dbh->rollBack();

/* Database connection is now back in autocommit mode */
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="PDO::setAttribute">
    <description><![CDATA[  Sets a database connection attribute. The generic PDO connection attributes  include:     : Force column names to a specific case.     : Force column names to lower case.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="attribute" type="int" required="1" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::bindColumn">
    <description><![CDATA[  On each row fetch param will contain the value of  the corresponding column. column is the 1-based  offset of the column, or the column name. For maximum portability, do not  call this function before calling   PDOStatement::execute .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function readData($dbh) {
  $sql = 'SELECT name, colour, calories FROM fruit';
  try {
    $stmt = $dbh->prepare($sql);
    $stmt->execute();

    /* Bind by column number with an explicit data type & length */
    $stmt->bindColumn(1, $name, PDO_PARAM_STR, 64);

    /* Bind by column number with default data type & length */
    $stmt->bindColumn(2, $colour);

    /* Bind by column name with default data type & length */
    $stmt->bindColumn('CALORIES', $cals);

    while ($row = $stmt->fetch(PDO_FETCH_BOUND)) {
      $data = $name . "\t" . $colour . "\t" . $cals . "\n";
      print $data;
    }
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
readData($dbh);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="OCI8_25" />
      <property kind="parameter" name="param" type="mixed" required="1" >
      <description>  Name of the PHP variable to which the column will be bound.  </description>
      </property>
      <property ref="COM_6" />
      <property ref="Filesystem_11" />
      <property kind="parameter" name="driver_options" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::bindParam">
    <description><![CDATA[  Binds an SQL statement parameter to the specified variable name. The SQL statement  parameter can either be a named placeholder or a question mark placeholder.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Execute a prepared statement by binding PHP variables */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO_PARAM_INT);
$sth->bindParam(':colour', $colour, PDO_PARAM_STR, 12);
$sth->execute();
?>

     

<?php
/* Execute a prepared statement by binding PHP variables */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO_PARAM_INT);
$sth->bindParam(2, $colour, PDO_PARAM_STR, 12);
$sth->execute();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="parameter_name" type="mixed" required="1" />
      <property ref="OCI8_7" />
      <property ref="ODBC_20" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::columnCount">
    <description><![CDATA[  Use PDOStatement::columnCount to return the number  of columns in the result set represented by the PDOStatement object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbh = new PDO('odbc:sample', 'db2inst1', 'ibmdb2');

$sth = $dbh->prepare("SELECT name, colour FROM fruit");

/* Count the number of columns in the (non-existent) result set */
$colcount = $sth->columnCount();
print("Before execute(), result set has $colcount columns (should be 0)\n");

$sth->execute();

/* Count the number of columns in the result set */
$colcount = $sth->columnCount();
print("After execute(), result set has $colcount columns (should be 2)\n");

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::errorCode">
    <description><![CDATA[  Returns a SQLSTATE, a five-character alphanumeric identifier defined in the ANSI SQL  standard. PDOStatement::errorCode only retrieves error codes  for operations performed with PDOStatement objects.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Provoke an error -- the BONES table does not exist */
$err = $dbh->prepare('SELECT skull FROM bones');
$err->execute();

echo "\nPDOStatement::errorCode(): ";
print $err->errorCode();
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::errorInfo">
    <description><![CDATA[   PDOStatement::errorInfo returns an array of  error information about the last operation performed by this  statement handle. The array consists of the following fields:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Provoke an error -- the BONES table does not exist */
$sth = $dbh->prepare('SELECT skull FROM bones');
$sth->execute();

echo "\nPDOStatement::errorInfo():\n";
$arr = $sth->errorInfo();
print_r($arr);
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::execute">
    <description><![CDATA[  Execute the prepared statement. If the prepared statement included  parameter markers, you must either:   call PDOStatement::bindParam to bind PHP variables  to the parameter markers: bound variables pass their value as input and receive the  output value, if any, of their associated parameter markers]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Execute a prepared statement by binding PHP variables */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO_PARAM_INT);
$sth->bindParam(':colour', $colour, PDO_PARAM_STR, 12);
$sth->execute();
?>

     

<?php
/* Execute a prepared statement by passing an array of insert values */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO_PARAM_INT);
$sth->bindParam(':colour', $colour, PDO_PARAM_STR, 12);
$sth->execute(array(':calories' => $calories, ':colour' => $colour));
?>

     

<?php
/* Execute a prepared statement by binding PHP variables */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO_PARAM_INT);
$sth->bindParam(2, $colour, PDO_PARAM_STR, 12);
$sth->execute();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="input_parameters" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::fetch">
    <description><![CDATA[  Fetches a row from a result set associated with a PDOStatement object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Exercise PDOStatement::fetch styles */
print("PDO_FETCH_ASSOC: ");
print("Return next row as an array indexed by column name\n");
$result = $sth->fetch(PDO_FETCH_ASSOC);
print_r($result);
print("\n");

print("PDO_FETCH_BOTH: ");
print("Return next row as an array indexed by both column name and number\n");
$result = $sth->fetch(PDO_FETCH_BOTH);
print_r($result);
print("\n");

print("PDO_FETCH_LAZY: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO_FETCH_LAZY);
print_r($result);
print("\n");

print("PDO_FETCH_OBJ: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO_FETCH_OBJ);
print $result->NAME;
print("\n");
?>

      

<?php
function readDataForwards($dbh) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
  try {
    $stmt = $dbh->prepare($sql, array(PDO_ATTR_CURSOR, PDO_CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO_FETCH_NUM, PDO_FETCH_ORI_NEXT)) {
      $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
      print $data;
    }
    $stmt = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
function readDataBackwards($dbh) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
  try {
    $stmt = $dbh->prepare($sql, array(PDO_ATTR_CURSOR, PDO_CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO_FETCH_NUM, PDO_FETCH_ORI_LAST);
    do {
      $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
      print $data;
    } while ($row = $stmt->fetch(PDO_FETCH_NUM, PDO_FETCH_ORI_PRIOR));
    $stmt = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}

print "Reading forwards:\n";
readDataForwards($conn);

print "Reading backwards:\n";
readDataBackwards($conn);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="fetch_style" type="int"  >
      <description>  Controls how the next row will be returned to the caller. This value  must be one of the constants,  defaulting to .     : returns an array indexed by column  name as returned in your result set     (default): returns an array indexed by  both column name and column number as returned in your result set     : returns and assigns the  values of the columns in your result set to the PHP variables to which  they were bound with the  method     : combines   and ,  creating the object variable names as they are accessed     : returns an anonymous object with  property names that correspond to the column names returned in your  result set     : returns an array indexed by column  number as returned in your result set, starting at column 0    </description>
      </property>
      <property kind="parameter" name="cursor_orientation" type="int"  >
      <description>  For a PDOStatement object representing a scrollable cursor, this  value determines which row will be returned to the caller. This value  must be one of the constants,  defaulting to .  </description>
      </property>
      <property kind="parameter" name="cursor_offset" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::fetchAll">
    <description><![CDATA[    Controls the contents of the returned array as documented in   PDOStatement::fetch . Defaults to   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Fetch all of the remaining rows in the result set */
print("Fetch all of the remaining rows in the result set:\n");
$result = $sth->fetchAll();
print_r($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="PDO_10" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::fetchSingle">
    <description><![CDATA[   PDOStatement::fetchSingle returns the first column  in the next row of a result set as a value.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Fetch the first column from the next row in the result set */
print("Fetch the first column from the next row in the result set:\n");
$result = $sth->fetchSingle();
print("$result\n");

$result = $sth->fetchSingle();
print("$result\n");
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::getAttribute">
    <properties>
      <property ref="ret_mixed" />
      <property ref="PDO_3" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::getColumnMeta">
    <description><![CDATA[    Its description  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="$column" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::rowCount">
    <description><![CDATA[   PDOStatement::rowCount returns the number of  rows affected by the last DELETE, INSERT, or UPDATE statement  executed by the corresponding object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Delete all rows from the FRUIT table */
$del = $dbh->prepare('DELETE FROM fruit');
$del->execute();

/* Return number of rows that were deleted */
print("Return number of rows that were deleted:\n");
$count = $del->rowCount();
print("Deleted $count rows.\n");
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::setAttribute">
    <properties>
      <property ref="ret_bool" />
      <property ref="PDO_3" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="PDOStatement::setFetchMode">
    <description><![CDATA[    The fetch mode must be one of the constants.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sql = 'SELECT name, colour, calories FROM fruit';
try {
  $stmt = $dbh->query($sql);
  $result = $stmt->setFetchMode(PDO_FETCH_NUM);
  while ($row = $stmt->fetch()) {
    print $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
  }
}
catch (PDOException $e) {
  print $e->getMessage();
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
</group>
<group name="PHP Options/Info">
  <description><![CDATA[Information]]></description>
  <element kind="function" name="assert">
    <description><![CDATA[   assert will check the given   assertion and take appropriate action if  its result is .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Active assert and make it quiet
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Create a handler function
function my_assert_handler($file, $line, $code) 
{
    echo "<hr>Assertion Failed:
        File '$file'<br />
        Line '$line'<br />
        Code '$code'<br /><hr />";
}

// Set up the callback
assert_options(ASSERT_CALLBACK, 'my_assert_handler');

// Make an assertion that should fail
assert('mysql_query("")');
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="assertion" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="assert_options">
    <description><![CDATA[  Using assert_options you may set the various   assert control options or just query their  current settings.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="what" type="int" required="1" />
      <property ref="COM_5" />
    </properties>
    
  </element>
  <element kind="function" name="dl">
    <description><![CDATA[  Loads the PHP extension given by the parameter   library . The library  parameter is the filename of the extension to  load which also depends on your platform. For example, the extension (if compiled as a shared  module, not the default!) would be called  on Unix platforms whereas it is called   on the Windows platform.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Example loading an extension based on OS
if (!extension_loaded('sqlite')) {
    if (strtoupper(substr(PHP_OS, 0, 3) == 'WIN')) {
        dl('php_sqlite.dll');
    } else {
        dl('sqlite.so');
    }
}

// Or, the PHP_SHLIB_SUFFIX constant is available as of PHP 4.3.0
if (!extension_loaded('sqlite')) {
    $prefix = (PHP_SHLIB_SUFFIX == 'dll') ? 'php_' : '';
    dl($prefix . 'sqlite.' . PHP_SHLIB_SUFFIX);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="library" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="extension_loaded">
    <description><![CDATA[  Returns if the extension identified by name  is loaded, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!extension_loaded('gd')) {
    if (!dl('gd.so')) {
        exit;
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="get_cfg_var">
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="varname" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="get_current_user">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="get_defined_constants">
    <description><![CDATA[  This function returns the names and values of all the constants  currently defined.  This includes those created by extensions as  well as those created with the define  function.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="categorize" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="get_extension_funcs">
    <description><![CDATA[  This function returns the names of all the functions defined in  the module indicated by module_name .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="COM_1" />
    </properties>
    
  </element>
  <element kind="function" name="get_include_path">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Works as of PHP 4.3.0
echo get_include_path();

// Works in all PHP versions
echo ini_get('include_path');
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="get_included_files">
    <description><![CDATA[  Returns an array of the names of all files that have been  included using include ,   include_once , require  or require_once .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

include 'test1.php';
include_once 'test2.php';
require 'test3.php';
require_once 'test4.php';

$included_files = get_included_files();

foreach ($included_files as $filename) {
    echo "$filename\n";
}

?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="get_loaded_extensions">
    <description><![CDATA[  This function returns the names of all the modules compiled and  loaded in the PHP interpreter.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="get_magic_quotes_gpc">
    <description><![CDATA[  If the directive is ON it will completely  override magic_quotes_gpc .  So even  when get_magic_quotes returns   neither double quotes, backslashes or NUL's will  be escaped.  Only single quotes will be escaped. In this  case they'll look like:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo get_magic_quotes_gpc();         // 1
echo $_POST['lastname'];             // O\'reilly
echo addslashes($_POST['lastname']); // O\\\'reilly

if (!get_magic_quotes_gpc()) {
    $lastname = addslashes($_POST['lastname']);
} else {
    $lastname = $_POST['lastname'];
}

echo $lastname; // O\'reilly
$sql = "INSERT INTO lastnames (lastname) VALUES ('$lastname')";
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="get_magic_quotes_runtime">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="getenv">
    <description><![CDATA[  Returns the value of the environment variable   varname , or on an error.    ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="PHP Options/Info_4" />
    </properties>
    
  </element>
  <element kind="function" name="getlastmod">
    <description><![CDATA[  Returns the time of the last modification of the current  page. The value returned is a Unix timestamp, suitable for  feeding to date . Returns on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// outputs e.g. 'Last modified: March 04 1998 20:43:59.'
echo "Last modified: " . date ("F d Y H:i:s.", getlastmod());
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="getmygid">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="getmyinode">
    <description><![CDATA[  Returns the current script's inode, or on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="getmypid">
    <description><![CDATA[  Returns the current PHP process ID, or on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="getmyuid">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="getopt">
    <description><![CDATA[  Returns an associative array of option / argument pairs based on the  options format specified in options , or  on an error.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ICAP_10" />
      <property kind="parameter" name="longopts" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="getrusage">
    <description><![CDATA[  This is an interface to getrusage(2). It returns an associative  array containing the data returned from the system call. If who  is 1, getrusage will be called with RUSAGE_CHILDREN.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dat = getrusage();
echo $dat["ru_nswap"];         // number of swaps
echo $dat["ru_majflt"];        // number of page faults
echo $dat["ru_utime.tv_sec"];  // user time used (seconds)
echo $dat["ru_utime.tv_usec"]; // user time used (microseconds)
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="who" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ini_get">
    <description><![CDATA[  Returns the value of the configuration option on success.  Failure, such  as querying for a non-existent value, will return an empty string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/*
Our php.ini contains the following settings:

display_errors = On
register_globals = Off
post_max_size = 8M
*/

echo 'display_errors = ' . ini_get('display_errors') . "\n";
echo 'register_globals = ' . ini_get('register_globals') . "\n";
echo 'post_max_size = ' . ini_get('post_max_size') . "\n";
echo 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . "\n"; 
echo 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));

function return_bytes($val) {
    $val = trim($val);
    $last = strtolower($val{strlen($val)-1});
    switch($last) {
        // The 'G' modifier is available since PHP 5.1.0
        case 'g':
            $val *= 1024;
        case 'm':
            $val *= 1024;
        case 'k':
            $val *= 1024;
    }

    return $val;
}

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="PHP Options/Info_4" />
    </properties>
    
  </element>
  <element kind="function" name="ini_get_all">
    <description><![CDATA[  Returns all the registered configuration options as an  associative array.  If the optional extension  parameter is set, returns only options specific for that  extension.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$inis = ini_get_all();

print_r($inis);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="extension" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ini_restore">
    <description><![CDATA[  Restores a given configuration option to its original value.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PHP Options/Info_4" />
    </properties>
    
  </element>
  <element kind="function" name="ini_set">
    <description><![CDATA[  Sets the value of the given configuration option. Returns the old  value on success, on failure. The configuration option  will keep this new value during the script's execution, and will  be restored at the script's ending.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="PHP Options/Info_4" />
      <property kind="parameter" name="newvalue" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="memory_get_usage">
    <description><![CDATA[  Returns the amount of memory, in bytes, that's currently being  allocated to your PHP script.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// This is only an example, the numbers below will 
// differ depending on your system

echo memory_get_usage() . "\n"; // 36640

$a = str_repeat("Hello", 4242);

echo memory_get_usage() . "\n"; // 57960

unset($a);

echo memory_get_usage() . "\n"; // 36744

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="php_ini_scanned_files">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if ($filelist = php_ini_scanned_files()) {
    if (strlen($filelist) > 0) {
        $files = explode(',', $filelist);

        foreach ($files as $file) {
            echo "<li>" . trim($file) . "</li>\n";
        }
    }
}
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="php_logo_guid">
    <description><![CDATA[  This function returns the ID which can be used to display the PHP logo  using the built-in image.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo '<img src="' . $_SERVER['PHP_SELF'] .
     '?=' . php_logo_guid() . '" alt="PHP Logo !" />';

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="php_sapi_name">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sapi_type = php_sapi_name();
if (substr($sapi_type, 0, 3) == 'cgi') {
    echo "You are using CGI PHP\n";
} else {
    echo "You are not using CGI PHP\n";
}
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="php_uname">
    <description><![CDATA[   php_uname returns a description of the operating  system PHP is running on. For the name of just the operating system,  consider using the constant, but be  reminded this constant will contain the operating system PHP was   on.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo php_uname();
echo PHP_OS;

/* Some possible outputs:
Linux localhost 2.4.21-0.13mdk #1 Fri Mar 14 15:08:06 EST 2003 i686
Linux

FreeBSD localhost 3.2-RELEASE #15: Mon Dec 17 08:46:02 GMT 2001
FreeBSD

Windows NT XN1 5.1 build 2600
WINNT
*/

if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
    echo 'This is a server using Windows!';
} else {
    echo 'This is a server not using Windows!';
}

?>

      

<?php
// *nix
echo DIRECTORY_SEPARATOR; // /
echo PHP_SHLIB_SUFFIX;    // so
echo PATH_SEPARATOR;      // :

// Win*
echo DIRECTORY_SEPARATOR; // \
echo PHP_SHLIB_SUFFIX;    // dll
echo PATH_SEPARATOR;      // ;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="mode" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="phpcredits">
    <description><![CDATA[  This function prints out the credits listing the PHP developers,  modules, etc. It generates the appropriate HTML codes to insert  the information in a page. flag is  optional, and it defaults to .  To generate a custom credits page, you may want to use the   flag parameter.  For example to print  the general credits, you will use somewhere in your code:  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="IMAP_11" />
    </properties>
    
  </element>
  <element kind="function" name="phpinfo">
    <description><![CDATA[  Outputs a large amount of information about the current state of  PHP. This includes information about PHP compilation options and  extensions, the PHP version, server information and environment  (if compiled as a module), the PHP environment, OS version  information, paths, master and local values of configuration  options, HTTP headers, and the PHP License.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Show all information, defaults to INFO_ALL
phpinfo();

// Show just the module information.
// phpinfo(8) yields identical results.
phpinfo(INFO_MODULES);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="what" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="phpversion">
    <description><![CDATA[  Returns a string containing the version of the currently running  PHP parser. If the optional extension parameter is  specified, phpversion returns the version of that  extension, or if there is no version information associated or  the extension isn't enabled.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// prints e.g. 'Current PHP version: 4.1.1'
echo 'Current PHP version: ' . phpversion();

// prints e.g. '2.0' or nothing if the extension isn't enabled
echo phpversion('tidy');
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="PHP Options/Info_8" />
    </properties>
    
  </element>
  <element kind="function" name="putenv">
    <description><![CDATA[  Adds setting to the server environment.  The  environment variable will only exist for the duration of the current  request. At the end of the request the environment is restored to its  original state.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
putenv("UNIQID=$uniqid");
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="setting" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="restore_include_path">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo get_include_path();  // .:/usr/local/lib/php

set_include_path('/inc');

echo get_include_path();  // /inc

// Works as of PHP 4.3.0
restore_include_path();

// Works in all PHP versions
ini_restore('include_path');

echo get_include_path();  // .:/usr/local/lib/php

?>]]></description>
      </property>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="set_include_path">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Works as of PHP 4.3.0
set_include_path('/inc');

// Works in all PHP versions
ini_set('include_path', '/inc');
?>

      

<?php
$path = '/usr/lib/pear';
set_include_path(get_include_path() . PATH_SEPARATOR . $path);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="new_include_path" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="set_magic_quotes_runtime">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="new_setting" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="set_time_limit">
    <description><![CDATA[   set_time_limit has no effect when PHP is  running in . There is no workaround other than turning  off safe mode or changing the time limit in the .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="MCAL_28" />
    </properties>
    
  </element>
  <element kind="function" name="version_compare">
    <description><![CDATA[   version_compare compares two  "PHP-standardized" version number strings. This is useful if you  would like to write programs working only on some versions of  PHP.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// prints -1
echo version_compare("4.0.4", "4.0.6");

// these all print 1
echo version_compare("4.0.4", "4.0.6", "<");
echo version_compare("4.0.6", "4.0.6", "eq");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="version1" type="string" required="1" />
      <property kind="parameter" name="version2" type="string" required="1" />
      <property kind="parameter" name="operator" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="zend_logo_guid">
    <description><![CDATA[  This function returns the ID which can be used to display the Zend logo  using the built-in image.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo '<img src="' . $_SERVER['PHP_SELF'] .
     '?=' . zend_logo_guid() . '" alt="Zend Logo !" />';

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="zend_version">
    <description><![CDATA[  Returns a string containing the version of the currently running  Zend Engine.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// prints e.g. 'Zend engine version: 1.0.4'
echo "Zend engine version: " . zend_version();
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
</group>
<group name="POSIX">
  <description><![CDATA[POSIX Functions]]></description>
  <element kind="function" name="posix_access">
    <description><![CDATA[   posix_access checks the user's permission of a file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$file = 'some_file';

if (posix_access($file, POSIX_R_OK | POSIX_W_OK)) {
    echo 'The file is readable and writable!';

} else {
    $error = posix_get_last_error();

    echo "Error $error: " . posix_strerror($error);
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Filesystem_5" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="posix_ctermid">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="posix_get_last_error">
    <description><![CDATA[  Returns the errno (error number) set by the last posix function that  failed.  If no errors exist, 0 is returned.  If you're wanting the  system error message associated with the errno, use   posix_strerror .  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getcwd">
    <description><![CDATA[   posix_getcwd returns the absolute pathname of the  script's current working directory. posix_getcwd  returns on error.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getegid">
    <description><![CDATA[  Return the numeric effective group ID of the current process. See  also posix_getgrgid for information on how  to convert this into a useable group name.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_geteuid">
    <description><![CDATA[  Return the numeric effective user ID of the current process. See  also posix_getpwuid for information on how  to convert this into a useable username.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getgid">
    <description><![CDATA[  Return the numeric real group ID of the current process. See also   posix_getgrgid for information on how to  convert this into a useable group name.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getgrgid">
    <description><![CDATA[  Returns an of information about a group and   on failure.  If gid isn't a number  then is returned and an   level error is generated.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$groupid   = posix_getegid();
$groupinfo = posix_getgrgid($groupid);

print_r($groupinfo);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="gid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getgrnam">
    <properties>
      <property ref="ret_array" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getgroups">
    <description><![CDATA[  Returns an array of integers containing the numeric group ids of  the group set of the current process. See also   posix_getgrgid for information on how to  convert this into useable group names.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getlogin">
    <description><![CDATA[  Returns the login name of the user owning the current process.  See posix_getpwnam for information how to  get more information about this user.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getpgid">
    <description><![CDATA[  Returns the process group identifier of the process   pid .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PCNTL_8" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getpgrp">
    <description><![CDATA[  Return the process group identifier of the current process. See  POSIX.1 and the getpgrp(2) manual page on your POSIX system for  more information on process groups.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getpid">
    <description><![CDATA[  Return the process identifier of the current process.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getppid">
    <description><![CDATA[  Return the process identifier of the parent process of the  current process.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getpwnam">
    <description><![CDATA[  Returns an associative array containing information about a user  referenced by an alphanumeric username, passed in the   username parameter.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="FTP_13" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getpwuid">
    <description><![CDATA[  Returns an associative array containing information about a user  referenced by a numeric user ID, passed in the   uid parameter.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ICAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getrlimit">
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getsid">
    <description><![CDATA[  Return the sid of the process pid . If   pid is 0, the sid of the current process  is returned.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PCNTL_8" />
    </properties>
    
  </element>
  <element kind="function" name="posix_getuid">
    <description><![CDATA[  Return the numeric real user ID of the current process. See also   posix_getpwuid for information on how to  convert this into a useable username.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_isatty">
    <properties>
      <property ref="ret_bool" />
      <property ref="Ncurses_55" />
    </properties>
    
  </element>
  <element kind="function" name="posix_kill">
    <description><![CDATA[  Send the signal sig to the process with  the process identifier pid . Returns ,  if unable to send the signal, otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PCNTL_8" />
      <property kind="parameter" name="sig" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="posix_mkfifo">
    <description><![CDATA[   posix_mkfifo creates a special   file which exists in the file system and acts as  a bidirectional communication endpoint for processes.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Filesystem_21" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="posix_setegid">
    <description><![CDATA[  Set the effective group ID of the current process. This is a  privileged function and you need appropriate privileges (usually  root) on your system to be able to perform this function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="POSIX_1" />
    </properties>
    
  </element>
  <element kind="function" name="posix_seteuid">
    <description><![CDATA[  Set the real user ID of the current process. This is a privileged  function and you need appropriate privileges (usually root) on  your system to be able to perform this function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ICAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="posix_setgid">
    <description><![CDATA[  Set the real group ID of the current process. This is a  privileged function and you need appropriate privileges (usually  root) on your system to be able to perform this function. The  appropriate order of function calls is   posix_setgid first,   posix_setuid last.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="POSIX_1" />
    </properties>
    
  </element>
  <element kind="function" name="posix_setpgid">
    <description><![CDATA[  Let the process pid join the process group   pgid . See POSIX.1 and the setsid(2) manual  page on your POSIX system for more informations on process groups  and job control.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PCNTL_8" />
      <property kind="parameter" name="pgid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="posix_setsid">
    <description><![CDATA[  Make the current process a session leader. See POSIX.1 and the  setsid(2) manual page on your POSIX system for more information  on process groups and job control. Returns the session id.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="posix_setuid">
    <description><![CDATA[  Set the real user ID of the current process. This is a privileged  function and you need appropriate privileges (usually root) on  your system to be able to perform this function.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ICAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="posix_strerror">
    <description><![CDATA[  Returns the POSIX system error message associated with the given errno.  If errno is 0, then the string "Success" is  returned.  The function posix_get_last_error is  used for retrieving the last POSIX errno.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Errors and Logging_8" />
    </properties>
    
  </element>
  <element kind="function" name="posix_times">
    <description><![CDATA[  Returns a hash of strings with information about the current  process CPU usage. The indices of the hash are    ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="posix_ttyname">
    <properties>
      <property ref="ret_string" />
      <property ref="Ncurses_55" />
    </properties>
    
  </element>
  <element kind="function" name="posix_uname">
    <description><![CDATA[  Returns a hash of strings with information about the  system. The indices of the hash are    ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
</group>
<group name="POSIX Regex">
  <description><![CDATA[Regular Expression Functions (POSIX Extended)]]></description>
  <element kind="function" name="ereg">
    <description><![CDATA[   preg_match , which uses a Perl-compatible  regular expression syntax, is often a faster alternative to   ereg .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs)) {
    echo "$regs[3].$regs[2].$regs[1]";
} else {
    echo "Invalid date format: $date";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_10" />
    </properties>
    
  </element>
  <element kind="function" name="ereg_replace">
    <description><![CDATA[  For example, the following code snippet prints "This was a test"  three times:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$string = "This is a test";
echo str_replace(" is", " was", $string);
echo ereg_replace("( )is", "\\1was", $string);
echo ereg_replace("(( )is)", "\\2was", $string);

?>

      

<?php
/* This will not work as expected. */
$num = 4;
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* Output: 'This string has   words.' */

/* This will work. */
$num = '4';
$string = "This string has four words.";
$string = ereg_replace('four', $num, $string);
echo $string;   /* Output: 'This string has 4 words.' */
?>

      

<?php
$text = ereg_replace("[[:alpha:]]+://[^<>[:space:]]+[[:alnum:]/]",
                     "<a href=\"\\0\">\\0</a>", $text);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_15" />
      <property ref="Multibyte String_11" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="eregi">
    <description><![CDATA[  This function is identical to ereg except  that this ignores case distinction when matching alphabetic  characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = 'XYZ';
if (eregi('z', $string)) {
    echo "'$string' contains a 'z' or 'Z'!";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_10" />
    </properties>
    
  </element>
  <element kind="function" name="eregi_replace">
    <description><![CDATA[  This function is identical to ereg_replace  except that this ignores case distinction when matching  alphabetic characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pattern = '(>[^<]*)('. quotemeta($_GET['search']) .')';
$replacement = '\\1<span class="search">\\2</span>';
$body = eregi_replace($pattern, $replacement, $body);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_15" />
      <property ref="Multibyte String_11" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="split">
    <description><![CDATA[   preg_split , which uses a Perl-compatible regular  expression syntax, is often a faster alternative to   split .  If you don't require the power of regular  expressions, it is faster to use explode , which  doesn't incur the overhead of the regular expression engine.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
list($user, $pass, $uid, $gid, $extra) =
    split(":", $passwd_line, 5);
?>

      

<?php
// Delimiters may be slash, dot, or hyphen
$date = "04/30/1973";
list($month, $day, $year) = split('[/.-]', $date);
echo "Month: $month; Day: $day; Year: $year<br />\n";
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_21" />
    </properties>
    
  </element>
  <element kind="function" name="spliti">
    <description><![CDATA[  This function is identical to split except  that this ignores case distinction when matching alphabetic  characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = "aBBBaCCCADDDaEEEaGGGA";
$chunks = spliti ("a", $string, 5);
print_r($chunks);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Filesystem_15" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_21" />
    </properties>
    
  </element>
  <element kind="function" name="sql_regcase">
    <description><![CDATA[  Returns a valid regular expression which will match   string , ignoring case. This expression is   string with each alphabetic character converted to a  bracket expression; this bracket expression contains that  character's uppercase and lowercase form.  Other characters remain unchanged.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo sql_regcase("Foo - bar.");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
</group>
<group name="Parsekit">
  <description><![CDATA[Parsekit Functions]]></description>
  <element kind="function" name="parsekit_compile_file">
    <description><![CDATA[    A string containing the name of the file to compile.  Similar to the argument to include .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
var_dump(parsekit_compile_file('hello_world.php', $errors, PARSEKIT_SIMPLE));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property kind="parameter" name="errors" type="array"  >
      <description>  A 2D hash of errors (including fatal errors) encountered during compilation.  Returned by reference.  </description>
      </property>
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="parsekit_compile_string">
    <description><![CDATA[    A string containing phpcode. Similar to the argument to eval .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $ops = parsekit_compile_string('
echo "Foo\n";
', $errors, PARSEKIT_QUIET);

  var_dump($ops);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="phpcode" type="string" required="1" />
      <property ref="Parsekit_1" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="parsekit_func_arginfo">
    <description><![CDATA[    A string describing a function, or an array describing a class/method.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function foo($bar, stdClass $baz, &$bomb, $bling = false) {
}

var_dump(parsekit_func_arginfo('foo'));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="function" type="mixed" required="1" />
    </properties>
    
  </element>
</group>
<group name="PostgreSQL">
  <description><![CDATA[PostgreSQL Functions]]></description>
  <element kind="function" name="pg_affected_rows">
    <description><![CDATA[   pg_affected_rows returns the number of tuples  (instances/records/rows) affected by INSERT, UPDATE, and DELETE  queries executed by pg_query . If no tuple is  affected by this function, it will return 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
     $result = pg_query($conn, "INSERT INTO authors VALUES ('Orwell', 2002, 'Animal Farm')");
     $cmdtuples = pg_affected_rows($result);
     echo $cmdtuples . " tuples are affected.\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_cancel_query">
    <description><![CDATA[   pg_cancel_query cancel asynchronous query sent by   pg_send_query . You cannot cancel query executed by   pg_query .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_client_encoding">
    <description><![CDATA[   pg_client_encoding returns the client  encoding as the string. The returned string should be either :  SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE,  MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5,  WIN1250.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_close">
    <description><![CDATA[   pg_close closes the non-persistent  connection to a PostgreSQL database associated with the given   connection resource.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("host=localhost port=5432 dbname=mary")
        or die("Could not connect");
    echo "Connected successfully";
    pg_close($dbconn);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_connect">
    <description><![CDATA[   pg_connect returns a connection resource  that is needed by other PostgreSQL functions.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbconn = pg_connect("dbname=mary");
//connect to a database named "mary"

$dbconn2 = pg_connect("host=localhost port=5432 dbname=mary");
// connect to a database named "mary" on "localhost" at port "5432"

$dbconn3 = pg_connect("host=sheep port=5432 dbname=mary user=lamb password=foo");
//connect to a database named "mary" on the host "sheep" with a username and password

$conn_string = "host=sheep port=5432 dbname=test user=lamb password=bar";
$dbconn4 = pg_connect($conn_string);
//connect to a database named "test" on the host "sheep" with a username and password
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="connection_string" type="string" required="1" />
      <property kind="parameter" name="connect_type" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="pg_connection_busy">
    <description><![CDATA[   pg_connection_busy returns if the  connection is busy. If it is busy, a previous query is still executing.  If pg_get_result is called, it will be blocked.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("dbname=publisher") or die("Could not connect");
    $bs = pg_connection_busy($dbconn);
    if ($bs) {
        echo 'connection is busy';
    } else {
       echo 'connection is not busy';
    }
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_connection_reset">
    <description><![CDATA[   pg_connection_reset resets the connection.  It is useful for error recovery.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("dbname=publisher") or die("Could not connect");
    $dbconn2 = pg_connection_reset($dbconn);
    if ($dbconn2) {
        echo "reset successful\n";
    } else {
        echo "reset failed\n";
    }
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_connection_status">
    <description><![CDATA[   pg_connection_status returns a connection status.  Possible statuses are and   . The return value 0 as  integer indicates a valid connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("dbname=publisher") or die("Could not connect");
    $stat = pg_connection_status($dbconn);
    if ($stat === 0) {
        echo 'Connection status ok';
    } else {
        echo 'Connection status bad';
    }    
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_convert">
    <description><![CDATA[   pg_convert checks and converts the values in   into suitable values for use in a SQL  statement. Precondition for pg_convert is the existence  of a table which has at least as many columns  as has elements. The fieldnames as well as  the fieldvalues in must match the indices and  values of . Returns an array with the converted  values on success, otherwise.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
      <property kind="parameter" name="assoc_array" type="array" required="1" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pg_copy_from">
    <description><![CDATA[   pg_copy_from insert records into a table from   rows . It issues SQL command  internally to insert records.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
      <property kind="parameter" name="rows" type="array" required="1" />
      <property ref="APD_3" />
      <property kind="parameter" name="null_as" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="pg_copy_to">
    <description><![CDATA[   pg_copy_to copies a table to an array. It  issues SQL command internally to  retrieve records. The resulting array is returned. It returns   on failure.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
      <property ref="APD_3" />
      <property ref="PostgreSQL_5" />
    </properties>
    
  </element>
  <element kind="function" name="pg_dbname">
    <description><![CDATA[   pg_dbname returns the name of the database  that the given PostgreSQL connection  resource. It returns , if connection  is not a valid PostgreSQL connection resource.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    error_reporting(E_ALL);

    pg_connect("host=localhost port=5432 dbname=mary");
    echo pg_dbname(); // mary
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_delete">
    <description><![CDATA[   pg_delete deletes record condition specified by   which has   . If is  specified, pg_convert is applied  to with specified option.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
    $db = pg_connect('dbname=foo');
    // This is safe, since $_POST is converted automatically
    $res = pg_delete($db, 'post_log', $_POST);
    if ($res) {
        echo "POST data is deleted: $res\n";
    } else {
        echo "User must have sent wrong inputs\n";
    }
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
      <property ref="PostgreSQL_3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pg_end_copy">
    <description><![CDATA[   pg_end_copy syncs the PostgreSQL frontend  (usually a web server process) with the PostgreSQL server after  doing a copy operation performed by   pg_put_line . pg_end_copy  must be issued, otherwise the PostgreSQL server may get out of  sync with the frontend and will report an error.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_escape_bytea">
    <description><![CDATA[   pg_escape_bytea escapes string for  bytea datatype.  It returns escaped string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="pg_escape_string">
    <description><![CDATA[   pg_escape_string escapes string for  text/char datatype.  It returns escaped string for  PostgreSQL. Use of this function is recommended instead of   addslashes .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="pg_fetch_all">
    <description><![CDATA[   pg_fetch_all returns an array that  contains all rows (tuples/records) in result resource. It returns   , if there are no rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_query($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$arr = pg_fetch_all($result);

var_dump($arr);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_fetch_array">
    <description><![CDATA[   pg_fetch_array returns an array that  corresponds to the fetched row (tuples/records). It returns   , if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 

$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_query($conn, "SELECT author, email FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$arr = pg_fetch_array($result, 0, PGSQL_NUM);
echo $arr[0] . " <- Row 1 Author\n";
echo $arr[1] . " <- Row 1 E-mail\n";

// As of PHP 4.1.0, the row parameter is optional; NULL can be passed instead,
// to pass a result_type.  Successive calls to pg_fetch_array will return the
// next row.
$arr = pg_fetch_array($result, NULL, PGSQL_ASSOC);
echo $arr["author"] . " <- Row 2 Author\n";
echo $arr["email"] . " <- Row 2 E-mail\n";

$arr = pg_fetch_array($result);
echo $arr["author"] . " <- Row 3 Author\n";
echo $arr[1] . " <- Row 3 E-mail\n";

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_18" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="pg_fetch_assoc">
    <description><![CDATA[   pg_fetch_assoc returns an associative array that  corresponds to the fetched row (tuples/records). It returns   , if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
$conn = pg_connect("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_query($conn, "SELECT id, author, email FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

while ($row = pg_fetch_assoc($result)) {
    echo $row['id'];
    echo $row['author'];
    echo $row['email'];
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_18" />
    </properties>
    
  </element>
  <element kind="function" name="pg_fetch_object">
    <description><![CDATA[   pg_fetch_object returns an object with  properties that correspond to the fetched row. It returns  if there are no more rows or error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 

$database = "store";

$db_conn = pg_connect("host=localhost port=5432 dbname=$database");
if (!$db_conn) {
    echo "Failed connecting to postgres database $database\n";
    exit;
}

$qu = pg_query($db_conn, "SELECT * FROM books ORDER BY author");

$row = 0; // postgres needs a row counter 

while ($data = pg_fetch_object($qu, $row)) {
    echo $data->author . " (";
    echo $data->year . "): ";
    echo $data->title . "<br />";
    $row++;
}

pg_free_result($qu);
pg_close($db_conn);

?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_18" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="pg_fetch_result">
    <description><![CDATA[   pg_fetch_result returns values from a   result resource returned by   pg_query . row  is integer. field is field name (string)  or field index (integer). The row  and field specify what cell in the table  of results to return.  Row numbering starts from 0.  Instead of  naming the field, you may use the field index as an unquoted  number.  Field indices start from 0.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MCVE_19" />
      <property ref="MS SQL Server_15" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="pg_fetch_row">
    <description><![CDATA[   pg_fetch_row fetches one row of data from  the result associated with the specified   result resource.  The row (record) is  returned as an array.  Each result column is stored in an array  offset, starting at offset 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_query($conn, "SELECT author, email FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

while ($row = pg_fetch_row($result)) {
    echo "Author: $row[0]  E-mail: $row[1]";
    echo "<br />\n";
}
 
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_18" />
    </properties>
    
  </element>
  <element kind="function" name="pg_field_is_null">
    <description><![CDATA[   pg_field_is_null tests if a field is or  not. It returns 1 if the field in the given row is . It  returns 0 if the field in the given row is NOT . Field can  be specified as column index (number) or fieldname (string). Row  numbering starts at 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("dbname=publisher") or die ("Could not connect");
    $res = pg_query($dbconn, "select * from authors where author = 'Orwell'");
    if ($res) {
        if (pg_field_is_null($res, 0, "year") == 1) {
            echo "The value of the field year is null.\n";
        }
        if (pg_field_is_null($res, 0, "year") == 0) {
            echo "The value of the field year is not null.\n";
      }
   }
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MCVE_19" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="pg_field_name">
    <description><![CDATA[   pg_field_name returns the name of the field  occupying the given field_number in the  given PostgreSQL result resource.  Field  numbering starts from 0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("dbname=publisher") or die("Could not connect");

    $res = pg_query($dbconn, "select * from authors where author = 'Orwell'");
    $i = pg_num_fields($res);
    for ($j = 0; $j < $i; $j++) {
        echo "column $j\n";
        $fieldname = pg_field_name($res, $j);
        echo "fieldname: $fieldname\n";
        echo "printed length: " . pg_field_prtlen($res, $fieldname) . " characters\n";
        echo "storage length: " . pg_field_size($res, $j) . " bytes\n";
        echo "field type: " . pg_field_type($res, $j) . " \n\n";
    }
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="pg_field_num">
    <description><![CDATA[   pg_field_num will return the number of the  column (field) slot that corresponds to the   field_name in the given PostgreSQL   result resource.  Field numbering starts  at 0.  This function will return -1 on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FDF_21" />
    </properties>
    
  </element>
  <element kind="function" name="pg_field_prtlen">
    <description><![CDATA[   pg_field_prtlen returns the actual printed  length (number of characters) of a specific value in a PostgreSQL   result .  Row numbering starts at 0.  This  function will return -1 on an error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="ODBC_13" />
      <property kind="parameter" name="field_name_or_number" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_field_size">
    <description><![CDATA[   pg_field_size returns the internal storage  size (in bytes) of the field number in the given PostgreSQL   result . Field numbering starts at 0. A  field size of -1 indicates a variable length field. This function  will return on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="pg_field_type">
    <description><![CDATA[   pg_field_type returns a string containing the  type name of the given field_number in the  given PostgreSQL result resource.  Field  numbering starts at 0.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="pg_field_type_oid">
    <description><![CDATA[   pg_field_type_oid returns an integer containing the  type ID the given field_number in the  given PostgreSQL result resource.  Field  numbering starts at 0.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="pg_free_result">
    <description><![CDATA[   pg_free_result only needs to be called if you  are worried about using too much memory while your script is  running. All result memory will automatically be freed when the  script is finished. But, if you are sure you are not going to  need the result data anymore in a script, you may call   pg_free_result with the   result resource as an argument and the  associated result memory will be freed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_get_notify">
    <description><![CDATA[   pg_get_notify gets notify message sent by   SQL command. To receive notify  messages, SQL command must be  issued. If there is notify message on the connection, array  contains message name and backend PID is returned. If there is no  message, is returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

// Listen 'author_updated' message from other processes
pg_query($conn, 'LISTEN author_updated;');
$notify = pg_get_notify($conn);
if (!$notify) {
    echo "No messages\n";
} else {
    print_r($notify);
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="pg_get_pid">
    <description><![CDATA[   pg_get_pid gets backend (database server  process) PID. PID is useful to check if  message is sent from other process or not.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

// Backend process PID. Use PID with pg_get_notify()
$pid = pg_get_pid($conn);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_get_result">
    <description><![CDATA[   pg_get_result get result resource from async  query executed by   pg_send_query . pg_send_query  can send multiple queries to PostgreSQL server and   pg_get_result is used to get query result  one by one. It returns result resource. If there is no more  results, it returns .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_host">
    <description><![CDATA[   pg_host returns the host name of the given  PostgreSQL connection resource is  connected to.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_insert">
    <description><![CDATA[   pg_insert inserts the values of assoc_array   into the table specified by table_name .   table_name must at least have as many columns as   assoc_array has elements. The fieldnames as  well as the fieldvalues in table_name  must match the indices and values of assoc_array .    If options is specified, pg_insert  is applied to assoc_array with specified option.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
    $dbconn = pg_connect('dbname=foo');
    // This is safe, since $_POST is converted automatically
    $res = pg_insert($dbconn, 'post_log', $_POST);
    if ($res) {
        echo "POST data is successfully logged\n";
    } else {
        echo "User must have sent wrong inputs\n";
    }
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
      <property ref="PostgreSQL_3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pg_last_error">
    <description><![CDATA[   pg_last_error returns the last error message  for given connection .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_last_notice">
    <description><![CDATA[   pg_last_notice returns the last notice  message from the PostgreSQL server specified by   connection . The PostgreSQL server sends notice  messages in several cases, e.g. if the transactions can't be continued.  With pg_last_notice , you can avoid issuing useless  queries, by checking whether the notice is related to the transaction  or not.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_last_oid">
    <description><![CDATA[   pg_last_oid is used to retrieve the   assigned to an inserted tuple (record) if  the result resource is used from the last command sent via   pg_query and was an SQL INSERT.  Returns a  positive integer if there was a valid .  It  returns if an error occurs or the last command sent via   pg_query was not an INSERT or INSERT is  failed.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_close">
    <description><![CDATA[   pg_lo_close closes a Large  Object. large_object is a resource for the  large object from pg_lo_open .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="large_object" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_create">
    <description><![CDATA[   pg_lo_create creates a Large  Object and returns the of the large  object. connection specifies a valid  database connection opened by pg_connect or   pg_pconnect .  PostgreSQL access modes  INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the  object is created always with both read and write  access. INV_ARCHIVE has been removed from PostgreSQL itself  (version 6.3 and above). It returns large object oid,  otherwise it returns if an error occurred.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_export">
    <description><![CDATA[  The oid argument specifies oid of the  large object to export and the pathname  argument specifies the pathname of the file. It returns if  an error occurred, otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_26" />
      <property kind="parameter" name="oid" type="int" required="1" />
      <property ref="Filesystem_21" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_import">
    <description><![CDATA[  The pathname argument specifies the  pathname of the file to be imported as a large object. It returns   if an error occurred, oid of the just created large  object otherwise.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_26" />
      <property ref="Filesystem_21" />
      <property ref="Filesystem_21" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_open">
    <description><![CDATA[   pg_lo_open opens a Large Object and  returns large object resource. The resource encapsulates  information about the connection.   oid specifies a valid large object oid and   mode can be either "r", "w", or "rw". It  returns if there is an error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_1" />
      <property ref="PostgreSQL_8" />
      <property ref="Bzip2_6" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_read">
    <description><![CDATA[   pg_lo_read reads at most   len (defaults to 8192) bytes from a large object and  returns it as a string. large_object specifies a  valid large object resource and len  specifies the maximum allowable size of the large object  segment. It returns if there is an error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="PostgreSQL_7" />
      <property ref="Direct IO_9" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_read_all">
    <description><![CDATA[   pg_lo_read_all reads a large object and passes  it straight through to the browser after sending all pending  headers. Mainly intended for sending binary data like images or  sound. It returns number of bytes read. It returns , if an  error occurred.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PostgreSQL_7" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_seek">
    <description><![CDATA[   pg_lo_seek seeks position of large object  resource. whence is PGSQL_SEEK_SET,  PGSQL_SEEK_CUR or PGSQL_SEEK_END.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PostgreSQL_7" />
      <property ref="Arrays_35" />
      <property ref="Direct IO_7" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_tell">
    <description><![CDATA[   pg_lo_tell returns current position (offset  from the beginning of large object).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PostgreSQL_7" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_unlink">
    <description><![CDATA[   pg_lo_unlink deletes a large object with the   oid .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="PostgreSQL_8" />
    </properties>
    
  </element>
  <element kind="function" name="pg_lo_write">
    <description><![CDATA[   pg_lo_write writes at most to a large object  from a variable data and returns the number  of bytes actually written, or in the case of an error.   large_object is a large object resource  from pg_lo_open .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="PostgreSQL_7" />
      <property ref="Bzip2_7" />
      <property ref="Direct IO_9" />
    </properties>
    
  </element>
  <element kind="function" name="pg_meta_data">
    <description><![CDATA[   pg_meta_data returns table definition for   as an array. If there is error, it  returns  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("dbname=publisher") or die("Could not connect");

    $meta = pg_meta_data($dbconn, 'authors');
    if (is_array($meta)) {
        echo '<pre>';
        var_dump($meta);
        echo '</pre>';
    }
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
    </properties>
    
  </element>
  <element kind="function" name="pg_num_fields">
    <description><![CDATA[   pg_num_fields returns the number of fields  (columns) in a PostgreSQL result . The  argument is a result resource returned by   pg_query . This function will return -1 on  error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_num_rows">
    <description><![CDATA[   pg_num_rows will return the number of rows in  a PostgreSQL result resource.   result is a query result resource returned  by pg_query . This function will return -1 on  error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_options">
    <description><![CDATA[   pg_options will return a string containing  the options specified on the given PostgreSQL   connection resource.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_parameter_status">
    <description><![CDATA[   pg_parameter_status returns a string with the  current param_name value. Returns on  failure.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_26" />
      <property ref="MS SQL Server_2" />
    </properties>
    
  </element>
  <element kind="function" name="pg_pconnect">
    <description><![CDATA[   pg_pconnect opens a connection to a  PostgreSQL database. It returns a connection resource that is  needed by other PostgreSQL functions.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="PostgreSQL_1" />
      <property ref="PostgreSQL_2" />
    </properties>
    
  </element>
  <element kind="function" name="pg_ping">
    <description><![CDATA[   pg_ping ping database connection, try to  reconnect if it is broken. It returns if connection is  alive, otherwise .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
$conn = pg_pconnect("dbname=publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

if (!pg_ping($conn))
    die("Connection is broken\n");
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_port">
    <description><![CDATA[   pg_port returns the port number that the  given PostgreSQL connection resource is  connected to.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_put_line">
    <description><![CDATA[   pg_put_line sends a NULL-terminated string  to the PostgreSQL backend server. This is useful for example for  very high-speed inserting of data into a table, initiated by  starting a PostgreSQL copy-operation. That final NULL-character  is added automatically.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
    $conn = pg_pconnect("dbname=foo");
    pg_query($conn, "create table bar (a int4, b char(16), d float8)");
    pg_query($conn, "copy bar from stdin");
    pg_put_line($conn, "3\thello world\t4.5\n");
    pg_put_line($conn, "4\tgoodbye world\t7.11\n");
    pg_put_line($conn, "\\.\n");
    pg_end_copy($conn);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
      <property ref="Cyrus IMAP_1" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="pg_query">
    <description><![CDATA[   pg_query returns a query result resource if  query could be executed.  It returns on failure or if  connection is not a valid connection. Details about the error can  be retrieved using the pg_last_error  function if connection is valid.   pg_query sends an SQL statement to  the PostgreSQL database specified by the   connection resource. The   connection must be a valid connection that  was returned by pg_connect or   pg_pconnect . The return value of this  function is an query result resource to be used to access the  results from other PostgreSQL functions such as   pg_fetch_array .    ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="pg_result_error">
    <description><![CDATA[   pg_result_error returns error message  associated with result resource. Therefore,  user has better chance to get better error message than   pg_last_error .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_result_seek">
    <description><![CDATA[   pg_result_seek set internal row offset in  result resource.  It returns , if there is error.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="pg_result_status">
    <description><![CDATA[   pg_result_status returns status of result  resource. Possible return values are PGSQL_EMPTY_QUERY,  PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_TO,  PGSQL_COPY_FROM, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR and  PGSQL_FATAL_ERROR.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="pg_select">
    <description><![CDATA[   pg_select selects records specified by   which has   . For successful query, it returns  array contains all records and fields that match the condition  specified by . If   is specified,   pg_convert is applied to   with specified option.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
    $db = pg_connect('dbname=foo');
    // This is safe, since $_POST is converted automatically
    $rec = pg_select($db, 'post_log', $_POST);
    if ($rec) {
        echo "Records selected\n";
        var_dump($rec);
    } else {
        echo "User must have sent wrong inputs\n";
    }
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
      <property ref="PostgreSQL_3" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pg_send_query">
    <description><![CDATA[   pg_send_query send asynchronous query to the   connection . Unlike   pg_query , it can send multiple query to  PostgreSQL and get the result one by one using   pg_get_result . Script execution is not blocked  while query is executing. Use   pg_connection_busy to check connection is  busy (i.e. query is executing). Query may be cancelled by calling   pg_cancel_query .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbconn = pg_connect("dbname=publisher") or die("Could not connect");

    if (!pg_connection_busy($dbconn)) {
        pg_send_query($dbconn, "select * from authors; select count(*) from authors;");
    }
    
    $res1 = pg_get_result($dbconn);
    echo "First call to pg_get_result(): $res1\n";
    $rows1 = pg_num_rows($res1);
    echo "$res1 has $rows1 records\n\n";
    
    $res2 = pg_get_result($dbconn);
    echo "second call to pg_get_result(): $res2\n";
    $rows2 = pg_num_rows($res2);
    echo "$res2 has $rows2 records\n";
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Cyrus IMAP_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="pg_set_client_encoding">
    <description><![CDATA[   pg_set_client_encoding sets the client  encoding and returns 0 if success or -1 if error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ClibPDF_52" />
      <property ref="Cyrus IMAP_1" />
      <property ref="ClibPDF_52" />
    </properties>
    
  </element>
  <element kind="function" name="pg_trace">
    <description><![CDATA[   pg_trace enables tracing of the PostgreSQL  frontend/backend communication to a debugging file specified as   pathname . To fully understand the results,  one needs to be familiar with the internals of PostgreSQL  communication protocol.  For those who are not, it can still be  useful for tracing errors in queries sent to the server, you  could do for example and see what query actually were sent to the  PostgreSQL server. For more information, refer to PostgreSQL  manual.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Filesystem_21" />
      <property ref="PHP Options/Info_10" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_tty">
    <description><![CDATA[   pg_tty returns the tty name that server  side debugging output is sent to on the given PostgreSQL   connection resource.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_1" />
    </properties>
    
  </element>
  <element kind="function" name="pg_unescape_bytea">
    <description><![CDATA[   pg_unescape_bytea unescapes string from  bytea datatype.  It returns unescaped string (binary).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="pg_untrace">
    <description><![CDATA[  Stop tracing started by pg_trace .   connection specifies the connection that was  traced and defaults to the last one opened.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="pg_update">
    <description><![CDATA[   pg_update updates records that matches   with . If   is specified,   pg_convert is applied to   with specified options.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
    $db = pg_connect('dbname=foo');
    $data = array('field1'=>'AA', 'field2'=>'BB');
    
    // This is safe, since $_POST is converted automatically
    $res = pg_update($db, 'post_log', $_POST, $data);
    if ($res) {
        echo "Data is updated: $res\n";
    } else {
        echo "User must have sent wrong inputs\n";
    }
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Cyrus IMAP_1" />
      <property ref="FrontBase_16" />
      <property kind="parameter" name="data" type="array" required="1" />
      <property kind="parameter" name="condition" type="array" required="1" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="pg_version">
    <description><![CDATA[   pg_version returns an array with the client, protocol  and server version. Protocol and server versions are only avaliable if PHP  was compiled with PostgreSQL 7.4 or later.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
</group>
<group name="Printer">
  <description><![CDATA[Printer Functions]]></description>
  <element kind="function" name="printer_abort">
    <description><![CDATA[  This function deletes the printers spool file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_abort($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_close">
    <description><![CDATA[  This function closes the printer connection.   printer_close also closes the active device  context.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_create_brush">
    <description><![CDATA[  The function creates a new brush and returns a handle to it. A brush  is used to fill shapes. For an example see   printer_select_brush . color   must be a color in RGB hex format, i.e. "000000" for black,   style must be one of the following constants:    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Image_51" />
      <property kind="parameter" name="color" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_create_dc">
    <description><![CDATA[  The function creates a new device context. A device context is used  to customize the graphic objects of the document.   handle must be a valid handle to a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle);
printer_start_page($handle);

printer_create_dc($handle);
/* do some stuff with the dc */
printer_set_option($handle, PRINTER_TEXT_COLOR, "333333");
printer_draw_text($handle, 1, 1, "text");
printer_delete_dc($handle);

/* create another dc */
printer_create_dc($handle);
printer_set_option($handle, PRINTER_TEXT_COLOR, "000000");
printer_draw_text($handle, 1, 1, "text");
/* do some stuff with the dc */

printer_delete_dc($handle);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_create_font">
    <description><![CDATA[  The function creates a new font and returns a handle to it. A font is  used to draw text. For an example see   printer_select_font . face   must be a string specifying the font face. height   specifies the font height, and width the font  width. The font_weight specifies the font weight  (400 is normal), and can be one of the following predefined constants.    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="face" type="string" required="1" />
      <property ref="Image_45" />
      <property ref="Image_44" />
      <property kind="parameter" name="font_weight" type="int" required="1" />
      <property kind="parameter" name="italic" type="bool" required="1" />
      <property kind="parameter" name="underline" type="bool" required="1" />
      <property kind="parameter" name="strikeout" type="bool" required="1" />
      <property ref="ClibPDF_40" />
    </properties>
    
  </element>
  <element kind="function" name="printer_create_pen">
    <description><![CDATA[  The function creates a new pen and returns a handle to it. A pen is  used to draw lines and curves. For an example see   printer_select_pen . color   must be a color in RGB hex format, i.e. "000000" for black,   width specifies the width of the pen whereas   style must be one of the following constants:    ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Image_51" />
      <property ref="Image_44" />
      <property ref="Printer_1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_delete_brush">
    <description><![CDATA[  The function deletes the selected brush. For an example see   printer_select_brush .   handle   must be a valid handle to a brush.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_delete_dc">
    <description><![CDATA[  The function deletes the device context.  For an example see printer_create_dc .   handle   must be a valid handle to a printer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_delete_font">
    <description><![CDATA[  The function deletes the selected font. For an example see   printer_select_font .    handle must be a valid  handle to a font.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_delete_pen">
    <description><![CDATA[  The function deletes the selected pen. For an example see   printer_select_pen .     handle must be a valid  handle to a pen.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_bmp">
    <description><![CDATA[  The function simply draws an bmp the bitmap   filename at position x ,   y . handle must be a  valid handle to a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

printer_draw_bmp($handle, "c:\\image.bmp", 1, 1);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
      <property ref="Apache_3" />
      <property ref="Image_17" />
      <property ref="Image_18" />
      <property ref="Exif_5" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_chord">
    <description><![CDATA[  The function simply draws an chord.   handle must be a valid handle to a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000");
printer_select_pen($handle, $pen);

$brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF");
printer_select_brush($handle, $brush);

printer_draw_chord($handle, 1, 1, 500, 500, 1, 1, 500, 1);

printer_delete_brush($brush);
printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);   
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
      <property kind="parameter" name="rec_x" type="int" required="1" />
      <property kind="parameter" name="rec_y" type="int" required="1" />
      <property kind="parameter" name="rec_x1" type="int" required="1" />
      <property kind="parameter" name="rec_y1" type="int" required="1" />
      <property kind="parameter" name="rad_x" type="int" required="1" />
      <property kind="parameter" name="rad_y" type="int" required="1" />
      <property kind="parameter" name="rad_x1" type="int" required="1" />
      <property kind="parameter" name="rad_y1" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_elipse">
    <description><![CDATA[  The function simply draws an ellipse.   handle must be a valid handle to a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000");
printer_select_pen($handle, $pen);

$brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF");
printer_select_brush($handle, $brush);

printer_draw_elipse($handle, 1, 1, 500, 500);

printer_delete_brush($brush);
printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);     
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
      <property kind="parameter" name="ul_x" type="int" required="1" />
      <property kind="parameter" name="ul_y" type="int" required="1" />
      <property kind="parameter" name="lr_x" type="int" required="1" />
      <property kind="parameter" name="lr_y" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_line">
    <description><![CDATA[  The function simply draws a line from position   from_x , from_y to  position to_x , to_y   using the selected pen. printer_handle must  be a valid handle to a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 30, "000000");
printer_select_pen($handle, $pen);

printer_draw_line($handle, 1, 10, 1000, 10);
printer_draw_line($handle, 1, 60, 500, 60);

printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="printer_handle" type="resource" required="1" />
      <property kind="parameter" name="from_x" type="int" required="1" />
      <property kind="parameter" name="from_y" type="int" required="1" />
      <property kind="parameter" name="to_x" type="int" required="1" />
      <property kind="parameter" name="to_y" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_pie">
    <description><![CDATA[  The function simply draws an pie.   handle must be a valid handle to a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000");
printer_select_pen($handle, $pen);

$brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF");
printer_select_brush($handle, $brush);

printer_draw_pie($handle, 1, 1, 500, 500, 1, 1, 500, 1);

printer_delete_brush($brush);
printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle); 
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
      <property ref="Printer_7" />
      <property ref="Printer_8" />
      <property ref="Printer_9" />
      <property ref="Printer_10" />
      <property kind="parameter" name="rad1_x" type="int" required="1" />
      <property kind="parameter" name="rad1_y" type="int" required="1" />
      <property kind="parameter" name="rad2_x" type="int" required="1" />
      <property kind="parameter" name="rad2_y" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_rectangle">
    <description><![CDATA[  The function simply draws a rectangle.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000");
printer_select_pen($handle, $pen);

$brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF");
printer_select_brush($handle, $brush);

printer_draw_rectangle($handle, 1, 1, 500, 500);

printer_delete_brush($brush);
printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
      <property ref="Printer_15" />
      <property ref="Printer_16" />
      <property ref="Printer_17" />
      <property ref="Printer_18" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_roundrect">
    <description><![CDATA[  The function simply draws a rectangle with rounded corners.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000");
printer_select_pen($handle, $pen);

$brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF");
printer_select_brush($handle, $brush);

printer_draw_roundrect($handle, 1, 1, 500, 500, 200, 200);

printer_delete_brush($brush);
printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="FTP_8" />
      <property ref="Printer_15" />
      <property ref="Printer_16" />
      <property ref="Printer_17" />
      <property ref="Printer_18" />
      <property ref="Image_44" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="printer_draw_text">
    <description><![CDATA[  The function simply draws text at position   x , y using the selected  font. printer_handle must be a valid handle to  a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$font = printer_create_font("Arial", 72, 48, 400, false, false, false, 0);
printer_select_font($handle, $font);
printer_draw_text($handle, "test", 10, 10);
printer_delete_font($font);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Printer_19" />
      <property ref="ClibPDF_12" />
      <property ref="Image_17" />
      <property ref="Image_18" />
    </properties>
    
  </element>
  <element kind="function" name="printer_end_doc">
    <description><![CDATA[  Closes a new document in the printer spooler. The document  is now ready for printing. For an example see   printer_start_doc .   handle must be a valid handle to a printer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_end_page">
    <description><![CDATA[  The function closes the active page in the active document. For an  example see printer_start_doc .   handle must be a valid handle to a printer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_get_option">
    <description><![CDATA[  The function retrieves the configuration setting of option .   handle must be a valid handle to a printer.  Take a look at printer_set_option for the settings that can  be retrieved, additionally the following settings can be retrieved:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
echo printer_get_option($handle, PRINTER_DRIVERVERSION);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="FTP_8" />
      <property kind="parameter" name="option" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_list">
    <description><![CDATA[  The function enumerates available printers and their capabilities.   level sets the level of information request.  Can be 1,2,4 or 5. enumtype must be one of the  following predefined constants:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* detect locally shared printer */
var_dump(printer_list(PRINTER_ENUM_LOCAL | PRINTER_ENUM_SHARED));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="enumtype" type="int" required="1" />
      <property ref="Hyperwave API_2" />
      <property ref="Errors and Logging_5" />
    </properties>
    
  </element>
  <element kind="function" name="printer_logical_fontheight">
    <description><![CDATA[  The function calculates the logical font height of   height . handle must  be a valid handle to a printer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
echo printer_logical_fontheight($handle, 72);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
      <property ref="Image_45" />
    </properties>
    
  </element>
  <element kind="function" name="printer_open">
    <description><![CDATA[  This function tries to open a connection to the printer   devicename , and returns a handle on success  or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open("HP Deskjet 930c");
$handle = printer_open();
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="devicename" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="printer_select_brush">
    <description><![CDATA[  The function selects a brush as the active drawing object of the actual  device context. A brush is used to fill shapes. If you draw an rectangle  the brush is used to draw the shapes, while the pen is used to draw the  border.  If you haven't selected a brush before drawing shapes, the shape won't  be filled. printer_handle must be a valid handle  to a printer. brush_handle must be a valid handle  to a brush.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000");
printer_select_pen($handle, $pen);
$brush = printer_create_brush(PRINTER_BRUSH_CUSTOM, "c:\\brush.bmp");
printer_select_brush($handle, $brush);

printer_draw_rectangle($handle, 1, 1, 500, 500);

printer_delete_brush($brush);

$brush = printer_create_brush(PRINTER_BRUSH_SOLID, "000000");
printer_select_brush($handle, $brush);
printer_draw_rectangle($handle, 1, 501, 500, 1001);
printer_delete_brush($brush);

printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Printer_19" />
      <property kind="parameter" name="brush_handle" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_select_font">
    <description><![CDATA[  The function selects a font to draw text.   printer_handle must be a valid handle to a  printer. font_handle must be a valid handle  to a font.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$font = printer_create_font("Arial", 148, 76, PRINTER_FW_MEDIUM, false, false, false, -50);
printer_select_font($handle, $font);
printer_draw_text($handle, "PHP is simply cool", 40, 40);
printer_delete_font($font);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Printer_19" />
      <property kind="parameter" name="font_handle" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_select_pen">
    <description><![CDATA[  The function selects a pen as the active drawing object of the actual  device context. A pen is used to draw lines and curves. I.e. if you draw  a single line the pen is used. If you draw an rectangle the pen is used  to draw the borders, while the brush is used to fill the shape.  If you haven't selected a pen before drawing shapes, the shape won't be  outlined. printer_handle must be a valid handle  to a printer. pen_handle must be a valid handle  to a pen.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

$pen = printer_create_pen(PRINTER_PEN_SOLID, 30, "2222FF");
printer_select_pen($handle, $pen);

printer_draw_line($handle, 1, 60, 500, 60);

printer_delete_pen($pen);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Printer_19" />
      <property kind="parameter" name="pen_handle" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="printer_set_option">
    <description><![CDATA[  The function sets the following options for the current connection.   handle must be a valid handle to a printer.  For option can be one of the following constants:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_set_option($handle, PRINTER_SCALE, 75);
printer_set_option($handle, PRINTER_TEXT_ALIGN, PRINTER_TA_LEFT);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
      <property ref="CURL_7" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="printer_start_doc">
    <description><![CDATA[  The function creates a new document in the printer spooler. A document  can contain multiple pages, it's used to schedule the print job in the  spooler. handle must be a valid handle to a  printer. The optional parameter document can be  used to set an alternative document name.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_start_doc($handle, "My Document");
printer_start_page($handle);

printer_end_page($handle);
printer_end_doc($handle);
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
      <property kind="parameter" name="document" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="printer_start_page">
    <description><![CDATA[  The function creates a new page in the active document. For an  example see printer_start_doc .   handle must be a valid handle to a printer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="printer_write">
    <description><![CDATA[  Writes content directly to the printer.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$handle = printer_open();
printer_write($handle, "Text to print");
printer_close($handle);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
      <property ref="ClibPDF_7" />
    </properties>
    
  </element>
</group>
<group name="Program Execution">
  <description><![CDATA[Program Execution Functions]]></description>
  <element kind="function" name="escapeshellarg">
    <description><![CDATA[   escapeshellarg adds single quotes around a string  and quotes/escapes any existing single quotes allowing you to pass a  string directly to a shell function and having it be treated as a single  safe argument.  This function should be used to escape individual  arguments to shell functions coming from user input.  The shell functions  include exec , system and the   .  A standard use would be:]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="arg" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="escapeshellcmd">
    <description><![CDATA[   escapeshellcmd escapes any characters in a  string that might be used to trick a shell command into executing  arbitrary commands.  This function should be used to make sure  that any data coming from user input is escaped before this data  is passed to the exec or   system functions, or to the . A standard use would be:]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_7" />
    </properties>
    
  </element>
  <element kind="function" name="exec">
    <description><![CDATA[   exec executes the given   command , however it does not output  anything.  It simply returns the last line from the result of the  command.  If you need to execute a command and have all the data  from the command passed directly back without any interference,  use the passthru function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// outputs the username that owns the running php/httpd process
// (on a system with the "whoami" executable in the path)
echo exec('whoami');
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_7" />
      <property kind="parameter" name="output" type="array"  />
      <property kind="parameter" name="return_var" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="passthru">
    <description><![CDATA[  The passthru function is similar to the   exec function in that it executes a   command .  If the   return_var argument is present, the return  status of the Unix command will be placed here.  This function  should be used in place of exec or   system when the output from the Unix command  is binary data which needs to be passed directly back to the  browser.  A common use for this is to execute something like the  pbmplus utilities that can output an image stream directly.  By  setting the Content-type to and  then calling a pbmplus program to output a gif, you can create  PHP scripts that output images directly.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="FTP_7" />
      <property ref="Program Execution_3" />
    </properties>
    
  </element>
  <element kind="function" name="proc_close">
    <description><![CDATA[   proc_close is similar to pclose  except that it only works on processes opened by   proc_open .   proc_close waits for the process to terminate, and  returns its exit code.  If you have open pipes to that process, you  should fclose them prior to calling this function in  order to avoid a deadlock - the child process may not be able to exit  while the pipes are open.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="process" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="proc_get_status">
    <description><![CDATA[   proc_get_status fetches data about a  process opened using proc_open . The  collected information is returned in an array containing the  following elements:  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Program Execution_4" />
    </properties>
    
  </element>
  <element kind="function" name="proc_nice">
    <description><![CDATA[   proc_nice changes the priority of the current  process by the amount specified in increment . A  positive increment will lower the priority of the  current process, whereas a negative increment  will raise the priority. If an error occurs, like the user lacks  permission to change the priority, an error of level   is generated and is returned.  Otherwise, is returned.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="increment" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="proc_open">
    <description><![CDATA[   proc_open is similar to popen  but provides a much greater degree of control over the program execution.   cmd is the command to be executed by the shell.   descriptorspec is an indexed array where the  key represents the descriptor number and the value represents how PHP  will pass that descriptor to the child process.   pipes will be set to an indexed array of file  pointers that correspond to PHP's end of any pipes that are created.  The return value is a resource representing the process; you should  free it using proc_close when you are finished  with it.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="cmd" type="string" required="1" />
      <property kind="parameter" name="descriptorspec" type="array" required="1" />
      <property kind="parameter" name="pipes" type="array" required="1" />
      <property kind="parameter" name="cwd" type="string"  />
      <property kind="parameter" name="env" type="array"  />
      <property kind="parameter" name="other_options" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="proc_terminate">
    <description><![CDATA[  Signals a process (created using   proc_open ) that it should terminate.   proc_terminate returns immediately and does not wait  for the process to terminate.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Program Execution_4" />
      <property kind="parameter" name="signal" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="shell_exec">
    <description><![CDATA[  This function is identical to the .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$output = shell_exec('ls -lart');
echo "<pre>$output</pre>";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Program Execution_6" />
    </properties>
    
  </element>
  <element kind="function" name="system">
    <description><![CDATA[   system is just like the C version of the  function in that it executes the given   command and outputs the result.  If a  variable is provided as the second argument, then the return  status code of the executed command will be written to this  variable.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo '<pre>';

// Outputs all the result of shellcommand "ls", and returns
// the last output line into $last_line. Stores the return value
// of the shell command in $retval.
$last_line = system('ls', $retval);

// Printing additional info
echo '
</pre>
<hr />Last line of the output: ' . $last_line . '
<hr />Return value: ' . $retval;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_7" />
      <property ref="Program Execution_3" />
    </properties>
    
  </element>
</group>
<group name="Pspell">
  <description><![CDATA[Pspell Functions]]></description>
  <element kind="function" name="pspell_add_to_personal">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/var/dictionaries/custom.pws");
$pspell_link = pspell_new_config($pspell_config);

pspell_add_to_personal($pspell_link, "Vlad");
pspell_save_wordlist($pspell_link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Aspell_2" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_add_to_session">
    <properties>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Aspell_2" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_check">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_link = pspell_new("en");

if (pspell_check($pspell_link, "testt")) {
    echo "This is a valid spelling";
} else {
    echo "Sorry, wrong spelling";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Aspell_1" />
      <property ref="Aspell_2" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_clear_session">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/var/dictionaries/custom.pws");
$pspell_link = pspell_new_config($pspell_config);

pspell_add_to_personal($pspell_link, "Vlad");
pspell_clear_session($pspell_link);
pspell_save_wordlist($pspell_link);    //"Vlad" will not be saved
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_create">
    <description><![CDATA[  The language parameter is the language code which consists of the  two letter ISO 639 language code and an optional two letter ISO  3166 country code after a dash or underscore.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/var/dictionaries/custom.pws");
pspell_config_repl($pspell_config, "/var/dictionaries/custom.repl");
$pspell_link = pspell_new_personal($pspell_config, "en");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Hyperwave API_3" />
      <property kind="parameter" name="spelling" type="string"  />
      <property kind="parameter" name="jargon" type="string"  />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_data_dir">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="conf" type="int" required="1" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_dict_dir">
    <properties>
      <property ref="ret_bool" />
      <property ref="Pspell_3" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_ignore">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_ignore($pspell_config, 5);
$pspell_link = pspell_new_config($pspell_config);
pspell_check($pspell_link, "abcd");    //will not result in an error
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_mode">
    <description><![CDATA[  The mode parameter is the mode in which spellchecker will work.  There are several modes available:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_mode($pspell_config, PSPELL_FAST);
$pspell_link = pspell_new_config($pspell_config);
pspell_check($pspell_link, "thecat");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_personal">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/var/dictionaries/custom.pws");
$pspell_link = pspell_new_config($pspell_config);
pspell_check($pspell_link, "thecat");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Filesystem_5" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_repl">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/var/dictionaries/custom.pws");
pspell_config_repl($pspell_config, "/var/dictionaries/custom.repl");
$pspell_link = pspell_new_config($pspell_config);
pspell_check($pspell_link, "thecat");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Filesystem_5" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_runtogether">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_runtogether($pspell_config, true);
$pspell_link = pspell_new_config($pspell_config);
pspell_check($pspell_link, "thecat");
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Ncurses_56" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_config_save_repl">
    <properties>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property ref="Ncurses_56" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_new">
    <description><![CDATA[  The language parameter is the language code which consists of the  two letter ISO 639 language code and an optional two letter ISO  3166 country code after a dash or underscore.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_link = pspell_new("en", "", "", "", 
                           (PSPELL_FAST|PSPELL_RUN_TOGETHER));
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Hyperwave API_3" />
      <property ref="Pspell_1" />
      <property ref="Pspell_2" />
      <property ref="DOM XML_4" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_new_config">
    <description><![CDATA[  The config parameter is the one returned by   pspell_config_create when the config was created.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/var/dictionaries/custom.pws");
pspell_config_repl($pspell_config, "/var/dictionaries/custom.repl");
$pspell_link = pspell_new_config($pspell_config);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="config" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_new_personal">
    <description><![CDATA[  The personal parameter specifies the file where words added to the  personal list will be stored. It should be an absolute filename  beginning with '/' because otherwise it will be relative to $HOME,  which is "/root" for most systems, and is probably not what you want.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_link = pspell_new_personal ("/var/dictionaries/custom.pws", 
        "en", "", "", "", PSPELL_FAST|PSPELL_RUN_TOGETHER);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="IMAP_34" />
      <property ref="Hyperwave API_3" />
      <property ref="Pspell_1" />
      <property ref="Pspell_2" />
      <property ref="DOM XML_4" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_save_wordlist">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/tmp/dicts/newdict");
$pspell_link = pspell_new_config($pspell_config);

pspell_add_to_personal($pspell_link, "Vlad");
pspell_save_wordlist($pspell_link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_store_replacement">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_config = pspell_config_create("en");
pspell_config_personal($pspell_config, "/var/dictionaries/custom.pws");
pspell_config_repl($pspell_config, "/var/dictionaries/custom.repl");
$pspell_link = pspell_new_config($pspell_config);

pspell_store_replacement($pspell_link, $misspelled, $correct);
pspell_save_wordlist($pspell_link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Aspell_1" />
      <property kind="parameter" name="misspelled" type="string" required="1" />
      <property kind="parameter" name="correct" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="pspell_suggest">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$pspell_link = pspell_new("en");

if (!pspell_check($pspell_link, "testt")) {
    $suggestions = pspell_suggest($pspell_link, "testt");

    foreach ($suggestions as $suggestion) {
        echo "Possible spelling: $suggestion<br />"; 
    }
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Aspell_1" />
      <property ref="Aspell_2" />
    </properties>
    
  </element>
</group>
<group name="Rar">
  <description><![CDATA[Rar Functions]]></description>
  <element kind="function" name="Rar::extract">
    <description><![CDATA[   Rar::extract extracts entry's data to the   dir . It will create new file in the specified   dir with the name identical to the entry's name.  If parameter filepath is specified instead   dir , Rar::extract will extract  entry's data to the specified file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

$entry->extract('/dir/to'); // create /dir/to/Dir/file.txt
$entry->extract(false, '/dir/to/new_name.txt'); // create /dir/to/new_name.txt

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Filesystem_25" />
      <property kind="parameter" name="filepath" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getAttr">
    <description><![CDATA[   Rar::getAttr returns attributes of the archive  entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Can't open Rar archive");

$entry = rar_entry_get($rar_file, 'dir/in/the/archive') or die("Can't find such entry");

$host_os = $entry->getHostOs();
$attr = $entry->getAttr();

switch($host_os) {
    case RAR_HOST_MSDOS:
    case RAR_HOST_OS2:
    case RAR_HOST_WIN32:
    case RAR_HOST_MACOS:
        printf("%c%c%c%c%c%c\n",
                ($attr & 0x08) ? 'V' : '.',
                ($attr & 0x10) ? 'D' : '.',
                ($attr & 0x01) ? 'R' : '.',
                ($attr & 0x02) ? 'H' : '.',
                ($attr & 0x04) ? 'S' : '.',
                ($attr & 0x20) ? 'A' : '.');
        break;
    case RAR_HOST_UNIX:
    case RAR_HOST_BEOS:
        switch ($attr & 0xF000)
        {
            case 0x4000:
                printf("d");
                break;
            case 0xA000:
                printf("l");
                break;
            default:
                printf("-");
                break;
        }
        printf("%c%c%c%c%c%c%c%c%c\n",
                ($attr & 0x0100) ? 'r' : '-',
                ($attr & 0x0080) ? 'w' : '-',
                ($attr & 0x0040) ? (($attr & 0x0800) ? 's':'x'):(($attr & 0x0800) ? 'S':'-'),
                ($attr & 0x0020) ? 'r' : '-',
                ($attr & 0x0010) ? 'w' : '-',
                ($attr & 0x0008) ? (($attr & 0x0400) ? 's':'x'):(($attr & 0x0400) ? 'S':'-'),
                ($attr & 0x0004) ? 'r' : '-',
                ($attr & 0x0002) ? 'w' : '-',
                ($attr & 0x0001) ? 'x' : '-');
        break;
}

rar_close($rar_file);

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getCrc">
    <description><![CDATA[   Rar::getCrc returns CRC of the archive entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getFileTime">
    <description><![CDATA[   Rar::getFileTime returns entry last modification  time as string in format YYYY-MM-DD HH:II:SS.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getHostOs">
    <description><![CDATA[   Rar::getHostOs return code of the host OS of the  archive entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

switch ($entry->getHostOs()) {
    case RAR_HOST_MSDOS:
        echo "MS-DOS\n";
        break;
    case RAR_HOST_OS2:
        echo "OS2\n";
        break;
    case RAR_HOST_WIN32:
        echo "Win32\n";
        break;
    case RAR_HOST_MACOS:
        echo "MacOS\n";
        break;
    case RAR_HOST_UNIX:
        echo "Unix/Linux\n";
        break;
    case RAR_HOST_BEOS:
        echo "BeOS\n";
        break;
}

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getMethod">
    <description><![CDATA[   Rar::getMethod returns number of the method used when adding  current archive entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

echo "Method number: " . $entry->getMethod();

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getName">
    <description><![CDATA[   Rar::getName returns full name of the archive entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

echo "Entry name: " . $entry->getName();

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getPackedSize">
    <description><![CDATA[  Get packed size of the archive entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

echo "Packed size of " . $entry->getName() . " = " . $entry->getPackedSize() . " bytes";

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getUnpackedSize">
    <description><![CDATA[  Get unpacked size of the archive entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

echo "Unpacked size of " . $entry->getName() . " = " . $entry->getPackedSize() . " bytes";

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="Rar::getVersion">
    <description><![CDATA[  Get version of the archiver used to add the archive entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

echo "Rar (WinRAR) version used: " . $entry->getVersion();

?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="rar_close">
    <description><![CDATA[  Close Rar archive and free all allocated resources.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="rar_file" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="rar_entry_get">
    <description><![CDATA[  Get entry object from the Rar archive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die("Failed to find such entry");

print_r($entry);

?>]]></description>
      </property>
      <property kind="return" type="RarEntry" />	
      <property ref="Rar_2" />
      <property kind="parameter" name="entry_name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="rar_list">
    <description><![CDATA[  Get entries list from the Rar archive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rar_file = rar_open('example.rar') or die("Failed to open Rar archive");

$entries_list = rar_list($rar_file);

print_r($entries_list);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Rar_2" />
    </properties>
    
  </element>
  <element kind="function" name="rar_open">
    <description><![CDATA[  Open specified Rar archive and return Rar file resource.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
</group>
<group name="Readline">
  <description><![CDATA[GNU Readline]]></description>
  <element kind="function" name="readline">
    <description><![CDATA[  This function returns a single string from the user.  You may  specify a string with which to prompt the user.  The line  returned has the ending newline removed.  You must add this line  to the history yourself using   readline_add_history .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
//get 3 commands from user
for ($i=0; $i < 3; $i++) {
        $line = readline("Command: ");
        readline_add_history($line);
}

//dump history
print_r(readline_list_history());

//dump variables
print_r(readline_info());
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="prompt" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="readline_add_history">
    <description><![CDATA[  This function adds a line to the command line history.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="line" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="readline_callback_handler_install">
    <description><![CDATA[  Sets up a readline callback interface then prints   prompt and immediately returns. The   callback function takes one parameter; the user  input returned. Calling this function twice without removing the previous  callback interface will automatically and conveniently overwrite the old  interface.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function rl_callback($ret)
{
    global $c, $prompting;

    echo "You entered: $ret\n";
    $c++;

    if ($c > 10) {
        $prompting = false;
        readline_callback_handler_remove();
    } else {
        readline_callback_handler_install("[$c] Enter something: ", 'rl_callback');
    }
}

$c = 1;
$prompting = true;

readline_callback_handler_install("[$c] Enter something: ", 'rl_callback');

while ($prompting) {
    $n = stream_select($r = array(STDIN), $w = null, $e = null, null);
    if ($n && in_array(STDIN, $r)) {
        // read a character, will call the callback when a newline is entered
        readline_callback_read_char();
    }
}

echo "Prompting disabled. All done.\n";
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Readline_1" />
      <property ref="Arrays_21" />
    </properties>
    
  </element>
  <element kind="function" name="readline_callback_handler_remove">
    <description><![CDATA[  Removes a previously installed callback handler and restores terminal  settings.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="readline_callback_read_char">
    <description><![CDATA[  Reads a character of user input. When a line is received, this function  informs the readline callback interface installed using   readline_callback_handler_install that a line  is ready for input.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="readline_clear_history">
    <description><![CDATA[  This function clears the entire command line history.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="readline_completion_function">
    <description><![CDATA[  This function registers a completion function.  You must supply  the name of an existing function which accepts a partial command  line and returns an array of possible matches.  This is the same  kind of functionality you'd get if you hit your tab key while  using Bash.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_31" />
    </properties>
    
  </element>
  <element kind="function" name="readline_info">
    <description><![CDATA[  If called with no parameters, this function returns an array of  values for all the setting readline uses.  The elements will  be indexed by the following values: done, end, erase_empty_line,  library_version, line_buffer, mark, pending_input, point, prompt,  readline_name, and terminal_name.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="varname" type="string"  />
      <property kind="parameter" name="newvalue" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="readline_list_history">
    <description><![CDATA[  This function returns an array of the entire command line  history.  The elements are indexed by integers starting at zero.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="readline_on_new_line">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="readline_read_history">
    <description><![CDATA[  This function reads a command history from a file.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_38" />
    </properties>
    
  </element>
  <element kind="function" name="readline_redisplay">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="readline_write_history">
    <description><![CDATA[  This function writes the command history to a file.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_38" />
    </properties>
    
  </element>
</group>
<group name="Recode">
  <description><![CDATA[GNU Recode Functions]]></description>
  <element kind="function" name="recode_file">
    <description><![CDATA[  Recode the file referenced by file handle   input into the file referenced by file  handle output according to the recode   request .  Returns , if unable to  comply, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input = fopen('input.txt', 'r');
$output = fopen('output.txt', 'w');
recode_file("us..flat", $input, $output);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="request" type="string" required="1" />
      <property kind="parameter" name="input" type="resource" required="1" />
      <property kind="parameter" name="output" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="recode_string">
    <description><![CDATA[  Recode the string string according to  the recode request request . Returns the  recoded string or , if unable to perform the recode request.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo recode_string("us..flat", "The following character has a diacritical mark: &aacute;");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Recode_1" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
</group>
<group name="SESAM">
  <description><![CDATA[SESAM Database Functions]]></description>
  <element kind="function" name="sesam_affected_rows">
    <description><![CDATA[   result_id is a valid result id returned by   sesam_query .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = sesam_execimm("DELETE FROM PHONE WHERE LASTNAME = '" . strtoupper($name) . "'");
if (!$result) {
    /* ... error ... */
}
echo sesam_affected_rows($result).
    " entries with last name " . $name . " deleted.\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="result_id" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_commit">
    <description><![CDATA[  Returns: on success,   on errors  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (sesam_connect ("mycatalog", "myschema", "otto")) {
    if (!sesam_execimm ("INSERT INTO mytable VALUES (*, 'Small Test', <0, 8, 15>)"))
        die("insert failed");
    if (!sesam_commit())
        die("commit failed");
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_connect">
    <description><![CDATA[  Returns if a connection to the SESAM  database was made, or on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!sesam_connect ("mycatalog", "myschema", "otto")) {
    die("Unable to connect to SESAM");
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="catalog" type="string" required="1" />
      <property kind="parameter" name="schema" type="string" required="1" />
      <property ref="DB++_14" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_diagnostic">
    <description><![CDATA[  Returns an associative array of status and return codes for the  last SQL query/statement/command.  Elements of the array are:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Function which prints a formatted error message,
// displaying a pointer to the syntax error in the
// SQL statement
function PrintReturncode($exec_str) 
{
    $err = Sesam_Diagnostic();
    $colspan=4; // 4 cols for: sqlstate, errlin, errcol, rowcount
    if ($err["errlin"] == -1)
        --$colspan;
    if ($err["errcol"] == -1)
        --$colspan;
    if ($err["rowcount"] == 0)
        --$colspan;
    echo "<table border=\"1\">\n";
    echo "<tr><th colspan=\"" . $colspan . "\"><span class=\"spanred\">ERROR:</span> ".
         htmlspecialchars($err["errmsg"]) . "</th></tr>\n";
    if ($err["errcol"] >= 0) {
        echo "<tr><td colspan=\"" . $colspan . "\"><pre>\n";
        $errstmt = $exec_str . "\n";
        for ($lin=0; $errstmt != ""; ++$lin) {
            if ($lin != $err["errlin"]) { // $lin is less or greater than errlin
                if (!($i = strchr($errstmt, "\n")))
                    $i = "";
                $line = substr ($errstmt, 0, strlen($errstmt)-strlen($i)+1);
                $errstmt = substr($i, 1);
                if ($line != "\n")
                    echo htmlspecialchars($line);
            } else {
                if (! ($i = strchr ($errstmt, "\n")))
                    $i = "";
                $line = substr ($errstmt, 0, strlen ($errstmt)-strlen($i)+1);
                $errstmt = substr($i, 1);
                for ($col=0; $col < $err["errcol"]; ++$col) {
                    echo (substr($line, $col, 1) == "\t") ? "\t" : ".";
                }
                echo "<span class=\"spanred\">\\</span>\n";
                echo "<span class=\"normal\">" . htmlspecialchars($line) . "</span>";
                for ($col=0; $col < $err["errcol"]; ++$col) {
                    echo (substr ($line, $col, 1) == "\t") ? "\t" : ".";
                }
                echo "<span class=\"spanred\">/</span>\n";
            }
        }
        echo "</pre></td></tr>\n";
    }
    echo "<tr>\n";
    echo " <td>sqlstate=" . $err["sqlstate"] . "</td>\n";
    if ($err["errlin"] != -1)
        echo " <td>errlin=" . $err["errlin"] . "</td>\n";
    if ($err["errcol"] != -1)
        echo " <td>errcol=" . $err["errcol"] . "</td>\n";
    if ($err["rowcount"] != 0)
         echo " <td>rowcount=" . $err["rowcount"] . "</td>\n";
    echo "</tr>\n";
    echo "</table>\n";
}

if (!sesam_connect ("mycatalog", "phoneno", "otto"))
  die ("cannot connect");

$stmt = "SELECT * FROM phone\n" .
        " WHERE@ LASTNAME='KRAEMER'\n" .
        " ORDER BY FIRSTNAME";
if (!($result = sesam_query ($stmt)))
    PrintReturncode ($stmt);
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_disconnect">
    <description><![CDATA[  Returns: always .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (sesam_connect ("mycatalog", "myschema", "otto")) {
    /* ... some queries and stuff ... */
    sesam_disconnect(); 
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_errormsg">
    <description><![CDATA[  Returns the SESAM error message associated with the most recent  SESAM error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!sesam_execimm($stmt)) {
  echo sesam_errormsg() . "<br />\n";
}
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_execimm">
    <description><![CDATA[  Returns: A SESAM "result identifier" on success, or   on error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_fetch_array">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or   if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = sesam_query("SELECT * FROM phone\n" .
                       "  WHERE LASTNAME='" . strtoupper($name) . "'\n".
                       "  ORDER BY FIRSTNAME", 1);
if (!$result) {
    /* ... error ... */
}
// print the table:
echo "<table border=\"1\">\n";
while (($row = sesam_fetch_array($result)) && count($row) > 0) {
    echo "<tr>\n";
    echo "<td>" . htmlspecialchars($row["firstname"]) . "</td>\n";
    echo "<td>" . htmlspecialchars($row["lastname"]) . "</td>\n";
    echo "<td>" . htmlspecialchars($row["phoneno"]) . "</td>\n";
    echo "</tr>\n";
}
echo "</table>\n";
sesam_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="SESAM_1" />
      <property ref="Direct IO_7" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_fetch_result">
    <description><![CDATA[  Returns a mixed array with the query result entries, optionally  limited to a maximum of max_rows rows.  Note that both row and column indexes are zero-based.    Note that the amount of memory used up by a large query may be  gigantic. Use the max_rows parameter to  limit the maximum number of rows returned, unless you are  absolutely sure that your result will not use up all available  memory.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="SESAM_1" />
      <property kind="parameter" name="max_rows" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="sesam_fetch_row">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or   if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = sesam_query("SELECT * FROM phone\n" .
                       "  WHERE LASTNAME='" . strtoupper($name) . "'\n" .
                       "  ORDER BY FIRSTNAME", 1);
if (!$result) {
    /* ... error ... */
}
// print the table in backward order
echo "<table border=\"1\">\n";
$row = sesam_fetch_row($result, SESAM_SEEK_LAST);
while (is_array($row)) {
    echo "<tr>\n";
    for ($col = 0; $col < $row["count"]; ++$col) {
        echo "<td>" . htmlspecialchars($row[$col]) . "</td>\n";
    }
    echo "</tr>\n";
    // use implied SESAM_SEEK_PRIOR
    $row = sesam_fetch_row($result);
}
echo "</table>\n";
sesam_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="SESAM_1" />
      <property ref="Direct IO_7" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_field_array">
    <description><![CDATA[   result_id is a valid result id returned by   sesam_query .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="SESAM_1" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_field_name">
    <description><![CDATA[  Returns the name of a field (i.e., the column name) in the result  set, or on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="SESAM_1" />
      <property ref="DOM_24" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_free_result">
    <description><![CDATA[  Releases resources for the query associated with   result_id .  Returns   on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="SESAM_1" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_num_fields">
    <description><![CDATA[  After calling sesam_query with a "select  type" query, this function gives you the number of columns in the  result.  Returns an integer describing the total number of  columns (aka.  fields) in the current   result_id result set or   on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="SESAM_1" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_query">
    <description><![CDATA[  Returns: A SESAM "result identifier" on success, or   on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!sesam_connect("phonedb", "demo", "otto"))
    die("cannot connect");
$result = sesam_query("select * from phone");
if (!$result) {
    $err = sesam_diagnostic();
    die ($err["errmsg"]);
}
echo "<table border>\n";
// Add title header with column names above the result:
if ($cols = sesam_field_array($result)) {
    echo "<tr><th colspan=" . $cols["count"] . ">Result:</th></tr>\n";
    echo "<tr>\n";
    for ($col = 0; $col < $cols["count"]; ++$col) {
        $colattr = $cols[$col];
        /* Span the table head over SESAM's "Multiple Fields": */
        if ($colattr["count"] > 1) {
            echo "<th colspan=\"" . $colattr["count"] . "\">" . $colattr["name"] .
                "(1.." . $colattr["count"] . ")</th>\n";
            $col += $colattr["count"] - 1;
        } else
            echo "<th>" . $colattr["name"] . "</th>\n";
    }
    echo "</tr>\n";
}

do {
    // Fetch the result in chunks of 100 rows max.
    $ok = sesam_fetch_result($result, 100);
    for ($row=0; $row < $ok["rows"]; ++$row) {
        echo " <tr>\n";
        for ($col = 0; $col < $ok["cols"]; ++$col) {
            if (isset($ok[$col][$row])) {
                echo "<td>" . $ok[$col][$row] . "</td>\n";
            } else {
                echo "<td>-empty-</td>\n";
            }
        }
        echo "</tr>\n";
    }
} while ($ok["truncated"]); // while there may be more data

echo "</table>\n";
// free result id
sesam_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="scrollable" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="sesam_rollback">
    <description><![CDATA[  Returns: on success,   on errors  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (sesam_connect ("mycatalog", "myschema", "otto")) {
    if (sesam_execimm ("INSERT INTO mytable VALUES (*, 'Small Test', <0, 8, 15>)")
        && sesam_execimm ("INSERT INTO othertable VALUES (*, 'Another Test', 1)")) {
        sesam_commit();
    } else {
        sesam_rollback();
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_seek_row">
    <description><![CDATA[   result_id is a valid result id (select  type queries only, and only if a "scrollable" cursor was  requested when calling sesam_query ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="SESAM_1" />
      <property kind="parameter" name="whence" type="int" required="1" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="sesam_settransaction">
    <description><![CDATA[  Returns: if the values are valid, and the   settransaction operation was successful,   otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
sesam_settransaction (SESAM_TXISOL_REPEATABLE_READ,
                     SESAM_TXREAD_READONLY);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="isolation_level" type="int" required="1" />
      <property kind="parameter" name="read_only" type="int" required="1" />
    </properties>
    
  </element>
</group>
<group name="SNMP">
  <description><![CDATA[SNMP Functions]]></description>
  <element kind="function" name="snmp_get_quick_print">
    <description><![CDATA[  Returns the current value stored in the UCD Library for quick_print.  quick_print is off by default.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $quickprint = snmp_get_quick_print();
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="snmp_get_valueretrieval">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="snmp_read_mib">
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="snmp_set_enum_print">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="enum_print" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="snmp_set_oid_numeric_print">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="oid_numeric_print" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="snmp_set_quick_print">
    <description><![CDATA[  Sets the value of quick_print within the UCD SNMP library.  When this  is set (1), the SNMP library will return 'quick printed' values.  This  means that just the value will be printed.  When quick_print is not  enabled (default) the UCD SNMP library prints extra information  including the type of the value (i.e. IpAddress or OID).  Additionally,  if quick_print is not enabled, the library prints additional hex values  for all strings of three characters or less.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="quick_print" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="snmp_set_valueretrieval">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="method" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="snmpget">
    <description><![CDATA[  Returns SNMP object value on success and on error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Hyperwave API_8" />
      <property kind="parameter" name="community" type="string" required="1" />
      <property kind="parameter" name="object_id" type="string" required="1" />
      <property ref="FTP_6" />
      <property kind="parameter" name="retries" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="snmpgetnext">
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_4" />
      <property ref="SNMP_5" />
      <property ref="SNMP_6" />
      <property ref="FTP_6" />
      <property ref="SNMP_7" />
    </properties>
    
  </element>
  <element kind="function" name="snmprealwalk">
    <properties>
      <property ref="ret_array" />
      <property ref="FTP_4" />
      <property ref="SNMP_5" />
      <property ref="SNMP_6" />
      <property ref="FTP_6" />
      <property ref="SNMP_7" />
    </properties>
    
  </element>
  <element kind="function" name="snmpset">
    <description><![CDATA[  Sets the specified SNMP object value, returning on success  and on error.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Hyperwave API_8" />
      <property ref="SNMP_5" />
      <property ref="SNMP_6" />
      <property ref="CCVS_5" />
      <property ref="Arrays_14" />
      <property ref="FTP_6" />
      <property ref="SNMP_7" />
    </properties>
    
  </element>
  <element kind="function" name="snmpwalk">
    <description><![CDATA[  Returns an array of SNMP object values starting from the   object_id as root and on error.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_8" />
      <property ref="SNMP_5" />
      <property ref="SNMP_6" />
      <property ref="FTP_6" />
      <property ref="SNMP_7" />
    </properties>
    
  </element>
  <element kind="function" name="snmpwalkoid">
    <description><![CDATA[  Returns an associative array with object ids and their respective  object value starting from the object_id  as root and on error.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Hyperwave API_8" />
      <property ref="SNMP_5" />
      <property ref="SNMP_6" />
      <property ref="FTP_6" />
      <property ref="SNMP_7" />
    </properties>
    
  </element>
</group>
<group name="SOAP">
  <description><![CDATA[SOAP Functions]]></description>
  <element kind="function" name="__call">
    <description><![CDATA[  This method is deprecated. Use instead of it.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="APD_9" />
      <property kind="parameter" name="arguments" type="array"  />
      <property kind="parameter" name="options" type="array"  />
      <property kind="parameter" name="input_headers" type="array"  />
      <property kind="parameter" name="output_headers" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="__doRequest">
    <description><![CDATA[  Performs SOAP request over HTTP.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function Add($x,$y) {
  return $x+$y;
}

class LocalSoapClient extends SoapClient {

  function __construct($wsdl, $options) {
    parent::__construct($wsdl, $options);
    $this->server = new SoapServer($wsdl, $options);
    $this->server->addFunction('Add');
  }

  function __doRequest($request, $location, $action, $version) {
    ob_start();
    $this->server->handle($request);
    $response = ob_get_contents();
    ob_end_clean();
    return $response;
  }

}

$x = new LocalSoapClient(NULL,array('location'=>'test://', 
                                   'uri'=>'http://testuri.org')); 
var_dump($x->Add(3,4));
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Recode_1" />
      <property ref="MCVE_27" />
      <property kind="parameter" name="action" type="string" required="1" >
      <description>  The SOAP version.  </description>
      </property>
      <property ref="Ming (flash)_4" />
    </properties>
    
  </element>
  <element kind="function" name="__getFunctions">
    <description><![CDATA[  Returns the list of SOAP functions.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$client = SoapClient("some.wsdl");
var_dump($client->__getFunctions());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="__getLastRequest">
    <description><![CDATA[  This method works only if the object  was created with the option.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$client = SoapClient("some.wsdl", array('trace' => 1));
$result = $client->SomeFunction();
echo "REQUEST:\n" . $client->__getLastRequest() . "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="__getLastRequestHeaders">
    <description><![CDATA[  This method works only if the object  was created with the option.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="__getLastResponse">
    <description><![CDATA[  This method works only if the object  was created with the option.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$client = SoapClient("some.wsdl", array('trace' => 1));
$result = $client->SomeFunction();
echo "RESPONSE:\n" . $client->__getLastResponse() . "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="__getLastResponseHeaders">
    <description><![CDATA[  This method works only if the object  was created with the option.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="__getTypes">
    <description><![CDATA[  This function works only in WSDL mode.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$client = new SoapClient("some.wsdl");
var_dump($client->__getTypes());
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="__setCookie">
    <description><![CDATA[  Defines a cookie to be sent along with the SOAP requests.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="CCVS_7" />
      <property ref="DOM_10" />
    </properties>
    
  </element>
  <element kind="function" name="__soapCall">
    <description><![CDATA[  This is a low level API function that is used to make a SOAP call. Usually,  in WSDL mode,  you can simply call SOAP functions as   methods. This method useful in non-WSDL mode when   is unknown, differs from the default or when sending  and/or receiving SOAP Headers.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$client = new SoapClient("some.wsdl");
$client->SomeFunction($a, $b, $c);

$client->__soapCall("SomeFunction", array($a, $b, $c));
$client->__soapCall("SomeFunction", array($a, $b, $c), NULL,
                    new SoapHeader(), $output_headers);


$client = new SoapClient(null, array('location' => "http://localhost/soap.php",
                                     'uri'      => "http://test-uri/"));
$client->SomeFunction($a, $b, $c);
$client->__soapCall("SomeFunction", array($a, $b, $c));
$client->__soapCall("SomeFunction", array($a, $b, $c),
                    array('soapaction' => 'some_action',
                          'uri'        => 'some_uri'));
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="APD_9" />
      <property ref="SOAP_1" />
      <property ref="SOAP_2" />
      <property ref="SOAP_3" />
      <property ref="SOAP_4" />
    </properties>
    
  </element>
  <element kind="function" name="addFunction">
    <description><![CDATA[  Exports one or more functions for remote clients.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

function echoString($inputString)
{
    return $inputString;
}

$server->addFunction("echoString");

function echoTwoStrings($inputString1, $inputString2)
{
    return array("outputString1" => $inputString1,
                 "outputString2" => $inputString2);
}
$server->addFunction(array("echoString", "echoTwoStrings"));

$server->addFunction(SOAP_FUNCTIONS_ALL);

?>]]></description>
      </property>
      <property kind="parameter" name="functions" type="mixed" required="1" >
      <description>  To export one function, pass the function name into this parameter as  a string.    To export several functions, pass an array of function names.    To export all the functions, pass a special constant .     must receive all input arguments in the same  order as defined in the WSDL file (They should not receive any output parameters  as arguments) and return one or more values. To return several values they must  return an array with named output parameters.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="fault">
    <properties>
      <property ref="Classkit_4" />
      <property ref="Filesystem_16" />
      <property kind="parameter" name="actor" type="string"  />
      <property kind="parameter" name="details" type="mixed"  />
      <property ref="Hyperwave API_2" />
    </properties>
    
  </element>
  <element kind="function" name="getFunctions">
    <description><![CDATA[  This method returns the list of all functions added by   or   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$server = new SoapServer(NULL, array("uri" => "http://test-uri"));
$server->addFunction(SOAP_FUNCTIONS_ALL);
if ($_SERVER["REQUEST_METHOD"] == "POST") {
  $server->handle();
} else {
  echo "This SOAP server can handle following functions: ";
  $functions = $server->getFunctions();
  foreach($functions as $func) {
    echo $func . "\n";
  }
}
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="handle">
    <description><![CDATA[  Processes a SOAP request, calls necessary functions, and sends a response  back.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function test($x)
{
    return $x;
}

$server = new SoapServer(null, array('uri' => "http://test-uri/"));
$server->addFunction("test");
$server->handle();
?>]]></description>
      </property>
      <property kind="parameter" name="soap_request" type="string"  >
      <description>  The SOAP request. If this argument is omitted, the request is supposed  to be in the PHP variable.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="is_soap_fault">
    <description><![CDATA[  This function is useful when you like to check if the SOAP call failed, but  don't like to use exceptions. To use it you must create a   object with the  option set to zero or .  In this case, the SOAP method will return a special   object which encapsulates the fault  details (faultcode, faultstring, faultactor and faultdetails).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$client = new SoapClient("some.wsdl", array('exceptions' => 0));
$result = $client->SomeFunction();
if (is_soap_fault($result)) {
    trigger_error("SOAP Fault: (faultcode: {$result->faultcode}, faultstring: {$result->faultstring})", E_ERROR);
}
?>

    

<?php
try {
    $client = new SoapClient("some.wsdl");
    $result = $client->SomeFunction(/* ... */);
} catch (SoapFault $fault) {
    trigger_error("SOAP Fault: (faultcode: {$fault->faultcode}, faultstring: {$fault->faultstring})", E_ERROR);
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Classes/Objects_7" />
    </properties>
    
  </element>
  <element kind="function" name="setClass">
    <description><![CDATA[  Exports all methods from specified class.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class foo {
    function foo() 
    {
    }
}
$server->setClass("foo");

class bar {
    function bar($x, $y) 
    {
    }
}
$server->setClass("bar", $arg1, $arg2);

?>]]></description>
      </property>
      <property ref="COM_4" />
      <property ref="Direct IO_3" />
    </properties>
    
  </element>
  <element kind="function" name="setPersistence">
    <description><![CDATA[  This function allows saving data between requests in a PHP session. It works only  with a server that exports functions from a class with   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$server->setPersistence(SOAP_PERSISTENCE_SESSION);

$server->setPersistence(SOAP_PERSISTENCE_REQUEST);

?>]]></description>
      </property>
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="use_soap_error_handler">
    <properties>
      <property kind="parameter" name="handler" type="bool"  />
    </properties>
    
  </element>
</group>
<group name="SQLite">
  <description><![CDATA[SQLite Functions]]></description>
  <element kind="function" name="sqlite_array_query">
    <description><![CDATA[   sqlite_array_query executes the given query and returns  an array of the entire result set.  It is similar to calling  sqlite_query and then sqlite_fetch_array  for each row in the result set. sqlite_array_query is  significantly faster than the aforementioned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_open('sqlitedb');
$result = sqlite_array_query($dbhandle, 'SELECT name, email FROM users LIMIT 25', SQLITE_ASSOC);
foreach ($result as $entry) {
    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
}
?>

    

<?php
$dbhandle = new SQLiteDatabase('sqlitedb');
$result = $dbhandle->arrayQuery('SELECT name, email FROM users LIMIT 25', SQLITE_ASSOC);
foreach ($result as $entry) {
    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="dbhandle" type="resource" required="1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="FrontBase_12" />
      <property kind="parameter" name="decode_binary" type="bool"  />
      <property ref="Cyrus IMAP_12" />
      <property ref="SQLite_1" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
      <property ref="Cyrus IMAP_12" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_busy_timeout">
    <description><![CDATA[  Set the maximum time, in milliseconds, that SQLite will wait for a   dbhandle to become ready for use.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_open('sqlitedb');
sqlite_busy_timeout($dbhandle, 10000); // set timeout to 10 seconds
sqlite_busy_timeout($dbhandle, 0); // disable busy handler
?>
    

<?php
$dbhandle = new SQLiteDatabase('sqlitedb');
$dbhandle->busyTimeout(10000); // 10 seconds
$dbhandle->busyTimeout(0); // disable
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="SQLite_1" />
      <property ref="Ncurses_21" />
      <property ref="Ncurses_21" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_changes">
    <description><![CDATA[  Returns the numbers of rows that were changed by the most recent SQL  statement executed against the dbhandle database  handle.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_open('mysqlitedb');
$query = sqlite_query($dbhandle, "UPDATE users SET email='jDoe@example.com' WHERE username='jDoe'");
if (!$query) {
    exit('Error in query.');
} else {
    echo 'Number of rows modified: ', sqlite_changes($dbhandle);
}
?>
    

<?php
$dbhandle = new SQLiteDatabase('mysqlitedb');
$query = $dbhandle->query("UPDATE users SET email='jDoe@example.com' WHERE username='jDoe'");
if (!$query) {
    exit('Error in query.');
} else {
    echo 'Number of rows modified: ', $dbhandle->changes();
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="SQLite_1" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_close">
    <description><![CDATA[  Closes the given database handle.  If the database was persistent, it will be closed and removed from the  persistent list.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_open('sqlitedb');
sqlite_close($dbhandle);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="SQLite_1" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_column">
    <description><![CDATA[  Fetches the value of a column named index_or_name  (if it is a string), or of the ordinal column numbered   index_or_name (if it is an integer) from the  current row of the query result handle result .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="index_or_name" type="mixed" required="1" />
      <property ref="SQLite_2" />
      <property ref="SQLite_3" />
      <property ref="SQLite_2" />
      <property ref="SQLite_3" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_create_aggregate">
    <description><![CDATA[   sqlite_create_aggregate is similar to   sqlite_create_function except that it registers  functions that can be used to calculate a result aggregated across all the  rows of a query.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$dbhandle = sqlite_open(':memory:');
sqlite_query($dbhandle, "CREATE TABLE strings(a)");
foreach ($data as $str) {
    $str = sqlite_escape_string($str);
    sqlite_query($dbhandle, "INSERT INTO strings VALUES ('$str')");
}

function max_len_step(&$context, $string) 
{
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
}

function max_len_finalize(&$context) 
{
    return $context;
}

sqlite_create_aggregate($dbhandle, 'max_len', 'max_len_step', 'max_len_finalize');

var_dump(sqlite_array_query($dbhandle, 'SELECT max_len(a) from strings'));

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="SQLite_1" />
      <property ref="APD_9" />
      <property kind="parameter" name="step_func" type="callback" required="1" />
      <property kind="parameter" name="finalize_func" type="callback" required="1" />
      <property kind="parameter" name="num_args" type="int"  />
      <property ref="APD_9" />
      <property ref="SQLite_4" />
      <property ref="SQLite_5" />
      <property ref="SQLite_6" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_create_function">
    <description><![CDATA[   sqlite_create_function allows you to register a PHP  function with SQLite as an (User Defined  Function), so that it can be called from within your SQL statements.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function md5_and_reverse($string) 
{
    return strrev(md5($string));
}

if ($dbhandle = sqlite_open('mysqlitedb', 0666, $sqliteerror)) {
    
    sqlite_create_function($dbhandle, 'md5rev', 'md5_and_reverse', 1);
    
    $sql  = 'SELECT md5rev(filename) FROM files';
    $rows = sqlite_array_query($dbhandle, $sql);
} else {
    echo 'Error opening sqlite db: ' . $sqliteerror;
    exit;
}
?>

    

<?php
$rows = sqlite_array_query($dbhandle, "SELECT php('md5', filename) from files");
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="SQLite_1" />
      <property ref="APD_9" />
      <property ref="Arrays_21" />
      <property ref="SQLite_6" />
      <property ref="APD_9" />
      <property ref="Arrays_21" />
      <property ref="SQLite_6" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_current">
    <description><![CDATA[   sqlite_current is identical to   sqlite_fetch_array except that it does not advance  to the next row prior to returning the data; it returns the data from the  current position only.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_error_string">
    <description><![CDATA[  Returns a human readable description of the   error_code returned from   sqlite_last_error .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="error_code" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_escape_string">
    <description><![CDATA[   sqlite_escape_string will correctly quote the string  specified by item  for use in an SQLite SQL statement.  This includes doubling up  single-quote characters ( ) and checking for  binary-unsafe characters in the query string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="item" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_exec">
    <description><![CDATA[  Executes an SQL statement given by the query against  a given database handle (specified by the dbhandle   parameter).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_open('mysqlitedb');
$query = sqlite_exec($dbhandle, "UPDATE users SET email='jDoe@example.com' WHERE username='jDoe'");
if (!$query) {
    exit('Error in query.');
} else {
    echo 'Number of rows modified: ', sqlite_changes($dbhandle);
}
?>
    

<?php
$dbhandle = new SQLiteDatabase('mysqlitedb');
$query = $dbhandle->exec("UPDATE users SET email='jDoe@example.com' WHERE username='jDoe'");
if (!$query) {
    exit('Error in query.');
} else {
    echo 'Number of rows modified: ', $dbhandle->changes();
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="SQLite_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
      <property ref="SQLite_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_factory">
    <description><![CDATA[   sqlite_factory behaves similarly to   sqlite_open in that it opens an SQLite database or  attempts to create it if it does not exist.  However, a   object is  returned rather than a resource.  Please see the   sqlite_open reference page for further usage and caveats.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_factory('sqlitedb');
$dbhandle->query('SELECT user_id, username FROM users');

/* functionally equivalent to: */

$dbhandle = new SQLiteDatabase('sqlitedb');
$dbhandle->query('SELECT user_id, username FROM users');

?>]]></description>
      </property>
      <property kind="return" type="SQLiteDatabase" />	
      <property ref="Apache_3" />
      <property ref="Arrays_43" />
      <property ref="Misc._8" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_fetch_all">
    <description><![CDATA[   sqlite_fetch_all returns an array of the entire result  set from the result resource.  It is similar to calling   sqlite_query (or   sqlite_unbuffered_query ) and then   sqlite_fetch_array for each row in the result set.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_open('sqlitedb');
$query = sqlite_query($dbhandle, 'SELECT name, email FROM users LIMIT 25');
$result = sqlite_fetch_all($query, SQLITE_ASSOC);
foreach ($result as $entry) {
    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
}
?>

    

<?php
$dbhandle = new SQLiteDatabase('sqlitedb');

$query = $dbhandle->query('SELECT name, email FROM users LIMIT 25'); // buffered result set
$query = $dbhandle->unbufferedQuery('SELECT name, email FROM users LIMIT 25'); // unbuffered result set

$result = $query->fetchAll(SQLITE_ASSOC);
foreach ($result as $entry) {
    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_fetch_array">
    <description><![CDATA[  Fetches the next row from the given result handle.  If there are no more rows, returns , otherwise returns an  associative array representing the row data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dbhandle = sqlite_open('sqlitedb');
$query = sqlite_query($dbhandle, 'SELECT name, email FROM users LIMIT 25');
$result = sqlite_fetch_all($query, SQLITE_ASSOC);
foreach ($result as $entry) {
    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
}
?>

    

<?php
$dbhandle = new SQLiteDatabase('sqlitedb');

$query = $dbhandle->query('SELECT name, email FROM users LIMIT 25'); // buffered result set
$query = $dbhandle->unbufferedQuery('SELECT name, email FROM users LIMIT 25'); // unbuffered result set

$result = $query->fetchAll(SQLITE_ASSOC);
foreach ($result as $entry) {
    echo 'Name: ' . $entry['name'] . '  E-mail: ' . $entry['email'];
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
      <property ref="FrontBase_12" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_fetch_column_types">
    <description><![CDATA[   sqlite_fetch_column_types returns an array of column  data types from the specified table_name table.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$db = sqlite_open('mysqlitedb');
sqlite_query($db, 'CREATE TABLE foo (bar varchar(10), arf text)');
$cols = sqlite_fetch_column_types('foo', $db, SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Column: $column  Type: $type";
}
?>

    

<?php
$db = new SQLiteDatabase('mysqlitedb');
$db->query('CREATE TABLE foo (bar varchar(10), arf text)');
$cols = $db->fetchColumnTypes('foo', SQLITE_ASSOC);

foreach ($cols as $column => $type) {
    echo "Column: $column  Type: $type";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="FrontBase_16" />
      <property ref="SQLite_1" />
      <property ref="FrontBase_12" />
      <property ref="FrontBase_16" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_fetch_object">
    <properties>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property ref="Object Aggregation_5" />
      <property kind="parameter" name="ctor_params" type="array"  />
      <property ref="SQLite_2" />
      <property ref="Object Aggregation_5" />
      <property ref="SQLite_9" />
      <property ref="SQLite_2" />
      <property ref="Object Aggregation_5" />
      <property ref="SQLite_9" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_fetch_single">
    <description><![CDATA[   sqlite_fetch_single is identical to   sqlite_fetch_array except that it returns the value  of the first column of the rowset.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if ($dbhandle = sqlite_open('mysqlitedb', 0666, $sqliteerror)) {

    $sql = "SELECT id FROM sometable WHERE id = 42";
    $res = sqlite_query($dbhandle, $sql);

    if (sqlite_num_rows($res) > 0) {
        echo sqlite_fetch_single($res); // 42
    }
    
    sqlite_close($dbhandle);
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="SQLite_2" />
      <property ref="SQLite_2" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_field_name">
    <description><![CDATA[  Given the ordinal column number, field_index ,   sqlite_field_name returns the name of that field in  the result set result .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MySQL_4" />
      <property ref="MySQL_4" />
      <property ref="MySQL_4" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_has_more">
    <description><![CDATA[  Finds whether more rows are available from the given result set.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_has_prev">
    <description><![CDATA[  Find whether there are more previous rows from the given result handle.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_key">
    <description><![CDATA[   sqlite_key returns the current row index of the  buffered result set result .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_last_error">
    <description><![CDATA[  Returns the error code from the last operation performed on   dbhandle , the database handle.  A human readable  description of the error code can be retrieved using   sqlite_error_string .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="SQLite_1" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_last_insert_rowid">
    <description><![CDATA[  Returns the rowid of the row that was most recently inserted into the  database dbhandle , if it was created as an  auto-increment field.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="SQLite_1" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_libencoding">
    <description><![CDATA[  The SQLite library may be compiled in either ISO-8859-1 or UTF-8  compatible modes.  This function allows you to determine which encoding  scheme is used by your version of the library.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_libversion">
    <description><![CDATA[  Returns the version of the linked SQLite library.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_next">
    <description><![CDATA[   sqlite_next advances the result handle   result to the next row.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_num_fields">
    <description><![CDATA[  Returns the number of fields in the result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_num_rows">
    <description><![CDATA[  Returns the number of rows in the buffered result  set.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$db = sqlite_open('mysqlitedb');
$result = sqlite_query($db, "SELECT * FROM mytable WHERE name='John Doe'");
$rows = sqlite_num_rows($result);

echo "Number of rows: $rows";
?>

    

<?php
$db = new SQLiteDatabase('mysqlitedb');
$result = $db->query("SELECT * FROM mytable WHERE name='John Doe'");
$rows = $result->numRows();

echo "Number of rows: $rows";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_open">
    <description><![CDATA[ Object oriented style (constructor):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if ($db = sqlite_open('mysqlitedb', 0666, $sqliteerror)) { 
    sqlite_query($db, 'CREATE TABLE foo (bar varchar(10))');
    sqlite_query($db, "INSERT INTO foo VALUES ('fnord')");
    $result = sqlite_query($db, 'select bar from foo');
    var_dump(sqlite_fetch_array($result)); 
} else {
    die($sqliteerror);
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property ref="Arrays_43" />
      <property kind="parameter" name="error_messagefilenamemodeerror_message" type="string"  />
      <property ref="SQLite_10" />
      <property ref="SQLite_10" />
      <property ref="SQLite_10" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_popen">
    <description><![CDATA[   sqlite_popen will first check to see if a persistent  handle has already been opened for the given   filename .  If it finds one, it returns that handle  to your script, otherwise it opens a fresh handle to the database.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property ref="Arrays_43" />
      <property ref="Misc._8" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_prev">
    <description><![CDATA[   sqlite_prev seeks back the   result handle to the previous row.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_query">
    <description><![CDATA[  Executes an SQL statement given by the query against  a given database handle.  ]]></description>
    <properties>
      <property kind="return" type="SQLiteResult" />	
      <property ref="SQLite_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
      <property ref="SQLite_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_rewind">
    <description><![CDATA[   sqlite_rewind seeks back to the first row in the  given result set.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_seek">
    <description><![CDATA[   sqlite_seek seeks to the row given by the parameter   rownum .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="rownum" type="int" required="1" />
      <property ref="SQLite_11" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_single_query">
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="db" type="resource" required="1" />
      <property ref="Cyrus IMAP_12" />
      <property kind="parameter" name="first_row_only" type="bool"  />
      <property ref="SQLite_2" />
      <property ref="Cyrus IMAP_12" />
      <property ref="SQLite_13" />
      <property ref="SQLite_2" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_udf_decode_binary">
    <description><![CDATA[   sqlite_udf_decode_binary decodes the binary encoding  that was applied to the parameter by either   sqlite_udf_encode_binary or   sqlite_escape_string .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$db = sqlite_open(':memory:');
sqlite_query($db, "CREATE TABLE strings(a)");
foreach ($data as $str) {
    $str = sqlite_escape_string($str);
    sqlite_query($db, "INSERT INTO strings VALUES ('$str')");
}

function max_len_step(&$context, $string) 
{
    $string = sqlite_udf_decode_binary($string);
    if (strlen($string) > $context) {
        $context = strlen($string);
    }
}

function max_len_finalize(&$context) 
{
    return $context;
}

sqlite_create_aggregate($db, 'max_len', 'max_len_step', 'max_len_finalize');

var_dump(sqlite_array_query($db, 'SELECT max_len(a) from strings'));

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_udf_encode_binary">
    <description><![CDATA[   sqlite_udf_encode_binary applies a binary encoding  to the data so that it can be safely returned from  queries (since the underlying libsqlite API is not binary safe).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_unbuffered_query">
    <description><![CDATA[   sqlite_unbuffered_query is identical to   sqlite_query except that the result that is returned  is a sequential forward-only result set that can only be used to read  each row, one after the other.  ]]></description>
    <properties>
      <property kind="return" type="SQLiteUnbuffered" />	
      <property ref="SQLite_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
      <property ref="SQLite_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="sqlite_valid">
    <description><![CDATA[  Finds whether more rows are available from the given result handle.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
</group>
<group name="SWF">
  <description><![CDATA[Shockwave Flash Functions]]></description>
  <element kind="function" name="swf_actiongeturl">
    <description><![CDATA[  The swf_actiongeturl function gets the URL  specified by the parameter url with the  target target .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="ClibPDF_47" />
      <property ref="DOM_11" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actiongotoframe">
    <description><![CDATA[  The swf_actiongotoframe function will go to  the frame specified by framenumber , play  it, and then stop.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="framenumber" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actiongotolabel">
    <description><![CDATA[  The swf_actiongotolabel function displays  the frame with the label given by the   label parameter and then stops.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Ncurses_53" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actionnextframe">
    <description><![CDATA[  Go forward one frame.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actionplay">
    <description><![CDATA[  Start playing the flash movie from the current frame.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actionprevframe">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actionsettarget">
    <description><![CDATA[  The swf_actionsettarget function sets the  context for all actions.  You can use this to control other flash  movies that are currently playing.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="DOM_11" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actionstop">
    <description><![CDATA[  Stop playing the flash movie at the current frame.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actiontogglequality">
    <description><![CDATA[  Toggle the flash movie between high and low quality.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_actionwaitforframe">
    <description><![CDATA[  The swf_actionwaitforframe function will  check to see if the frame, specified by the   framenumber parameter has been loaded, if  not it will skip the number of actions specified by the   skipcount parameter.  This can be useful  for "Loading..." type animations.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_1" />
      <property kind="parameter" name="skipcount" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_addbuttonrecord">
    <description><![CDATA[  The swf_addbuttonrecord function allows you  to define the specifics of using a button.  The first parameter,   states , defines what states the button can  have, these can be any or all of the following constants:  BSHitTest, BSDown, BSOver or BSUp.  The second parameter, the   shapeid is the look of the button, this is  usually the object id of the shape of the button.  The   depth parameter is the placement of the  button in the current frame.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
swf_startButton($objid, TYPE_MENUBUTTON);
swf_addButtonRecord(BSDown|BSOver, $buttonImageId, 340);
swf_onCondition(MenuEnter);
swf_actionGetUrl("http://www.example.com", "_level1");
swf_onCondition(MenuExit);
swf_actionGetUrl("", "_level1");
swf_endButton();
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="states" type="int" required="1" />
      <property kind="parameter" name="shapeid" type="int" required="1" />
      <property kind="parameter" name="depth" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_addcolor">
    <description><![CDATA[  The swf_addcolor function sets the global  add color to the rgba color specified.  This color is then used (implicitly) by the   swf_placeobject ,   swf_modifyobject and the   swf_addbuttonrecord functions.  The color of  the object will be add by the rgba values  when the object is written to the screen.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PDF_13" />
      <property kind="parameter" name="g" type="float" required="1" />
      <property ref="PDF_23" />
      <property ref="PDF_22" />
    </properties>
    
  </element>
  <element kind="function" name="swf_closefile">
    <description><![CDATA[  Close a file that was opened by the   swf_openfile function.  If the   return_file parameter is set then the contents  of the SWF file are returned from the function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// The $text variable is submitted by the
// user

// Global variables for database
// access (used in the swf_savedata() function)
$DBHOST = "localhost";
$DBUSER = "sterling";
$DBPASS = "secret";

swf_openfile("php://stdout", 256, 256, 30, 1, 1, 1);

    swf_definefont(10, "Ligon-Bold");
        swf_fontsize(12);
        swf_fontslant(10);
    
    swf_definetext(11, $text, 1);
    
    swf_pushmatrix();
        swf_translate(-50, 80, 0);
        swf_placeobject(11, 60);
    swf_popmatrix();

    swf_showframe();
  
    swf_startdoaction();
        swf_actionstop();
    swf_enddoaction();

$data = swf_closefile(1);

$data ?
  swf_savedata($data) :
  die("Error could not save SWF file");

// void swf_savedata(string data)
// Save the generated file a database
// for later retrieval
function swf_savedata($data) 
{
    global $DBHOST, 
           $DBUSER,
           $DBPASS;
    
    $dbh = @mysql_connect($DBHOST, $DBUSER, $DBPASS);

    if (!$dbh) {
        die (sprintf("Error [%d]: %s",
                      mysql_errno(), mysql_error()));
    }

    $stmt = "INSERT INTO swf_files (file) VALUES ('$data')";

    $sth = @mysql_query($stmt, $dbh);

    if (!$sth) {
        die (sprintf("Error [%d]: %s",
                      mysql_errno(), mysql_error()));
    }

    @mysql_free_result($sth);
    @mysql_close($dbh);
}
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="return_file" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="swf_definebitmap">
    <description><![CDATA[  The swf_definebitmap function defines a  bitmap given a GIF, JPEG, RGB or FI image.  The image will be  converted into a Flash JPEG or Flash color map format.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
      <property kind="parameter" name="image_name" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_definefont">
    <description><![CDATA[  The swf_definefont function defines a font  given by the fontname parameter and gives  it the id specified by the fontid  parameter.  It then sets the font given by  fontname to the current font.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="fontid" type="int" required="1" />
      <property ref="PDF_28" />
    </properties>
    
  </element>
  <element kind="function" name="swf_defineline">
    <description><![CDATA[  The swf_defineline defines a line starting  from the x coordinate given by x1 and the  y coordinate given by y1 parameter.  Up  to the x coordinate given by the x2  parameter and the y coordinate given by the   y2 parameter.  It will have a width  defined by the width parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
      <property ref="ClibPDF_18" />
      <property ref="ClibPDF_19" />
      <property ref="ClibPDF_20" />
      <property ref="ClibPDF_21" />
      <property ref="ClibPDF_32" />
    </properties>
    
  </element>
  <element kind="function" name="swf_definepoly">
    <description><![CDATA[  The swf_definepoly function defines a  polygon given an array of x, y coordinates (the coordinates are  defined in the parameter coords ).  The  parameter npoints is the number of overall  points that are contained in the array given by   coords .  The width  is the width of the polygon's border, if set to 0.0 the polygon  is filled.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
      <property kind="parameter" name="coords" type="array" required="1" />
      <property kind="parameter" name="npoints" type="int" required="1" />
      <property ref="ClibPDF_32" />
    </properties>
    
  </element>
  <element kind="function" name="swf_definerect">
    <description><![CDATA[  The swf_definerect defines a rectangle with  an upper left hand coordinate given by the x,   x1 , and the y, y1 .  And a lower right hand coordinate given by the x coordinate,   x2 , and the y coordinate, y2   .  Width of the rectangles border is given by the   width parameter, if the width is 0.0 then  the rectangle is filled.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
      <property ref="ClibPDF_18" />
      <property ref="ClibPDF_19" />
      <property ref="ClibPDF_20" />
      <property ref="ClibPDF_21" />
      <property ref="ClibPDF_32" />
    </properties>
    
  </element>
  <element kind="function" name="swf_definetext">
    <description><![CDATA[  Define a text string (the str parameter)  using the current font and font size.  The   docenter is where the word is centered, if   docenter is 1, then the word is centered  in x.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="docenter" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_endbutton">
    <description><![CDATA[  The swf_endbutton function ends the  definition of the current button.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_enddoaction">
    <description><![CDATA[  Ends the current action started by the   swf_startdoaction function.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_endshape">
    <description><![CDATA[  The swf_endshape completes the definition of  the current shape.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_endsymbol">
    <description><![CDATA[  The swf_endsymbol function ends the  definition of a symbol that was started by the   swf_startsymbol function.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_fontsize">
    <description><![CDATA[  The swf_fontsize function changes the font  size to the value given by the size  parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="ClibPDF_51" />
    </properties>
    
  </element>
  <element kind="function" name="swf_fontslant">
    <description><![CDATA[  Set the current font slant to the angle indicated by the   slant parameter.  Positive values create a  forward slant, negative values create a negative slant.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Image_76" />
    </properties>
    
  </element>
  <element kind="function" name="swf_fonttracking">
    <description><![CDATA[  Set the font tracking to the value specified by the   tracking parameter.  This function is used  to increase the spacing between letters and text, positive values  increase the space and negative values decrease the space between  letters.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="tracking" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_getbitmapinfo">
    <description><![CDATA[  The swf_getbitmapinfo function returns an  array of information about a bitmap given by the   bitmapid parameter.  The returned array  has the following elements:    ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="bitmapid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_getfontinfo">
    <description><![CDATA[  The swf_getfontinfo function returns an  associative array with the following parameters:    ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="swf_getframe">
    <description><![CDATA[  The swf_getframe function gets the number of  the current frame.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="swf_labelframe">
    <description><![CDATA[  Label the current frame with the name given by the   name parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="swf_lookat">
    <description><![CDATA[  The swf_lookat function defines a viewing  transformation by giving the viewing position (the parameters   view_x , view_y , and   view_z ) and the coordinates of a reference  point in the scene, the reference point is defined by the   reference_x , reference_y   , and reference_z parameters.  The twist controls the rotation along  with viewer's z axis.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="view_x" type="float" required="1" />
      <property kind="parameter" name="view_y" type="float" required="1" />
      <property kind="parameter" name="view_z" type="float" required="1" />
      <property kind="parameter" name="reference_x" type="float" required="1" />
      <property kind="parameter" name="reference_y" type="float" required="1" />
      <property kind="parameter" name="reference_z" type="float" required="1" />
      <property kind="parameter" name="twist" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_modifyobject">
    <description><![CDATA[  Updates the position and/or color of the object at the specified  depth, depth .  The parameter   how determines what is updated.   how can either be the constant MOD_MATRIX  or MOD_COLOR or it can be a combination of both  (MOD_MATRIX|MOD_COLOR).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_5" />
      <property kind="parameter" name="how" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_mulcolor">
    <description><![CDATA[  The swf_mulcolor function sets the global  multiply color to the rgba color  specified.  This color is then used (implicitly) by the   swf_placeobject ,   swf_modifyobject and the   swf_addbuttonrecord functions.  The color of  the object will be multiplied by the rgba  values when the object is written to the screen.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PDF_13" />
      <property ref="SWF_6" />
      <property ref="PDF_23" />
      <property ref="PDF_22" />
    </properties>
    
  </element>
  <element kind="function" name="swf_nextid">
    <description><![CDATA[  The swf_nextid function returns the next  available object id.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="swf_oncondition">
    <description><![CDATA[  The swf_oncondition function describes a  transition that will trigger an action list.  There are several  types of possible transitions, the following are for buttons  defined as TYPE_MENUBUTTON:    For TYPE_PUSHBUTTON there are the following options:    ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="ClibPDF_58" />
    </properties>
    
  </element>
  <element kind="function" name="swf_openfile">
    <description><![CDATA[  The swf_openfile function opens a new file  named filename with a width of   width and a height of   height a frame rate of   framerate and background with a red color  of r a green color of   g and a blue color of   b .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Apache_3" />
      <property ref="ClibPDF_32" />
      <property ref="ClibPDF_33" />
      <property kind="parameter" name="framerate" type="float" required="1" />
      <property ref="PDF_13" />
      <property ref="SWF_6" />
      <property ref="PDF_23" />
    </properties>
    
  </element>
  <element kind="function" name="swf_ortho">
    <description><![CDATA[  The swf_ortho function defines an orthographic  mapping of user coordinates onto the current viewport.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="xmin" type="float" required="1" />
      <property kind="parameter" name="xmax" type="float" required="1" />
      <property kind="parameter" name="ymin" type="float" required="1" />
      <property kind="parameter" name="ymax" type="float" required="1" />
      <property kind="parameter" name="zmin" type="float" required="1" />
      <property kind="parameter" name="zmax" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_ortho2">
    <description><![CDATA[  The swf_ortho2 function defines a two  dimensional orthographic mapping of user coordinates onto the  current viewport, this defaults to one to one mapping of the area  of the Flash movie.  If a perspective transformation is desired,  the swf_perspective function can be used.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_24" />
      <property ref="SWF_25" />
      <property ref="SWF_26" />
      <property ref="SWF_27" />
    </properties>
    
  </element>
  <element kind="function" name="swf_perspective">
    <description><![CDATA[  The swf_perspective function defines a  perspective projection transformation.  The   fovy parameter is field-of-view angle in  the y direction.  The aspect parameter  should be set to the aspect ratio of the viewport that is being  drawn onto.  The near parameter is the  near clipping plane and the far parameter  is the far clipping plane.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="fovy" type="float" required="1" />
      <property kind="parameter" name="aspect" type="float" required="1" />
      <property kind="parameter" name="near" type="float" required="1" />
      <property kind="parameter" name="far" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_placeobject">
    <description><![CDATA[  Places the object specified by objid in  the current frame at a depth of depth .  The objid parameter and the   depth must be between 1 and 65535.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
      <property ref="SWF_5" />
    </properties>
    
  </element>
  <element kind="function" name="swf_polarview">
    <description><![CDATA[  The swf_polarview function defines the  viewer's position in polar coordinates.  The   dist parameter gives the distance between  the viewpoint to the world space origin.  The   azimuth parameter defines the azimuthal  angle in the x,y coordinate plane, measured in distance from the  y axis.  The incidence parameter defines  the angle of incidence in the y,z plane, measured in distance  from the z axis.  The incidence angle is defined as the angle of  the viewport relative to the z axis.  Finally the   twist specifies the amount that the  viewpoint is to be rotated about the line of sight using the  right hand rule.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="dist" type="float" required="1" />
      <property kind="parameter" name="azimuth" type="float" required="1" />
      <property kind="parameter" name="incidence" type="float" required="1" />
      <property ref="SWF_21" />
    </properties>
    
  </element>
  <element kind="function" name="swf_popmatrix">
    <description><![CDATA[  The swf_popmatrix function pushes the  current transformation matrix back onto the stack.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_posround">
    <description><![CDATA[  The swf_posround function enables or  disables the rounding of the translation when objects are placed  or moved, there are times when text becomes more readable because  rounding has been enabled.  The round is  whether to enable rounding or not, if set to the value of 1, then  rounding is enabled, if set to 0 then rounding is disabled.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="round" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_pushmatrix">
    <description><![CDATA[  The swf_pushmatrix function pushes the  current transformation matrix back onto the stack.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_removeobject">
    <description><![CDATA[  Removes the object at the depth specified by   depth .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_5" />
    </properties>
    
  </element>
  <element kind="function" name="swf_rotate">
    <description><![CDATA[  The swf_rotate rotates the current  transformation by the angle given by the   angle parameter around the axis given by  the axis parameter.  Valid values for the  axis are 'x' (the x axis), 'y' (the y axis) or 'z' (the z axis).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="ClibPDF_31" />
      <property kind="parameter" name="axis" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_scale">
    <description><![CDATA[  The swf_scale scales the x coordinate of the  curve by the value of the x parameter, the  y coordinate of the curve by the value of the   y parameter, and the z coordinate of the  curve by the value of the z parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property kind="parameter" name="z" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_setfont">
    <description><![CDATA[  The swf_setfont sets the current font to the  value given by the fontid parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_9" />
    </properties>
    
  </element>
  <element kind="function" name="swf_setframe">
    <description><![CDATA[  The swf_setframe changes the active frame to  the frame specified by framenumber .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapearc">
    <description><![CDATA[  The swf_shapearc function draws a circular  arc from angle A given by the ang1  parameter to angle B given by the ang2  parameter.  The center of the circle has an x coordinate given by  the x parameter and a y coordinate given  by the y , the radius of the circle is  given by the r parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property ref="PDF_13" />
      <property kind="parameter" name="ang1" type="float" required="1" />
      <property kind="parameter" name="ang2" type="float" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapecurveto">
    <description><![CDATA[  The swf_shapecurveto function draws a  quadratic bezier curve from the current location, though the x  coordinate given by x1 and the y  coordinate given by y1 to the x  coordinate given by x2 and the y coordinate  given by y2 .  The current position is then  set to the x,y coordinates given by the x2 and   y2 parameters  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="ClibPDF_18" />
      <property ref="ClibPDF_19" />
      <property ref="ClibPDF_20" />
      <property ref="ClibPDF_21" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapecurveto3">
    <description><![CDATA[  Draw a cubic bezier curve using the x,y coordinate pairs   x1 , y1 and   x2 , y2 as off curve  control points and the x,y coordinate   x3 , y3 as an  endpoint.  The current position is then set to the x,y coordinate  pair given by   x3 , y3 .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="ClibPDF_18" />
      <property ref="ClibPDF_19" />
      <property ref="ClibPDF_20" />
      <property ref="ClibPDF_21" />
      <property ref="ClibPDF_22" />
      <property ref="ClibPDF_23" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapefillbitmapclip">
    <description><![CDATA[  Sets the fill to bitmap clipped, empty spaces will be filled by  the bitmap given by the bitmapid  parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_14" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapefillbitmaptile">
    <description><![CDATA[  Sets the fill to bitmap tile, empty spaces will be filled by the  bitmap given by the bitmapid parameter  (tiled).  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_14" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapefilloff">
    <description><![CDATA[  The swf_shapefilloff function turns off  filling for the current shape.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapefillsolid">
    <description><![CDATA[  The swf_shapefillsolid function sets the  current fill style to solid, and then sets the fill color to the  values of the rgba parameters.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PDF_13" />
      <property ref="SWF_6" />
      <property ref="PDF_23" />
      <property ref="PDF_22" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapelinesolid">
    <description><![CDATA[  The swf_shapelinesolid function sets the  current line style to the color of the   rgba parameters and width to the   width parameter.  If 0.0 is given as a  width then no lines are drawn.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="PDF_13" />
      <property ref="SWF_6" />
      <property ref="PDF_23" />
      <property ref="PDF_22" />
      <property ref="ClibPDF_32" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapelineto">
    <description><![CDATA[  The swf_shapelineto draws a line to the x,y  coordinates given by the x parameter & the   y parameter.  The current position is then  set to the x,y parameters.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="swf_shapemoveto">
    <description><![CDATA[  The swf_shapemoveto function moves the  current position to the x coordinate given by the   x parameter and the y position given by  the y parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Math_3" />
      <property ref="Math_2" />
    </properties>
    
  </element>
  <element kind="function" name="swf_showframe">
    <description><![CDATA[  The swf_showframe function will output the current frame.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_startbutton">
    <description><![CDATA[  The swf_startbutton function starts off the  definition of a button.  The type  parameter can either be TYPE_MENUBUTTON or TYPE_PUSHBUTTON.  The  TYPE_MENUBUTTON constant allows the focus to travel from the  button when the mouse is down, TYPE_PUSHBUTTON does not allow the  focus to travel when the mouse is down.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
      <property ref="COM_27" />
    </properties>
    
  </element>
  <element kind="function" name="swf_startdoaction">
    <description><![CDATA[  The swf_startdoaction function starts the  description of an action list for the current frame.  This must  be called before actions are defined for the current frame.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="swf_startshape">
    <description><![CDATA[  The swf_startshape function starts a complex  shape, with an object id given by the   objid parameter.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
    </properties>
    
  </element>
  <element kind="function" name="swf_startsymbol">
    <description><![CDATA[  Define an object id as a symbol.  Symbols are tiny flash movies  that can be played simultaneously.  The   objid parameter is the object id you want  to define as a symbol.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Hyperwave_3" />
    </properties>
    
  </element>
  <element kind="function" name="swf_textwidth">
    <description><![CDATA[  The swf_textwidth function gives the width  of the string, str , in pixels, using the  current font and font size.  ]]></description>
    <properties>
      <property ref="ret_float" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="swf_translate">
    <description><![CDATA[  The swf_translate function translates the  current transformation by the x ,   y , and z values  given.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Math_3" />
      <property ref="Math_2" />
      <property ref="SWF_39" />
    </properties>
    
  </element>
  <element kind="function" name="swf_viewport">
    <description><![CDATA[  The swf_viewport function selects an area  for future drawing for xmin to   xmax and ymin to   ymax , if this function is not called the  area defaults to the size of the screen.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SWF_24" />
      <property ref="SWF_25" />
      <property ref="SWF_26" />
      <property ref="SWF_27" />
    </properties>
    
  </element>
</group>
<group name="Semaphore">
  <description><![CDATA[Semaphore, Shared Memory and IPC Functions]]></description>
  <element kind="function" name="ftok">
    <description><![CDATA[  The function converts the pathname of an existing  accessible file and a project identifier ( proj )  into a   for use with for example   shmop_open and other System V IPC keys. The   proj parameter should be a one character string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Filesystem_21" />
      <property kind="parameter" name="proj" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="msg_get_queue">
    <description><![CDATA[   msg_get_queue returns an id that can be used to  access the System V message queue with the given   key . The first call creates the message queue with  the optional perms (default: 0666).  A second call to msg_get_queue for the same   key will return a different message queue  identifier, but both identifiers access the same underlying message  queue.  If the message queue already exists, the perms  will be ignored.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="MCVE_22" />
      <property kind="parameter" name="perms" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="msg_receive">
    <description><![CDATA[   msg_receive will receive the first message from the  specified queue of the type specified by   desiredmsgtype .  The type of the message that was received will be stored in   msgtype .  The maximum size of message to be accepted is specified by the   maxsize ; if the message in the queue is larger  than this size the function will fail (unless you set   flags as described below).  The received message will be stored in message ,  unless there were errors receiving the message, in which case the  optional errorcode will be set to the value of the  system errno variable to help you identify the cause.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="queue" type="resource" required="1" />
      <property kind="parameter" name="desiredmsgtype" type="int" required="1" />
      <property kind="parameter" name="msgtype" type="int" required="1" />
      <property kind="parameter" name="maxsize" type="int" required="1" />
      <property kind="parameter" name="message" type="mixed" required="1" />
      <property kind="parameter" name="unserialize" type="bool"  />
      <property ref="COM_29" />
      <property ref="Informix_6" />
    </properties>
    
  </element>
  <element kind="function" name="msg_remove_queue">
    <description><![CDATA[   msg_remove_queue destroys the message queue specified  by the queue .  Only use this function when all  processes have finished working with the message queue and you need to  release the system resources held by it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Semaphore_3" />
    </properties>
    
  </element>
  <element kind="function" name="msg_send">
    <description><![CDATA[   msg_send sends a message of type   msgtype (which MUST be greater than 0) to a  the message queue specified by queue .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Semaphore_3" />
      <property ref="Semaphore_5" />
      <property ref="Semaphore_7" />
      <property kind="parameter" name="serialize" type="bool"  />
      <property kind="parameter" name="blocking" type="bool"  />
      <property ref="Informix_6" />
    </properties>
    
  </element>
  <element kind="function" name="msg_set_queue">
    <description><![CDATA[   msg_set_queue allows you to change the values of the  msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the  underlying message queue data structure.  You specify the values you require by setting the value of the keys that  you require in the data array.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Semaphore_3" />
      <property ref="PostgreSQL_9" />
    </properties>
    
  </element>
  <element kind="function" name="msg_stat_queue">
    <description><![CDATA[   msg_stat_queue returns the message queue meta data  for the message queue specified by the queue .  This is useful, for example, to determine which process sent the message  that was just received.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Semaphore_3" />
    </properties>
    
  </element>
  <element kind="function" name="sem_acquire">
    <description><![CDATA[   sem_acquire blocks (if necessary) until the  semaphore can be acquired.  A process attempting to acquire a  semaphore which it has already acquired will block forever  if acquiring the semaphore would cause its maximum number  of semaphore to be exceeded.   sem_identifier is a semaphore ressource,  obtained from sem_get .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="sem_identifier" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="sem_get">
    <description><![CDATA[   sem_get returns an id that can be used to  access the System V semaphore with the given key .  The semaphore is created if necessary using the permission bits specified in   perm (defaults to 0666).  The number of processes that can  acquire the semaphore simultaneously is set to max_acquire  (defaults to 1).  Actually this value is set only if the process  finds it is the only process currently attached to the semaphore.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="MCVE_22" />
      <property kind="parameter" name="max_acquire" type="int"  />
      <property kind="parameter" name="perm" type="int"  />
      <property kind="parameter" name="auto_release" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="sem_release">
    <description><![CDATA[   sem_release releases the semaphore if it  is currently acquired by the calling process, otherwise  a warning is generated.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Semaphore_11" />
    </properties>
    
  </element>
  <element kind="function" name="sem_remove">
    <description><![CDATA[   sem_remove removes the semaphore   sem_identifier if it  has been created by sem_get ,  otherwise generates a warning.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Semaphore_11" />
    </properties>
    
  </element>
  <element kind="function" name="shm_attach">
    <description><![CDATA[   shm_attach returns an id that that can be  used to access the System V shared memory with the given key, the  first call creates the shared memory segment with memsize  (default: sysvshm.init_mem in the , otherwise  10000 bytes) and the optional perm-bits perm  (default: 0666).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="MCVE_22" />
      <property kind="parameter" name="memsize" type="int"  />
      <property ref="Semaphore_13" />
    </properties>
    
  </element>
  <element kind="function" name="shm_detach">
    <description><![CDATA[   shm_detach disconnects from the shared  memory given by the shm_identifier created  by shm_attach . Remember, that shared memory  still exist in the Unix system and the data is still present.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="shm_identifier" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="shm_get_var">
    <description><![CDATA[   shm_get_var returns the variable with a given   variable_key , in the shared memory  segment identified by shm_identifier .   shm_identifier was obtained from   shm_attach . The variable is still present  in the shared memory.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Semaphore_16" />
      <property kind="parameter" name="variable_key" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="shm_put_var">
    <description><![CDATA[   shm_put_var inserts or updates the   variable with the given   variable_key .   are supported.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Semaphore_16" />
      <property ref="Semaphore_17" />
      <property ref="OCI8_7" />
    </properties>
    
  </element>
  <element kind="function" name="shm_remove">
    <description><![CDATA[   shm_remove removes the shared memory   shm_identifier . All data will be destroyed.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Semaphore_16" />
    </properties>
    
  </element>
  <element kind="function" name="shm_remove_var">
    <description><![CDATA[  Removes a variable with a given variable_key  and frees the occupied memory.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Semaphore_16" />
      <property ref="Semaphore_17" />
    </properties>
    
  </element>
</group>
<group name="Sessions">
  <description><![CDATA[Session Handling Functions]]></description>
  <element kind="function" name="session_cache_expire">
    <description><![CDATA[   session_cache_expire returns the current setting of   . The value returned should be read  in minutes, defaults to 180. If new_cache_expire  is given, the current cache expire is replaced with   new_cache_expire .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* set the cache limiter to 'private' */

session_cache_limiter('private');
$cache_limiter = session_cache_limiter();

/* set the cache expire to 30 minutes */
session_cache_expire(30);
$cache_expire = session_cache_expire();

/* start the session */

session_start();

echo "The cache limiter is now set to $cache_limiter<br />";
echo "The cached session pages expire after $cache_expire minutes";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="new_cache_expire" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="session_cache_limiter">
    <description><![CDATA[   session_cache_limiter returns the name of the  current cache limiter. If cache_limiter  is specified, the name of the current cache limiter is changed to the  new value.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* set the cache limiter to 'private' */

session_cache_limiter('private');
$cache_limiter = session_cache_limiter();

echo "The cache limiter is now set to $cache_limiter<br />";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="cache_limiter" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="session_decode">
    <description><![CDATA[   session_decode decodes the session data in   data , setting variables stored in the  session.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="session_destroy">
    <description><![CDATA[  In order to kill the session altogether, like to log the user out, the  session id must also be unset. If a cookie is used to propagate the  session id (default behavior), then the session cookie must be deleted.   setcookie may be used for that.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Initialize the session.
// If you are using session_name("something"), don't forget it now!
session_start();

// Unset all of the session variables.
$_SESSION = array();

// If it's desired to kill the session, also delete the session cookie.
// Note: This will destroy the session, and not just the session data!
if (isset($_COOKIE[session_name()])) {
    setcookie(session_name(), '', time()-42000, '/');
}

// Finally, destroy the session.
session_destroy();
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="session_encode">
    <description><![CDATA[   session_encode returns a string with the  contents of the current session encoded within.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="session_get_cookie_params">
    <description><![CDATA[  The session_get_cookie_params function returns an  array with the current session cookie information, the array contains  the following items:    ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="session_id">
    <description><![CDATA[   session_id returns the session id for the  current session.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="id" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="session_is_registered">
    <description><![CDATA[   session_is_registered returns if there  is a global variable with the name name  registered in the current session.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="session_module_name">
    <description><![CDATA[   session_module_name returns the name of the  current session module. If module is  specified, that module will be used instead.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="module" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="session_name">
    <description><![CDATA[   session_name returns the name of the current  session. If name is specified, the name of  the current session is changed to its value.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* set the session name to WebsiteID */

$previous_name = session_name("WebsiteID");

echo "The previous session name was $previous_name<br />";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Hyperwave API_2" />
    </properties>
    
  </element>
  <element kind="function" name="session_regenerate_id">
    <description><![CDATA[   session_regenerate_id will replace the current  session id with a new one, and keep the current session information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
session_start();

$old_sessionid = session_id();

session_regenerate_id();

$new_sessionid = session_id();

echo "Old Session: $old_sessionid<br />";
echo "New Session: $new_sessionid<br />";

print_r($_SESSION);
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="session_register">
    <description><![CDATA[   session_register accepts a variable number of  arguments, any of which can be either a string holding the name of a  variable or an array consisting of variable names or other arrays. For  each name, session_register registers the global  variable with that name in the current session.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="name" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="session_save_path">
    <description><![CDATA[   session_save_path returns the path of the current  directory used to save session data. If path  is specified, the path to which data is saved will be changed.   session_save_path needs to be called before   session_start for that purpose.    On some operating systems, you may want to specify a path on a  filesystem that handles lots of small files efficiently. For  example, on Linux, reiserfs may provide better performance than  ext2fs.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="HTTP_6" />
    </properties>
    
  </element>
  <element kind="function" name="session_set_cookie_params">
    <description><![CDATA[  Set cookie parameters defined in the file. The effect of this  function only lasts for the duration of the script. Thus, you need to  call session_set_cookie_params for every request and  before session_start is called.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="lifetime" type="int" required="1" />
      <property ref="HTTP_6" />
      <property ref="HTTP_7" />
      <property ref="HTTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="session_set_save_handler">
    <description><![CDATA[   session_set_save_handler sets the user-level  session storage functions which are used for storing and  retrieving data associated with a session.  This is most useful  when a storage method other than those supplied by PHP sessions  is preferred.  i.e. Storing the session data in a local database.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function open($save_path, $session_name) 
{
  global $sess_save_path, $sess_session_name;
       
  $sess_save_path = $save_path;
  $sess_session_name = $session_name;
  return(true);
}

function close() 
{
  return(true);
}

function read($id) 
{
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "r")) {
    $sess_data = fread($fp, filesize($sess_file));
    return($sess_data);
  } else {
    return(""); // Must return "" here.
  }

}

function write($id, $sess_data) 
{
  global $sess_save_path, $sess_session_name;

  $sess_file = "$sess_save_path/sess_$id";
  if ($fp = @fopen($sess_file, "w")) {
    return(fwrite($fp, $sess_data));
  } else {
    return(false);
  }

}

function destroy($id) 
{
  global $sess_save_path, $sess_session_name;
       
  $sess_file = "$sess_save_path/sess_$id";
  return(@unlink($sess_file));
}

/*********************************************
 * WARNING - You will need to implement some *
 * sort of garbage collection routine here.  *
 *********************************************/
function gc($maxlifetime) 
{
  return true;
}

session_set_save_handler("open", "close", "read", "write", "destroy", "gc");

session_start();

// proceed to use sessions normally

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="open" type="string" required="1" />
      <property kind="parameter" name="close" type="string" required="1" />
      <property kind="parameter" name="read" type="string" required="1" />
      <property kind="parameter" name="write" type="string" required="1" />
      <property kind="parameter" name="destroy" type="string" required="1" />
      <property kind="parameter" name="gc" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="session_start">
    <description><![CDATA[  If you are using cookie-based sessions, you must call   session_start before anything is outputted to the  browser.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// page1.php

session_start();

echo 'Welcome to page #1';

$_SESSION['favcolor'] = 'green';
$_SESSION['animal']   = 'cat';
$_SESSION['time']     = time();

// Works if session cookie was accepted
echo '<br /><a href="page2.php">page 2</a>';

// Or maybe pass along the session id, if needed
echo '<br /><a href="page2.php?' . SID . '">page 2</a>';
?>

      

<?php
// page2.php

session_start();

echo 'Welcome to page #2<br />';

echo $_SESSION['favcolor']; // green
echo $_SESSION['animal'];   // cat
echo date('Y m d H:i:s', $_SESSION['time']);

// You may want to use SID here, like we did in page1.php
echo '<br /><a href="page1.php">page 1</a>';
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="session_unregister">
    <description><![CDATA[   session_unregister unregisters  the global variable named name from the  current session.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="session_unset">
    <description><![CDATA[  The session_unset function frees all session variables  currently registered.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="session_write_close">
    <description><![CDATA[  End the current session and store session data.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
</group>
<group name="SimpleXML">
  <description><![CDATA[SimpleXML functions]]></description>
  <element kind="function" name="SimpleXMLElement->asXML">
    <description><![CDATA[  The method formats the parent object's data  in XML version 1.0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = <<<XML
<a>
 <b>
  <c>text</c>
  <c>stuff</c>
 </b>
 <d>
  <c>code</c>
 </d>
</a>
XML;

$xml = simplexml_load_string($string);

echo $xml->asXML(); // <?xml ... <a><b><c>text</c><c>stuff</c> ...

?>

      

<?php
// Continued from example XML above.

/* Search for <a><b><c> */
$result = $xml->xpath('/a/b/c');

while(list( , $node) = each($result)) {
    echo $node->asXML(); // <c>text</c> and <c>stuff</c>
}
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLElement->xpath">
    <description><![CDATA[  The method searches the SimpleXML node for  children matching the  path .  It always returns an of SimpleXMLElement objects.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = <<<XML
<a>
 <b>
  <c>text</c>
  <c>stuff</c>
 </b>
 <d>
  <c>code</c>
 </d>
</a>
XML;

$xml = simplexml_load_string($string);

/* Search for <a><b><c> */
$result = $xml->xpath('/a/b/c');

while(list( , $node) = each($result)) {
    echo '/a/b/c: ',$node,"\n";
}

/* Relative paths also work... */
$result = $xml->xpath('b/c');

while(list( , $node) = each($result)) {
    echo 'b/c: ',$node,"\n";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="simplexml_element->attributes">
    <description><![CDATA[  This function provides the attributes and values defined within an xml tag.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = <<<XML
<a>
 <foo name="one" game="lonely">1</foo>
</a>
XML;

$xml = simplexml_load_string($string);
foreach($xml->foo[0]->attributes() as $a => $b) {
    echo $a,'="',$b,"\"\n";
}
?>]]></description>
      </property>
      <property kind="return" type="SimpleXMLElement" />	
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="simplexml_element->children">
    <description><![CDATA[  This method finds the children of the element of which it is a member. The result  follows normal iteration rules.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$xml = simplexml_load_string(
'<person>
 <child role="son">
  <child role="daughter"/>
 </child>
 <child role="daughter">
  <child role="son">
   <child role="son"/>
  </child>
 </child>
</person>');

foreach ($xml->children() as $second_gen) {
    echo ' The person begot a ' . $second_gen['role'];

    foreach ($second_gen->children() as $third_gen) {
        echo ' who begot a ' . $third_gen['role'] . ';';
    
        foreach ($third_gen->children() as $fourth_gen) {
            echo ' and that ' . $third_gen['role'] .
                ' begot a ' . $fourth_gen['role'];
        }
    }
}
?>]]></description>
      </property>
      <property ref="ret_SimpleXMLElement" />
    </properties>
    
  </element>
  <element kind="function" name="simplexml_import_dom">
    <description><![CDATA[    This function takes a node of a  document and makes it into a SimpleXML node. This new object can  then be used as a native SimpleXML element. If any errors occur,  it returns .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$dom = new domDocument;
$dom->loadXML('<books><book><title>blah</title></book></books>');
if (!$dom) {
    echo 'Error while parsing the document';
    exit;
}

$s = simplexml_import_dom($dom);

echo $s->book[0]->title; // blah
?>]]></description>
      </property>
      <property ref="ret_SimpleXMLElement" />
      <property ref="DOM_23" />
      <property ref="Object Aggregation_5" />
    </properties>
    
  </element>
  <element kind="function" name="simplexml_load_file">
    <description><![CDATA[  This function will convert the well-formed XML document in the file  specified by filename to an  of class . If any errors occur during file  access or interpretation, the function returns .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// The file test.xml contains an XML document with a root element
// and at least an element /[root]/title.

if (file_exists('test.xml')) {
    $xml = simplexml_load_file('test.xml');
 
    var_dump($xml);
} else {
    exit('Failed to open test.xml.');
}
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Apache_3" />
      <property ref="Object Aggregation_5" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
  <element kind="function" name="simplexml_load_string">
    <description><![CDATA[  This function will take the well-formed xml string   data and return an of class   with properties containing the data held  within the xml document. If any errors occur, it returns .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = <<<XML
<?xml version='1.0'?> 
<document>
 <title>Forty What?</title>
 <from>Joe</from>
 <to>Jane</to>
 <body>
  I know that's the answer -- but what's the question?
 </body>
</document>
XML;

$xml = simplexml_load_string($string);

var_dump($xml);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Bzip2_7" />
      <property ref="Object Aggregation_5" />
      <property ref="DOM_30" />
    </properties>
    
  </element>
</group>
<group name="Sockets">
  <description><![CDATA[Socket Functions]]></description>
  <element kind="function" name="socket_accept">
    <description><![CDATA[  After the socket socket has been created  using socket_create , bound to a name with   socket_bind , and told to listen for connections  with socket_listen , this function will accept  incoming connections on that socket. Once a successful connection  is made, a new socket resource is returned, which may be used  for communication. If there are multiple connections queued on  the socket, the first will be used. If there are no pending  connections, socket_accept will block until  a connection becomes present. If socket  has been made non-blocking using   socket_set_blocking or   socket_set_nonblock , will be returned.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="socket" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_bind">
    <description><![CDATA[   socket_bind binds the name given in   address to the socket described by   socket , which must be a valid socket  resource created with socket_create .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
      <property ref="IMAP_31" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="socket_clear_error">
    <description><![CDATA[  This function clears the error code on the given socket or the global  last socket error.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="socket" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="socket_close">
    <description><![CDATA[   socket_close closes the socket resource  given by socket .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Sockets_1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_connect">
    <description><![CDATA[  Initiates a connection using the socket resource   socket , which must be a valid socket  resource created with socket_create .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
      <property ref="IMAP_31" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="socket_create">
    <description><![CDATA[  Creates and returns a socket resource, also referred to as an endpoint  of communication. A typical network connection is made up of 2 sockets, one  performing the role of the client, and another performing the role of the server.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="domain" type="int" required="1" />
      <property ref="COM_27" />
      <property kind="parameter" name="protocol" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_create_listen">
    <description><![CDATA[  This function is meant to ease the task of creating a new socket which  only listens to accept new connections.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="APD_8" />
      <property kind="parameter" name="backlog" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="socket_create_pair">
    <description><![CDATA[   socket_create_pair creates two connected and indistinguishable sockets, and stores  them in fd . This function is commonly used in IPC (InterProcess Communication).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$sockets = array();
$uniqid = uniqid('');
if (file_exists("/tmp/$uniqid.sock")) {
    die('Temporary socket already exists.');
}
/* Setup socket pair */
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets)) {
    echo socket_strerror(socket_last_error());
}
/* Send and Recieve Data */
if (!socket_write($sockets[0], "ABCdef123\n", strlen("ABCdef123\n"))) {
    echo socket_strerror(socket_last_error());
}
if (!$data = socket_read($sockets[1], strlen("ABCdef123\n"), PHP_BINARY_READ)) {
    echo socket_strerror(socket_last_error());
}
var_dump($data);

/* Close sockets */
socket_close($sockets[0]);
socket_close($sockets[1]);
?>

    

<?php
$ary = array();
$strone = 'Message From Parent.';
$strtwo = 'Message From Child.';
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $ary)) {
    echo socket_strerror(socket_last_error());
}
$pid = pcntl_fork();
if ($pid == -1) {
    echo 'Could not fork Process.';
} elseif ($pid) {
    /*parent*/
    socket_close($ary[0]);
    if (!socket_write($ary[1], $strone, strlen($strone))) {
        echo socket_strerror(socket_last_error());
    }
    if (socket_read($ary[1], strlen($strtwo), PHP_BINARY_READ) == $strtwo) {
        echo "Recieved $strtwo\n";
    }
    socket_close($ary[1]);
} else {
    /*child*/
    socket_close($ary[1]);
    if (!socket_write($ary[0], $strtwo, strlen($strtwo))) {
        echo socket_strerror(socket_last_error());
    }
    if (socket_read($ary[0], strlen($strone), PHP_BINARY_READ) == $strone) {
        echo "Recieved $strone\n";
    }
    socket_close($ary[0]);
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Sockets_3" />
      <property ref="COM_27" />
      <property ref="Sockets_4" />
      <property kind="parameter" name="fd" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_get_option">
    <description><![CDATA[  The socket_get_option function retrieves the value for  the option specified by the optname parameter for the  socket specified by the socket parameter. socket_get_option  will return on failure.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Sockets_1" />
      <property kind="parameter" name="level" type="int" required="1" />
      <property kind="parameter" name="optname" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_getpeername">
    <description><![CDATA[  If the given socket is of type  or , socket_getpeername   will return the peers (remote) in appropriate notation (e.g.   or ) in the   address parameter and, if the optional   port parameter is present, also the associated port.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
      <property ref="Mail_1" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="socket_getsockname">
    <description><![CDATA[  If the given socket is of type  or , socket_getsockname   will return the local in appropriate notation (e.g.   or ) in the   address parameter and, if the optional   port parameter is present, also the associated port.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
      <property ref="Mail_1" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="socket_last_error">
    <description><![CDATA[  This function returns a socket error code.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Sockets_2" />
    </properties>
    
  </element>
  <element kind="function" name="socket_listen">
    <description><![CDATA[  After the socket socket has been created  using socket_create and bound to a name with   socket_bind , it may be told to listen for incoming  connections on socket .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
      <property ref="Sockets_5" />
    </properties>
    
  </element>
  <element kind="function" name="socket_read">
    <description><![CDATA[  The function socket_read reads from the socket  resource socket created by the   socket_create or   socket_accept functions. The maximum number of bytes read  is specified by the length parameter. Otherwise  you can use \r, \n, or \0 to end reading  (depending on the type parameter, see below).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Sockets_1" />
      <property ref="Filesystem_19" />
      <property ref="COM_6" />
    </properties>
    
  </element>
  <element kind="function" name="socket_recv">
    <properties>
      <property ref="ret_int" />
      <property ref="Sockets_1" />
      <property kind="parameter" name="buf" type="string" required="1" />
      <property ref="Firebird/InterBase_13" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="socket_recvfrom">
    <properties>
      <property ref="ret_int" />
      <property ref="Sockets_1" />
      <property ref="Sockets_9" />
      <property ref="Firebird/InterBase_13" />
      <property ref="Direct IO_4" />
      <property ref="CCVS_7" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="socket_select">
    <description><![CDATA[   socket_select accepts arrays of sockets and  waits for them to change status. Those coming with BSD sockets background  will recognize that those socket resource arrays are in fact the  so-called file descriptor sets. Three independent arrays of socket  resources are watched.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Prepare the read array */
$read = array($socket1, $socket2);

$num_changed_sockets = socket_select($read, $write = NULL, $except = NULL, 0);

if ($num_changed_sockets === false) {
    /* Error handling */
} else if ($num_changed_sockets > 0) {
    /* At least at one of the sockets something interesting happened */
}
?>

      

<?php
socket_select($r, $w, $e = NULL, 0);
?>

       

<?php
if (false === socket_select($r, $w, $e = NULL, 0)) {
    echo "socket_select() failed, reason: " .
        socket_strerror(socket_last_error()) . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="read" type="array" required="1" />
      <property kind="parameter" name="write" type="array" required="1" />
      <property kind="parameter" name="except" type="array" required="1" />
      <property kind="parameter" name="tv_sec" type="int" required="1" />
      <property kind="parameter" name="tv_usec" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="socket_send">
    <description><![CDATA[  The function socket_send sends   len bytes to the socket   socket from buf  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Sockets_1" />
      <property ref="Sockets_9" />
      <property ref="Firebird/InterBase_13" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="socket_sendto">
    <description><![CDATA[  The function socket_sendto sends   len bytes from buf   through the socket socket to the   port at the address addr  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $sh = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
    if (socket_bind($sh, '127.0.0.1', 4242)) {
        echo "Socket bound correctly";
    }
    $buf = 'Test Message';
    $len = strlen($buf);
    if (socket_sendto($sh, $buf, $len, 0x100, '192.168.0.2', 4242) !== false) {
        echo "Message sent correctly";
    }
    socket_close($sh);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Sockets_1" />
      <property ref="Sockets_9" />
      <property ref="Firebird/InterBase_13" />
      <property ref="Direct IO_4" />
      <property ref="Mail_1" />
      <property ref="FTP_5" />
    </properties>
    
  </element>
  <element kind="function" name="socket_set_block">
    <description><![CDATA[  The socket_set_block function removes the O_NONBLOCK flag  on the socket specified by the socket parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$port = 9090;
if (!$socket = socket_create_listen($port)) {
    echo socket_strerror(socket_last_error());
}

if (!socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1)) {
    echo socket_strerror(socket_last_error());
}

if (!socket_set_nonblock($socket)) { // $socket is now nonblocking
    echo socket_strerror(socket_last_error());
}

if (!socket_set_block($socket)) {     // $socket is now blocking
    echo socket_strerror(socket_last_error());
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_set_nonblock">
    <description><![CDATA[  The socket_set_nonblock function sets the O_NONBLOCK flag  on the socket specified by the socket parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$port = 9090;
if (!$socket = socket_create_listen($port)) {
    echo socket_strerror(socket_last_error());
}

if (!socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1)) {
    echo socket_strerror(socket_last_error());
}

if (!socket_set_nonblock($socket)) {
    echo socket_strerror(socket_last_error());
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_set_option">
    <description><![CDATA[  The socket_set_option function sets the option specified by the optname  parameter, at the protocol level specified by the level parameter, to the  value pointed to by the optval parameter for the socket  specified by the socket parameter. socket_set_option  will return on failure.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
      <property ref="Sockets_7" />
      <property ref="Sockets_8" />
      <property kind="parameter" name="optval" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="socket_shutdown">
    <description><![CDATA[  The socket_shutdown function allows you to stop  incoming, outgoing or all data (the default) from being sent through the   socket  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Sockets_1" />
      <property ref="OvrimosSQL_3" />
    </properties>
    
  </element>
  <element kind="function" name="socket_strerror">
    <description><![CDATA[   socket_strerror takes as its   errno parameter a socket error code as returned by   socket_last_error and returns the corresponding  explanatory text. This makes it a bit more pleasant to figure out why  something didn't work; for instance, instead of having to track down a  system include file to find out what '-111' means, you just pass it to   socket_strerror , and it tells you what happened.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (false == ($socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {
   echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
} 

if (false == (@socket_bind($socket, '127.0.0.1', 80))) {
   echo "socket_bind() failed: reason: " . socket_strerror(socket_last_error($socket)) . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Errors and Logging_8" />
    </properties>
    
  </element>
  <element kind="function" name="socket_write">
    <description><![CDATA[  The function socket_write writes to the socket   socket from   buffer .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Sockets_1" />
      <property ref="Hyperwave API_5" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
</group>
<group name="Streams">
  <description><![CDATA[  Streams are an integral part of PHP as of version 4.3.0. No steps are  required to enable them.  ]]></description>
  <element kind="function" name="stream_context_create">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$opts = array(
  'http'=>array(
    'method'=>"GET",
    'header'=>"Accept-language: en\r\n" . 
              "Cookie: foo=bar\r\n"
  )
);

$context = stream_context_create($opts);

/* Sends an http request to www.example.com
   with additional headers shown above */
$fp = fopen('http://www.example.com', 'r', false, $context);
fpassthru($fp);
fclose($fp);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="SOAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="stream_context_get_default">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$default_opts = array(
  'http'=>array(
    'method'=>"GET",
    'header'=>"Accept-language: en\r\n" . 
              "Cookie: foo=bar",
    'proxy'=>"tcp://10.54.1.39:8000"
  )
);


$alternate_opts = array(
  'http'=>array(
    'method'=>"POST",
    'header'=>"Content-type: application/x-www-form-urlencoded\r\n" .
              "Content-length: " . strlen("baz=bomb"),
    'content'=>"baz=bomb"
  )
);

$default = stream_context_get_default($default_opts);
$alternate = stream_context_create($alternate_opts);

/* Sends a regular GET request to proxy server at 10.54.1.39
 * For www.example.com using context options specified in $default_opts
 */
readfile('http://www.example.com');

/* Sends a POST request directly to www.example.com
 * Using context options specified in $alternate_opts
 */
readfile('http://www.example.com', false, $alternate);

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="SOAP_2" />
    </properties>
    
  </element>
  <element kind="function" name="stream_context_get_options">
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="stream_or_context" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="stream_context_set_option">
    <properties>
      <property ref="ret_bool" />
      <property ref="Streams_1" />
      <property kind="parameter" name="wrapper" type="string" required="1" />
      <property ref="Printer_28" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="stream_context_set_params">
    <properties>
      <property ref="ret_bool" />
      <property ref="Streams_1" />
      <property kind="parameter" name="params" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="stream_copy_to_stream">
    <description><![CDATA[  Makes a copy of up to maxlength bytes  of data from the current position in source to   dest . If maxlength  is not specified, all remaining content in source  will be copied.  Returns the total count of bytes copied.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$src = fopen('http://www.example.com', 'r');
$dest1 = fopen('first1k.txt', 'w');
$dest2 = fopen('remainder.txt', 'w');

echo stream_copy_to_stream($src, $dest1, 1024) . " bytes copied to first1k.txt\n";
echo stream_copy_to_stream($src, $dest2) . " bytes copied to remainder.txt\n";

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Image_69" />
      <property kind="parameter" name="dest" type="resource" required="1" />
      <property ref="OCI8_8" />
    </properties>
    
  </element>
  <element kind="function" name="stream_filter_append">
    <description><![CDATA[  Adds filtername to the list of filters  attached to stream .  This filter will be  added with the specified params  to the of the list and  will therefore be called last during stream operations.  To  add a filter to the beginning of the list, use   stream_filter_prepend .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a test file for reading and writing */
$fp = fopen("test.txt", "rw");

/* Apply the ROT13 filter to the
 * write filter chain, but not the
 * read filter chain */
stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);

/* Write a simple string to the file
 * it will be ROT13 transformed on the
 * way out */
fwrite($fp, "This is a test\n");

/* Back up to the beginning of the file */
rewind($fp);

/* Read the contents of the file back out.
 * Had the filter been applied to the
 * read filter chain as well, we would see
 * the text ROT13ed back to its original state */
fpassthru($fp);

fclose($fp);

/* Expected Output
   ---------------

Guvf vf n grfg

 */
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="IMAP_8" />
      <property kind="parameter" name="filtername" type="string" required="1" />
      <property kind="parameter" name="read_write" type="int"  />
      <property kind="parameter" name="params" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="stream_filter_prepend">
    <description><![CDATA[  Adds filtername to the list of filters  attached to stream .  This filter will be  added with the specified params  to the of the list and  will therefore be called first during stream operations.  To  add a filter to the end of the list, use   stream_filter_append .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="IMAP_8" />
      <property ref="Streams_5" />
      <property ref="Streams_6" />
      <property ref="Streams_7" />
    </properties>
    
  </element>
  <element kind="function" name="stream_filter_register">
    <description><![CDATA[  This method is called upon filter shutdown (typically, this is also  during stream shutdown), and is executed  the method is called.  If any resources  were allocated or initialzed during  this would be the time to destroy or dispose of them.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* Define our filter class */
class strtoupper_filter extends php_user_filter {
  function filter($in, $out, &$consumed, $closing) 
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      $bucket->data = strtoupper($bucket->data);
      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }
} 

/* Register our filter with PHP */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Failed to register filter");

$fp = fopen("foo-bar.txt", "w");

/* Attach the registered filter to the stream just opened */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* Read the contents back out
 */
readfile("foo-bar.txt");

?>

      

<?php

/* Define our filter class */
class string_filter extends php_user_filter {
  var $mode;

  function filter($in, $out, &$consumed, $closing) 
  {
    while ($bucket = stream_bucket_make_writeable($in)) {
      if ($this->mode == 1) {
        $bucket->data = strtoupper($bucket->data);
      } elseif ($this->mode == 0) {
        $bucket->data = strtolower($bucket->data);
      }

      $consumed += $bucket->datalen;
      stream_bucket_append($out, $bucket);
    }
    return PSFS_PASS_ON;
  }

  function onCreate() 
  {
    if ($this->filtername == 'str.toupper') {
      $this->mode = 1;
    } elseif ($this->filtername == 'str.tolower') {
      $this->mode = 0;
    } else {
      /* Some other str.* filter was asked for,
         report failure so that PHP will keep looking */
      return false;
    }

    return true;
  }
} 

/* Register our filter with PHP */
stream_filter_register("str.*", "string_filter")
    or die("Failed to register filter");

$fp = fopen("foo-bar.txt", "w");

/* Attach the registered filter to the stream just opened 
   We could alternately bind to str.tolower here */
stream_filter_append($fp, "str.toupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* Read the contents back out
 */
readfile("foo-bar.txt");
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Streams_5" />
      <property ref="Classkit_1" />
      <property kind="parameter" name="in" type="resource" required="1" />
      <property kind="parameter" name="out" type="resource" required="1" />
      <property kind="parameter" name="consumed" type="int" required="1" />
      <property kind="parameter" name="closing" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="stream_filter_remove">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a test file for reading and writing */
$fp = fopen("test.txt", "rw");

$rot13_filter = stream_filter_append($fp, "string.rot13", STREAM_FILTER_WRITE);
fwrite($fp, "This is ");
stream_filter_remove($rot13_filter);
fwrite($fp, "a test\n");

rewind($fp);
fpassthru($fp);
fclose($fp);

/* Expected Output
   ---------------

Guvf vf a test

 */
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="stream_filter" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="stream_get_contents">
    <description><![CDATA[   Identical to file_get_contents , except that   stream_get_contents operates on an already open  stream resource and returns the remaining contents in a string, up to   maxlength bytes and starting at the specified   offset .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

if ($stream = fopen('http://www.example.com', 'r')) {
    // print all the page starting at the offset 10
    echo stream_get_contents($stream, -1, 10);

    fclose($stream);
}


if ($stream = fopen('http://www.example.net', 'r')) {
    // print the first 5 bytes
    echo stream_get_contents($stream, 5);

    fclose($stream);
}

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="FTP_8" />
      <property ref="OCI8_8" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="stream_get_filters">
    <description><![CDATA[    Output will be similar to the following.  Note: there may be more or fewer filters in your version of PHP.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$streamlist = stream_get_filters();
print_r($streamlist);
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="stream_get_line">
    <description><![CDATA[  Returns a string of up to length bytes read from the file  pointed to by handle . Reading ends when   length bytes have been read, when the string specified by   ending is found (which is included  in the return value), or on EOF (whichever comes first).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_8" />
      <property ref="Filesystem_19" />
      <property kind="parameter" name="ending" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="stream_get_meta_data">
    <description><![CDATA[   timed_out (bool) - if the stream  timed out while waiting for data on the last call to   fread or fgets .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="stream_get_transports">
    <description><![CDATA[    Output will be similar to the following.  Note: there may be more or fewer transports in your version of PHP.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$xportlist = stream_get_transports();
print_r($xportlist);
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="stream_get_wrappers">
    <description><![CDATA[  Returns an indexed array containing the name of all stream wrappers  available on the running system.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print_r(stream_get_wrappers());
?>

      

<?php
// check for the existence of the bzip2 stream wrapper
if (in_array('compress.bzip2', stream_get_wrappers())) {
    echo 'compress.bzip2:// support enabled.';
} else {
    echo 'compress.bzip2:// support not enabled.';
}
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="stream_select">
    <description><![CDATA[  When stream_select returns, the arrays   read , write and   except are modified to indicate which stream  resource(s) actually changed status.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Sockets_10" />
      <property ref="Sockets_11" />
      <property ref="Sockets_12" />
      <property ref="Sockets_13" />
      <property ref="Sockets_14" />
    </properties>
    
  </element>
  <element kind="function" name="stream_set_blocking">
    <description><![CDATA[  If mode is , the given stream  will be switched to non-blocking mode, and if , it  will be switched to blocking mode.  This affects calls like   fgets and fread  that read from the stream.  In non-blocking mode an   fgets call will always return right away  while in blocking mode it will wait for data to become available  on the stream.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="IMAP_8" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="stream_set_timeout">
    <description><![CDATA[  Sets the timeout value on stream ,  expressed in the sum of seconds and   microseconds .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = fsockopen("www.example.com", 80);
if (!$fp) {
    echo "Unable to open\n";
} else {

    fwrite($fp, "GET / HTTP/1.0\r\n\r\n");
    stream_set_timeout($fp, 2);
    $res = fread($fp, 2000);

    $info = stream_get_meta_data($fp);
    fclose($fp);

    if ($info['timed_out']) {
        echo 'Connection timed out!';
    } else {
        echo $res;
    }

}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="IMAP_8" />
      <property ref="MCAL_28" />
      <property kind="parameter" name="microseconds" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="stream_set_write_buffer">
    <description><![CDATA[  The following example demonstrates how to use   stream_set_write_buffer to create an unbuffered stream.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = fopen($file, "w");
if ($fp) {
  stream_set_write_buffer($fp, 0);
  fwrite($fp, $output);
  fclose($fp);
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="IMAP_8" />
      <property kind="parameter" name="buffer" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_accept">
    <description><![CDATA[  Accept a connection on a socket previously created by   stream_socket_server .  If   timeout is specified, the default  socket accept timeout will be overridden with the time  specified in seconds.  The name (address) of the client  which connected will be passed back in peername  if included and available from the selected transport.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="server_socket" type="resource" required="1" />
      <property ref="CURL_6" />
      <property kind="parameter" name="peername" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_client">
    <description><![CDATA[  Initiates a stream or datagram connection to the destination specified  by remote_socket .  The type of socket created  is determined by the transport specified using standard URL formatting:   .  For Internet Domain sockets  (AF_INET) such as TCP and UDP, the portion  of the remote_socket parameter should consist of  a hostname or IP address followed by a colon and a port number.  For Unix  domain sockets, the target portion should point  to the socket file on the filesystem.   The optional timeout can be used to  set a timeout in seconds for the connect system call.    flags is a bitmask field which may be set to any  combination of connection flags.  Currently the selection of connection  flags is limited to (default),   and   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    fwrite($fp, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\n");
    while (!feof($fp)) {
        echo fgets($fp, 1024);
    }
    fclose($fp);
}
?>

      

<?php
$fp = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
if (!$fp) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($fp, "\n");
    echo fread($fp, 26);
    fclose($fp);
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="remote_socket" type="string" required="1" />
      <property ref="DB++_6" />
      <property ref="Network_5" />
      <property ref="CURL_6" />
      <property ref="COM_29" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_enable_crypto">
    <description><![CDATA[  Valid values for crypto_type    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = stream_socket_client("tcp://myproto.example.com:31337", $errno, $errstr, 30);
if (!$fp) {
  die("Unable to connect: $errstr ($errno)");
}
/* Turn on encryption for login phase */
stream_socket_enable_crypto($fp, true, STREAM_CRYPTO_METHOD_SSLv23_CLIENT);
fwrite($fp, "USER god\r\n");
fwrite($fp, "PASS secret\r\n");
/* Turn off encryption for the rest */
stream_socket_enable_crypto($fp, false);
while ($motd = fgets($fp)) {
  echo $motd;
}
fclose($fp);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="IMAP_8" />
      <property ref="Ncurses_27" />
      <property kind="parameter" name="crypto_type" type="int"  />
      <property kind="parameter" name="session_stream" type="resource"  />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_get_name">
    <description><![CDATA[  Returns the local or remote name of a given socket connection.  If want_peer is set to the remote  socket name will be returned, if it is set to the local  socket name will be returned.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_8" />
      <property kind="parameter" name="want_peer" type="bool" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_pair">
    <description><![CDATA[   stream_socket_pair creates a pair of connected,  indistinguishable socket streams. This function is commonly used in IPC  (InterProcess Communication).  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Sockets_3" />
      <property ref="COM_27" />
      <property ref="Sockets_4" />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_recvfrom">
    <description><![CDATA[  The function stream_socket_recvfrom accepts  data from a remote socket up to length bytes.  If address is provided it will be populated with  the address of the remote socket.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a server socket to port 1234 on localhost */
$server = stream_socket_server('tcp://127.0.0.1:1234');

/* Accept a connection */
$socket = stream_socket_accept($server);

/* Grab a packet (1500 is a typical MTU size) of OOB data */
echo "Received Out-Of-Band: '" . stream_socket_recvfrom($socket, 1500, STREAM_OOB) . "'\n";

/* Take a peek at the normal in-band data, but don't comsume it. */
echo "Data: '" . stream_socket_recvfrom($socket, 1500, STREAM_PEEK) . "'\n";

/* Get the exact same packet again, but remove it from the buffer this time. */
echo "Data: '" . stream_socket_recvfrom($socket, 1500) . "'\n";

/* Close it up */
fclose($socket);
fclose($server);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Sockets_1" />
      <property ref="Filesystem_19" />
      <property ref="COM_29" />
      <property kind="parameter" name="address" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_sendto">
    <description><![CDATA[  The function stream_socket_sendto sends  the data specified by data through the  socket specified by socket .  The address  specified when the socket stream was created will be used unless  an alternate address is specified in address .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a socket to port 1234 on localhost */
$socket = stream_socket_client('tcp://127.0.0.1:1234');

/* Send ordinary data via ordinary channels. */
fwrite($socket, "Normal data transmit.");

/* Send more data out of band. */
stream_socket_sendto($socket, "Out of Band data.", STREAM_OOB);

/* Close it up */
fclose($socket);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Sockets_1" />
      <property ref="Bzip2_7" />
      <property ref="COM_29" />
      <property ref="Streams_22" />
    </properties>
    
  </element>
  <element kind="function" name="stream_socket_server">
    <description><![CDATA[  Creates a stream or datagram socket on the specified   local_socket .  The type of socket created  is determined by the transport specified using standard URL formatting:   .  For Internet Domain sockets  (AF_INET) such as TCP and UDP, the portion  of the remote_socket parameter should consist of  a hostname or IP address followed by a colon and a port number.  For Unix  domain sockets, the target portion should point  to the socket file on the filesystem.    flags is a bitmask field which may be set to any  combination of socket creation flags.  The default value of flags is   | .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
if (!$socket) {
  echo "$errstr ($errno)<br />\n";
} else {
  while ($conn = stream_socket_accept($socket)) {
    fwrite($conn, 'The local time is ' . date('n/j/Y g:i a') . "\n");
    fclose($conn);
  }
  fclose($socket);
}
?>

      

<?php
$socket = stream_socket_server("udp://127.0.0.1:1113", $errno, $errstr, STREAM_SERVER_BIND);
if (!$socket) {
    die("$errstr ($errno)");
}

do {
    $pkt = stream_socket_recvfrom($socket, 1, 0, $peer);
    echo "$peer\n";
    stream_socket_sendto($socket, date("D M j H:i:s Y\r\n"), 0, $peer);
} while ($pkt !== false);

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property kind="parameter" name="local_socket" type="string" required="1" />
      <property ref="DB++_6" />
      <property ref="Network_5" />
      <property ref="COM_29" />
      <property ref="Directories_5" />
    </properties>
    
  </element>
  <element kind="function" name="stream_wrapper_register">
    <description><![CDATA[  This method is called in response to closedir .  You should release any resources which were locked or allocated during  the opening and use of the directory stream.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class VariableStream {
    var $position;
    var $varname;
   
    function stream_open($path, $mode, $options, &$opened_path) 
    {
        $url = parse_url($path);
        $this->varname = $url["host"];
        $this->position = 0;
        
        return true;
    }

    function stream_read($count) 
    {
        $ret = substr($GLOBALS[$this->varname], $this->position, $count);
        $this->position += strlen($ret);
        return $ret;
    }

    function stream_write($data) 
    {
        $left = substr($GLOBALS[$this->varname], 0, $this->position);
        $right = substr($GLOBALS[$this->varname], $this->position + strlen($data));
        $GLOBALS[$this->varname] = $left . $data . $right;
        $this->position += strlen($data);
        return strlen($data);
    }

    function stream_tell() 
    {
        return $this->position;
    }

    function stream_eof() 
    {
        return $this->position >= strlen($GLOBALS[$this->varname]);
    }

    function stream_seek($offset, $whence) 
    {
        switch ($whence) {
            case SEEK_SET:
                if ($offset < strlen($GLOBALS[$this->varname]) && $offset >= 0) {
                     $this->position = $offset;
                     return true;
                } else {
                     return false;
                }
                break;
                
            case SEEK_CUR:
                if ($offset >= 0) {
                     $this->position += $offset;
                     return true;
                } else {
                     return false;
                }
                break;
                
            case SEEK_END:
                if (strlen($GLOBALS[$this->varname]) + $offset >= 0) {
                     $this->position = strlen($GLOBALS[$this->varname]) + $offset;
                     return true;
                } else {
                     return false;
                }
                break;
                
            default:
                return false;
        }
    }
}

stream_wrapper_register("var", "VariableStream")
    or die("Failed to register protocol");

$myvar = "";
    
$fp = fopen("var://myvar", "r+");

fwrite($fp, "line1\n");
fwrite($fp, "line2\n");
fwrite($fp, "line3\n");

rewind($fp);
while (!feof($fp)) {
    echo fgets($fp);
}
fclose($fp);
var_dump($myvar);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Network_8" />
      <property ref="Classkit_1" />
      <property ref="Directories_3" />
      <property ref="Bzip2_6" />
      <property ref="IMAP_41" />
      <property kind="parameter" name="opened_path" type="string" required="1" />
      <property ref="DOM_13" />
      <property ref="Bzip2_7" />
      <property ref="Arrays_35" />
      <property ref="SESAM_6" />
      <property ref="Directories_3" />
      <property kind="parameter" name="path_from" type="string" required="1" />
      <property kind="parameter" name="path_to" type="string" required="1" />
      <property ref="Directories_3" />
      <property ref="Calendar_10" />
      <property ref="IMAP_41" />
      <property ref="Directories_3" />
      <property ref="IMAP_41" />
      <property ref="Directories_3" />
      <property ref="IMAP_41" />
      <property ref="Directories_3" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="stream_wrapper_restore">
    <description><![CDATA[  Restores a built-in wrapper previously unregistered with   stream_wrapper_unregister .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Network_8" />
    </properties>
    
  </element>
  <element kind="function" name="stream_wrapper_unregister">
    <description><![CDATA[   stream_wrapper_unregister allows you to  disable an already defined stream wrapper.  Once the wrapper  has been disabled you may override it with a user-defined wrapper  using stream_wrapper_register or  reenable it later on with stream_wrapper_restore .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Network_8" />
    </properties>
    
  </element>
</group>
<group name="Strings">
  <description><![CDATA[String Functions]]></description>
  <element kind="function" name="addcslashes">
    <description><![CDATA[  Returns a string with backslashes before characters that are  listed in charlist parameter. It escapes   , etc. in C-like  style, characters with ASCII code lower than 32 and higher than  126 are converted to octal representation.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="charlist" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="addslashes">
    <description><![CDATA[  Returns a string with backslashes before characters that need  to be quoted in database queries etc.  These characters are  single quote ( ), double quote  ( ), backslash ( )  and NUL (the byte).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "Is your name O'reilly?";

// Outputs: Is your name O\'reilly?
echo addslashes($str);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="bin2hex">
    <description><![CDATA[  Returns an ASCII string containing the hexadecimal representation  of str . The conversion is done byte-wise  with the high-nibble first.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="chr">
    <description><![CDATA[  Returns a one-character string containing the character specified  by ascii .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "The string ends in escape: ";
$str .= chr(27); /* add an escape character at the end of $str */

/* Often this is more useful */

$str = sprintf("The string ends in escape: %c", 27);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="ascii" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="chunk_split">
    <description><![CDATA[  Can be used to split a string into smaller chunks which is useful for  e.g. converting base64_encode output to match RFC  2045 semantics. It inserts end (defaults to  "\r\n") every chunklen characters (defaults to  76). It returns the new string leaving the original string untouched.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// format $data using RFC 2045 semantics
$new_string = chunk_split(base64_encode($data));
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="body" type="string" required="1" />
      <property kind="parameter" name="chunklen" type="int"  />
      <property kind="parameter" name="end" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="convert_cyr_string">
    <description><![CDATA[  This function returns the given string converted from one  Cyrillic character set to another.  The from  and to arguments are single characters that  represent the source and target Cyrillic character sets.  The  supported types are:    ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="from" type="string" required="1" />
      <property ref="IMAP_21" />
    </properties>
    
  </element>
  <element kind="function" name="convert_uudecode">
    <description><![CDATA[   convert_uudecode decodes a uuencoded string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Can you imagine what this will print? :) */
echo convert_uudecode("+22!L;W9E(%!(4\"$`\n`");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="convert_uuencode">
    <description><![CDATA[   convert_uuencode encodes a string using the uuencode  algorithm.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$some_string = "test\ntext text\r\n";

echo convert_uuencode($some_string);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="count_chars">
    <description><![CDATA[  Counts the number of occurrences of every byte-value (0..255) in   string and returns it in various ways.  The optional parameter mode defaults to  0. Depending on mode   count_chars returns one of the following:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$data = "Two Ts and one F.";

$result = count_chars($data, 0);

for ($i=0; $i < count($result); $i++) {
   if ($result[$i] != 0)
       echo "There were $result[$i] instance(s) of \"" , chr($i) , "\" in the string.\n";
}

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Filesystem_16" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="crc32">
    <description><![CDATA[  Generates the cyclic redundancy checksum polynomial of 32-bit  lengths of the str . This is usually used  to validate the integrity of data being transmitted.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$checksum = crc32("The quick brown fox jumped over the lazy dog.");
printf("%u\n", $checksum);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="crypt">
    <description><![CDATA[   crypt will return an encrypted string using the  standard Unix -based encryption algorithm or  alternative algorithms that may be available on the system.  Arguments  are a string to be encrypted and an optional salt string to base the  encryption on.  See the Unix man page for your crypt function for more  information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$password = crypt('mypassword'); // let the salt be automatically generated

/* You should pass the entire results of crypt() as the salt for comparing a
   password, to avoid problems when different hashing algorithms are used. (As
   it says above, standard DES-based password hashing uses a 2-character salt,
   but MD5-based hashing uses 12.) */
if (crypt($user_input, $password) == $password) {
   echo "Password verified!";
}
?>

     

<?php
// Set the password
$password = 'mypassword';

// Get the hash, letting the salt be automatically generated
$hash = crypt($password);
?>

     

<?php
if (CRYPT_STD_DES == 1) {
    echo 'Standard DES: ' . crypt('rasmuslerdorf', 'rl') . "\n";
}

if (CRYPT_EXT_DES == 1) {
    echo 'Extended DES: ' . crypt('rasmuslerdorf', '_J9..rasm') . "\n";
}

if (CRYPT_MD5 == 1) {
    echo 'MD5:          ' . crypt('rasmuslerdorf', '$1$rasmusle$') . "\n";
}

if (CRYPT_BLOWFISH == 1) {
    echo 'Blowfish:     ' . crypt('rasmuslerdorf', '$2a$07$rasmuslerd...........$') . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="salt" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="echo">
    <description><![CDATA[   echo is not actually a function (it is a  language construct) so you are not required to use parentheses  with it. In fact, if you want to pass more than one parameter  to echo, you must not enclose the parameters within parentheses.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo "Hello World";

echo "This spans
multiple lines. The newlines will be 
output as well";

echo "This spans\nmultiple lines. The newlines will be\noutput as well.";

echo "Escaping characters is done \"Like this\".";

// You can use variables inside of an echo statement
$foo = "foobar";
$bar = "barbaz";

echo "foo is $foo"; // foo is foobar

// You can also use arrays
$bar = array("value" => "foo");

echo "this is {$bar['value']} !"; // this is foo !

// Using single quotes will print the variable name, not the value
echo 'foo is $foo'; // foo is $foo

// If you are not using any other characters, you can just echo variables
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

// Some people prefer passing multiple parameters to echo over concatenation.
echo 'This ', 'string ', 'was ', 'made ', 'with multiple parameters.', chr(10);
echo 'This ' . 'string ' . 'was ' . 'made ' . 'with concatenation.' . "\n";

echo <<<END
This uses the "here document" syntax to output
multiple lines with $variable interpolation. Note
that the here document terminator must appear on a
line with just a semicolon. no extra whitespace!
END;

// Because echo is not a function, following code is invalid. 
($some_var) ? echo 'true' : echo 'false';

// However, the following examples will work:
($some_var) ? print('true'): print('false'); // print is a function
echo $some_var ? 'true': 'false'; // changing the statement around
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="arg1" type="string" required="1" />
      <property ref="Firebird/InterBase_47" />
    </properties>
    
  </element>
  <element kind="function" name="explode">
    <description><![CDATA[  Returns an array of strings, each of which is a substring of   string formed by splitting it on  boundaries formed by the string separator .  If limit is set, the returned array will  contain a maximum of limit elements with  the last element containing the rest of   string .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Example 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// Example 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>

      

<?php
$str = 'one|two|three|four';

// positive limit
print_r(explode('|', $str, 2));

// negative limit
print_r(explode('|', $str, -1));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="separator" type="string" required="1" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_21" />
    </properties>
    
  </element>
  <element kind="function" name="fprintf">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!($fp = fopen('date.txt', 'w')))
    return;

fprintf($fp, "%04d-%02d-%02d", $year, $month, $day);
// will write the formatted ISO date to date.txt
?>

      

<?php
if (!($fp = fopen('currency.txt', 'w')))
    return;

$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money will output "123.1";
$len = fprintf($fp, '%01.2f', $money);
// will write "123.10" to currency.txt

echo "wrote $len bytes to currency.txt";
// use the return value of fprintf to determine how many bytes we wrote
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
      <property ref="Date/Time_1" />
      <property ref="Direct IO_3" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="get_html_translation_table">
    <description><![CDATA[   get_html_translation_table will return the  translation table that is used internally for   htmlspecialchars and   htmlentities .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="table" type="int"  />
      <property kind="parameter" name="quote_style" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="hebrev">
    <description><![CDATA[  The optional parameter max_chars_per_line  indicates maximum number of characters per line that will be  returned. The function tries to avoid breaking words.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="hebrew_text" type="string" required="1" />
      <property kind="parameter" name="max_chars_per_line" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="hebrevc">
    <description><![CDATA[  This function is similar to hebrev with the  difference that it converts newlines (\n) to " < br > \n".  The  optional parameter max_chars_per_line  indicates maximum number of characters per line that will be  returned. The function tries to avoid breaking words.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Strings_12" />
      <property ref="Strings_13" />
    </properties>
    
  </element>
  <element kind="function" name="html_entity_decode">
    <description><![CDATA[   html_entity_decode is the opposite of   htmlentities in that it converts all HTML entities  to their applicable characters from string .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$orig = "I'll \"walk\" the <b>dog</b> now";

$a = htmlentities($orig);

$b = html_entity_decode($a);

echo $a; // I'll &quot;walk&quot; the &lt;b&gt;dog&lt;/b&gt; now

echo $b; // I'll "walk" the <b>dog</b> now


// For users prior to PHP 4.3.0 you may do this:
function unhtmlentities($string) 
{
    $trans_tbl = get_html_translation_table(HTML_ENTITIES);
    $trans_tbl = array_flip($trans_tbl);
    return strtr($string, $trans_tbl);
}

$c = unhtmlentities($a);

echo $c; // I'll "walk" the <b>dog</b> now

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
      <property ref="Strings_11" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="htmlentities">
    <description><![CDATA[  This function is identical to   htmlspecialchars in all ways, except with   htmlentities , all characters which have HTML  character entity equivalents are translated into these entities.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "A 'quote' is <b>bold</b>";

// Outputs: A 'quote' is &lt;b&gt;bold&lt;/b&gt;
echo htmlentities($str);

// Outputs: A &#039;quote&#039; is &lt;b&gt;bold&lt;/b&gt;
echo htmlentities($str, ENT_QUOTES);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
      <property ref="Strings_11" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="htmlspecialchars">
    <description><![CDATA[  Certain characters have special significance in HTML, and should  be represented by HTML entities if they are to preserve their  meanings. This function returns a string with some of these  conversions made; the translations made are those most  useful for everyday web programming. If you require all HTML  character entities to be translated, use   htmlentities instead.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$new = htmlspecialchars("<a href='test'>Test</a>", ENT_QUOTES);
echo $new; // &lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
      <property ref="Strings_11" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="implode">
    <description><![CDATA[  Returns a string containing a string representation of all the  array elements in the same order, with the glue string between  each element.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$array = array('lastname', 'email', 'phone');
$comma_separated = implode(",", $array);

echo $comma_separated; // lastname,email,phone

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="glue" type="string" required="1" />
      <property kind="parameter" name="pieces" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="levenshtein">
    <description><![CDATA[  This function returns the Levenshtein-Distance between the  two argument strings or -1, if one of the argument strings  is longer than the limit of 255 characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// input misspelled word
$input = 'carrrot';

// array of words to check against
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// no shortest distance found, yet
$shortest = -1;

// loop through words to find the closest
foreach ($words as $word) {

    // calculate the distance between the input word,
    // and the current word
    $lev = levenshtein($input, $word);

    // check for an exact match
    if ($lev == 0) {

        // closest word is this one (exact match)
        $closest = $word;
        $shortest = 0;

        // break out of the loop; we've found an exact match
        break;
    }

    // if this distance is less than the next found shortest
    // distance, OR if a next shortest word has not yet been found
    if ($lev <= $shortest || $shortest < 0) {
        // set the closest match, and shortest distance
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "Input word: $input\n";
if ($shortest == 0) {
    echo "Exact match found: $closest\n";
} else {
    echo "Did you mean: $closest?\n";
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
      <property kind="parameter" name="cost_ins" type="int"  />
      <property kind="parameter" name="cost_rep" type="int"  />
      <property kind="parameter" name="cost_del" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="localeconv">
    <description><![CDATA[  Returns an associative array containing localized numeric and  monetary formatting information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (false !== setlocale(LC_ALL, 'nl_NL.UTF-8@euro')) {
    $locale_info = localeconv();
    print_r($locale_info);
}
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="ltrim">
    <description><![CDATA[  This function returns a string with whitespace stripped from the  beginning of str .  Without the second parameter,   ltrim will strip these characters:      ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$text = "\t\tThese are a few words :) ...  ";
$trimmed = ltrim($text);
// $trimmed = "These are a few words :) ...  "
$trimmed = ltrim($text, " \t.");
// $trimmed = "These are a few words :) ...  "
$clean = ltrim($binary, "\x00..\x1F");
// trim the ASCII control characters at the beginning of $binary 
// (from 0 to 31 inclusive)

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="charlist" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="md5">
    <description><![CDATA[  Calculates the MD5 hash of str using the   , and returns that hash.  The hash is a 32-character hexadecimal number.  If the optional   raw_output is set to , then the md5 digest  is instead returned in raw binary format with a length of 16.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = 'apple';

if (md5($str) === '1f3870be274f6c49b3e31a0c6728957f') {
    echo "Would you like a green or red apple?";
    exit;
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="raw_output" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="md5_file">
    <description><![CDATA[  Calculates the MD5 hash of the file specified by the   filename parameter using the   , and returns that hash.  The hash is a 32-character hexadecimal number.  If the optional   raw_output is set to , then the md5 digest  is instead returned in raw binary format with a length of 16.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Apache_3" />
      <property ref="Strings_20" />
    </properties>
    
  </element>
  <element kind="function" name="metaphone">
    <description><![CDATA[  Calculates the metaphone key of str .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="phones" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="money_format">
    <description><![CDATA[   money_format returns a formatted version of   number .  This function wraps the C library  function strfmon , with the difference that  this implementation converts only one number at a time.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$number = 1234.56;

// let's print the international format for the en_US locale
setlocale(LC_MONETARY, 'en_US');
echo money_format('%i', $number) . "\n";  
// USD 1,234.56

// Italian national format with 2 decimals`
setlocale(LC_MONETARY, 'it_IT');
echo money_format('%.2n', $number) . "\n";
// L. 1.234,56

// Using a negative number
$number = -1234.5672;

// US national format, using () for negative numbers
// and 10 digits for left precision
setlocale(LC_MONETARY, 'en_US');
echo money_format('%(#10n', $number) . "\n";
// ($        1,234.57)

// Similar format as above, adding the use of 2 digits of right 
// precision and '*' as a fill character
echo money_format('%=*(#10.2n', $number) . "\n";
// ($********1,234.57)
    
// Let's justify to the left, with 14 positions of width, 8 digits of
// left precision, 2 of right precision, withouth grouping character
// and using the international format for the de_DE locale.
setlocale(LC_MONETARY, 'de_DE');
echo money_format('%=*^-14#8.2i', 1234.56) . "\n";
// DEM 1234,56****

// Let's add some blurb before and after the conversion specification
setlocale(LC_MONETARY, 'en_GB');
$fmt = 'The final value is %i (after a 10%% discount)';
echo money_format($fmt, 1234.56) . "\n";
// The final value is  GBP 1,234.56 (after a 10% discount)

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Date/Time_1" />
      <property ref="Math_9" />
    </properties>
    
  </element>
  <element kind="function" name="nl2br">
    <description><![CDATA[  Returns string with ' < br / > ' inserted  before all newlines.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo nl2br("foo isn't\n bar");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="nl_langinfo">
    <description><![CDATA[   nl_langinfo is used to access individual elements of  the locale categories.  Unlike localeconv , which  returns all of the elements, nl_langinfo allows you  to select any specific element.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_20" />
    </properties>
    
  </element>
  <element kind="function" name="number_format">
    <description><![CDATA[   number_format returns a formatted version of   number .  This function accepts either one,  two or four parameters (not three):  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$number = 1234.56;

// english notation (default)
$english_format_number = number_format($number);
// 1,234

// French notation
$nombre_format_francais = number_format($number, 2, ',', ' ');
// 1 234,56

$number = 1234.5678;

// english notation without thousands seperator
$english_format_number = number_format($number, 2, '.', '');
// 1234.57

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Math_9" />
      <property kind="parameter" name="decimals" type="int"  />
      <property kind="parameter" name="dec_point" type="string"  />
      <property kind="parameter" name="thousands_sep" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ord">
    <description><![CDATA[  Returns the ASCII value of the first character of   string .  This function complements   chr .    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "\n";
if (ord($str) == 10) {
    echo "The first character of \$str is a line feed.\n";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="parse_str">
    <description><![CDATA[  Parses str as if it were the query string  passed via a URL and sets variables in the current scope. If  the second parameter arr is present,  variables are stored in this variable as array elements instead.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "first=value&arr[]=foo+bar&arr[]=baz";
parse_str($str);
echo $first;  // value
echo $arr[0]; // foo bar
echo $arr[1]; // baz

parse_str($str, $output);
echo $output['first'];  // value
echo $output['arr'][0]; // foo bar
echo $output['arr'][1]; // baz

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="arr" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="print">
    <description><![CDATA[   print is not actually a real function (it is a  language construct) so you are not required to use parentheses  with its argument list.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
print("Hello World");

print "print() also works without parentheses.";

print "This spans
multiple lines. The newlines will be 
output as well";

print "This spans\nmultiple lines. The newlines will be\noutput as well.";

print "escaping characters is done \"Like this\".";

// You can use variables inside of a print statement
$foo = "foobar";
$bar = "barbaz";

print "foo is $foo"; // foo is foobar

// You can also use arrays
$bar = array("value" => "foo");

print "this is {$bar['value']} !"; // this is foo !

// Using single quotes will print the variable name, not the value
print 'foo is $foo'; // foo is $foo

// If you are not using any other characters, you can just print variables
print $foo;          // foobar

print <<<END
This uses the "here document" syntax to output
multiple lines with $variable interpolation. Note
that the here document terminator must appear on a
line with just a semicolon no extra whitespace!
END;
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Program Execution_1" />
    </properties>
    
  </element>
  <element kind="function" name="printf">
    <properties>
      <property ref="ret_int" />
      <property ref="Date/Time_1" />
      <property ref="Direct IO_3" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="quoted_printable_decode">
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="quotemeta">
    <description><![CDATA[  Returns a version of str with a backslash character  ( ) before every character that is among  these:  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="rtrim">
    <description><![CDATA[  This function returns a string with whitespace stripped from the  end of str .  Without the second parameter,   rtrim will strip these characters:      ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$text = "\t\tThese are a few words :) ...  ";
$trimmed = rtrim($text);
// $trimmed = "\t\tThese are a few words :) ..."
$trimmed = rtrim($text, " \t.");
// $trimmed = "\t\tThese are a few words :)"
$clean = rtrim($binary, "\x00..\x1F");
// trim the ASCII control characters at the end of $binary 
// (from 0 to 31 inclusive)

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Strings_19" />
    </properties>
    
  </element>
  <element kind="function" name="setlocale">
    <description><![CDATA[   category is a named constant (or string)  specifying the category of the functions affected by the locale  setting:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Set locale to Dutch */
setlocale(LC_ALL, 'nl_NL');

/* Output: vrijdag 22 december 1978 */
echo strftime("%A %e %B %Y", mktime(0, 0, 0, 12, 22, 1978));

/* try different possible locale names for german as of PHP 4.3.0 */
$loc_de = setlocale(LC_ALL, 'de_DE@euro', 'de_DE', 'de', 'ge');
echo "Preferred locale for german on this system is '$loc_de'";
?>

      

<?php
/* Set locale to Dutch */
setlocale(LC_ALL, 'nld_nld');

/* Output: vrijdag 22 december 1978 */
echo strftime("%A %d %B %Y", mktime(0, 0, 0, 12, 22, 1978));

/* try different possible locale names for german as of PHP 4.3.0 */
$loc_de = setlocale(LC_ALL, 'de_DE@euro', 'de_DE', 'deu_deu');
echo "Preferred locale for german on this system is '$loc_de'";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="category" type="mixed" required="1" />
      <property kind="parameter" name="locale" type="string" required="1" />
      <property ref="Firebird/InterBase_47" />
      <property ref="Strings_26" />
      <property kind="parameter" name="locale" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="sha1">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = 'apple';
                     
if (sha1($str) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') {
    echo "Would you like a green or red apple?";
    exit;
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Strings_20" />
    </properties>
    
  </element>
  <element kind="function" name="sha1_file">
    <properties>
      <property ref="ret_string" />
      <property ref="Apache_3" />
      <property ref="Strings_20" />
    </properties>
    
  </element>
  <element kind="function" name="similar_text">
    <description><![CDATA[  This calculates the similarity between two strings as described  in Oliver [1993]. Note that this implementation does not use a  stack as in Oliver's pseudo code, but recursive calls which may  or may not speed up the whole process. Note also that the  complexity of this algorithm is O(N**3) where N is the length of  the longest string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="first" type="string" required="1" />
      <property kind="parameter" name="second" type="string" required="1" />
      <property kind="parameter" name="percent" type="float"  />
    </properties>
    
  </element>
  <element kind="function" name="soundex">
    <description><![CDATA[  Calculates the soundex key of str .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
soundex("Euler")       == soundex("Ellery");    // E460
soundex("Gauss")       == soundex("Ghosh");     // G200
soundex("Hilbert")     == soundex("Heilbronn"); // H416
soundex("Knuth")       == soundex("Kant");      // K530
soundex("Lloyd")       == soundex("Ladd");      // L300
soundex("Lukasiewicz") == soundex("Lissajous"); // L222
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="sprintf">
    <description><![CDATA[  Each conversion specification consists of a percent sign  ( ), followed by one or more of these  elements, in order:    A that says what type the  argument data should be treated as.  Possible types:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$format = "There are %d monkeys in the %s";
printf($format, $num, $location);
?>

      

<?php
$format = "The %s contains %d monkeys";
printf($format, $num, $location);
?>

      

<?php
$format = "The %2\$s contains %1\$d monkeys";
printf($format, $num, $location);
?>

      

<?php
$format = "The %2\$s contains %1\$d monkeys.
           That's a nice %2\$s full of %1\$d monkeys.";
printf($format, $num, $location);
?>

      

<?php
$n =  43951789;
$u = -43951789;
$c = 65; // ASCII 65 is 'A'

// notice the double %%, this prints a literal '%' character
printf("%%b = '%b'\n", $n); // binary representation
printf("%%c = '%c'\n", $c); // print the ascii character, same as chr() function
printf("%%d = '%d'\n", $n); // standard integer representation
printf("%%e = '%e'\n", $n); // scientific notation
printf("%%u = '%u'\n", $n); // unsigned integer representation of a positive integer
printf("%%u = '%u'\n", $u); // unsigned integer representation of a negative integer
printf("%%f = '%f'\n", $n); // floating point representation
printf("%%o = '%o'\n", $n); // octal representation
printf("%%s = '%s'\n", $n); // string representation
printf("%%x = '%x'\n", $n); // hexadecimal representation (lower-case)
printf("%%X = '%X'\n", $n); // hexadecimal representation (upper-case)

printf("%%+d = '%+d'\n", $n); // sign specifier on a positive integer
printf("%%+d = '%+d'\n", $u); // sign specifier on a negative integer
?>

     

<?php
$s = 'monkey';
$t = 'many monkeys';

printf("[%s]\n",      $s); // standard string output
printf("[%10s]\n",    $s); // right-justification with spaces
printf("[%-10s]\n",   $s); // left-justification with spaces
printf("[%010s]\n",   $s); // zero-padding works on strings too
printf("[%'#10s]\n",  $s); // use the custom padding character '#'
printf("[%10.10s]\n", $t); // left-justification but with a cutoff of 10 characters
?>

     

<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>

     

<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money will output "123.1";
$formatted = sprintf("%01.2f", $money);
// echo $formatted will output "123.10"
?>

     

<?php
$number = 362525200;

echo sprintf("%.3e", $number); // outputs 3.63e+8
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Date/Time_1" />
      <property ref="Direct IO_3" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="sscanf">
    <description><![CDATA[  The function sscanf is the input analog of   printf . sscanf reads  from the string str and interprets it  according to the specified format , which is  described in the documentation for sprintf . If only  two parameters were passed to this function, the values parsed  will be returned as an array. Otherwise, if optional parameters are passed,  the function will return the number of assigned values. The optional  parameters must be passed by reference.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// getting the serial number
$serial = sscanf("SN/2350001", "SN/%d");
// and the date of manufacturing
$mandate = "January 01 2000";
list($month, $day, $year) = sscanf($mandate, "%s %d %d");
echo "Item $serial was manufactured on: $year-" . substr($month, 0, 3) . "-$day\n";
?>

      

<?php
// get author info and generate DocBook entry
$auth = "24\tLewis Carroll";
$n = sscanf($auth, "%d\t%s %s", $id, $first, $last);
echo "<author id='$id'>
    <firstname>$first</firstname>
    <surname>$last</surname>
</author>\n";
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="DOM XML_14" />
      <property ref="Date/Time_1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="str_ireplace">
    <description><![CDATA[  This function returns a string or an array with all occurrences of   search in subject  (ignoring case) replaced with the given replace   value.  If you don't need fancy replacing rules, you should generally  use this function instead of eregi_replace or   preg_replace with the modifier.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$bodytag = str_ireplace("%body%", "black", "<body text=%BODY%>");
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="search" type="mixed" required="1" />
      <property kind="parameter" name="replace" type="mixed" required="1" />
      <property ref="PCRE_5" />
      <property kind="parameter" name="count" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="str_pad">
    <description><![CDATA[  This functions returns the input string  padded on the left, the right, or both sides to the specified  padding length. If the optional argument   pad_string is not supplied, the   input is padded with spaces, otherwise it  is padded with characters from pad_string  up to the limit.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$input = "Alien";
echo str_pad($input, 10);                      // produces "Alien     "
echo str_pad($input, 10, "-=", STR_PAD_LEFT);  // produces "-=-=-Alien"
echo str_pad($input, 10, "_", STR_PAD_BOTH);   // produces "__Alien___"
echo str_pad($input, 6 , "___");               // produces "Alien_"
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="input" type="string" required="1" />
      <property kind="parameter" name="pad_length" type="int" required="1" />
      <property kind="parameter" name="pad_string" type="string"  />
      <property kind="parameter" name="pad_type" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="str_repeat">
    <description><![CDATA[  Returns input_str repeated   multiplier times.   multiplier has to be greater than or equal to 0.  If the multiplier is set to 0, the function will  return an empty string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo str_repeat("-=", 10);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Strings_35" />
      <property kind="parameter" name="multiplier" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="str_replace">
    <description><![CDATA[  This function returns a string or an array with all occurrences of   search in subject  replaced with the given replace value.  If you  don't need fancy replacing rules (like regular expressions), you should  always use this function instead of ereg_replace or   preg_replace .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Provides: <body text='black'>
$bodytag = str_replace("%body%", "black", "<body text='%body%'>");

// Provides: Hll Wrld f PHP
$vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
$onlyconsonants = str_replace($vowels, "", "Hello World of PHP");

// Provides: You should eat pizza, beer, and ice cream every day
$phrase  = "You should eat fruits, vegetables, and fiber every day.";
$healthy = array("fruits", "vegetables", "fiber");
$yummy   = array("pizza", "beer", "ice cream");

$newphrase = str_replace($healthy, $yummy, $phrase);

// Use of the count parameter is available as of PHP 5.0.0
$str = str_replace("ll", "", "good golly miss molly!", $count);
echo $count; // 2
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Strings_32" />
      <property ref="Strings_33" />
      <property ref="PCRE_5" />
      <property ref="Strings_34" />
    </properties>
    
  </element>
  <element kind="function" name="str_rot13">
    <description><![CDATA[  This function performs the ROT13 encoding on the   str argument and returns the resulting  string. The ROT13 encoding simply shifts every letter by 13  places in the alphabet while leaving non-alpha characters  untouched. Encoding and decoding are done by the same function,  passing an encoded string as argument will return the original version.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo str_rot13('PHP 4.3.0'); // CUC 4.3.0

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="str_shuffle">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = 'abcdef';
$shuffled = str_shuffle($str);

// This will echo something like: bfdaec
echo $shuffled;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="str_split">
    <description><![CDATA[  Converts a string to an array. If the optional   split_length parameter is specified, the  returned array will be broken down into chunks with each being   split_length in length, otherwise each chunk  will be one character in length.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$str = "Hello Friend";

$arr1 = str_split($str);
$arr2 = str_split($str, 3);

print_r($arr1);
print_r($arr2);

?>

      

<?php

$str = "Hello Friend";

echo $str{0};  // H
echo $str{8};  // i

// Creates: array('H','e','l','l','o',' ','F','r','i','e','n','d')
$arr1 = preg_split('//', $str, -1, PREG_SPLIT_NO_EMPTY);

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Filesystem_16" />
      <property kind="parameter" name="split_length" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="str_word_count">
    <description><![CDATA[  Counts the number of words inside string .  If the optional format is not specified, then  the return value will be an integer representing the number of words  found. In the event the format is specified, the return  value will be an array, content of which is dependent on the   format . The possible value for the   format and the resultant outputs are listed below.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$str = "Hello friend, you're
        looking          good today!";

$a   = str_word_count($str, 1);
$b   = str_word_count($str, 2);
$c   = str_word_count($str);

print_r($a);
print_r($b);
echo $c;
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Filesystem_16" />
      <property ref="Date/Time_2" />
    </properties>
    
  </element>
  <element kind="function" name="strcasecmp">
    <description><![CDATA[  Returns < 0 if str1 is less than   str2 ; > 0 if str1  is greater than str2 , and 0 if they are  equal.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$var1 = "Hello";
$var2 = "hello";
if (strcasecmp($var1, $var2) == 0) {
    echo '$var1 is equal to $var2 in a case-insensitive string comparison';
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
    </properties>
    
  </element>
  <element kind="function" name="strcmp">
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
    </properties>
    
  </element>
  <element kind="function" name="strcoll">
    <description><![CDATA[   strcoll was added in PHP 4.0.5, but was not enabled  for win32 until 4.2.3.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
    </properties>
    
  </element>
  <element kind="function" name="strcspn">
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
      <property ref="OCI8_3" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="strip_tags">
    <description><![CDATA[  This function tries to return a string with all HTML and PHP tags  stripped from a given str .  It uses  the same tag stripping state machine as the   fgetss function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$text = '<p>Test paragraph.</p><!-- Comment --> Other text';
echo strip_tags($text);
echo "\n";

// Allow <p>
echo strip_tags($text, '<p>');
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Filesystem_7" />
    </properties>
    
  </element>
  <element kind="function" name="stripcslashes">
    <description><![CDATA[  Returns a string with backslashes stripped off. Recognizes  C-like , ..., octal  and hexadecimal representation.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="stripos">
    <description><![CDATA[  Returns the numeric position of the first occurrence of   needle in the haystack   .  Unlike strpos ,   stripos is case-insensitive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$findme    = 'a';
$mystring1 = 'xyz';
$mystring2 = 'ABC';

$pos1 = stripos($mystring1, $findme);
$pos2 = stripos($mystring2, $findme);

// Nope, 'a' is certainly not in 'xyz'
if ($pos1 === false) {
    echo "The string '$findme' was not found in the string '$mystring1'";
}

// Note our use of ===.  Simply == would not work as expected
// because the position of 'a' is the 0th (first) character.
if ($pos2 !== false) {
    echo "We found '$findme' in '$mystring2' at position $pos2";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="stripslashes">
    <description><![CDATA[  Returns a string with backslashes stripped off.  ( becomes and so on.)  Double backslashes ( ) are made into a single  backslash ( ).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "Is your name O\'reilly?";

// Outputs: Is your name O'reilly?
echo stripslashes($str);
?>

      

<?php
function stripslashes_deep($value)
{
    $value = is_array($value) ?
                array_map('stripslashes_deep', $value) :
                stripslashes($value);

    return $value;
}

// Example
$array = array("f\\'oo", "b\\'ar", array("fo\\'o", "b\\'ar"));
$array = stripslashes_deep($array);

// Output
print_r($array);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="stristr">
    <description><![CDATA[  Returns all of haystack from the first  occurrence of needle to the end.   needle and haystack  are examined in a case-insensitive manner.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $email = 'USER@EXAMPLE.com';
  $domain = stristr($email, 'e');
  echo $domain; 
// outputs ER@EXAMPLE.com
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
    </properties>
    
  </element>
  <element kind="function" name="strlen">
    <description><![CDATA[  Returns the length of the given string .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = 'abcdef';
echo strlen($str); // 6

$str = ' ab cd ';
echo strlen($str); // 7
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="strnatcasecmp">
    <description><![CDATA[  This function implements a comparison algorithm that orders  alphanumeric strings in the way a human being would.  The  behaviour of this function is similar to   strnatcmp , except that the comparison is not  case sensitive.  For more information see: Martin Pool's  page.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
    </properties>
    
  </element>
  <element kind="function" name="strnatcmp">
    <description><![CDATA[  This function implements a comparison algorithm that orders  alphanumeric strings in the way a human being would, this is  described as a "natural ordering".  An example of the difference  between this algorithm and the regular computer string sorting  algorithms (used in strcmp ) can be seen  below:    The code above will generate the following output:    For more information see: Martin Pool's  page.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
    </properties>
    
  </element>
  <element kind="function" name="strncasecmp">
    <description><![CDATA[  This function is similar to strcasecmp , with  the difference that you can specify the (upper limit of the)  number of characters ( len ) from each  string to be used in the comparison.]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
      <property ref="Firebird/InterBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="strncmp">
    <description><![CDATA[  This function is similar to strcmp , with the  difference that you can specify the (upper limit of the) number  of characters ( len ) from each string to be  used in the comparison.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
      <property ref="Firebird/InterBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="strpbrk">
    <description><![CDATA[   strpbrk searches the haystack  string for a char_list , and returns a string  starting from the character found (or if it is not found).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$text = 'This is a Simple text.';

// this echoes "is is a Simple text." because 'i' is matched first
echo strpbrk($text, 'mi');

// this echoes "Simple text." because chars are case sensitive
echo strpbrk($text, 'S');
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Multibyte String_23" />
      <property kind="parameter" name="char_list" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="strpos">
    <description><![CDATA[  Returns the numeric position of the first occurrence of   needle in the   haystack string.  Unlike the   strrpos , this function can take a full  string as the needle parameter and the  entire string will be used.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// Note our use of ===.  Simply == would not work as expected
// because the position of 'a' was the 0th (first) character.
if ($pos === false) {
    echo "The string '$findme' was not found in the string '$mystring'";
} else {
    echo "The string '$findme' was found in the string '$mystring'";
    echo " and exists at position $pos";
}

// We can search for the character, ignoring anything before the offset
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos = 7, not 0
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Arrays_33" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="strrchr">
    <description><![CDATA[  This function returns the portion of   haystack which starts at the last  occurrence of needle and goes until the  end of haystack .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// get last directory in $PATH
$dir = substr(strrchr($PATH, ":"), 1);

// get everything after last newline
$text = "Line 1\nLine 2\nLine 3";
$last = substr(strrchr($text, 10), 1 );
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
    </properties>
    
  </element>
  <element kind="function" name="strrev">
    <description><![CDATA[  Returns string , reversed.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo strrev("Hello world!"); // outputs "!dlrow olleH"
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="strripos">
    <description><![CDATA[  Returns the numeric position of the last occurrence of   needle in the   haystack string.  Unlike   strrpos , strripos is  case-insensitive.  Also note that string positions start at 0, and not  1.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$haystack = 'ababcd';
$needle   = 'aB';

$pos      = strripos($haystack, $needle);

if ($pos === false) {
    echo "Sorry, we did not find ($needle) in ($haystack)";
} else {
    echo "Congratulations!\n";
    echo "We found the last ($needle) in ($haystack) at position ($pos)";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="strrpos">
    <description><![CDATA[  Returns the numeric position of the last occurrence of   needle in the   haystack string.  Note that the needle in  this case can only be a single character in PHP 4.  If a string is passed  as the needle, then only the first character of that string will  be used.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
      <property ref="Filesystem_10" />
    </properties>
    
  </element>
  <element kind="function" name="strspn">
    <description><![CDATA[  The line of code:    will assign 2 to , because the string "42" will  be the longest segment containing characters from "1234567890".  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
      <property ref="OCI8_3" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="strstr">
    <description><![CDATA[  Returns part of haystack string from the  first occurrence of needle to the end of   haystack .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$email = 'user@example.com';
$domain = strstr($email, '@');
echo $domain; // prints @example.com
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
    </properties>
    
  </element>
  <element kind="function" name="strtok">
    <description><![CDATA[   strtok splits a string ( str )  into smaller strings (tokens), with each token being delimited by any  character from token .  That is, if you have a string like "This is an example string" you  could tokenize this string into its individual words by using the  space character as the token.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$string = "This is\tan example\nstring";
/* Use tab and newline as tokenizing characters as well  */
$tok = strtok($string, " \n\t");
while ($tok) {
    echo "Word=$tok<br />";
    $tok = strtok(" \n\t");
}
?>

      

<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump($first_token, $second_token);
?>

      

<?php
$first_token  = strtok('/something', '/');
$second_token = strtok('/');
var_dump($first_token, $second_token);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="token" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="strtolower">
    <description><![CDATA[  Returns string with all alphabetic  characters converted to lowercase.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = strtolower($str);
echo $str; // Prints mary had a little lamb and she loved it so
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="strtoupper">
    <description><![CDATA[  Returns string with all alphabetic  characters converted to uppercase.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = strtoupper($str);
echo $str; // Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="strtr">
    <description><![CDATA[  This function returns a copy of str ,  translating all occurrences of each character in   from to the corresponding character in   to .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Strings_6" />
      <property ref="IMAP_21" />
      <property ref="DOM XML_14" />
      <property kind="parameter" name="replace_pairs" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="substr">
    <description><![CDATA[   substr returns the portion of string  specified by the start and   length parameters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// Accessing single characters in a string
// can also be achived using "curly braces"
$string = 'abcdef';
echo $string{0};                 // a
echo $string{3};                 // d
echo $string{strlen($string)-1}; // f

?>

     

<?php
$rest = substr("abcdef", -1);    // returns "f"
$rest = substr("abcdef", -2);    // returns "ef"
$rest = substr("abcdef", -3, 1); // returns "d"
?>

     

<?php
$rest = substr("abcdef", 0, -1);  // returns "abcde"
$rest = substr("abcdef", 2, -1);  // returns "cde"
$rest = substr("abcdef", 4, -4);  // returns ""
$rest = substr("abcdef", -3, -1); // returns "de"
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
      <property ref="GMP_17" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="substr_compare">
    <description><![CDATA[   substr_compare compares main_str  from position offset with str  up to length characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo substr_compare("abcde", "bc", 1, 2); // 0
echo substr_compare("abcde", "bcg", 1, 2); // 0
echo substr_compare("abcde", "BC", 1, 2, true); // 0
echo substr_compare("abcde", "bc", 1, 3); // 1
echo substr_compare("abcde", "cd", 1, 2); // -1
echo substr_compare("abcde", "abc", 5, 1); // warning
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="main_str" type="string" required="1" />
      <property ref="DOM XML_14" />
      <property ref="Arrays_35" />
      <property ref="Arrays_36" />
      <property kind="parameter" name="case_insensitivity" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="substr_count">
    <description><![CDATA[   substr_count returns the number of times the   needle substring occurs in the   haystack string. Please note that   needle is case sensitive.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo substr_count("This is a test", "is"); // prints out 2
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
    </properties>
    
  </element>
  <element kind="function" name="substr_replace">
    <description><![CDATA[   substr_replace replaces a copy of   string delimited by the   start and (optionally)   length parameters with the string given in   replacement . The result is returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$var = 'ABCDEFGH:/MNRPQR/';
echo "Original: $var<hr />\n";

/* These two examples replace all of $var with 'bob'. */
echo substr_replace($var, 'bob', 0) . "<br />\n";
echo substr_replace($var, 'bob', 0, strlen($var)) . "<br />\n";

/* Insert 'bob' right at the beginning of $var. */
echo substr_replace($var, 'bob', 0, 0) . "<br />\n";

/* These next two replace 'MNRPQR' in $var with 'bob'. */
echo substr_replace($var, 'bob', 10, -1) . "<br />\n";
echo substr_replace($var, 'bob', -7, -1) . "<br />\n";

/* Delete 'MNRPQR' from $var. */
echo substr_replace($var, '', 10, -1) . "<br />\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Filesystem_16" />
      <property ref="Multibyte String_11" />
      <property ref="GMP_17" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="trim">
    <description><![CDATA[  This function returns a string with whitespace stripped from the  beginning and end of str .  Without the second parameter,   trim will strip these characters:      ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$text = "\t\tThese are a few words :) ...  ";

echo trim($text);           // "These are a few words :) ..."
echo trim($text, " \t."); // "These are a few words :)"

// trim the ASCII control characters at the beginning and end of $binary
// (from 0 to 31 inclusive)
$clean = trim($binary, "\x00..\x1F");

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Strings_19" />
    </properties>
    
  </element>
  <element kind="function" name="ucfirst">
    <description><![CDATA[  Returns a string with the first character of   str capitalized, if that character is  alphabetic.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$foo = 'hello world!';
$foo = ucfirst($foo);             // Hello world!

$bar = 'HELLO WORLD!';
$bar = ucfirst($bar);             // HELLO WORLD!
$bar = ucfirst(strtolower($bar)); // Hello world!
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="ucwords">
    <description><![CDATA[  Returns a string with the first character of each word in   str capitalized, if that character is  alphabetic.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$foo = 'hello world!';
$foo = ucwords($foo);             // Hello World! 

$bar = 'HELLO WORLD!';
$bar = ucwords($bar);             // HELLO WORLD!
$bar = ucwords(strtolower($bar)); // Hello World!
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="vfprintf">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!($fp = fopen('date.txt', 'w')))
    return;

vfprintf($fp, "%04d-%02d-%02d", array($year, $month, $day));
// will write the formatted ISO date to date.txt
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="FTP_8" />
      <property ref="Date/Time_1" />
      <property kind="parameter" name="args" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="vprintf">
    <properties>
      <property ref="ret_int" />
      <property ref="Date/Time_1" />
      <property ref="Strings_46" />
    </properties>
    
  </element>
  <element kind="function" name="vsprintf">
    <properties>
      <property ref="ret_string" />
      <property ref="Date/Time_1" />
      <property ref="Strings_46" />
    </properties>
    
  </element>
  <element kind="function" name="wordwrap">
    <description><![CDATA[  Returns a string with str wrapped  at the column number specified by the optional   width parameter.  The line is broken  using the (optional) break parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$text = "The quick brown fox jumped over the lazy dog.";
$newtext = wordwrap($text, 20, "<br />\n");

echo $newtext;
?>

    

<?php
$text = "A very long woooooooooooord.";
$newtext = wordwrap($text, 8, "\n", 1);

echo "$newtext\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Exif_5" />
      <property kind="parameter" name="break" type="string"  />
      <property kind="parameter" name="cut" type="bool"  />
    </properties>
    
  </element>
</group>
<group name="Sybase">
  <description><![CDATA[Sybase Functions]]></description>
  <element kind="function" name="sybase_affected_rows">
    <description><![CDATA[   sybase_affected_rows returns the number of  rows affected by the last INSERT, UPDATE or DELETE query on the  server associated with the specified link identifier.  If the  link identifier isn't specified, the last opened link is assumed.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    /* connect to database */
    sybase_connect('SYBASE', '', '') or
        die("Could not connect");
    sybase_select_db("db");

    sybase_query("DELETE FROM sometable WHERE id < 10");
    printf("Records deleted: %d\n", sybase_affected_rows());
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_close">
    <description><![CDATA[    sybase_close closes the link to a Sybase  database that's associated with the specified link   link_identifier .  If the link identifier isn't specified, the last opened link is  assumed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_connect">
    <description><![CDATA[   Returns a positive Sybase link identifier on success, or   on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $link = sybase_connect('SYBASE', '', '')
            or die("Could not connect !");
    echo "Connected successfully";
    sybase_close($link);
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="MS SQL Server_5" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
      <property ref="Firebird/InterBase_19" />
      <property kind="parameter" name="appname" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="sybase_data_seek">
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_32" />
      <property ref="FrontBase_10" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_deadlock_retry_count">
    <description><![CDATA[   Using sybase_deadlock_retry_count , the number of retries  can be defined in cases of deadlocks. By default, every deadlock is retried  an infinite number of times or until the process is killed by Sybase, the  executing script is killed (for instance, by set_time_limit )  or the query succeeds.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="retry_count" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_fetch_array">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or   if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $dbh = sybase_connect('SYBASE', '', '');
    $q = sybase_query('SELECT * FROM p, a WHERE p.person_id= a.person_id');
    var_dump(sybase_fetch_array($q));
    sybase_close($dbh);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_fetch_assoc">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or   if there are no more rows.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_fetch_field">
    <description><![CDATA[  Returns an object containing field information.  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_fetch_object">
    <description><![CDATA[  Returns an object with properties that correspond to the  fetched row, or if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    class Foo {
        var $foo, $bar, $baz;
    }
    
    // {...]
    $qrh= sybase_query('SELECT foo, bar, baz FROM example');
    $foo= sybase_fetch_object($qrh, 'Foo');
    $bar= sybase_fetch_object($qrh, new Foo());
    // {...]
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="Firebird/InterBase_29" />
      <property kind="parameter" name="object" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="sybase_fetch_row">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or   if there are no more rows.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_field_seek">
    <description><![CDATA[  Seeks to the specified field offset.  If the next call to   sybase_fetch_field won't include a field  offset, this field would be returned.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_free_result">
    <description><![CDATA[   sybase_free_result only needs to be called  if you are worried about using too much memory while your script  is running. All result memory will automatically be freed when  the script ends. You may call sybase_free_result  with the result identifier as an argument and the associated  result memory will be freed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_get_last_message">
    <description><![CDATA[    sybase_get_last_message returns the last  message reported by the server.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_min_client_severity">
    <description><![CDATA[    sybase_min_client_severity sets the minimum  client severity level.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="MS SQL Server_14" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_min_error_severity">
    <description><![CDATA[    sybase_min_error_severity sets the minimum  error severity level.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="MS SQL Server_14" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_min_message_severity">
    <description><![CDATA[    sybase_min_message_severity sets the minimum  message severity level.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="MS SQL Server_14" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_min_server_severity">
    <description><![CDATA[    sybase_min_server_severity sets the minimum  server severity level.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="MS SQL Server_14" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_num_fields">
    <description><![CDATA[   sybase_num_fields returns the number of  fields in a result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_num_rows">
    <description><![CDATA[   sybase_num_rows returns the number of rows  in a result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_29" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_pconnect">
    <description><![CDATA[   Returns a positive Sybase persistent link identifier on success,  or on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="MS SQL Server_5" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
      <property ref="Firebird/InterBase_19" />
      <property ref="Sybase_1" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_query">
    <description><![CDATA[  Returns a positive Sybase result identifier on success, or   on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_result">
    <description><![CDATA[   Returns the contents of the cell at the row and offset in  the specified Sybase result set.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_29" />
      <property ref="MCVE_19" />
      <property ref="MS SQL Server_15" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_select_db">
    <description><![CDATA[    sybase_select_db sets the current active  database on the server that's associated with the specified link  identifier.  If no link identifier is specified, the last opened  link is assumed. If no link is open, the function will try to  establish a link as if sybase_connect was  called, and use it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_set_message_handler">
    <description><![CDATA[    sybase_set_message_handler sets a user function to  handle messages generated by the server. You may specify the name of a  global function, or use an array to specify an object reference and a  method name.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    function msg_handler($msgnumber, $severity, $state, $line, $text) 
    {
        var_dump($msgnumber, $severity, $state, $line, $text);
    }
    
    sybase_set_message_handler('msg_handler');
?>

      

<?php
    class Sybase {
        function handler($msgnumber, $severity, $state, $line, $text) 
        {
            var_dump($msgnumber, $severity, $state, $line, $text);
        }
    }
    
    $sybase= new Sybase();
    sybase_set_message_handler(array($sybase, 'handler'));
?>

      

<?php
    // Return FALSE from this function to indicate you can't handle
    // this. The error is printed out as a warning, the way you're used
    // to it if there is no handler installed.
    function msg_handler($msgnumber, $severity, $state, $line, $text) 
    {
        if (257 == $msgnumber) {
            return false;
        }
        var_dump($msgnumber, $severity, $state, $line, $text);
    }
    
    sybase_set_message_handler('msg_handler');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="handler" type="callback" required="1" />
      <property ref="Firebird/InterBase_26" />
    </properties>
    
  </element>
  <element kind="function" name="sybase_unbuffered_query">
    <description><![CDATA[  Returns a positive Sybase result identifier on success, or   on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$dbh = sybase_connect('SYBASE', '', '');
$q = sybase_unbuffered_query('select firstname, lastname from huge_table', $dbh, false);
sybase_data_seek($q, 10000);
$i = 0;

while ($row = sybase_fetch_row($q)) {
    echo $row[0], ' ', $row[1], '<br />';
    if ($i++ > 40000) {
        break;
    }
}

sybase_free_result($q);
sybase_close($dbh);

?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_11" />
      <property kind="parameter" name="store_result" type="bool"  />
    </properties>
    
  </element>
</group>
<group name="TCP Wrappers">
  <description><![CDATA[TCP Wrappers Functions]]></description>
  <element kind="function" name="tcpwrap_check">
    <description><![CDATA[  This function consults the and   files to check if access to service   daemon should be granted or denied for a client.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (!tcpwrap_check('php', $_SERVER['REMOTE_ADDR'])) {
  die('You are not welcome here');
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="daemon" type="string" required="1" >
      <description>  The service name.  </description>
      </property>
      <property ref="IMAP_31" />
      <property ref="Cyrus IMAP_4" />
      <property kind="parameter" name="nodns" type="bool"  >
      <description>  If looks like domain name then DNS is  used to resolve it to IP address; set to   to avoid this.  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="Tokenizer">
  <description><![CDATA[Tokenizer Functions]]></description>
  <element kind="function" name="token_get_all">
    <description><![CDATA[   token_get_all parses the given source   string into PHP language tokens using the Zend engine ' s lexical scanner.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$tokens = token_get_all('<?php'); // => array(array(T_OPEN_TAG, '<?'));
$tokens = token_get_all('<?php echo; ?>'); /* => array(
                                                  array(T_OPEN_TAG, '<?php'), 
                                                  array(T_ECHO, 'echo'),
                                                  ';',
                                                  array(T_CLOSE_TAG, '?>') ); */

/* Note in the following example that the string is parsed as T_INLINE_HTML
   rather than the otherwise expected T_COMMENT (T_ML_COMMENT in PHP <5).
   This is because no open/close tags were used in the "code" provided.
   This would be equivalent to putting a comment outside of <?php ?> tags in a normal file. */
$tokens = token_get_all('/* comment */'); // => array(array(T_INLINE_HTML, '/* comment */'));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Bzip2_2" />
    </properties>
    
  </element>
  <element kind="function" name="token_name">
    <description><![CDATA[   token_name gets the symbolic name for a PHP   token value.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// 260 is the token value for the T_REQUIRE token
echo token_name(260);        // -> "T_REQUIRE"

// a token constant maps to its own name
echo token_name(T_FUNCTION); // -> "T_FUNCTION"
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="token" type="int" required="1" >
      <description>  The token value.  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="URLs">
  <description><![CDATA[URL Functions]]></description>
  <element kind="function" name="base64_decode">
    <description><![CDATA[   base64_decode decodes   encoded_data and returns the original  data or on failure. The returned data may be binary.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$str = 'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==';
echo base64_decode($str);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="encoded_data" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="base64_encode">
    <description><![CDATA[   base64_encode returns   data encoded with base64.  This encoding  is designed to make binary data survive transport through  transport layers that are not 8-bit clean, such as mail bodies.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $str = 'This is an encoded string';
  echo base64_encode($str);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="get_headers">
    <description><![CDATA[   get_headers returns an array with the headers sent  by the server in response to a HTTP request. Returns on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$url = 'http://www.example.com';

print_r(get_headers($url));

print_r(get_headers($url, 1));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="ClibPDF_47" />
      <property ref="Date/Time_2" />
    </properties>
    
  </element>
  <element kind="function" name="get_meta_tags">
    <description><![CDATA[  Opens filename and parses it line by line  for < meta > tags in the file.  This can be a local file or  an .  The parsing stops at   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<meta name="author" content="name">
<meta name="keywords" content="php documentation">
<meta name="DESCRIPTION" content="a php manual">
<meta name="geo.position" content="49.33;-86.59">
</head> <!-- parsing stops here -->

      

<?php
// Assuming the above tags are at www.example.com
$tags = get_meta_tags('http://www.example.com/');

// Notice how the keys are all lowercase now, and
// how . was replaced by _ in the key.
echo $tags['author'];       // name
echo $tags['keywords'];     // php documentation
echo $tags['description'];  // a php manual
echo $tags['geo_position']; // 49.33;-86.59
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property ref="Filesystem_9" />
    </properties>
    
  </element>
  <element kind="function" name="http_build_query">
    <description><![CDATA[  this will output : (word wrapped for readability)  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$data = array('foo'=>'bar',
              'baz'=>'boom',
              'cow'=>'milk',
              'php'=>'hypertext processor');
              
echo http_build_query($data); // foo=bar&baz=boom&cow=milk&php=hypertext+processor
?>

     

<?php
$data = array('foo', 'bar', 'baz', 'boom', 'cow' => 'milk', 'php' =>'hypertext processor');
              
echo http_build_query($data);
/* Outputs:
      0=foo&1=bar&2=baz&3=boom&cow=milk&php=hypertext+processor
 */
 
echo http_build_query($data, 'myvar_');
/* Outputs:
      myvar_0=foo&myvar_1=bar&myvar_2=baz&myvar_3=boom&cow=milk&php=hypertext+processor
 */
?>

     

<?php
$data = array('user'=>array('name'=>'Bob Smith',
                            'age'=>47,
                            'sex'=>'M',
                            'dob'=>'5/12/1956'),
              'pastimes'=>array('golf', 'opera', 'poker', 'rap'),
              'children'=>array('bobby'=>array('age'=>12,
                                               'sex'=>'M'),
                                'sally'=>array('age'=>8,
                                               'sex'=>'F')),
              'CEO');
                                               
echo http_build_query($data, 'flags_');
?>

     

<?php
class myClass {
  var $foo;
  var $baz;
  
  function myClass() 
  {
    $this->foo = 'bar';
    $this->baz = 'boom';
  }
}

$data = new myClass();

echo http_build_query($data); // foo=bar&baz=boom

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="formdata" type="array" required="1" />
      <property kind="parameter" name="numeric_prefix" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="parse_url">
    <description><![CDATA[  This function returns an associative array containing any of the  various components of the URL that are present. If one of them is  missing, no entry will be created for it. The components are :    ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ClibPDF_47" />
    </properties>
    
  </element>
  <element kind="function" name="rawurldecode">
    <description><![CDATA[  Returns a string in which the sequences with percent  ( ) signs followed by two hex digits have been  replaced with literal characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo rawurldecode('foo%20bar%40baz'); // foo bar@baz

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="rawurlencode">
    <description><![CDATA[  Returns a string in which all non-alphanumeric characters except   have been replaced with a percent  ( ) sign followed by two hex digits.  This is  the encoding described in RFC 1738 for protecting literal  characters from being interpreted as special URL delimiters, and  for protecting URL's from being mangled by transmission media  with character conversions (like some email systems). For  example, if you want to include a password in an FTP URL:  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo '<a href="ftp://user:', rawurlencode('foo @+%/'),
     '@ftp.example.com/x.txt">';
?>

      

<?php
echo '<a href="http://example.com/department_list_script/',
    rawurlencode('sales and marketing/Miami'), '">';
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="urldecode">
    <description><![CDATA[  Decodes any  encoding in the given string.  The decoded string is returned.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = explode('&', $QUERY_STRING);
$i = 0;
while ($i < count($a)) {
    $b = split('=', $a[$i]);
    echo 'Value for parameter ', htmlspecialchars(urldecode($b[0])),
         ' is ', htmlspecialchars(urldecode($b[1])), "<br />\n";
    $i++;
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="urlencode">
    <description><![CDATA[  Returns a string in which all non-alphanumeric characters except   have been replaced with a percent  ( ) sign followed by two hex digits and spaces  encoded as plus ( ) signs.  It is encoded the  same way that the posted data from a WWW form is encoded, that is  the same way as in   media type.  This differs from the RFC1738 encoding (see   rawurlencode ) in that for historical  reasons, spaces are encoded as plus (+) signs.  This function is  convenient when encoding a string to be used in a query part of  a URL, as a convenient way to pass variables to the next page:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo '<a href="mycgi?foo=', urlencode($userinput), '">';
?>

      

<?php
echo '<a href="mycgi?foo=', htmlentities(urlencode($userinput)), '">';
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
</group>
<group name="Variables handling">
  <description><![CDATA[Variable Handling Functions]]></description>
  <element kind="function" name="debug_zval_dump">
    <description><![CDATA[  Dumps a string representation of an internal zend value to output.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$var1 = 'Hello World';
$var2 = '';

$var2 =& $var1;

debug_zval_dump($var1);
?>]]></description>
      </property>
      <property ref="OCI8_7" />
    </properties>
    
  </element>
  <element kind="function" name="empty">
    <description><![CDATA[  Determine whether a variable is considered to be empty.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$var = 0;

// Evaluates to true because $var is empty
if (empty($var)) {
    echo '$var is either 0, empty, or not set at all';
}

// Evaluates as true because $var is set
if (isset($var)) {
    echo '$var is set even though it is empty';
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="floatval">
    <description><![CDATA[  Gets the value of var .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$var = '122.34343The';
$float_value_of_var = floatval($var);
echo $float_value_of_var; // 122.34343
?>]]></description>
      </property>
      <property ref="ret_float" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="get_defined_vars">
    <description><![CDATA[  This function returns a multidimensional array containing a list of  all defined variables, be them environment, server or user-defined  variables, within the scope that get_defined_vars is  called.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$b = array(1, 1, 2, 3, 5, 8);

$arr = get_defined_vars();

// print $b
print_r($arr["b"]);

/* print path to the PHP interpreter (if used as a CGI)
 * e.g. /usr/local/bin/php */
echo $arr["_"];

// print the command-line parameters if any
print_r($arr["argv"]);

// print all the server vars
print_r($arr["_SERVER"]);

// print all the available keys for the arrays of variables
print_r(array_keys(get_defined_vars()));
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="get_resource_type">
    <description><![CDATA[  This function returns a string representing the type of the   passed to it. If the parameter is not a valid   , it generates an error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="gettype">
    <description><![CDATA[  Returns the type of the PHP variable   var .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="import_request_variables">
    <description><![CDATA[  Although the prefix parameter is  optional, you will get an   level error if  you specify no prefix, or specify an empty string as a  prefix. This is a possible security hazard. Notice  level errors are not displayed using the default    level.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="MaxDB_18" />
      <property ref="Arrays_46" />
    </properties>
    
  </element>
  <element kind="function" name="intval">
    <description><![CDATA[  The base argument for   intval has no effect unless the   var argument is a string.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Arrays_29" />
      <property ref="GMP_8" />
    </properties>
    
  </element>
  <element kind="function" name="is_array">
    <description><![CDATA[  Finds whether the given variable is an array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$yes = array('this', 'is', 'an array');

echo is_array($yes) ? 'Array' : 'not an Array';
echo "\n";

$no = 'this is a string';

echo is_array($no) ? 'Array' : 'not an Array';
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_bool">
    <description><![CDATA[  Finds whether the given variable is a boolean.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = false;
$b = 0;

// Since $a is a boolean, this is true
if (is_bool($a)) {
    echo "Yes, this is a boolean";
}

// Since $b is not a boolean, this is not true
if (is_bool($b)) {
    echo "Yes, this is a boolean";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_callable">
    <description><![CDATA[  Verify that the contents of a variable can be called as a function.  This can check that a simple variable contains the name of a valid  function, or that an array contains a properly encoded object and  function name.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
      <property kind="parameter" name="syntax_only" type="bool"  />
      <property kind="parameter" name="callable_name" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="is_float">
    <description><![CDATA[  Finds whether the given variable is a float.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_int">
    <description><![CDATA[  Finds whether the given variable is an integer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_null">
    <description><![CDATA[  Finds whether the given variable is .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_numeric">
    <description><![CDATA[  Finds whether the given variable is numeric.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_object">
    <description><![CDATA[  Finds whether the given variable is an object.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_resource">
    <description><![CDATA[   is_resource returns if the variable  given by the var parameter is a   , otherwise it returns .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$db_link = @mysql_connect('localhost', 'mysql_user', 'mysql_pass');
if (!is_resource($db_link)) {
    die('Can\'t connect : ' . mysql_error());
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_scalar">
    <description><![CDATA[   is_scalar returns if the variable  given by the var parameter is a scalar,  otherwise it returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="is_string">
    <description><![CDATA[  Finds whether the given variable is a string.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="isset">
    <description><![CDATA[  If a variable has been unset with unset , it will no  longer be set. isset will  return if testing a variable that has been set to . Also  note that a byte ( ) is not equivalent to  the PHP constant.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
      <property kind="parameter" name="var" type="mixed"  />
      <property kind="parameter" name="..." type=""  />
    </properties>
    
  </element>
  <element kind="function" name="print_r">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $b = array ('m' => 'monkey', 'foo' => 'bar', 'x' => array ('x', 'y', 'z'));
    $results = print_r($b, true); //$results now contains output from print_r
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="expression" type="mixed" required="1" />
      <property ref="Misc._6" />
    </properties>
    
  </element>
  <element kind="function" name="serialize">
    <description><![CDATA[  In PHP 3, object properties will be serialized, but methods are  lost.  That limitation was removed in PHP 4 as both properties  and methods are now restored.  Please see the  section of for more information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// $session_data contains a multi-dimensional array with session
// information for the current user.  We use serialize() to store
// it in a database at the end of the request.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
      "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array (serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
     "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
        /* Something went wrong.. */
    }
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="settype">
    <description><![CDATA[  Set the type of variable var to   type .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$foo = "5bar"; // string
$bar = true;   // boolean

settype($foo, "integer"); // $foo is now 5   (integer)
settype($bar, "string");  // $bar is now "1" (string)
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Arrays_29" />
      <property ref="CCVS_5" />
    </properties>
    
  </element>
  <element kind="function" name="strval">
    <properties>
      <property ref="ret_string" />
      <property ref="Arrays_29" />
    </properties>
    
  </element>
  <element kind="function" name="unserialize">
    <description><![CDATA[  It's possible to set a callback-function which will be called,  if an undefined class should be instantiated during unserializing.  (to prevent getting an incomplete "__PHP_Incomplete_Class".)  Use your , ini_set or   to define 'unserialize_callback_func'.  Everytime an undefined class  should be instantiated, it'll be called.  To disable this feature just  empty this setting.  Also note that the directive  unserialize_callback_func directive became  available in PHP 4.2.0.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';

// unserialize_callback_func directive available as of PHP 4.2.0
ini_set('unserialize_callback_func', 'mycallback'); // set your callback_function

function mycallback($classname) 
{
    // just include a file containing your classdefinition
    // you get $classname to figure out which classdefinition is required
}
?>

      

<?php
// Here, we use unserialize() to load session data to the
// $session_data array from the string selected from a database.
// This example complements the one described with serialize().

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array ($PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata) || !odbc_fetch_into($stmt, &$tmp)) {
    // if the execute or fetch fails, initialize to empty array
    $session_data = array();
} else {
    // we should now have the serialized data in $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // something went wrong, initialize to empty array
        $session_data = array();
    }
}
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="unset">
    <description><![CDATA[   unset destroys the specified variables. Note  that in PHP 3, unset will always return  (actually, the integer value 1). In PHP 4, however,   unset is no longer a true function: it is  now a statement. As such no value is returned, and attempting to  take the value of unset results in a parse  error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// destroy a single variable
unset($foo);

// destroy a single element of an array
unset($bar['quux']);

// destroy more than one variable
unset($foo1, $foo2, $foo3);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Arrays_29" />
      <property ref="Variables handling_3" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="var_dump">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = array (1, 2, array ("a", "b", "c"));
var_dump($a);
?>

      

<?php

$b = 3.1;
$c = true;
var_dump($b, $c);

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="Variables handling_5" />
      <property kind="parameter" name="expression" type="mixed"  />
      <property ref="Variables handling_4" />
    </properties>
    
  </element>
  <element kind="function" name="var_export">
    <properties>
      <property ref="ret_mixed" />
      <property ref="Variables handling_5" />
      <property ref="Misc._6" />
    </properties>
    
  </element>
</group>
<group name="Verisign Payflow Pro">
  <description><![CDATA[Verisign Payflow Pro Functions]]></description>
  <element kind="function" name="pfpro_cleanup">
    <description><![CDATA[   pfpro_cleanup is used to shutdown the  Payflow Pro library cleanly. It should be called after you  have processed any transactions and before the end of your script.  However you may omit this call, in which case this  extension will automatically call pfpro_cleanup  after your script terminates.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="pfpro_init">
    <description><![CDATA[   pfpro_init is used to initialise  the Payflow Pro library. You may omit this call, in which case  this extension will automatically call pfpro_init  before the first transaction.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="pfpro_process">
    <description><![CDATA[  Returns: An associative array containing the response  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

pfpro_init();

$transaction = array('USER'    => 'mylogin',
                     'PWD'     => 'mypassword',
                     'PARTNER' => 'VeriSign',
                     'TRXTYPE' => 'S',
                     'TENDER'  => 'C',
                     'AMT'     => 1.50,
                     'ACCT'    => '4111111111111111',
                     'EXPDATE' => '0904'
                    );

$response = pfpro_process($transaction);

if (!$response) {
  die("Couldn't establish link to Verisign.\n");
}

echo "Verisign response code was " . $response['RESULT'];
echo ", which means: " . $response['RESPMSG'] . "\n";

echo "\nThe transaction request: ";
print_r($transaction);

echo "\nThe response: ";
print_r($response);

pfpro_cleanup();

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="parameters" type="array" required="1" />
      <property ref="Streams_22" />
      <property ref="FTP_5" />
      <property ref="FTP_6" />
      <property kind="parameter" name="proxy_address" type="string"  />
      <property kind="parameter" name="proxy_port" type="int"  />
      <property kind="parameter" name="proxy_logon" type="string"  />
      <property kind="parameter" name="proxy_password" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="pfpro_process_raw">
    <description><![CDATA[  Returns: A string containing the response.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

pfpro_init();

$response = pfpro_process_raw("USER=mylogin&PWD[5]=m&ndy&PARTNER=VeriSign&TRXTYPE=S&TENDER=C&AMT=1.50&ACCT=4111111111111111&EXPDATE=0904");

if (!$response) {
  die("Couldn't establish link to Verisign.\n");
}

echo "Verisign raw response was " . $response;

pfpro_cleanup();

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="parameters" type="string" required="1" />
      <property ref="Streams_22" />
      <property ref="FTP_5" />
      <property ref="FTP_6" />
      <property ref="Verisign Payflow Pro_2" />
      <property ref="Verisign Payflow Pro_3" />
      <property ref="Verisign Payflow Pro_4" />
      <property ref="Verisign Payflow Pro_5" />
    </properties>
    
  </element>
  <element kind="function" name="pfpro_version">
    <description><![CDATA[    pfpro_version returns the version string  of the Payflow Pro library. At the time of writing, this was L211.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
</group>
<group name="W32api">
  <description><![CDATA[W32api Functions]]></description>
  <element kind="function" name="w32api_deftype">
    <description><![CDATA[  If you would like to define a type for a w32api call, you need to call   w32api_deftype . This function takes 2n+1 arguments,  where n is the number of members the type has. The first argument is the  name of the type. After that is the type of the member followed by the  members name (in pairs). A member type can be a user defined type. All  the type names are case sensitive. Built in type names should be provided  in lowercase.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="typename" type="string" required="1" />
      <property kind="parameter" name="member1_type" type="string" required="1" />
      <property kind="parameter" name="member1_name" type="string" required="1" />
      <property ref="Firebird/InterBase_47" />
      <property ref="Firebird/InterBase_47" />
    </properties>
    
  </element>
  <element kind="function" name="w32api_init_dtype">
    <description><![CDATA[  This function creates an instance of the data type named   typename , filling in the values of the data  type. The typename parameter is case sensitive.  You should give the values in the same order as you defined the  data type with w32api_deftype . The type of the  resource returned is .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="W32api_1" />
      <property ref="Arrays_14" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="w32api_invoke_function">
    <description><![CDATA[   w32api_invoke_function tries to find the previously  registered function, named funcname , passing the  parameters you provided. The return type is the one you set when you  registered the function, the value is the one returned by the function  itself. Any of the arguments can be of any PHP type or   w32api_deftype defined type, as needed.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="funcname" type="string" required="1" />
      <property kind="parameter" name="argument" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="w32api_register_function">
    <description><![CDATA[  This function tries to find the function_name function  in libary , and tries to import it into PHP. The function  will be registered with the given return_type . This type  can be a generic PHP type, or a type defined with w32api_deftype .  All type names are case sensitive. Built in type names should be provided in lowercase.    ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="PHP Options/Info_3" />
      <property ref="APD_9" />
      <property kind="parameter" name="return_type" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="w32api_set_call_method">
    <description><![CDATA[  This function sets the method call type. The parameter can be  one of the constants or   . The extension default is   .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="SNMP_4" />
    </properties>
    
  </element>
</group>
<group name="WDDX">
  <description><![CDATA[WDDX Functions]]></description>
  <element kind="function" name="wddx_add_vars">
    <description><![CDATA[   wddx_add_vars is used to serialize passed  variables and add the result to the packet specified by the   packet_id .  The variables to be serialized  are specified in exactly the same way as   wddx_serialize_vars .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="packet_id" type="int" required="1" />
      <property kind="parameter" name="name_var" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="wddx_deserialize">
    <description><![CDATA[   wddx_deserialize takes a   packet string and deserializes it.  It  returns the result which can be string, number, or array.  Note  that structures are deserialized into associative arrays.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property kind="parameter" name="packet" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="wddx_packet_end">
    <description><![CDATA[   wddx_packet_end ends the WDDX packet  specified by the packet_id and returns the  string with the packet.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="WDDX_1" />
    </properties>
    
  </element>
  <element kind="function" name="wddx_packet_start">
    <description><![CDATA[  Use wddx_packet_start to start a new WDDX  packet for incremental addition of variables.  It takes an  optional comment string and returns a  packet ID for use in later functions.  It automatically creates a  structure definition inside the packet to contain the variables.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="comment" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="wddx_serialize_value">
    <description><![CDATA[   wddx_serialize_value is used to create a  WDDX packet from a single given value.  It takes the value  contained in var , and an optional   comment string that appears in the packet  header, and returns the WDDX packet.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Arrays_29" />
      <property ref="WDDX_4" />
    </properties>
    
  </element>
  <element kind="function" name="wddx_serialize_vars">
    <description><![CDATA[   wddx_serialize_vars is used to create a WDDX  packet with a structure that contains the serialized  representation of the passed variables.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$a = 1;
$b = 5.5;
$c = array("blue", "orange", "violet");
$d = "colors";

$clvars = array("c", "d");
echo wddx_serialize_vars("a", "b", $clvars);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="var_name" type="mixed" required="1" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
</group>
<group name="XML">
  <description><![CDATA[XML Parser Functions]]></description>
  <element kind="function" name="utf8_decode">
    <description><![CDATA[  This function decodes data , assumed to be   encoded, to .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="utf8_encode">
    <description><![CDATA[  This function encodes the string data to   , and returns the encoded version.   is a standard mechanism used by   for encoding values into a byte stream.   is transparent to plain  characters, is self-synchronized (meaning it is possible for a program to  figure out where in the bytestream characters start) and can be used with  normal string comparison functions for sorting and such.  PHP encodes   characters in up to four bytes, like this:    Each represents a bit that can be  used to store character data.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="xml_error_string">
    <description><![CDATA[  Gets the XML parser error string associated with the given   code .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="MCVE_36" />
    </properties>
    
  </element>
  <element kind="function" name="xml_get_current_byte_index">
    <description><![CDATA[  Gets the current byte index of the given XML parser.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="parser" type="resource" required="1" >
      <description>  A reference to the XML parser to get byte index from.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="xml_get_current_column_number">
    <description><![CDATA[  Gets the current column number of the given XML parser.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="XML_1" />
    </properties>
    
  </element>
  <element kind="function" name="xml_get_current_line_number">
    <description><![CDATA[  Gets the current line number for the given XML parser.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="XML_1" />
    </properties>
    
  </element>
  <element kind="function" name="xml_get_error_code">
    <description><![CDATA[  Gets the XML parser error code.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="XML_1" />
    </properties>
    
  </element>
  <element kind="function" name="xml_parse">
    <description><![CDATA[   xml_parse parses an XML document. The handlers for  the configured events are called as many times as necessary.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Bzip2_7" />
      <property kind="parameter" name="is_final" type="bool"  >
      <description>  If set and , is the last piece of  data sent in this parse.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="xml_parse_into_struct">
    <description><![CDATA[  This function parses an XML file into 2 parallel array  structures, one ( index ) containing pointers  to the location of the appropriate values in the   values array. These last two parameters  must be passed by reference.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$simple = "<para><note>simple note</note></para>";
$p = xml_parser_create();
xml_parse_into_struct($p, $simple, $vals, $index);
xml_parser_free($p);
echo "Index array\n";
print_r($index);
echo "\nVals array\n";
print_r($vals);
?>

      

<?xml version="1.0"?>
<moldb>

    <molecule>
        <name>Alanine</name>
        <symbol>ala</symbol>
        <code>A</code>
        <type>hydrophobic</type>
    </molecule>

    <molecule>
        <name>Lysine</name>
        <symbol>lys</symbol>
        <code>K</code>
        <type>charged</type>
    </molecule>

</moldb>

      

<?php

class AminoAcid {
    var $name;  // aa name
    var $symbol;    // three letter symbol
    var $code;  // one letter code
    var $type;  // hydrophobic, charged or neutral
    
    function AminoAcid ($aa) 
    {
        foreach ($aa as $k=>$v)
            $this->$k = $aa[$k];
    }
}

function readDatabase($filename) 
{
    // read the XML database of aminoacids
    $data = implode("", file($filename));
    $parser = xml_parser_create();
    xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
    xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1);
    xml_parse_into_struct($parser, $data, $values, $tags);
    xml_parser_free($parser);

    // loop through the structures
    foreach ($tags as $key=>$val) {
        if ($key == "molecule") {
            $molranges = $val;
            // each contiguous pair of array entries are the 
            // lower and upper range for each molecule definition
            for ($i=0; $i < count($molranges); $i+=2) {
                    $offset = $molranges[$i] + 1;
                $len = $molranges[$i + 1] - $offset;
                $tdb[] = parseMol(array_slice($values, $offset, $len));
            }
        } else {
            continue;
        }
    }
    return $tdb;
}

function parseMol($mvalues) 
{
    for ($i=0; $i < count($mvalues); $i++) {
        $mol[$mvalues[$i]["tag"]] = $mvalues[$i]["value"];
    }
    return new AminoAcid($mol);
}

$db = readDatabase("moldb.xml");
echo "** Database of AminoAcid objects:\n";
print_r($db);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="XML_1" />
      <property ref="Bzip2_7" />
      <property ref="Arrays_7" />
      <property kind="parameter" name="index" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="xml_parser_create">
    <description><![CDATA[   xml_parser_create creates a new XML parser  and returns a resource handle referencing it to be used by the  other XML functions.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="xml_parser_create_ns">
    <description><![CDATA[   xml_parser_create_ns creates a new XML parser  with XML namespace support and returns a resource handle referencing  it to be used by the other XML functions.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="DOM XML_4" />
      <property kind="parameter" name="separator" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="xml_parser_free">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
    </properties>
    
  </element>
  <element kind="function" name="xml_parser_get_option">
    <properties>
      <property ref="ret_mixed" />
      <property ref="XML_1" />
      <property ref="CURL_7" />
    </properties>
    
  </element>
  <element kind="function" name="xml_parser_set_option">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="CURL_7" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_character_data_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
      <property ref="XML_1" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_default_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
      <property ref="XML_1" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_element_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property kind="parameter" name="start_element_handler" type="callback" required="1" />
      <property kind="parameter" name="end_element_handler" type="callback" required="1" />
      <property ref="XML_1" />
      <property ref="CCVS_7" />
      <property kind="parameter" name="attribs" type="array" required="1" />
      <property ref="XML_1" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_end_namespace_decl_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_external_entity_ref_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
      <property ref="XML_1" />
      <property kind="parameter" name="open_entity_names" type="string" required="1" />
      <property kind="parameter" name="base" type="string" required="1" />
      <property kind="parameter" name="system_id" type="string" required="1" />
      <property kind="parameter" name="public_id" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_notation_decl_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
      <property ref="XML_1" />
      <property kind="parameter" name="notation_name" type="string" required="1" />
      <property ref="XML_9" />
      <property ref="XML_10" />
      <property ref="XML_11" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_object">
    <description><![CDATA[  This function allows to use parser inside   object . All callback functions could be set with   xml_set_element_handler etc and assumed to be  methods of object .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
class xml  {
    var $parser;

    function xml() 
    {
        $this->parser = xml_parser_create();

        xml_set_object($this->parser, $this);
        xml_set_element_handler($this->parser, "tag_open", "tag_close");
        xml_set_character_data_handler($this->parser, "cdata");
    }

    function parse($data) 
    {
        xml_parse($this->parser, $data);
    }

    function tag_open($parser, $tag, $attributes) 
    {
        var_dump($parser, $tag, $attributes); 
    }

    function cdata($parser, $cdata) 
    {
        var_dump($parser, $cdata);
    }

    function tag_close($parser, $tag) 
    {
        var_dump($parser, $tag);
    }

} // end of class xml

$xml_parser = new xml();
$xml_parser->parse("<A ID='hallo'>PHP</A>");
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="XML_1" />
      <property ref="Classes/Objects_9" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_processing_instruction_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
      <property ref="XML_1" />
      <property ref="DOM_11" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_start_namespace_decl_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
    </properties>
    
  </element>
  <element kind="function" name="xml_set_unparsed_entity_decl_handler">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML_1" />
      <property ref="Sybase_4" />
      <property ref="XML_1" />
      <property kind="parameter" name="entity_name" type="string" required="1" />
      <property ref="XML_9" />
      <property ref="XML_10" />
      <property ref="XML_11" />
      <property ref="XML_12" />
    </properties>
    
  </element>
</group>
<group name="XML-RPC">
  <description><![CDATA[XML-RPC Functions]]></description>
  <element kind="function" name="xmlrpc_decode">
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="xml" type="string" required="1" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_decode_request">
    <properties>
      <property ref="ret_array" />
      <property ref="XML-RPC_1" />
      <property kind="parameter" name="method" type="string" required="1" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_encode">
    <properties>
      <property ref="ret_string" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_encode_request">
    <properties>
      <property ref="ret_string" />
      <property ref="XML-RPC_2" />
      <property kind="parameter" name="params" type="mixed" required="1" />
      <property kind="parameter" name="output_options" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_get_type">
    <description><![CDATA[  This function is especially useful for base64 and datetime strings.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_is_fault">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="arg" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_parse_method_descriptions">
    <properties>
      <property ref="ret_array" />
      <property ref="XML-RPC_1" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_server_add_introspection_data">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="server" type="resource" required="1" />
      <property kind="parameter" name="desc" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_server_call_method">
    <properties>
      <property ref="ret_mixed" />
      <property ref="XML-RPC_6" />
      <property ref="XML-RPC_1" />
      <property kind="parameter" name="user_data" type="mixed" required="1" />
      <property ref="XML-RPC_4" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_server_create">
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_server_destroy">
    <properties>
      <property ref="ret_int" />
      <property ref="XML-RPC_6" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_server_register_introspection_callback">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML-RPC_6" />
      <property kind="parameter" name="function" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_server_register_method">
    <properties>
      <property ref="ret_bool" />
      <property ref="XML-RPC_6" />
      <property ref="Classes/Objects_1" />
      <property ref="XML-RPC_9" />
    </properties>
    
  </element>
  <element kind="function" name="xmlrpc_set_type">
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_6" />
      <property ref="CCVS_5" />
    </properties>
    
  </element>
</group>
<group name="XSL">
  <description><![CDATA[XSL functions]]></description>
  <element kind="function" name="getParameter">
    <description><![CDATA[  Gets a parameter if previously set by .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM_3" />
      <property ref="DOM_17" />
    </properties>
    
  </element>
  <element kind="function" name="hasExsltSupport">
    <description><![CDATA[  This method determine if PHP was built with the .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$proc = new XSLTProcessor;
if (!$proc->hasExsltSupport()) {
    die('EXSLT support not available');
}

// do EXSLT stuff here ..

?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="importStylesheet">
    <description><![CDATA[  This method import the stylesheet into the   for transformations.  ]]></description>
    <properties>
      <property kind="parameter" name="stylesheet" type="DOMDocument" required="1" >
      <description>  The imported style sheet as a object.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="registerPHPFunctions">
    <description><![CDATA[  This method enables the ability to use PHP functions as XSLT functions  within XSL stylesheets.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="removeParameter">
    <description><![CDATA[  Removes a parameter, if set. This will make the processor use the  default value for the parameter as specified in the stylesheet.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DOM_3" />
      <property ref="DOM_17" />
    </properties>
    
  </element>
  <element kind="function" name="setParameter">
    <description><![CDATA[  Sets the value of one or more parameters to be used in subsequent  transformations with . If the  parameter doesn't exist in the stylesheet it will be ignored.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$collections = array(
    'Marc Rutkowski' => 'marc',
    'Olivier Parmentier' => 'olivier'
);

$xsl = new DOMDocument;
$xsl->load('collection.xsl');

// Configure the transformer
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // attach the xsl rules

foreach ($collections as $name => $file) {
    // Load the XML source
    $xml = new DOMDocument;
    $xml->load('collection_' . $file . '.xml');

    $proc->setParameter('', 'owner', $name);
    $proc->transformToURI($xml, 'file:///tmp/' . $file . '.html');
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="namespace" type="string" required="1" />
      <property ref="Sessions_5" />
      <property ref="DOM_10" />
    </properties>
    
  </element>
  <element kind="function" name="transformToDoc">
    <description><![CDATA[  Transforms the source node to a applying  the stylesheet given by the method.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Load the XML source
$xml = new DOMDocument;
$xml->load('collection.xml');

$xsl = new DOMDocument;
$xsl->load('collection.xsl');

// Configure the transformer
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // attach the xsl rules

echo trim($proc->transformToDoc($xml)->firstChild->wholeText);

?>]]></description>
      </property>
      <property ref="ret_DOMDocument" />
      <property kind="parameter" name="doc" type="DOMNode" required="1" >
      <description>  The node to be transformed.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="transformToURI">
    <description><![CDATA[  Transforms the source node to an URI applying the stylesheet given by the   method.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Load the XML source
$xml = new DOMDocument;
$xml->load('collection.xml');

$xsl = new DOMDocument;
$xsl->load('collection.xsl');

// Configure the transformer
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // attach the xsl rules

$proc->transformToURI($xml, 'file:///tmp/out.html');

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="doc" type="DOMDocument" required="1" >
      <description>  The transformed document.  </description>
      </property>
      <property ref="DOM XML_1" />
    </properties>
    
  </element>
  <element kind="function" name="transformToXML">
    <description><![CDATA[  Transforms the source node to a string applying the stylesheet given by  the method.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Load the XML source
$xml = new DOMDocument;
$xml->load('collection.xml');

$xsl = new DOMDocument;
$xsl->load('collection.xsl');

// Configure the transformer
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // attach the xsl rules

echo $proc->transformToXML($xml);

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="XSL_4" />
    </properties>
    
  </element>
</group>
<group name="XSLT">
  <description><![CDATA[XSLT Functions]]></description>
  <element kind="function" name="xslt_backend_info">
    <description><![CDATA[   xslt_backend_info returns a string with  information about the compilation setting of the backend  or an error string when no information available.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_backend_name">
    <description><![CDATA[   xslt_backend_name will always return   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo xslt_backend_name(); // Sablotron

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_backend_version">
    <description><![CDATA[   xslt_backend_version returns the version  number of if available,   otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo xslt_backend_version(); // 0.98 for example

?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_create">
    <description><![CDATA[  Create and return a new XSLT processor resource for manipulation by the  other XSLT functions.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function xml2html($xmldata, $xsl) 
{ 
    /* $xmldata -> your XML */
    /* $xsl -> XSLT file */     

    $path = 'include';
    $arguments = array('/_xml' => $xmldata);
    $xsltproc = xslt_create();
    xslt_set_encoding($xsltproc, 'ISO-8859-1');
    $html =
        xslt_process($xsltproc, 'arg:/_xml', "$path/$xsl", NULL, $arguments);

    if (empty($html)) {
       die('XSLT processing error: '. xslt_error($xsltproc));
    }
    xslt_free($xsltproc);
    return $html;
}            
?>]]></description>
      </property>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_errno">
    <description><![CDATA[  Returns an error code describing the last error that occurred on the  passed XSLT processor.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="xh" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_error">
    <description><![CDATA[  Returns a string describing the last error that occurred on the  passed XSLT processor.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$xh = xslt_create();
$result = xslt_process($xh, 'dog.xml', 'pets.xsl');
if (!$result) {
    die(sprintf("Cannot process XSLT document [%d]: %s", 
                xslt_errno($xh), xslt_error($xh)));
}

echo $result;

xslt_free($xh);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="XSLT_1" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_free">
    <description><![CDATA[  Free the XSLT processor identified by the given handle.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="XSLT_1" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_getopt">
    <description><![CDATA[   xslt_getopt returns the options on the given   processor .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="processor" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_process">
    <description><![CDATA[  The xslt_process function is the crux of the new  XSLT extension.  It allows you to perform an XSLT transformation using  almost any type of input source - the containers.  This is accomplished  through the use of argument buffers -- a concept taken from the Sablotron  XSLT processor (currently the only XSLT processor this extension supports).  The input containers default to a filename 'containing' the document to be  processed. The result container defaults to a filename for the transformed  document. If the result container is not specified - i.e.   - than the result is returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document
if (xslt_process($xh, 'sample.xml', 'sample.xsl', 'result.xml')) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into result.xml";
    echo ", result.xml has the following contents\n<br />\n";
    echo "<pre>\n";
    readfile('result.xml');
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  result.xml the reason is that " . xslt_error($xh) . " and the ";
    echo "error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>

     

<?php

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document, returning the result into the $result variable
$result = xslt_process($xh, 'sample.xml', 'sample.xsl');
if ($result) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    echo " variable, the \$result variable has the following contents\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  the \$result variable the reason is that " . xslt_error($xh); 
    echo " and the error code is " . xslt_errno($xh);
}

xslt_free($xh);

?>

      

<?php
// $xml and $xsl contain the XML and XSL data

$arguments = array(
     '/_xml' => $xml,
     '/_xsl' => $xsl
);

// Allocate a new XSLT processor
$xh = xslt_create();

// Process the document
$result = xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments); 
if ($result) {
    echo "SUCCESS, sample.xml was transformed by sample.xsl into the \$result";
    echo " variable, the \$result variable has the following contents\n<br />\n";
    echo "<pre>\n";
    echo $result;
    echo "</pre>\n";
} else {
    echo "Sorry, sample.xml could not be transformed by sample.xsl into";
    echo "  the \$result variable the reason is that " . xslt_error($xh);
    echo " and the error code is " . xslt_errno($xh);
}
xslt_free($xh);
?>

      

<?php

// XML string
$xml = '<?xml version="1.0"?>
<para>
 change me
</para>';

// XSL string
$xsl = '
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" encoding="ISO-8859-1" indent="no" 
 omit-xml-declaration="yes"  media-type="text/html"/>
 <xsl:param name="myvar"/>
 <xsl:param name="mynode"/>
 <xsl:template match="/">
My PHP variable : <xsl:value-of select="$myvar"/><br />
My node set : <xsl:value-of select="$mynode"/>
 </xsl:template>
</xsl:stylesheet>';


$xh = xslt_create();

// the second parameter will be interpreted as a string
$parameters = array (
  'myvar' => 'test',
  'mynode' => '<foo>bar</foo>'
);

$arguments = array (
  '/_xml' => $xml,
  '/_xsl' => $xsl
);

echo xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, $arguments, $parameters);

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="XSLT_1" />
      <property kind="parameter" name="xmlcontainer" type="string" required="1" />
      <property kind="parameter" name="xslcontainer" type="string" required="1" />
      <property kind="parameter" name="resultcontainer" type="string"  />
      <property ref="SOAP_1" />
      <property kind="parameter" name="parameters" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_base">
    <description><![CDATA[  Sets the base URI for all XSLT transformations, the base URI is used  with Xpath instructions to resolve document() and other commands which  access external resources. It is also used to resolve URIs for the < xsl:include >  and < xsl:import > elements.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="XSLT_1" />
      <property ref="DOM XML_1" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_encoding">
    <description><![CDATA[  Set the output encoding for the XSLT transformations.  When using the   backend, this option is only  available when you compile with  encoding support.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="XSLT_1" />
      <property ref="ClibPDF_52" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_error_handler">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// Our XSLT error handler
function xslt_error_handler($handler, $errno, $level, $info) 
{
  // for now, let's just see the arguments
  var_dump(func_get_args());
}

// XML content :
$xml='<?xml version="1.0"?>
<para>
 oops, I misspelled the closing tag
</pata>';

// XSL content :
$xsl='<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:template match="/">
   <strong><xsl:value-of select="para"/></strong>
</xsl:template>
</xsl:stylesheet>';

$xh = xslt_create();

xslt_set_error_handler($xh, "xslt_error_handler");

echo xslt_process($xh, 'arg:/_xml', 'arg:/_xsl',
                  NULL, array("/_xml" => $xml, "/_xsl" => $xsl));

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="XSLT_1" />
      <property kind="parameter" name="handler" type="mixed" required="1" />
      <property ref="XSLT_1" />
      <property kind="parameter" name="error_level" type="int" required="1" />
      <property ref="SQLite_7" />
      <property ref="IRC Gateway_20" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_log">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$xh = xslt_create();
xslt_set_log($xh, true);
xslt_set_log($xh, getcwd() . '/myfile.log');

$result = xslt_process($xh, 'dog.xml', 'pets.xsl');
echo $result;

xslt_free($xh);
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="XSLT_1" />
      <property kind="parameter" name="log" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_object">
    <description><![CDATA[  This function allows to use the processor inside  an object and to resolve all callback functions  in it.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class my_xslt_processor {
    
    var $_xh; // our XSLT processor
    
    function my_xslt_processor()
    {
        $this->_xh = xslt_create();

        // Make $this object the callback resolver
        xslt_set_object($this->_xh, $this);

        // Let's handle the errors
        xslt_set_error_handler($this->_xh, "my_xslt_error_handler");
    }

    function my_xslt_error_handler($handler, $errno, $level, $info)
    {
        // for now, let's just see the arguments
        var_dump(func_get_args());
    }
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="XSLT_2" />
      <property ref="Classes/Objects_2" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_sax_handler">
    <description><![CDATA[  Set SAX handlers on the resource handle given by   xh . SAX handlers should be a two dimensional array  with the format (all top level elements are optional):    ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="XSLT_1" />
      <property kind="parameter" name="handlers" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_sax_handlers">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// From ohlesbeauxjours at yahoo dot fr
// Here's a simple example that applies strtoupper() on 
// the content of every <auteur> tag and then displays the 
// resulting XML tree:

$xml='<?xml version="1.0"?>
<books>
 <book>
  <title>Mme Bovary</title>
  <author>Gustave Flaubert</author>
 </book>
 <book>
  <title>Mrs Dalloway</title>
  <author>Virginia Woolf</author>
 </book>
</books>';

$xsl='<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="html" encoding="ISO-8859-1" indent="no" omit-xml-declaration="yes"/>
<xsl:template match="/">
 <xsl:for-each select="books/book">
  <livre>
   <auteur><xsl:value-of select="author/text()"/></auteur>
  </livre>
 </xsl:for-each>
</xsl:template>
</xsl:stylesheet>';

// Handlers :
function start_document() 
{
  // start reading the document
}

function end_document() 
{
  // end reading the document
}

function start_element($parser, $name, $attributes) 
{
  global $result,$tag;
  $result .= "<". $name . ">";
  $tag = $name;
}

function end_element($parser, $name) 
{
  global $result;
  $result .= "</" . $name . ">";
}

function characters($parser, $data) 
{
  global $result,$tag;
  if ($tag == "auteur" ) {
    $data = strtoupper($data);
  }
  $result .= $data;
}

// Transformation :
$xh = xslt_create();
$handlers = array("document" => array("start_document","end_document"),
   "element" => array("start_element","end_element"),
   "character" => "characters");

xslt_set_sax_handlers($xh, $handlers);
xslt_process($xh, 'arg:/_xml', 'arg:/_xsl', NULL, array("/_xml"=>$xml, "/_xsl"=>$xsl));
xslt_free($xh);
?>

     

<?php
// This is the object oriented version of the previous example
class data_sax_handler {

  var $buffer, $tag, $attrs;

  var $_xh;

  function data_sax_handler($xml, $xsl)
  {
      // our xslt resource
      $this->_xh = xslt_create();

      xslt_set_object($this->_xs, $this);

      // configure sax handlers
      $handlers = array(
        "document" => array('start_document', 'end_document'),
        "element" => array('start_element', 'end_element'),
        "character" => 'characters'
      );

      xslt_set_sax_handlers($this->_xh, $handlers);
    
      xslt_process($this->_xh, 'arg:/_xml', 'arg:/_xsl', NULL, array("/_xml"=>$xml, "/_xsl"=>$xsl));
      xslt_free($this->_xh);


  }

  function start_document() 
  {
        // start reading the document
  }

  function end_document() {
        // complete reading the document
  }

  function start_element($parser, $name, $attributes) {
        $this->tag = $name;
        $this->buffer .= "<" . $name . ">";
        $this->attrs = $attributes;
  }

  function end_element($parser, $name)
  {
        $this->tag = '';
        $this->buffer .= "</" . $name . ">";
  }

  function characters($parser, $data)
  {
    if ($this->tag == 'auteur') {
          $data = strtoupper($data);
    }
    $this->buffer .= $data;
  }
  
  function get_buffer() {
    return $this->buffer;
  }

}

$exec = new data_sax_handler($xml, $xsl);

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="XSLT_2" />
      <property ref="XSLT_10" />
      <property ref="XSLT_2" />
      <property ref="XSLT_2" />
      <property ref="XSLT_2" />
      <property ref="CCVS_7" />
      <property ref="Hyperwave_4" />
      <property ref="XSLT_2" />
      <property ref="CCVS_7" />
      <property ref="XSLT_2" />
      <property ref="DOM_25" />
      <property ref="DOM XML_1" />
      <property ref="XSLT_2" />
      <property ref="DOM_25" />
      <property ref="XSLT_2" />
      <property ref="Multibyte String_17" />
      <property ref="XSLT_2" />
      <property ref="DOM_11" />
      <property ref="Multibyte String_17" />
      <property ref="XSLT_2" />
      <property ref="Multibyte String_17" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_scheme_handler">
    <description><![CDATA[  Set Scheme handlers on the resource handle given by   xh . Scheme handlers should be an array with the  format (all elements are optional):    ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="XSLT_1" />
      <property ref="XSLT_10" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_set_scheme_handlers">
    <properties>
      <property ref="ret_void" />
      <property ref="XSLT_2" />
      <property ref="XSLT_10" />
    </properties>
    
  </element>
  <element kind="function" name="xslt_setopt">
    <description><![CDATA[   xslt_setopt sets the options specified by   newmask on the given processor .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$xh = xslt_create();

// Tell Sablotron to process public entities
xslt_setopt($xh, XSLT_SABOPT_PARSE_PUBLIC_ENTITIES);

// Let's also ask him to suppress whitespace stripping
xslt_setopt($xh, xslt_getopt($xh) | XSLT_SABOPT_DISABLE_STRIPPING);

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="XSLT_2" />
      <property ref="Ncurses_31" />
    </properties>
    
  </element>
</group>
<group name="YAZ">
  <description><![CDATA[YAZ Functions]]></description>
  <element kind="function" name="yaz_addinfo">
    <description><![CDATA[  Returns additional error message for server (last request), identified by  parameter id . An empty string is returned if the  last operation was successful or if no additional information was provided  by the server.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ODBC_24" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_ccl_conf">
    <description><![CDATA[  This function configures the CCL query parser for a server  with definitions of access points (CCL qualifiers) and their  mapping to RPN. To map a specific CCL query to RPN afterwards  call the yaz_ccl_parse function.  Each index of the array config is the  name of a CCL field and the corresponding value holds a string  that specifies a mapping to RPN.  The mapping is a sequence of attribute-type, attribute-value  pairs. Attribute-type and attribute-value is separated by an equal  sign ( ). Each pair is separated by white space.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fields["ti"] = "1=4";
$fields["au"] = "1=1";
$fields["isbn"] = "1=7";
yaz_ccl_conf($id, $fields);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
      <property kind="parameter" name="config" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_ccl_parse">
    <description><![CDATA[  This function invokes a CCL parser. It converts a given  CCL FIND query to an RPN query which may be passed to the   yaz_search function to perform a search.  To define a set of valid CCL fields call   yaz_ccl_conf prior to this function.  If the supplied query was successfully  converted to RPN, this function returns , and the index   of the supplied array   result holds a valid RPN query.  If the query could not be converted (because of invalid syntax,  unknown field, etc.) this function returns and three  indexes are set in the resulting array to indicate the cause  of failure: CCL error code (integer),   CCL error string, and   approximate position in query of failure  (integer is character position).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
yaz_ccl_conf($id, $fields);  // see example for yaz_ccl_conf
if (!yaz_ccl_parse($id, $ccl, &$cclresult)) {
    echo 'Error: ' . $cclresult["errorstring"];
} else {
    $rpn = $cclresult["rpn"];
    yaz_search($id, "rpn", $rpn);
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ODBC_24" />
      <property ref="Cyrus IMAP_12" />
      <property ref="DB++_12" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_close">
    <description><![CDATA[  Closes the connection given by parameter id .  The id is a connection resource as returned  by a previous call to yaz_connect .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ODBC_24" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_connect">
    <description><![CDATA[  This function returns a connection resource on success, zero on  failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="zurl" type="string" required="1" />
      <property kind="parameter" name="options" type="mixed"  />
    </properties>
    
  </element>
  <element kind="function" name="yaz_database">
    <description><![CDATA[  This function specifies one or more databases to be used in search,  retrieval, etc. - overriding databases specified in call to   yaz_connect . Multiple databases are  separated by a plus sign .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ODBC_24" />
      <property kind="parameter" name="databases" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_element">
    <description><![CDATA[  This function sets the element set name for retrieval.  Call this function before yaz_search or   yaz_present  to specify the element set name for records to be retrieved.  Most servers support (for full records) and   (for brief records).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ODBC_24" />
      <property kind="parameter" name="elementset" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_errno">
    <description><![CDATA[  Returns an errornumber for the server (last request) identified by   id . The error code is either a Z39.50 diagnostic  code (usually a Bib-1 diagnostic) or a client side error code which is  generated by PHP/YAZ itself, such as "Connect failed", "Init Rejected", etc.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_error">
    <description><![CDATA[  Returns an error text message for server (last request), identified by  parameter id . An empty string is returned if the  last operation was successful.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ODBC_24" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_es_result">
    <properties>
      <property ref="ret_array" />
      <property ref="ODBC_24" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_get_option">
    <description><![CDATA[  Returns the value of the option specified with name .  If an option is not set, an empty string is returned.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ODBC_24" />
      <property ref="CCVS_7" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_hits">
    <description><![CDATA[   yaz_hits returns the number of hits for the last  search.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_itemorder">
    <description><![CDATA[  This function prepares for an Extended Services request using the  Profile for the Use of Z39.50 Item Order Extended Service to  Transport ILL (Profile/1). See    and the   .  The args parameter must be a hash array with  information about the Item Order request to be sent. The key of the hash is  the name of the corresponding ASN.1 tag path. For example, the ISBN below  the Item-ID has the key item-id,ISBN.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
      <property ref="Strings_46" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_present">
    <description><![CDATA[  This function prepares for retrieval of records after  a successful search. The yaz_range should  be called prior to this function to specify the range of  records to be retrieved.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ODBC_24" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_range">
    <description><![CDATA[  This function should be called before either   yaz_search or yaz_present  to specify a range of records to be retrieved.  The parameter start specifies the position of the  first record to be retrieved and parameter number is  the number of records. Records in a result set are numbered 1, 2, ... $hits  where $hits is the count returned by yaz_hits .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ODBC_24" />
      <property ref="GMP_17" />
      <property ref="Math_8" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_record">
    <description><![CDATA[  Returns the record at position pos or an empty  string if no record exists at the given position.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ODBC_24" />
      <property ref="Direct IO_6" />
      <property ref="CCVS_5" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_scan">
    <description><![CDATA[  This function prepares for a Z39.50 Scan Request, where parameter   id specifies connection. Starting term  point for the scan is given by startterm .  The form in which the starting term is specified is given by parameter   type . Currently only type  is supported. The optional parameter flags  specifies additional information to control the behaviour of the  scan request. Three indexes are currently read from the flags:   (number of terms requested),   (preferred position of term) and   (preferred step size).  To actually transfer the Scan Request to the server and receive the  Scan Response, yaz_wait must be called. Upon  completion of yaz_wait call   yaz_error and yaz_scan_result to  handle the response.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function scan_titles($id, $startterm) 
{
  yaz_scan($id, "rpn", "@attr 1=4 " . $startterm);
  yaz_wait();
  $errno = yaz_errno($id);
  if ($errno == 0) {
    $ar = yaz_scan_result($id, &$options);
    echo 'Scan ok; ';
    while (list($key, $val) = each($options)) {
      echo "$key = $val &nbsp;";
    }
    echo '<br /><table>';
    while (list($key, list($k, $term, $tcount)) = each($ar)) {
      if (empty($k)) continue;
      echo "<tr><td>$term</td><td>$tcount</td></tr>";
    }
    echo '</table>';
  } else {
    echo "Scan failed. Error: " . yaz_error($id) . "<br />";
  }
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
      <property ref="CCVS_5" />
      <property kind="parameter" name="startterm" type="string" required="1" />
      <property kind="parameter" name="flags" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="yaz_scan_result">
    <description><![CDATA[   yaz_scan_result returns terms and associated  information as received from the server in the last performed   yaz_scan .  This function returns an array (0..n-1) where n is the number  of terms returned. Each value is a pair where the first item is the  term, and the second item is the result-count.  If the optional parameter result is given it will be  modified to hold additional information taken from the Scan Response:   (number of entries returned),   (Step-size),   (position of term),   (Scan Status).  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="ODBC_24" />
      <property ref="Multibyte String_19" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_schema">
    <description><![CDATA[  The schema must be specified as an OID (Object Identifier) in a  raw dot-notation (like ) or  as one of the known registered schemas:   , ,   , ...  This function should be called before   yaz_search or yaz_present .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
      <property ref="SESAM_3" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_search">
    <description><![CDATA[   yaz_search prepares for a search on the  connection given by parameter id .  The parameter type represents the query type - only   is supported now in which case the  third argument specifies a Type-1 query in prefix query notation.  Like yaz_connect this  function is non-blocking and only prepares for a search to be  executed later when yaz_wait is called.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
      <property ref="CCVS_5" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_set_option">
    <description><![CDATA[  Sets option name to value .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="ODBC_24" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
      <property ref="ODBC_24" />
      <property ref="Direct IO_8" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_sort">
    <description><![CDATA[  This function sets sorting criteria and enables Z39.50 Sort.  Call this function   yaz_search .  Using this function alone does not have any effect. When used in conjunction  with yaz_search , a Z39.50 Sort will be sent after a  search response has been received and before any records are retrieved with  Z39.50 Present ( yaz_present . The parameter   criteria takes the form  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
      <property ref="IMAP_35" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_syntax">
    <description><![CDATA[  The syntax must be specified as an OID (Object Identifier) in a  raw dot-notation (like ) or  as one of the known registered record syntaxes (sutrs, usmarc, grs1,  xml, etc.). This function should be called before   yaz_search or yaz_present .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="ODBC_24" />
      <property kind="parameter" name="syntax" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="yaz_wait">
    <description><![CDATA[  This function carries out networked (blocked) activity for  outstanding requests which have been prepared by the functions   yaz_connect ,   yaz_search , yaz_present ,   yaz_scan and yaz_itemorder .   yaz_wait returns when all servers have either  completed all requests or aborted (in case of errors).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="SOAP_2" />
    </properties>
    
  </element>
</group>
<group name="YP/NIS">
  <description><![CDATA[YP/NIS Functions]]></description>
  <element kind="function" name="yp_all">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="domain" type="string" required="1" />
      <property kind="parameter" name="map" type="string" required="1" />
      <property kind="parameter" name="callback" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="yp_cat">
    <description><![CDATA[   yp_cat returns all map entries as an array with the  maps key values as array indices and the maps entries as array data.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="YP/NIS_1" />
      <property ref="YP/NIS_2" />
    </properties>
    
  </element>
  <element kind="function" name="yp_err_string">
    <description><![CDATA[   yp_err_string returns the error message  associated with the given error code.  Useful to indicate what  exactly went wrong.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    echo "Error: " . yp_err_string(yp_errno());
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="errorcode" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="yp_errno">
    <description><![CDATA[    yp_errno returns the error code of the  previous operation.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="yp_first">
    <description><![CDATA[   yp_first returns the first key-value  pair from the named map in the named domain, otherwise .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$entry = yp_first($domain, "passwd.byname");

$key = key($entry);
$value = $entry[$key];

echo "First entry in this map has key " . $key . " and value " . $value;
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="YP/NIS_1" />
      <property ref="YP/NIS_2" />
    </properties>
    
  </element>
  <element kind="function" name="yp_get_default_domain">
    <description><![CDATA[   yp_get_default_domain returns the default  domain of the node or . Can be used as the domain parameter  for successive NIS calls.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$domain = yp_get_default_domain();
echo "Default NIS domain is: " . $domain;
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="yp_master">
    <description><![CDATA[   yp_master returns the machine name of  the master NIS server for a map.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$number = yp_master($domain, $mapname);
echo "Master for this map is: " . $master;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property ref="YP/NIS_2" />
    </properties>
    
  </element>
  <element kind="function" name="yp_match">
    <description><![CDATA[   yp_match returns the value associated with  the passed key out of the specified map or . This key must  be exact.]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$entry = yp_match($domain, "passwd.byname", "joe");
echo "Matched entry is: " . $entry;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property ref="YP/NIS_2" />
      <property ref="DB++_11" />
    </properties>
    
  </element>
  <element kind="function" name="yp_next">
    <description><![CDATA[   yp_next returns the next key-value pair in  the named map after the specified key or .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$entry = yp_next($domain, "passwd.byname", "joe");

if (!$entry) {
    echo "No more entries found\n";
    echo "<!--" . yp_errno() . ": " . yp_err_string() . "-->";
}

$key = key($entry);

echo "The next entry after joe has key " . $key 
      . " and value " . $entry[$key];
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="YP/NIS_1" />
      <property ref="YP/NIS_2" />
      <property ref="DB++_11" />
    </properties>
    
  </element>
  <element kind="function" name="yp_order">
    <description><![CDATA[   yp_order returns the order number for a map  or .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $number = yp_order($domain, $mapname);
    echo "Order number for this map is: " . $number;
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="YP/NIS_1" />
      <property ref="YP/NIS_2" />
    </properties>
    
  </element>
</group>
<group name="Zip">
  <description><![CDATA[Zip File Functions (Read Only Access)]]></description>
  <element kind="function" name="zip_close">
    <description><![CDATA[  Closes the given ZIP file archive.  ]]></description>
    <properties>
      <property kind="parameter" name="zip" type="resource" required="1" >
      <description>  A ZIP file previously opened with .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="zip_entry_close">
    <description><![CDATA[  Closes the specified directory entry.  ]]></description>
    <properties>
      <property kind="parameter" name="zip_entry" type="resource" required="1" >
      <description>  A directory entry previously opened .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="zip_entry_compressedsize">
    <description><![CDATA[  Returns the compressed size of the specified directory entry.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Zip_2" />
    </properties>
    
  </element>
  <element kind="function" name="zip_entry_compressionmethod">
    <description><![CDATA[  Returns the compression method of the directory entry specified  by zip_entry .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Zip_2" />
    </properties>
    
  </element>
  <element kind="function" name="zip_entry_filesize">
    <description><![CDATA[  Returns the actual size of the specified directory entry.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Zip_2" />
    </properties>
    
  </element>
  <element kind="function" name="zip_entry_name">
    <description><![CDATA[  Returns the name of the specified directory entry.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Zip_2" />
    </properties>
    
  </element>
  <element kind="function" name="zip_entry_open">
    <description><![CDATA[  Opens a directory entry in a zip file for reading.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Zip_1" />
      <property ref="Zip_2" />
      <property ref="PHP Options/Info_10" />
    </properties>
    
  </element>
  <element kind="function" name="zip_entry_read">
    <description><![CDATA[  Reads from an open directory entry.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Zip_2" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="zip_open">
    <description><![CDATA[  Opens a new zip archive for reading.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="zip_read">
    <description><![CDATA[  Reads the next entry in a zip file archive.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Zip_1" />
    </properties>
    
  </element>
</group>
<group name="Zlib">
  <description><![CDATA[Zlib Compression Functions]]></description>
  <element kind="function" name="gzclose">
    <description><![CDATA[  Closes the given gz-file pointer.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="zp" type="resource" required="1" >
      <description>  The gz-file pointer. It must be valid, and must point to a file  successfully opened by .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="gzcompress">
    <description><![CDATA[  This function compress the given string using the  data format.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
      <property ref="Errors and Logging_5" />
    </properties>
    
  </element>
  <element kind="function" name="gzdeflate">
    <description><![CDATA[  This function compress the given string using the  data format.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
      <property ref="Errors and Logging_5" />
    </properties>
    
  </element>
  <element kind="function" name="gzencode">
    <description><![CDATA[   This function returns a compressed version of the input   data compatible with the output of the   program.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$data = implode("", file("bigfile.txt"));
$gzdata = gzencode($data, 9);
$fp = fopen("bigfile.txt.gz", "w");
fwrite($fp, $gzdata);
fclose($fp);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
      <property ref="Errors and Logging_5" />
      <property kind="parameter" name="encoding_mode" type="int"  >
      <description>  The encoding mode. Can be (the default)  or .    If you use , you get a standard zlib  deflated string (inclusive zlib headers) after the gzip file header but  without the trailing crc32 checksum.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="gzeof">
    <description><![CDATA[  Tests the given GZ file pointer for EOF (end-of-file).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Zlib_1" />
    </properties>
    
  </element>
  <element kind="function" name="gzfile">
    <description><![CDATA[   This function is identical to readgzfile , except that  it returns the file in an array.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property ref="Filesystem_8" />
    </properties>
    
  </element>
  <element kind="function" name="gzgetc">
    <description><![CDATA[  Returns a string containing a single (uncompressed) character  read from the given gz-file pointer.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Zlib_1" />
    </properties>
    
  </element>
  <element kind="function" name="gzgets">
    <description><![CDATA[  Gets a (uncompressed) string of up to length - 1 bytes read from the given  file pointer. Reading ends when length - 1 bytes have been read, on a  newline, or on EOF (whichever comes first).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Zlib_1" />
      <property ref="Filesystem_19" />
    </properties>
    
  </element>
  <element kind="function" name="gzgetss">
    <description><![CDATA[  Identical to gzgets , except that   gzgetss attempts to strip any HTML and PHP  tags from the text it reads.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Zlib_1" />
      <property ref="Filesystem_19" />
      <property ref="Filesystem_7" />
    </properties>
    
  </element>
  <element kind="function" name="gzinflate">
    <description><![CDATA[   This function inflate a deflated string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="gzopen">
    <description><![CDATA[  Opens a gzip (.gz) file for reading or writing.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = gzopen("/tmp/file.gz", "r");
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
      <property ref="Bzip2_6" />
      <property ref="Filesystem_8" />
    </properties>
    
  </element>
  <element kind="function" name="gzpassthru">
    <description><![CDATA[  Reads to EOF on the given gz-file pointer from the current position and  writes the (uncompressed) results to standard output.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fp = gzopen('file.gz', 'r');
gzpassthru($fp);
gzclose($fp);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Zlib_1" />
    </properties>
    
  </element>
  <element kind="function" name="gzread">
    <description><![CDATA[   gzread reads up to length bytes  from the given gz-file pointer. Reading stops when   length (uncompressed) bytes have been read  or EOF is reached, whichever comes first.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// get contents of a gz-file into a string
$filename = "/usr/local/something.txt.gz";
$zd = gzopen($filename, "r");
$contents = gzread($zd, 10000);
gzclose($zd);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Zlib_1" />
      <property ref="Filesystem_19" />
    </properties>
    
  </element>
  <element kind="function" name="gzrewind">
    <description><![CDATA[   Sets the file position indicator of the given gz-file pointer to the  beginning of the file stream.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Zlib_1" />
    </properties>
    
  </element>
  <element kind="function" name="gzseek">
    <description><![CDATA[  Sets the file position indicator for the given file pointer to the  given offset byte into the file stream. Equivalent to calling (in C)   .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Zlib_1" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="gztell">
    <description><![CDATA[  Gets the position of the given file pointer; i.e., its offset into the  file stream.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Zlib_1" />
    </properties>
    
  </element>
  <element kind="function" name="gzuncompress">
    <description><![CDATA[   This function uncompress a compressed string.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="gzwrite">
    <description><![CDATA[   gzwrite writes the contents of   string to the given gz-file.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Zlib_1" />
      <property ref="Filesystem_16" />
      <property ref="Arrays_36" />
    </properties>
    
  </element>
  <element kind="function" name="readgzfile">
    <description><![CDATA[   Reads a file, decompresses it and writes it to standard output.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Apache_3" />
      <property ref="Filesystem_8" />
    </properties>
    
  </element>
  <element kind="function" name="zlib_get_coding_type">
    <description><![CDATA[  Returns the coding type used for output compression.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
</group>
<group name="bcompiler">
  <description><![CDATA[PHP bytecode Compiler]]></description>
  <element kind="function" name="bcompiler_load">
    <description><![CDATA[  Please use include or require statements to parse bytecodes, it's more  portable and convenient way than using this function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

bcompiler_load("/tmp/example");

print_r(get_defined_classes());

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_load_exe">
    <description><![CDATA[  Reads data from a bcompiler exe file and creates classes from the bytecodes  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

bcompiler_load_exe("/tmp/example.exe");
print_r(get_defined_classes());

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_parse_class">
    <description><![CDATA[  This function has been removed from bcompiler and is no  longer available as of bcompiler 0.5.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

function readByteCodes($data) {
  print_r($data);
}

bcompiler_parse_class("DB","readByteCodes");

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="class" type="string" required="1" />
      <property ref="YP/NIS_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_read">
    <description><![CDATA[  Please use include or require statements to parse  bytecodes, it's more portable and convenient way than using this function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fh = fopen("/tmp/example","r");
bcompiler_read($fh);
fclose($fh);
print_r(get_defined_classes());

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="filehandle" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_class">
    <description><![CDATA[  This reads the bytecodes from PHP for an existing class, and writes them  to the open file handle, It does not perform dependency checking, so make  sure you write the classes in an order that will not result in an  'undefined class' occurring when you load it.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fh = fopen("/tmp/example","w");
bcompiler_write_header($fh);
bcompiler_write_class($fh,"DB");
// you must write DB_common before DB_mysql, as DB_mysql extends DB_common.
bcompiler_write_class($fh,"DB_common");
bcompiler_write_class($fh,"DB_mysql");
bcompiler_write_footer($fh);
fclose($fh);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
      <property kind="parameter" name="className" type="string" required="1" />
      <property kind="parameter" name="extends" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_constant">
    <description><![CDATA[  This function reads the bytecodes from PHP for an existing constant, and  writes them to the open file handle.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
define("MODULE_MAX", 30);

$fh = fopen("/tmp/example","w");
bcompiler_write_header($fh);
bcompiler_write_constant($fh,"MODULE_MAX");
bcompiler_write_footer($fh);
fclose($fh);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
      <property kind="parameter" name="constantName" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_exe_footer">
    <description><![CDATA[  An EXE (or self executable) file consists of 3 parts,  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* creating the output file (example.exe) */
$fh = fopen("example.exe", "w");
/* 1) writing a stub (phpe.exe) */
$size = filesize("phpe.exe");
$fr = fopen("phpe.exe", "r");
fwrite($fh, fread($fr, $size), $size);
$startpos = ftell($fh);
/* 2) writing bytecodes */
bcompiler_write_header($fh);
bcompiler_write_class($fh, "myclass");
bcompiler_write_function($fh, "main");
bcompiler_write_footer($fh);
/* 3) writing EXE footer */
bcompiler_write_exe_footer($fh, $startpos);
/* closing the output file */
fclose($fh);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
      <property kind="parameter" name="startpos" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_file">
    <description><![CDATA[  This function complies specified source file into bytecodes, and writes  them to the open file handle.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fh = fopen("example.phb", "w");
bcompiler_write_header($fh);
bcompiler_write_file($fh, "example.php");
bcompiler_write_footer($fh);
fclose($fh);
/* the following should be equivalent:
include "example.php";
   and
include "example.phb";
*/
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_footer">
    <description><![CDATA[  Writes the a single character \x00 to indicate End of compiled data  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fh = fopen("/tmp/example","w");
bcompiler_write_header($fh);
bcompiler_write_class($fh,"DB");
bcompiler_write_class($fh,"DB_common");
bcompiler_write_footer($fh);
fclose($fh);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_function">
    <description><![CDATA[  This reads the bytecodes from PHP for an existing function, and writes  them to the open file handle. Order is not important, (eg. if function b  uses function a, and you compile it like the example below, it will  work perfectly OK)  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fh = fopen("/tmp/example","w");
bcompiler_write_header($fh);
bcompiler_write_function($fh,"my_function_a");
bcompiler_write_function($fh,"my_function_b");
bcompiler_write_footer($fh);
fclose($fh);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
      <property kind="parameter" name="functionName" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_functions_from_file">
    <description><![CDATA[  This function searches for all functions declared in the given file, and  writes their correspondent bytecodes to the open file handle. Always  remember to include/require the file you intend to compile.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
require('module.php');

$fh = fopen("/tmp/example","w");
bcompiler_write_header($fh);
bcompiler_write_functions_from_file($fh,'module.php');
bcompiler_write_footer($fh);
fclose($fh);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
      <property kind="parameter" name="fileName" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bcompiler_write_header">
    <description><![CDATA[  Writes the header part of a bcompiler file.  Optional second parameter can be used to write bytecode in a previously  used format, so that you can use it with older versions of bcompiler.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$fh = fopen("/tmp/example","w");
bcompiler_write_header($fh);
bcompiler_write_class($fh,"DB");
bcompiler_write_footer($fh);
fclose($fh);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="bcompiler_2" />
      <property kind="parameter" name="write_ver" type="string"  />
    </properties>
    
  </element>
</group>
<group name="ctype">
  <description><![CDATA[Character Type Functions]]></description>
  <element kind="function" name="ctype_alnum">
    <description><![CDATA[  Returns if every character in text is either  a letter or a digit, otherwise. In the standard   locale letters are just and the function is  equivalent to .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('AbCd1zyZ9', 'foo!#$bar');
foreach ($strings as $testcase) {
    if (ctype_alnum($testcase)) {
        echo "The string $testcase consists of all letters or digits.\n";
    } else {
        echo "The string $testcase does not consist of all letters or digits.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_alpha">
    <description><![CDATA[  Returns if every character in text is  a letter from the current locale, otherwise.  In the standard locale letters are just   and ctype_alpha is  equivalent to  if $text is just a single character, but other languages have letters that  are considered neither upper nor lower case.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('KjgWZC', 'arf12');
foreach ($strings as $testcase) {
    if (ctype_alpha($testcase)) {
        echo "The string $testcase consists of all letters.\n";
    } else {
        echo "The string $testcase does not consist of all letters.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_cntrl">
    <description><![CDATA[  Returns if every character in text has  a special control function, otherwise. Control characters are  e.g. line feed, tab, esc.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('string1' => "\n\r\t", 'string2' => 'arf12');
foreach ($strings as $name => $testcase) {
    if (ctype_cntrl($testcase)) {
        echo "The string '$name' consists of all control characters.\n";
    } else {
        echo "The string '$name' does not consist of all control characters.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_digit">
    <description><![CDATA[  Returns if every character in text is  a decimal digit, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('1820.20', '10002', 'wsl!12');
foreach ($strings as $testcase) {
    if (ctype_digit($testcase)) {
        echo "The string $testcase consists of all digits.\n";
    } else {
        echo "The string $testcase does not consist of all digits.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_graph">
    <description><![CDATA[  Returns if every character in text is  printable and actually creates visible output (no white space),  otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('string1' => "asdf\n\r\t", 'string2' => 'arf12', 'string3' => 'LKA#@%.54');
foreach ($strings as $name => $testcase) {
    if (ctype_graph($testcase)) {
        echo "The string '$name' consists of all (visibly) printable characters.\n";
    } else {
        echo "The string '$name' does not consist of all (visibly) printable characters.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_lower">
    <description><![CDATA[  Returns if every character in text is  a lowercase letter in the current locale.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('aac123', 'qiutoas', 'QASsdks');
foreach ($strings as $testcase) {
    if (ctype_lower($testcase)) {
        echo "The string $testcase consists of all lowercase letters.\n";
    } else {
        echo "The string $testcase does not consist of all lowercase letters.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_print">
    <description><![CDATA[  Returns if every character in text   will actually create output (including blanks). Returns if   text contains control characters or characters  that do not have any output or control function at all.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('string1' => "asdf\n\r\t", 'string2' => 'arf12', 'string3' => 'LKA#@%.54');
foreach ($strings as $name => $testcase) {
    if (ctype_print($testcase)) {
        echo "The string '$name' consists of all printable characters.\n";
    } else {
        echo "The string '$name' does not consist of all printable characters.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_punct">
    <description><![CDATA[  Returns if every character in text   is printable, but neither letter, digit or blank, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('ABasdk!@!$#', '!@ # $', '*&$()');
foreach ($strings as $testcase) {
    if (ctype_punct($testcase)) {
        echo "The string $testcase consists of all punctuation.\n";
    } else {
        echo "The string $testcase does not consist of all punctuation.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_space">
    <description><![CDATA[  Returns if every character in text   creates some sort of white space, otherwise. Besides the  blank character this also includes tab, vertical tab, line feed,  carriage return and form feed characters.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('string1' => "\n\r\t", 'string2' => "\narf12", 'string3' => '\n\r\t');
foreach ($strings as $name => $testcase) {
    if (ctype_space($testcase)) {
        echo "The string '$name' consists of all whitespace characters.\n";
    } else {
        echo "The string '$name' does not consist of all whitespace characters.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_upper">
    <description><![CDATA[  Returns if every character in text is  an uppercase letter in the current locale.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('AKLWC139', 'LMNSDO', 'akwSKWsm');
foreach ($strings as $testcase) {
    if (ctype_upper($testcase)) {
        echo "The string $testcase consists of all uppercase letters.\n";
    } else {
        echo "The string $testcase does not consist of all uppercase letters.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="ctype_xdigit">
    <description><![CDATA[  Returns if every character in text is  a hexadecimal 'digit', that is a decimal digit or a character from   , otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$strings = array('AB10BC99', 'AR1012', 'ab12bc99');
foreach ($strings as $testcase) {
    if (ctype_xdigit($testcase)) {
        echo "The string $testcase consists of all hexadecimal digits.\n";
    } else {
        echo "The string $testcase does not consist of all hexadecimal digits.\n";
    }
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
</group>
<group name="dBase">
  <description><![CDATA[dBase Functions]]></description>
  <element kind="function" name="dbase_add_record">
    <description><![CDATA[  Adds the given data to the database.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open in read-write mode
$db = dbase_open('/tmp/test.dbf', 2);

if ($db) {
  dbase_add_record($db, array(
      date('Ymd'), 
      'Maxim Topolov', 
      '23', 
      'max@example.com',
      'T'));   
  dbase_close($db);
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="dbase_identifier" type="int" required="1" >
      <description>  The database link identifier, returned by  or .  </description>
      </property>
      <property kind="parameter" name="record" type="array" required="1" >
      <description>  An indexed array of data. The number of items must be equal to the number of  fields in the database, otherwise  will fail.    If you're using return value for this  parameter, remember to reset the key named .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="dbase_close">
    <description><![CDATA[  Closes the given database link identifier.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open in read-only mode
$db = dbase_open('/tmp/test.dbf', 0);

if ($db) {
  // read some data ..
  
  dbase_close($db);
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="dBase_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_create">
    <description><![CDATA[   dbase_create creates a dBase database with the given  definition.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// database "definition"
$def = array(
  array("date",     "D"),
  array("name",     "C",  50),
  array("age",      "N",   3, 0),
  array("email",    "C", 128),
  array("ismember", "L")
);

// creation
if (!dbase_create('/tmp/test.dbf', $def)) {
  echo "Error, can't create the database\n";
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
      <property kind="parameter" name="fields" type="array" required="1" >
      <description>  An array of arrays, each array describing the format of one field of the  database. Each field consists of a name, a character indicating the field  type, and optionally, a length, and a precision.    The fieldnames are limited in length and must not exceed 10 chars.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="dbase_delete_record">
    <description><![CDATA[  Marks the given record to be deleted from the database.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="dBase_1" />
      <property kind="parameter" name="record_number" type="int" required="1" >
      <description>  An integer which spans from 1 to the number of records in the database  (as returned by ).  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="dbase_get_header_info">
    <description><![CDATA[  Returns information on the column structure of the given database link  identifier.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Path to dbase file
$db_path = "/tmp/test.dbf";

// Open dbase file
$dbh = dbase_open($db_path, 0)
  or die("Error! Could not open dbase database file '$db_path'.");

// Get column information
$column_info = dbase_get_header_info($dbh);

// Display information
print_r($column_info);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="dBase_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_get_record">
    <description><![CDATA[  Gets a record from a database as an indexed array.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="dBase_1" />
      <property ref="dBase_4" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_get_record_with_names">
    <description><![CDATA[  Gets a record from a dBase database as an associative array.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// open in read-only mode
$db = dbase_open('/tmp/test.dbf', 0);

if ($db) {
  $record_numbers = dbase_numrecords($db);
  for ($i = 1; $i <= $record_numbers; $i++) {
      $row = dbase_get_record_with_names($db, $i);
      if ($row['ismember'] == 1) {
          echo "Member #$i: " . trim($row['name']) . "\n";
      }
  }
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="dBase_1" />
      <property ref="dBase_4" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_numfields">
    <description><![CDATA[  Gets the number of fields (columns) in the specified database.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$rec = dbase_get_record($db, $recno);
$nf  = dbase_numfields($db);
for ($i = 0; $i < $nf; $i++) {
  echo $rec[$i], "\n";
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="dBase_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_numrecords">
    <description><![CDATA[  Gets the number of records (rows) in the specified database.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open in read-only mode
$db = dbase_open('/tmp/test.dbf', 0);

if ($db) {
  $record_numbers = dbase_numrecords($db);
  for ($i = 1; $i <= $record_numbers; $i++) {
      // do something here, for each record
  }
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="dBase_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_open">
    <description><![CDATA[   dbase_open opens a dBase database with the given  access mode.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open in read-only mode
$db = dbase_open('/tmp/test.dbf', 0);

if ($db) {
  // read some data ..
  
  dbase_close($db);
}

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
      <property ref="Calendar_10" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_pack">
    <description><![CDATA[  Packs the specified database by permanently deleting all records marked  for deletion using dbase_delete_record .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open in read-write mode
$db = dbase_open('/tmp/test.dbf', 2);

if ($db) {
  $record_numbers = dbase_numrecords($db);
  for ($i = 1; $i <= $record_numbers; $i++) {
      dbase_delete_record($db, $i);
  }
  // expunge the database
  dbase_pack($db);
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="dBase_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbase_replace_record">
    <description><![CDATA[  Replaces the given record in the database with the given data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// open in read-write mode
$db = dbase_open('/tmp/test.dbf', 2);

if ($db) {
  // gets the old row
  $row = dbase_get_record_with_names($db, 1);
  
  // remove the 'deleted' entry
  unset($row['deleted']);
  
  // Update the date field with the current timestamp
  $row['date'] = date('Ymd');
  
  // Replace the record
  dbase_replace_record($db, $row, 1);
  dbase_close($db);
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="dBase_1" />
      <property ref="dBase_2" />
      <property ref="dBase_4" />
    </properties>
    
  </element>
</group>
<group name="dba">
  <description><![CDATA[Database (dbm-style) Abstraction Layer Functions]]></description>
  <element kind="function" name="dba_close">
    <description><![CDATA[   dba_close closes the established database and frees  all resources of the specified database handle.  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_delete">
    <description><![CDATA[   dba_delete deletes the specified entry from the database.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_exists">
    <description><![CDATA[   dba_exists checks whether the specified   key exists in the database.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_fetch">
    <description><![CDATA[   dba_fetch fetches the data specified by   key from the database specified with   handle .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DB++_11" />
      <property ref="FTP_8" />
      <property ref="DB++_11" />
      <property kind="parameter" name="skip" type="int" required="1" >
      <description>  The number of key-value pairs to ignore when using cdb databases.  This value is ignored for all other databases which do not support  multiple keys with the same name.  </description>
      </property>
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_firstkey">
    <description><![CDATA[   dba_firstkey returns the first key of the database  and resets the internal key pointer. This permits a linear search through  the whole database.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_handlers">
    <description><![CDATA[   dba_handlers list all the handlers supported by this  extension.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

echo "Available DBA handlers:\n";
foreach (dba_handlers(true) as $handler_name => $handler_version) {
  // clean the versions
  $handler_version = str_replace('$', '', $handler_version);
  echo " - $handler_name: $handler_version\n";
}

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="full_info" type="bool"  >
      <description>  Turns on/off full information display in the result. The default is   .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="dba_insert">
    <description><![CDATA[   dba_insert inserts the entry described with   key and value into the  database.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="Apache_6" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_key_split">
    <description><![CDATA[   dba_key_split splits a key (string representation)  into an array representation.  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Arrays_17" />
    </properties>
    
  </element>
  <element kind="function" name="dba_list">
    <description><![CDATA[   dba_list list all open database files.  ]]></description>
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="dba_nextkey">
    <description><![CDATA[   dba_nextkey returns the next key of the database  and advances the internal key pointer.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_open">
    <description><![CDATA[   dba_open establishes a database instance for   path with mode using   handler .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Directories_3" />
      <property ref="Bzip2_6" />
      <property kind="parameter" name="handler" type="string" required="1" >
      <description>  The name of the which  shall be used for accessing . It is passed  all optional parameters given to and  can act on behalf of them.  </description>
      </property>
      <property ref="Variables handling_4" />
    </properties>
    
  </element>
  <element kind="function" name="dba_optimize">
    <description><![CDATA[   dba_optimize optimizes the underlying database.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_popen">
    <description><![CDATA[   dba_popen establishes a persistent database instance  for path with mode using   handler .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Directories_3" />
      <property ref="Bzip2_6" />
      <property ref="dba_3" />
      <property ref="Variables handling_4" />
    </properties>
    
  </element>
  <element kind="function" name="dba_replace">
    <description><![CDATA[   dba_replace replaces or inserts the entry described  with key and value into the  database specified by handle .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_11" />
      <property ref="Apache_6" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
  <element kind="function" name="dba_sync">
    <description><![CDATA[   dba_sync synchronizes the database. This will probably  trigger a physical write to the disk, if supported.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FTP_8" />
    </properties>
    
  </element>
</group>
<group name="dbx">
  <description><![CDATA[dbx Functions]]></description>
  <element kind="function" name="dbx_close">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = dbx_connect(DBX_MYSQL, "localhost", "db", "username", "password")
    or die("Could not connect");

echo "Connected successfully";
dbx_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="link_identifier" type="object" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbx_compare">
    <description><![CDATA[   dbx_compare returns if the   is equal to   , and or   if the former is greater or is smaller than  the latter one, respectively, or vice versa if the   flag is set to .   dbx_compare is a helper function for   dbx_sort to ease the make and use of the custom  sorting function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function user_re_order($a, $b) 
{
    $rv = dbx_compare($a, $b, "parentid", DBX_CMP_DESC);
    if (!$rv) {
        $rv = dbx_compare($a, $b, "id", DBX_CMP_NUMBER);
    }
    return $rv;
}

$link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
    or die("Could not connect");

$result = dbx_query($link, "SELECT id, parentid, description FROM table ORDER BY id");
    // data in $result is now ordered by id

dbx_sort($result, "user_re_order");
    // date in $result is now ordered by parentid (descending), then by id

dbx_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="row_a" type="array" required="1" />
      <property kind="parameter" name="row_b" type="array" required="1" />
      <property kind="parameter" name="column_key" type="string" required="1" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="dbx_connect">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link = dbx_connect(DBX_ODBC, "", "db", "username", "password", DBX_PERSISTENT)
    or die("Could not connect");

echo "Connected successfully";
dbx_close($link);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property kind="parameter" name="module" type="mixed" required="1" />
      <property ref="FTP_4" />
      <property ref="Firebird/InterBase_17" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
      <property kind="parameter" name="persistent" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="dbx_error">
    <description><![CDATA[  Always refer to the module-specific documentation as well.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link   = dbx_connect(DBX_MYSQL, "localhost", "db", "username", "password")
    or die("Could not connect");

$result = dbx_query($link, "select id from non_existing_table");
if ($result == 0) {
    echo dbx_error($link);
}
dbx_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="dbx_1" />
    </properties>
    
  </element>
  <element kind="function" name="dbx_escape_string">
    <description><![CDATA[  See also dbx_query .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link   = dbx_connect(DBX_MYSQL, "localhost", "db", "username", "password")
    or die("Could not connect");

$text = dbx_escape_string($link, "It\'s quoted and backslashed (\\).");
$result = dbx_query($link, "insert into tbl (txt) values ('" . $text . "')");
if ($result == 0) {
    echo dbx_error($link);
}
dbx_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="dbx_1" />
      <property ref="ClibPDF_12" />
    </properties>
    
  </element>
  <element kind="function" name="dbx_fetch_row">
    <description><![CDATA[  The result_identifier parameter is the result  object returned by a call to dbx_query .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = dbx_query($link, 'SELECT id, parentid, description FROM table', DBX_RESULT_UNBUFFERED);

echo "<table>\n";
while ($row = dbx_fetch_row($result)) {
    echo "<tr>\n";
    foreach ($row as $field) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property kind="parameter" name="result_identifier" type="object" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dbx_query">
    <description><![CDATA[  The flags parameter is used to control the amount of  information that is returned. It may be any combination of the following  constants with the bitwise OR operator (|). The DBX_COLNAMES_* flags  override the dbx.colnames_case setting from .    Note that is always used, regardless  of the actual value of flags parameter. This means  that only the following combinations are effective:    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
    or die("Could not connect");

$result = dbx_query($link, 'SELECT id, parentid, description FROM table');

if (is_object($result) ) {
    // ... do some stuff here, see detailed examples below ...
    // first, print out field names and types 
    // then, draw a table filled with the returned field values
} else {
    exit("Query failed");
}

dbx_close($link);
?>

     

<?php
$result = dbx_query($link, 'SELECT id FROM table',
                     DBX_RESULT_INDEX | DBX_RESULT_INFO);

for ($i = 0; $i < $result->cols; $i++ ) {
    echo $result->info['name'][$i] . "\n";
    echo $result->info['type'][$i] . "\n";  
}
?>

         

<?php
$result = dbx_query($link, 'SELECT id, parentid, description FROM table');

echo "<table>\n";
foreach ($result->data as $row) {
    echo "<tr>\n";
    foreach ($row as $field) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";
?>

         

<?php

$result = dbx_query ($link, 'SELECT id, parentid, description FROM table', DBX_RESULT_UNBUFFERED);

echo "<table>\n";
while ($row = dbx_fetch_row($result)) {
    echo "<tr>\n";
    foreach ($row as $field) {
        echo "<td>$field</td>";
    }
    echo "</tr>\n";
}
echo "</table>\n";

?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="dbx_1" />
      <property ref="Oracle_5" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="dbx_sort">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
function user_re_order($a, $b) 
{
    $rv = dbx_compare($a, $b, "parentid", DBX_CMP_DESC);
    if (!$rv) {
        $rv = dbx_compare($a, $b, "id", DBX_CMP_NUMBER);
    }
    return $rv;
}

$link   = dbx_connect(DBX_ODBC, "", "db", "username", "password")
    or die("Could not connect");

$result = dbx_query($link, "SELECT id, parentid, description FROM tbl ORDER BY id");
    // data in $result is now ordered by id

dbx_sort($result, "user_re_order");
    // data in $result is now ordered by parentid (descending), then by id

dbx_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="result" type="object" required="1" />
      <property kind="parameter" name="user_compare_function" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="fam">
  <description><![CDATA[File Alteration Monitor Functions]]></description>
  <element kind="function" name="fam_cancel_monitor">
    <description><![CDATA[   fam_cancel_monitor terminates monitoring on  a resource previously requested using one of the   functions.  In addition an event occurs.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="fam" type="resource" required="1" />
      <property kind="parameter" name="fam_monitor" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="fam_close">
    <description><![CDATA[   fam_close closes a connection to the FAM service  previously opened using fam_open .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="fam_1" />
    </properties>
    
  </element>
  <element kind="function" name="fam_monitor_collection">
    <description><![CDATA[   fam_monitor_collection requests monitoring for a collection of  files within a directory. The actual files to be monitored are specified by a  directory path in dirname , the maximum search   depth starting from this directory and a shell pattern   mask restricting the file names to look for.     ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="fam_1" />
      <property ref="Filesystem_24" />
      <property ref="SWF_5" />
      <property ref="IRC Gateway_22" />
    </properties>
    
  </element>
  <element kind="function" name="fam_monitor_directory">
    <description><![CDATA[   fam_monitor_directory requests monitoring for a directory  and all contained files. A FAM event will be generated whenever the status  of the directory (i.e. the result of function stat on  that directory) or its content (i.e. the results of readdir )  change.    ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="fam_1" />
      <property ref="Filesystem_24" />
    </properties>
    
  </element>
  <element kind="function" name="fam_monitor_file">
    <description><![CDATA[   fam_monitor_file requests monitoring for a single  file. A FAM event will be generated whenever the file status  (i.e. the result of function stat on that file)  changes.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="fam_1" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="fam_next_event">
    <description><![CDATA[   fam_next_event returns the next pending FAM  event. The function will block until an event is available which can  be checked for using fam_pending .  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="fam_1" />
    </properties>
    
  </element>
  <element kind="function" name="fam_open">
    <description><![CDATA[   fam_open opens a connection to the FAM service  daemon. The optional parameter appname should  be set to a string identifying the application for logging reasons.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Sybase_1" />
    </properties>
    
  </element>
  <element kind="function" name="fam_pending">
    <description><![CDATA[   fam_pending returns if events are  available to be fetched using fam_next_event .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="fam_1" />
    </properties>
    
  </element>
  <element kind="function" name="fam_resume_monitor">
    <description><![CDATA[   fam_resume_monitor resumes monitoring  of a resource previously suspend using fam_suspend_monitor .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="fam_1" />
      <property ref="fam_2" />
    </properties>
    
  </element>
  <element kind="function" name="fam_suspend_monitor">
    <description><![CDATA[   fam_suspend_monitor temporarily suspend monitoring  of a resource previously requested using one of the   functions.  Monitoring can later be continued using fam_resume_monitor  without the need of requesting a complete new monitor.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="fam_1" />
      <property ref="fam_2" />
    </properties>
    
  </element>
</group>
<group name="filePro">
  <description><![CDATA[filePro Functions]]></description>
  <element kind="function" name="filepro">
    <description><![CDATA[  This reads and verifies the map file, storing the field count  and info.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="filepro_fieldcount">
    <description><![CDATA[  Returns the number of fields (columns) in the opened filePro  database.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="filepro_fieldname">
    <description><![CDATA[  Returns the name of the field corresponding  to field_number .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="filepro_fieldtype">
    <description><![CDATA[  Returns the edit type of the field corresponding to field_number .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="filepro_fieldwidth">
    <description><![CDATA[  Returns the width of the field corresponding to field_number .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="filepro_retrieve">
    <description><![CDATA[  Returns the data from the specified location in the database. The   row_number parameter must be between zero  and the total number of rows minus one  (0.. filepro_rowcount - 1). Likewise,   field_number accepts values between zero and  the total number of fields minus one  (0.. filepro_fieldcount - 1)  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FrontBase_10" />
      <property ref="Firebird/InterBase_33" />
    </properties>
    
  </element>
  <element kind="function" name="filepro_rowcount">
    <description><![CDATA[  Returns the number of rows in the opened filePro database.  ]]></description>
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
</group>
<group name="gettext">
  <description><![CDATA[Gettext]]></description>
  <element kind="function" name="bind_textdomain_codeset">
    <description><![CDATA[  With bind_textdomain_codeset , you can set in which  encoding will be messages from domain returned by   gettext and similar functions.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property kind="parameter" name="codeset" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="bindtextdomain">
    <description><![CDATA[  The bindtextdomain function sets the path  for a domain. It returns the full pathname for the domain currently being  set.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$domain = 'myapp';
echo bindtextdomain($domain, '/usr/share/myapp/locale'); 

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property ref="Directories_1" />
    </properties>
    
  </element>
  <element kind="function" name="dcgettext">
    <description><![CDATA[  This function allows you to override the current domain for a  single message lookup. It also allows you to specify a   category .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property ref="Errors and Logging_1" />
      <property kind="parameter" name="category" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="dcngettext">
    <description><![CDATA[  This function allows you to override the current domain for a  single plural message lookup. It also allows you to specify a   category .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property kind="parameter" name="msgid1" type="string" required="1" />
      <property kind="parameter" name="msgid2" type="string" required="1" />
      <property ref="Ncurses_2" />
      <property ref="gettext_2" />
    </properties>
    
  </element>
  <element kind="function" name="dgettext">
    <description><![CDATA[  The dgettext function allows you to override  the current domain for a single message lookup.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property ref="Errors and Logging_1" />
    </properties>
    
  </element>
  <element kind="function" name="dngettext">
    <description><![CDATA[  The dngettext function allows you to override  the current domain for a single plural message lookup.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="YP/NIS_1" />
      <property ref="gettext_3" />
      <property ref="gettext_4" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="gettext">
    <description><![CDATA[  This function returns a translated string if one is found in the  translation table, or the submitted message if not found. You may  use the underscore character '_' as an alias to this function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
// Set language to German
setlocale(LC_ALL, 'de_DE');

// Specify location of translation tables
bindtextdomain("myPHPApp", "./locale");

// Choose domain
textdomain("myPHPApp");

// Translation is looking for in ./locale/de_DE/LC_MESSAGES/myPHPApp.mo now

// Print a test message
echo gettext("Welcome to My PHP Application");

// Or use the alias _() for gettext()
echo _("Have a nice day");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Errors and Logging_1" />
    </properties>
    
  </element>
  <element kind="function" name="ngettext">
    <description><![CDATA[   ngettext returns correct plural form of message  identified by msgid1 and msgid2  for count n . Some languages have more than one form  for plural messages dependent on the count.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

setlocale(LC_ALL, 'cs_CZ');
printf(ngettext("%d window", "%d windows", 1), 1); // 1 okno
printf(ngettext("%d window", "%d windows", 2), 2); // 2 okna
printf(ngettext("%d window", "%d windows", 5), 5); // 5 oken

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="gettext_3" />
      <property ref="gettext_4" />
      <property ref="Ncurses_2" />
    </properties>
    
  </element>
  <element kind="function" name="textdomain">
    <description><![CDATA[  This function sets the domain to search within when calls are  made to gettext , usually the named after an  application.  The previous default domain is returned.  Call it with as parameter to get the current setting without  changing it.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="text_domain" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="iconv">
  <description><![CDATA[iconv Functions]]></description>
  <element kind="function" name="iconv">
    <description><![CDATA[  Performs a character set conversion on the string   str from in_charset  to out_charset . Returns the converted  string or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
echo iconv("ISO-8859-1", "UTF-8", "This is a test.");
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="in_charset" type="string" required="1" />
      <property kind="parameter" name="out_charset" type="string" required="1" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_get_encoding">
    <description><![CDATA[   iconv_get_encoding returns the current value  of the internal configuration variable if successful,  or on failure.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<pre>
<?php
iconv_set_encoding("internal_encoding", "UTF-8");
iconv_set_encoding("output_encoding", "ISO-8859-1");
var_dump(iconv_get_encoding('all'));
?>
</pre>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Lotus Notes_5" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_mime_decode">
    <description><![CDATA[  Returns a decoded field on success,  or if an error occurs during the decoding.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="encoded_header" type="string" required="1" />
      <property ref="Arrays_43" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_mime_decode_headers">
    <description><![CDATA[  Returns an associative array that holds a whole set of   header fields specified by   encoded_headers on success, or  if an error occurs during the decoding.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$headers_string = <<<EOF
Subject: =?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=
To: example@example.com
Date: Thu, 1 Jan 1970 00:00:00 +0000
Message-Id: <example@example.com>
Received: from localhost (localhost [127.0.0.1]) by localhost
    with SMTP id example for <example@example.com>
    Thu, 1 Jan 1970 00:00:00 +0000 (UTC)
    (envelope-from example-return-0000-example=example.com@example.com)
Received: (qmail 0 invoked by uid 65534); 1 Thu 2003 00:00:00 +0000

EOF;

$headers =  iconv_mime_decode_headers($headers_string, 0, "ISO-8859-1");
print_r($headers);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="encoded_headers" type="string" required="1" />
      <property ref="Arrays_43" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_mime_encode">
    <description><![CDATA[  Composes and returns a string that represents a valid  header field, which looks like the following:    In the above example, "Subject" is the field name and the portion that  begins with "=?ISO-8859-1?..." is the field value.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_21" />
      <property kind="parameter" name="field_value" type="string" required="1" />
      <property kind="parameter" name="preferences" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="iconv_set_encoding">
    <description><![CDATA[   iconv_set_encoding changes the value of the internal  configuration variable specified by type to   charset .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
iconv_set_encoding("internal_encoding", "UTF-8");
iconv_set_encoding("output_encoding", "ISO-8859-1");
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="CCVS_5" />
      <property kind="parameter" name="charset" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_strlen">
    <description><![CDATA[  Returns the character count of str .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DOM XML_14" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_strpos">
    <description><![CDATA[  Returns the numeric position of the first occurrence of   needle in haystack .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
      <property ref="Filesystem_10" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_strrpos">
    <description><![CDATA[  Returns the numeric position of the last occurrence of   needle in haystack .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="Multibyte String_23" />
      <property ref="Multibyte String_24" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="iconv_substr">
    <description><![CDATA[  Returns the portion of str specified by  the start and length  parameters.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="Arrays_35" />
      <property ref="Arrays_36" />
      <property ref="Firebird/InterBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="ob_iconv_handler">
    <description><![CDATA[  It converts the string encoded in   internal_encoding to   output_encoding .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ob_start("ob_iconv_handler"); // start output buffering
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Multibyte String_17" />
      <property ref="Misc._3" />
    </properties>
    
  </element>
</group>
<group name="id3">
  <description><![CDATA[ID3 Functions]]></description>
  <element kind="function" name="id3_get_frame_long_name">
    <description><![CDATA[   id3_get_frame_long_name returns the long name for an  ID3v2 frame.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$longName = id3_get_frame_long_name("TOLY");
echo $longName;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="frameId" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="id3_get_frame_short_name">
    <description><![CDATA[   id3_get_frame_short_name returns the short name for an  ID3v2 frame.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$shortName = id3_get_frame_short_name("TOLY");
echo $shortName;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="id3_1" />
    </properties>
    
  </element>
  <element kind="function" name="id3_get_genre_id">
    <description><![CDATA[   id3_get_genre_id returns the id for a genre. If the  specified genre is not available in the genre list, id3_get_genre_id  will return  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$id = id3_get_genre_id("Alternative");
echo $id;
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="genre" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="id3_get_genre_list">
    <description><![CDATA[   id3_get_genre_list returns an array containing all  possible genres that may be stored in an ID3 tag. This list has been created  by Eric Kemp and later extended by WinAmp.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$genres = id3_get_genre_list();
print_r($genres);
?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="id3_get_genre_name">
    <description><![CDATA[   id3_get_genre_name returns the name for a genre id.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$genre = id3_get_genre_name(20);
echo $genre;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="genre_id" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="id3_get_tag">
    <description><![CDATA[   id3_get_tag is used to get all information stored  in the id3 tag of the specified file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$tag = id3_get_tag( "path/to/example.mp3" );
print_r($tag);
?>

      

<?php
$tag = id3_get_tag( "path/to/example2.mp3", ID3_V2_3 );
print_r($tag);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property ref="CURL_8" />
    </properties>
    
  </element>
  <element kind="function" name="id3_get_version">
    <description><![CDATA[   id3_get_version retrieves the version(s) of the ID3 tag(s) in  the MP3 file. As a tag can contain ID3 v1.x and v2.x tags, the return value of this  function should be bitwise compared with the predefined constants ,   and .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$version = id3_get_version( "path/to/example.mp3" );
if ($version & ID3_V1_0) {
    echo "Contains a 1.x tag\n";
}
if ($version & ID3_V1_1) {
    echo "Contains a 1.1 tag\n";
}
if ($version & ID3_V2) {
    echo "Contains a 2.x tag\n";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="id3_remove_tag">
    <description><![CDATA[   id3_remove_tag is used to remove the information stored  of an ID3 tag. If no tag has been present, it will return and leave the file  as it was.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$result = id3_remove_tag( "path/to/example.mp3", ID3_V1_0 );
if ($result === true) {
    echo "Tag succesfully removed\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="CURL_8" />
    </properties>
    
  </element>
  <element kind="function" name="id3_set_tag">
    <description><![CDATA[   id3_set_tag is used to change the information stored  of an ID3 tag. If no tag has been present, it will be added to the file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$data = array(
              "title" => "Re:Start",
              "artist" => "Re:\Legion",
              "comment" => "A nice track"
             );
$result = id3_set_tag( "path/to/example.mp3", $data, ID3_V1_0 );
if ($result === true) {
    echo "Tag succesfully updated\n";
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property kind="parameter" name="tag" type="array" required="1" />
      <property ref="CURL_8" />
    </properties>
    
  </element>
</group>
<group name="libxml">
  <description><![CDATA[libxml Functions]]></description>
  <element kind="function" name="libxml_clear_errors">
    <description><![CDATA[   libxml_clear_errors clears the libxml error buffer.  ]]></description>
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="libxml_get_errors">
    <description><![CDATA[  Retrieve array of errors.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

libxml_use_internal_errors(true);

$xmlstr = <<< XML
<?xml version='1.0' standalone='yes'?>
<movies>
 <movie>
  <titles>PHP: Behind the Parser</title>
 </movie>
</movies>
XML;

$doc = simplexml_load_string($xmlstr);

if (!$doc) {
    $errors = libxml_get_errors();

    foreach ($errors as $error) {
        echo display_xml_error($error);
    }

    libxml_clear_errors();
}


function display_xml_error($error) {

    switch ($error->level) {
        case LIBXML_ERR_WARNING:
            $return = "Warning $error->code: ";
            break;
         case LIBXML_ERR_ERROR:
            $return = "Error $error->code: ";
            break;
        case LIBXML_ERR_FATAL:
            $return = "Fatal Error $error->code: ";
            break;
    }

    $return .= trim($error->message) .
               "\n  Line: $error->line" .
               "\n  Column: $error->column";

    if ($error->file) {
        $return .= "\n  File: $error->file";
    }

    return "$return\n";
}

?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="libxml_get_last_error">
    <description><![CDATA[  Retrieve last error from libxml.  ]]></description>
    <properties>
      <property kind="return" type="LibXMLError" />	
    </properties>
    
  </element>
  <element kind="function" name="libxml_set_streams_context">
    <description><![CDATA[  Sets the streams context for the next libxml document load or write.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$opts = array(
    'http' => array(
        'user_agent' => 'PHP libxml agent',
    )
);

$context = stream_context_create($opts);
libxml_set_streams_context($context);

// request a file through HTTP
$doc = DOMDocument::load('http://www.example.com/file.xml');

?>]]></description>
      </property>
      <property ref="ret_void" />
      <property kind="parameter" name="streams_context" type="resource" required="1" >
      <description>  The stream context resource (created with   )  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="libxml_use_internal_errors">
    <description><![CDATA[   libxml_use_internal_errors allows you to disable  standard libxml errors and enable user error handling.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

// enable user error handling
var_dump(libxml_use_internal_errors(true));

$doc = DOMDocument::load('file.xml');

if (!$doc) {
    $errors = libxml_get_errors();
    foreach ($errors as $error) {
        // handle errors here
    }

    libxml_clear_errors();
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="use_errors" type="bool"  >
      <description>  Whether to enable user error handling. Defaults to .  </description>
      </property>
    </properties>
    
  </element>
</group>
<group name="mSQL">
  <description><![CDATA[mSQL Functions]]></description>
  <element kind="function" name="msql_affected_rows">
    <description><![CDATA[  Returns number of affected ("touched") rows by a specific query  (i.e. the number of rows returned by a SELECT, the number of rows  modified by an update, or the number of rows removed by a  delete).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="query_identifier" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="msql_close">
    <description><![CDATA[   msql_close closes the link to a mSQL  database that's associated with the specified link identifier.  If the link identifier isn't specified, the last opened link is  assumed.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_connect">
    <description><![CDATA[   msql_connect establishes a connection to a  mSQL server.  The hostname parameter can also  include a port number. e.g. " hostname:port " .  If the hostname is not specified, the connection is established by the  means of a Unix domain socket, being then more efficient then a localhost  TCP socket connection.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="FrontBase_5" />
    </properties>
    
  </element>
  <element kind="function" name="msql_create_db">
    <description><![CDATA[   msql_create_db attempts to create a new database on the server  associated with the specified link_identifier .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_data_seek">
    <description><![CDATA[   msql_data_seek moves the internal row  pointer of the mSQL result associated with the specified query  identifier to point to the specified row number.  The next call  to msql_fetch_row would return that  row.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mSQL_1" />
      <property ref="FrontBase_10" />
    </properties>
    
  </element>
  <element kind="function" name="msql_db_query">
    <description><![CDATA[   Returns a positive mSQL query identifier to the query result, or   on error.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_drop_db">
    <properties>
      <property ref="ret_int" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_error">
    <description><![CDATA[   msql_error returns the last issued error by the mSQL  server or an empty string if no error was issued.  If no link is  explicitly passed, the last successful open link will be used to retrieve  the error message.  Note that only the last error message is accessible  with msql_error .  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="msql_fetch_array">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or if  there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$con = msql_connect();
if (!$con) {
    die('Server connection problem: ' . msql_error());
}

if (!msql_select_db('test', $con)) {
    die('Database connection problem: ' . msql_error());
}

$result = msql_query('SELECT id, name FROM people', $con);
if (!$result) {
    die('Query execution problem: ' . msql_error());
}

while ($row = msql_fetch_array($result, MSQL_ASSOC)) {
    echo $row['id'] . ': ' . $row['name'] . "\n";
}

msql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="mSQL_1" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="msql_fetch_field">
    <description><![CDATA[  Returns an object containing field information  ]]></description>
    <properties>
      <property ref="ret_object" />
      <property ref="mSQL_1" />
      <property ref="FrontBase_13" />
    </properties>
    
  </element>
  <element kind="function" name="msql_fetch_object">
    <description><![CDATA[  Returns an object with properties that correspond to the fetched  row, or if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$con = msql_connect();
if (!$con) {
    die('Server connection problem: ' . msql_error());
}

if (!msql_select_db('test', $con)) {
    die('Database connection problem: ' . msql_error());
}

$result = msql_query('SELECT id, name FROM people', $con);
if (!$result) {
    die('Query execution problem: ' . msql_error());
}

while ($row = msql_fetch_object($result, MSQL_ASSOC)) {
    echo $row->id . ': ' . $row->name . "\n";
}

msql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_object" />
      <property ref="mSQL_1" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="msql_fetch_row">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or if  there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$con = msql_connect();
if (!$con) {
    die('Server connection problem: ' . msql_error());
}

if (!msql_select_db('test', $con)) {
    die('Database connection problem: ' . msql_error());
}

$result = msql_query('SELECT id, name FROM people', $con);
if (!$result) {
    die('Query execution problem: ' . msql_error());
}

while ($row = msql_fetch_row($result)) {
    echo $row[0] . ': ' . $row[1] . "\n";
}

msql_free_result($result);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="mSQL_1" />
      <property ref="FrontBase_12" />
    </properties>
    
  </element>
  <element kind="function" name="msql_field_flags">
    <description><![CDATA[   msql_field_flags returns the field flags of  the specified field.  Currently this is either, "not ",  "primary key", a combination of the two or "" (an empty string).  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mSQL_1" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="msql_field_len">
    <description><![CDATA[   msql_field_len returns the length of the  specified field or on error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mSQL_1" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="msql_field_name">
    <description><![CDATA[   msql_field_name returns the name of the  specified field from the result resource   query_identifier .   will  return the name of the second field in the result set associated with  the result identifier.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mSQL_1" />
      <property ref="OCI8_15" />
    </properties>
    
  </element>
  <element kind="function" name="msql_field_seek">
    <description><![CDATA[  Seeks to the specified field offset.  If the next call to   msql_fetch_field won't include a field  offset, this field would be returned.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="query_identifier" type="int" required="1" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="msql_field_table">
    <description><![CDATA[  Returns the name of the table field was  fetched from.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mSQL_2" />
      <property ref="OCI8_15" />
    </properties>
    
  </element>
  <element kind="function" name="msql_field_type">
    <description><![CDATA[   msql_field_type is similar to the   msql_field_name function.  The arguments are  identical, but the field type is returned.  This will be one of  "int", "char" or "real".  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mSQL_1" />
      <property ref="MS SQL Server_8" />
    </properties>
    
  </element>
  <element kind="function" name="msql_free_result">
    <description><![CDATA[   msql_free_result frees the memory associated  with query_identifier .  When PHP completes a  request, this memory is freed automatically, so you only need to  call this function when you want to make sure you don't use too  much memory while the script is running.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mSQL_1" />
    </properties>
    
  </element>
  <element kind="function" name="msql_list_dbs">
    <description><![CDATA[   msql_list_dbs will return a result pointer  containing the databases available from the current msql  daemon. Use the msql_result function to  traverse this result pointer.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_list_fields">
    <description><![CDATA[   msql_list_fields retrieves information about  the given tablename .  The returned result set can  be traversed with any function that fetches result sets, such as   msql_fetch_array .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property kind="parameter" name="tablename" type="string" required="1" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_list_tables">
    <description><![CDATA[   msql_list_tables lists the tables on the specified   database .  It returns a result set which may be  traversed with any function that fetches result sets, such as   msql_fetch_array .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Firebird/InterBase_17" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_num_fields">
    <description><![CDATA[   msql_num_fields returns the number of fields  in a result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mSQL_1" />
    </properties>
    
  </element>
  <element kind="function" name="msql_num_rows">
    <description><![CDATA[   msql_num_rows returns the number of rows in  a result set.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mSQL_1" />
    </properties>
    
  </element>
  <element kind="function" name="msql_pconnect">
    <description><![CDATA[    msql_pconnect acts very much like   msql_connect with two major differences.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="DB++_3" />
      <property ref="Firebird/InterBase_18" />
      <property ref="Cyrus IMAP_8" />
    </properties>
    
  </element>
  <element kind="function" name="msql_query">
    <description><![CDATA[   msql_query sends a query to the currently  active database on the server that's associated with the  specified link identifier.  If the link identifier isn't  specified, the last opened link is assumed.  If no link is open,  the function tries to establish a link as if   msql_connect was called, and use it.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php 
$link = msql_connect("dbserver")
   or die("unable to connect to msql server: " . msql_error());
msql_select_db("db", $link)
   or die("unable to select database 'db': " . msql_error());

$result = msql_query("SELECT * FROM table WHERE id=1", $link);
if (!$result) {
   die("query failed: " . msql_error());
}

while ($row = msql_fetch_array($result)) {
    echo $row["id"];
}
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
  <element kind="function" name="msql_result">
    <description><![CDATA[  Returns the contents of the cell at the row and offset in the  specified mSQL result set.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mSQL_1" />
      <property ref="MCVE_19" />
      <property ref="FrontBase_19" />
    </properties>
    
  </element>
  <element kind="function" name="msql_select_db">
    <description><![CDATA[    msql_select_db sets the current active  database on the server that's associated with the specified   link_identifier .  If no link identifier is  specified, the last opened link is assumed.  If no link is open, the  function will try to establish a link as if   msql_connect was called, and use it.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="FrontBase_8" />
      <property ref="Firebird/InterBase_6" />
    </properties>
    
  </element>
</group>
<group name="mailparse">
  <description><![CDATA[mailparse Functions]]></description>
  <element kind="function" name="mailparse_determine_best_xfer_encoding">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="fp" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_create">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_extract_part">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="rfc2045" type="resource" required="1" />
      <property kind="parameter" name="msgbody" type="string" required="1" />
      <property kind="parameter" name="callbackfunc" type="callback"  />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_extract_part_file">
    <properties>
      <property ref="ret_string" />
      <property ref="mailparse_2" />
      <property ref="Apache_3" />
      <property ref="mailparse_4" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_free">
    <properties>
      <property ref="ret_void" />
      <property kind="parameter" name="rfc2045buf" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_get_part">
    <properties>
      <property ref="ret_int" />
      <property ref="mailparse_2" />
      <property kind="parameter" name="mimesection" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_get_part_data">
    <properties>
      <property ref="ret_array" />
      <property ref="mailparse_2" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_get_structure">
    <properties>
      <property ref="ret_array" />
      <property ref="mailparse_2" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_parse">
    <properties>
      <property ref="ret_void" />
      <property ref="mailparse_5" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_msg_parse_file">
    <properties>
      <property ref="ret_resource" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_rfc822_parse_addresses">
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="addresses" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_stream_encode">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="sourcefp" type="resource" required="1" />
      <property kind="parameter" name="destfp" type="resource" required="1" />
      <property ref="ClibPDF_52" />
    </properties>
    
  </element>
  <element kind="function" name="mailparse_uudecode_all">
    <properties>
      <property ref="ret_array" />
      <property ref="mailparse_1" />
    </properties>
    
  </element>
</group>
<group name="mcrypt">
  <description><![CDATA[Mcrypt Encryption Functions]]></description>
  <element kind="function" name="mcrypt_cbc">
    <description><![CDATA[  The first prototype is when linked against libmcrypt 2.2.x, the  second when linked against libmcrypt 2.4.x or higher. The   mode should be either   or   .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="cipher" type="int" required="1" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property kind="parameter" name="iv" type="string"  />
      <property ref="MaxDB_17" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property ref="mcrypt_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_cfb">
    <description><![CDATA[  The first prototype is when linked against libmcrypt 2.2.x, the  second when linked against libmcrypt 2.4.x or higher. The   mode should be either   or   .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mcrypt_1" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property kind="parameter" name="iv" type="string" required="1" />
      <property ref="MaxDB_17" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property ref="mcrypt_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_create_iv">
    <description><![CDATA[   mcrypt_create_iv is used to create an IV.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $size = mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB);
    $iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Arrays_4" />
      <property kind="parameter" name="source" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_decrypt">
    <description><![CDATA[   mcrypt_decrypt decrypts the data  and returns the unencrypted data.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="MaxDB_17" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Bzip2_6" />
      <property ref="mcrypt_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_ecb">
    <description><![CDATA[  The first prototype is when linked against libmcrypt 2.2.x, the  second when linked against libmcrypt 2.4.x or higher. The   mode should be either   or   .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mcrypt_1" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property ref="MaxDB_17" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property ref="mcrypt_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_get_algorithms_name">
    <description><![CDATA[  This function returns the name of the algorithm.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$td = mcrypt_module_open(MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, '');
echo mcrypt_enc_get_algorithms_name($td). "\n";
  
$td = mcrypt_module_open('cast-256', '', MCRYPT_MODE_CFB, '');
echo mcrypt_enc_get_algorithms_name($td). "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property kind="parameter" name="td" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_get_block_size">
    <description><![CDATA[  This function returns the block size of the algorithm specified by  the encryption descriptor td in bytes.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_get_iv_size">
    <description><![CDATA[  This function returns the size of the iv of the algorithm  specified by the encryption descriptor in bytes. If it returns  '0' then the IV is ignored in the algorithm. An IV is used in  cbc, cfb and ofb modes, and in some algorithms in stream mode.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_get_key_size">
    <description><![CDATA[  This function returns the maximum supported key size of the  algorithm specified by the encryption descriptor   td in bytes.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_get_modes_name">
    <description><![CDATA[  This function returns the name of the mode.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $td = mcrypt_module_open (MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, '');
    echo mcrypt_enc_get_modes_name($td). "\n";
  
    $td = mcrypt_module_open ('cast-256', '', 'ecb', '');
    echo mcrypt_enc_get_modes_name($td). "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_get_supported_key_sizes">
    <description><![CDATA[  Returns an array with the key sizes supported by the algorithm  specified by the encryption descriptor. If it returns an empty  array then all key sizes between 1 and   mcrypt_enc_get_key_size are supported by the  algorithm.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $td = mcrypt_module_open('rijndael-256', '', 'ecb', '');
    var_dump(mcrypt_enc_get_supported_key_sizes($td));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_is_block_algorithm">
    <description><![CDATA[  This function returns if the algorithm is a block algorithm,  or if it is a stream algorithm.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_is_block_algorithm_mode">
    <description><![CDATA[  This function returns if the mode is for use with block algorithms,  otherwise it returns . (e.g. for stream, and for cbc, cfb, ofb).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_is_block_mode">
    <description><![CDATA[  This function returns if the mode outputs blocks of bytes or   if it outputs bytes. (e.g. for cbc and ecb, and for cfb and  stream).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_enc_self_test">
    <description><![CDATA[  This function runs the self test on the algorithm specified by the  descriptor td . If the self test succeeds it returns . In case  of an error, it returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_encrypt">
    <description><![CDATA[   mcrypt_encrypt encrypts the data  and returns the encrypted data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    $key = "This is a very secret key";
    $text = "Meet me at 11 o'clock behind the monument.";
    echo strlen($text) . "\n";

    $crypttext = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $text, MCRYPT_MODE_ECB, $iv);
    echo strlen($crypttext) . "\n";
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="MaxDB_17" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Bzip2_6" />
      <property ref="mcrypt_2" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_generic">
    <description><![CDATA[  This function encrypts data. The data is padded with " "  to make sure the length of the data is n * blocksize. This  function returns the encrypted data. Note that the length  of the returned string can in fact be longer then the input,  due to the padding of the data.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mcrypt_5" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_generic_deinit">
    <description><![CDATA[  This function terminates encryption specified by the encryption  descriptor ( td ). It clears all buffers, but does  not close the module.  You need to call   mcrypt_module_close yourself. (But PHP does this for  you at the end of the script.)  Returns on error, or on  success.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_generic_end">
    <description><![CDATA[    This function is deprecated, use   mcrypt_generic_deinit instead. It can cause  crashes when used with mcrypt_module_close due to  multiple buffer frees.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_generic_init">
    <description><![CDATA[  The maximum length of the key should be the one obtained by  calling mcrypt_enc_get_key_size and every  value smaller than this is legal. The IV should normally have  the size of the algorithms block size, but you must obtain the  size by calling mcrypt_enc_get_iv_size .  IV is ignored in ECB. IV MUST exist in CFB, CBC, STREAM, nOFB  and OFB modes. It needs to be random and unique (but not secret).  The same IV must be used for encryption/decryption. If you do not  want to use it you should set it to zeros, but this is not  recommended.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mcrypt_5" />
      <property ref="DB++_11" />
      <property ref="mcrypt_3" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_get_block_size">
    <description><![CDATA[  The first prototype is when linked against libmcrypt 2.2.x, the  second when linked against libmcrypt 2.4.x or 2.5.x.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    echo mcrypt_get_block_size('tripledes', 'ecb');
?>

Prints:
8]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mcrypt_1" />
      <property ref="MaxDB_17" />
      <property kind="parameter" name="module" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_get_cipher_name">
    <description><![CDATA[   mcrypt_get_cipher_name is used to get the  name of the specified cipher.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
   $cipher = MCRYPT_TripleDES;

   echo mcrypt_get_cipher_name($cipher);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mcrypt_1" />
      <property ref="MaxDB_17" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_get_iv_size">
    <description><![CDATA[   mcrypt_get_iv_size returns the size of  the Initialisation Vector (IV) in bytes. On error the function  returns . If the IV is ignored in the specified cipher/mode  combination zero is returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    echo mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB) . "\n";

    echo mcrypt_get_iv_size('des', 'ecb') . "\n";
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MaxDB_17" />
      <property ref="Bzip2_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_get_key_size">
    <description><![CDATA[  The first prototype is when linked against libmcrypt 2.2.x, the  second when linked against libmcrypt 2.4.x or 2.5.x.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    echo mcrypt_get_key_size('tripledes', 'ecb');
?>

Prints:
24]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mcrypt_1" />
      <property ref="MaxDB_17" />
      <property ref="mcrypt_6" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_list_algorithms">
    <description><![CDATA[   mcrypt_list_algorithms is used to get an  array of all supported algorithms in the lib_dir parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $algorithms = mcrypt_list_algorithms("/usr/local/lib/libmcrypt");

    foreach ($algorithms as $cipher) {
        echo "$cipher<br />\n";
    }
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="lib_dir" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_list_modes">
    <description><![CDATA[   mcrypt_list_modes is used to get an  array of all supported modes in the   lib_dir .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $modes = mcrypt_list_modes();

    foreach ($modes as $mode) {
        echo "$mode <br />\n";
    }
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_close">
    <description><![CDATA[  This function closes the specified encryption handle.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_5" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_get_algo_block_size">
    <description><![CDATA[  This function returns the block size of the algorithm specified in  bytes. The optional lib_dir parameter  can contain the location where the mode module is on the system.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="algorithm" type="string" required="1" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_get_algo_key_size">
    <description><![CDATA[  This function returns the maximum supported key size of the  algorithm specified in bytes. The optional   lib_dir parameter can contain the  location where the mode module is on the system.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mcrypt_8" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_get_supported_key_sizes">
    <description><![CDATA[  Returns an array with the key sizes supported by the specified algorithm.  If it returns an empty array then all key sizes between 1 and   mcrypt_module_get_algo_key_size are supported by the  algorithm. The optional lib_dir parameter can  contain the location where the mode module is on the system.  ]]></description>
    <properties>
      <property ref="ret_array" />
      <property ref="mcrypt_8" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_is_block_algorithm">
    <description><![CDATA[  This function returns if the specified algorithm is a block  algorithm, or is it is a stream algorithm.  The optional   lib_dir parameter can contain the location where  the algorithm module is on the system.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mcrypt_8" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_is_block_algorithm_mode">
    <description><![CDATA[  This function returns if the mode is for use with block  algorithms, otherwise it returns . (e.g. for stream, and   for cbc, cfb, ofb).  The optional lib_dir  parameter can contain the location where the mode module is on the  system.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_6" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_is_block_mode">
    <description><![CDATA[  This function returns if the mode outputs blocks of bytes or   if it outputs just bytes. (e.g. for cbc and ecb, and   for cfb and stream). The optional lib_dir  parameter can contain the location where the mode module is on the  system.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Bzip2_6" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_open">
    <description><![CDATA[  This function opens the module of the algorithm and the mode to be used.  The name of the algorithm is specified in algorithm, e.g. "twofish" or is  one of the MCRYPT_ciphername constants.  The module is closed by calling   mcrypt_module_close . Normally it returns an  encryption descriptor, or on error.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    $td = mcrypt_module_open(MCRYPT_DES, '',
        MCRYPT_MODE_ECB, '/usr/lib/mcrypt-modes');

    $td = mcrypt_module_open('rijndael-256', '', 'ofb', '');
?>

      

<?php
    /* Open the cipher */
    $td = mcrypt_module_open('rijndael-256', '', 'ofb', '');

    /* Create the IV and determine the keysize length, used MCRYPT_RAND
     * on Windows instead */
    $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_DEV_RANDOM);
    $ks = mcrypt_enc_get_key_size($td);

    /* Create key */
    $key = substr(md5('very secret key'), 0, $ks);

    /* Intialize encryption */
    mcrypt_generic_init($td, $key, $iv);

    /* Encrypt data */
    $encrypted = mcrypt_generic($td, 'This is very important data');

    /* Terminate encryption handler */
    mcrypt_generic_deinit($td);

    /* Initialize encryption module for decryption */
    mcrypt_generic_init($td, $key, $iv);

    /* Decrypt encrypted string */
    $decrypted = mdecrypt_generic($td, $encrypted);

    /* Terminate decryption handle and close module */
    mcrypt_generic_deinit($td);
    mcrypt_module_close($td);

    /* Show string */
    echo trim($decrypted) . "\n";
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="mcrypt_8" />
      <property kind="parameter" name="algorithm_directory" type="string" required="1" />
      <property ref="Bzip2_6" />
      <property kind="parameter" name="mode_directory" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_module_self_test">
    <description><![CDATA[  This function runs the self test on the algorithm specified.  The  optional lib_dir parameter can contain the  location of where the algorithm module is on the system.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
var_dump(mcrypt_module_self_test(MCRYPT_RIJNDAEL_128)) . "\n";
var_dump(mcrypt_module_self_test(MCRYPT_BOGUS_CYPHER));
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mcrypt_8" />
      <property ref="mcrypt_7" />
    </properties>
    
  </element>
  <element kind="function" name="mcrypt_ofb">
    <description><![CDATA[  The first prototype is when linked against libmcrypt 2.2.x, the  second when linked against libmcrypt 2.4.x or higher. The   mode should be either   or   .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mcrypt_1" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property ref="mcrypt_3" />
      <property ref="MaxDB_17" />
      <property ref="DB++_11" />
      <property ref="Bzip2_7" />
      <property ref="Calendar_10" />
      <property ref="mcrypt_2" />
    </properties>
    
  </element>
  <element kind="function" name="mdecrypt_generic">
    <description><![CDATA[  This function decrypts data. Note that the length of the returned string  can in fact be longer then the unencrypted string, due to the padding of  the data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    /* Data */
    $key = 'this is a very long key, even too long for the cipher';
    $plain_text = 'very important data';
   
    /* Open module, and create IV */ 
    $td = mcrypt_module_open('des', '', 'ecb', '');
    $key = substr($key, 0, mcrypt_enc_get_key_size($td));
    $iv_size = mcrypt_enc_get_iv_size($td);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);

    /* Initialize encryption handle */
    if (mcrypt_generic_init($td, $key, $iv) != -1) {

        /* Encrypt data */
        $c_t = mcrypt_generic($td, $plain_text);
        mcrypt_generic_deinit($td);

        /* Reinitialize buffers for decryption */
        mcrypt_generic_init($td, $key, $iv);
        $p_t = mdecrypt_generic($td, $c_t);

        /* Clean up */
        mcrypt_generic_deinit($td);
        mcrypt_module_close($td);
    }

    if (strncmp($p_t, $plain_text, strlen($plain_text)) == 0) {
        echo "ok\n";
    } else {
        echo "error\n";
    }
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mcrypt_5" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
</group>
<group name="mhash">
  <description><![CDATA[Mhash Functions]]></description>
  <element kind="function" name="mhash">
    <description><![CDATA[   mhash applies a hash function specified by   hash to the data and  returns the resulting hash (also called digest). If the key  is specified it will return the resulting HMAC. HMAC is keyed hashing  for message authentication, or simply a message digest that depends on  the specified key. Not all algorithms supported in mhash can be used in  HMAC mode. In case of an error returns .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property kind="parameter" name="hash" type="int" required="1" />
      <property ref="Bzip2_7" />
      <property ref="IRC Gateway_10" />
    </properties>
    
  </element>
  <element kind="function" name="mhash_count">
    <description><![CDATA[   mhash_count returns the highest available hash  id. Hashes are numbered from 0 to this hash id.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$nr = mhash_count();

for ($i = 0; $i <= $nr; $i++) {
    echo sprintf("The blocksize of %s is %d\n", 
        mhash_get_hash_name($i),
        mhash_get_block_size($i));
}
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="mhash_get_block_size">
    <description><![CDATA[   mhash_get_block_size is used to get the size  of a block of the specified hash .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mhash_1" />
    </properties>
    
  </element>
  <element kind="function" name="mhash_get_hash_name">
    <description><![CDATA[   mhash_get_hash_name is used to get the name  of the specified hash.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$hash = MHASH_MD5;

echo mhash_get_hash_name($hash);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mhash_1" />
    </properties>
    
  </element>
  <element kind="function" name="mhash_keygen_s2k">
    <description><![CDATA[   mhash_keygen_s2k generates a key that is   bytes long, from a user given password.  This is the Salted S2K algorithm as specified in the OpenPGP  document (RFC 2440). That algorithm will use the specified   hash algorithm to create the key.  The salt must be different and random  enough for every key you generate in order to create different keys.  That salt must be known when you check the keys, thus it is  a good idea to append the key to it. Salt has a fixed length  of 8 bytes and will be padded with zeros if you supply less bytes.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mhash_1" />
      <property ref="Crack_2" />
      <property kind="parameter" name="salt" type="string" required="1" />
      <property kind="parameter" name="bytes" type="int" required="1" />
    </properties>
    
  </element>
</group>
<group name="mnoGoSearch">
  <description><![CDATA[mnoGoSearch Functions]]></description>
  <element kind="function" name="udm_add_search_limit">
    <description><![CDATA[   udm_add_search_limit adds search restrictions.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
      Udm_Add_Search_Limit($udm, UDM_LIMIT_DATE, "&lt;908012006");
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="agent" type="resource" required="1" />
      <property kind="parameter" name="var" type="int" required="1" />
      <property ref="Msession_2" />
    </properties>
    
  </element>
  <element kind="function" name="udm_alloc_agent">
    <description><![CDATA[  Returns a mnogosearch agent identifier on success, on failure. This  function creates a session with database parameters.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="dbaddr" type="string" required="1" />
      <property kind="parameter" name="dbmode" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="udm_alloc_agent_array">
    <description><![CDATA[   udm_alloc_agent_array will create an agent  with multiple database connections. The array   databases must contain one database URL  per element, analog to the first parameter of   udm_alloc_agent .  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="databases" type="array" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_api_version">
    <description><![CDATA[   udm_api_version returns the mnoGoSearch API version  number. E.g. if mnoGoSearch 3.1.10 API is used, this function will return   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (udm_api_version() >= 30111) {
    echo  "Total number of URLs in database: " . udm_get_doc_count($udm) . "<br />\n";
}
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="udm_cat_list">
    <description><![CDATA[  Returns an array listing all categories of the same level as the current   category in the categories tree.   agent is the agent identifier returned by a previous  call to >udm_alloc_agent .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
 $cat_list_arr = udm_cat_list($udm_agent, $cat);
 $cat_list = '';
 for ($i=0; $i<count($cat_list_arr); $i+=2) {
    $path = $cat_list_arr[$i];
    $name = $cat_list_arr[$i+1];
    $cat_list .= "<a href=\"$_SERVER[PHP_SELF]?cat=$path\">$name</a><br />";
 }
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="mnoGoSearch_1" />
      <property ref="MCAL_11" />
    </properties>
    
  </element>
  <element kind="function" name="udm_cat_path">
    <description><![CDATA[  Returns an array describing the path in the categories tree from the tree  root to the current one, specified by category .   agent is the agent identifier returned by a previous  call to >udm_alloc_agent .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
  $cat_path_arr = udm_cat_path($udm_agent, $cat);
  $cat_path = '';
  for ($i=0; $i<count($cat_path_arr); $i+=2) {
    $path = $cat_path_arr[$i];
    $name = $cat_path_arr[$i+1];
    $cat_path .= " > <a href=\"$_SERVER[PHP_SELF]?cat=$path\">$name</a> ";
  }
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="mnoGoSearch_1" />
      <property ref="MCAL_11" />
    </properties>
    
  </element>
  <element kind="function" name="udm_check_charset">
    <properties>
      <property ref="ret_bool" />
      <property ref="mnoGoSearch_1" />
      <property ref="iconv_7" />
    </properties>
    
  </element>
  <element kind="function" name="udm_check_stored">
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
      <property ref="Hyperwave_2" />
      <property kind="parameter" name="doc_id" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_clear_search_limits">
    <description><![CDATA[   udm_clear_search_limits resets defined search  limitations and returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mnoGoSearch_1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_close_stored">
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
      <property ref="Hyperwave_2" />
    </properties>
    
  </element>
  <element kind="function" name="udm_crc32">
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="udm_errno">
    <description><![CDATA[   udm_errno returns mnoGoSearch error number, zero if no error.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_error">
    <description><![CDATA[   udm_error returns mnoGoSearch error message,  empty string if no error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mnoGoSearch_1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_find">
    <description><![CDATA[  Returns a result link identifier on success, or on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="mnoGoSearch_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="udm_free_agent">
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_free_ispell_data">
    <description><![CDATA[   udm_free_ispell_data always returns .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="agent" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_free_res">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="res" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_get_doc_count">
    <description><![CDATA[   udm_get_doc_count returns the number of documents in  the database.  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_get_res_field">
    <description><![CDATA[   udm_get_res_field returns result field value on  success, on error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mnoGoSearch_8" />
      <property ref="MCVE_19" />
      <property ref="OCI8_15" />
    </properties>
    
  </element>
  <element kind="function" name="udm_get_res_param">
    <description><![CDATA[   udm_get_res_param returns result parameter value on  success, on error.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="mnoGoSearch_8" />
      <property ref="Msession_4" />
    </properties>
    
  </element>
  <element kind="function" name="udm_hash32">
    <description><![CDATA[   udm_hash32 will take a string   str and return a quite unique 32-bit hash  number from it. Requires an allocated agent .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
      <property ref="DOM XML_14" />
    </properties>
    
  </element>
  <element kind="function" name="udm_load_ispell_data">
    <description><![CDATA[   udm_load_ispell_data loads ispell data.    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
if (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_DB, '', '', 1)) {
  printf("Error #%d: '%s'\n", udm_errno($udm), udm_error($udm));
  exit;
}
?>

       

<?php
if ((! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'en', '/opt/ispell/en.aff', 0)) ||
    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_AFFIX, 'ru', '/opt/ispell/ru.aff', 0)) ||
    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'en', '/opt/ispell/en.dict', 0)) ||
    (! udm_load_ispell_data($udm, UDM_ISPELL_TYPE_SPELL, 'ru', '/opt/ispell/ru.dict', 1))) {
    exit;
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mnoGoSearch_1" />
      <property ref="mnoGoSearch_2" />
      <property kind="parameter" name="val1" type="string" required="1" />
      <property kind="parameter" name="val2" type="string" required="1" />
      <property kind="parameter" name="flag" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_open_stored">
    <properties>
      <property ref="ret_int" />
      <property ref="mnoGoSearch_1" />
      <property kind="parameter" name="storedaddr" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="udm_set_agent_param">
    <description><![CDATA[   Defines mnoGoSearch session parameters.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mnoGoSearch_1" />
      <property ref="mnoGoSearch_2" />
      <property ref="Msession_2" />
    </properties>
    
  </element>
</group>
<group name="muscat">
  <description><![CDATA[muscat Functions]]></description>
  <element kind="function" name="muscat_close">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="muscat_handle" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="muscat_get">
    <properties>
      <property ref="ret_string" />
      <property ref="muscat_1" />
    </properties>
    
  </element>
  <element kind="function" name="muscat_give">
    <properties>
      <property ref="ret_int" />
      <property ref="muscat_1" />
      <property ref="Filesystem_16" />
    </properties>
    
  </element>
  <element kind="function" name="muscat_setup">
    <properties>
      <property ref="ret_resource" />
      <property ref="Arrays_4" />
      <property kind="parameter" name="muscat_dir" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="muscat_setup_net">
    <description><![CDATA[   muscat_setup_net creates a new muscat session and  returns the handle.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="muscat_host" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="mysqli">
  <description><![CDATA[Improved MySQL Extension]]></description>
  <element kind="function" name="mysqli_affected_rows">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Insert rows */
$mysqli->query("CREATE TABLE Language SELECT * from CountryLanguage");
printf("Affected rows (INSERT): %d\n", $mysqli->affected_rows);

$mysqli->query("ALTER TABLE Language ADD Status int default 0");

/* update rows */
$mysqli->query("UPDATE Language SET Status=1 WHERE Percentage > 50");
printf("Affected rows (UPDATE): %d\n", $mysqli->affected_rows);

/* delete rows */
$mysqli->query("DELETE FROM Language WHERE Percentage < 50");
printf("Affected rows (DELETE): %d\n", $mysqli->affected_rows);

/* select all rows */
$result = $mysqli->query("SELECT CountryCode FROM Language");
printf("Affected rows (SELECT): %d\n", $mysqli->affected_rows);

$result->close();

/* Delete table Language */
$mysqli->query("DROP TABLE Language");

/* close connection */
$mysqli->close();
?>

   

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

if (!$link) {
    printf("Can't connect to localhost. Error: %s\n", mysqli_connect_error());
    exit();
}

/* Insert rows */
mysqli_query($link, "CREATE TABLE Language SELECT * from CountryLanguage");
printf("Affected rows (INSERT): %d\n", mysqli_affected_rows($link));

mysqli_query($link, "ALTER TABLE Language ADD Status int default 0");

/* update rows */
mysqli_query($link, "UPDATE Language SET Status=1 WHERE Percentage > 50");
printf("Affected rows (UPDATE): %d\n", mysqli_affected_rows($link));

/* delete rows */
mysqli_query($link, "DELETE FROM Language WHERE Percentage < 50");
printf("Affected rows (DELETE): %d\n", mysqli_affected_rows($link));

/* select all rows */
$result = mysqli_query($link, "SELECT CountryCode FROM Language");
printf("Affected rows (SELECT): %d\n", mysqli_affected_rows($link));

mysqli_free_result($result);

/* Delete table Language */
mysqli_query($link, "DROP TABLE Language");

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="link" type="mysqli" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_autocommit">
    <description><![CDATA[   mysqli_autocommit is used to turn on or off auto-commit mode  on queries for the database connection represented by the link  object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* turn autocommit on */
$mysqli->autocommit(TRUE);

if ($result = $mysqli->query("SELECT @@autocommit")) {
    $row = $result->fetch_row();
    printf("Autocommit is %s\n", $row[0]);
    $result->free();
}

/* close connection */
$mysqli->close();
?>

     

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

if (!$link) {
    printf("Can't connect to localhost. Error: %s\n", mysqli_connect_error());
    exit();
}

/* turn autocommit on */
mysqli_autocommit($link, TRUE);

if ($result = mysqli_query($link, "SELECT @@autocommit")) {
    $row = mysqli_fetch_row($result);
    printf("Autocommit is %s\n", $row[0]);
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="MaxDB_1" />
      <property ref="MaxDB_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_change_user">
    <description><![CDATA[   mysqli_change_user is used to change the user of the specified  database connection as given by the link parameter and to set the  current database to that specified by the database parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* connect database test */
$mysqli = new mysqli("localhost", "my_user", "my_password", "test");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Set Variable a */
$mysqli->query("SET @a:=1");
                                         
/* reset all and select a new database */
$mysqli->change_user("my_user", "my_password", "world");

if ($result = $mysqli->query("SELECT DATABASE()")) {
    $row = $result->fetch_row();
    printf("Default database: %s\n", $row[0]);
    $result->close();
}

if ($result = $mysqli->query("SELECT @a")) {
    $row = $result->fetch_row();
    if ($row[0] === NULL) {
        printf("Value of variable a is NULL\n");
    }
    $result->close();
}

/* close connection */
$mysqli->close();
?>

      

<?php
/* connect database test */
$link = mysqli_connect("localhost", "my_user", "my_password", "test");

/* check connection */
if (!$link) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Set Variable a */
mysqli_query($link, "SET @a:=1");
                                         
/* reset all and select a new database */
mysqli_change_user($link, "my_user", "my_password", "world");

if ($result = mysqli_query($link, "SELECT DATABASE()")) {
    $row = mysqli_fetch_row($result);
    printf("Default database: %s\n", $row[0]);
    mysqli_free_result($result);
}

if ($result = mysqli_query($link, "SELECT @a")) {
    $row = mysqli_fetch_row($result);
    if ($row[0] === NULL) {
        printf("Value of variable a is NULL\n");
    }
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property ref="Firebird/InterBase_17" />
      <property ref="DB++_14" />
      <property ref="Crack_2" />
      <property ref="Firebird/InterBase_17" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_character_set_name">
    <description><![CDATA[  Returns the current character set for the database connection specified by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");
                                                                              
/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Print current character set */
$charset = $mysqli->character_set_name();
printf ("Current character set is %s\n", $charset);

$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");
                                                                              
/* check connection */
if (!$link) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Print current character set */
$charset = mysqli_character_set_name($link);
printf ("Current character set is %s\n",$charset);

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_close">
    <description><![CDATA[  The mysqli_close function closes a previously opened database  connection specified by the link parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_commit">
    <description><![CDATA[  Commits the current transaction for the database connection specified by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TABLE Language LIKE CountryLanguage Type=InnoDB");

/* set autocommit to off */
$mysqli->autocommit(FALSE);

/* Insert some values */
$mysqli->query("INSERT INTO Language VALUES ('DEU', 'Bavarian', 'F', 11.2)");
$mysqli->query("INSERT INTO Language VALUES ('DEU', 'Swabian', 'F', 9.4)");

/* commit transaction */
$mysqli->commit();

/* drop table */
$mysqli->query("DROP TABLE Language");

/* close connection */
$mysqli->close();
?>

      

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "test");

/* check connection */
if (!$link) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* set autocommit to off */
mysqli_autocommit($link, FALSE);

mysqli_query($link, "CREATE TABLE Language LIKE CountryLanguage Type=InnoDB");

/* Insert some values */
mysqli_query($link, "INSERT INTO Language VALUES ('DEU', 'Bavarian', 'F', 11.2)");
mysqli_query($link, "INSERT INTO Language VALUES ('DEU', 'Swabian', 'F', 9.4)");

/* commit transaction */
mysqli_commit($link);

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_connect">
    <description><![CDATA[ Object oriented style (constructor):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

printf("Host information: %s\n", $mysqli->host_info);

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (!$link) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

printf("Host information: %s\n", mysqli_get_host_info($link));

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property kind="return" type="mysqli" />	
      <property ref="Cyrus IMAP_10" />
      <property ref="Firebird/InterBase_18" />
      <property ref="MaxDB_2" />
      <property ref="MaxDB_3" />
      <property ref="FTP_5" />
      <property kind="parameter" name="sockethostusernamepasswddbnameportsocket" type="string"  />
      <property ref="mysqli_2" />
      <property ref="mysqli_2" />
      <property ref="mysqli_2" />
      <property ref="mysqli_2" />
      <property ref="mysqli_2" />
      <property ref="mysqli_2" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_connect_errno">
    <description><![CDATA[  The mysqli_connect_errno function will return the last error code number  for last call to mysqli_connect .  If no errors have occured, this function will return zero.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$link = @mysqli_connect("localhost", "nonexisting_user", "");

if (!$link) {
    printf("Can't connect to localhost. Errorcode: %d\n", mysqli_connect_errno());
}
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_connect_error">
    <description><![CDATA[  The mysqli_connect_error function is identical to the corresponding   mysqli_connect_errno function in every way, except instead of returning  an integer error code the mysqli_connect_error function will return  a string representation of the last error to occur for the last   mysqli_connect call.  If no error has occured, this function will return an empty string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$link = @mysqli_connect("localhost", "nonexisting_user", "");

if (!$link) {
    printf("Can't connect to localhost. Error: %s\n", mysqli_connect_error());
}
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_data_seek">
    <description><![CDATA[  The mysqli_data_seek function seeks to an arbitrary result pointer  specified by the offset in the result set represented by   result . The offset parameter must be between  zero and the total number of rows minus one (0.. mysqli_num_rows - 1).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name";
if ($result = $mysqli->query( $query)) {

    /* seek to row no. 400 */
    $result->data_seek(399);

    /* fetch row */
    $row = $result->fetch_row();

    printf ("City: %s  Countrycode: %s\n", $row[0], $row[1]);
        
    /* free result set*/
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (!$link) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name";

if ($result = mysqli_query($link, $query)) {

    /* seek to row no. 400 */
    mysqli_data_seek($result, 399);

    /* fetch row */
    $row = mysqli_fetch_row($result);

    printf ("City: %s  Countrycode: %s\n", $row[0], $row[1]);
        
    /* free result set*/
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="result" type="mysqli_result" required="1" />
      <property ref="Arrays_35" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_debug">
    <description><![CDATA[  The mysqli_debug function is used to perform debugging  operations using the Fred Fish debugging library. The debug  parameter is a string representing the debugging operation to perform.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
    
/* Create a trace file in '/tmp/client.trace' on the local (client) machine: */
mysqli_debug("d:t:0,/tmp/client.trace");
    
?>]]></description>
      </property>
      <property ref="ret_void" />
      <property ref="MaxDB_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_disable_reads_from_master">
    <properties>
      <property ref="ret_void" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_disable_rpl_parse">
    <properties>
      <property ref="ret_void" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_dump_debug_info">
    <description><![CDATA[  This function is designed to be executed by an user with the SUPER privilege and  is used to dump debugging information into the log for the MySQL Server relating  to the connection specified by the link parameter.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_embedded_connect">
    <properties>
      <property ref="ret_mysqli" />
      <property ref="MaxDB_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_enable_reads_from_master">
    <properties>
      <property ref="ret_void" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_enable_rpl_parse">
    <properties>
      <property ref="ret_void" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_errno">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if (!$mysqli->query("SET a=1")) {
    printf("Errorcode: %d\n", $mysqli->errno);
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if (!mysqli_query($link, "SET a=1")) {
    printf("Errorcode: %d\n", mysqli_errno($link));
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_error">
    <description><![CDATA[ Object oriented style (property)]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if (!$mysqli->query("SET a=1")) {
    printf("Errormessage: %s\n", $mysqli->error);
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if (!mysqli_query($link, "SET a=1")) {
    printf("Errormessage: %s\n", mysqli_error($link));
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_array">
    <description><![CDATA[  Returns an array that corresponds to the fetched row or if there are no more rows for the  resultset represented by the result parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
 
$query = "SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3";
$result = $mysqli->query($query);

/* numeric array */
$row = $result->fetch_array(MYSQLI_NUM);
printf ("%s (%s)\n", $row[0], $row[1]);  

/* associative array */
$row = $result->fetch_array(MYSQLI_ASSOC);
printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);  

/* associative and numeric array */
$row = $result->fetch_array(MYSQLI_BOTH);
printf ("%s (%s)\n", $row[0], $row["CountryCode"]);  

/* free result set */
$result->close();

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER by ID LIMIT 3";
$result = mysqli_query($link, $query);

/* numeric array */
$row = mysqli_fetch_array($result, MYSQLI_NUM);
printf ("%s (%s)\n", $row[0], $row[1]);  

/* associative array */
$row = mysqli_fetch_array($result, MYSQLI_ASSOC);
printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);  

/* associative and numeric array */
$row = mysqli_fetch_array($result, MYSQLI_BOTH);
printf ("%s (%s)\n", $row[0], $row["CountryCode"]);  

/* free result set */
mysqli_free_result($result);

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_3" />
      <property ref="MaxDB_6" />
      <property ref="MaxDB_6" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_assoc">
    <description><![CDATA[  Returns an associative array that corresponds to the fetched row or if there are  no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
 
$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5";

if ($result = $mysqli->query($query)) {

    /* fetch associative array */
    while ($row = $result->fetch_assoc()) {
        printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);
    }

    /* free result set */
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5";

if ($result = mysqli_query($link, $query)) {

    /* fetch associative array */
    while ($row = mysqli_fetch_assoc($result)) {
        printf ("%s (%s)\n", $row["Name"], $row["CountryCode"]);
    }

    /* free result set */
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_field">
    <description><![CDATA[  The mysqli_fetch_field returns the definition of one column  of a result set as an object. Call this function repeatedly to retrieve  information about all columns in the result set.   mysqli_fetch_field returns when no more fields  are left.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = $mysqli->query($query)) {

    /* Get field information for all columns */
    while ($finfo = $result->fetch_field()) {
 
        printf("Name:     %s\n", $finfo->name);
        printf("Table:    %s\n", $finfo->table);
        printf("max. Len: %d\n", $finfo->max_length);
        printf("Flags:    %d\n", $finfo->flags);
        printf("Type:     %d\n\n", $finfo->type);
    }    
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = mysqli_query($link, $query)) {

    /* Get field information for all fields */
    while ($finfo = mysqli_fetch_field($result)) {
 
        printf("Name:     %s\n", $finfo->name);
        printf("Table:    %s\n", $finfo->table);
        printf("max. Len: %d\n", $finfo->max_length);
        printf("Flags:    %d\n", $finfo->flags);
        printf("Type:     %d\n\n", $finfo->type);
    }
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_field_direct">
    <description><![CDATA[   mysqli_fetch_field_direct returns an object which contains  field definition informations from specified resultset. The value of fieldnr must be in the  range from to .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Name LIMIT 5";

if ($result = $mysqli->query($query)) {

    /* Get field information for column 'SurfaceArea' */
    $finfo = $result->fetch_field_direct(1);
 
    printf("Name:     %s\n", $finfo->name);
    printf("Table:    %s\n", $finfo->table);
    printf("max. Len: %d\n", $finfo->max_length);
    printf("Flags:    %d\n", $finfo->flags);
    printf("Type:     %d\n", $finfo->type);
    
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Name LIMIT 5";

if ($result = mysqli_query($link, $query)) {

    /* Get field information for column 'SurfaceArea' */
    $finfo = mysqli_fetch_field_direct($result, 1);
 
    printf("Name:     %s\n", $finfo->name);
    printf("Table:    %s\n", $finfo->table);
    printf("max. Len: %d\n", $finfo->max_length);
    printf("Flags:    %d\n", $finfo->flags);
    printf("Type:     %d\n", $finfo->type);

    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_3" />
      <property ref="MaxDB_7" />
      <property ref="MaxDB_7" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_fields">
    <description><![CDATA[  This function serves an identical purpose to the mysqli_fetch_field  function with the single difference that, instead of returning one object at a time for  each field, the columns are returned as an array of objects.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = $mysqli->query($query)) {

    /* Get field information for all columns */
    $finfo = $result->fetch_fields();

    for ($i=0; $i < count($finfo); $i++) { 
        printf("Name:     %s\n", $finfo[$i]->name);
        printf("Table:    %s\n", $finfo[$i]->table);
        printf("max. Len: %d\n", $finfo[$i]->max_length);
        printf("Flags:    %d\n", $finfo[$i]->flags);
        printf("Type:     %d\n\n", $finfo[$i]->type);
    }    
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = mysqli_query($link, $query)) {

    /* Get field information for all columns */
    $finfo = mysqli_fetch_fields($result);
 
    for ($i=0; $i < count($finfo); $i++) { 
        printf("Name:     %s\n", $finfo[$i]->name);
        printf("Table:    %s\n", $finfo[$i]->table);
        printf("max. Len: %d\n", $finfo[$i]->max_length);
        printf("Flags:    %d\n", $finfo[$i]->flags);
        printf("Type:     %d\n\n", $finfo[$i]->type);
    }    
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_lengths">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT * from Country ORDER BY Code LIMIT 1";

if ($result = $mysqli->query($query)) {

    $row = $result->fetch_row();

    /* display column lengths */
    for ($i=0; $i < count($result->lengths); $i++) {
        printf("Field %2d has Length %2d\n", $i+1, $result->lengths[$i]);
    }
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT * from Country ORDER BY Code LIMIT 1";

if ($result = mysqli_query($link, $query)) {

    $row = mysqli_fetch_row($result);

    /* display column lengths */
    $lengths = mysqli_fetch_lengths($result);
    for ($i=0; $i < count($lengths); $i++) {
        printf("Field %2d has Length %2d\n", $i+1, $lengths[$i]);
    }
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_object">
    <description><![CDATA[  The mysqli_fetch_object will return the current row result set  as an object where the attributes of the object represent the names of the fields found  within the result set. If no more rows exist in the current result set, is returned.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
 
$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5";

if ($result = $mysqli->query($query)) {

    /* fetch object array */
    while ($obj = $result->fetch_object()) {
        printf ("%s (%s)\n", $obj->Name, $obj->CountryCode);
    }

    /* free result set */
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5";

if ($result = mysqli_query($link, $query)) {

    /* fetch associative array */
    while ($obj = mysqli_fetch_object($result)) {
        printf ("%s (%s)\n", $obj->Name, $obj->CountryCode);
    }

    /* free result set */
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_fetch_row">
    <description><![CDATA[  Returns an array that corresponds to the fetched row, or if there are no more rows.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
 
$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5";

if ($result = $mysqli->query($query)) {

    /* fetch object array */
    while ($row = $result->fetch_row()) {
        printf ("%s (%s)\n", $row[0], $row[1]);
    }

    /* free result set */
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 50,5";

if ($result = mysqli_query($link, $query)) {

    /* fetch associative array */
    while ($row = mysqli_fetch_row($result)) {
        printf ("%s (%s)\n", $row[0], $row[1]);
    }

    /* free result set */
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_field_count">
    <description><![CDATA[  Returns the number of columns for the most recent query on the connection  represented by the link parameter. This function  can be useful when using the mysqli_store_result  function to determine if the query should have produced a non-empty result  set or not without knowing the nature of the query.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "test");

$mysqli->query( "DROP TABLE IF EXISTS friends"); 
$mysqli->query( "CREATE TABLE friends (id int, name varchar(20))"); 
 
$mysqli->query( "INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')");


$mysqli->real_query($HTTP_POST_VARS['query']);

if (mysqli_field_count($link)) {
    /* this was a select/show or describe query */
    $result = $mysqli->store_result();
    
    /* process resultset */
    $row = $result->fetch_row();

    /* free resultset */
    $result->close();
}

/* close connection */
$mysqli->close();
?>

      

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "test");

mysqli_query($link, "DROP TABLE IF EXISTS friends"); 
mysqli_query($link, "CREATE TABLE friends (id int, name varchar(20))"); 
 
mysqli_query($link, "INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')");

mysqli_real_query($link, $HTTP_POST_VARS['query']);

if (mysqli_field_count($link)) {
    /* this was a select/show or describe query */
    $result = mysqli_store_result($link);
    
    /* process resultset */
    $row = mysqli_fetch_row($result);

    /* free resultset */
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_field_seek">
    <description><![CDATA[  Sets the field cursor to the given offset. The next call to mysqli_fetch_field  will retrieve the field definition of the column associated with that offset.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = $mysqli->query($query)) {

    /* Get field information for 2nd column */
    $result->field_seek(1);
    $finfo = $result->fetch_field();
 
    printf("Name:     %s\n", $finfo->name);
    printf("Table:    %s\n", $finfo->table);
    printf("max. Len: %d\n", $finfo->max_length);
    printf("Flags:    %d\n", $finfo->flags);
    printf("Type:     %d\n\n", $finfo->type);
    
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = mysqli_query($link, $query)) {

    /* Get field information for 2nd column */
    mysqli_field_seek($result, 1);
    $finfo = mysqli_fetch_field($result);
 
    printf("Name:     %s\n", $finfo->name);
    printf("Table:    %s\n", $finfo->table);
    printf("max. Len: %d\n", $finfo->max_length);
    printf("Flags:    %d\n", $finfo->flags);
    printf("Type:     %d\n\n", $finfo->type);

    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_3" />
      <property ref="MaxDB_7" />
      <property ref="MaxDB_7" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_field_tell">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = $mysqli->query($query)) {

    /* Get field information for all columns */
    while ($finfo = $result->fetch_field()) {

        /* get fieldpointer offset */
        $currentfield = $result->current_field;

        printf("Column %d:\n", $currentfield); 
        printf("Name:     %s\n", $finfo->name);
        printf("Table:    %s\n", $finfo->table);
        printf("max. Len: %d\n", $finfo->max_length);
        printf("Flags:    %d\n", $finfo->flags);
        printf("Type:     %d\n\n", $finfo->type);
    }    
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, SurfaceArea from Country ORDER BY Code LIMIT 5";

if ($result = mysqli_query($link, $query)) {

    /* Get field information for all fields */
    while ($finfo = mysqli_fetch_field($result)) {
 
        /* get fieldpointer offset */
        $currentfield = mysqli_field_tell($result);

        printf("Column %d:\n", $currentfield); 
        printf("Name:     %s\n", $finfo->name);
        printf("Table:    %s\n", $finfo->table);
        printf("max. Len: %d\n", $finfo->max_length);
        printf("Flags:    %d\n", $finfo->flags);
        printf("Type:     %d\n\n", $finfo->type);
    }
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_free_result">
    <description><![CDATA[  The mysqli_free_result function frees the memory  associated with the result represented by the   result parameter, which was allocated by   mysqli_query , mysqli_store_result  or mysqli_use_result .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_get_client_info">
    <description><![CDATA[  The mysqli_get_client_info function is used to  return a string representing the client version being used in the  MySQLi extension.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* We don't need a connection to determine
   the version of mysql client library */

printf("Client library version: %s\n", mysqli_get_client_info());
?>]]></description>
      </property>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_get_client_version">
    <description><![CDATA[  Returns client version number as an integer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* We don't need a connection to determine
   the version of mysql client library */

printf("Client library version: %d\n", mysqli_get_client_version());
?>]]></description>
      </property>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_get_host_info">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print host information */
printf("Host info: %s\n", $mysqli->host_info);

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print host information */
printf("Host info: %s\n", mysqli_get_host_info($link));

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_get_proto_info">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print protocol version */
printf("Protocol version: %d\n", $mysqli->protocol_version);

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print protocol version */
printf("Protocol version: %d\n", mysqli_get_proto_info($link));

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_get_server_info">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print server version */
printf("Server version: %s\n", $mysqli->server_info);

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print server version */
printf("Server version: %s\n", mysqli_get_server_info($link));

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_get_server_version">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print server version */
printf("Server version: %d\n", $mysqli->server_version);

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* print server version */
printf("Server version: %d\n", mysqli_get_server_version($link));

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_info">
    <description><![CDATA[ Object oriented style (property)]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TEMPORARY TABLE t1 LIKE City");

/* INSERT INTO .. SELECT */
$mysqli->query("INSERT INTO t1 SELECT * FROM City ORDER BY ID LIMIT 150");
printf("%s\n", $mysqli->info);

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TEMPORARY TABLE t1 LIKE City");

/* INSERT INTO .. SELECT */
mysqli_query($link, "INSERT INTO t1 SELECT * FROM City ORDER BY ID LIMIT 150");
printf("%s\n", mysqli_info($link));

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_init">
    <description><![CDATA[  Allocates or initializes a MYSQL object suitable for   mysqli_options and mysqli_real_connect .  ]]></description>
    <properties>
      <property ref="ret_mysqli" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_insert_id">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TABLE myCity LIKE City");

$query = "INSERT INTO myCity VALUES (NULL, 'Stuttgart', 'DEU', 'Stuttgart', 617000)";
$mysqli->query($query);

printf ("New Record has id %d.\n", $mysqli->insert_id);

/* drop table */
$mysqli->query("DROP TABLE myCity");

/* close connection */
$mysqli->close();
?>

  

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TABLE myCity LIKE City");

$query = "INSERT INTO myCity VALUES (NULL, 'Stuttgart', 'DEU', 'Stuttgart', 617000)";
mysqli_query($link, $query);

printf ("New Record has id %d.\n", mysqli_insert_id($link));

/* drop table */
mysqli_query($link, "DROP TABLE myCity");

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_kill">
    <description><![CDATA[  This function is used to ask the server to kill a MySQL thread specified  by the processid parameter. This value must be  retrieved by calling the mysqli_thread_id function.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* determine our thread id */
$thread_id = $mysqli->thread_id;

/* Kill connection */
$mysqli->kill($thread_id);

/* This should produce an error */
if (!$mysqli->query("CREATE TABLE myCity LIKE City")) {
    printf("Error: %s\n", $mysqli->error);
    exit;
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* determine our thread id */
$thread_id = mysqli_thread_id($link);

/* Kill connection */
mysqli_kill($link, $thread_id);

/* This should produce an error */
if (!mysqli_query($link, "CREATE TABLE myCity LIKE City")) {
    printf("Error: %s\n", mysqli_error($link));
    exit;
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="MaxDB_8" />
      <property ref="MaxDB_8" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_master_query">
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_more_results">
    <description><![CDATA[   mysqli_more_results indicates if one or more result sets  are available from a previous call to mysqli_multi_query .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_multi_query">
    <description><![CDATA[  The mysqli_multi_query executes one or multiple queries  which are concatenated by a semicolon.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query  = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* execute multi query */
if ($mysqli->multi_query($query)) {
    do {
        /* store first result set */
        if ($result = $mysqli->store_result()) {
            while ($row = $result->fetch_row()) {
                printf("%s\n", $row[0]);
            }
            $result->close();
        }
        /* print divider */
        if ($mysqli->more_results()) {
            printf("-----------------\n");
        }
    } while ($mysqli->next_result());
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query  = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* execute multi query */
if (mysqli_multi_query($link, $query)) {
    do {
        /* store first result set */
        if ($result = mysqli_store_result($link)) {
            while ($row = mysqli_fetch_row($result)) {
                printf("%s\n", $row[0]);
            }
            mysqli_free_result($result);
        }
        /* print divider */
        if (mysqli_more_results($link)) {
            printf("-----------------\n");
        }
    } while (mysqli_next_result($link));
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_next_result">
    <description><![CDATA[   mysqli_next_result prepares next result set from a previous  call to mysqli_multi_query which can be retrieved by   mysqli_store_result or   mysqli_use_result .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_num_fields">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if ($result = $mysqli->query("SELECT * FROM City ORDER BY ID LIMIT 1")) {

    /* determine number of fields in result set */
    $field_cnt = $result->field_count;

    printf("Result set has %d fields.\n", $field_cnt);

    /* close result set */
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if ($result = mysqli_query($link, "SELECT * FROM City ORDER BY ID LIMIT 1")) {

    /* determine number of fields in result set */
    $field_cnt = mysqli_num_fields($result);

    printf("Result set has %d fields.\n", $field_cnt);

    /* close result set */
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_3" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_num_rows">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if ($result = $mysqli->query("SELECT Code, Name FROM Country ORDER BY Name")) {

    /* determine number of rows result set */
    $row_cnt = $result->num_rows;

    printf("Result set has %d rows.\n", $row_cnt);

    /* close result set */
    $result->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if ($result = mysqli_query($link, "SELECT Code, Name FROM Country ORDER BY Name")) {

    /* determine number of rows result set */
    $row_cnt = mysqli_num_rows($result);

    printf("Result set has %d rows.\n", $row_cnt);

    /* close result set */
    mysqli_free_result($result);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="result" type="mysqli" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_options">
    <description><![CDATA[   mysqli_options can be used to set extra connect options  and affect behavior for a connection.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="CURL_7" />
      <property ref="Arrays_14" />
      <property ref="CURL_7" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_ping">
    <description><![CDATA[  Checks whether the connection to the server is working. If it has gone  down, and global option is enabled  an automatic reconnection is attempted.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* check if server is alive */
if ($mysqli->ping()) {
    printf ("Our connection is ok!\n");
} else {
    printf ("Error: %s\n", $mysqli->error);
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* check if server is alive */
if (mysqli_ping($link)) {
    printf ("Our connection is ok!\n");
} else {
    printf ("Error: %s\n", mysqli_error($link));
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_prepare">
    <description><![CDATA[   mysqli_prepare prepares the SQL query pointed to by the  null-terminated string query, and returns a statement handle to be used for  further operations on the statement. The query must consist of a single SQL statement.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$city = "Amersfoort";

/* create a prepared statement */
if ($stmt = $mysqli->prepare("SELECT District FROM City WHERE Name=?")) {

    /* bind parameters for markers */
    $stmt->bind_param("s", $city);

    /* execute query */
    $stmt->execute();

    /* bind result variables */
    $stmt->bind_result($district);

    /* fetch value */
    $stmt->fetch();

    printf("%s is in district %s\n", $city, $district);

    /* close statement */
    $stmt->close();
} 

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$city = "Amersfoort";

/* create a prepared statement */
if ($stmt = mysqli_prepare($link, "SELECT District FROM City WHERE Name=?")) {

    /* bind parameters for markers */
    mysqli_stmt_bind_param($stmt, "s", $city);

    /* execute query */
    mysqli_stmt_execute($stmt);

    /* bind result variables */
    mysqli_stmt_bind_result($stmt, $district);

    /* fetch value */
    mysqli_stmt_fetch($stmt);

    printf("%s is in district %s\n", $city, $district);

    /* close statement */
    mysqli_stmt_close($stmt);
} 

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_query">
    <description><![CDATA[  The mysqli_query function is used to simplify the  act of performing a query against the database represented by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Create table doesn't return a resultset */
if ($mysqli->query("CREATE TEMPORARY TABLE myCity LIKE City") === TRUE) {
    printf("Table myCity successfully created.\n");
}

/* Select queries return a resultset */
if ($result = $mysqli->query("SELECT Name FROM City LIMIT 10")) {
    printf("Select returned %d rows.\n", $result->num_rows);

    /* free result set */
    $result->close();
}

/* If we have to retrieve large amount of data we use MYSQLI_USE_RESULT */
if ($result = $mysqli->query("SELECT * FROM City", MYSQLI_USE_RESULT)) {

    /* Note, that we can't execute any functions which interact with the
       server until result set was closed. All calls will return an 
       'out of sync' error */
    if (!$mysqli->query("SET @a:='this will not work'")) {
        printf("Error: %s\n", $mysqli->error);
    }
    $result->close();
}

$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Create table doesn't return a resultset */
if (mysqli_query($link, "CREATE TEMPORARY TABLE myCity LIKE City") === TRUE) {
    printf("Table myCity successfully created.\n");
}

/* Select queries return a resultset */
if ($result = mysqli_query($link, "SELECT Name FROM City LIMIT 10")) {
    printf("Select returned %d rows.\n", mysqli_num_rows($result));

    /* free result set */
    mysqli_free_result($result);
}

/* If we have to retrieve large amount of data we use MYSQLI_USE_RESULT */
if ($result = mysqli_query($link, "SELECT * FROM City", MYSQLI_USE_RESULT)) {

    /* Note, that we can't execute any functions which interact with the
       server until result set was closed. All calls will return an 
       'out of sync' error */
    if (!mysqli_query($link, "SET @a:='this will not work'")) {
        printf("Error: %s\n", mysqli_error($link));
    }
    mysqli_free_result($result);
}

mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="MaxDB_9" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_real_connect">
    <description><![CDATA[   mysqli_real_connect attempts to establish a  connection to a MySQL database engine running on   hostname .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

/* create a connection object which is not connected */
$mysqli = mysqli_init();

/* set connection options */
$mysqli->options(MYSQLI_INIT_COMMAND, "SET AUTOCOMMIT=0");
$mysqli->options(MYSQLI_OPT_CONNECT_TIMEOUT, 5);

/* connect to server */
$mysqli->real_connect('localhost', 'my_user', 'my_password', 'world');

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

printf ("Connection: %s\n.", $mysqli->host_info);

$mysqli->close();
?>

    

<?php

/* create a connection object which is not connected */
$link = mysqli_init();

/* set connection options */
mysqli_options($link, MYSQLI_INIT_COMMAND, "SET AUTOCOMMIT=0");
mysqli_options($link, MYSQLI_OPT_CONNECT_TIMEOUT, 5);

/* connect to server */
mysqli_real_connect($link, 'localhost', 'my_user', 'my_password', 'world');

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

printf ("Connection: %s\n.", mysqli_get_host_info($link));

mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="FrontBase_5" />
      <property ref="Firebird/InterBase_18" />
      <property ref="MaxDB_2" />
      <property ref="MaxDB_3" />
      <property ref="FTP_5" />
      <property ref="MaxDB_4" />
      <property ref="COM_29" />
      <property ref="FrontBase_5" />
      <property ref="Firebird/InterBase_18" />
      <property ref="MaxDB_2" />
      <property ref="MaxDB_3" />
      <property ref="FTP_5" />
      <property ref="MaxDB_4" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_real_escape_string">
    <description><![CDATA[  This function is used to create a legal SQL string that you can use in a SQL statement.  The string is encoded to an escaped SQL string, taking into  account the current character set of the connection.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TEMPORARY TABLE myCity LIKE City");

$city = "'s Hertogenbosch";

/* this query will fail, cause we didn't escape $city */
if (!$mysqli->query("INSERT into myCity (Name) VALUES ('$city')")) {
    printf("Error: %s\n", $mysqli->sqlstate);
}

$city = $mysqli->real_escape_string($city);

/* this query with escaped $city will work */
if ($mysqli->query("INSERT into myCity (Name) VALUES ('$city')")) {
    printf("%d Row inserted.\n", $mysqli->affected_rows);
} 

$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TEMPORARY TABLE myCity LIKE City");

$city = "'s Hertogenbosch";

/* this query will fail, cause we didn't escape $city */
if (!mysqli_query($link, "INSERT into myCity (Name) VALUES ('$city')")) {
    printf("Error: %s\n", mysqli_sqlstate($link));
}

$city = mysqli_real_escape_string($link, $city);

/* this query with escaped $city will work */
if (mysqli_query($link, "INSERT into myCity (Name) VALUES ('$city')")) {
    printf("%d Row inserted.\n", mysqli_affected_rows($link));
} 

mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_1" />
      <property ref="MaxDB_10" />
      <property ref="MaxDB_10" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_real_query">
    <description><![CDATA[  The mysqli_real_query function is used to execute  only a query against the database represented by the link  whose result can then be retrieved or stored using the   mysqli_store_result or mysqli_use_result  functions.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_report">
    <description><![CDATA[   mysqli_report is a powerful function to improve your queries  and code during development and testing phase. Depending on the flags it reports  errors from mysqli function calls or queries which don't use an index (or use a bad  index).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* activate reporting */
mysqli_report(MYSQLI_REPORT_ALL);

$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* this query should report an error */
$result = $mysqli->query("SELECT Name FROM Nonexistingtable WHERE population > 50000");

/* this query should report a warning */
$result = $mysqli->query("SELECT Name FROM City WHERE population > 50000");
$result->close();

$mysqli->close();
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Direct IO_4" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_rollback">
    <description><![CDATA[  Rollbacks the current transaction for the database specified by the   link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* disable autocommit */
$mysqli->autocommit(FALSE);

$mysqli->query("CREATE TABLE myCity LIKE City");
$mysqli->query("ALTER TABLE myCity Type=InnoDB");
$mysqli->query("INSERT INTO myCity SELECT * FROM City LIMIT 50");

/* commit insert */
$mysqli->commit();

/* delete all rows */
$mysqli->query("DELETE FROM myCity");

if ($result = $mysqli->query("SELECT COUNT(*) FROM myCity")) {
    $row = $result->fetch_row();
    printf("%d rows in table myCity.\n", $row[0]);
    /* Free result */
    $result->close();
}

/* Rollback */
$mysqli->rollback();

if ($result = $mysqli->query("SELECT COUNT(*) FROM myCity")) {
    $row = $result->fetch_row();
    printf("%d rows in table myCity (after rollback).\n", $row[0]);
    /* Free result */
    $result->close();
}

/* Drop table myCity */
$mysqli->query("DROP TABLE myCity");

$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* disable autocommit */
mysqli_autocommit($link, FALSE);

mysqli_query($link, "CREATE TABLE myCity LIKE City");
mysqli_query($link, "ALTER TABLE myCity Type=InnoDB");
mysqli_query($link, "INSERT INTO myCity SELECT * FROM City LIMIT 50");

/* commit insert */
mysqli_commit($link);

/* delete all rows */
mysqli_query($link, "DELETE FROM myCity");

if ($result = mysqli_query($link, "SELECT COUNT(*) FROM myCity")) {
    $row = mysqli_fetch_row($result);
    printf("%d rows in table myCity.\n", $row[0]);
    /* Free result */
    mysqli_free_result($result);
}

/* Rollback */
mysqli_rollback($link);

if ($result = mysqli_query($link, "SELECT COUNT(*) FROM myCity")) {
    $row = mysqli_fetch_row($result);
    printf("%d rows in table myCity (after rollback).\n", $row[0]);
    /* Free result */
    mysqli_free_result($result);
}

/* Drop table myCity */
mysqli_query($link, "DROP TABLE myCity");

mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_rpl_parse_enabled">
    <properties>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_rpl_probe">
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_rpl_query_type">
    <properties>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_select_db">
    <description><![CDATA[  The mysqli_select_db function selects the default  database (specified by the dbname parameter) to be  used when performing queries against the database connection  represented by the link parameter.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "test");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* return name of current default database */
if ($result = $mysqli->query("SELECT DATABASE()")) {
    $row = $result->fetch_row();
    printf("Default database is %s.\n", $row[0]);
    $result->close();
}

/* change db to world db */
$mysqli->select_db("world");

/* return name of current default database */
if ($result = $mysqli->query("SELECT DATABASE()")) {
    $row = $result->fetch_row();
    printf("Default database is %s.\n", $row[0]);
    $result->close();
}

$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "test");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* return name of current default database */
if ($result = mysqli_query($link, "SELECT DATABASE()")) {
    $row = mysqli_fetch_row($result);
    printf("Default database is %s.\n", $row[0]);
    mysqli_free_result($result);
}

/* change db to world db */
mysqli_select_db($link, "world");

/* return name of current default database */
if ($result = mysqli_query($link, "SELECT DATABASE()")) {
    $row = mysqli_fetch_row($result);
    printf("Default database is %s.\n", $row[0]);
    mysqli_free_result($result);
}

mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="MaxDB_11" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_send_query">
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_server_end">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_server_init">
    <properties>
      <property ref="ret_bool" />
      <property ref="MaxDB_12" />
      <property ref="MaxDB_13" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_sqlstate">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Table City already exists, so we should get an error */
if (!$mysqli->query("CREATE TABLE City (ID INT, Name VARCHAR(30))")) {
    printf("Error - SQLSTATE %s.\n", $mysqli->sqlstate);
}

$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* Table City already exists, so we should get an error */
if (!mysqli_query($link, "CREATE TABLE City (ID INT, Name VARCHAR(30))")) {
    printf("Error - SQLSTATE %s.\n", mysqli_sqlstate($link));
}

mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_ssl_set">
    <description><![CDATA[  The function mysqli_ssl_set is used for establishing  secure connections using SSL. It must be called before   mysqli_real_connect . This function does nothing  unless OpenSSL support is enabled.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_1" />
      <property ref="DB++_11" />
      <property ref="MaxDB_14" />
      <property ref="MaxDB_15" />
      <property ref="MaxDB_16" />
      <property ref="MaxDB_17" />
      <property ref="DB++_11" />
      <property ref="MaxDB_14" />
      <property ref="MaxDB_15" />
      <property ref="MaxDB_16" />
      <property ref="MaxDB_17" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stat">
    <description><![CDATA[   mysqli_stat returns a string containing  information similar to that provided by the 'mysqladmin status' command.  This includes uptime in seconds and the number of running threads,  questions, reloads, and open tables.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

printf ("System status: %s\n", $mysqli->stat());

$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

printf("System status: %s\n", mysqli_stat($link));

mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_affected_rows">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* create temp table */
$mysqli->query("CREATE TEMPORARY TABLE myCountry LIKE Country");

$query = "INSERT INTO myCountry SELECT * FROM Country WHERE Code LIKE ?";

/* prepare statement */
if ($stmt = $mysqli->prepare($query)) {

    /* Bind variable for placeholder */
    $code = 'A%';
    $stmt->bind_param("s", $code);
    
    /* execute statement */
    $stmt->execute();

    printf("rows inserted: %d\n", $stmt->affected_rows);

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* create temp table */
mysqli_query($link, "CREATE TEMPORARY TABLE myCountry LIKE Country");

$query = "INSERT INTO myCountry SELECT * FROM Country WHERE Code LIKE ?";

/* prepare statement */
if ($stmt = mysqli_prepare($link, $query)) {

    /* Bind variable for placeholder */
    $code = 'A%';
    mysqli_stmt_bind_param($stmt, "s", $code);
    
    /* execute statement */
    mysqli_stmt_execute($stmt);

    printf("rows inserted: %d\n", mysqli_stmt_affected_rows($stmt));

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property kind="parameter" name="stmt" type="mysqli_stmt" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_bind_param">
    <description><![CDATA[   mysqli_stmt_bind_param is used to bind variables for the  parameter markers in the SQL statement that was passed to   mysqli_prepare .  The string types contains one or more characters which specify  the types for the corresponding bind variables    ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$stmt = $mysqli->prepare("INSERT INTO CountryLanguage VALUES (?, ?, ?, ?)");
$stmt->bind_param('sssd', $code, $language, $official, $percent);

$code = 'DEU';
$language = 'Bavarian';
$official = "F";
$percent = 11.2;

/* execute prepared statement */
$stmt->execute();

printf("%d Row inserted.\n", $stmt->affected_rows);

/* close statement and connection */
$stmt->close();

/* Clean up table CountryLanguage */
$mysqli->query("DELETE FROM CountryLanguage WHERE Language='Bavarian'");
printf("%d Row deleted.\n", $mysqli->affected_rows);

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect('localhost', 'my_user', 'my_password', 'world');

/* check connection */
if (!$link) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$stmt = mysqli_prepare($link, "INSERT INTO CountryLanguage VALUES (?, ?, ?, ?)");
mysqli_stmt_bind_param($stmt, 'sssd', $code, $language, $official, $percent);

$code = 'DEU';
$language = 'Bavarian';
$official = "F";
$percent = 11.2;

/* execute prepared statement */
mysqi_stmt_execute($stmt);

printf("%d Row inserted.\n", mysqli_stmt_affected_rows($stmt));

/* close statement and connection */
mysqli_stmt_close($stmt);

/* Clean up table CountryLanguage */
mysqli_query($link, "DELETE FROM CountryLanguage WHERE Language='Bavarian'");
printf("%d Row deleted.\n", mysqli_affected_rows($link));

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_5" />
      <property ref="MaxDB_18" />
      <property ref="MaxDB_19" />
      <property ref="Arrays_1" />
      <property kind="parameter" name="types" type="array" required="1" />
      <property ref="MaxDB_19" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_bind_result">
    <description><![CDATA[   mysqli_stmt_bind_result is used to associate (bind) columns in the result  set to variables. When mysqli_stmt_fetch is called to fetch data, the MySQL  client/server protocol places the data for the bound columns into the specified variables   var1, ... .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* prepare statement */
if ($stmt = $mysqli->prepare("SELECT Code, Name FROM Country ORDER BY Name LIMIT 5")) {
    $stmt->execute();

    /* bind variables to prepared statement */
    $stmt->bind_result($col1, $col2);

    /* fetch values */
    while ($stmt->fetch()) {
        printf("%s %s\n", $col1, $col2);
    }

    /* close statement */
    $stmt->close();
}
/* close connection */
$mysqli->close();

?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (!$link) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* prepare statement */
if ($stmt = mysqli_prepare($link, "SELECT Code, Name FROM Country ORDER BY Name LIMIT 5")) {
    mysqli_stmt_execute($stmt);

    /* bind variables to prepared statement */
    mysqli_stmt_bind_result($stmt, $col1, $col2);

    /* fetch values */
    while (mysqli_stmt_fetch($stmt)) {
       printf("%s %s\n", $col1, $col2);
    }

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_5" />
      <property ref="MaxDB_19" />
      <property ref="Arrays_1" />
      <property ref="MaxDB_19" />
      <property ref="Arrays_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_close">
    <description><![CDATA[  Closes a prepared statement. mysqli_stmt_close also deallocates the  statement handle pointed to by stmt .  If the current statement has pending or unread results, this function cancels them so that  the next query can be executed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_data_seek">
    <description><![CDATA[  The mysqli_stmt_data_seek function seeks to an arbitrary result pointer  specified by the offset in the statement result set represented by   statement . The offset parameter must be between  zero and the total number of rows minus one (0.. mysqli_stmt_num_rows - 1).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name";
if ($stmt = $mysqli->prepare($query)) {

    /* execute query */
    $stmt->execute();

    /* bind result variables */
    $stmt->bind_result($name, $code);

    /* store result */
    $stmt->store_result();

    /* seek to row no. 400 */
    $stmt->data_seek(399);

    /* fetch values */
    $stmt->fetch();

    printf ("City: %s  Countrycode: %s\n", $name, $code);

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name";
if ($stmt = mysqli_prepare($link, $query)) {

    /* execute query */
    mysqli_stmt_execute($stmt);

    /* bind result variables */
    mysqli_stmt_bind_result($stmt, $name, $code);

    /* store result */
    mysqli_stmt_store_result($stmt);

    /* seek to row no. 400 */
    mysqli_stmt_data_seek($stmt, 399);

    /* fetch values */
    mysqli_stmt_fetch($stmt);

    printf ("City: %s  Countrycode: %s\n", $name, $code);

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="statement" type="mysqli_stmt" required="1" />
      <property ref="Arrays_35" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_errno">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TABLE myCountry LIKE Country");
$mysqli->query("INSERT INTO myCountry SELECT * FROM Country");


$query = "SELECT Name, Code FROM myCountry ORDER BY Name";
if ($stmt = $mysqli->prepare($query)) {

    /* drop table */
    $mysqli->query("DROP TABLE myCountry");

    /* execute query */
    $stmt->execute();

    printf("Error: %d.\n", $stmt->errno);

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TABLE myCountry LIKE Country");
mysqli_query($link, "INSERT INTO myCountry SELECT * FROM Country");


$query = "SELECT Name, Code FROM myCountry ORDER BY Name";
if ($stmt = mysqli_prepare($link, $query)) {

    /* drop table */
    mysqli_query($link, "DROP TABLE myCountry");

    /* execute query */
    mysqli_stmt_execute($stmt);

    printf("Error: %d.\n", mysqli_stmt_errno($stmt));

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_error">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TABLE myCountry LIKE Country");
$mysqli->query("INSERT INTO myCountry SELECT * FROM Country");


$query = "SELECT Name, Code FROM myCountry ORDER BY Name";
if ($stmt = $mysqli->prepare($query)) {

    /* drop table */
    $mysqli->query("DROP TABLE myCountry");

    /* execute query */
    $stmt->execute();

    printf("Error: %s.\n", $stmt->error);

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TABLE myCountry LIKE Country");
mysqli_query($link, "INSERT INTO myCountry SELECT * FROM Country");


$query = "SELECT Name, Code FROM myCountry ORDER BY Name";
if ($stmt = mysqli_prepare($link, $query)) {

    /* drop table */
    mysqli_query($link, "DROP TABLE myCountry");

    /* execute query */
    mysqli_stmt_execute($stmt);

    printf("Error: %s.\n", mysqli_stmt_error($stmt));

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_execute">
    <description><![CDATA[  The mysqli_stmt_execute function executes a query that has been previously  prepared using the mysqli_prepare function represented by the   stmt object. When executed any parameter markers which exist will  automatically be replaced with the appropiate data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");
   
/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
   
$mysqli->query("CREATE TABLE myCity LIKE City");
 
/* Prepare an insert statement */
$query = "INSERT INTO myCity (Name, CountryCode, District) VALUES (?,?,?)";
$stmt = $mysqli->prepare($query);

$stmt->bind_param("sss", $val1, $val2, $val3);

$val1 = 'Stuttgart';
$val2 = 'DEU';
$val3 = 'Baden-Wuerttemberg';
    
/* Execute the statement */
$stmt->execute();

$val1 = 'Bordeaux';
$val2 = 'FRA';
$val3 = 'Aquitaine';
    
/* Execute the statement */
$stmt->execute();

/* close statement */
$stmt->close();

/* retrieve all rows from myCity */
$query = "SELECT Name, CountryCode, District FROM myCity";
if ($result = $mysqli->query($query)) {
    while ($row = $result->fetch_row()) {
        printf("%s (%s,%s)\n", $row[0], $row[1], $row[2]);
    }
    /* free result set */
    $result->close();
}

/* remove table */
$mysqli->query("DROP TABLE myCity");

/* close connection */    
$mysqli->close(); 
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");
   
/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
   
mysqli_query($link, "CREATE TABLE myCity LIKE City");
 
/* Prepare an insert statement */
$query = "INSERT INTO myCity (Name, CountryCode, District) VALUES (?,?,?)";
$stmt = mysqli_prepare($link, $query);

mysqli_stmt_bind_param($stmt, "sss", $val1, $val2, $val3);

$val1 = 'Stuttgart';
$val2 = 'DEU';
$val3 = 'Baden-Wuerttemberg';
    
/* Execute the statement */
mysqli_stmt_execute($stmt);

$val1 = 'Bordeaux';
$val2 = 'FRA';
$val3 = 'Aquitaine';
    
/* Execute the statement */
mysqli_stmt_execute($stmt);

/* close statement */
mysqli_stmt_close($stmt);

/* retrieve all rows from myCity */
$query = "SELECT Name, CountryCode, District FROM myCity";
if ($result = mysqli_query($link, $query)) {
    while ($row = mysqli_fetch_row($result)) {
        printf("%s (%s,%s)\n", $row[0], $row[1], $row[2]);
    }
    /* free result set */
    mysqli_free_result($result);
}

/* remove table */
mysqli_query($link, "DROP TABLE myCity");

/* close connection */    
mysqli_close($link); 
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_fetch">
    <description><![CDATA[   mysqli_stmt_fetch fetch the result from a prepared  statement into the variables bound by   mysqli_stmt_bind_result .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}
 
$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 150,5";

if ($stmt = $mysqli->prepare($query)) {

    /* execute statement */
    $stmt->execute();

    /* bind result variables */
    $stmt->bind_result($name, $code);

    /* fetch values */
    while ($stmt->fetch()) {
        printf ("%s (%s)\n", $name, $code);
    }

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER by ID DESC LIMIT 150,5";

if ($stmt = mysqli_prepare($link, $query)) {

    /* execute statement */
    mysqli_stmt_execute($stmt);

    /* bind result variables */
    mysqli_stmt_bind_result($stmt, $name, $code);

    /* fetch values */
    while (mysqli_stmt_fetch($stmt)) {
        printf ("%s (%s)\n", $name, $code);
    }

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_free_result">
    <description><![CDATA[  The mysqli_stmt_free_result function frees the result memory  associated with the statement represented by the   stmt parameter, which was allocated by   mysqli_stmt_store_result .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_init">
    <description><![CDATA[  Allocates and initializes a statement object suitable for   mysqli_stmt_prepare .  ]]></description>
    <properties>
      <property kind="return" type="mysqli_stmt" />	
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_num_rows">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20";
if ($stmt = $mysqli->prepare($query)) {

    /* execute query */
    $stmt->execute();

    /* store result */
    $stmt->store_result();

    printf("Number of rows: %d.\n", $stmt->num_rows);

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20";
if ($stmt = mysqli_prepare($link, $query)) {

    /* execute query */
    mysqli_stmt_execute($stmt);

    /* store result */
    mysqli_stmt_store_result($stmt);

    printf("Number of rows: %d.\n", mysqli_stmt_num_rows($stmt));

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_param_count">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if ($stmt = $mysqli->prepare("SELECT Name FROM Country WHERE Name=? OR Code=?")) {

    $marker = $stmt->param_count;
    printf("Statement has %d markers.\n", $marker);

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

if ($stmt = mysqli_prepare($link, "SELECT Name FROM Country WHERE Name=? OR Code=?")) {

    $marker = mysqli_stmt_param_count($stmt);
    printf("Statement has %d markers.\n", $marker);

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_prepare">
    <description><![CDATA[   mysqli_stmt_prepare prepares the SQL query pointed to by the  null-terminated string query. The statement object has to be allocated by   mysqli_stmt_init .  The query must consist of a single SQL statement.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$city = "Amersfoort";

/* create a prepared statement */
$stmt =  $mysqli->stmt_init();
if ($stmt->prepare("SELECT District FROM City WHERE Name=?")) {

    /* bind parameters for markers */
    $stmt->bind_param("s", $city);

    /* execute query */
    $stmt->execute();

    /* bind result variables */
    $stmt->bind_result($district);

    /* fetch value */
    $stmt->fetch();

    printf("%s is in district %s\n", $city, $district);

    /* close statement */
    $stmt->close();
} 

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$city = "Amersfoort";

/* create a prepared statement */
$stmt = mysqli_stmt_init();
if ($stmt = mysqli_stmt_prepare($stmt, "SELECT District FROM City WHERE Name=?")) {

    /* bind parameters for markers */
    mysqli_stmt_bind_param($stmt, "s", $city);

    /* execute query */
    mysqli_stmt_execute($stmt);

    /* bind result variables */
    mysqli_stmt_bind_result($stmt, $district);

    /* fetch value */
    mysqli_stmt_fetch($stmt);

    printf("%s is in district %s\n", $city, $district);

    /* close statement */
    mysqli_stmt_close($stmt);
} 

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_5" />
      <property ref="Cyrus IMAP_12" />
      <property ref="Cyrus IMAP_12" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_reset">
    <description><![CDATA[  The mysqli_stmt_reset resets a prepared statement on client and server  to state after prepare. For now this is mainly used to reset data sent with   mysqli_stmt_send_long_data .  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_result_metadata">
    <description><![CDATA[  If a statement passed to mysqli_prepare is one that produces  a result set, mysqli_stmt_result_metadata returns the result object  that can be used to process the meta information such as total number of fields  and individual field information.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "test");

$mysqli->query("DROP TABLE IF EXISTS friends"); 
$mysqli->query("CREATE TABLE friends (id int, name varchar(20))"); 
 
$mysqli->query("INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')");

$stmt = $mysqli->prepare("SELECT id, name FROM friends");
$stmt->execute();

/* get resultset for metadata */
$result = $stmt->result_metadata();

/* retrieve field information from metadata result set */
$field = $result->fetch_field();

printf("Fieldname: %s\n", $field->name);

/* close resultset */
$result->close();

/* close connection */
$mysqli->close();
?>

      

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "test");

mysqli_query($link, "DROP TABLE IF EXISTS friends"); 
mysqli_query($link, "CREATE TABLE friends (id int, name varchar(20))"); 
 
mysqli_query($link, "INSERT INTO friends VALUES (1,'Hartmut'), (2, 'Ulf')");

$stmt = mysqli_prepare($link, "SELECT id, name FROM friends");
mysqli_stmt_execute($stmt);

/* get resultset for metadata */
$result = mysqli_stmt_result_metadata($stmt);

/* retrieve field information from metadata result set */
$field = mysqli_fetch_field($result);

printf("Fieldname: %s\n", $field->name);

/* close resultset */
mysqli_free_result($result);

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_send_long_data">
    <description><![CDATA[  Allows to send parameter data to the server in pieces (or chunks), e.g. if the  size of a blob exceeds the size of .  This function can be called multiple times to send the parts of a character or  binary data value for a column, which must be one of the TEXT or BLOB datatypes.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="mysqli_5" />
      <property ref="MaxDB_20" />
      <property ref="Bzip2_7" />
      <property ref="MaxDB_20" />
      <property ref="Bzip2_7" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_sqlstate">
    <description><![CDATA[  Returns a string containing the SQLSTATE error code  for the most recently invoked prepared statement function that can succeed or fail.  The error code consists of five characters. means no error.  The values are specified by ANSI SQL and ODBC. For a list of possible values, see   .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TABLE myCountry LIKE Country");
$mysqli->query("INSERT INTO myCountry SELECT * FROM Country");


$query = "SELECT Name, Code FROM myCountry ORDER BY Name";
if ($stmt = $mysqli->prepare($query)) {

    /* drop table */
    $mysqli->query("DROP TABLE myCountry");

    /* execute query */
    $stmt->execute();

    printf("Error: %s.\n", $stmt->sqlstate);

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TABLE myCountry LIKE Country");
mysqli_query($link, "INSERT INTO myCountry SELECT * FROM Country");


$query = "SELECT Name, Code FROM myCountry ORDER BY Name";
if ($stmt = mysqli_prepare($link, $query)) {

    /* drop table */
    mysqli_query($link, "DROP TABLE myCountry");

    /* execute query */
    mysqli_stmt_execute($stmt);

    printf("Error: %s.\n", mysqli_stmt_sqlstate($stmt));

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_stmt_store_result">
    <description><![CDATA[  You must call mysqli_stmt_store_result for every query that  successfully produces a result set ( ),  and only if you want to buffer the complete result set by the client,  so that the subsequent mysqli_fetch call returns buffered data.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Open a connection */
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20";
if ($stmt = $mysqli->prepare($query)) {

    /* execute query */
    $stmt->execute();

    /* store result */
    $stmt->store_result();

    printf("Number of rows: %d.\n", $stmt->num_rows);

    /* free result */
    $stmt->free_result();

    /* close statement */
    $stmt->close();
}

/* close connection */
$mysqli->close();
?>

    

<?php
/* Open a connection */
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */ 
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query = "SELECT Name, CountryCode FROM City ORDER BY Name LIMIT 20";
if ($stmt = mysqli_prepare($link, $query)) {

    /* execute query */
    mysqli_stmt_execute($stmt);

    /* store result */
    mysqli_stmt_store_result($stmt);

    printf("Number of rows: %d.\n", mysqli_stmt_num_rows($stmt));

    /* free result */
    mysqli_stmt_free_result($stmt);

    /* close statement */
    mysqli_stmt_close($stmt);
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="mysqli_5" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_store_result">
    <description><![CDATA[  Transfers the result set from the last query on the database connection  represented by the link parameter to be used with  the mysqli_data_seek function.  ]]></description>
    <properties>
      <property kind="return" type="mysqli_result" />	
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_thread_id">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* determine our thread id */
$thread_id = $mysqli->thread_id;

/* Kill connection */
$mysqli->kill($thread_id);

/* This should produce an error */
if (!$mysqli->query("CREATE TABLE myCity LIKE City")) {
    printf("Error: %s\n", $mysqli->error);
    exit;
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

/* determine our thread id */
$thread_id = mysqli_thread_id($link);

/* Kill connection */
mysqli_kill($link, $thread_id);

/* This should produce an error */
if (!mysqli_query($link, "CREATE TABLE myCity LIKE City")) {
    printf("Error: %s\n", mysqli_error($link));
    exit;
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_thread_safe">
    <description><![CDATA[   mysqli_thread_safe indicates whether the  client library is compiled as thread-safe.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_use_result">
    <description><![CDATA[   mysqli_use_result is used to initiate the retrieval  of a result set from the last query executed using the   mysqli_real_query function on the database connection  specified by the link parameter. Either this or the   mysqli_store_result function must be called before the  results of a query can be retrieved, and one or the other must be called  to prevent the next query on that database connection from failing.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query  = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* execute multi query */
if ($mysqli->multi_query($query)) {
    do {
        /* store first result set */
        if ($result = $mysqli->use_result()) {
            while ($row = $result->fetch_row()) {
                printf("%s\n", $row[0]);
            }
            $result->close();
        }
        /* print divider */
        if ($mysqli->more_results()) {
            printf("-----------------\n");
        }
    } while ($mysqli->next_result());
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$query  = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* execute multi query */
if (mysqli_multi_query($link, $query)) {
    do {
        /* store first result set */
        if ($result = mysqli_use_result($link)) {
            while ($row = mysqli_fetch_row($result)) {
                printf("%s\n", $row[0]);
            }
            mysqli_free_result($result);
        }
        /* print divider */
        if (mysqli_more_results($link)) {
            printf("-----------------\n");
        }
    } while (mysqli_next_result($link));
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
  <element kind="function" name="mysqli_warning_count">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

$mysqli->query("CREATE TABLE myCity LIKE City");

/* a remarkable city in Wales */
$query = "INSERT INTO myCity (CountryCode, Name) VALUES('GBR',
        'Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch')";

$mysqli->query($query);

if ($mysqli->warning_count) {
    if ($result = $mysqli->query("SHOW WARNINGS")) {
        $row = $result->fetch_row();
        printf("%s (%d): %s\n", $row[0], $row[1], $row[2]);
        $result->close();
    }
}

/* close connection */
$mysqli->close();
?>

    

<?php
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

/* check connection */
if (mysqli_connect_errno()) {
    printf("Connect failed: %s\n", mysqli_connect_error());
    exit();
}

mysqli_query($link, "CREATE TABLE myCity LIKE City");

/* a remarkable long city name in Wales */
$query = "INSERT INTO myCity (CountryCode, Name) VALUES('GBR',
        'Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch')";

mysqli_query($link, $query);

if (mysqli_warning_count($link)) {
    if ($result = mysqli_query($link, "SHOW WARNINGS")) {
        $row = mysqli_fetch_row($result);
        printf("%s (%d): %s\n", $row[0], $row[1], $row[2]);
        mysqli_free_result($result);
    }
}

/* close connection */
mysqli_close($link);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="mysqli_1" />
    </properties>
    
  </element>
</group>
<group name="openal">
  <description><![CDATA[OpenAL Audio Bindings]]></description>
  <element kind="function" name="openal_buffer_create">
    <description><![CDATA[  Returns an resource on success or   on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="openal_buffer_data">
    <description><![CDATA[  An resource  (previously created by openal_buffer_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="buffer" type="resource" required="1" />
      <property ref="Ncurses_51" />
      <property ref="Bzip2_7" />
      <property kind="parameter" name="freq" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openal_buffer_destroy">
    <description><![CDATA[  An resource  (previously created by openal_buffer_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="openal_1" />
    </properties>
    
  </element>
  <element kind="function" name="openal_buffer_get">
    <description><![CDATA[  An resource  (previously created by openal_buffer_create ).  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="openal_1" />
      <property kind="parameter" name="property" type="int" required="1" >
      <description>  Specific property, one of:   ,   ,     .  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="openal_buffer_loadwav">
    <description><![CDATA[  An resource  (previously created by openal_buffer_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="openal_1" />
      <property kind="parameter" name="wavfile" type="string" required="1" >
      <description>  Path to .WAV file on file system.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="openal_context_create">
    <description><![CDATA[  An resource  (previously created by openal_device_open ).  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="device" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openal_context_current">
    <description><![CDATA[  An resource  (previously created by openal_context_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="context" type="resource" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="openal_context_destroy">
    <description><![CDATA[  An resource  (previously created by openal_context_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="openal_6" />
    </properties>
    
  </element>
  <element kind="function" name="openal_context_process">
    <description><![CDATA[  An resource  (previously created by openal_context_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="openal_6" />
    </properties>
    
  </element>
  <element kind="function" name="openal_context_suspend">
    <description><![CDATA[  An resource  (previously created by openal_context_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="openal_6" />
    </properties>
    
  </element>
  <element kind="function" name="openal_device_close">
    <description><![CDATA[  An resource  (previously created by openal_device_open )  to be closed.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="openal_5" />
    </properties>
    
  </element>
  <element kind="function" name="openal_device_open">
    <description><![CDATA[  Open an audio device optionally specified by device_desc .  If device_desc is not specified the first available audio  device will be used.  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property kind="parameter" name="device_desc" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="openal_listener_get">
    <description><![CDATA[  Property to retrieve, one of:   (float),   (array(float,float,float)),   (array(float,float,float))   (array(float,float,float)).  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="openal_3" />
    </properties>
    
  </element>
  <element kind="function" name="openal_listener_set">
    <description><![CDATA[  Property to set, one of:   (float),   (array(float,float,float)),   (array(float,float,float))   (array(float,float,float)).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="openal_3" />
      <property kind="parameter" name="setting" type="mixed" required="1" >
      <description>  Value to set, either float, or an array of floats as appropriate.  </description>
      </property>
    </properties>
    
  </element>
  <element kind="function" name="openal_source_create">
    <description><![CDATA[  Returns an resource on success or   on failure.  ]]></description>
    <properties>
      <property ref="ret_resource" />
    </properties>
    
  </element>
  <element kind="function" name="openal_source_destroy">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Image_69" />
    </properties>
    
  </element>
  <element kind="function" name="openal_source_get">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="Image_69" />
      <property ref="openal_3" />
    </properties>
    
  </element>
  <element kind="function" name="openal_source_pause">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_69" />
    </properties>
    
  </element>
  <element kind="function" name="openal_source_play">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_69" />
    </properties>
    
  </element>
  <element kind="function" name="openal_source_rewind">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_69" />
    </properties>
    
  </element>
  <element kind="function" name="openal_source_set">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_69" />
      <property ref="openal_3" />
      <property ref="openal_8" />
    </properties>
    
  </element>
  <element kind="function" name="openal_source_stop">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Image_69" />
    </properties>
    
  </element>
  <element kind="function" name="openal_stream">
    <description><![CDATA[  An resource  (previously created by openal_source_create ).  ]]></description>
    <properties>
      <property ref="ret_resource" />
      <property ref="Image_69" />
      <property ref="Ncurses_51" />
      <property ref="Ming (flash)_21" />
    </properties>
    
  </element>
</group>
<group name="qtdom">
  <description><![CDATA[qtdom Functions]]></description>
  <element kind="function" name="qdom_error">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="qdom_tree">
    <properties>
      <property kind="return" type="QDomDocument" />	
      <property kind="parameter" name="doc" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="shmop">
  <description><![CDATA[Shared Memory Functions]]></description>
  <element kind="function" name="shmop_close">
    <description><![CDATA[   shmop_close is used to close a shared memory block.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
shmop_close($shm_id);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="shmid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="shmop_delete">
    <description><![CDATA[   shmop_delete is used to delete a shared memory block.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
shmop_delete($shm_id);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="shmop_1" />
    </properties>
    
  </element>
  <element kind="function" name="shmop_open">
    <description><![CDATA[   shmop_open can create or open a shared memory block.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$shm_key = ftok(__FILE__, 't');
$shm_id = shmop_open($shm_key, "c", 0644, 100);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="MCVE_22" />
      <property ref="DBM_2" />
      <property ref="Calendar_10" />
      <property ref="Arrays_4" />
    </properties>
    
  </element>
  <element kind="function" name="shmop_read">
    <description><![CDATA[   shmop_read will read a string from shared memory block.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$shm_data = shmop_read($shm_id, 0, 50);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="shmop_1" />
      <property ref="GMP_17" />
      <property ref="DOM_13" />
    </properties>
    
  </element>
  <element kind="function" name="shmop_size">
    <description><![CDATA[   shmop_size is used to get the size, in bytes of the  shared memory block.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$shm_size = shmop_size($shm_id);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="shmop_1" />
    </properties>
    
  </element>
  <element kind="function" name="shmop_write">
    <description><![CDATA[   shmop_write will write a string into shared memory block.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$shm_bytes_written = shmop_write($shm_id, $my_string, 0);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="shmop_1" />
      <property ref="Bzip2_7" />
      <property ref="Arrays_35" />
    </properties>
    
  </element>
</group>
<group name="spl">
  <description><![CDATA[Standard PHP Library (SPL) Functions]]></description>
  <element kind="function" name="ArrayIterator::current">
    <description><![CDATA[  This function returns the current array entry  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array('1' => 'one',
               '2' => 'two',
               '3' => 'three');

$arrayobject = new ArrayObject($array);
$iterator = $arrayobject->getIterator();

for($iterator = $arrayobject->getIterator();
    $iterator->valid();
    $iterator->next()) {

    echo $iterator->key() . ' => ' . $iterator->current() . "\n";
}
?>]]></description>
      </property>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayIterator::key">
    <description><![CDATA[  This function returns the current array key  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array('key' => 'value');

$arrayobject = new ArrayObject($array);
$iterator = $arrayobject->getIterator();

echo $iterator->key(); //key
?>]]></description>
      </property>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayIterator::next">
    <description><![CDATA[  This function moves the iterator to the next entry.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$arrayobject = new ArrayObject();

$arrayobject[] = 'zero';
$arrayobject[] = 'one';

$iterator = $arrayobject->getIterator();

while($iterator->valid()) {
    echo $iterator->key() . ' => ' . $iterator->current() . "\n";

    $iterator->next();
}
?>]]></description>
      </property>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayIterator::rewind">
    <description><![CDATA[  This function rewinds the iterator to the beginning.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$arrayobject = new ArrayObject();

$arrayobject[] = 'zero';
$arrayobject[] = 'one';
$arrayobject[] = 'two';

$iterator = $arrayobject->getIterator();

$iterator->next();
echo $iterator->key(); //1

$iterator->rewind(); //rewinding to the begining
echo $iterator->key(); //0
?>]]></description>
      </property>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayIterator::seek">
    <properties>
      <property ref="ret_void" />
      <property ref="Multibyte String_14" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayIterator::valid">
    <description><![CDATA[  This function checks if the array contains any more entries.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array('1' => 'one');

$arrayobject = new ArrayObject($array);
$iterator = $arrayobject->getIterator();

var_dump($iterator->valid()); //bool(true)

$iterator->next(); // advance to the next item

//bool(false) because there is only one array element
var_dump($iterator->valid());
?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::__construct">
    <description><![CDATA[  This constructs a new array object. The input  parameter accepts an array or another ArrayObject.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array('1' => 'one',
               '2' => 'two',
               '3' => 'three');

$arrayobject = new ArrayObject($array);

var_dump($arrayobject);
?>]]></description>
      </property>
      <property kind="return" type="ArrayObject" />	
      <property kind="parameter" name="input" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::append">
    <properties>
      <property ref="ret_void" />
      <property ref="LDAP_28" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::count">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::getIterator">
    <description><![CDATA[  This function will return an iterator from an ArrayObject.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$array = array('1' => 'one',
               '2' => 'two',
               '3' => 'three');

$arrayobject = new ArrayObject($array);

$iterator = $arrayobject->getIterator();

while($iterator->valid()) {
    echo $iterator->key() . ' => ' . $iterator->current() . "\n";

    $iterator->next();
}
?>]]></description>
      </property>
      <property kind="return" type="ArrayIterator" />	
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::offsetExists">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="index" type="mixed" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::offsetGet">
    <properties>
      <property ref="ret_bool" />
      <property ref="spl_2" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::offsetSet">
    <properties>
      <property ref="ret_void" />
      <property ref="spl_2" />
      <property ref="LDAP_28" />
    </properties>
    
  </element>
  <element kind="function" name="ArrayObject::offsetUnset">
    <properties>
      <property ref="ret_void" />
      <property ref="spl_2" />
    </properties>
    
  </element>
  <element kind="function" name="CachingIterator::__toString">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="CachingIterator::hasNext">
    <properties>
      <property kind="return" type="boolean" />	
    </properties>
    
  </element>
  <element kind="function" name="CachingIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="CachingIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="CachingIterator::valid">
    <properties>
      <property ref="ret_boolean" />
    </properties>
    
  </element>
  <element kind="function" name="CachingRecursiveIterator::getChildren">
    <properties>
      <property kind="return" type="CachingRecursiveIterator" />	
    </properties>
    
  </element>
  <element kind="function" name="CachingRecursiveIterator::hasChildren">
    <properties>
      <property kind="return" type="bolean" />	
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::__construct">
    <properties>
      <property kind="return" type="DirectoryIterator" />	
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::current">
    <properties>
      <property ref="ret_DirectoryIterator" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getATime">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getCTime">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getChildren">
    <properties>
      <property kind="return" type="RecursiveDirectoryIterator" />	
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getFilename">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getGroup">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getInode">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getMTime">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getOwner">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getPath">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getPathname">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getPerms">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getSize">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::getType">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::isDir">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::isDot">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::isExecutable">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::isFile">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::isLink">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::isReadable">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::isWritable">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::key">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="DirectoryIterator::valid">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="FilterIterator::current">
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="FilterIterator::getInnerIterator">
    <properties>
      <property kind="return" type="Iterator" />	
    </properties>
    
  </element>
  <element kind="function" name="FilterIterator::key">
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="FilterIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="FilterIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="FilterIterator::valid">
    <properties>
      <property ref="ret_boolean" />
    </properties>
    
  </element>
  <element kind="function" name="LimitIterator::getPosition">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="LimitIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="LimitIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="LimitIterator::seek">
    <properties>
      <property ref="ret_void" />
      <property ref="Multibyte String_14" />
    </properties>
    
  </element>
  <element kind="function" name="LimitIterator::valid">
    <properties>
      <property ref="ret_boolean" />
    </properties>
    
  </element>
  <element kind="function" name="ParentIterator::getChildren">
    <properties>
      <property kind="return" type="ParentIterator" />	
    </properties>
    
  </element>
  <element kind="function" name="ParentIterator::hasChildren">
    <properties>
      <property ref="ret_boolean" />
    </properties>
    
  </element>
  <element kind="function" name="ParentIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="ParentIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveDirectoryIterator::getChildren">
    <properties>
      <property ref="ret_object" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveDirectoryIterator::hasChildren">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="allow_links" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveDirectoryIterator::key">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveDirectoryIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveDirectoryIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveIteratorIterator::current">
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveIteratorIterator::getDepth">
    <properties>
      <property ref="ret_int" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveIteratorIterator::getSubIterator">
    <properties>
      <property kind="return" type="RecursiveIterator" />	
    </properties>
    
  </element>
  <element kind="function" name="RecursiveIteratorIterator::key">
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveIteratorIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveIteratorIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="RecursiveIteratorIterator::valid">
    <properties>
      <property ref="ret_bolean" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLIterator::current">
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLIterator::getChildren">
    <properties>
      <property ref="ret_object" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLIterator::hasChildren">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLIterator::key">
    <properties>
      <property ref="ret_mixed" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLIterator::next">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLIterator::rewind">
    <properties>
      <property ref="ret_void" />
    </properties>
    
  </element>
  <element kind="function" name="SimpleXMLIterator::valid">
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="class_implements">
    <description><![CDATA[  This function returns an array with the name of the interfaces that the  given class implements.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

interface foo { }
class bar implements foo {}

print_r(class_implements(new bar));

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="class" type="object" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="class_parents">
    <description><![CDATA[  This function returns an array with the name of the parent classes of  the given class .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

class foo { }
class bar extends foo {}

print_r(class_parents(new bar));

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="spl_4" />
    </properties>
    
  </element>
  <element kind="function" name="iterator_count">
    <properties>
      <property ref="ret_int" />
      <property kind="parameter" name="iterator" type="IteratorAggregate" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="iterator_to_array">
    <properties>
      <property ref="ret_array" />
      <property ref="spl_5" />
    </properties>
    
  </element>
  <element kind="function" name="spl_classes">
    <description><![CDATA[  This function returns an array with the current available SPL classes.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

print_r(spl_classes());

?>]]></description>
      </property>
      <property ref="ret_array" />
    </properties>
    
  </element>
</group>
<group name="ssh2">
  <description><![CDATA[Secure Shell2 Functions]]></description>
  <element kind="function" name="ssh2_auth_hostbased_file">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22, array('hostkey'=>'ssh-rsa'));

if (ssh2_auth_hostbased_file($connection, 'remoteusername', 'myhost.example.com',
                             '/usr/local/etc/hostkey_rsa.pub',
                             '/usr/local/etc/hostkey_rsa', 'secret',
                             'localusername')) {
  echo "Public Key Hostbased Authentication Successful\n";
} else {
  die('Public Key Hostbased Authentication Failed');
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="session" type="resource" required="1" />
      <property ref="FTP_13" />
      <property ref="Hyperwave API_8" />
      <property kind="parameter" name="pubkeyfile" type="string" required="1" />
      <property kind="parameter" name="privkeyfile" type="string" required="1" />
      <property ref="OpenSSL_15" />
      <property kind="parameter" name="local_username" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_auth_none">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);

$auth_methods = ssh2_auth_none($connection, 'user');

if (in_array('password', $auth_methods)) {
  echo "Server supports password based authentication\n";
}
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="ssh2_1" />
      <property ref="FTP_13" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_auth_password">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);

if (ssh2_auth_password($connection, 'username', 'secret')) {
  echo "Authentication Successful!\n";
} else {
  die('Authentication Failed...');
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_1" />
      <property ref="FTP_13" />
      <property ref="Crack_2" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_auth_pubkey_file">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22, array('hostkey'=>'ssh-rsa'));

if (ssh2_auth_pubkey_file($connection, 'username',
                          '/home/username/.ssh/id_rsa.pub',
                          '/home/username/.ssh/id_rsa', 'secret')) {
  echo "Public Key Authentication Successful\n";
} else {
  die('Public Key Authentication Failed');
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_1" />
      <property ref="FTP_13" />
      <property ref="ssh2_2" />
      <property ref="ssh2_3" />
      <property ref="OpenSSL_15" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_connect">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
/* Notify the user if the server terminates the connection */
function my_ssh_disconnect($reason, $message, $language) {
  printf("Server disconnected with reason code [%d] and message: %s\n",
         $reason, $message);
}

$methods = array(
  'kex' => 'diffie-hellman-group1-sha1',
  'client_to_server' => array(
    'crypt' => '3des-cbc',
    'comp' => 'none'),
  'server_to_client' => array(
    'crypt' => 'aes256-cbc,aes192-cbc,aes128-cbc',
    'comp' => 'none'));

$callbacks = array('disconnect' => 'my_ssh_disconnect');

$connection = ssh2_connect('shell.example.com', 22, $methods, $callbacks);
if (!$connection) die('Connection failed');
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="FTP_4" />
      <property ref="FTP_5" />
      <property kind="parameter" name="methods" type="array"  />
      <property kind="parameter" name="callbacks" type="array"  />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_exec">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

$stream = ssh2_exec($connection, '/usr/local/bin/php -i');
?>]]></description>
      </property>
      <property kind="return" type="stream" />	
      <property ref="ssh2_1" />
      <property ref="FTP_7" />
      <property ref="Program Execution_10" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_fetch_stream">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

$stdio_stream = ssh2_shell($connection);
$stderr_stream = ssh2_fetch_stream($stdio_stream, SSH2_STREAM_STDERR);
?>]]></description>
      </property>
      <property ref="ret_stream" />
      <property kind="parameter" name="channel" type="stream" required="1" />
      <property kind="parameter" name="streamid" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_fingerprint">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$known_host = '6F89C2F0A719B30CC38ABDF90755F2E4';

$connection = ssh2_connect('shell.example.com', 22);

$fingerprint = ssh2_fingerprint($connection,
               SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX);

if ($fingerprint != $known_host) {
  die("HOSTKEY MISMATCH!\n" .
      "Possible Man-In-The-Middle Attack?");
}
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="ssh2_1" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_methods_negotiated">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
$methods = ssh2_methods_negotiated($connection);

echo "Encryption keys were negotiated using: {$methods['kex']}\n";
echo "Server identified using an {$methods['hostkey']} with ";
echo "fingerprint: " . ssh2_fingerprint($connection) . "\n";

echo "Client to Server packets will use methods:\n";
echo "\tCrypt: {$methods['client_to_server']['crypt']}\n";
echo "\tComp: {$methods['client_to_server']['comp']}\n";
echo "\tMAC: {$methods['client_to_server']['mac']}\n";

echo "Server to Client packets will use methods:\n";
echo "\tCrypt: {$methods['server_to_client']['crypt']}\n";
echo "\tComp: {$methods['server_to_client']['comp']}\n";
echo "\tMAC: {$methods['server_to_client']['mac']}\n";

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="ssh2_1" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_scp_recv">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

ssh2_scp_recv($connection, '/remote/filename', '/local/filename');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_1" />
      <property ref="FTP_9" />
      <property ref="FTP_12" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_scp_send">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

ssh2_scp_send($connection, '/local/filename', '/remote/filename', 0644);
?>]]></description>
      </property>
      <property ref="ret_stream" />
      <property ref="ssh2_1" />
      <property ref="FTP_12" />
      <property ref="FTP_9" />
      <property kind="parameter" name="create_mode" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

$sftp = ssh2_sftp($connection);

$stream = fopen("ssh2.sftp://$sftp/path/to/file", 'r');
?>]]></description>
      </property>
      <property ref="ret_resource" />
      <property ref="ssh2_1" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_lstat">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

$sftp = ssh2_sftp($connection);
$statinfo = ssh2_lstat($sftp, '/path/to/symlink');

$filesize = $statinfo['size'];
$group = $statinfo['gid'];
$owner = $statinfo['uid'];
$atime = $statinfo['atime'];
$mtime = $statinfo['mtime'];
$mode = $statinfo['mode'];
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property kind="parameter" name="sftp" type="resource" required="1" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_mkdir">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connet('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');
$sftp = ssh2_sftp($connection);

ssh2_sftp_mkdir($sftp, '/home/username/newdir');
/* Or:  mkdir("ssh2.sftp://$sftp/home/username/newdir"); */
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_10" />
      <property ref="Filesystem_24" />
      <property ref="Arrays_43" />
      <property ref="FTP_15" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_readlink">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');
$sftp = ssh2_sftp($connection);

$target = ssh2_sftp_readlink($sftp, '/tmp/mysql.sock');
/* $target is now (e.g.): '/var/run/mysql.sock' */
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="ssh2_10" />
      <property ref="Filesystem_20" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_realpath">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');
$sftp = ssh2_sftp($connection);

$realpath = ssh2_sftp_realpath($sftp, '/home/username/../../../..//./usr/../etc/passwd');
/* $realpath is now: '/etc/passwd' */
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="ssh2_10" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_rename">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');
$sftp = ssh2_sftp($connection);

ssh2_sftp_rename($sftp, '/home/username/oldname', '/home/username/newname');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_10" />
      <property ref="Strings_6" />
      <property ref="IMAP_21" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_rmdir">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connet('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');
$sftp = ssh2_sftp($connection);

ssh2_sftp_rmdir($sftp, '/home/username/deltodel');
/* Or:  rmdir("ssh2.sftp://$sftp/home/username/dirtodel"); */
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_10" />
      <property ref="Filesystem_24" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_stat">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

$sftp = ssh2_sftp($connection);
$statinfo = ssh2_stat($sftp, '/path/to/symlink');

$filesize = $statinfo['size'];
$group = $statinfo['gid'];
$owner = $statinfo['uid'];
$atime = $statinfo['atime'];
$mtime = $statinfo['mtime'];
$mode = $statinfo['mode'];
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="ssh2_10" />
      <property ref="Directories_3" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_symlink">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');
$sftp = ssh2_sftp($connection);

ssh2_sftp_symlink($sftp, '/var/run/mysql.sock', '/tmp/mysql.sock');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_10" />
      <property ref="DOM_11" />
      <property ref="Filesystem_20" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_sftp_unlink">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');
$sftp = ssh2_sftp($connection);

ssh2_sftp_unlink($sftp, '/home/username/stale_file');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="ssh2_10" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_shell">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_password($connection, 'username', 'password');

$stream = ssh2_shell($connection, 'vt102', null, 80, 24, SSH2_TERM_UNIT_CHARS);
?>]]></description>
      </property>
      <property ref="ret_stream" />
      <property ref="ssh2_1" />
      <property kind="parameter" name="term_type" type="string"  />
      <property ref="Program Execution_10" />
      <property ref="Exif_5" />
      <property ref="Exif_6" />
      <property kind="parameter" name="width_height_type" type="int"  />
    </properties>
    
  </element>
  <element kind="function" name="ssh2_tunnel">
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$connection = ssh2_connect('shell.example.com', 22);
ssh2_auth_pubkey_file($connection, 'username', 'id_dsa.pub', 'id_dsa');

$tunnel = ssh2_tunnel($connection, '10.0.0.101', 12345);
?>]]></description>
      </property>
      <property ref="ret_stream" />
      <property ref="ssh2_1" />
      <property ref="FTP_4" />
      <property ref="APD_8" />
    </properties>
    
  </element>
</group>
<group name="tidy">
  <description><![CDATA[Tidy Functions]]></description>
  <element kind="function" name="ob_tidyhandler">
    <description><![CDATA[   ob_tidyhandler is intended to be used as a  callback function for ob_start to repair the buffer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ob_start('ob_tidyhandler');

echo '<p>test</i>';
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Strings_35" />
      <property ref="Arrays_43" />
    </properties>
    
  </element>
  <element kind="function" name="tidy::__construct">
    <description><![CDATA[   tidy::__construct constructs a new tidy object.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$html = <<< HTML

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><title>title</title></head>
<body>
<p>paragraph <bt />
text</p>
</body></html>

HTML;

$tidy = new tidy;
$tidy->parseString($html);

$tidy->CleanRepair();

if ($tidy->errorBuffer) {
    echo "The following errors were detected:\n";
    echo $tidy->errorBuffer;
}

?>]]></description>
      </property>
      <property kind="return" type="tidy" />	
      <property ref="ClibPDF_38" />
      <property kind="parameter" name="config" type="mixed"  />
      <property ref="DOM XML_4" />
      <property ref="Filesystem_9" />
    </properties>
    
  </element>
  <element kind="function" name="tidyNode->isAsp">
    <description><![CDATA[  This functions returns if the current node is ASP, or  otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidyNode->isPhp">
    <description><![CDATA[  Returns if the current node is PHP code, otherwise.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$html = <<< HTML
<html><head>
<?php echo '<title>title</title>'; ?>
</head>
<body>

<?php
echo 'hello world!';
?>

</body></html>
HTML;


$tidy = tidy_parse_string($html);
$num = 0;

get_php($tidy->html());


function get_php($node) {

    // check if the current node is PHP code
    if($node->isPhp()) {
        echo "\n\n# PHP node #" . ++$GLOBALS['num'] . "\n";
        echo $node->value;
    }

    // check if the current node has childrens
    if($node->hasChildren()) {
        foreach($node->child as $child) {
            get_php($child);
        }
    }
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_access_count">
    <description><![CDATA[   tidy_access_count returns the number of  accessibility warnings found for the specified document.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$html ='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><title>Title</title></head>
<body>

<p><img src="img.png"></p>

</body></html>';


// select the accessibility check level: 1, 2 or 3
$config = array('accessibility-check' => 3);

$tidy = new tidy();
$tidy->parseString($html, $config);
$tidy->CleanRepair();

/* Never forget to call this! */
$tidy->diagnose();

echo tidy_access_count($tidy); //5

?>]]></description>
      </property>
      <property ref="ret_int" />
      <property kind="parameter" name="object" type="tidy" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_clean_repair">
    <description><![CDATA[  This function cleans and repairs the given tidy   object .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>test</I>';

$tidy = tidy_parse_string($html);
tidy_clean_repair($tidy);

echo $tidy;
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_config_count">
    <description><![CDATA[   tidy_config_count returns the number of errors  encountered in the configuration of the specified tidy   object .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>test</I>';

$config = array('doctype' => 'bogus');

$tidy = tidy_parse_string($html, $config);

/* This outputs 1, because 'bogus' isn't a valid doctype */
echo tidy_config_count($tidy);
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_diagnose">
    <description><![CDATA[   tidy_diagnose runs diagnostic tests on the given  tidy object , adding some more information about  the document in the error buffer.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$html = <<< HTML
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<p>paragraph</p>
HTML;

$tidy = tidy_parse_string($html);
$tidy->CleanRepair();

// note the difference between the two outputs
echo tidy_get_error_buffer($tidy) . "\n";

$tidy->diagnose();
echo tidy_get_error_buffer($tidy);

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_error_count">
    <description><![CDATA[   tidy_error_count returns the number of Tidy errors  encountered for the specified document.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>test</i>
<bogustag>bogus</bogustag>';

$tidy = tidy_parse_string($html);

echo tidy_error_count($tidy) . "\n"; //1

echo $tidy->ErrorBuffer;
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_body">
    <description><![CDATA[  This function returns a tidyNode object starting from the < body >  tag of the tidy parse tree.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '
<html>
  <head>
    <title>test</title>
  </head>
  <body>
    <p>paragraph</p>
  </body>
</html>';

$tidy = tidy_parse_string($html);

$body = tidy_get_body($tidy);
echo $body->value;
?>]]></description>
      </property>
      <property kind="return" type="tidyNode" />	
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_config">
    <description><![CDATA[   tidy_get_config returns an array with the  configuration options in use by the given tidy   object .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>test</p>';
$config = array('indent' => TRUE,
                'output-xhtml' => TRUE,
                'wrap' => 200);

$tidy = tidy_parse_string($html, $config);

print_r(tidy_get_config($tidy));
?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_error_buffer">
    <description><![CDATA[ Object oriented style (property):]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>paragraph</p>';

$tidy = tidy_parse_string($html);

echo tidy_get_error_buffer($tidy);
/* or in OO: */
echo $tidy->errorBuffer;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_head">
    <description><![CDATA[  This function returns a tidyNode object starting from the < head >  tag of the tidy parse tree.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '
<html>
  <head>
    <title>test</title>
  </head>
  <body>
    <p>paragraph</p>
  </body>
</html>';

$tidy = tidy_parse_string($html);

$head = tidy_get_head($tidy);
echo $head->value;
?>]]></description>
      </property>
      <property ref="ret_tidyNode" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_html">
    <description><![CDATA[  This function returns a tidyNode object starting from the < html >  tag of the tidy parse tree.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '
<html>
  <head>
    <title>test</title>
  </head>
  <body>
    <p>paragraph</p>
  </body>
</html>';

$tidy = tidy_parse_string($html);

$html = tidy_get_html($tidy);
echo $html->value;
?>]]></description>
      </property>
      <property ref="ret_tidyNode" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_html_ver">
    <description><![CDATA[   tidy_get_html_ver returns the detected HTML version  for the specified tidy object .  ]]></description>
    <properties>
      <property ref="ret_int" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_output">
    <description><![CDATA[   tidy_get_output returns a string with the repaired  html.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$html = '<p>paragraph</i>';
$tidy = tidy_parse_string($html);

$tidy->CleanRepair();

echo tidy_get_output($tidy);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_release">
    <description><![CDATA[  This function returns a string with the release date of the Tidy library.  ]]></description>
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_root">
    <description><![CDATA[  Returns a tidyNode object representing the root of the tidy parse tree.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$html = <<< HTML
<html><body>

<p>paragraph</p>
<br/>

</body></html>
HTML;

$tidy = tidy_parse_string($html);
dump_nodes($tidy->root(), 1);


function dump_nodes($node, $indent) {

    if($node->hasChildren()) {
        foreach($node->child as $child) {
            echo str_repeat('.', $indent*2) . ($child->name ? $child->name : '"'.$child->value.'"'). "\n";

            dump_nodes($child, $indent+1);
        }
    }
}
?>]]></description>
      </property>
      <property ref="ret_tidyNode" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_get_status">
    <description><![CDATA[   tidy_get_status returns the status for the specified  tidy object . It returns 0 if no error/warning  was raised, 1 for warnings or accessibility errors, or 2 for errors.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>paragraph</i>';
$tidy = tidy_parse_string($html);

$html2 = '<bogus>test</bogus>';
$tidy2 = tidy_parse_string($html2);

echo tidy_get_status($tidy); //1

echo tidy_get_status($tidy2); //2
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_getopt">
    <description><![CDATA[   tidy_getopt returns the value of the specified   option for the specified tidy   object . The return type depends on the type  of the specified option . You will find a list with  each configuration option and their types at: .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php

$html ='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2//EN">
<html><head><title>Title</title></head>
<body>

<p><img src="img.png"></p>

</body></html>';

$config = array('accessibility-check' => 3,
                'alt-text' => 'some text');

$tidy = new tidy();
$tidy->parseString($html, $config);


var_dump($tidy->getOpt('accessibility-check')); //integer
var_dump($tidy->getOpt('lower-literals')); //boolean
var_dump($tidy->getOpt('alt-text')); //string

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="tidy_2" />
      <property ref="Printer_28" />
      <property ref="Printer_28" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_is_xhtml">
    <description><![CDATA[  This function returns if the specified tidy   object is a XHTML document, or otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_is_xml">
    <description><![CDATA[  This function returns if the specified tidy   object is a generic XML document (non HTML/XHTML),  or otherwise.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_load_config">
    <description><![CDATA[  This function loads a Tidy configuration file, with the specified   encoding .  ]]></description>
    <properties>
      <property ref="ret_void" />
      <property ref="Apache_3" />
      <property ref="ClibPDF_52" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->children">
    <properties>
      <property ref="ret_array" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->get_attr">
    <properties>
      <property kind="return" type="tidy_attr" />	
      <property kind="parameter" name="attrib_id" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->get_nodes">
    <properties>
      <property ref="ret_array" />
      <property kind="parameter" name="node_id" type="int" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->hasChildren">
    <description><![CDATA[  This function was named tidy_node->has_children in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->hasSiblings">
    <description><![CDATA[  This function was named tidy_node->has_siblings in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->isComment">
    <description><![CDATA[  This function was named tidy_node->is_comment in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->isHtml">
    <description><![CDATA[  This function was named tidy_node->is_html in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->isJste">
    <description><![CDATA[  This function was named tidy_node->is_jste in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->isText">
    <description><![CDATA[  This function was named tidy_node->is_text in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->isXhtml">
    <description><![CDATA[  This functions was named tidy_node->is_xhtml in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->isXml">
    <description><![CDATA[  This function was named tidy_node->is_xml in  PHP 4/Tidy 1.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->next">
    <properties>
      <property kind="return" type="tidy_node" />	
    </properties>
    
  </element>
  <element kind="function" name="tidy_node->prev">
    <properties>
      <property ref="ret_tidy_node" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_parse_file">
    <description><![CDATA[  This function parses the given file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$tidy = tidy_parse_file('file.html');

$tidy->cleanRepair();
    
if(!empty($tidy->errorBuffer)) {
    echo "The following errors or warnings occured:\n";
    echo $tidy->errorBuffer;
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="tidy_1" />
      <property ref="DOM XML_4" />
      <property ref="Filesystem_9" />
      <property ref="Apache_3" />
      <property ref="tidy_1" />
      <property ref="DOM XML_4" />
      <property ref="Filesystem_9" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_parse_string">
    <description><![CDATA[   tidy_parse_string parses a document stored in a  string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ob_start();
?>

<html>
  <head>
   <title>test</title>
  </head>
  <body>
   <p>error<br>another line</i>
  </body>
</html>

<?php

$buffer = ob_get_clean();
$config = array('indent' => TRUE,
                'output-xhtml' => TRUE,
                'wrap' => 200);

$tidy = tidy_parse_string($buffer, $config, 'UTF8');

$tidy->cleanRepair();
echo $tidy;
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Strings_35" />
      <property ref="tidy_1" />
      <property ref="DOM XML_4" />
      <property ref="Strings_35" />
      <property ref="tidy_1" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_repair_file">
    <description><![CDATA[  This function repairs the given file and returns it as a string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'file.html';

$repaired = tidy_repair_file($file);
rename($file, $file . '.bak');

file_put_contents($file, $repaired);
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Apache_3" />
      <property ref="tidy_1" />
      <property ref="DOM XML_4" />
      <property ref="Filesystem_9" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_repair_string">
    <description><![CDATA[  This function repairs the given string.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
ob_start();
?>

<html>
  <head>
    <title>test</title>
  </head>
  <body>
    <p>error</i>
  </body>
</html>

<?php

$buffer = ob_get_clean();
$tidy = tidy_repair_string($buffer);

echo $tidy;
?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Bzip2_7" />
      <property ref="tidy_1" />
      <property ref="DOM XML_4" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_reset_config">
    <description><![CDATA[  This function restores the Tidy configuration to the default values.  ]]></description>
    <properties>
      <property ref="ret_bool" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_save_config">
    <description><![CDATA[   tidy_save_config saves current settings to the  specified file. Only non-default values are written.  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_set_encoding">
    <description><![CDATA[  Sets the encoding for input/output documents.  Possible values for encoding are  ascii, latin0, latin1, raw, utf8, iso2022, mac, win1252, ibm858, utf16,  utf16le, utf16be, big5 and shiftjis  ]]></description>
    <properties>
      <property ref="ret_bool" />
      <property ref="ClibPDF_52" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_setopt">
    <description><![CDATA[   tidy_setopt updates the specified   option with a new value .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>test</i>';

$tidy = tidy_parse_string($html);

tidy_setopt('indent', FALSE);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Printer_28" />
      <property ref="Arrays_14" />
    </properties>
    
  </element>
  <element kind="function" name="tidy_warning_count">
    <description><![CDATA[   tidy_warning_count returns the number of Tidy warnings  encountered for the specified document.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$html = '<p>test</i>
<bogustag>bogus</bogustag>';

$tidy = tidy_parse_string($html);

echo tidy_error_count($tidy) . "\n"; //1
echo tidy_warning_count($tidy) . "\n"; //5
?>]]></description>
      </property>
      <property ref="ret_int" />
      <property ref="tidy_2" />
    </properties>
    
  </element>
</group>
<group name="vpopmail">
  <description><![CDATA[vpopmail Functions]]></description>
  <element kind="function" name="vpopmail_add_alias_domain">
    <properties>
      <property ref="ret_bool" />
      <property ref="YP/NIS_1" />
      <property kind="parameter" name="aliasdomain" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_add_alias_domain_ex">
    <properties>
      <property ref="ret_bool" />
      <property kind="parameter" name="olddomain" type="string" required="1" />
      <property kind="parameter" name="newdomain" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_add_domain">
    <properties>
      <property ref="ret_bool" />
      <property ref="YP/NIS_1" />
      <property ref="Filesystem_25" />
      <property ref="ICAP_4" />
      <property ref="POSIX_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_add_domain_ex">
    <properties>
      <property ref="ret_bool" />
      <property ref="YP/NIS_1" />
      <property kind="parameter" name="passwd" type="string" required="1" />
      <property kind="parameter" name="quota" type="string"  />
      <property kind="parameter" name="bounce" type="string"  />
      <property kind="parameter" name="apop" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_add_user">
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_14" />
      <property ref="YP/NIS_1" />
      <property ref="Crack_2" />
      <property kind="parameter" name="gecos" type="string"  />
      <property ref="vpopmail_7" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_alias_add">
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_14" />
      <property ref="YP/NIS_1" />
      <property kind="parameter" name="alias" type="string" required="1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_alias_del">
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_14" />
      <property ref="YP/NIS_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_alias_del_domain">
    <properties>
      <property ref="ret_bool" />
      <property ref="YP/NIS_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_alias_get">
    <properties>
      <property ref="ret_array" />
      <property ref="vpopmail_9" />
      <property ref="YP/NIS_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_alias_get_all">
    <properties>
      <property ref="ret_array" />
      <property ref="YP/NIS_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_auth_user">
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_14" />
      <property ref="YP/NIS_1" />
      <property ref="Crack_2" />
      <property kind="parameter" name="apop" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_del_domain">
    <properties>
      <property ref="ret_bool" />
      <property ref="YP/NIS_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_del_domain_ex">
    <properties>
      <property ref="ret_bool" />
      <property ref="YP/NIS_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_del_user">
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_14" />
      <property ref="YP/NIS_1" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_error">
    <properties>
      <property ref="ret_string" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_passwd">
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_14" />
      <property ref="YP/NIS_1" />
      <property ref="Crack_2" />
      <property ref="vpopmail_7" />
    </properties>
    
  </element>
  <element kind="function" name="vpopmail_set_user_quota">
    <properties>
      <property ref="ret_bool" />
      <property ref="DB++_14" />
      <property ref="YP/NIS_1" />
      <property kind="parameter" name="quota" type="string" required="1" />
    </properties>
    
  </element>
</group>
<group name="xattr">
  <description><![CDATA[xattr Functions]]></description>
  <element kind="function" name="xattr_get">
    <description><![CDATA[  This function gets the value of an extended attribute of a file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = '/usr/local/sbin/some_binary';
$signature = xattr_get($file, 'Root signature', XATTR_ROOT);

/* ... check if $signature is valid ... */

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="Apache_3" />
      <property ref="CCVS_7" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="xattr_list">
    <description><![CDATA[  This functions gets a list of names of extended attributes of a file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'some_file';
$root_attributes = xattr_list($file, XATTR_ROOT);
$user_attributes = xattr_list($file);

echo "Root attributes: \n";
foreach ($root_attributes as $attr_name) {
    printf("%s\n", $attr_name);
}

echo "\n User attributes: \n";
foreach ($attributes as $attr_name) {
    printf("%s\n", $attr_name);
}

?>]]></description>
      </property>
      <property ref="ret_array" />
      <property ref="Apache_3" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="xattr_remove">
    <description><![CDATA[  This function removes an extended attribute of a file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'some_file';
$attributes = xattr_list($file);

foreach ($attributes as $attr_name) {
    xattr_remove($file, $attr_name);
}
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="CCVS_7" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="xattr_set">
    <description><![CDATA[  This function sets the value of an extended attribute of a file.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'my_favourite_song.wav';
xattr_set($file, 'Artist', 'Someone');
xattr_set($file, 'My ranking', 'Good');
xattr_set($file, 'Listen count', '34');

/* ... other code ... */

printf("You've played this song %d times", xattr_get($file, 'Listen count')); 
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="CCVS_7" />
      <property ref="Apache_6" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="xattr_supported">
    <description><![CDATA[  This functions checks if the filesystem holding the given file supports  extended attributes. Read access to the file is required.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$file = 'some_file';

if (xattr_supported($file)) {
    /* ... make use of some xattr_* functions ... */
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Apache_3" />
      <property ref="COM_29" />
    </properties>
    
  </element>
</group>
<group name="xdiff">
  <description><![CDATA[xdiff Functions]]></description>
  <element kind="function" name="xdiff_file_diff">
    <description><![CDATA[   xdiff_file_diff makes unified diff of files   file1 and file2 and stores  result in file dest .   context indicated how many lines of context you  want to include in diff result. Set minimal to   if you want to minimalize size of diff (can take a long time).  Resulting file is human-readable.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_version = 'my_script.php';
$new_version = 'my_new_script.php';

xdiff_file_diff($old_version, $new_version, 'my_script.diff', 2);
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property kind="parameter" name="file1" type="string" required="1" />
      <property kind="parameter" name="file2" type="string" required="1" />
      <property ref="Filesystem_4" />
      <property kind="parameter" name="context" type="int"  />
      <property kind="parameter" name="minimal" type="bool"  />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_file_diff_binary">
    <description><![CDATA[   xdiff_file_diff_binary makes binary diff of files   file1 and file2 and stores  result in file dest . This function works with both text  and binary files. Resulting file is in binary format.  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_version = 'my_script_1.0.tgz';
$new_version = 'my_script_1.1.tgz';

xdiff_file_diff_binary($old_version, $new_version, 'my_script.bdiff');
?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="xdiff_1" />
      <property ref="xdiff_2" />
      <property ref="Filesystem_4" />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_file_merge3">
    <description><![CDATA[   xdiff_file_merge3 merges files   file1 , file2 and   file3 into one and stores result in file   dest .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_version = 'original_script.php';
$fix1 = 'script_with_fix1.php';
$fix2 = 'script_with_fix2.php';

$errors = xdiff_file_merge3($old_version, $fix1, $fix2, 'fixed_script.php');
if (is_string($errors)) {
    echo "Rejects:\n";
    echo $errors;
}
?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="xdiff_1" />
      <property ref="xdiff_2" />
      <property kind="parameter" name="file3" type="string" required="1" />
      <property ref="Filesystem_4" />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_file_patch">
    <description><![CDATA[   xdiff_file_patch patches file   file with unified patch in file   patch and stores result in file   dest .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_version = 'my_script-1.0.php';
$patch = 'my_script.patch';

$errors = xdiff_file_patch($old_version, $patch, 'my_script-1.1.php');
if (is_string($errors)) {
   echo "Rejects:\n";
   echo $errors;
}

?>

     

<?php
$new_version = 'my_script-1.1.php';
$patch = 'my_script.patch';

$errors = xdiff_file_patch($new_version, $patch, 'my_script-1.0.php', XDIFF_PATCH_REVERSE);
if (is_string($errors)) {
   echo "Rejects:\n";
   echo $errors;
}

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="Filesystem_5" />
      <property kind="parameter" name="patch" type="string" required="1" />
      <property ref="Filesystem_4" />
      <property ref="COM_29" />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_file_patch_binary">
    <description><![CDATA[   xdiff_file_patch_binary patches file   file with binary patch in file   patch and stores result in file   dest .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_version = 'archive-1.0.tgz';
$patch = 'archive.bpatch';

$result = xdiff_file_patch_binary($old_version, $patch, 'archive-1.1.tgz');
if ($result) {
   echo "File patched";
} else {
   echo "File couldn't be patched";
}

?>]]></description>
      </property>
      <property ref="ret_bool" />
      <property ref="Filesystem_5" />
      <property ref="xdiff_6" />
      <property ref="Filesystem_4" />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_string_diff">
    <description><![CDATA[   xdiff_string_diff makes unified diff of strings   str1 and str2 .   context indicated how many lines of context you  want to include in diff result. Set minimal to   if you want to minimalize size of diff (can take a long time).  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_article = file_get_contents('./old_article.txt');
$new_article = $_REQUEST['article']; /* Let's say that someone pasted a new article to html form */

$diff = xdiff_string_diff($old_article, $new_article, 1);
if (is_string($diff)) {
    echo "Differences between two articles:\n";
    echo $diff;
}

?>]]></description>
      </property>
      <property ref="ret_mixed" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
      <property ref="xdiff_3" />
      <property ref="xdiff_4" />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_string_diff_binary">
    <description><![CDATA[   xdiff_string_diff_binary makes binary diff of  strings str1 and str2 .  ]]></description>
    <properties>
      <property ref="ret_mixed" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_string_merge3">
    <description><![CDATA[   xdiff_string_merge3 merges strings   str1 , str2 and   str3 into one.  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="FDF_28" />
      <property ref="FDF_29" />
      <property kind="parameter" name="str3" type="string" required="1" />
      <property kind="parameter" name="error" type="string"  />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_string_patch">
    <description><![CDATA[   xdiff_string_patch patches string   str with unified patch in string   patch .  ]]></description>
    <properties>
      <property kind="example">
        <description><![CDATA[<?php
$old_article = file_get_contents('./old_article.txt');
$diff = $_SERVER['patch']; /* Let's say that someone pasted a patch to html form */

$errors = '';

$new_article = xdiff_string_patch($old_article, $diff, XDIFF_PATCH_NORMAL, $errors);
if (is_string($new_article)) {
    echo "New article:\n";
    echo $new_article;
}

if (strlen($errors)) {
    echo "Rejects: \n";
    echo $errors;
}

?>]]></description>
      </property>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="xdiff_6" />
      <property ref="COM_29" />
      <property ref="xdiff_8" />
    </properties>
    
  </element>
  <element kind="function" name="xdiff_string_patch_binary">
    <description><![CDATA[   xdiff_string_patch_binary patches string   str with binary patch in string   patch .  ]]></description>
    <properties>
      <property ref="ret_string" />
      <property ref="DOM XML_14" />
      <property ref="xdiff_6" />
    </properties>
    
  </element>
</group>

</ref>
